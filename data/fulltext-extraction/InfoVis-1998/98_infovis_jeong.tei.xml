<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Reconfigurable Disc Trees for Visualizing Large Hierarchical Information Space</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang-Sung</forename><surname>Jeong</surname></persName>
							<email>csjeong@charlie.korea.ac.kr</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Electronics Engineering Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Alex Pang</orgName>
								<orgName type="institution" key="instit2">Korea University</orgName>
								<orgName type="institution" key="instit3">University of California Seoul</orgName>
								<address>
									<settlement>Santa Cruz</settlement>
									<country>Korea, California</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Reconfigurable Disc Trees for Visualizing Large Hierarchical Information Space</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Information visualization</term>
					<term>disc tree</term>
					<term>compact disc tree</term>
					<term>plane disc tree</term>
					<term>hierarchy</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a new visualization technique, called (Reconfigurable Disc Tree) which can alleviate the disadvantages of cone trees significantly for large hierarchies while maintaining its context of using 3D depth. In , each node is associated with a disc around which its children are placed. Using discs instead of cones as the basic shape in has several advantages: significant reduction of occluded region, sharp increase in number of displayed nodes, and easy projection onto plane without visual overlapping. We show that can greatly enhance user perception by transforming its shapes dynamically in several ways: (1) disc tree which can significantly reduce the occluded region by the foreground objects, (2) compact disc tree which can increase the number of nodes displayed on the screen, and (3) plane disc tree which can be mapped onto the plane without visual overlapping. We describe an implementation of our visualization system called VISIT (Visual Information System for reconfigurable dIsc Tree). It provides 2D and 3D layouts for and various user interface features such as tree reconfiguration, tree transformation, tree shading, viewing transformation, animation, selection and browsing which can enhance the user perception and navigation capabilities. We also evaluate our system using the following three metrics: percentage of occlusion, density of displayed nodes on a screen. number of identifiable nodes.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Information access and management is difficult in large information spaces, because it is hard to visualize what is there and how the various parts are related. Due to the remarkable advances in technologies for 3D visualization and interactive display potential solutions can be offered to these large scale cognition tasks. Information visualization provides several techniques to visualize the structure of information. With these techniques, a user can easily understand the relationship among pieces of information such as hierarchy, closeness, and importance through the visual representation.</p><p>Hierarchical structures are used in many different applications <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b3">[4]</ref><ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref><ref type="bibr" target="#b6">[7]</ref><ref type="bibr" target="#b7">[8]</ref>. They are flexible in storing structural information. In some cases, arbitrary graphs can be transformed into hierarchies. Cone tree is one of the visualization techniques for presenting hierarchical information structures <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8]</ref>.</p><p>Cone tree is a three dimensional representation of hierarchical information. The node of a tree is located at the apex of a cone and all the children are arranged around the circular base of the cone in three dimensions. By representing hierarchies using cone trees, the entire hierarchy may be presented at once where a 2D layout of the same hierarchy may not fit on the screen. However, parts of the cone tree may not be visible to the user, and they then tend to produce visual clutter when more than 1000 nodes are presented <ref type="bibr" target="#b7">[8]</ref>.</p><p>A simple node layout algorithm for cone trees often produces satisfactory results for small trees, but not inadequate for large hierarchies. A new layout algorithm was proposed to reduce the visual clutter for large hierarchy <ref type="bibr" target="#b4">[5]</ref>. However, though it can eliminate the overlap of individual cones in the three dimensional tree, it can not prevent the visual overlap when the three dimensional representation is projected into two dimensions, i.e. causing the occlusion of background objects by foreground objects. Also, the previous cone tree representation cannot be mapped onto a planar surface without visual overlap.</p><p>In this paper, we present a new visualization technique, called (Reconfigurable Disc Tree) which can alleviate the disadvantages of the previous cone trees. This is described in Section 2. In Section 3, we describe an implementation of which we refer to as VISIT. This is followed by examples showing different applications of in Section 4. Section 5 discusses user perception capabilities of our system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RDT Model</head><p>is a hierarchical structure which can be laid out in various ways in two or three dimensions in order to prevent the occlusion of objects and reduce visual clutter. It provides users with great flexibility in searching through the tree by allowing them to manipulate its shape. We first introduce some notations and definitions to give a more formal definition for . <ref type="figure" target="#fig_0">Figure 1a</ref> illustrates the first four definitions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1:</head><p>Let be a tree with a finite list of nodes ( ) and edges ( ). For node in , let be its parent node and be a set of its children. Let denote the number of children for node . We associate each node with its disc around which its children in are placed. Let be a center and be a radius of respectively. Let outer-radius (see also <ref type="figure">Figures 2 and 3</ref>) be the minimum radius of the circle which covers all the descendants of when they are mapped onto the same plane where lies. Let outer-disc for node be a disc with radius equal to .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2:</head><p>We define a reference point for node as the intersection point between vertical line and horizontal lines passing through and respectively, and an apex point as the point which lies on the vertical line between and .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 3:</head><p>We define apex height and reference height as the vertical heights of and from respectively. We define reference length as the length between and . Each node is associated with its attribute set = , , which consists of reference length, apex and reference heights. We assume that for each edge , is the parent of , and a root of the tree is at level 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4:</head><p>A reconfigurable disc tree is a tree with each edge consisting of polylines <ref type="bibr">[( , ( , )</ref>, ( ] where each length can be changed. can transform its shape into various forms by changing components in attribute set , and can be broadly classified into 2D and 3D as follows:</p><formula xml:id="formula_0">Definition 5:</formula><p>We define a 3D as one with zero reference length , and a 2D with nonzero reference length and zero reference height for every node respectively. Figure 1b and 1c illustrates a 3D and a 2D respectively.</p><p>Note that each node in the 3D is identical to its reference point , and each center point in the 2D is identical to its reference point . A 3D can change its shape into a disc tree <ref type="figure" target="#fig_0">(Figure 1d</ref>) or a compact disc tree ( <ref type="figure" target="#fig_0">Figure 1e</ref>) by changing apex and reference heights as follows:</p><formula xml:id="formula_1">Definition 6: A disc tree is a 3D</formula><p>with zero apex and nonzero reference heights for each node. A compact disc tree is a 3D with both of reference and apex heights equal to zero for each node at odd levels and with the identical apex and reference heights for each node at even levels. A plane disc tree <ref type="figure" target="#fig_0">(Figure 1c)</ref> is a 2D which lies on the plane.</p><p>Therefore, can be easily transformed into disc tree, compact disc tree, plane disc tree by changing reference length, apex and reference heights in attribute set for each node. A traditional cone tree can be considered as one type of 3D with identical apex and reference heights at every level. Color Plate 1 shows various shapes of . Note that the different shapes are based on discs around which the children for each node are placed. In a disc tree, each node is associated with its disc around which its children are placed, and each child is connected to its parent through the center of the disc. Note that in a cone tree, each node is associated with its cone around which its children are placed, and each of its children is directly connected to its parent. In a compact disc tree, each node at even levels has its child in the center of its disc and its grandchildren with as their parent around the circumference of the disc. A plane disc tree is obtained by mapping the disc of each node onto a plane.</p><p>Using discs instead of cones as the basic shape, has several advantages over the cone tree. Disc trees can significantly reduce the region occluded by cone body; compact disc trees can increase the overall number of nodes displayed on the screen by reducing its height in half while providing no 3D overlap among subtrees; plane disc trees provide 2D mapped disc tree structure while eliminating all the visual overlaps among subtrees thereby enhancing the user understanding of the overall structure. Here, occlusion refers to foreground objects obstructing the view of background objects; 3D overlap refers to objects penetrating each other in 3D; and 2D overlap refers to objects being projected on top of each other on the 2D screen. can be viewed as generalized cone trees. Users can freely change the shape of from traditional cone trees to 2D planar disc trees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">RDT Layout</head><p>The goal of the layout algorithm is to avoid or reduce the amount of visual overlap. Our layout algorithm for 2D and 3D calculates the radii of the discs starting from the leaf nodes toward the root. Disc radii are calculated so that the children can be placed around the disc without overlap between their subtrees in either 2D or 3D. In 2D</p><p>, reference lengths are also computed directly from disc radii. Once the radius of the disc is found, the children are directly placed around the disc by linearly allocating enough space based on its outer-radius and proportional to the size of its subtree. After placing nodes around a disc, all we need in order to transform the into various shapes is to change the reference length, apex and reference heights in the attribute set of each level. A disc tree is obtained by setting the apex height and reference length to zero, and the reference height to some non-zero value . A compact disc tree is obtained by setting both of the apex and reference heights to zero for odd numbered levels, and to for even numbered levels. A 2D plane disc tree is obtained by setting both of the apex and reference heights to zero. Details for finding the disc radii for both 2D and 3D cases are described below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3D RDT</head><p>The following procedure shows how we calculate the radius of each disc so that there is no 3D overlap among the subtrees. It is similar to the one in <ref type="bibr" target="#b4">[5]</ref>. Unlike their algorithm, our algorithm can readily handle the case where a node has a small or a large number of children. Procedure returns the disc radius and outer-radius of node by calling itself recursively. In step 1, we check to see if node is a leaf in which case we return an outer-radius of small value so that it can be properly placed in the next lower level. In step 2, we find radius and outer-radius for each child of node . In step 3, we find of node by summing up the diameter of all its children (see <ref type="figure">Figure 2</ref>). In step 4, we find the largest outer-radius among the children and call this</p><p>. We assume that is the approximate sum of the subarcs of which lie inside the children's outer-discs. Then, we can easily see that the following property holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Property 1:</head><p>All the children's outer-discs for node can be placed around without any overlap if is not greater than the circumference of .</p><p>In the following we describe how to find that satisfies the above property. Note that the minimum radius for node should be to avoid any overlap. Hence, in step 5, we check if is smaller than the circumference of with the minimum radius. If so, all the children can be placed properly around with the minimum radius. (See <ref type="figure">Figure 2</ref>:case 2.) This is usually the case when the number of children is small. Otherwise, we use inner sum / 2 as the radius for node . (See <ref type="figure">Figure</ref> 2:case 1.) For both cases, property 1 holds, and hence there arises no 3D overlap. In step 6, is obtained by adding and .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2D RDT</head><p>We present a layout algorithm for plane disc tree with the following goals: First, it should show the familiar context of parent-child relationship as in disc tree so that user can easily associate the structure of plane disc tree with that of disc tree. This reduces the cognitive overhead to follow the overall structure when the disc tree is transformed into a plane disc tree. Secondly, it should enhance the user perception of the overall structure by eliminating all the visual overlaps when mapped onto a 2D plane. The proper allocation of size and location of discs can help the user understand the relationships between the plane disc and the disc tree. We achieve the first goal by placing the smaller children discs around larger parent discs in a similar fashion to disc layout in disc trees. The second goal is achieved by finding the radius and the reference length of each node such that there are no overlaps among the discs when projected. The following procedure shows how it calculates the disc radius, outerradius of node , and the reference length for each of its children. End procedure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Procedure</head><p>Step 1 through 4 are identical to those in 3D layout. We assume that is the approximate sum of the subarcs of the circle which passes through the center of disc for each child. Then, the following property holds similarly as in 3D case. In the following, we describe how to find that satisfies the above property. In step 5, we find the minimal disc radius of node which is proportional to the number of its children by a constant</p><p>. This disc with radius equal to will provide the minimal circumference to accommodate all the children. In order for the children's disc to be smaller than that of the parent, the radius of node should be not smaller than . In step 6, we check if is smaller than the circumference of with as its radius. If so, all the children can be placed properly around a disc with radius equal to (see <ref type="figure">Figure 3</ref>: case 2). This is usually the case when the number of children is small. Otherwise, we use inner sum / 2 as the radius for node (see <ref type="figure">Figure 3</ref>: case 1). In either case, we compare the two values with and pick the larger one. For both cases, property 2 holds, and hence there arises no 2D overlapping. In step 7, we find by adding to . In step 8, reference length is set to for each child. We place the root of plane disc tree at the center of its disc by setting its reference length to zero.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">RDT Operations</head><p>Our visualization system VISIT provides users with the following interactive operations to manipulate the tree hierarchy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tree reconfiguration</head><p>User can change into various shapes such as disc tree, compact disc tree, plane disc tree as well as cone tree by directly selecting the corresponding buttons in the control pannel. Selection of reconfiguration button allows user to dynamically change its shape by controlling reference length, apex and reference heights and to choose the most appropriate one according to the visual condition. Color Plate 2 illustrates the user interface of VISIT, and shows an which is drawn by controlling its apex height to smaller value than its reference height after first selecting shape and then reconfiguration buttons. The right panel of the color plate shows how buttons allow the users to select the shape of the tree, and how sliders allow users to change the attribute set parameters. In addition, users can select different types of projections and shading, and can move the camera, object, and light sources around using either mouse controls or sliders after selecting the corresponding buttons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tree shading</head><p>To enhance the user perception for the parent-child relationship, can be drawn in either wireframe or smoothly shaded mode. In addition, the shaded may be made transparent to allow users to better understand the whole structure of the tree; or be made opaque to allow users to concentrate on the foreground subtrees. Changing the orientation of spot light using mouse movements or sliders allows user to highlight the region of interests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tree transformation</head><p>can be rotated, scaled, and translated using either mouse movements or sliders. This provides users with interactive capability to manipulate the . User may execute these transformations on the entire as well as specific subtrees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Viewing transformation</head><p>can be drawn in 3D orthographic or perspective projection. Perspective projection provides depth cues while orthographic does not. Users can explore in varying detail by zooming in or out and by changing their viewing position interactively using mouse or control panel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Selection and browsing</head><p>User can select a node in with a mouse, and browse the information associated with the selected node. Based on the selected information in the node, the user can move to another node and continue to search through . When a node is selected, the whole is rotated so that all the nodes between the selected node and the root are placed in front of the viewer, and one more selection of the same node allows the user to zoom in the area around the selected node automatically and traverse the tree in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Animation</head><p>Interactive animation also helps users to understand the underlying structure of . VISIT exploits animation in tree reconfiguration, tree and viewing transformations, and selection process to aid the user perception of the underlying structure. When changes its shape, the transformation from the old shape to the new shape is animated to easily follow the structure relationship. When a node is selected, the rotation for all the nodes between the selected node and the root to be placed in front of the viewer is animated. Zoomming into a node and zooming out of the node while browsing is also animated.</p><p>The visualization system for was implemented using OpenGL and Xforms library on an SGI Octane. Aside from pointer to the information associated with each node, each node in the also contains a set of attributes that allow it to be reconfigured to different shapes. Various operations for drawing and selecting subtrees or the entire tree can be efficiently performed by tree traversal in the hierarchical data structure. Reconfiguring among various shapes in 3D such as disc tree, compact disc tree, and cone tree requires no recalculation of node positions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Application Examples</head><p>Numerous applications with large hierarchical information structures can take advantage of . One of the applications we used is a file browser. Here, the is used to represent the directory structure of a Unix file system, with each node representing a directory and each leaf a file (see Color Plate 3). The disc containing the children of a selected node is highlighted. Selecting one of the children from the tree or from the file selector will display the contents of the selected child in a file browser. If the child is a leaf node, then the file contents are displayed. Otherwise, the directory contents are listed. Users can search through the by selecting and browsing nodes of interests interactively. During interactive search, users are aided by several interface features that enhance the perception of the underlying tree structures such as reconfiguration, shading, navigation, and animation.</p><p>The other application is command and control in a collaborative environment.</p><p>s are being implemented now for hierarchical task and organizational structures where each node represents operating task or troop organization. In a collaborative environment, a commanding officer may be working together with the meteorology and logistics officers. Each officer has his own role-specific view (light green plates of Color Plate 4) on top of common view (dark green plates), and on top of his role specific view. Each represents hierarchical structures for task or organization. The role-specific view is the place where the various information related to each officer is visualized, and some part of rolespecific view is also visualized in common view. For example, the information related to type, size, and location of troops may be visualized on the role-specific view of the commander. On the other hand, weather conditions and inventory routing informations can be visualized on the role-specific views of the meteorology and inventory officers respectively. Information to be displayed in either the role-specific or the common views are selected through the . Color Plate 4 shows several represented as cones on top of role-specific view for each officer. Each person has his own . Using someone else's , the commander can look at the different views of other officers. For example, the commanding officer can request some inventory information from the logistics officer, which is then displayed in the common view.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>Metrics for information visualization are used to help designers create and evaluate information visualization techniques. We can evaluate a visualization system from two viewpoints: User perception and interaction capabilities. There are few metrics known for the latter, since attempting to include interactive factors in the metrics adds significant complexity to them <ref type="bibr" target="#b1">[2]</ref>. Since our system provides almost the same interactive capabilities as the previous implementations like animation, navigation, selection and browsing, we concentrate on the user perception capabilities for a static image of the scene.</p><p>For the user perception capabilities of a static image of the scene, we make use of the metrics proposed in <ref type="bibr" target="#b1">[2]</ref>, where the following five metrics are considered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Percentage of Occlusion Density of displayed nodes on a screen Number of identifiable nodes Number of dimensions and cognitive overhead Reference context</head><p>We evaluate and compare our visualization technique on the first three metrics since there are no differences of the last two metrics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Percentage of Occlusion</head><p>We shall show how the reduction of occlusion and the increase of displayed nodes can be obtained by transforming into disc trees and compact disc trees respectively.</p><p>First, let us consider how much the occlusion can be reduced in disc tree compared to cone tree. We assume that the background objects are occluded by the cone and disc respectively in cone and disc trees. <ref type="figure" target="#fig_7">Figures 4a and 4b</ref> show the region occluded by cones and discs respectively. We define the occlusion ratio of a cone tree as the projected area of a cone divided by the minimum rectangle enclosing the cone. Likewise, the occlusion ratio of a disc tree is defined as the projected area of a disc divided by its minimum enclosing rectangle. The occlusion ratios represent the percentage of that is occluded by the cone or disc. Let and be the width and height of . Let be half the height of a projected disc, and be . Then, the occlusion ratio for cone trees can be approximated by Likewise, the occlusion ratio for disc trees can be computed by Then, the relative occlusion ratio is defined by represents how much the occluded region is reduced in disc tree with respect to cone tree. Suppose we rotate the cone around an axis (horizontal) along the top of until only the disc is visible (see <ref type="figure" target="#fig_7">Figures 4d to 4f)</ref>, will change from 0 to . Note that as increases, both and increases, while decreases (see <ref type="figure" target="#fig_7">Figure 4c</ref>). That is, as increases, the relative occlusion decreases.</p><p>is dependent on the viewing position and orientation, and usually ranges from 0 to thereby decreasing the occluded region by about . The occlusion ratio for compact disc trees is between those of disc trees and cone trees because the occlusion is alternately caused by cones at even levels and discs at odd levels. The occlusion ratio for plain disc trees is zero because there are no overlaps among discs when they are projected to 2D. While it is possible that background cones or discs are not occluded by the foreground ones, it is highly probable that the background objects are indeed occluded when the hierarchy is large. Therefore, and are good representations of percentage of occlusions, and is a good measure of relative merit of disc trees over cone trees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Density of Displayed Nodes</head><p>Next, we compare compact disc tree with cone tree using the density of displayed nodes as the metric. We define it as the number of displayed nodes divided by the minimum rectangle enclosing those nodes on the projected screen. For simplicity of analysis, we assume that each node has the same number of children, and the inner sum in 3D layout procedure is large enough to satisfy the condition for case 1. Note that the compact disc tree with levels can be represented in the same depth as cone tree with levels, since it displays every odd and even levels together in the same depth. <ref type="figure" target="#fig_6">Figure 5a</ref> and 5b illustrate notations for density of nodes in cone and compact disc trees respectively. Let and be the number of nodes in the cone tree with levels and compact disc tree with levels respectively. Then, they can be computed by Let denote for node at level . From the procedure for 3D layout, we can easily see that the following relation holds for outer radii between consecutive levels:</p><p>Then, the ratio of outer radii between consecutive levels can be derived by Let denotes for root in cone or compact disc tree with levels. Then, for root in cone tree with levels can be computed by where is for leaf node. Similarly, for root in compact disc tree with levels can be calculated by where is for leaf node. Since each of the outerradii of the roots is equal to the half of the width of , and , each representing the density of nodes in cone and compact disc trees, can be computed by where represents the area of . Then, the relative density ratio of with respect to can be given by</p><p>As we see in <ref type="figure" target="#fig_6">Figure 5c</ref>, the density of displayed nodes can be increased sharply, as increases, by compact disc trees when compared to cone trees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Number of Identifiable Nodes</head><p>The reduction of occlusion ratio and the increase in density of displayed nodes as we discussed in the previous subsections can greatly enhance the percentage of identifiable nodes. However, a lack of screen size gives a practical limitation to the amount of identifiable nodes. We shall compare the identifiable nodes of cone tree with various shapes of under the same condition for the screen size and tree size. Color Plate 5 illustrates how a cone tree with 516 nodes appears more cluttered and therefore with less identifiable nodes than the other shapes in with the same number of nodes. The comparison for the wireframe 3D tree shapes with a balanced tree of about 2000 nodes shows that most of the nodes are identifiable in the disc and compact disc trees. On the other hand, most of the distant nodes are unidentifiable in the cone tree. In our experience, the limit of cone trees is about 1000 identifiable nodes, 3000 nodes for disc trees, and 4000 nodes for compact disc trees. The increase of identifiable nodes in compact disc tree was possible due to the decrease of the overall height which allows the allocation of more space between levels. Plane disc tree can greatly improves the percentage of identifiable nodes, since no visual overlapping between discs arises. However, due to the limit in the density of displayed nodes, most of the leaf nodes in a plane disc tree are no longer identifiable for hierarchies with more than 2000 nodes.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>There are three difficulties with traditional cone tree: (1) It is hard to prevent occlusion by cones in the foreground. (2) The number of nodes that can be displayed is limited. (3) Visual clutter is unavoidable when the cone tree is projected onto a planar surface. In this paper we presented a new visualization technique called which can significantly overcome the above difficulties while still maintaining the context of cone trees. We have shown that using disc as the basic shape in can result in the reduction of occluded regions, sharp increase of displayable nodes, and easy mapping onto a plane without visual overlap. Therefore, provides great flexibility and a powerful searching method by reconfiguring its shape according to the desired visual condition or specific application such as landscapes where information is laid out on a surface <ref type="bibr" target="#b2">[3]</ref>.</p><p>We presented the layout algorithms for 2D and 3D that produce no visual overlaps in 2D and 3D respectively. These turn out to work very well for different trees -from balanced to unbalanced, and from sparse to dense. We also described the implementation of our system VISIT where various user interface features such as tree reconfiguration, tree transformation, tree shading, viewing transformation, animation, selection and browsing can enhance the user perception and navigation capabilities.</p><p>Finally, we evaluated s and showed that it can improve user perception capabilities greatly in terms of percentage of occlusion and density of displayed nodes, usually by a factor of in terms of the number of identifiable nodes for the same screen size. We observe that the limitation in the number of identifiable nodes in a large complex hierarchy is not so severe when the users are provided with the interactive capabilities to zoom in on a desired structure, reducing clutter by pruning and animated navigation, but with less emphasis in the overall context of the hierarchy.</p><p>We continue to improve our implementation of VISIT including the visualization for uncertainty information by manipulating color, shapes, animation for individual or a group of the gemetric objects such as node, edge, disc and cone, as well as developing new applications in bioinformatics and weather forecasting within a collabarative environment using .</p><p>www.cse.ucsc.edu/research/avis/disc.html is the URL which will contain updates on this work. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Notations and various shapes of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 2: Tree layout for 3D</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :Property 2 :</head><label>32</label><figDesc>Tree layout for 2D All the children's outer-discs for node can be placed around without 3D overlap if is not greater than the circurmference of .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>2 Figure 4 :</head><label>24</label><figDesc>Comparison of occlusion ratio.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Comparison of node density.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Plate 4 :</head><label>4</label><figDesc>Command and control in a collaborative environment</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We would also like to thank the Santa Cruz Laboratory for Visualization and Graphics (SLVG) for the wonderful research environment. This work is funded in part by DARPA grant N66001-97-8900, NSF grant IRI-9423881, ONR grant N00014-92-J-1807, NASA Cooperative Agreement NCC2-5176, STEPI-CF15, KOSEF-981-0926-141-2 and ITA-96-88.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Cheops: A Compact Explorer for Complex Hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Beaudoin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Parent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">C</forename><surname>Vroomen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Visualization &apos;96 Conference</title>
		<meeting>the IEEE Visualization &apos;96 Conference</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="87" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Concept demonstration metrics for effective information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Brath</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the information Visualization &apos;97 Conference</title>
		<meeting>the information Visualization &apos;97 Conference</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="108" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The structure of the information visualization design space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Information Visualization &apos;97 Conference</title>
		<meeting>the Information Visualization &apos;97 Conference</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="92" to="99" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The information visualizer, an information workspace</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGSCHI conference on Human Factors in Computing Systems<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="181" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Research report: Interacting with huge hierarchies: Beyond cone trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Carriere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of the Information Visualization &apos;95 Conference</title>
		<meeting>eeding of the Information Visualization &apos;95 Conference</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="74" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Tree-maps: A space filling approach to the visualization of hierarchical information structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;91</title>
		<meeting>Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="284" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Visualizing complex hypermedia networks through multiple hierarchical views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mukherjea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hudson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGSCHI conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="331" to="337" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Cone trees: Animated 3D visualizations of hierarchical information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGSCHI conference on Human Factors in Computing Systems<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
