<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fast Algorithms for Visualizing Fluid Motion in Steady Flow on Unstructured Grids</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Ueng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<settlement>Utah</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sikorski</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<settlement>Utah</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Fast Algorithms for Visualizing Fluid Motion in Steady Flow on Unstructured Grids</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:33+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>The plotting of streamlines is an effective way of visualizing fluid motion in steady flows. Additional information about the flowfield, such as local rotation and expansion, can be shown by drawing in the form of a ribbon or tube. In this paper, we present efficient algorithms for the construction of streamlines, streamribbons and streamtubes on unstructured grids. A specialized version of the Runge-Kutta method has been developed to speed up the integration of particle pathes. We have also derived close-form solutions for calculating angular rotation rate and radius to construct streamribbons and streamtubes, respectively. According to our analysis and test results, these formulations are two to four times better in performance than previous numerical methods. As a large number of traces are calculated, the improved performance could be significant.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Streamlines, streamribbons and streamtubes are very powerful techniques for visualizing steady vector fields. A streamline is the path of a massless particle which is released in a steady flow. The plotting of the particle paths produces a streamline picture, which is of both qualitative and quantitative value to the engineer. Streamline pictures allow the engineer to visualize fluid motion and to locate regions of high and low velocity and, from these, zones of high and low pressure.</p><p>Given a fluid flow with velocity field Z(?(t)), a streamline is an integral curve of ii. That is, a streamline can be calculated by solving the following equation:</p><p>d?(t) -= qqt&gt;&gt; dt where t is a parameter along the streamline and is not to be confused with time <ref type="bibr">[ll]</ref>. <ref type="bibr">Kwan</ref> A streamribbon can show the translation, angular rotation, and rates of shear deformation of the flow. Ideally, it is constructed by tracing a set of streamlines originated from multiple seed locations on a straight line segment.</p><p>That is, the path swept by the deformable line segment becomes a streamribbon.</p><p>Volpe <ref type="bibr" target="#b12">[12]</ref> constructs a streamribbon in this fashion by tracing a large number of adjacent streamlines. However, the number of streamlines needed to form smooth ribbon surfatces could be tremendous and the corresponding computational cost would be high. In practice, the construction of streamribbons is simplified, though some information such as shear deformation would be lost. In <ref type="bibr" target="#b3">[4]</ref>, a streamribbon is generated by computing only a few streamlines and creating polygons between adjacent streamlines to form the surface of the streamribbon.</p><p>This method still requires complicated algorithms to deal with the convergence, the divergence and the splitting of streamribbons. Darmofal and Hairnes <ref type="bibr" target="#b1">[2]</ref>, Ma and Smith <ref type="bibr" target="#b6">[7]</ref>, and Pargendarm <ref type="bibr" target="#b8">[9]</ref> use one streamline and vectors normal to the local velocity to form a streamribbon.</p><p>In this way, the resulting ribbons only show the translation and angular rotation of the flow. We adopt Darmofal and Haimes' algorithm by using two parallel edges to form a streamribbon.</p><p>First, a streamline is generated to serve as the first edge of the streamribbon.</p><p>A normal vector is calculated at each point of the streamline by rotating a constant length vector about the streamline. Then the second edge of the streamribbon is formed by connelcting the end points of the normal vectors.</p><p>Formally, a streamtube is defined as the surface formed by all streamlines passing through a given closed curve in the flow <ref type="bibr">[ll]</ref>.</p><p>Streamtubes are used to visualize expansion, contraction and deformation of the flow. In <ref type="bibr" target="#b1">[2]</ref>, a streamtube is created by connecting the circular crossflow sections along a streamline. The radius of a cross flow section is determined by the local cross flow expansion rate. A streamtube constructed in this manner does not reveal the deformation of the flow. Again, this is a technique more computational lo7o-mxi/95$4.00@ 1995IEEE</p><p>(See color plates, page CP-37) feasible and we adopt it in this work. In <ref type="bibr" target="#b6">[7]</ref>, to visualize both flow convection and diffusion, stat,istical dispersion of the fluid element,s about a streamline is computed by using added scalar information about the root mea,n square value for the vector field and it,s Lara.ngian time scale. The result defines the radius of t,he cross flow se&amp;on a.nd also form a t,ube-like surfa.ce. Schroeder et. a.1. <ref type="bibr">[lo]</ref> int.roduce a technique ca,lled Strea.m Polygon for visualizing 1oca.l deformat,ion of t,he flow.</p><p>In t&amp;his paper, we present efficient algorithms to c0mput.e streamlines, streamribbons and streamtubes on unstruct,ured grids.</p><p>Our algorithms are mainly based on those developed in <ref type="bibr">[a]</ref>. Several new comput,ational techniques are derived and used to improve performance. These new computational techniques include a, specialized version of Runge-Kutta method, a simpler procedure to compute t,he angula,r rotation rat,e of the flow a.nd an explicit solut.ion for calculating t,he radius of st,reamt,ube. An overview of our algorithms is described in Section 2. The new computat.iona.l t.echniques a.re derived in Sect,ion 3. The data &amp;ruct,ures used a.nd the memory requirements for implementing t,he algorithms for testing are described in Section 4. Finally, we present some experimental results using three different data. sets t,o demonstrate the time efficiency of the new particle tracing algorithm. </p><p>where wi, i = 1,2,3, a.re the three components of vect#or field; a. b. c' di, i = 1,2,3, are the coefficients of 2, zi z, the int,erpolat,ion functions; Z, y, z are t.he physical coordina,tes. The a.bove equations ca.n be re-written in a concise form:</p><formula xml:id="formula_1">C(Z) = ss+cf (3) B = ( Et; $ g ) (4) d' = [ dl d2 d3 IT<label>(5)</label></formula><p>When calculating a st,reamline, it is necessary to find t,he cell in which this st,rea.mline enters at. each t#ime st,ep. A met.hod is given in <ref type="bibr" target="#b5">[6]</ref> to solve t.his problem. In t,his met,hod, the physical coordinates of the  <ref type="figure" target="#fig_0">Figure 1</ref>. Then the canonica,l coordinates are used to determine the cell which the streamline enters. In this work, we adopt a simpler method to convert the physical coordinates into the canonical coordinates:</p><formula xml:id="formula_2">f = R&amp;d ('3) R = ( rl1 rl2 r13 r21 r22 r23 (7) T3l r32 r33 ) i = [ kl k2 k3 IT (8)</formula><p>where 2 is a physical coordinate vector and [is the canonical coordinate vect#or of 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.1</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Streamline Construction</head><p>Given an initial point in a physical domain, a streamline can be calculated by solving Equation 1. The 4th order Runge-Kutta method is applied to int,egra.te the equa.tion stepwise. After calcula,ting a point of the streamline, Equation 6 is used to transform the physical coordinates of the point into the canonical coordinates. If a,11 the t&gt;hree components of the canonical coordinates are between 0.0 and 1.0, this point is still inside the current cell where t,he comput,at,ion of the point takes place. The coefficient,s of the interpolation functions of the current cell are still valid for next st,ep integration. Otherwise, a searching for a new cell which cont,ains the point is startBed according to the canonical coordinates. After finding the new cell, the computation of next position can be performed. This pattern of calcula.tion is repeated until the streamline rea.ches a. physical bounda.ry or the number of t,ime steps exceeds a pre-defined limit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Streamribbon Construction</head><p>A streamribbon ha.s two edges as we have described.</p><p>The first edge of a streamribbon is constructed by calculating a st,reamline, and t,he second edge is genera.ted by connecting the end points of the norma, vect,ors of the streamline. The normal vectors are ca,lcula.ted by x~(s~camlhe The constant length vector can be any vector which is orthogonal to the streamline at the initial point. The surface of the streamribbon is then formed by connecting the end points of the normal vectors and their corresponding points on the streamline.</p><formula xml:id="formula_3">X(i-1) X(i)</formula><p>An example is depicted in <ref type="figure" target="#fig_1">Figure 2</ref>. The angle of rotating the constant length vector is governed by:</p><formula xml:id="formula_4">d6' z = +)<label>(9)</label></formula><formula xml:id="formula_5">s'= '11 Ilu'll</formula><p>where % is the rotation angle. Equations 9 and 1 are solved stepwise when constructing a streamribbon.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Streamtube Construction</head><p>A streamtube is created by generating a streamline and by connecting the circular crossflow sections along the streamline. The radius of a streamtube is governed by the following ordinary differential equation:</p><formula xml:id="formula_6">1 dr -- = r dt VT.li =</formula><p>where T is the streamtube radius, VT . G is the local cross flow divergence, and 5 represents the change of velocity magnitude along the streamline. Equations 1,9 and 12 are solved stepwise when constructing a streamtube. Equation 1 is used to calculate the center of the streamtube, while Equations 9 and 12 are used to calculate the angle of rotation and the radius of the streamtube. <ref type="figure" target="#fig_2">Figure 3</ref> contains an example of constructing a streamtube.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">New Computational Methods</head><p>In order to construct streamlines, streamribbons and streamtubes, we need to solve the ODE's mentioned in the previous sections. Based on the interpolation functions of linear tetrahedral cell, we had developed specialized ODE solvers to speed up our algorithms. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Circular Crossflow Section</head><formula xml:id="formula_7">hf(S + F1/2, t + h/2) (17) hf(iJ + F22/2, t + h/2) (18) hf(3 + F3, t + h)<label>(16)</label></formula><p>where h is the time step size. By substituting Equations 14 and 3 into the right hand sides, Equations 16 -19 can be expanded as: (20) = HIS(t) + il (21) + Since B and d are constants, HI and d; can be calculated by using Horner's algorithm <ref type="bibr" target="#b2">[3]</ref>. Hereafter the computations of the 4th order Runge-Kutta method require only a matrix-vector multiplication and a vector-vector addition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Explicit Solution for the Angular Rotation Rate</head><p>The angular rotation rate is governed by the ODE formulated in Equation 9. Since the velocity Z is linear within a cell, the curl of u' is a constant vector. According to Equation 3, we have:</p><formula xml:id="formula_9">w' = curl(?q = vxii = Vx(BiT+d = [ b3 -c2 Cl -a3 ~2 -h IT</formula><p>Then Equation 9 can be solved analytically:</p><p>db' dt J h de -dt = ;I$. where Q(0) is the rotation angle at the previous time step, e(h) is the rotation angle at the current time step, u'(h) is the velocity at the current time step, and ii(O) is the velocity at the previous time step. This closed form solution is used to compute the rotation angle of the normal vector about the streamline. The only unknown values involved in this solution are u'(h) and its velocity magnitude. Since G(h) can be calculated by using Equation 3, the major cost of this solution is reduced to a matrix-vector multiplication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Explicit Solution for the Radius of Streamtube</head><p>The governing equation of streamtube radius is shown in Equation 12. This ODE can be solved analytically: Equation 24 is used to compute the radius of streamtube, where rh is the streamtube radius at the current time step,, rc is the radius at the previous time step, ub and u,, are the magnitudes of velocity at the previous step and the current step. Since the magnitude of velocity at current step has been calculated when computing the angle of rotation, there is no unknown value in the right hand side of this equation. The cost of calculating rh composes only a few multiplications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Integration</head><p>Step Size</p><p>The value of h is crucial for integration of particle paths. In <ref type="bibr">[l]</ref>, Buning suggested to choose this time step size based on the cell size and the inverse of velocity magnitude. Darmofal <ref type="bibr" target="#b1">[2]</ref> used a similar method to determine the value of h for tracing particle paths, but for constructing streamribbons, h is furthered restricted by the angle of rotation to produce smoother ribbon surface. In our current implementation, h is fixed for the entire streamline. A default step size is determined for the overall domain by using Buning's method at the preprocessing stage, though h can be interactively modified. For a typical 500,000-cell data, about 88 megabytes are needed. If memory becomes a problem, the matrices for the interpolation and the transformation functions can be computed on the fly, but the curl and divergence for each cell then must be stored at the expense of much less memory space, and the memory requirement for each cell becomes 96 bytes.</p><p>In order to compare the performance of the new algorithms with the conventional Runge-Kutta methods, we have also implemented the second and the fourth order Runge-Kutta methods. Similarly, to speedup the tracing as much as possible, the matrices for the interpolation and transformation functions are precomputed and stored. Therefore, each cell record takes (2 matrices + 4 node indices + 4 cell indices) = 128 bytes However, the list of node records is needed during the tracing stage. On the other hand, without storing these two matrices, the memory requirement becomes only 32 bytes per cell record, and 24 bytes per node record. To cope with the high memory requirements for visualizing on unstructured grids, some divide-andconquer strategies must be taken to make possible visualization of large data sets such as those with millions of cells.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Test Results</head><p>To study the performance of our algorithms, we compare experimentally our specialized Runge-Kutta method (SRK4) with both the conventional second and fourth-order Runge-Kutta methods (RK2 and RK4) for integrating particle paths. To derive fair measurements, as described in previous section, all the needed matrices are precomputed and stored for the implementation of each method. Three data sets are used for our tests. The first data set was generated analytically; it contains 68,921 nodes uniformly positioned in a cubic domain, in which there are totally 320,000 tetrahedra. The vector fields on a node is de-termined by evaluating three linear functions: ul(z, y, z) = -0.52 -6.Oy, u2(2, y, z) = 6.02 -0.5y, u3(z, y, 2) = -2.02 + 20.5.</p><p>The second data set is the blunt fin data set obtained from the National Aerodynamic Simulation Facility at the NASA Ames Research Center. This data set was -from a computational fluid dynamics simulation of air flow over a flat plate with a blunt fin rising from the plate <ref type="bibr" target="#b4">[5]</ref>. The flow is symmetrical about a plane through the center of the fin, so only one half of the complete geometry is present. Note that originally the computational grid was a single, curvilinear, structured block grid. We converted it into an unstructured grid by splitting each hexahedron into six tetrahedra.</p><p>The resulting unstructured grid contains 224,874 tetrahedral cells and 40,960 nodes.</p><p>We obtained the third data set from the NASA Langley Research Center. It was from a computational fluid dynamics simulation of transonic flow abount an ONERA-M6 wing with free-stream Mach-number 0.84 and 3.06 degrees angle of attack <ref type="bibr" target="#b7">[8]</ref>. There are 287,962 tetrahedral cells and 53,961 nodes in this data set.</p><p>On each data set, one hundred seed points are randomly selected. Then, streamlines are constructed by using these seed points. The streamline constructions are stopped when either the streamlines reach domain boundaries or the number of time step exceeds a predefined limit (e.g. 1,500).</p><p>Since the major function evaluations of all the three methods are of the same kind, i.e. matrix-vector multiplication, we can predict their performances by calculating the number of function evaluations used in these ml&amp;hods.</p><p>For a single step integration, only one function evaluation is required by using the SRK4 method while four function evaluations are needed if the RK4 method is applied and two function evaluations are performed if the RK2 method is used. Theoretically, the SRK4 method should be faster than the RK2 method by a factor of 2.0, and faster than the RK4 method by a factor of 4.0.</p><p>The testing results for the three data sets are shown in <ref type="figure">Figure 4</ref>, <ref type="figure">Figure 5</ref>, and <ref type="figure">Figure 6</ref>. Numbers are seconds and the measurements were performed on a Sun SparclO Model 51 (50MHz).</p><p>Only the core of the integration algorithms was measured. The test results agree with our analysis; the SRK4 method is the fastest method while the RK4 is the slowest one.</p><p>The average cost of computing a single step integration by using these three methods are listed in Table 1. Note that now the time unit used is microsecond. According to the timing results listed in <ref type="table" target="#tab_3">Table 1</ref>, the speeQup achieved by using the SRK4 method is slightly higher than 2.0 when compared with the RK2 method but may be lower than 4.0 when compared   Step I with the RK4 met,hod. The lower speed-up numbers and t.he differences between different da.ta sek could be due to both the timing calculations and the overhead for fetching the coefficient,s of the interpolation functions, etc. Some visualiza.tion resulk generated by using t#he algorit*hms described in t,his paper are presented in <ref type="figure" target="#fig_8">Figure 7</ref>. <ref type="figure" target="#fig_8">Figure 7 (a,)</ref> shows a streamribbon ima.ge of the ana.lytical da.ta. set. From this image, we can see the st.rea.mribbons spiral toward a critical point which is a saddle point in the vector field. The streamribbons are colored according to the velocit,y magnitudes. <ref type="figure" target="#fig_8">Figure 7 (b)</ref> shows an image of plotting streamkrbes in the same da.ta set and using the same initial seed points. This image reveals not only rot,ation of the flow but also expansion and contraction of the flow. visualizat5ion of the blunt fin dat,a set. For both images, the view is selected such that t,he blunt fin is laid down toward the viewer and the plane surface becomes orthogona.1 to the viewing direction. From these t,wo ima.ges, some interesting flow movements a.re revealed near the leading edge of the fin a.nd the plane. <ref type="figure" target="#fig_8">Figure 7</ref> (e) a,nd (f) display t,he strea.mribbon and the st,rea,mtube visualization of the ONERA-M6 wing data set. It is shown in the images that the formation of a wing tip vortex caused by the flow expanding around the wing tip due to pressure differences between the the upper and lower surfaces of the wing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>The fourth order Runge-Kutta method is the fundamental procedure for constructing streamlines.</p><p>A new computational method has been derived to speed up the Runge-Kutta method. A closed form formula is deduced to compute the angular rotation rate of flow for making streamribbons.</p><p>We have also derived an explicit solution for computing the radius of streamtube that is governed by an ordinary differential equation. The performance of the new methods were measured by using three different data sets on a Sun SparclO. The test results match our analytic predictions. The speed-up currently achieved can be significant resulting in better interaction when tracing a large number of particles and in a large data space.</p><p>While we have improved particle tracing calculations, the use of parallel processing can further speed up the tracing of a significantly large number of particles. In addition, for data sets that do not fit into the main memory of an average workstation, the design of out-of-core or distributed-memory parallel algorithms is needed just to make visualization possible. We are currently designing an out-of-core particle tracing algorithm.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Coordinate System Transforma.tion point calculated at ea.ch time step are t.ransformed into the canonical coordinates as shown in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Example of Streamribbon Construction rotating a constant length vector about the streamline at each point of the streamline.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Example 1 and 3 the governing equation of at streamline can be formulated as: !y=f(z,t)=Bz'+d method is applied to Z(t) + $(FI + 2Fz + 2F3 + F4)(15) hf (2, t&gt;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fl</head><label></label><figDesc>hf(Z + Fl/2, t + h/2) q = h(B(i+ Fl/2) + 4 q : (h2B/2 + h)(BZ + 4 Fs q = hf(j: + F2/2, t + h/2) q = h(B(S + F2/2) + i) =I (h3B2/4 + h2B/2 + h)(BZ'+ cij F4 =I hf(S+Fs,t+h) =: h(B(i+ F3) + cf) =I (h4B3/4 + h3B2/2 + h2B + h)(BZ+ cf) By using these equations, the Runge-Kutta method shown in Equation 15 can be expressed as: Z(t + h) = Z(t) + ;(FI + 2F2 + 2F3 + F4) = (I+h;+q+q+@$)rjl) hB '(hB)' +h(l + 21 + -+ .(hB)3 -'</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>0 B</head><label>0</label><figDesc>(h) -0(O) = $ii. (s'(h) + s'(O)); Q(h) = e(O) + $G. (&amp; + &amp;)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>) -ln(re) = f lh VT . iidt ln(rh) = ln(rs) + ;(A" V. fidt -1" $dt) From Equations 3 and 1, the divergence of Z is: rc) + i((ui + bz + cs)h -J "dd) 0 u' rh = rg exp(i(ur + bz + cs)h -In(&amp;) + ln(ub)&gt; 7-h = ro exp(i(ul -I-b2 -t es)h)* (24)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure 4: Timing of Constructing Streamlines on Data Set 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>Timing Timing of Construct,ing Streamlines on Da.ta Set 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 (</head><label>7</label><figDesc>c) and (d) show t,he streamribbon and streamtube</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>node numbers and four cell numbers. The four node numbers are indices of nodes that comprise this tetrahedral cell. The four cell numbers are indices of cells that are adjacent to this cell. The values stored in a node record include the physical coordinates of the node as well as the vector field on the node. After the preprocessing stage, node records become redundant and can be deleted since the cell records contain all the information needed for performing the particle tracing.</figDesc><table><row><cell>4 To implement the above methods, the major data Data Structures structures are composed of a list of cell records and a list of node records. To further speed up the construc-tion of streamlines, streamribbons and streamtubes, at the expense of more memory space, we precompute and store the coefficients of the vector field interpola-tion function, coordinate transformation function, and the specialized Runge-Kutta method during the pre-processing stage. As a result, a cell record has three coefficient ma-trices, four Using our tracing method, each cell record takes (3 matrices + 4 node indices + 4 cell indices) 1(137;(443)+4+4)x4 bytes es</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table /><note>Execution Time of a Single Time</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)1070-2385/95 $10.00 © 1995 IEEE</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work has been supported in part by the NSF/ACERC and the National Aeronautics and Space Administration under NASA contract NASl-19480. Thanks go to Dimitri Mavriplis for the Wing data set. Thanks also go to David Darmofal and the anonymous Visualization '95 Conference reviewers who provided many useful suggestions on ways to improve the manuscript.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Sources of Error in the Graphical Analysis of CFD Results</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="149" to="164" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Visualization of 3-D Vector Fields: Variations on a Stream</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Darmofal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIAA 30th Aerospace Science Meetingand Exhibit</title>
		<imprint>
			<date type="published" when="1992-01" />
		</imprint>
	</monogr>
	<note>AIAA Paper No. 92-0074</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">H</forename><surname>Golub</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">F</forename><surname>Van Loan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Computations</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>The John Hopkins University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Constructing stream surface in steady 3d vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Hultquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of Visualization &apos;92</title>
		<meeting>eeding of Visualization &apos;92</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Simulation of Ellunt-Fin Induced Shock Wave and Turbulent Boundary Layer Separation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-M</forename><surname>Hung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIAA Paper No. 84-0457, AIAA Aerospace Science Conference</title>
		<imprint>
			<date type="published" when="1984-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Vectorized Particle Tracer for Unstructured Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lohner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ambrosiano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Physics</title>
		<imprint>
			<biblScope unit="volume">91</biblScope>
			<biblScope unit="page" from="22" to="31" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Cloud Tracing in Convection-Diffusion Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of Visualization &apos;93 Conference</title>
		<meeting>eeding of Visualization &apos;93 Conference</meeting>
		<imprint>
			<date type="published" when="1993-10" />
			<biblScope unit="page" from="253" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Unstructured Mesh Algorithms for Aerodynamic Calculations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mavriplis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of the 13th Int. Conference on Numerical Methods in Fluid Dynamics</title>
		<meeting>eeding of the 13th Int. Conference on Numerical Methods in Fluid Dynamics</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="62" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-G</forename><surname>Pagendarm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Walter</surname></persName>
		</author>
		<title level="m">Feature Detection from Vector Quantities in a Numerically Simulated Hypersonic Flow Field in Combination with Experimental Flow Visualization</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m">Proceeding of Visualization &apos;94</title>
		<meeting>eeding of Visualization &apos;94</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The Stream Polygon: A Technique for 3D Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chiroeder</forename><surname>Po1 S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">.</forename><forename type="middle">J</forename><surname>Volpe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">.</forename><forename type="middle">R</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of Visualization &apos;91</title>
		<meeting>eeding of Visualization &apos;91</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="126" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Elementary Fluid Mechanics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vennard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Street</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975" />
			<publisher>John Wiley &amp; Sons, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Streamlines and Streamribbons in Aero&apos;dynamics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Volpe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIAA 27th Aerospace Science Meeting</title>
		<imprint>
			<date type="published" when="1989-01" />
		</imprint>
	</monogr>
	<note>AIAA Paper No. 89-0140</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cd</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>@i Figure</surname></persName>
		</author>
		<title level="m">Vector-field Visualization</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<idno>1070-2385/95 $10.00</idno>
		<title level="m">Proceedings of the 6th IEEE Visualization Conference (VISUALIZATION &apos;95)</title>
		<meeting>the 6th IEEE Visualization Conference (VISUALIZATION &apos;95)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
