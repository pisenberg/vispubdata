<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Set: A Volume Rendering Technique Generalizing Isosurface Extract ion</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baining</forename><surname>Guo</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Toronto</orgName>
								<address>
									<postCode>M5S lA4</postCode>
									<settlement>Toronto</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Set: A Volume Rendering Technique Generalizing Isosurface Extract ion</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A scalar volume V = {(x, f(x)) 1 x E R} is described by a function f(x) defined over some region R of the three-dimensional space. This paper presents a simple technique for rendering interval sets of the form Zg(a, b) = {(x, f(x)) (a &lt; g(x) &lt; b}, where a and b are either real numbers or infinities. We describe an algorithm for triangulating interval sets as a-shapes, which can be accurately and eficiently rendered as surfaces or semi-transparent clouds. On the theoretical side, interval sets provide an unified approach to isosurface extraction and direct volume rendering. On the practical side, interval sets add flexibility to scalar volume visualization-we may choose to, for example, have an interactive, high-quality display of the volume surrounding or &quot;inside&quot; an isosurface when such display for the entire volume is too expensive to produce.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Volume visualization is becoming an important tool in engineering, medicine, and many areas of science. Scalar volume visualization is a collection of techniques for visualizing a function f(x) defined over some region R of the three-dimensional space. One approach for visualizing scalar volumes is to draw an isosurfuce SC = {x 1 f(x) = c). Another approach, commonly referred to as direct volume rendering, is to display the entire volume V = {(x, f(x)) 1 x E R} as a three-dimensional RGBA (color and opacity) cloud. An important advantage of the second approach is that it can render both the surfaces separating different regions and the interiors of these regions. However, because this approach requires rather complex computations, high-quality renderings with sophisticated volume illumination models and accurate RGBA projections are still far from interactive.</p><p>In this paper, we introduce the concept of interval sets and demonstrate their use in volume visualization. For the scalar volume V, the interval sets are of the form Z (a, where a and % b) = ((x, f(x)) ) a 5 g(x) _&lt; b}, are either real numbers or infinities. The visualization of interval sets extends traditional visualization techniques in several ways. In particular, interval sets provide l An unified approach to scalar volume visualization:</p><p>The family of interval sets contains both the scalar volume V = Zf(-00, +oo) and any isosurface S, = Zf (c, c). Interval sets are triangulated as o-shapes [l] through a process that generalizes the common practice of polygonizing isosurfaces. As a collection of simplices embedded in a Delaunay triangulation, an o-shape can be accurately and efficiently rendered, either through standard gra hits pipeline or tetrahedron projection <ref type="bibr">[2,</ref><ref type="bibr">3,</ref><ref type="bibr">4</ref> f . The result is that we can display interval sets as surfaces, RGBA clouds, and the combinations thereof. We note that direct volume rendering can also render both surfaces and RGBA clouds (e.g. see <ref type="bibr">[5,</ref><ref type="bibr">61)</ref>. l The ability to segment subvolumes: A major obstacle that prohibits the cost-effective use of volume visualization is the lack of segmentation methods for identifying interesting parts in a scalar volume <ref type="bibr">[7]</ref>. By choosing different function g(x), we can segment subvolumes with interval sets. Indeed, the family of interval sets includes many subvolumes that cannot be easily described in traditional terms. For example, an environmental scientist facing a rectilinear volume of pollution densities can use interval sets to visualize the subvolume in which the pollution density is higher than a threshold.</p><p>The ability to segment subvolumes is important in volume visualization. We hasten to point out that most information contained in a scalar volume is in fact concentrated in some small critical subvolumes -they are critical because the entire volume can be reconstructed from them. These subvolumes surrounding the so-called "multiscale edges" can be visualized as interval sets [S] -we will not discuss the segmentation ability of interval sets due to the space limit. Throughout the following, we assume that g(x) = f(x) and simplify Zs(a, b) to Z( a, b), even though our dicussion holds for any g(x).</p><p>Interval set visualization has common characteristics with both direct volume rendering and isosurface extraction.</p><p>Like direct volume rendering, the interiors of interval sets are rendered as semi-transparent RGBA clouds. Like isosurfaces, interval sets are extracted in object space (so by definition, interval set visualization is not "direct" volume rendering . These characteristics of interval sets make it 1 possib e to exploit the complementary strengths of isosurface ex-(See color plates, page CP-2) traction and direct volume rendering. For example, applications requiring interactive rendering can choose to have a good-quality display of the volumes surrounding or "inside" an isosurface when such rendering for the entire volume is too expensive to produce.</p><p>As an alternative to extracting a-shapes defined by g(x), we can also use direct volume rendering techniques with g(x) incorporated into the transfer function. However, this will complicate any change of the transfer function, which is usually defined in terms of f(x). In fact, classifying volume data according to a transfer function is a rather slow preprocessing step in direct volume rendering; extracting o-shapes reduces the computation needed for transfer function changes by limiting re-classification to segmented subvolumes.</p><p>The rest of the paper is organized as follows. After reviewing previous work in Section 2, we describe simplicial approximations of interval sets in Section 3. Then, in Section 4, we address several issues in rendering a-shapes. In Section 5, we conclude the paper with experimental results and some suggestions for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Previous Work</head><p>The two main approaches for visualizing threedimensional scalar volumes are isosurface extraction and direct volume rendering. Both approaches are related to our work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.1</head><p>Isosurface Extraction Isosurface methods typically approximate an isosurface with a polygon mesh and shade the mesh in standard graphics pipeline. Since the polygon mesh is constructed in the object space, the graphics display can response rather quickly to a change of the view point. This makes isosurface approach well suited for an interactive environment. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Simplicial Approximation</head><p>In this section, we approximate an interval set Z(a, b) with an o-shape S,, assuming that the scalar volume V is described by function values at the vertices of a cubic lattice of voxels {(vijk, Fiji) ] 1 5 i 5 L, l&lt;j&lt;n/r, andl&lt;II-&lt;N}. We start by briefly introducing simplicial complexes <ref type="bibr">[19]</ref>. For a set 5' of points in R3, the convex hull conv(S) is the smallest convex set that contains 5'. Examples of convex hulls include k-simplex AT=conv(T) defined by a set T of II-+ 1 points in general position (0 &lt; IE 5 3), and the boundary simplices of AT, {Ah ( ? is a proper subset of T}. A collection C of simplices form a simplicial complex if it satisfies the following conditions: (a for a simplex AT of C, the boundary simplices of d T are in C, and (b) for two simplices of C, their intersection is a simplex in C. The zlnderlying space ]C] of a simplicial complex C is the union of all of its simplices. As an example, the Delaunay triangulation ;D(S) of an arbitrary point set 5' is a simplicial complex, whose underlying space is the convex hull conv(S). A simplicial complex C can have a subcomplex C', which is a simplicial complex satisfying C' C C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Alpha</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Shapes</head><p>A family of subcomplexes of the Delaunay triangulation D(S) gives rise to o-shapes <ref type="bibr">[l]</ref>. To define the a-shape family {Sa ] 0 5 cr 5 oo}, we first specify a family of subcomplexes of D(S) and then derive the cl-shapes as the underlying spaces of these subcomplexes. For a k-simplex AT (0 &lt; k 6 3), let the smallest circumsphere of AT be the smallest sphere 0~ that contains T (for experts: we use '(0~ contains T' to mean T c 0~ -this is different from 0~ enclosing T). The subcomplexes we specify are a-complexes {C, ] 0 &lt; Q &lt; co}, where C, consists of the following simplices: (a) every simplex AT E D(S), such that the smallest circumsphere 0~ of AT has radius TT &lt; a and there is no point of S in the open ball bounded by OT, and (b) the boundary simplices of the simplices described in (a). Knowing the o-complexes, we define for each cu (0 5 a 5 co), an a-shape S, = ]C,]. %iesexamples from the a-shape family are Sc = S o. =conv(S). The boundary of C, is a subcomplex containing two types of faces: a face AT is regular if it bounds a tetrahedron in C,, and singular otherwise. The construc- Only the boundary of the o-shape is shown. The difference between the interval set and the a-shape is exaggerated for the purpose of illustration.</p><p>tion of a-shapes can identify the boundary faces and classify these faces as singular or regular <ref type="bibr">[l]</ref>. A relevant and important difference between the singular and regular faces concerns orientability.</p><p>For a regular face bounding a tetrahedron, we can orient the face so that its normal points to the outside of the tetrahedron; a singular face has no obvious orientation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Alpha Shape Construction</head><p>To construct an a-shape S, approximating the interval set X(a, b), we take three steps: (a sample Z(a, b) to obtain a set S of points, (b) buil d the Delaunay triangulation D(S), and (c) generate the Qcomplex C, whose underlying space ]C,] is S,. <ref type="figure">Figure</ref> 1 illustrates the construction of a simplicial approximation using a two-dimensional example.</p><p>Sampling:</p><p>In the set S, we first include all data points {vajk ) a 2 fijk _&lt; b}. These points generally do not allow accurately reconstruction of the boundaries of the interval set Z(a, b). We remedy this by adding points sampled on the isosurfaces S, = {x ] f(x) = u} and Sb = {x ] f(x) = 6}, where the function f is reconstructed with the trilinear interpolants to the available data values {Fiji} on each cell (recall our assumption on available data at the beginning of Section 3). For example, for the cell with vertices ~000 and ~111, f(x) = f(x, Y, z&gt; = c (I_ ,#-iz"(l -@ j&amp;l-#-V&amp;k.</p><p>The reconstructed function f is continuous everywhere since for two cubic cells sharing a face, the trilinear interpolants on both cells reduce to the same bilinear function on the face. The continuity of f implies that every boundary point of 1(a, b) belongs to either S, or Sb. As is a typical practice in isosurface extraction (e.g. see <ref type="bibr">[12]</ref>), we compute the intersection points of the cell edges with the isosurfaces S, and Sb. These points are regarded as a sample of the boundaries of Z(a, 6) and added to S. Delaunay Triangulation: Building the Delaunay trian map f ulation 'D S) can be done either with a lifting e.g. see <ref type="bibr">[20 )</ref> or by using randomized incremental \ flips. We take the second approach, which is described in detail by <ref type="bibr">Shah [20]</ref>. It is worthwhile to note that the points in the set S are not in "general position" (e.g. the corner vertices of a cubic cell include several groups of four coplanar vertices, see [l] for a full statement of the general-position assumption). Such points can be handled with the simulation of simplicity technique (SOS) of <ref type="bibr">Edelsbrunner and Mucke [al]</ref> (intuitively, SOS perturbs a degenerated point configuration infinitesimally to restore the general-position assumption).</p><p>Choosing Alpha:</p><p>With the Delaunay triangulation D(S), the main task in generating S, becomes the selection of an CY from which we can identify a member of the o-shape family (&amp; ] 0 5 (Y 5 co}. In general, as o decreases, the bulky features of S, is replaced by refined ones, thereby producing a shape that fits better to the points of S. However, as Q falls below a threshold onain, the corresponding shape S, starts to have cavities, which are undesirable since the entire interval set should be packed with tetrahedra. A possible method to find the threshold o,in is to first compute the a-shape family and then identify alnin by decreasing (Y while visualizing the corresponding CYshape. This method indeed works because the entire o-shape family (and their signatures, see the example below) can be efficiently computed <ref type="bibr">[l]</ref>. However, the . , .</p><p>. . usual large sizes of scalar volumes make this approach rather cumbersome.</p><p>We describe a simple and efficient method for finding chin! which in turn serves as a guide for choosing a. Consider the Delaunay triangulation of the eight corner vertices of a cubic cell with unit-length edges. As noted before, these vertices are not in general position. The application of SOS produces a Delaunay triangulation with either five or six tetrahedra, with the six tetrahedron case shown in the lower left of <ref type="figure" target="#fig_1">Figure 2</ref>. We refer to this triangulation, and the Delaunay triangulations obtained from it by permuting the vertices, as six-tetrahedron decompositions (note that there is no unique Delaunay triangulation in this case due to the violation of the general-position assumption).</p><p>The a-shape family of a six-tetrahedron decomposition is simple. The fact that all tetrahedra use the sphere circumscribing the cubic cell as their smallest circumsphere implies that the o-shape S, is the union of: (a) the eight corner vertices if (Y 5 fr, (b) twelve edges if f &lt; (Y 5 $ (c) twelve triangles if $ &lt;CYL 9, and (d) six tetrahedra if G &lt; Q. Like six-tetrahedron decompositions, we can h&amp;e jivetetrahedron decompositions, whose a-shape family are also simple to analyze. See <ref type="bibr">[la]</ref> for an illustration of five-tetrahedron decompositions. The above simple study of the Delaunay triangulation of a cubic cell turns out to be quite useful for analyzing the Delaunay triangulation of the set S of sampled points. Let a cubic cell of the scalar volume V be: (a) interiorif all corner vertices belong to Z(a, b), (b) exterior if these vertices do not, and (c) boundary if it is neither interior nor exterior. By definition, the exterior cells lie outside of 1(u, b) and need no further consideration. As for the interior cells, they have the following</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Local</head><p>Triangulation Property: The Delaunay triangulation D(S), constructed with randomized incremental flips and SOS, packs each interior cell with a five-or sixtetrahedron decomposition.</p><p>The term "local" refers to a triangulation performed on the vertices of an individual cell, as opposed to a "global" triangulation on the entire set S. In [8], we prove the local triangulation property through analyzing the construction of D(S .</p><p>Rendering an o-shape s) that represents an isosurface Based on the local tariangulation property, we set cY,in = qd, with d being the length of cubic cell edges. An o-shape S, with o &gt; a,;,, will always pack every interior cells with tetra.hedra, while an S, with LY &lt; o,i, will always have cavities in interior cells. To guarantee that all interior cells are packed while achieving the best fitting possible to the points in S, we approximate 1(u, b) with the o-shape corresponding to CY = o,in + Ed, where c is a small positive number. In practice, we set E = 0.025, even though we notice that S, is not sensitive to the actual value of 6 (see <ref type="bibr">[8]</ref>).</p><p>The above analysis applies to interior cells only; the triangulation on the boundary cells is more complicated. In fact, we can construct pathological examples in which the boundary of Z(a, b) is full of small features (smaller than the cell-size) that cannot a nearly . . . . . . . . . . . . . . . extraneous face of a tetrahedron of the alpha shape <ref type="figure">Figure 3</ref>: A two-dimensional analogue showing the removal of extraneous faces on the boundary of an a-shape that represents an isosurface.</p><p>be captured by any o-shape. In practice, however, the a-shapes chosen according to the method presented here provide good approximation to original interval sets. In particular, the boundaries of S, have been observed in all our experiments to closely match the isosurfaces S, and Sb produced by an isosurface extraction method following <ref type="bibr">[ll]</ref>. In summary, an interval set can be approximated by an a-shape in the same manner as an isosurface is approximated by a polygon mesh. Since the sampled points of S are associated with function values, a straightforward linear interpolation of these values gives rise to a piecewise linear function that approximates the original function f everywhere within the interval set. boundary faces, certain faces of the nearly-flat tetrahedra are extraneous and should be removed. We eliminate these extraneous faces using estimated gradients of the function f at the sampled points. Since S, is embedded inside the scalar volume V, gradients at the sampled points can be estimated from the volumetric data near S, (e.g. see <ref type="bibr">[5]</ref>). When the normal of a regular face does not make a positive dot-product with the estimated gradients at the vertices of the face, this face is considered extraneous and removed. <ref type="figure">Figure 3</ref> illustrates our approach using a two-dimensional analogue. The estimated gradients can also be used as surface normals for Gouroud shading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2</head><p>Projecting Tetrahedra</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Simplex Projection</head><p>In this section, we show that an a-shape S, can be accurately and efficiently rendered, either as surfaces or RGBA clouds. Usually, we render S, as RGBA clouds through tetrahedron projection; when S, represent an isosurface, we shade it through standard graphics pipeline as a polygon mesh. Since both rendering methods project simplices onto the image plane, we call the rendering "simplex projection".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Projecting Triangles</head><p>Through tetrahedron projection, an a-shape can be rendered as RGBA clouds. Among the existing approaches for projecting tetrahedra, the algorithm of Max, Hanrahan., and Crawfis offers high accuracy [2], while that of Shirley and Tuchman gains speed by taking advantage of the Gouroud-shading hardware [3]. Stein, Becker, and Max recently used texture mapping hardware to extend the Shirley-Tuchman algorithm, ameliorating Mach bands and eliminating the visual artifacts due to linear approximation of the nonlinear opacity effects <ref type="bibr">[4]</ref>.</p><p>An essential step for tetrahedron projection is Rendering an a-shape S, that represents an isosur-depth-sorting: the tetrahedra must be sorted with reface S, = Z(c, c) is not as easy as it seems, because S, spect to the view point before they are projected onto is not necessarily a surface a two-dimensional man-I the image plane in front-to-back or back-to-front orifold). While the vertices o S, are sampled on S,, der. For n tetrahedra without any adjacency informathe topological connection between the vertices is de-tion, Stein and co-workers described a method that termined by the Delaunay triangulation and cr. This sorts the tetrahedra in O(n') time <ref type="bibr">[4]</ref>. If these tetrais different from isosurface extraction, which connects hedra are adjacent and form a triangulation of a conthe vertices based on the volumetric data near S,. A vex polyhedron, then a method of Williams does the result of the difference is that S, may contain some sorting in O(n) time (see also <ref type="bibr">[a]</ref>). Both methods asnearly flat tetrahedra, which give it a finite thickness sume that tetrahedra do not form cycles, such as three (see <ref type="figure">Figure 3)</ref>. When we display S, by drawing its tetrahedra A, B, and C, with A in front of B, B in front of C, and C in front of A. In practice, cycles do occur. An advantage of a-shapes is that their tetrahedra never form cycles, as was pointed out by <ref type="bibr">Edelsbrunner [22]</ref>. In th e o f !l owing, we show that Edelsbrunner's work on acyclicity also provides the basis for a method that sorts the n tetrahedra of an a-shape in O(n logn) time. Note that the O(n) sorting methods such as that of Williams are not easily applicable to an a-shape because the shape may be concave or disconnected.</p><p>To establish the acyclicity of a Delaunay triangu-Edelsbrunner uses a numerical function For the view point v and a tetrahedron AT E 'D(S), g(v, AT) = (v-c~)'-$.,</p><p>where CT and TT are the center and radius of the smallest circum-z~ sphere of AT. In the computational geometry community, (v -CT)' -Y; is called the power distance from v to CT <ref type="bibr">[20]</ref>. For a viewing ray emanating from v, if the ray intersects in depth-order a series of tetrahedra AT,, . . . . Ark of z&gt;(S), th en the power distance increases along the ray, i.e. dv, AT,) &lt; . . . &lt; g(v, A,) See <ref type="bibr">[22]</ref> or [20] for a proof (Max and co-workers [2] also described a proof for the special case of two adjacent tetrahedra). Because of this property of the power distance, a possible approach for sorting the tetrahedra of D(S) is to sort their power distances. For sorting all tetrahedra of D(S), sorting by power distances is not attractive because Max and co-workers have already given an elegant O(n) topological sort for that purpose <ref type="bibr">[a]</ref>. However, since the tetrahedra of S, form a subset of 27(S), the sorting-by-power-distance approach extends naturally to any a-shape; topological sort does not.</p><p>An additional factor to consider in sorting is degeneracy. As we mentioned earlier, each packed cube corresponds to a degenerated Delaunay triangulation. The degeneracy -which does not mean the presence of flat tetrahedra -implies the power distances for all tetrahedra in the cube are equal. In other words, sorting by power distance alone does not resolve the ambiguity within each packed cube. We handle this ambiguity with a mini DAG (directed acyclic graph) that represents the adjacency of the relevant tetrahedra: a directed edge is drawn from tetrahedron A to an adjacent tetrahedron B if A is closer to the view point. Because there are only finite many different orientations for the tetrahedral faces of all packed cubes! we can efficiently update the directed edges in the mm1 DAGs as view point changes. With these mini DAGs, it is easy to resolve the sorting ambiguity within each packed cube. See [S] for further details.</p><p>Here we notice two types of sorting methods: those use adjacency information (topological sort and Williams sort) and those do not <ref type="bibr">([4]</ref> and sorting-bypower-distance-only).</p><p>It turns out that in our case, both power distances and adjacency are necessary for efficient, accurate sorting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results and Future Work</head><p>We start by presenting a few examples from our experiments. In <ref type="figure">Figure 4</ref> (top left), we see an isosurface of a scalar volume representing the wave function of a high-potential iron protein (HIPIP). This isosurface is extracted at the threshold of 0.04 as an a-shape. After the removal of the extraneous faces of all nearly-flat tetrahedra, the faces on the boundary of the a-shape form a polygon mesh, which is then Gouroud-shaded through standard graphics pipeline.</p><p>A volume surrounding this isosurface is extracted as the interval set X(0.03, 0.05), whose tetrahedra are projected in <ref type="figure">Figure 4</ref>. The projection first sorts these tetrahedra .using the method described in Section 4, then follows the Shirly-Tuchman algorithm <ref type="bibr">[3]</ref>. <ref type="figure">Figure 5</ref> is a display of the electron density of superoxide dismutase enzyme (SOD), obtained by projecting the tetrahedra of the interval set Z(60, +co) that represents the volume "inside" the isosurface corresponding to the threshold of 60.</p><p>In our earlier implementation, we used the original Shirly-Tuchman algorithms (thank Peter Shirley for providing useful code fragments).</p><p>Currently, we are switching to IRIS Explorer and making use of several C++ classes developed at Laurence Livermore National Laboratory (LLNL). These C++ classes provide access to improved color integration methods <ref type="bibr">[4]</ref> for tetrahedra projection, and are very useful for developing Explorer modules.</p><p>In principal, our method for triangulating of interval sets can be generalized to allow hierarchical sampling of interval sets, i.e. sampling on cubes of different sizes. This generalization calls for the weighted a-shapes, which are embedded in regular triangulations rather than Delaunay triangulations <ref type="bibr">[20]</ref>. Like a-shapes, weighted a-shapes enjoy acyclicity of their tetrahedra <ref type="bibr">[22]</ref>.</p><p>On a different front, Edelsbrunner and Shah have presented a theoretical framework for triangulating arbitrary topological spaces (of which interval sets are special instances) using restricted Delaunay triangulations <ref type="bibr">[20]</ref>. At present, their work mainly concerns the homotopy equivalence and homeomorphism between topological spaces and their triangulations.</p><p>A promising avenue for further development is to design efficient algorithms for constructing triangulations in this theoretical framework.</p><p>In particular, this approach may provide solution to the problem of constructing simplicial approximations for interval sets of scalar volumes defined on curvilinear and irregular lattice of voxels.  The volume inside an isosurface of a scalar volume renresentine: the electron densitv of superoxide " ,ase enzyme. The bottom row includes two successive zoom-k views. Notice that the rendered interval sets e more faceted as we zoom in -this is expected since we use simplicial approximations.</p><p>and David Case of Scripps Clinic, La Jolla, California. The SOD data set is from Duncan McRee of the same institution.</p><p>This work is supported by NSF NATO grant GER-9452931.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Boundary of the simplicial approximationBoundary of the interval set n Sampled pointFigure 1: The construction of a simplicial approximation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>The a-shape family of a six-tetrahedron decomposition.Upper left: Eight vertices, Upper right: Twelve edges. Lower left: Twelve triangles (only six are visible). Lower right: Six tetrahedra. These o-shapes are exploded to show their simplices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>left: An isosurface of a scalar volume representing the wave function of a high-potential iron protein ?). Top right and bottom: The volume surrounding the isosurface shown in the previous figure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Figure dismut becorn 5: The volume inside an isosurface of a scalar volume renresentine: the electron densitv of superoxide " ,ase enzyme. The bottom row includes two successive zoom-k views. Notice that the rendered interval sets e more faceted as we zoom in -this is expected since we use simplicial approximations.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)1070-2385/95 $10.00 © 1995 IEEE</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>I would like to thank Herbert Edelsbrunner for his willingness to share his insight in geometry. Many thanks to Nelson Max and Peter Williams for useful discussions. The implementation of interval set computation is built upon the code kindly provided by Ernst Mucke.</p><p>Barry Becker was very helpful for getting me started in using LLNL C++ classes. The anonymous referees have provided insightful comments, which I tried to implements within the space limit. The HIPIP data set is from Louis Noodleman</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Mucke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Craw%</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="27" to="33" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Polygonal Approximation to Direct Scalar Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tuchman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="63" to="70" />
			<date type="published" when="1990-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Sorting and Hardware Assisted Rendering for Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1994 Symposium on Volume Visualization</title>
		<meeting><address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-10" />
			<biblScope unit="page" from="83" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="65" to="74" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Efficient Ray Tracing of Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="2" to="7" />
			<date type="published" when="1990-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Multimodal Volume Visualization Using Objectoriented Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">J</forename><surname>Zuiderveld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Viergever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1994 Symposium on Volume Visualization</title>
		<meeting><address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-10" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">A Multiscale Model for Structure-Based Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Guo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, University of Toronto</orgName>
		</respStmt>
	</monogr>
	<note>submitted for publication</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Data Structure for Soft Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mcpheeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wyvill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Visual Computer</title>
		<imprint>
			<date type="published" when="1986" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="227" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Octree for Faster Isosurface Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Evaluation of Implicit Surface Tilers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="33" to="41" />
			<date type="published" when="1993-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Hierarchical Splatting: A Progressive Refinement Algorithm for Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="285" to="288" />
			<date type="published" when="1991-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Interactive Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="367" to="376" />
			<date type="published" when="1990-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Coherent Projection Approach for Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="275" to="284" />
			<date type="published" when="1991-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fast Volume Rendering Using a Shear-Warp Factorization of the Viewing Transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annual Conference Series</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="451" to="458" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Frequency Domain Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Totsuka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Conference Series</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="271" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fourier Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Malzbender</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<date type="published" when="1993-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hocking</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Young</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Topology</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1961" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Topological Modeling with Simplicial Complexes</title>
		<imprint>
			<date type="published" when="1994-09" />
		</imprint>
		<respStmt>
			<orgName>University of Illinois at Urbana-Champaign</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Simulation of Simplicity: A Technique to Cope with Degenerate Cases in Geometric Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Mucke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="251" to="260" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
	<note>Combinatorica</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
