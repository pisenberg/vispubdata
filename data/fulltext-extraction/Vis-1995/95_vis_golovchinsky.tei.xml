<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Subverting Structure: Data-driven Diagram Generation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gene</forename><surname>Golovchinsky</surname></persName>
							<email>golovch@ie.utoronto.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Industrial Engineering</orgName>
								<orgName type="institution">University of Toronto</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Taddle Creek Road Toronto</orgName>
								<address>
									<postCode>M5S lA4</postCode>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Subverting Structure: Data-driven Diagram Generation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Diagrams are data representations that convey information predominantly through combinations of graphical elements rather than through other channels such as text or interaction. We have implemented &apos;a prototype called AVE (Automatic Visualization Environment) that generates diagrams automatically based on a generative theory of diagram design. According to this theory, diagrams are constructed based on the data to be visualized rather than by selection from a predefined set of diagrams. This approach can be applied to knowledge represented by semantic networks. In this paper we give a brief introduction to the underlying theory, then describe the implementation and jinally discuss strategies for extending the algorithm.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1: Introduction</head><p>Diagrams are a ubiquitous form of information visualization. They occur in a wide variety of formal and informal publications, ranging from corporate reports to newspaper articles to educational materials. Yet the available tools tend to require a significant amount of design expertise from the user to convey information accurately <ref type="bibr">[Charron, 19951.</ref> The PaVE department of GMD-IPSI has been developing an automatic data presentation engine as part of an integrated publishing environment. This research is motivated by the need to retrieve and present information from large heterogeneous databases such as the electronic Dictionary of Art <ref type="bibr">[Rostek and Mijhr, 19941</ref>. The Dictionary of Art will be published by Macmillan Publishers in 1995 as a print edition of more than 30 volumes. More than 6,000 authors and 50 editors have been involved in its conventional publication process over a period of 15 years.</p><p>A portion of the Dictionary of Art text containing biographic data was used to create a smaller database. The information in this database is a model of the art history domain. The data are organized as a semantic network of a Thomas <ref type="bibr">Kamps and Klaus Reichenberger</ref> PaVE Department Institute for Integrated <ref type="bibr">Publication and Information Systems (GMD-IPSI)</ref> 15 Dolivo Strasse D-64293 Darmstadt, Germany { reichen, kamps} @darmstadt.gmd.de group of concepts connected by binary relations. The semantic network representation allows users to search the dictionary not only for specific articles, but also for facts independent of their particular textual realization. Examples of concepts stored in the database include art disciplines linked by thesauml relations (e.g., narrower term), persons, locations, biographical events, and dates. This database was used as test material for the visualization tools. The algorithms described in this paper can be applied to many other domains that have rich, heterogeneous data structures.</p><p>2: The AVE approach AVE creates graphical presentations automatically based on a generative (albeit incomplete) theory of diagram design <ref type="bibr" target="#b3">[Kamps and Reichenberger, 1994;</ref><ref type="bibr">Reichenberger et al., 19951.</ref> The main difference between our approach and those of others <ref type="bibr">[e.g., Ma&amp;inlay, 1986;</ref><ref type="bibr">Roth and Hefley, 19931</ref> is that we do not choose the type of diagram from a set of templates, but construct each diagram from basic components corresponding to relations present in the data. This strategy is useful for databases that contain heterogeneous data.</p><p>We want to present the data more meaningfully than by showing the connections between different objects. We classify the binary relations used to model our data by their relational properties. This classification is exploited to visualize the data structure. For the purposes of our visualization algorithm, we use the following basic set of relational properties: bipartite, function, reflexive, symmetric, transitive, acyclic, and tree [e.g., <ref type="bibr">Tremblay and Manohar, 19831</ref>  <ref type="table">(Table 1)</ref>. These properties are then grouped into more specific combinations that have characteristics that are useful for modeling relationships among the concepts in our database.</p><p>One of the goals of our approach is to preserve these characteristics of data relations in the visualization, that is, to find graphical means of expression that mirror the (See color plates, page  structure of the data. For this purpose, we describe diagrams as being composed of graphical elements -in this implementation only rectangles -that have attributes and are related to each other through graphical relations. These graphical relations are characterized by the same properties as the data relations, ensuring a natural mapping from data to diagram <ref type="table" target="#tab_2">(Table 2)</ref> 3: Implementation</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.1: Data representation</head><p>The AVE system was programmed in Visualworks Smalltalk from ParcPlace Systems and SFK (Smalltalk Frame Kit), a high-level modeling language implemented in Smalltalk <ref type="bibr">[Fischer and Rostek, in press]</ref>. SFK introduces a hierarchy of classes (frames) that are used to represent semantic domain knowledge. SFK insures the consistency of the network via a transaction mechanism, provides an extensive set of triggers (daemons) and external database storage and retrieval <ref type="bibr">[Rostek and M&amp;r, 19941.</ref> Semantic connections between frames are called slots. Slots specify the types of data that they may hold and the relational properties of relations. All data used by AVE must be represented by frames and slots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2: The visualization process</head><p>The visualization process proper consists of four main stages: query, analysis, constraint network generation and geometric layout The AVE system consists of several interacting branches of an inheritance hierarchy, including semantic domain frames, slot types, relations, graphical resources and layout constraints. The following sections will describe each step in detail, using Plates 2 and 4 as examples.</p><p>3.2.1: Query. We use the term "query" to represent an interface action that specifies (concretely or abstractly) the subgraph of the database the user wants to visualize, and also the component of the visualization process that is responsible for retrieving that subgraph. In the following, we will describe the latter process. An appropriate user interface is still in the early stages of development.</p><p>The query stage has several different collection strategies, both for frames and the relations connecting them. Frames may be specified in several ways: the user may provide a set of objects (e.g., via selection in a directmanipulation interface), request objects of a specific type,  or omit specific objects or object types. The query also specifies which slots should be visualized, thereby providing context sensitivity. This mechanism may be used in conjunction with an appropriate user interface to generate diagrams that focus on specific aspects of the database. The result of the query step is a collection of tnples. Each tnple consists of a domain' frame, a slot (a directed arc) and a range frame. These tnples, and the frames they contain, are passed to the analysis stage for categorization.</p><p>For example, <ref type="table">Table 3</ref> shows the data tnples for the diagram in Plate 4.</p><p>1 Product Design mrower Textile Design <ref type="table">Table 3</ref>. Tnples for Plate 4. The narrower relation is an irreflexive order.</p><p>3.2.2: Analysis. The analysis stage groups the tuples into categories based on the type of relation they represent, and groups frames based on their types. We use the terms slot-based relation and type-based relation to describe groups of tnples and frames, respectively. The data from Plate 2 was grouped as shown in <ref type="table" target="#tab_3">Tables 4a and 4b.</ref> After this grouping step, the type of each slot-based relation is refined if possible. Next, redundant (or mostly redundant) information is filtered out, followed by another topological analysis (to detect the effects of removed tuples) and finally the relations (both slot-and type-based) are ranked. These steps am treated in more detail below.</p><p>Frame and slot types are coded in the AVE system as a many-branched class hierarchy, with more specific (more restrictive topologically) types being subclasses of less restrictive types. The linear order, for example, is more restrictive than an irreflexive order. Each type class knows its collection of more restrictive type classes (usually its subclasses), and each type has a precedence score used to determine which is more restrictive.</p><p>'Here the term domain is used in its mathematical definition (the set of objects on which a function operates) rather than in the sense of the semantic domain that is represented by the frames. The topological graph of each slot-based relation is analyzed to determine if that specific dam constellation represents a more restrictive type (i.e., satisfies the relational properties of a more restrictive type) than the type that was originally declared. Starting with the declared type, its more specific sub-types are examined recursively to select one that is more restrictive than the declared type. If such a type is found, it is assigned to the slot-based relation in question. The type exists only for the duration of the current visualization step, and does not affect the declared type in the model. An example: the relationship profession between Person and Role instances is declared as bipartite. In the data for Plate 2, however, there is a one-toone relationship between Person and Role instances. Therefore, for this diagram, the type of the relation is set to "unique mapping."</p><p>Redundant information is filtered to reduce graph complexity. Under some conditions, if a given frame is a range element in at least three quarters of all tnples of all slot-based relations in which it occurs, it is subject for removal. In the cases when the ratio is less than 1, additional tuples are added to the appropriate slot-based relations to indicate the absence of that frame. For example, if a group of people, all but one of whom are artists, should be visualized, instead of using many person-artist tnples, only one person-not-artist tnple will be displayed. The information about the generalization (person-artist) could be conveyed by the caption associated with the figure.</p><p>Data relations compete for graphical relations that will visualize them. This makes the constraint algorithm sensitive to the order in which it processes the slot-and type-based relations. To ensure that the most important data get priority in the visualization, the relations are ranked by the number of frames in their domain (the union of the domains of the tnples). They are also ranked by the precedence scores of their types. The two ranks for each relation are added together, and these combined scores are used for the final ranking. When ties occur, the order of relations of the same rank is arbitrary.</p><p>In our continuing example, the ranks for the slot-based relations in Plate 2 <ref type="table">(Table 4)</ref> are shown in <ref type="table">Table 5</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2.3:</head><p>Combining Constraints.</p><p>A data relation's type determines the possible (and desirable) combinations of graphical relations that may be used to represent it in the diagram. The system has to find an optimal combination of resources, taking into account possible conflicts. For example, if one relation has used a particular resource (e.g., hue), another relation may be unable to allocate that resource for its data. The number of times a particular graphical relation may be used depends on that relation and on the combination of other graphical relations participating in the diagram. The constraint algorithm chooses one or more graphical relations for each data relation.</p><p>Constraint networks represent the graphical knowledge of the system. They consist of one node for each semantic domain object to be visualized. The nodes can be co~ected in a variety of ways: there are relative positional constraints (e.g., node A should be above node B), absolute positional constraints (e.g., the left edge of node A should be at coordinate 0.33 in some normalized cckMinate space), and attribute constraints (e.g., node C should specify the shading hue of node A).</p><p>The graphical relations (resources) allocated for each data relation determine which constraints apply to which node (i.e., visualize which semantic domain frame). The system starts with the preferred resource combination for the highest-ranked relation, then applies the most preferred combination of the next-ranked relation, and so on.</p><p>A running score (the lower, the better) is kept to measure the relative quality of the resulting display. The score depends on the number and type of resources that have been applied successfully and on the rank of the relations (the higher the rank, the more important the contribution of the relation to the total score). This score does not represent any real measure of the perceptual quality of the diagram; it is used only to keep track of the number and combinations of graphical resources used to visualize the data.</p><p>In some circumstances, one group of objects may act as categorical attributes of another group. Attributes may be visualized by combinations of shape, hue, saturation, etc. The data must be connected by a bipartite relation. If both the domain objects and the range objects of the data relation are constrained (e.g., by a relative position graphical relation), no attribute visualization is possible. If both are unconstrained and the data relation represents a unique mapping, the data range is used as attributes; if the inverse relation is a unique mapping, the data relation domain objects become the attributes. If neither is a unique mapping, the set with the lower cardinality becomes the attribute set.  <ref type="table">Table 6</ref>. Assignment of graphical relations.</p><p>Resource application may fail. Such failure is caused by conflicts between graphical relations (e.g., node A should be above node D, node D should be above node E, but node E should be on the same level as node A). When a failure occurs, the running score is increased by a suitably large value (that depends on which resource was not satisfied) and the process continues.</p><p>If at the end of resource assignment some relations are not represented due to constraint conflicts, the process backtracks to the first conflict and retries with the next best resource allocation. A search tree is used to find the optimal combination of resources. If at any point during constraints impose. Finally, since graphical elements have backtracking the running score exceeds the current minitwo-dimensional extents, we have to consider inter-element mum, that branch of the search tree is pruned.</p><p>repulsion as an aesthetic objective. When the constraint computation process completes, there is a round of post-processing during which typespecific actions (e.g., mapping values of a linear order onto screen coordiites) are performed. After the structural information inherent in the data has been extracted and captured in the constraint network, the network is passed to the next stage that derives a specific geometry for the display. <ref type="figure">Figure 2</ref> illustrates the effects of not optimizing the parameters described above. <ref type="figure">Figure 2a</ref> shows all factors being used. In <ref type="figure">Figure 2b</ref>, angle optimization has been removed. <ref type="figure">Figure 2c</ref> does not optimize edge length, and <ref type="figure">Figure 2d</ref> neglects geometric distances in the layout.</p><p>l-l r-l dpii -j=</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.3: Geometric layout</head><p>The constraints established by some graphical relations do not determine the resulting diagram completely. The constraint-generation algorithm may fix the x and/or y coordinates of some objects, may leave other objects completely unconstrained, or may constrain some objects to lie below or to the right of others. Therefore, each object has up to four degrees of freedom.</p><p>The geometric layout algorithm calculates object positions that satisfy the constraints from the resource allocation step. This calculation simultaneously optimizes distance, edge length and the angle between edges, and also takes into account inter-element repulsion <ref type="figure">(Figure 1)</ref>.</p><p>For objects connected by lines, we attempt to match the geometric distances to the corresponding topological distances in the graph. Also, homogeneous edge length is important for the perception of the diagram. Therefore we consider this a separate aesthetic objective.</p><p>When connecting lines are used in conjunction with relative position constraints, we adjust the angles of the affected line segments towards imaginary vertical or horizontal axes that correspond to the directions that the Existing spring-model algorithms [e.g., <ref type="bibr" target="#b1">Davidson and Harel, 1989;</ref><ref type="bibr">Frnchterman and Reingold;</ref><ref type="bibr">19911</ref> optimize the geometric distances only. In our approach, the four optimization parameters are combined into an objective function that is optimized by a gradient descent algorithm.  <ref type="figure" target="#fig_1">Figure 3</ref> shows the interrelation among the objects that participate in the Analysis, Constraint and Geometric layout stages. The domain frames specify their slot-based and type-based relations, and these in turn provide a set of type objects that characterize the data relations. Each data object specifies an appropriate constraint node, and each type provides a set of graphical relations that are used to generate the constraint network. This network of constraint nodes represents all visual aspects of the diagram except the exact positions of some elements. The positions are calculated in the geometric layout stage that produces a collection of figures that constitutes the final diagram.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.4: Object eye's view</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4: Results</head><p>We've used the software prototype to generate diagrams based on some Dictionary of Art data. Plates 1 and 3 show diagrams designed by the third author. Plates 2 and 4 show similar types of diagrams generated automatically. Some observations are in order.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1: Timelines</head><p>The hand-crafted timeline (Plate 1) shows a slightly different presentation than the automatic diagram (Plate 2). The graphics artist has chosen to make the timeline bars thinner than the default thickness used by the software to enhance the effect of the horizontal dimension and to fit more data. The long bars enabled him to use long names without wrapping and left sufficient room for the attribute squares. The colors have been chosen to maximize the differences between the attributes (colder colors, more saturated hues) and the shading (warmer, less saturated hues) that represents art movements. The diagram shows the dates of the timeline only approximately.</p><p>In contrast, the automatically-generated diagram (Plate 2) shows none of this complexity. AVE will always draw the objects with the same default height, it will not attempt to shorten the text labels to tit the available space, it will not position the legend area to balance the diagram visually, it will always draw tick marks on the scale, etc. Notice also that in this case it placed the place of death attribute before the place of birth attribute because we do not model the logical relationships between data relations. This example demonstrates the multiplicity of decisions made by an expert graphic designer and the difficulty of automating -even formalizing -these decisions. Nonetheless, we can build reasonable approximations to such hand-crafted diagrams. An empirical issue worth investigating is how the subtle differences between the diagrams affect their usability and comprehensibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2: Networks</head><p>Plates 3 and 4 are mirror images because the data does not constrain that dimension. The hand-crafted example (Plate 3) shows some latitude in the positions of text labels -they have been arranged to minimize overlap. In the automatic diagram (Plate 4) the labels are forced to lie approximately above the shaded rectangles. Another difference is edge length: The geometric algorithm is designed to keep edge length more or less constant; the manually-generated diagram shows a higher variation in edge length. Finally, the box labels "discipline" are absent from the automatic case. So far we've elected not to label the interiors of these boxes because we cannot guarantee that arbitrary labels will fit. Overall, however, the AVE diagram captures the spirit of the designer's intent based solely on the nature of the narrower data relation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5: Future Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.1: Adding semantics</head><p>One of the objectives of this approach to information visualization has been to reduce the dependence on domain semantics in generating visual representations of data. This assumption makes it easier to create an algebra of graphical rules that may be combined to produce diagrams. In some cases, however, our cultural stereotypes exhibit preferences that cannot be derived in principle from the data. For example, we tend to associate blue color with low temperatures and red color with high ones; in some cases we expect numerical data to increase from top to bottom, in others to decrease in that direction, etc. To account for such idiosyncratic knowledge, the AVE system incorporates a provision for storing these preferences in the type instance associated with each slot. Thus the cross symbol may be associated with the place of death relation when it is visualized as an attribute rather than relying on chance assignment.</p><p>A problem with these displays arises when semantic and non-semantic symbols appear in the same diagram. Although the cross looks tine by itself, it clashes visually with generic shapes (e.g., a square) used to represent other relations. This suggests a guideline to domain modelers to use only semantic or only generic symbols for all relations connecting instances of classes of any two types. Another possibility is that the system can enforce the requirement that semantic and non-semantic symbols not be mixed.</p><p>Although the exact treatment of domain-specific semantic representations is still an open issue, it appears that these enhancements should produce more appropriate displays without losing the generality of the approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.2: Fuzzy data</head><p>Some data stored in the semantic network may be known only approximately. For example, the birth of an artist may be known only to within 10 years. Such uncer-tainty can always be represented textually. In our diagrams, we can also represent it graphically. When objects' positions are constrained (resulting in, for example, a timeline), uncertainty in positional attributes is indicated by a shading gradation from background to foreground over the uncertain range. Currently this shading is introduced post hoc when the elements composing a diagram are drawn. In the future, we may incorporate this effect as a full-fledged graphical relation.</p><p>In some cases, databases may have missing data. Missing data (as opposed to lack of relation) may be identified from the semantics of the domain model. For example, if some artist object does not enter into a place of birth relation with any location, that does not imply that that artist was not born; only that we don't know where. The availability of this type of information will improve the quality of diagrams we produce.</p><p>Despite these shortcomings, however, this theory appears to hold some promise in the areas of information visualization and graphic design. Graphics artists may be able to use these kinds of tools to facilitate the design process. Automatically generated diagrams may be adjusted to suit the needs and aesthetic sense of the designer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8: References 5.3: Preserving context</head><p>In an interactive environment, AVE may be used to visualize the results of successive database queries. In such cases, it should attempt to preserve some of the context to maintain a sense of continuity between successive diagrams. When possible, the new diagram should inherit from its predecessor graphical resources that emphasiie the similarities between the two data sets. It is not clear at the moment how to weigh the need for consistency versus the visualization demands of a particular data set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6: Conclusion</head><p>In this article we have described a system that automatically presents information in the form of diagrams. We have shown how arbitrary data stored in semantic networks may be organized based on the properties of binary relations that represent the connectivity of the network. We have also described a set of visual relations among graphical elements that exhibit the same relational properties. This similarity has been used to construct a mapping between arbitrary data constellations and a small set of graphical relations. We have built a software prototype of a system that constructs diagrams automatically.</p><p>Some aspects of the theory and algorithm remain to be worked out. These include, among others, a clean mechanism for extending the variety of graphical relations (e.g., object size, nested inclusion, etc. from Table 2), consistent treatment of filtered data, an algorithm for detecting patterns that occur between (rather than within) data relations, issues of scale, and consistent treatment of missing or uncertain data.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Figure 1. Optimization parameters of the geometric layout algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Objects that participate in diagram generation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>.</figDesc><table><row><cell>Property</cell><cell>Description</cell></row><row><cell>bipartite</cell><cell>maps one set onto another</cell></row><row><cell>functional</cell><cell>one-to-one mapping from one set to</cell></row><row><cell></cell><cell>another</cell></row><row><cell>reflexive</cell><cell>maps elements onto themselves</cell></row><row><cell>symmetric</cell><cell>no preference for direction</cell></row><row><cell>transitive</cell><cell>anynodeinagraphmaybecompared</cell></row><row><cell></cell><cell>with its successor</cell></row><row><cell>acyclic</cell><cell>no cycles in graph</cell></row><row><cell>tree</cell><cell>directed; only one path to each node</cell></row><row><cell cols="2">Table 1. Basic relational properties.</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table /><note>Translation of data relations into graphical relations (*not implemented)</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4a .</head><label>4a</label><figDesc>Slot-based relations for Plate 2.</figDesc><table><row><cell>Type-based</cell><cell>relation</cell><cell>Type</cell></row><row><cell>Person type</cell><cell></cell><cell>unqualitled</cell></row><row><cell>Role type</cell><cell></cell><cell>unqualilied</cell></row><row><cell>Location type</cell><cell></cell><cell>unqualified</cell></row><row><cell cols="2">DateRange type</cell><cell>lhlearol-dex</cell></row><row><cell cols="3">Table 4b. Type-based relations for Plate 2.</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>Roles and Locations were chosen as attributes of Person because Person instances were already cons-train&amp; by position based on life spun , the highest-ranked relation. Locations were coded by hue and shape to distinguish between the two relations (place of birth, place of death) that connect Person instances with DateRange instances. SeeTable 6for a summary.</figDesc><table><row><cell>Relation(s)</cell><cell>Rank</cell><cell>Reason</cell></row><row><cell>DateRange type</cell><cell>1</cell><cell>linear order has</cell></row><row><cell></cell><cell></cell><cell>highest priority</cell></row><row><cell>profession, life span,</cell><cell>3 5</cell><cell>unique mapping</cell></row><row><cell>place of death, place of</cell><cell></cell><cell>has moderate</cell></row><row><cell>birth</cell><cell></cell><cell>priority; same</cell></row><row><cell></cell><cell></cell><cell>number of tuples</cell></row><row><cell>Person type</cell><cell>6</cell><cell>low priority, three</cell></row><row><cell></cell><cell></cell><cell>tuples</cell></row><row><cell>Role type, Location</cell><cell>7.5</cell><cell>low priority, two</cell></row><row><cell></cell><cell></cell><cell>tuples each</cell></row><row><cell cols="3">Table 5. Data relation ranks for Plate 2.</cell></row><row><cell cols="3">The diagram in Plate 2, for example, shows two types</cell></row><row><cell>of attributes. Data relation</cell><cell>Graphical</cell><cell>relation</cell></row><row><cell>life span</cell><cell cols="2">horizontal position</cell></row><row><cell>profession</cell><cell cols="2">hue attribute</cell></row><row><cell>place of birth</cell><cell cols="2">shape attribute for relation,</cell></row><row><cell></cell><cell cols="2">hue for attribute value</cell></row><row><cell>place of death</cell><cell cols="2">shape attribute for relation,</cell></row><row><cell></cell><cell cols="2">hue for attribute value</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1070">-2385/95 $4.00 0 1995 IEEE Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)1070-2385/95 $10.00 © 1995 IEEE</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)1070-2385/95 $10.00 © 1995 IEEE</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7: Acknowledgments</head><p>The authors wish to thank Dietrich Fischer and Iothar Rostek for their help and advice in programming the SFK, J&amp;g Kleinz for implementing the geometric layout algorithm and Christoph Hiiser whose ideas this project reflects.</p><p>This workx has been funded in part through the RACE Europublishmg project R 2024.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A Method for Teaching Graph Selection Using Examples and Counterexamples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Charron</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>University of Toronto</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Drawing Graphs Nicely Using Simulated Annealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<idno>CS89-13</idno>
		<imprint>
			<date type="published" when="1989-07" />
		</imprint>
		<respStmt>
			<orgName>Department of Applied Mathematics and Computer Sciences, Weizman Institute Of Science, Israel</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">SFK: A Smalltalk Frame Kit. Concepts and Use</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Rostek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fruchterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Reingold</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991-11" />
		</imprint>
	</monogr>
	<note>Graph Drawing by Force-Directed Placement. in Software Practice and Experience, 21( 1 l</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Automatic Layout as an Organization Process, Arbeitspapiere der GMD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamps</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Reichenberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nr</title>
		<imprint>
			<biblScope unit="volume">825</biblScope>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Automating the Design of Graphical Presentations of Relational Information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An Editor&apos;s Workbench for an Art History Reference Work. Technical Briefing in Proceedings of ECHT &apos;94</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Reichenberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamps</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Golovchinsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>M&amp;r</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of InfoVis &apos;95</title>
		<meeting>InfoVis &apos;95<address><addrLine>Atlanta, Georgia. Rostek, L; Edinburgh, Scotland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="233" to="238" />
		</imprint>
	</monogr>
	<note>Towards a Generative Theory of Diagram Design</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Weaving a web: the structure and creation of an object network representing an electronic reference work</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Rostek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>M&amp;r</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fischer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electronic Publishing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="495" to="505" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Intelligent Multimedia Presentation Systems: Research and Principles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">F</forename><surname>Roth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Hefley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intelligent Multi-media Interfaces</title>
		<editor>Mark Marbury</editor>
		<imprint>
			<publisher>AAAI Press</publisher>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Discrete Mathematical Structures with Applications to Computer Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Tremblay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Manohar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983" />
			<publisher>McGraw-Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
