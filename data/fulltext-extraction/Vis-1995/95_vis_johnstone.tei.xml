<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Surfaces Guided by Minimal Surface Area Triangulations *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">K</forename><surname>Johnstone</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information Sciences</orgName>
								<orgName type="institution">University of Alabama at Birmingham 115A Campbell Hall</orgName>
								<address>
									<addrLine>1300 University Boulevard Birmingham</addrLine>
									<postCode>35294-1170</postCode>
									<settlement>Alabama</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">R</forename><surname>Sloan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information Sciences</orgName>
								<orgName type="institution">University of Alabama at Birmingham 115A Campbell Hall</orgName>
								<address>
									<addrLine>1300 University Boulevard Birmingham</addrLine>
									<postCode>35294-1170</postCode>
									<settlement>Alabama</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Surfaces Guided by Minimal Surface Area Triangulations *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>surface reconstruction</term>
					<term>contour data</term>
					<term>minimum area triangulation</term>
					<term>Bezier surface</term>
					<term>biomedical visualization lo7o-2385/95 $4.00 0 1995 IEEE</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a method for constructing tensor product Bezier surfaces from contour (cross-section) data. Minimal area triangulations are used to guide the surface construction, and the final smface reflects the optimality of the triangulation. The resulting surface di$ers from the initial triangulation in two important ways: it is smooth (as opposed to the piecewise planar triangulation), and it is in tensor product form (as opposed to the irregular triangular mesh). The surface reconstruction is eficient because we do not require an exact minimal surface. The triangulations are used as strong hints, but no more than that. The method requires the computation of both open and closed isoparametric curves of the surface, using triangulations as a guide. These isoparametric curves form a tensor product Bezier surface. We show how to control sampling density by Jilling and pruning isoparametric curves, for accuracy and economy. A rectangular grid of points is produced that is compatible with the expected format for a tensor product surface interpolation, so that a host of well-supported methods are available to generate and manipulate the surface.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The classical reconstruction problem of finding a surface from polygons extracted from serial sections is important to several disciplines. A common application is reconstruction of slices of MRI or CT data <ref type="figure">(Figure 4</ref>), as well as slice data from industrial and geophysical imaging. The conventional way to reconstruct this data into a surface is by an optimal triangulation, classically a minimum-area triangulation <ref type="bibr">[3]</ref> (see <ref type="figure">Figure 5</ref>). This clearly creates a polyhedral *This work partially supported by National Science Foundation grant <ref type="bibr">CCR-9213918. approximation</ref> to the surface. A smooth surface reconstruction has advantages over a triangulation, just as piecewise cubic curve fitting of point data has advantages over piecewise linear fitting.' If the interslice distance is very small and each slice is densely sampled, then a triangulation is fully adequate; however, this is often not the case."</p><p>It is infeasible to exactly find a minimal area smooth surface reconstruction to the polygonal data.3 The beauty of a triangulation is that there are only a finite number of valid triangulations, and so it is tractable to find the optimal one. Our approach, therefore, is to use the triangular reconstruction to guide the smooth surface reconstruction.</p><p>In essence, we view the optimal triangulation as a discrete approximation to the optimal surface reconstruction that needs only be refined. This approach also allows us to tap into previous work on triangular reconstruction of slice data, rather than abandoning it.</p><p>In this paper, we use the widely accepted optimality criterion of minimum area. To repeat, rather than computing a minimal surface exactly, we use the minimum-area triangulation to guide us to a smooth surface that is consistent with the minimum-area triangulation and thus a good approximation to a minimal surface interpolating the data. We choose the rational Bezier surface as our smooth surface, for reasons of efficiency and compatibility, and for all of the well-known advantages of Bezier surfaces <ref type="bibr">[a]</ref>. More specifically, we choose the tensor product rational Bezier surface. However, in order to interpolate a point set by a tensor product surface, the points 'Just as a line is not usually the best approximation to the shape of a curve between two points, a triangle is not usually the best approximation to the shape of a surface between three points (especially the shape of a human organ).</p><p>2Slices are spaced out due to concerns about radiation exposure, limitations in technology, limitations in time, and other factors.</p><p>3Moreover, this surface may not be desirable as precisely minimal surfaces can adopt strange shapes.</p><p>(See color plates, page  should be organized into rows and columns of a rectangular grid. Moreover, the points in each row (resp., column) of the grid will be placed on the same isoparametric curve of the surface.4 Once we have a rectangular grid of data points in this conventional format, there are a host of well-supported ways of generating and manipulating the surface.</p><p>Therefore, our problem reduces to finding natural isoparametric curves defined by the original slice data, in orthogonal directions (or actually, just a set of points on these isoparametric curves). The basic step in our method is to choose a curve which spans the surface in one direction, place 'seed points' along this curve, and allow these seeds to 'flow' in the orthogonal direction. The flow of a single seed point defines a curve. The flow of the ensemble of seed points defines a set of isoparametric curves which are orthogonal to the originally chosen curve.</p><p>The following argument establishes why it is valid to use the triangulation to find a point on the same isoparametric curve. As the number of points on each slice increases, the triangles of the minimum-area triangulation become thinner, and in the limit become lines connecting two points on neighbouring slices. Notice that, in this limit case, each point on slice i is connected to just one point on slice i + 1. That is, this limit surface is a lofting between the two slices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 A lofting of two curves c(t) and d(t)</head><p>is the surface generated by joining each pair of points with the same parameter value by a straight line, which becomes an isoparametric curve of the surface.</p><p>Moreover, this is a minimum-area lofting since it is generated by the limit of minimum-area triangulations. In other words, a minimum-area triangulation can be viewed as a discrete approximation to a minimum-area lofting.</p><p>But a minimum-area lofting is itself a linear approximation to the minimal-area surface connecting the two slices, the surface that we are striving for (but willing to approximate smoothly). That is, the straight lines of the lofting are linear approximations to the isoparametric curves of the minimal surface. Thus, a minimum-area triangulation is a discrete approximation to a linear approximation of a minimal surface; and a triangle of a minimum-area triangulation is a discrete approximation to a linear approximation of an isoparametric curve of the minimal surface. The triangles of the minimum-area triangulation should therefore be used as guides to the isoparametric curves of the smooth surface reconstruction.</p><p>We will refer to the process of following the triangulation to find isoparametric curves as 'flowing over the triangulation' and the isoparametric curves that we find as 'flow lines'. We purposefully use the term 'flow' to describe this process, since the flow of isoparametric curves across the minimal triangulation behaves quite similarly to the flow of liquid across a surface.</p><p>However, we are not using traditional methods of flow computation.</p><p>Here is a high-level sketch of the method: Place seed points along one 'vertical' curve and flow these points to form a collection of isoparametric curves ('horizontal' again!).</p><p>At each stage, care must be taken to ensure that the approximations are adequate. The number and spacing of the 'seed points' are adjusted, as needed.</p><p>The rest of the paper is structured as follows. In Section 2, we place this paper in the perspective of previous work on surface reconstruction from slices. In Section 3, we formalize how to use the triangulation to compute isoparametric curves of the surface reconstruction.</p><p>In Section 4, we show how to place the isoparametric curves in order to properly cover the surface. In Section 5: we show how the computation of closed isoparametric curves differs from the computation of open isoparametric curves. In Section 6, we recall how a tensor product surface can be constructed from the isoparametric curves, or rather from a grid of points on isoparametric curves. We review and accumulate the steps of the entire reconstruction algorithm in Section 7, and we end with some conclusions.</p><p>Note that in this paper we have chosen a very restricted class of surfaces, namely those which are easily and naturally described by a tensor product Bezier mesh. Essentially, this limits us to surfaces which are topologically equivalent to a cylinder. Branching structures. are beyond the scope of this work (but see <ref type="bibr">[S]</ref>). We can easily adapt our method to the reconstruction of surfaces with the topology of a sheet or torus. For surfaces with the topology of a cylinder, we must already deal with both open and closed isoparametric curves. With the torus, both sets of isoparametric curves are closed, and with the sheet they are both open.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>There is a large literature on optimal triangulations of polyg,onal data organized into slices [5, 3, 1, 4, 61.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Most of this work ([S] is an exception) consider the piecewise planar triangulation</head><p>to be the final reconstructed surface. There is also some work on directly reconstructing a smooth surface, such as <ref type="bibr">[7]</ref>. These direct smooth surface reconstruction techniques do not compute triangulations, and do not impose any minimal area conditions on the smooth surface. Our method differs by its use of the triangulation to guide the smooth surface reconstruction.</p><p>There are also many naive approaches to reconstructing point data into a Bezier surface, by arbitrarily imposing a rectangular structure on the data points (e.g., by their number in the slice). The minimum-area triangulation of the point data contains considerable global information about the optimal smooth minimal surface. In particular, given a point P on slice i, the triangulation gives a good range for the point on slice i + 1 (or i -1) that lies on the same isoparametric curve of the minimal-area surface 1 the point that P flows to). In this section, we will ormalize this computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head><p>2 Let P be a point on slice i. The optimal partner for P on slice i + 1 is the point of slice i + 1 that lies on the same isoparametric curve of the minimal-area surface as P. The best partner for P on slice i + 1 is our educated guess at P's optimal partner, using the minimum-area triangulation as a guide.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head><p>3 Let P be a point on slice i that is a point of our original data, and thus a point of the triangulation. If P is connected by the triangulation to points op,(Yp+ l,... ,/?p on slice i + 1 with (up # pp, we call P an apex point ( <ref type="figure" target="#fig_0">Figure 1</ref>).</p><p>Let P be an apex point on slice i, connected to pointsq,... gulation has , r on slice i + 1 <ref type="figure">(Figure 2(a)</ref>). The trianchosen this range of points as candidates for the best partner. We compromise and choose the 'midpoint' of this range, as follows.5 Let Ci+l(t) be a curve interpolating the data points on slice i + 1. We choose the point on Ci+l(t) with parameter value Ip+tr as the best partner of P, where t and t, are the pa:ameter values of points q and r. N%,ice that if an appropriate parameterization is used (we use and suggest centripetal parameterization [2]), this parametric midpoint is close to the true midpoint of this range. We note this result for future reference.</p><p>Definition 4 If P is an apex point, as above, the best partner of P is Ci+l(F). <ref type="bibr">5</ref> We have considered other ways of choosing a point in this range, but discovered that the parametric midpoint has the best behaviour.</p><p>It also happens to be the most efficient choice. For example, the closest point to P is a candidate, but it keeps the best partner off of 'mountains' on slice i+l, which are important features we do not want to lose. The triangulation does not directly indicate where the best partners of other points of slice i lie. However, we do know that isoparametric curves, and thus best partners, should not overlap on the final surface: if Q is between P and R on slice i, it should follow that be&amp;partner(Q)</p><p>is between bestpartner (P) and be&amp;partner(R) on slice i + 1. This leads naturally to the following definition. (We again assume that we have computed curves C;(t) and Ci+l(t) interpolating the data points of slice i and i + 1, respectively.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head><p>5 Let P be a point on slice i, not an apex point, with parameter value t and Aa be the apex points on c <ref type="figure">Figure 2(b)</ref>). Let A1 s ice i that surround P, with parameter values al and a2. Let B1 and B2 be the best partners of A1 and A2 on slice i + 1, with parameter values bl and b2. The best partner of P is the point on BIB:! in the same ratio as P on the segment AlA2:</p><p>i.e., the point with parameter value ~*bl+~*b</p><p>This establishes how the triangulation guides the flow of points to neighbouring slices. We have restricted our discussion to upward flow, from slice i to slice i + 1: downward flow from slice i to slice i -1 is entirely analogous.</p><p>The reader will have noticed that we have made heavy use of interpolating curves in the computation of best partners. In effect, on each slice i, the original data consisting of n; points has been replaced by a PQ R <ref type="figure">Figure 3</ref>: A mountain A^B smooth curve6 that interpolates this data. This is consistent with our goal of generating a smooth surface: a triangulated surface implicitly represents each slice by the polygon connecting the data points; a smoother curve is a better representation for the slice (especially for biomedical objects).</p><p>4 Seeding flow lines 4.1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Original seeds</head><p>We are now ready to create isoparametric curves of our surface <ref type="figure">(Figure 7)</ref>. In the following, isoparametric curves will be referred to as flow lines. We begin with 'vertical' isoparametric curves (if slices are horizontal).</p><p>We start with a data point (a 'seed') and flow it to all other slices. Suppose there are n slices. If Pi is our original seed on slice i, we compute Pj for i &lt; j &lt; n where Pj is the best partner of Pi-1 (flowing up) and then we compute Pj for 0 5 j &lt; z where Pj is the best partner of Pj+l (flowing down). The set {Pj : 0 &lt; j &lt; n} is a discrete representation of an isoparamet&amp; curve of the surface.</p><p>Initially, we choose seed points on only one of the slices.7 We now explain why this is not enough.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Mountains</head><p>Consider <ref type="figure">Figure 3</ref>. It shows a tall feature on one slice. These tall features are commonly connected to only one point on a neighbouring slice by the minimum-area triangulation, as shown.</p><p>Definition 6 A mountain is a segment S of a slice such that the data points on S are all connected by the triangulation to a single point Q on a neighbouring slice <ref type="figure">(Figure 3</ref>). If P and R are the data points neighbowing Q, the segment P-R is called the pass into the mountain. <ref type="bibr">6</ref> We use cubic B-splines. 'We choose the middle slice in our implementation.</p><p>Any one of the slices is a good choice and delivers similar results, except for the first and last slices which are often degenerate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>An interesting characteristic</head><p>of the flow procedure of the previous section is that it tends to avoid mountains. This is due to the narrow passes onto mountains. In <ref type="figure">Figure 3</ref>, the only way for a flow line to travel over the mountain AB,is for the flow line to enter slice i in the segment PR, a narrow pass that always contains just three data points. However, notice that it is very unfortunate to miss the mountains, since the mountains of our data set contain all of the interesting features: without mountains, each slice is essentially flat. So to represent a tensor product surface by a network of curves that remains in the valleys and rarely ventures onto the mountains is a mistake. We therefore seed the mountains as well.</p><p>Rather than identifying mountains by their above definition, we recognize them as features not yet captured by the flow lines. Consider a slice and the flow lines that cross it, say at points Fl,. . . , F,.</p><p>Consider a dlata point P on this slice that lies on segment Fjpj+l.</p><p>If the distance of P from the line FjG+l is greater than some user-defined value d, then we seed another flow line from P. The value of 8 allows the designer to control the feature size that will be captured by the surface, and thus the accuracy of the reconstruction. This process of looking for 'mountains' and seeding them is done repeatedly on each slice until all mountains are covered by flow lines. Our experience shows that there are only a few mountains that need to be seeded in any data set (11 in the example of <ref type="figure">Figure 7)</ref>.</p><p>Notice that the number of original seeds chosen in Section 4.1 is not critical: we may start with only a few and then rely upon the seeding of mountains as above. We certainly do not need to place a seed at every data point in Section 4.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Flowing from mountains</head><p>The computation of best partners during the seeding of mountains is slightly different than during our original seeding. In the original seeding, the flow line is guided only by the triangulation.</p><p>However, we are now inserting a flow line in between two existing flow lines, so the new flow line must also be guided by these flow lines, to avoid crossing neighbouring flow lines. Consider a new seed point P on slice i that lies between flow lines Fl and F2, and suppose that we want to compute its best partner on slice i + 1. The triangulation suggests that the best partner lies somewhere in the range A^B8 while the flow lines enforce that it must lie between flow lines Fl and F2. To find the best partner, we intersect these two ranges. If they do not overlap (which occurs only rarely), the flow line range takes precedence. Within this new range, we choose the exact position of the best partner by straightforward linear interpolation based on the position of the original point P within the msociated interval on slice i.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.4</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Pruning flow lines</head><p>During the construction of flow lines, it is possible for two flow lines to come undesirably close (based on some user-defined measure), although they will never cross. This commonly occurs if the triangulation and flow lines conspire to force two newly introduced flow lines through a very thin pass. It is simple to identify this occurenceg and it can be corrected as follows. Suppose that flow lines A and B come undesirably close. At present! a flow line is only defined by n points, one per slice. Let the n points of flow line A be PI,..., P, with parameter values ~1,. . . , s, on their respective slices. Let the n points of flow line B be &amp;I,...,&amp;~</p><p>with parameter values tl, . . . , t,. We create the average of the two flow lines, defined by the n points with parameter values y , . , . , T on slices l,..., n, respectively. We then remove flow lines A and B and replace them by the average flow line.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Flowing in the orthogonal direction</head><p>We do not yet have the desired grid bf points to construct a tensor product surface. At present we have a set of isoparametric curves ( <ref type="figure">Figure 7</ref>) and we know n points on each of these isoparametric curves (the points where these isoparametric curves cross the slices). Suppose that we have m isoparametric curves and the n points on the jth isoparametric curve are <ref type="bibr">Pl,</ref><ref type="bibr">j,</ref><ref type="bibr">P2,</ref><ref type="bibr">j,</ref><ref type="bibr">...9Pn,</ref><ref type="bibr">j</ref> (where pi,j lies on slice i). Suppose that we create a rectangular grid of these points, {pi,j}.</p><p>The points of the columns of this grid lie on isoparametric curves, as desired, but unfortunately the points of the rows do not: the points of row i are shackled to slice i, and slice i is not necessarily an isoparametric curve. We want to allow the points in the ith row to stray from the slices to achieve a better surface.</p><p>Luckily we have almost all of the weaponry to achieve this: we merely interpret the flow lines we have constructed as new slices and repeat the above procedure. That is, we construct the minimum-area triangulation of the new slices and use the triangulation to guide the construction of new flow lines. This will create isoparametric curves in the orthogonal direction.</p><p>The second triangulation will be somewhat faster because it is open rather than closed (O(n2) rather than O(n2 logn)).</p><p>It is also better-conditioned than the first. but we do not use this to speed up the triangulatibn (e.g., by using a band-box trian&amp;ation) since we still want the minimum-area triangulation. The whole algorithm can be viewed as improving the quality of the data (for the purposes of tensor product surface interpolation) and the final data would be yet easier to triangulate.</p><p>There is only one problem: the original isoparametric curves that we created were ape?, while the new isoparametric curves we will be creating must be closed ( <ref type="figure" target="#fig_0">Figure 10</ref>). There is no guarantee that if we 'We have found it rarely necessary to prune flow lines in this way if seeds are chosen properly. flow out from point P on slice 1, using the triangulation to guide us, that this flow will return to slice 1 at the same point P after it wraps around. To enforce the creation of closed flow lines, we use the following variation on finding the best partner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head><p>7 From any slice, we can flow in two directions, since the slices form a closed loop. We want to flow in both directions and compromise.</p><p>Let p be a seed point on isoparumetric curwe 1. Suppose that points qL and qR on isoparametric curve i are found by flowing left and right from P, with parameter values tL and tR. Then we choose the point with parameter value 9</p><p>as the best partner of P on isoparametric curve i.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Construction of the tensor product Bezier control mesh</head><p>Our goal in producing a rectangular grid of points was to create an input compatible with the expected format for a tensor product surface interpolation. Once we have a point set in this conventional format, there are a host of well-supported ways of generating and manipulating the surface. The construction of a tensor product Bezier or Bspline) interpolant is classical (see Farin f 21). As part of the construction, the points of a row (resp., column) of the rectangular grid define an isoparametric curve of the surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">The algorithm in review</head><p>We now review the entire reconstruction algorithm. The input to the problem is a series of n slices Sl,S2,...,% (see <ref type="figure">Figure 4)</ref>. Each slice si is defined by an ordered set of points. In the development of this paper, we have assumed that the slices form a surface topologically equivalent to a cylinder: that is, each slice is a single closed curve." This is the format of data from many medical applications, such as the crucial areas of cardiology and neurosurgery. However, the same techniques can be used for surfaces topologically equivalent to a plane or a torus, since we show how to deal with both open and closed isoparametric curves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">(Interpolate and resample.)</head><p>On each slice si, interpolate the points of the slice by a smooth rational curve Ci (e.g., a cubic Bezier spline). This becomes the new representation for the slice.</p><p>We assume that the original point data is well sampled on the slices (as it is in our examples). If it is not, it should be resampled from Ci. Resampling can be used to correct either over-or under-sampling in the original data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">(Triangulate)</head><p>Construct a minimum-area triangulation between each pair of slices si, si+l (see <ref type="figure">Figure 5</ref>). We compute this triangulation using the method of <ref type="bibr">Fuchs,</ref><ref type="bibr">Kedem,</ref><ref type="bibr">and Uselton [3]</ref>. We now have n points on m isoparametric curves. c 7s</p><p>5. (Interpolate and resample, as in step 1) Interpolate the points of each isoparametric curve / 23</p><p>(or flow line) by a smooth rational curve Fi (e,g., a cubic Bezier spline . This becomes the new representation for the B ow line (see <ref type="figure">Figure 7)</ref>. Resample each flow line to generate a denser set of <ref type="figure">Figure 4</ref>: MRI slices of endocardial wall of heart's left ventricle points.</p><p>These become the new data points on each flow line. We now have m points on p isoparametric curves. Moreover, the collection of ith points on these isoparametric curve all lie on the same isoparametric curve (in particular, the ith isoparametric curve found in Step 5). Thus, we have a rectangular grid of points pitj whose rows and columns lie on the same isoparametric curve. This grid of points can be passed to a classical tensor product surface interpolation and rendering system (see <ref type="figure" target="#fig_0">Figures 11-12</ref>). Notice that only features smaller than the tolerance d from Section 4.2 can be missed by the surface, so as the tolerance decreases, the fidelity of the surface to'the original data increases.</p><p>Smaller tolerances reflect the original data more accurately (including noise) but have more isoparametric curves across the surface and thus a bigger Bezier control mesh. Conclusions</p><p>We have shown how to build a smooth surface reconstruction that is faithful to an optimal triangulation, without the intolerable expense of computing a truly optimal surface. Although we approximate the given data by the surface, the accuracy of the surface to the original point data can be controlled by the designer. A characteristic of our method is that each step discards previous data: we start with original slices, rnove to vertical flow lines, and then horizontal flow lines, which finally define the input to the tensor product interpolation.</p><p>Finally, we have addressed the issue of sampling density by filling and pruning flow lines, for accuracy, economy, and numerical stability.</p><p>In this paper, we have used the term 'minimal area triangulation'.</p><p>It turns out that it is not always sufficient to simply minimize the area. In certain pathological cases (which are beyond the scope of this paper), it is necessary to consider not only the area, but also the aspect ratio of individual triangles. Briefly, we achieve this by considering both the area and the perimeter of each triangle. The effect is to generate a minimal1 area surface almost everywhere-the perimeter information simply breaks ties between competing triangulations with very similar surface area.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>P and Q are apex points, R is not 3 Using the triangulation to flow up and down</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(a) Best partner of an apex point (b) Best partner of a non-apex point</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>lo A slice usually lies in a plane and consecutive slices are often parallel, but neither is a requirement of our method.3. (Seed) (a) Choose a subset of the data points on the middle slice as seed points. (b) Send a flow line out from each of the seed points, using Definitions 4 and 5 to compute best partners. ?isziz-4. (Fill and prune) (a) For each slice i While there is a mountain (a data point at distance d or more from the polygon defined by the points of the flow lines already on slice i: d is a user-defined constant) Send a flow line out from this mountain, using Section 4.3. (b) If desired, prune undesirably close flow lines, replacing by their average.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Seed, as in step 3) Choose some of the data points on one of the flow lines (say the first h as seed points, and send flow lines out from eat of these seed points, using the method of Section 5. 8. (Fill and prune, as in step 4) Find mountains on the flow lines and send flow lines out from them (seeFigure 10). Prune undesirably close flow lines, if necessary.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>FigureFigure 6 :</head><label>6</label><figDesc>Some of the best partnersFigure 9: Some best partners for vertical flow linesFigure 7: Vertical flow lines Figure 10: Horizontal flow linesFigure 11: Smooth surface reconstruction of left ventricle (tolerance .03) Figure 12: Smooth surface reconstruction of distal femur (tolerance .l) 8</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Triangulate the original 'horizontal' contour data.</figDesc><table><row><cell></cell><cell>Place seed points along a central cross-section and</cell></row><row><cell></cell><cell>flow these points to form a collection of isopara-</cell></row><row><cell></cell><cell>metric (piecewise linear) curves orthogonal to the</cell></row><row><cell></cell><cell>cross-sections.</cell></row><row><cell>l</cell><cell>Triangulate these 'vertical' curves.</cell></row></table><note>lll</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">This is due to the fact that the rows and columns of a tensor product control mesh are associated with isoparametric curves of the surface [2].</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the 6th IEEE Visualization Conference(VISUALIZATION '95)1070-2385/95 $10.00 © 1995 IEEE</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">'For example, if P lies between the two apex points A1 and AZ, then the range for the best partner of P is between the best partner of A1 and the best partner of AZ.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank the UAB NMR Lab, Ross Singleton, and Gerald Blackwell for the MRI data of the left ventricle, and Alan Eberhardt and Peter Czuwala for the MRI data of the distal femur.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Conversion of complex contour line definitions into polygonal element mosaics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Christiansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">W</forename><surname>Sederberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1978-08" />
		</imprint>
	</monogr>
	<note>XIII</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">C urves and surfaces for computer aided geometric design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Farin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Academic Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note>third edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Optimal surface reconstruction from planar contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Kedem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Uselton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="693" to="702" />
			<date type="published" when="1977-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A new genleral triangulation method for planar contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ganapathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Dennehy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1982-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">App roximating complex surfaces by triangulation of contour lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Keppel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Res. Develop</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<date type="published" when="1975-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Surfaces from contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Melyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Skinner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on d raphits</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="228" to="258" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An interactive computer graphics approach to surface representation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Abel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="703" to="712" />
			<date type="published" when="1977-10" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
