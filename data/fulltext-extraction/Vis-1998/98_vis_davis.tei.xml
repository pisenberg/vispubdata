<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Intent, Perception, and Out-of-Core Visualization Applied to Terrain</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglass</forename><surname>Davis</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Graphics, Visualization, and Usability Center</orgName>
								<orgName type="institution">Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Y</forename><surname>Jiang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Graphics, Visualization, and Usability Center</orgName>
								<orgName type="institution">Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Graphics, Visualization, and Usability Center</orgName>
								<orgName type="institution">Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolas</forename><surname>Faust</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Graphics, Visualization, and Usability Center</orgName>
								<orgName type="institution">Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Intent, Perception, and Out-of-Core Visualization Applied to Terrain</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:37+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper considers how out-of-core visualization applies to terrain datasets, which are among the largest now presented for interactive visualization and can range to sizes of 20 GB and more. It is found that a combination of out-of-core visualization, which tends to focus on 3D data, and visual simulation, which places an emphasis on visual perception and real-time display of multiresolution data, results in interactive terrain visualization with significantly improved data access and quality of presentation. Further, the visual simulation approach provides qualities that are useful for general data, not just terrain.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Interactive visualization of big data presents a significant challenge but offers the possibility of major rewards. Visualization is often the first step towards analysis and understanding. We must first "look at" the data before we can even know what to do next. Conversely, if we cannot even visualize the data, we cannot effectively explore and discover. We can only perform peripheral analysis; much of the data remains untouched.</p><p>To meet this challenge, out-of-core visualization approaches have lately been developed <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref> that allow one to display data even when the dataset is much larger than memory. These approaches attempt to organize the data in such a way that they can be transmitted from disk, either local or networked, to memory in time to support interactive visualization. To the extent that these methods are successful, they increase visualizable data by 1, 2, or more orders of magnitude and make possible the interactive exploratory analysis of many simulational and observational datasets.</p><p>In this paper we consider how out-of-core visualization might be applied to terrain datasets, which are among the largest now presented for interactive visualization. For example, we provide interactive flythroughs of datasets ranging to 20 GB in size, and interaction with even larger datasets is possible. We find that this combination of outof-core visualization, which tends to focus on 3D data <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref>, and visual simulation, which places an emphasis on visual perception and real-time display of multiresolution data <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>, results in interactive terrain visualization with significantly improved data access and quality of presentation. This set of very large dataset visualization methods will also be of prime importance for visual simulation systems that handle not only terrains but large scale collections of moving and static 3D objects and 4D fields of data.</p><p>Graphics, Visualization, and Usability Center Georgia Tech, Atlanta, GA 30332-0280 (dougd, jiangf, ribarsky}@cc.gatech.edu, nick.faust@ gtri.gatech.edu</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>The out-of-core problem is not new. Methods have long been developed and used to cope with large amount of data <ref type="bibr" target="#b5">[6]</ref>. In early research, George and Rashwan used auxiliary storage methods to solve finite element problems <ref type="bibr" target="#b6">[7]</ref>. Liu <ref type="bibr" target="#b7">[8]</ref> applied an out-of-core multifrontal method for sparse factorization. In recent years, researchers have looked at disk storage I/O optimization. In this approach, disk storage is treated as another level in the memory hierarchy, below cache, local memory, and remote memories. Parallel programming models and software are used to manage the movement of data between any two adjacent levels in a hierarchical memory system.</p><p>Until recently, however, there has been little work that directly addresses the problems of out-of-core visualization. But from what has been done so far, it is clear that application-control and domain-dependent data organization are essential to achieving good performance. Relying on system virtual memory, for example, frequently results in thrashing and abysmal performance. Ueng et. al. <ref type="bibr" target="#b1">[2]</ref> apply an application-controlled segmentation approach to out-ofcore visualization. They spatially and hierarchically partition the dataset into an octree and load only needed segments. One problem with their approach is how to determine segment boundaries. Cox and Ellsworth present application-controlled demand-paging <ref type="bibr" target="#b0">[1]</ref>, in which the system knows something about what data are needed and when. By considering operating system memory management, they minimize thrashing. Zyda and coworkers <ref type="bibr" target="#b3">[4]</ref> came up with a hierarchical quadtree data structure by evenly subdividing data into square quadnodes and rendering with regular grid polygonalizations. Based on this regular grid they develop a paging method that takes into account the viewpoint and speed of the user. Our approach applies to multiple linked quadtree structures that are much deeper so that one can consider global terrains, rather than patches as in the Zyda approach. Further we apply a continuous level of detail method, instead of fixed levels, so that visual artifacts during paging are minimized. In all these cases, dataset paging and rendering are considered separately; there is little in the literature on adapting application-controlled segmentation for optimal rendering. This is one of the issues we address in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. APPLYING INTENT AND PERCEPTION TO OPTIMIZE PAGING</head><p>For accuracy and speed, our terrain visualization system subdivides the globe into 32 quadrants, each 45 o x 45 o <ref type="bibr" target="#b4">[5]</ref>. Each quadrant has its own quadtree; all are linked so that terrain crossing quadrant boundaries can be rendered correctly. To improve performance, the system is divided into multiple threads that can run in parallel. In particular, there is an independent rendering thread, which has a "triple buffer" of display lists for each window (there can be multiple windows). One of the display lists contains what the renderer is currently drawing, one is used by the scene manager to buffer graphics commands, and the last contains data that are ready to be displayed. This scheme allows both the renderer and scene manager to run simultaneously without having to be synchronized.</p><p>The terrain paging thread has a terrain server and terrain manager. The terrain server loads pages from disk while the manager decides which terrain level of detail should be loaded (taking into account user viewpoint and navigational speed) and passes it along to the scene manager. The terrain server and manager communicate with the scene manager and the rest of the system via shared caches, so that communication is limited to small request messages and acknowledgments. This communication path supports a demand-paging approach such as that of Cox and Ellsworth <ref type="bibr" target="#b0">[1]</ref>. When data are needed for a node in the quadtree, the scene manager allocates space in the shared cache and sends a message via a shared memory priority queue to the terrain manager. Message priorities in this queue are changed dynamically according to the importance of the associated request as determined by the terrain manager. Thus, requests that gradually become less important sift towards the end of the queue and get serviced only when no higher priority requests remain in the queue. This is important, as the paging rate during short bursts of requests is typically much lower than the request rate.</p><p>This paging model is quite flexible, as priorities can be assigned or changed quickly, based on a variety of criteria. These include, for example, giving lower priority to highest resolution pages when the user is navigating over the terrain above a certain speed or giving priority to pages in the center of the view frustum. The underlying disk management system has a file structure with files aligned with the quadnodes in the set of linked quadtrees. Put together, all this makes the terrain visualization system quite scalable. Tens to hundreds of gigabytes of data may be made available for visualization, either locally or remotely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Optimizing Paging</head><p>We have found that the above page priority procedure sometimes falls short when handling global data. Users of such data frequently fly from a global view where the terrain elevation and imagery data are at 8 Km resolution to views close to the ground where the data are at 1 M resolution or higher. This is a change in page area scales of 8000 x 8000 or more! If the user flies in too fast, the traversal of linked quadtrees by the terrain manager falls well behind the user's navigation. In this case the paging can stall, taking 20 seconds or more to bring in high resolution pages. This happens even though the pages themselves are of modest size (each page is 70-75 KB), and the time to page in an entire scene is usually nearly a factor of 10 faster. We did a detailed investigation and found that this problem occurred when the queues became so backed up that pages were being read in after they were passed in the navigation. Our straightforward scheduling scheme broke down in this instance. This was exacerbated by the problem that pages had to be read in to get important properties information they contained, such as geospatial bounding boxes and elevation delta values, that were necessary to determine if the pages should be culled and at what resolution they should be displayed <ref type="bibr" target="#b8">[9]</ref>. To address this problem we set up a separate set of indexing trees that were connected to the properties information but were lightweight so they could be traversed quickly. (See <ref type="figure">Fig.  1</ref>). Large segments of the indexing trees reside in main memory for fast access. We use these trees and the properties information they contain to determine when pages should be paged in from disk. With the flexibility of this scheme we can skip one or more levels before paging in terrain elevation and image data. We have instituted a predictive mechanism based on user navigational speed and viewing direction to help predict where the terrain manager should skip. However, the skips cannot involve too many quadtree levels, because there will be too few vertices to complete high resolution triangles (since some vertices come from the skipped levels). This would cause gapping in the terrain fabric that could appear and disappear during navigation. We have determined that the maximum jump is 5 or 6 levels, and thus impose that constraint on the terrain manager. However, when jumps of more than 6 levels are called for, we save time by inputting but not rendering the required vertices. The result of all these steps is significant improvement in time-to-display for pages, as discussed in the next section.</p><p>Since the scene manager is receiving continuous updates from the user via the user interface, it can pass these along to the terrain manager. This allows the paging process to respond to user intent and action, as we have seen, and also to make use of user perception. Our first perceptuallybased implementation is to bring in pages first at the center of the view frustum, since this is where the user interest is likely to be. Previously, pages came in randomly in the viewing area, but with the new implementation, contiguous pages at the center of interest come in first. Thus the user need not wait for the whole scene to page in at high resolution, so this new paging scheme decreases effective time-to-display. Results are discussed in the next section. We have extended this concept to head-tracked implementations of the terrain visualization system on the virtual workbench. Here the direction of the user's head is also taken into account in determining which pages to display first. It would be straightforward to extend to eye tracking systems, providing an even tighter coupling to user actions.</p><p>We are considering other couplings between user actions and perception. For example, when a user is flying fast and low over terrain, the pages may be displayed at lower resolution than when she pauses. We are considering an implementation that constrains the manager to be at or above a certain level of the tree, based on user speed and height.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. TERRAIN VISUALIZATION RESULTS</head><p>We present results for a global terrain database. It has worldwide terrain at 8 Km, U.S. data at 1 Km, Georgia at 100 M, and several insets ranging from 10 M to 0.5 M. The total size of the dataset is 1 GB. The results presented here do not differ significantly using an appropriately configured system with local disks and up to ten or more GB of data. If we did not use paging at all and could insure that data would be brought in without thrashing, we would have to bring in a whole new scene whenever the memory limit of the machine was reached. This time would be of the order of the start-up time for the visualization system, about 2-3 minutes on an SGI Infinite Reality, and significantly longer for slower systems. For high resolution areas, this might occur after the user navigates only a few tens of miles. From <ref type="table" target="#tab_0">Table 1</ref> below, we see that our initial out-of-core visualization algorithm (nonoptimized in <ref type="table" target="#tab_0">Table 1</ref>) cuts this time by a factor of up to 20. In these timings, the machine used is either an SGI IR or a dual processor PC running Windows NT. The Infinite Reality has 4 R10000 processors, 1 GB of memory, and 9 GB of disk. The PC has two Pentium Pro 200 processors, 160 MB of memory, 4 GB of disk, and an Evans &amp; Sutherland RealImage 3D graphics card. Thus we have tested machines at widely different levels of performance and memory capacity.</p><p>The timing data in <ref type="table" target="#tab_0">Table 1</ref> were obtained as follows. Since the paging depends on the route navigated, we flew along approximately the same route at the same speed in each of the timing runs. After the lowest resolution data was loaded, we began the timing and zoomed in to the same spot, waiting till all requested data was loaded and displayed. Then we turned off the timer. We did this several times for each set of conditions to observe fluctuations in the paging that a typical user might see. To further stabilize the results we subtracted the zoom-in times from the total times and report the average difference and deviation in <ref type="table" target="#tab_0">Table 1</ref>.</p><p>Our optimized paging, using the indexing quadtree that permits level skipping with prediction based on user speed and direction, produces a smoothing of the time-to-display as one navigates high resolution terrain, as seen in the rms deviations in <ref type="table" target="#tab_0">Table 1</ref>. It also produces a 6-7 times improvement on the IR in average time-do-display. Note that the PC shows 11-12 times improvement over the nonoptimized case, presumably because of less contention over the data bus when fewer pages are sent. It also shows a much lower rms deviation for the same reason.</p><p>We also present in <ref type="table" target="#tab_0">Table 1</ref> results for networked paging on the IR. These are for a remote disk accessed via a connection that travels over a high speed link between two ethernets. Thus the data pass through routers. Even so, the paging is comparable to local paging in both nonoptimized and optimized cases, though the fluctuation is larger. This result indicates that interactive visualization can be retained even when using networked data. <ref type="figure">Figs. 2 and 3</ref> compare the non-optimized and optimized algorithms, at the same point after the same navigation process, for high resolution (1 M) mountain terrain from the NTC. In the non-optimized case the user would have to pause here since the scene at this distance is too fuzzy to make out details. The pause might be up to 10 seconds on the IR and much longer on the PC.</p><p>In <ref type="figure">Figs. 4</ref> and 5 we present views, after the same navigation process, with and without priority paging of the view center. The view is for 0.5 M urban Atlanta data a few hundred meters above the ground. We see that the view-centered image displays acoherent picture so that the user can interact and even continue to navigate. If we define the effective time-to-display as the time to get such a picture, it takes about 50% less time compared to nonpriority paging of the whole image. Thus there is an effective doubling in the rate at which the user can navigate and interact.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS AND FUTURE WORK</head><p>We have presented results for new out-of-core visualization techniques applied to very large scale terrain data. By combining methods such as hierarchical data structures, appropriate page sizes, and demand-paging with visual simulation approaches, we have come up with improved techniques. These use prediction based on user actions and perceptually-based display based on user intent. Our results show that out-of-core visualization in a visual simulation framework produces results that permit interactive visualization and navigation even as datasets exceed tens of gigabytes. In addition, our approach We believe the general techniques presented here are more widely applicable. It is already known how demandpaging and hierarchical structure can be used for out-ofcore visualization of other types of data <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. The use of a flexible, lightweight hierarchical framework for quick, prediction-based traversal can also be of significant help for other data. Further, a tight coupling of the user interface to the paging process will permit priority page selection based on user actions and intent such as described here. In fact, we are in the process of generalizing our terrain visualization system to handle large numbers of moving objects, buildings, and 4D data fields such as weather. All these data will be paged, and we expect to use the out-of-core visualization framework described here.</p><p>In addition, we expect to do further work on perceptually-based paging. This includes loading lower resolution pages when doing high speed flying close to the ground. We will also explore extending our database structure to include page priority information. With this information we can load pages based not only on perceptual factors but also on relative importance. We expect this to be especially useful for the paging of buildings and moving objects and for situations where there is a lot of clutter or where real-time display is essential.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig 1 :Fig 2 :Fig 4 :</head><label>124</label><figDesc>Terrain management structure After fly-in, without prediction Fig 3: Same as Fig 2, with prediction &amp; without node skipping &amp; with node skipping After fly-in, with random paging Fig 5: Same as Fig 4, with prioritized center paging</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 Non</head><label>1</label><figDesc>Finally, we find that the methods are especially effective on systems with lower data I/O rates, such as PCs.</figDesc><table><row><cell>To Atlanta (IR, remote) To NTC (IR, local) To Atlanta (PC, local) To NTC (PC, local)</cell><cell>-optimized 11.75 ± 2.58 sec 13.81 ± 0.95 72.12 ± 3.63 70.35 ± 14.53</cell><cell>With skipping and prediction 2.00 ± 0.30 1.83 ± 0.19 6.58 ± 0.59 6.38 ± 0.40</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was performed in part under contract DAKF11-91-D-004-0034 from the U.S. Army Research Laboratory. We would like to thank Larry Tokarcik and his team at the Army Research Laboratory for supplying data used in this work.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Application-Controlled Demand Paging for Out-of-Core Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ellsworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings, IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="235" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Out-of-Core Streamline Visualization on Large Unstructured Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Ueng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sikorski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="370" to="379" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lane</surname></persName>
		</author>
		<title level="m">UFAT: A Particle Tracer for Time-Dependent Flow Fields. Proceedings, I E E E Visualization &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="257" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">NPSNET: Hierarchical Data Structures for Real-Time Three-Dimensional Visual Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Falby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Zyda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Mackey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="69" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">An Integrated Global GIS and Visual Simulation System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larry</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Faust</surname></persName>
		</author>
		<idno>GIT-GVU-97-07</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
	<note>submitted to Transactions on Visualization and Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast Fourier Transform of Externally Stored Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">M</forename><surname>Brenner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TRans Audio and Electroacoustics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="128" to="132" />
			<date type="published" when="1969" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Auxiliary Storage Methods for Solving Finite Element Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>George</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rashwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J Scientific and Statistical Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="882" to="910" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">On the Storage Requirement in the Outof-Core Multifrontal Method for Sparse Factorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W H</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Math. Software</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="249" to="264" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Real-Time, Continuous Level of Detail Rendering of Height Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larry</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><surname>Turner</surname></persName>
		</author>
		<idno>GIT-GVU-96-02</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 96)</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
