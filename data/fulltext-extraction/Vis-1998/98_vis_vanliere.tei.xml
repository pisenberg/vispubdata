<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Distributed Blackboard Architecture for Interactive Data Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Van Liere</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Wim de Leeuw Center for Mathematics and Computer Science</orgName>
								<address>
									<region>CWI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Harkes</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Wim de Leeuw Center for Mathematics and Computer Science</orgName>
								<address>
									<region>CWI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cwi</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Software Engineering</orgName>
								<address>
									<postBox>P.O. Box 94097</postBox>
									<postCode>1090 GB</postCode>
									<settlement>Amsterdam</settlement>
									<country key="NL">Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Distributed Blackboard Architecture for Interactive Data Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>In this paper the motivation, design and application of a distributed blackboard architecture for interactive data visualization is discussed. The main advantages of the architecture is twofold. First, it allows visualization tools to be tightly integrated with simulations. Second, it allows qualitative and quantitative analysis to be combined during the visualization process.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The need for enhanced data modeling and data integration in visualization environments has been widely recognized and has been a topic of interest in recent workshops and conferences <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b15">16]</ref>. Although visualization environments provide rich support for graphical modeling and rendering, many visualization researchers feel that integration of the visualization environment with the simulation environment remains a problem to be solved.</p><p>In this paper a distributed blackboard architecture for interactive data visualization is discussed. The architecture has been used in various projects related to high performance computing <ref type="bibr" target="#b10">[11]</ref> and computational steering <ref type="bibr" target="#b11">[12]</ref>.</p><p>Motivation This work was motivated by the following observations:</p><p>1. State-of-the-art scientific visualization tools are not sufficiently integrated into simulation environments. In computational steering, users can investigate intermediate results and modify of the computation before completion. Feedback during the investigation may be required, for example to steer computation around local minima. Users may interactively steer simulations through adjustment of an application's critical parameters. To support computational steering tight integration between simulation and visualization is required.</p><p>2. Large data sets defy inspection by visualization alone. Analysis of simulation output often consists of a combination of visual inspection and numerical or statistical analysis. Scientific visualization environments lack the integration of general purpose analysis tools. Visualization combined with interactive analysis will allow the scientist to explore the data both visually and numerically. Combining the two allows the user to perform qualitative and quantitative analysis simultaneously. In addition, the output of the analysis tools can be combined with the visualization of the simulation data.</p><p>3. Efficient support for very large data sets is limited. Very flexible data models have been defined that allow the import/export of data from/to the simulation environment <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref>. However, in order to effectively embed these data models in the visualization environment, two system related issues have to be addressed; scalability of data, and access to remote computations.</p><p>Many visualization researchers believe that state-of-the-art visualization environments do not adequately address these problems. For example, Foley and Ribarsky <ref type="bibr" target="#b2">[3]</ref> point out that next-generation visualization environments require, amongst others, a means to bind data to geometry and a general analysis model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Blackboard Models</head><p>Blackboard models have been widely used in the AI community as a particular kind of problem solving model <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b7">8]</ref>. The blackboard model allows multiple independent agents (usually called knowledge sources) to share information in a central store (called the blackboard). The model serves as a schema for organizing reasoning steps and domain knowledge to construct a solution to a particular problem. For example, in a forward reasoning model, problem solving begins by reasoning forwards from initial data towards a goal. In this case each knowledge source will contribute its specific knowledge towards the goal.</p><p>Knowledge is segmented into modules and a separate inference engine is provided for each module. Communication between modules is realized by reading and writing in the blackboard. The blackboard can be partitioned so that it contains regions with differing, but perhaps related, data structures. In this way applications can organize the solution space into one or more application dependent hierarchies.</p><p>The blackboard model does not explicitly specify a control component. It merely specifies a general problem solving behavior. The actual locus of control can be in the knowledge modules, in the blackboard itself, in a separate module, or in a combination of these. <ref type="bibr" target="#b0">1</ref> The difficulty with this description of the blackboard model is that it only outlines the organizational principles. For those who want to build a blackboard system, the model does not specify how it is to be realized as a computational entity. However, given a problem to be solved, the blackboard model provides enough guidelines for sketching a solution.</p><p>The blackboard model can be used as a framework for implementing visualization environments. This will be substantiated in section 2.6 after we discuss some details of the distributed blackboard architecture.</p><p>Paper Format The format of the paper is: In the next sections some design details of the distributed blackboard architecture are presented. First we give and overview of the architecture, its ingredients, and its programming abstractions. Then, in section 2.6 we discuss the merits of the architecture and how our original motivations are addressed. In section 3, some related work that resembles the blackboard architecture is discussed. Finally, section 4 shows how general analysis tools can be integrated into the visualization process using the blackboard architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Distributed Blackboard Architecture 2.1 Overview</head><p>A simplified overview of the architecture is shown in figure 1. The architecture provides an interface between a user and a simulation. It is centered around a blackboard and satellite processes that produce and consume data. Satellites implement the simulation, analysis programs, geometry mapping and rendering algorithms. The purpose of the blackboard is twofold. First, it manages a database of variables. Satellites can create, open, close, read, and write variables. Second, it acts as an event notification manager. Satellites can subscribe to events that represent state changes in the blackboard. Whenever such an event occurs, it will publish the event to all subscribing satellites.</p><p>A large collection of general purpose satellites have been developed. For example, a data slicing satellite, a calculator, a data logger, a VTK satellite that provides all VTK functionality <ref type="bibr" target="#b14">[15]</ref>, etc. Also, a 3D interactive editor and rendering satellite that binds data to geometry has been developed <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Variables</head><p>The basic blackboard object is the variable, which encapsulates all information required to access a blackboard object. Variables are defined as a tuple consisting of of four components: a name, a type descriptor, raw data and a list of attributes (see <ref type="figure" target="#fig_2">figure 2)</ref>. Names  uniquely identify the variable. The variable descriptor determines the type, size and layout of the data. The data component is the storage container for the raw data. Attributes are name value pairs that may be used to describe meta-data of the variable. The underlying data model supports two composite data types: regular topology. Data which has been generated from the following grid types; i.e. uniform, rectilinear and curvilinear grids.</p><p>The regular topology data type is very similar to the data model supported by NetCDF <ref type="bibr" target="#b13">[14]</ref>. In this case, the type descriptor contains all information concerning the shape and dimensionality of the variable. geometry lists A geometry list is a list of geometric elements. Each element can be a simple geometric object, such as polygon, polyline, mesh, light, camera, etc.</p><p>The the functionality offered by the geometry list is very similar to that offered by the low level interface of P3D <ref type="bibr" target="#b16">[17]</ref>.</p><p>Future extensions to the data model will include explicit support for data with an irregular topology and scattered data. Note that these extensions do not affect the semantics of the variable, but only the expressiveness of the underlying data model. Operations on variables are very similar to low level file operations: create, open, close, read, write, and getdescriptor. Simple set/get operations are available to manipulate attribute lists.</p><p>Two scatter/gather techniques are supported to optimize I/O operations on variables. First, many variables can be read/written simultaneously in one atomic I/O operation. Second, a comprehensive data mapping mechanism is provided to allow data to be sliced, subsampled, etc during the I/O operation. This allows satellites to use a different data layout compared to the data structure stored in the blackboard. The identity mapping allows a one-to-one copy between storage in the satellite and data manger.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Architecture</head><p>The distributed architecture consists four building blocks: a global name manager (denoted as GN M ), one or more local blackboards (LBB), one or more satellites, and typed streams.</p><p>Global Name Manager: The GNM maintains the bookkeeping information of all LBBs and variables in system. The GNM maintains a list of all variables in the system and in which blackboard these variables exist. Only the variables names, descriptors and attributes are stored in the GNM. Variable data is not stored in the global name manager.</p><p>Local Blackboard: A local blackboard resides on each host in the distributed environment. Local blackboards accept connections from satellites executing on the same host and other LBBs.</p><p>Variable data is stored in the LBB, and is shared by all connecting satellites. Each LBB maintains a copy of the variable data.</p><p>The LBB manages only those variables that are opened by the connected satellites. When a satellite opens a variable, the LBB consults the GNM to check if the same variable exists in other LBBs. If this is the case, the LBB will connect with these LBBs. A LBB-LBB connection is used to maintain variable consistency (variable consistency is addressed in the next paragraph).</p><p>Satellites: A satellite is a process which communicates with its corresponding LBB. Satellites may create, open, close, and read/write variables, as well as subscribe to variable events.</p><p>An abstract satellite is shown in figure 3. Basically, it consists of an operator that transforms input data into output data. Control determines when this operation has to be carried out, or, in other words, when a satellite is triggered. Operators can also be controlled by additional parameters manipulated via user interface widgets. Data input and output is performed by read/writing variables. Input and output triggering is discussed in section 2.5.</p><p>Command, event and data streams: A connection between a satellite and the LBB consists of a command, event and data stream. Commands from the satellite to the LBB are sent over the command stream. The LBB sends events to the satellites via the event stream. Data streams are used to transport data between LBBs and satellites. Satellites execute in parallel but LBBs are single threaded, so that only one satellite can access the LBB simultaneously. However, access to different LBBs is concurrent.</p><p>When a satellite writes a variable, the LBB will broadcast a mutate event to all connected satellites and LBBs that share the variable. When a satellite reads a variable, the LBB will first check if the data is up to date and, if so, will service the read request. If the data is not up to date, the LBB will first get the latest copy of the data from another LBB before servicing the read request. The details of this algorithm are very similar to the cache consistency algorithms found on cache based SMP machines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Programming Abstractions</head><p>Satellite programmers can access the LBB using three layered APIs. Each layer provides a higher level of abstraction. Higher layers are easier to use, but provide less functionality than the lower layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">The local blackboard API is a low level library interface</head><p>which provides functionality for LBB communication, variable management and event management. This layer provides all details of the underlying LBB protocols. It requires detailed knowledge and is difficult to use due to the inherent parallelism in the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>The high level data input output layer is built on top of the local blackboard API. Many cumbersome low-level details are shielded from the user. In particular, the data input output layer hides the notion of events and has builtin support for structuring variables into sets, and support for handling efficient set I/O. The structure of this example, which is typical for continuous simulations, consists of two parts. First, variables are initialized. The required changes to existing source code are limited to opening and closing a connection with the Data Manager and connection of the variables via the dioConnect routines. Second, a main loop is entered where time is incremented and new values are calculated. The required changes to the source code is a single call to exchange data. The locations where to insert these calls are easy to find; typically at the outer level of the simulation program.</p><p>The first parameters of the dioConnect routines are the name of the variable and its address. For the connection of arrays the number of dimensions and their sizes must also be specified. The last parameter is used by the dioUpdate routine to determine the direction of the data flow. In dioUpdate first the event stream from the LBB is checked if variables to be read or updated have changed. If so, these variables are read from the LBB. Next the values of all unread variables are written to the LBB. The net result of dioUpdate is that all connected variables have the same value in the simulation and LBB. With these few calls the user can interact with parameters (s) of the simulation, to stop the simulation (continue), monitor its progress (t, x) or change state variables (x).</p><p>To deal with more hierarchical situations, variables may be grouped into sets. In the main loop the satellite can read and write specific sets, and wait until a particular set mutates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A extensible and embedded scripting language built on top of</head><p>the data input output. Scripting can be used for simple operations on variables, such as slicing and logging. The advantage of scripting is its ease of use in developing satellites.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Satellite Control and Synchronization</head><p>Satellites cooperate via the basic input/output mechanisms that are provided for variables. Writing to a variable will cause an event to be sent to all satellites subscribed to that variable. This mechanism is used to mediate the execution of satellites. The user can specify that if a particular variable -the input trigger variable -is mutated, the operator has to be evaluated. The action of operator evaluation is called triggering. Furthermore, the user can also specify an output trigger variable, which is to be written to each time the operator has been evaluated. Input and output triggers variables can be linked together to mediate the execution of satellites. In general, linking two trigger variables defines a data dependency between these two variables. Linking a number of variables results in an directed graph, which we call the trigger graph.</p><p>A high level trigger scripting language and script interpreter satellite have been developed to simplify the definition of trigger variables. The task of the trigger script interpreter satellite is to manage the trigger graph. As an example, consider the trigger graph shown in figure 5: A slicing and dicing satellite operate on simu- The trigger script interpreter satellite has been integrated in the data input output layer. Whenever the trigger script satellite interprets a trigger rule, it sets the attributes of the trigger input variable with a representation of this rule. The data input output layer uses this information to determine when a satellite is to be triggered. Note that attributes of the trigger input variable are set by the trigger script interpreter satellite and can be reset during the lifetime of the satellite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Discussion</head><p>The distributed blackboard extends the centralized blackboard in many ways; it provides support for efficient data movement among heterogeneous hosts, scales for large data sets, and offers a richer data model. Although the architecture is distributed, it is important to note that the programming model is not affected; i.e. the user and programmer view of a blackboard is still a centralized data store.</p><p>The architecture has been implemented on a number of heterogeneous UNIX and NT machines. TCP/IP is used for communication between LBB's and, when possible, shared memory is used for satellite to LBB communication. Rendering satellites are available for many display types, ranging from low-end laptop displays to sophisticated VR displays, such as the CAVE.</p><p>In retrospect, we believe that the architecture provides support to fulfill our original requirements:</p><p>integration.</p><p>The variable naming mechanism is used to bind data structures in the blackboard to data structures in the satellite. The event mechanism is used to maintain the consistency of these data structures. The net effect is that a two way binding exists between data in the blackboard and data in the satellite.</p><p>For example, a rendering satellite can utilize this by binding geometry to variables in the blackboard. A simulation can also bind the same variables. Hence, computational steering is supported. qualitative vs. quantitative analysis.</p><p>Integration of data structures is not restricted to simulation and rendering satellites alone, but can be used by any satellite. General purpose analysis tools can be packaged as satellites. numerical or statistical analysis Hence, the analysis of simulation output can be a combination of visual inspection and numerical/statistical analysis. efficiency of data transport.</p><p>Distributed blackboards maintain local copies of a data structure. A single event will be broadcasted when a satellite mutates the data structure. The data structure will be transported to another blackboard only when it is needed. This mechanism -called 'transport by demand' -saves bandwidth if data structures are written frequently but read only occasionally. ease of use.</p><p>Using the low level libraries require knowledge about event driven and parallel programming abstractions. However, higher level libraries shield all these details and allow a programmer to easily bind Fortran data structures to variables in the blackboard. In this way existing simulation code can rapidly be integrated into the environment. Also, programmers need not know that the blackboard is distributed. Abstractions for opening and manipulation variables are very similar to the familiar file handling abstractions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Related work</head><p>Many research and development teams have designed and implemented interactive visualization environments. Giving an in depth analysis of other visualization environments is outside the scope of this paper -see <ref type="bibr" target="#b3">[4]</ref> for a elaborate annotated bibliography on various aspects of interactive data visualization, including interactive program monitoring and steering. Instead of a extensive overview of related work, we discuss work dealing with issues that relate to our blackboard architecture.</p><p>Williams, Rasure and Hanson <ref type="bibr" target="#b17">[18]</ref> provide a framework to understand design tradeoffs when developing data flow based visualization systems. Data flow systems are attractive because of the similarities with the visualization pipeline: users can easily organize their simulation, filter, mapping and render modules in an intuitive way. However, data flow environments do not provide support to deal directly with the underlying data, except for importing/export data from a file or simulation. Hence, the integration with the underlying data is limited.</p><p>CAVEvis <ref type="bibr" target="#b8">[9]</ref> is a distributed real-time visualization system for streaming large scalar and vector fields into the CAVE. The governing idea is to render the geometry as fast as possible in order to maintain the highest level of interactivity. It uses separately running modules to asynchronously generate the geometry data, such as modules to generate isosurfaces or particle paths. Sequence names and time-stamps are used to gather data related to a frame, regardless of the order in which the data is received. Our blackboard architecture does not explicitly support any form of sequencing and control. Rather, the synchronization is used to provide similar functionality.</p><p>SuperGlue <ref type="bibr" target="#b6">[7]</ref> is a programming environment for scientific visualization whose main goal is extensibility and ease of use. The approach used is to offer a very generic set of primitive data structures and a inter-language interface, which programmers use to integrate data into SuperGlue system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Radon Forecasting</head><p>The distributed blackboard architecture has been applied to an atmospheric transport application. In the hope that systematic simulation errors can be found, researchers are interested in comparing simulated concentrations with actual measurements. Simulation errors can arise from modeling errors, numerical errors, visualiza-tion errors, and input errors. Using our system we want to discover systematic errors that occur due to a combination of: spatial errors: geographical locations of the simulated data differ from the measured data. temporal errors: the simulated data differ from the measured data in time. scaling errors: the simulated data is systematically higher or lower than the measured data; eg. due to an inaccurate emission sources.</p><p>Various automated data analysis techniques have been developed that search for regions in the simulated data that fit the measured data. Details of these techniques, which are are based on statistical comparison and fitting methods, are outside the scope of this paper.</p><p>The goal of this particular case is the accurate forecasting of radioactive noble gas Radon ( 222 Rn) concentrations based on measured wind and emission fields. The simulated Radon concentrations were compared with measured concentrations on three islands in the Indian ocean.</p><p>Visualization <ref type="figure" target="#fig_7">Figure 6</ref> gives an overview of the ongoing Radon transport simulation over the Indian ocean. Spot noise was used to display the wind fields. A rainbow color mapping was used to display the Radon concentrations and small colored circles showing the measured concentrations are drawn on the three sites where measured data is available.   <ref type="figure" target="#fig_8">Figure 7</ref> shows a sequence of snapshots of the automated point fitting process. Semi-transparent circles are drawn at points calculated by the data analysis techniques. The opacity of the circles is mapped to the fit of the data. Transparent circles indicate points of poor fit; opaque circles indicate points of better fit. The left image of figure 7 depicts the points in an initial configuration around Amsterdam Island. A new configuration is derived by deleting a poor fitting point and taking for a new point at a random position close to the best fit point. In this way the process converges to a minimum, the area which best fits the data. The middle image shows the configuration after a number of steps. Finally the points may converge to a stable configuration, as indicated on the right image.</p><p>A plotting satellite was used to show time series of a scalar value. The output of the plotting satellite is shown on the bottom of figure 8. The three plots show: the measured data at Amsterdam Island (top plot), the simulated data at the point of measurement (middle plot), and the best fit found by the analysis satellite (bottom plot). The user may at any time also edit the set of points by dragging any point to a different location. This is useful if the user suspects other local minima in the data which may be missed by the analysis software.</p><p>Blackboard <ref type="figure" target="#fig_10">Figure 9</ref> is a diagram of the blackboard and the satellites around it. The Radon simulation satellite creates a set of three variables containing the wind fields and the simulated scalar Radon field. After each time step this set will be dumped into the LBB. A reader satellite reads the measured site data from a data base and writes this data onto the blackboard.</p><p>The analysis satellite creates the variable containing the candidate points. It continuously dumps a new candidate points into the LBB until a stop criterion is reached. In addition, the analysis satellite opens the variables created by the simulation. Whenever a new data set is produced it will read it, and if any of the candidate points have been mutated, it will read the new candidate points. The visualization satellite will read and display the data sets and candidate points.</p><p>Upon any variable mutation, the corresponding satellite will be triggered. After each time step the simulation will dump data into the LBB. Alternatively, the user may drag a point to a new position, resulting in a new set of candidate points which are written to the LBB.</p><p>Discussion The governing idea of this example is to show how the blackboard model is used in a non-trivial setting. The application combines qualitative user actions (direct manipulation of the visualization) with quantitative analysis tools (computations of numerical algorithms). Several levels of information can be differentiated: on the lowest level computed data and measured data is available, analysis satellites consume this data to produce information of a higher level. The user, in turn, can interact with the simulation or analysis satellites as a reaction to this information. The distributed blackboard architecture is a natural framework for solving such problems. Whenever information at a certain level is mutated, the appropriate satellite recalculates its output using the new information and mutates the next level of information. Due to the blackboard architecture, data can be shared among all satellites.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper we presented a distributed blackboard architecture for scientific visualization. The blackboard architecture allowed us to address two important issues concerning interactive visualization environments. These issues are: First, tight integration between simulation and visualization. This is realized through the name concept of a variable which tightly binds data stored in in the blackboard with data in the satellite. Second, to combine qualitative and quantitative data analysis. This is realized by allowing general analysis satellites to operate in close cooperation with the visualization satellites.</p><p>The Radon application is very simple and should be seen as an elementary case study. In the future we plan to apply the distributed architecture to a 3D ozone simulation over the Netherlands. Here, the fitting criteria will be a volume, the chemical reactions involved in computing ozone are much more complicated, and the measured ozone data is less reliable. Nevertheless, there are signs that this type of visualization based analysis will provide added value to the atmospheric researcher <ref type="bibr" target="#b0">[1]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The user view of the blackboard architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Four components of a variable.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Interfaces to an abstract satellite.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 Figure 4 :</head><label>44</label><figDesc>shows a example configuration of the distributed blackboard architecture. This configuration shows two LBBs and four satellites. Both local blackboards are always connected to the GNM. The local blackboards share a variable, hence, are connected. Distributed blackboard architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>A</head><label></label><figDesc>design goal of the data input output layer was to keep the required changes to the simulation code minimal. As an example of the data input output layer, consider the following C program: simulation(float *s, float *t, int *size, float *x) f int continue = TRUE; /* Open connection, connect and subscribe variables */ dioOpen("borneo.cwi.nl"); dioConnectFloat("s", s, READ); dioConnectInt("continue", &amp;continue, READ); dioConnectFloatArray("x", x, 1, size, UPDATE); dioConnectFloat("t", t, WRITE); /* simulation loop and update data */ while (continue) f t = t + 1.0; calculate values(t, s, size, x); dioUpdate(); g dioClose(); g</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Control loop of four satellites defined by a trigger script lation output, which in turn is the input for the rendering satellite. The simulation may only compute the next step after the rendering satellite has drawn the previous frame. The rendering satellite depends on variable computed by the simulation and dicer. The script to realize this configuration is:simulation &gt; slicer slicer &gt; dicer simulation &amp; dicer &gt; renderer renderer &gt; simulation A trigger script is defined as a sequence of trigger rules. The syntax of each rule is : rule := expr name expr := expr 0 &amp; 0 expr j expr 0 j 0 expr j expr 0 ; 0 expr j 0 0 expr 0 0 j name name := satellitename</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Radon concentrations over the Indian ocean. Small colored circles show measured sites data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Comparative time sequence of converging point set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Measured data at Amsterdam Island (top) simulated data (middle) and best fit (bottom)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>Blackboard configuration of Radon application.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Initial proposals considered the blackboard only as a passive memory with external control modules that monitored the changes in the blackboard. Later -efficiency related -refinements integrated the control modules into the blackboard.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>During the coarse of this work, we have benefited from helpful discussions with Frank Dentener of the Institute for Marine and Atmospheric Research in Utrecht and Jan Verwer of the Department of Modelling, Analysis and Simulation at the CWI. We are grateful to the reviewers who provided valuable ideas for improvements of the paper. This work is partially funded by the Dutch foundation High Performance Computing and Networking (High Performance Visualization project).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Personal Communication, Institute for Marine and Atmospheric Research (IMAU), Febuary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dentener</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Engelmore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Morgan</surname></persName>
		</author>
		<title level="m">Blackboard Systems. Adison-Wesley</title>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Next-generation data visualization tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">; L</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Earnshaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Encarnacao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Klimenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Thalmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scientific Visualization : Advances and Challenges</title>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="103" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An annotated bibliography of interactive program steering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vetter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Schwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGPLAN Notices</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="140" to="148" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A data model for scientific visualizaiton with provisions for regular and irregular grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lucas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Collins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;91</title>
		<editor>G.M. Nielson and L. Rosenblum</editor>
		<meeting>Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="298" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A lattice model for data display</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">L</forename><surname>Hibbard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Dyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">E</forename><surname>Paul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;94</title>
		<editor>R.D. Bergeron and A.E. Kaufman</editor>
		<meeting>Visualization &apos;94</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="310" to="317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">SuperGlue: A programming environment for scientific visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hultquist</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Raible</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;92</title>
		<editor>A.E. Kaufman and G.M. Nielson</editor>
		<meeting>Visualization &apos;92</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="243" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Jagannathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Dodhiawala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Baum</surname></persName>
		</author>
		<title level="m">Blackboard Architectures and Applications</title>
		<imprint>
			<publisher>Academic-Press</publisher>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">CAVEvis: Distributed real-time visualization of time-varying scalar and vector fields using the CAVE virtual reality theater</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;97</title>
		<editor>R. Yagel and H. Hagen</editor>
		<meeting>Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="301" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Database Issues for Data Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Grinstein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Springer Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Divide and conquer spot noise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>De Leeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Van Liere</surname></persName>
		</author>
		<ptr target="http://scxy.tc.cornell.edu/sc97/program/TECH/DELEEUW/INDEX.HTM" />
	</analytic>
	<monogr>
		<title level="m">Proceedings Supercompting &apos;97</title>
		<meeting>Supercompting &apos;97</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Steering smog prediction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Van Liere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings HPCN-Europe &apos;97</title>
		<editor>B. Hertzberger and P. Sloot</editor>
		<meeting>HPCN-Europe &apos;97</meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1997-04" />
			<biblScope unit="page" from="241" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">3D computational steering with parametrized geometric objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Mulder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;95</title>
		<editor>G.M. Nielson and D. Silver</editor>
		<meeting>Visualization &apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="304" to="311" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The UNIDATA netCDF: Software for scientific data access</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Rew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">P</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th Interational Conference on Interactive Information and Processing Systems for Meteorology, Oceanography and Hydology</title>
		<meeting><address><addrLine>Anaheim, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="33" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The design and implementation of an object-oriented toolkit for 3D graphics and visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;96</title>
		<editor>R. Yagel and G.M. Nielson</editor>
		<meeting>Visualization &apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="93" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Workshop report: data structure and access software for scientific visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Treinish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;90 workshop report</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1991" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="104" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">P3D: A lisp-based format for representing general 3d models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Nuuja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Andrews</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Supercompting &apos;90</title>
		<meeting>Supercompting &apos;90</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="766" to="774" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The State of the Art of Visual Languages for Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rasure</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;92</title>
		<editor>A.E. Kaufman and G.M. Nielson</editor>
		<meeting>Visualization &apos;92</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="202" to="209" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
