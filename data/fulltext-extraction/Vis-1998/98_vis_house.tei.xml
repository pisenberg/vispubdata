<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Continuous Cartogram Construction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">H</forename><surname>House</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Visualization Laboratory Texas Center for Applied Technology Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">J</forename><surname>Kocmoud</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Visualization Laboratory Texas Center for Applied Technology Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Continuous Cartogram Construction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>cartogram</term>
					<term>value-by-area map</term>
					<term>map transformation</term>
					<term>anamorphosis</term>
					<term>thematic cartography</term>
					<term>constrained optimization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Area cartograms are used for visualizing geographically distributed data by attaching measurements to regions of a map and scaling the regions such that their areas are proportional to the measured quantities. A continuous area cartogram is a cartogram that is constructed without changing the underlying map topology. We present a new algorithm for the construction of continuous area cartograms that was developed by viewing their construction as a constrained optimization problem. The algorithm uses a relaxation method that exploits hierarchical resolution, constrained dynamics, and a scheme that alternates goals of achieving correct region areas and adjusting region shapes. It is compared favorably to existing methods in its ability to preserve region shape recognition cues, while still achieving high accuracy.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>A common technique for the visualization of geographically distributed data is to attach representations of the data to a map of the area of study. Misperceptions can arise, however, when geographic area and quantitative data are not correlated, because visualizing data on a traditional map inherently emphasizes regions with the greatest geographic area, while making the presentation of very small regions quite difficult. A common technique for overcoming these problems is to use an area cartogram, in which the areas of map regions are rescaled to conform to the data.</p><p>Area cartograms are often used for visualization of the geographic distribution of "routine" data in a variety of disciplines, including political science, social demographics, epidemiology and business. For example, the results of the popular vote in the contiguous 48 states in the 1996 U.S. presidential race are visualized in Color Plate 1a using traditional thematic mapping. Each state is colored a shade of red or blue denoting the majority winner as Clinton or Dole, respectively, with the color saturation indicating the magnitude of the winning percentage. This visualization fails to answer the important question, "Who won the national election?" Without prior knowledge of the populations of each of the states, and thus their electoral votes, the viewer has no clear indication of the winner. This map, in fact, produces an intrinsic distortion of the data. It could easily mislead one to reach exactly the wrong conclusion, that Dole was the winner, since his states cover a higher percentage of the total . ‡ house@viz.tamu.edu, Texas A&amp;M University, 216 Langford, College Station, TX 77843-3137. http://www-viz.tamu.edu/ † c-kocmoud@tamu.edu, Texas Engineering Experiment Station, 214 WERC, College Station, TX 77843-3407. http://teesweb.tamu.edu/ geographic area. Since elections are not won on area, but on population, a much better representation would be the visualization of Color Plate 1b. This map is an area cartogram that shows the same data, but with the states rescaled using the algorithm presented in this paper. Through the spatial transformation of states relative to the data, the cartogram emphasizes data distribution rather than geographic area, and makes it readily apparent that Clinton won. The map in Color Plate 1b is an example of a popular form of the area cartogram, the continuous area cartogram. Here the map regions are not merely scaled proportional to the data, but the map topology is maintained − common region boundaries remain attached to each other, and the spatial ordering of regions with respect to each other is consistent with the original map. Although continuous cartograms have visualization potential, they are not used very often in practice, since they are difficult to construct effectively. Therefore, having a robust algorithm for automatically constructing continuous area cartograms would be a great aid to geographers.</p><p>A good continuous area cartogram solution maintains the topology of accurately deformed areas while also preserving recognizable regional boundaries so that the map can still be read correctly. This paper examines previous algorithmic attempts at the automatic construction of cartograms and presents a new approach based on reformulating the cartogram construction task as a constrained optimization problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">EXISTING METHODS</head><p>Several computer algorithms have already been developed to construct continuous area cartograms <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13]</ref>. We present detailed background on many of the most effective of these methods and make comparisons of their results with ours elsewhere <ref type="bibr" target="#b6">[7]</ref>. Here we confine ourselves to three distinctly different methods.</p><p>Tobler developed a Pseudo-Cartogram Method that creates an equal density approximation by compressing or expanding lines of latitude and longitude until a least root mean square error solution is obtained <ref type="bibr" target="#b11">[12]</ref>. This method has proven to be an effective way to "preprocess" a map prior to cartogram construction, but is rarely used alone since the resulting cartograms can contain extensive area error. Dorling takes a Cellular Automaton approach where a grid is superimposed on the map, and individual grid cells are swapped until every geographic region has a number of cells corresponding to its desired area <ref type="bibr" target="#b0">[1]</ref>. While this method is very effective at achieving area, regions tend to lose their unique contours and acquire a shape reflecting the grid.</p><p>A number of other methods are radial in nature <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b8">9]</ref>, using a rubber-sheet paradigm. These methods apply radial transformations to the map, giving a result that is highly accurate, but also prone to "ballooning" distortions and the transformation of straight lines into curves. Gusein-Zade and Tikunov's Line Integral Method is the most sophisticated of these methods. It re- peatedly applies radial transformations such that the density of a selected cell is made uniform while leaving all other cells unchanged, with the vector sum of transformations applied as a line integral around each of the region boundaries <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">THE CONTINUOUS AREA CARTO-GRAM CONSTRUCTION PROBLEM</head><p>In contrast to earlier methods, we propose that the problem of automatically constructing a continuous area cartogram can be thought of as a constrained optimization problem posed in the following way. We assume that a map is represented as a connected collection of polygonal regions, and that there exists an area assignment function that apportions total map area among these regions. Normally, this function will assign area proportional to some geographically distributed quantity that is to be visualized. We wish to rescale map regions in such a way that we maximize "recognizability" of the regions of the rescaled map, subject to the constraints that 1) the surface area of each rescaled region is held at its assigned value, and 2) that map topology is maintained (i.e. connectivity and spatial ordering of regions must be identical to those in the original map). The search space then becomes the space of all maps that conform to the area and topological constraints imposed by the area assignment function and the original map. Within this space, we wish to select the map in which regions are maximally recognizable. The issue of "recognizability" is fraught with difficulties, as it is at best a vaguely defined cognitive term and not a measurable quantity. Lacking experimental data to back up our assumptions, and based on our personal experience with the problem, we decided to measure recognizability using two factors. The first of these is conformance of the orientation of region edges to their orientation in the original map. This tends to prevent rotation and shearing of regions. The second is that the lengths of the edges of each individual region should maintain the same proportions to each other that they had in the original map.</p><p>The optimization problem, thus posed, can be seen to be of very high dimension. Also, it is a problem to which we must generally expect that there is no obvious or trivial solution. The constraints and objective function are likely to be quite adversarial. For example, there is nothing preventing regions that share a common edge from being scaled in the opposite direction, thus making it impossible to maintain exact edge length proportionality in both regions. Likewise, the constraints themselves can easily conflict, since arbitrarily scaling regions is quite likely to break map topology as regions attempt to grow over other region boundaries, and any naiive algorithm will be likely to attempt to turn portions of regions "inside out", with edges crossing over each other, in an attempt to create "negative areas" that cancel excessive size in other parts of the region.</p><p>Due to the high dimensionality of the problem and its difficulty, we elected to model our algorithm after the simulated annealing approach <ref type="bibr" target="#b5">[6]</ref>. Although this approach is known to be quite slow, it is especially well suited to this type of problem. We did not follow simulated annealing in any precise sense, but instead exploited its key features. In simulated annealing there is the notion of temperature − large moves are made in the search space when the temperature is high, and the search is more local when temperature is low. Temperature is decreased in stages as the optimization proceeds. In our algorithm, the notion of map coarseness substitutes for temperature, and the map becomes more refined (i.e. less coarse) in stages as the algorithm proceeds. Likewise, in simulated annealing, a kind of jitter is added to the search process by having a non-zero probability of accepting new search space configurations that lower the objective function value. In our algorithm, we achieve a similar result by alternating objective functions between orientation and edge length and by alternating between an area achieving process and a shape maintaining process.</p><p>In recognition of the difficulty of the problem, we also relax the area constraint somewhat in that we are willing to examine configurations that only approximate the area constraint. To be precise, one could rewrite the area constraint to be one in which the area must be maintained within some tolerance. Topological constraints, however, are strictly maintained in our algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">THE ALGORITHM</head><p>In designing the algorithm, we divide the process of creating continuous cartograms into two distinct but conflicting tasks: adjusting region sizes and retaining region shapes. The algorithm, as shown in <ref type="figure" target="#fig_0">Figure 1</ref>, iterates over a map sampled at consecutively higher levels of detail <ref type="bibr" target="#b6">[7]</ref>. Within a level of detail, it achieves desired areas without regard to shape and then restores shape while attempting to hold the areas fixed. These tasks are performed within the modeling paradigm of a constraint-based physical system. The map vertices and region data are loaded or obtained via GIS database linkages or other sources. The data structure holding the map organizes the vertices into consistent clockwise order for each polygonal region. The map is initially acted upon at a coarse resolution and refined later to progressively higher levels of detail. Thus, gross configuration changes in the system occur during initial phases and finer details are adjusted in later phases.</p><p>Our "relaxation process" alternates between the two goals of resizing regions to their correct areas and then restoring region shapes while attempting to hold their areas fixed, switching goals when the solution "stagnates." The resulting "jitter" within the system seems to provide ample randomization to bounce the map out of local optima.</p><p>The sample graph in <ref type="figure" target="#fig_2">Figure 2</ref> shows the cycling effect between achieving area and restoring shape. The alternating re-laxation process continues until the resulting map from the areaadjusting routine contains more shape error than the preceding area-adjusted map, signaling stagnation at this resolution. In our implementation we progress to the next level of refinement after the second such increase in shape error. In <ref type="figure" target="#fig_2">Figure 2</ref>, the first and second refinement lines mark shifts to higher resolution. When this occurs, the map is reconstructed to its full resolution, resampled at twice the previous level of detail, and run through the alternating relaxation process again. The refinement process continues until the solution stagnates at the desired resolution.</p><p>The example depicted in <ref type="figure" target="#fig_3">Figure 3</ref> shows stages of the run graphed in <ref type="figure" target="#fig_2">Figure 2</ref>, beginning with the initial map in <ref type="figure" target="#fig_3">Figure 3a</ref> and the first coarsely sampled map in <ref type="figure" target="#fig_3">Figure 3b</ref>. The deformation resulting from the first attempt to achieve region areas is shown in <ref type="figure" target="#fig_3">Figure 3c</ref>, and <ref type="figure" target="#fig_3">Figure 3d</ref> shows the subsequent result of holding the areas fixed while attempting to restore shape.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Hierarchical Resolution</head><p>The first step in the simplification of map resolution is the identification of certain shared vertices that would cause a break in the map topology if they were simplified away. These "key vertices" are all interior vertices shared by three or more regions and all perimeter vertices shared by two or more regions. The key vertices of a western U.S. map are highlighted in <ref type="figure" target="#fig_4">Figure 4a</ref>. Simply connecting the key vertices, as demonstrated in <ref type="figure" target="#fig_4">Figure  4b</ref>, is impractical due to the gross shape error introduced. Instead, we simplify between key points at a resolution relative to the size of the region, as shown in <ref type="figure" target="#fig_4">Figure 4c</ref>.</p><p>A minimal number of simplified edges are constructed between two key points such that the distance between any vertex and its simplified edge is within an allowed offset distance, computed as a percentage of the length of the region's bounding box diagonal. In this manner the simplification is based upon a collection of resolutions custom-scaled to each region, providing a balanced simplification of region details that is independent of region size.</p><p>Consider the California example depicted in <ref type="figure" target="#fig_4">Figure 4d</ref>, where the coarseness level is set to allow a maximum offset of 6% of the diagonal length. The first pair of key vertices bordered the coastline and Mexican border, and a simplified line connecting them was tested first. Since at least one vertex was beyond the allowed distance from the line, a simplified line connecting the next vertex down the coastline was tested. This process continued down the entire coast, as shown in <ref type="figure" target="#fig_4">Figure 4e</ref>, until the edge merely consisted of adjacent vertices spanning the Mexican border. Two more simplified edges were required in order to complete the coastline simplification, as shown in <ref type="figure" target="#fig_4">Figure 4f</ref>. Continuing in this way, the original forty-seven edges were reduced down to seven. With each simplified edge, we store offset information to allow reconstruction (i.e. "unsimplification") of its vertices after it is scaled and rotated by the resizing process. The minimum distance between a line P and a vertex R will always be along a path perpendicular to the line. As demonstrated in <ref type="figure" target="#fig_4">Figure 4g</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Dynamics</head><p>Our method uses a dynamic system paradigm, in which area and shape maintaining forces act upon the map vertices. Within this paradigm we frequently apply strong, one-time forces upon vertices to prevent a break in map topology. In a momentum-based Newtonian physical system this could lead to oscillations and possible instability. Instead, we base our method on Aristotelian dynamics, where the velocity of a point is directly proportional to the total force upon it. Therefore, a vertex only moves when a force is acting upon it, regardless of its velocity at a previous point in time. The resulting motion is similar to that of a very heavily damped Newtonian physical system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Achieving Desired Areas</head><p>Region areas are achieved using area springs, linear physicallybased elements that exert force outward along their length when compressed and inward when stretched. Within a single region, area springs exert equal forces upon each vertex in a direction that bisects each interior angle. For an isolated region, this would result in simply scaling the region. However, as shown in <ref type="figure" target="#fig_5">Figure 5</ref>, adjacent regions exert area forces upon shared vertices, resulting in a tug of war, with the region of greatest error having the stronger hand. The area of a region with n vertices (xi, yi) is given in <ref type="bibr" target="#b3">[4]</ref> as</p><formula xml:id="formula_0">( )( ) i i n i i i x x y y A − + = ∑ − = 1 1 0 1 2 1 R R ,<label>(2)</label></formula><p>where the operator R is addition modulo n and i ∈ [0 … n-1].</p><p>The desired area Adesired of each region is made proportional to its share of the geographic quantity being visualized, scaled so that the final map will have the same total area as the original map.</p><p>a) Before area spring force application.</p><p>b) After area spring application. </p><p>The area spring force to be applied to each region vertex is</p><formula xml:id="formula_2">u F vertices area AS AS N K ε = ,<label>(4)</label></formula><p>where KAS is a user-specified scaling parameter, Nvertices is the number of region vertices, and u is the direction bisecting the angle formed by the vertex and its adjacent edges. The pseudocode for resizing regions is given in <ref type="figure" target="#fig_6">Figure 6</ref>. It begins with the distribution of area spring forces, as necessary, to the region vertices. This is followed by superimposing topological constraint forces that prevent regions from inverting and intersecting. These are described in detail in a later section. The net forces are applied to the individual vertices in the dynamics procedure, thereby affecting vertex velocities and consequently their positions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Restoring Region Shapes</head><p>Shape restoration is achieved by two force-exerting elements: orientation springs and edge length proportionality springs. The goal of orientation springs is to influence region edges to return to their initial map orientation. When an edge has deviated, equal and opposite restoring forces are applied perpendicularly to its endpoints.</p><p>The initial orientation of a simplified edge (which substitutes for any number of original edges) can be calculated as a unit vector in the direction of the line connecting the initial locations of its two endpoints. For edge k, the angular difference between the current orientation direction dk and the initial orientation d0k is</p><formula xml:id="formula_3">        ⋅ = ε − k k k k k 0 0 1 cos d d d d .<label>(5)</label></formula><p>The orientation spring force on edge k is given by</p><formula xml:id="formula_4">⊥ ε = u F k K OS OS ,<label>(6)</label></formula><p>where KOS is a user specified magnitude and u⊥ is a direction vector perpendicular to edge k. The direction of positive force for each vertex is determined from the cross-product of the initial and current orientations. Thus, the orientation spring forces tend to induce a rotation of the edge back to its initial orientation, as shown in <ref type="figure" target="#fig_8">Figure 7a</ref>  The purpose of edge length proportionality springs is to influence region boundary edges to remain in the same proportion to each other as they were in the original map. This spring exhibits force parallel to the edge to adjust it nearer to the desired proportional length. The fraction of the original perimeter taken by edge k is</p><formula xml:id="formula_5">∑ − = = 1 0 0 0 n i i k k f e e ,<label>(7)</label></formula><p>where n is the number of region edges, so that the desired length of edge k is always</p><formula xml:id="formula_6">∑ − = = 1 0 desired n i i k f L e ,<label>(8)</label></formula><p>Thus, the current percentage of error is</p><formula xml:id="formula_7">( ) desired 1 100 L k k e − = δ .<label>(9)</label></formula><p>The force is given by</p><formula xml:id="formula_8">|| ELPS ELPS u F k K δ = ,<label>(10)</label></formula><p>where KELPS is a user-specified scaling parameter and u| | is a unit direction vector parallel to the edge. The force is projected equally in opposite directions upon the two endpoints, as shown in <ref type="figure" target="#fig_8">Figure 7b</ref>, to scale the edge towards its desired length. The shape restoration pseudocode, given in <ref type="figure" target="#fig_9">Figure 8</ref>, begins with the distribution of shape forces, either from the orientation springs or the edge length proportionality springs. We have found that isolating the two shape mechanisms, whose forces are often contradicting, enables each to retain its ground more effectively against adversarial area constraint forces. The looping construct halts when the average shape error, computed as a weighted sum of degrees of orientation error and unit lengths of edge proportion error, ceases to decrease. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Maintaining Area</head><p>The key component of the shape restoration process, and our entire method, is holding the region areas fixed while their shapes are readjusting. This is done through applying area constraint forces, which attempt to cancel those components of the shape forces that would cause a change in area. The resulting constrained dynamic environment enables shape adjustments to occur without significant loss of accuracy in area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.1">Constrained Dynamics</head><p>We utilize constrained particle dynamics, as detailed in tutorial form by Witkin in <ref type="bibr" target="#b13">[14]</ref>, to ensure that our regions obey a specific area constraint. We make the obvious modifications to Witkin's method to utilize Aristotelian dynamics.</p><p>We describe our physical system through a set of differential equations involving the current system state and applied forces upon it. If xk is a vector of the positions of the vertices in region k, we see from equation <ref type="formula" target="#formula_0">2</ref>that requiring the region to maintain its desired area Ak is equivalent to maintaining the constraint equation</p><formula xml:id="formula_9">( )( ) , 0 2 1 ) ( 1 1 0 1 = − − + = ⊕ − = ⊕ ∑ k j j n j j j k k A x x y y C x (11)</formula><p>where j is an index of the n vertices in region k. Rather than process each region separately, we define a state vector x of all vertex positions, its time derivative x &amp; which is a vector of vertex velocities, and a vector C(x) whose elements are scalar constraints of the form given by equation <ref type="bibr" target="#b10">(11)</ref>. Aristotelian dynamics functions relate point velocity directly to the total force FT on the system by the global equation</p><formula xml:id="formula_10">x F &amp; = T ,<label>(12)</label></formula><p>with the assumption that each map vertex has unit mass. Total force consists of all applied forces FA, and a set of constraint forces FC that guarantee that the applied forces do not violate our constraints. Thus,</p><formula xml:id="formula_11">C A T F F F + = .<label>(13)</label></formula><p>Witkin's analysis <ref type="bibr" target="#b13">[14]</ref> shows that the constraint forces FC are scalar multiples of the columns of the jacobian matrix J, where the components of J are found by taking the partial derivatives of equation <ref type="formula">11</ref>,</p><formula xml:id="formula_12">[ ] 1 , 1 , 1 , 1 , , 2 1 ) ( S S R R j i j i j i j i j i x x y y C &amp; &amp; &amp; &amp; − − = ∂ ∂ x x .<label>(14)</label></formula><p>Here the region index i is in [0 … m-1], the edge index j within the region is in [0 … n-1] and the operators R and S are modulo n. This occurs when the constraint forces are parallel to the gradient of their associated constraint function. This can be expressed as  <ref type="formula" target="#formula_13">15</ref>, yielding the necessary constraint forces.</p><formula xml:id="formula_13">λ = T C J F ,<label>(15)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.2">Implementing Dynamic Area Constraints</head><p>As given in the pseudocode in <ref type="figure" target="#fig_9">Figure 8</ref>, the area constraining forces FC are computed following the distribution of the applied shape restoration forces FA. Thus, the constraints serve as a mediator, canceling shape forces that would tend to change region areas.</p><p>J is an m × n matrix where m is the number of area constraints (i.e. the number of regions) and n is the total number of vertices. This matrix can be quite large for maps with hundreds of vertices and many regions. However, each of our constraints typically influences only a handful of vertices, so that most of the partial derivatives in equation <ref type="formula" target="#formula_12">14</ref>are zero. Therefore, we implement J as a sparse matrix, as detailed in <ref type="bibr" target="#b13">[14]</ref>, with m indexed lists of the non-zero entries in each row. Equations (15) and (16) require the implementation of two operations upon the sparse matrix: matrix times vector and matrix-transpose times vector. Both operations are straightforward, performing normal matrix multiplication using the indexed offsets within each list.</p><p>To solve equation (16) for λ we use the bi-conjugate gradient method <ref type="bibr" target="#b7">[8]</ref>. Note that when the system is overconstrained there may be no exact solution, in which case the bi-conjugate gradient method gives the solution with the least mean squared error.</p><p>Having found J and λ , we solve equation (15) for our constraint forces and apply them to the vertices. The only other forces applied during the shape restoration process are from topological constraints to ensure the integrity of the map topology. Since the topological constraints follow the dynamic area constraints, some of our area maintaining forces can be canceled by the more important goal of preserving map topology. The combination of topological constraints, overconstraining and roundoff error can result in region areas changing somewhat during the shape restoration process. However, in practice we have found this drift to be small and easily taken care of by our iterative relaxation process, which periodically adjusts area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Maintaining Topological Integrity</head><p>During the relaxation and map reconstruction processes, there is a high probability that a region will attempt to invert, intersect itself, or intersect another region. Breaks in map topology are prevented by utilizing topological constraint forces. Region inversions are prevented by applying hinge and edge constraints. Hinge constraints restrict the angle between two adjacent edges from going below 0 degrees or above 360 degrees, and edge constraints prevent edges from collapsing to zero length and possi-bly inverting to negative length.</p><p>Both constraints are implemented as non-linear springs that reach a high maximum force opposing constraint violation just before it is violated.</p><p>Intersection penalties exert equal and opposite forces, as shown in the <ref type="figure" target="#fig_11">Figure 9</ref> examples, to correct situations where a region has overlapped itself or others. We detect intersections using the parametric line clipping method <ref type="bibr" target="#b3">[4]</ref>. Region selfintersection is detected by testing for intersection between each edge and all other edges in the region. Interregional overlaps are identified by testing for intersection between only the edges in the set of map boundary edges with every other map boundary edge. We define the magnitude of the penalty force as</p><formula xml:id="formula_14">, P P avg K F x &amp; τ = (17)</formula><p>where KP is a user-defined constant, τ is the length of time this intersection has been active, and avg x &amp; is the average velocity of the vertices at the moment of the initial intersection. The velocity term applies more countering force for intersections with fast moving edges. The force is distributed equally to both sides of the intersection and then apportioned equally upon each side's vertices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>In <ref type="figure" target="#fig_0">Figure 10</ref> we show 1980 U.S. population cartograms generated by the Pseudo-Cartogram and Line Integral methods alongside an original map that serves as a reference. We do not show comparisons with the Cellular Automaton method since it makes no attempt to preserve shape. Results of our cartogram algorithm and those of the other algorithms are presented here at approximately the same scale to provide fair comparisons. While the shapes are preserved well in the Pseudo-Cartogram in <ref type="figure" target="#fig_0">Figure  10b</ref>, the 60% area error contained in this approximation is made quite obvious when viewed next to the other cartograms. The Line Integral cartogram in <ref type="figure" target="#fig_0">Figure 10c</ref> displays the pinching and "ballooning" typical of radial algorithm cartograms, but approaches near 1% area error. By contrast, our method successfully preserves the distinctive shapes of nearly all the states, as well as straight lines, and still achieves a high accuracy of 4.4% average area error.</p><p>In <ref type="figure" target="#fig_0">Figure 11</ref> we demonstrate our method applied to the presentation of a 1981 equal population cartogram of British counties. Our cartogram algorithm is again successful in maintaining region shape and recognition. The average area error of 28% in our cartogram is mainly due to two extremely sparsely populated counties, with 196% error each, that cannot shrink any further without compromising our specified level of shape preservation. This is a case where there appears to be no true solution to the optimization problem as posed. Nevertheless, in cases like this our algorithm gives results that may very well be satisfactory for many applications.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>Our method was implemented in the MicroStation Development Language, a standard C programming language that compiles and executes within the MicroStation CAD program (Bentley Systems, Inc.). The map input data can be loaded from a formatted text file or converted directly from MicroStation CAD or GIS data. Our examples were created on a 300 MHz Compaq Professional Workstation with 128MB RAM. Transforming the U.S. map with 744 vertices took 6 hours for the 1980 cartogram. The 1981 population cartogram of British counties contains 983 vertices and ran for about 9 hours.</p><p>The algorithm's space complexity is easily analyzed. Let R be the number of map regions, E be the number of edges, and N the number of vertices in the fully detailed map. The map is stored as a list of regions, a list of edges and a list of vertices. Each region maintains a list of edge indices, and each edge is described by a pair of vertex indices. Each region must have at least three edges but an edge participates in at most two regions. Each vertex participates in two or more edges. Clearly E ≥ N &gt; R. The only data structure used by the algorithm that might be of more than linear complexity is the jacobian product matrix JJ T of equation (15). However, the jacobian J is stored as a sparse matrix of size O(N), and the product matrix need never be actually computed and stored, since the bi-conjugate gradient solution method does not use this matrix directly (see <ref type="bibr" target="#b13">[14]</ref>). Since the algorithm must store the full map, and none of the data structures used by the algorithm is of more than linear complexity, the size complexity of the algorithm is simply O(E).</p><p>The algorithm's computational complexity is more difficult to determine and, in fact, will require a careful experimental study. However, some progress can be made analytically. First note that the algorithm operates over a heirarchy of maps of coarser and coarser resolution. We will call the coarseness level c, where c = 0 implies that the map is at full resolution. We assume that the number of edges remaining in the map at resolution level c will be Ec=Eα -c . In other words, at each coarsening of the map, a fixed fraction 1/α of the remaining edges are removed. Our method does not do exactly this, but this is roughly its effect, of course recognizing that a map cannot be coarsened beyond limits imposed by map topology. For the analysis, we will also make the assumption that the actual number of edges in a region does not deviate significantly from the average number, i.e. that any process that is O(e), where e is the number of edges in a single region, will be roughly O(E) when iterated over all the regions in a map.</p><p>Given these assumptions, at coarseness level c each individual step given by the pseudocode in <ref type="figure" target="#fig_0">Figures 1, 6</ref> and 8 can be shown to be O(Ec), except for DistributeAreaConstraintForces and the DistributeTopologicalConstraintForces. Under our assumptions, DistributeAreaConstraintForces, using sparsity techniques and solving equation (15) via the bi-conjugate gradient approach, takes time O(EcR).</p><p>DistributeTopologicalCon-straintForces does an exhaustive edge-edge crossing test within each region, giving a total time of RO(ec 2 ) = O(Ec 2 /R). Distribu-teTopologicalConstraintForces also does a test for every edge on the perimeter of the map against every other perimeter edge, but for a large map this number of tests will be small compared with the total number of tests within regions. Thus, over a reasonable set of assumptions, each substep in the algorithm has complexity greater than O(Ec), but less than O(Ec 2 ). Since the number of edges in the map is reduced exponentially by increasing coarseness, the hierarchical resolution approach is lent theoretical credence by this analysis. Preliminary experiments over a very limited number of cases appear to bear this out, but further study must be done to give reliable performance numbers.</p><p>Trickier to determine is the computational complexity of the complete algorithm, since there are several nested loops whose number of iterations cannot be reasonably estimated analytically. These no doubt have to do with complexity factors other than problem size and are connected to some notion of problem difficulty. One helpful piece of preliminary experimental information is that the amount of time spent by the algorithm at each coarseness level appears to be about the same. For example, in a run similar to the one shown in <ref type="figure" target="#fig_2">Figure 2</ref>, the amount of time spent in the first 3,800 iterations at maximum coarseness was nearly identical to the amount of time spent in the next 1,800 iterations after one refinement and also to the amount of time spent in the final 400 iterations after the second refinement. Thus, while the number of edges in the map increases geometrically as coarseness decreases, the number of iterations required decreases enough to compensate. This leads to the inviting conclusion that the time complexity of the algorithm might be C times a subpolynomial function of EC or Eα -C , where C is the maximum coarseness level, and EC is the number of edges in the map at maximum coarseness.</p><p>A significant feature of our method is the ability to incorporate interactive aesthetic control, enabling the user to fix small problems at any time by stiffening particular springs or by modifying or pinning down vertex locations. The user can also adjust the level of area accuracy with respect to sacrifice in shape at any time. Since we wished to stress the automatic nature of our algorithm, we did not hand-adjust any of the examples shown here. However, these features could easily be integrated into an attractive interface.</p><p>We are investigating the creation of animations over time where the previous cartogram solution is used to initialize the subsequent cartogram. The timings should be very fast, since each cartogram deviates only slightly from its predecessor. The geographic data, as opposed to solution map vertices, could be interpolated between samples (i.e. between censuses) to produce intermediate frames.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>We have considered the problem of generating continuous area cartograms as a constrained optimization problem, and demonstrated a method well suited to automatically solving this problem. The approach appears to be a significant improvement over previous cartogram methods. The technique offers easy map reproducibility as well as the opportunity for interactive aesthetic control. The algorithm runs at speeds that show promise for making it a practical everyday tool for geographic visualization.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Plate 1 :</head><label>1</label><figDesc>Visualizations of the 1996 U.S. presidential returns (Data Source: Federal Election Commission)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Regions := LoadFullResolutionMap (MapDataFile); coarseness := max_coarseness; AreaTargets := CalculateDesiredArea (Regions); repeat SimplifyMap (Regions, coarseness); repeat AchieveAreas (Regions, AreaTargets); RestoreShapeWhileMaintainingArea (Regions); until adverse effect of area upon shape increases; ReconstructMapToFullResolution (Regions, coarseness); coarseness := coarseness / 2; until coarseness &lt; min_coarseness; Pseudocode of our continuous cartogram algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>, a parallel vector u and a perpendicular vector v are calculated for every vertex with respect to the origin of the simplified edge e. The proportional offset values to be used later for reconstructing the edge relative to its new scale and orientation are e Example algorithm area and orientation error for the 1996 U.S. population cartogram. a) Original map (744 vertices). b) First coarsely sampled map (199 vertices). c) First attempt to achieve area (Iteration 891). d) First attempt to restore shape (Iteration 1163).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Example stages of the U.S. cartogram. a) Identification of map "key" vertices. b) Crude simplification between key vertices. c) Simplification at a resolution relative to region sizes. d) Calculation of a 6% allowed maximum offset. e) Process of testing proposed simplified edges. f) Final simplified state of California. g) Sample calculation of perpendicular and parallel offsets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Identification of map key vertices and example simplifications of the western U.S. and California.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Examples of area springs for a simplified Texas, New Mexico, and Oklahoma map.The force projected by the area springs is proportional to the percentage area error of a region,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>procedureFigure 6 :</head><label>6</label><figDesc>AchieveAreas (Regions, AreaTargets); repeat DistributeAreaSpringForces (Regions, AreaTargets); DistributeTopologicalConstraintForces (Regions); PointDynamics (Regions); until average area error increases; Pseudocode of the process to resize regions to their desired areas.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>. a) Example depiction of spring forces upon a deviated edge. b) Example depiction of spring forces upon an undersized edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Orientation springs and edge length proportionality springs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Pseudocode of the shape restoration process.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>where λ is an unknown vector of Lagrange multipliers. λ is determined by solving the constrained dynamics equation and substituting the result into equation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 9 :</head><label>9</label><figDesc>Examples of intersection penalty forces.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>a) Original map of the U.S. b) Constructed using the Pseudo-Cartogram Method (Tobler). c) Constructed using the Line Integral Method (Gusein-Zade and Tikunov). d) Constructed using the Constraint-Based Method (Kocmoud and House).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 10 :</head><label>10</label><figDesc>1980 U.S. population cartograms (b: Reproduced with permission from [12], page 49, figure 8, © 1986 American Congress on Surveying and Mapping; c: Reproduced with permission from [5], page 172, Figure 1, © 1993 American Congress on Surveying and Mapping). a) Original land area map of British counties. b) Cartogram using the Constraint-Based Method (Kocmoud and House).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 11 :</head><label>11</label><figDesc>1981 equal population cartogram of Britain.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Area Cartograms: Their Use and Creation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dorling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995-08" />
			<pubPlace>Newcastle upon Tyne, England</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Geography, University of Newcastle upon Tyne</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">An Algorithm to Construct Continuous Area Cartograms. The Professional Geographer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Dougenik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">R</forename><surname>Chrisman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Niemeyer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985" />
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="75" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Combinatorial Approach to Cartograms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Waupotitsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="343" to="360" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Computer Graphics: Principles and Practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Feiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Hughes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Addison-Wesley Publishing Company</publisher>
			<pubPlace>Reading, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">A New Technique for Constructing Continuous Cartograms. Cartography and Geographic Information Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Gusein-Zade</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Tikunov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="167" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Optimization by Simulated Annealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Gelatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jr</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Vecchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">220</biblScope>
			<biblScope unit="issue">4598</biblScope>
			<biblScope unit="page" from="671" to="680" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Constructing Continuous Cartograms: A Constraint-Based Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Kocmoud</surname></persName>
		</author>
		<ptr target="http://www-viz.tamu.edu/students/chris/" />
		<imprint>
			<date type="published" when="1997" />
			<pubPlace>College Station, Texas</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Visualization Laboratory, Texas A&amp;M University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Masters Thesis</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Numerical Recipes in C: The Art of Scientific Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Teukolsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Vetterling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Flannery</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Transformations of Maps to Investigate Clusters of Disease</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Selvin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Merrill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sacks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bedell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schulman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
		</imprint>
		<respStmt>
			<orgName>Lawrence Berkeley Laboratory, University of California, No. LBL-18550</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">T</forename><surname>Tikunov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gusein-Zade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Map Transformations. Geography Review</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="19" to="24" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Continuous Transformation Useful for Districting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Tobler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of the New York Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">219</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="215" to="220" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Pseudo-Cartograms. The American Cartographer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Tobler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="43" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Cartogram: A Microcomputer Program for the Interactive Construction of Value-By-Area Cartograms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Torguson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<pubPlace>Athens, Georgia</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Geography, University of Georgia</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Masters Thesis</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Physically Based Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Witkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Constrained Dynamics. ACM SIGGRAPH 97 Course Notes</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
