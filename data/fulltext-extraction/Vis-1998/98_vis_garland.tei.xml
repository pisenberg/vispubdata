<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Simplifying Surfaces with Color and Texture using Quadric Error Metrics</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
							<email>garland@cs.cmu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Computer Sci-ence Dept</orgName>
								<orgName type="institution">Carnegie Mellon University</orgName>
								<address>
									<addrLine>5000 Forbes Ave</addrLine>
									<postCode>15213</postCode>
									<settlement>Pittsburgh</settlement>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Simplifying Surfaces with Color and Texture using Quadric Error Metrics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:37+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling-surface and object representations surface simplification</term>
					<term>multiresolution modeling</term>
					<term>level of detail</term>
					<term>quadric error metric</term>
					<term>edge contraction</term>
					<term>surface properties</term>
					<term>discontinuity preservation</term>
				</keywords>
			</textClass>
			<abstract>
				<p>There are a variety of application areas in which there is a need for simplifying complex polygonal surface models. These models often have material properties such as colors, textures, and surface normals. Our surface simplification algorithm, based on iterative edge contraction and quadric error metrics, can rapidly produce high quality approximations of such models. We present a natural extension of our original error metric that can account for a wide range of vertex attributes.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Many applications in computer graphics and visualization can benefit from automatic simplification of complex polygonal models. Such models are usually not only geometrically complex, but they may also have various surface properties such as colors, textures, and surface normals. Scanning and acquisition methods often produce surface meshes that are much more dense than actually required for the intended application. Computer games and distributed virtual environments must often operate on systems where rendering and transmission capacity is highly constrained and therefore require strict control over the level of detail used in models. Realistic simulation systems typically have object databases that far exceed the capacity of even the most powerful graphics workstations.</p><p>In recent years, a variety of surface simplification algorithms have been developed. Among these, our algorithm, based on iterative edge contraction and quadric error metrics, provides a solution which is a practical mixture of efficiency and quality. In this paper, we present a generalization of the basic error metric developed in our previous paper <ref type="bibr" target="#b5">[6]</ref> that is capable of simplifying surfaces with vertex properties such as color and texture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND AND RELATED WORK</head><p>In this paper, we are primarily concerned with the problem of polygonal surface simplification. Given an initial triangulated surface, we want to generate a simplified model that, as much as possible, faithfully reproduces the features of the original.</p><p>An assortment of simplification algorithms have been proposed in recent years. Most of those which are applicable to arbitrary 3D surfaces can be broadly classified into 3 categories. Vertex clustering methods <ref type="bibr" target="#b17">[17]</ref> spatially partition vertices and unify vertices within the same cluster. They are generally very fast and work on arbitrary collections of triangles, but can often produce relatively poor results. Vertex decimation algorithms <ref type="bibr" target="#b18">[18]</ref> select unimportant vertices (based on local shape heuristics), remove them, and retriangulate the resulting holes. These methods tend to produce fair results and are reasonably efficient. Iterative edge contraction <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b15">15,</ref><ref type="bibr" target="#b16">16]</ref> has been widely used. Edges are ranked according to their cost, which is typically the amount of error introduced into the model as a result of contracting the edge. At each iteration the lowest-cost edge is contracted and the costs of neighboring edges are updated. The primary difference between the various contraction-based methods is the error metric used for ranking edges. These algorithms generally produce good results, although running time varies greatly between methods. Iterative edge contraction is also particularly attractive because it naturally leads to a useful multiresolution model representation <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">9,</ref><ref type="bibr" target="#b19">19]</ref>.</p><p>There has been comparatively less work done on simplifying models with material properties. For restricted surface classes, such as height fields <ref type="bibr" target="#b4">[5]</ref>, very simple methods can work quite well. However, more general surfaces require more advanced techniques. Hoppe <ref type="bibr" target="#b7">[8]</ref> explicitly included attributes in his error metric. Certain et al. <ref type="bibr" target="#b0">[1]</ref> discussed adding surface color to a wavelet-based multiresolution framework, and Hughes et al. <ref type="bibr" target="#b10">[10]</ref> investigated the simplification of Gouraud-shaded meshes produced by radiosity simulations. Cohen et al. <ref type="bibr" target="#b1">[2]</ref> developed an algorithm capable of reparameterizing texture maps as a surface is simplified.</p><p>In this paper, we begin by restating our basic algorithm <ref type="bibr" target="#b5">[6]</ref> and next provide an expanded analysis of its behavior. We then present the generalization of our quadric error metric to handle vertex attributes, and finish with discussion, results, and summary of our work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">FUNDAMENTAL ALGORITHM</head><p>Our algorithm, originally developed in <ref type="bibr" target="#b5">[6]</ref>, belongs to the class of iterative edge contraction methods. Every edge is assigned a cost, namely the error resulting from its contraction. To efficiently track the lowest-cost edge, we maintain all edges in a heap keyed on cost. At each iteration, we can extract the lowest-cost edge and contract it. Our error metric offers a compromise between very fast lowquality methods and very slow high-quality methods. Moreover, it provides a useful characterization of the local shape and error of the current approximation.</p><p>The fundamental operation of our algorithm is edge contraction, which we will write (v 1 , v 2 ) â†’v. To perform this simple con-traction, we need to perform the following three steps: (1) move vertices v 1 and v 2 to the positionv, (2) replace all occurrences of v 2 with v 1 , and (3) delete v 2 and any degenerate faces. <ref type="figure" target="#fig_0">Figure 1</ref> illustrates the effect of a single edge contraction. As has been recently observed <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b15">15]</ref>, we can just as easily consider the contraction of any arbitrary pair of vertices. However, we will not consider the case of non-edge pairs in this paper. Our experience has shown that, while greedy edge contraction produces consistently good results on many kinds of models, greedy contraction of arbitrary pairs is not as robust and does not perform as consistently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic Quadric Error Metric</head><p>We characterize the geometric error of an approximation using the metric described in our previous paper <ref type="bibr" target="#b5">[6]</ref> which is based on the metric of Ronfard and Rossignac <ref type="bibr" target="#b16">[16]</ref>. Conceptually, we associate a set of planes with every vertex of the model. The error at that vertex is defined to be the sum of squared distances of the vertex to all the planes in its set. Each set is initialized with the faces incident to the corresponding vertex in the original model. When an edge is contracted into a single vertex, the resulting set is the union of the two sets associated with the endpoints.</p><p>However, these "sets" are purely conceptual; we do not represent them explicitly. Each face in the original model defines a plane which satisfies the equation 1 n</p><formula xml:id="formula_0">T v + d = 0, where n = [n x n y n z ]</formula><p>T is a unit normal and d is a constant. The squared distance of a vertex v = [x y z] T to this plane is given by</p><formula xml:id="formula_1">D 2 = (n T v + d) 2 = (v T n + d)(n T v + d) = v T (nn T )v + 2dn T v + d 2 .</formula><p>This is a quadratic form, plus a linear term, plus a constant. We can conveniently represent D 2 using the quadric Q:</p><formula xml:id="formula_2">Q = (A, b, c) = (nn T , dn, d 2 ) Q(v) = v T Av + 2b T v + c.</formula><p>This requires 10 coefficients to store the symmetric 3Ã—3 matrix A, the 3-vector b, and the scalar c.</p><p>The addition of quadrics can be naturally defined componentwise:</p><formula xml:id="formula_3">Q 1 (v) + Q 2 (v) = (Q 1 + Q 2 )(v), where (Q 1 + Q 2 ) = (A 1 + A 2 , b 1 + b 2 , c 1 + c 2 )</formula><p>. Thus, to compute the sum of squared distances to a set of planes, we only need one quadric which is the sum of the quadrics defined by each of the individual planes. And when contracting the edge (v 1 , v 2 ), the resulting quadric is merely the sum Q = Q 1 + Q 2 . Furthermore, we can define the cost of a contraction</p><formula xml:id="formula_4">(v 1 , v 2 ) â†’v as the error atv which is Q(v) = Q 1 (v) + Q 2 (v).</formula><p>This direct summing of quadrics can lead to the minor inaccuracy of double and triple counting <ref type="bibr" target="#b5">[6]</ref> of the associated planes. However, we find the simple additive structure more appealing than the more complicated inclusion-exclusion rule <ref type="bibr" target="#b12">[12]</ref> required to correct the problem. Also, to simplify the presentation we have assumed that all planes are uniformly weighted. However, in applications where surface triangles will be of significantly varying sizes, it is useful to weight quadrics by the area of the contributing triangle.</p><p>In practice, it is also necessary to check each proposed contraction and verify that it does not cause the mesh to fold over on itself. Previously, we suggested using a simple normal-flipping heuristic <ref type="bibr" target="#b5">[6]</ref>. However, Edelsbrunner and Nekhayev <ref type="bibr" target="#b2">[3]</ref> have developed a more effective procedure, as well as a technique for preventing topological changes to the mesh. A further check that the surface remains a manifold may be required if our algorithm is implemented using data structures that can only represent manifold surfaces. <ref type="bibr" target="#b0">1</ref> By convention, we will assume that all vectors are column vectors. Thus, n T v = nâ€¢v is the inner product of two vectors. We will generally use the transpose notation for the elements of the quadric equation and the dot notation elsewhere. The outer product nn T produces a 3Ã—3 matrix. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Interpretation of Quadrics</head><p>The quadrics which we construct during simplification also possess a useful geometric interpretation. For a particular quadric, consider the level surface Q(v) = . This is the set of all points whose error with respect to Q is . The resulting isosurface is a (potentially degenerate) ellipsoid; the possible degenerate forms are cylinders and parallel planes. Algebraically, A is a symmetric positive semidefinite matrix whose eigenvalues and eigenvectors define the principal axes of the ellipsoids. Also note that, in statistical terminology, A is the sample covariance matrix of the face normals <ref type="bibr">[11]</ref>.</p><p>We have also suggested that quadrics characterize the local shape of the surface. This is apparent in <ref type="figure" target="#fig_1">Figure 2</ref>, which illustrates the quadric isosurfaces produced by the simplification of a bunny model. For vertices on creases, such as on the neck and ears, the ellipsoids are cigar shaped. They are elongated in the direction of the crease. In contrast, where the surface is less curved, such as on the forehead, the quadrics are thin and roughly circular, like pancakes. Intuitively, we might conclude that the quadrics will be elongated in directions of low curvature and thin in directions of high curvature. We can provide mathematical support for this conclusion. Let us suppose that our model is actually a differentiable manifold, the limit of an infinitely fine tessellation. We have shown <ref type="bibr">[4]</ref> that, under suitable conditions, the two smallest eigenvalues of A are proportional to the squares of the principal curvatures <ref type="bibr" target="#b14">[14]</ref> and the corresponding eigenvectors are the corresponding principal directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Vertex Placement</head><p>When considering the contraction of an edge (v 1 , v 2 ), we need some way of choosing the target positionv. There are two primary policies to choose from, and the choice between them must be made with the intended application in mind. We must trade space efficiency against approximation quality.</p><p>Subset placement is the simplest strategy that we can adopt. We simply select one of the endpoints as the target position. In other words, we will contract one endpoint into the other. To choose between endpoints, we merely need to find the smaller of Q(v 1 ) and Q(v 2 ). Under this policy, any approximation which we produce will use a subset of the original vertices in their original positions.</p><p>We can often produce better approximations using optimal placement, which we have previously <ref type="bibr" target="#b5">[6]</ref> recommended. For a given quadric Q, we can try to find the pointv such that Q(v) is minimal. Since Q(v) is quadratic, finding its minimum is a linear problem; the minimum occurs where âˆ‚Q/âˆ‚x = âˆ‚Q/âˆ‚y = âˆ‚Q/âˆ‚z = 0. By solving this system of equations, we find that the optimal position and its error are given by:</p><formula xml:id="formula_5">v = âˆ’A âˆ’1 b and Q(v) = âˆ’b T A âˆ’1 b + c</formula><p>Geometrically, the minimumv will lie at the center of the concentric ellipsoidal isosurfaces of Q. Of course, the matrix A may not be invertible. In other words, there may be infinitely many minimal points. This is exactly the case where the level surfaces of Q are degenerate ellipsoids. In such circumstances, we can use subset placement as a fall-back strategy. Indeed, we can also consider other intermediate policies such as selecting between the endpoints and the midpoint, or we might choose to find the optimal position along the edge. The choice of optimal vs. subset placement depends on the intended application. Optimal placement will tend to produce approximations which fit the original more closely. The resulting meshes also tend to be better shaped -triangles are more equilateral and their areas are more uniform. This is the best choice for generating fixed approximations of an original. However, if the goal is to produce some sort of adaptive representation <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">9,</ref><ref type="bibr" target="#b13">13,</ref><ref type="bibr" target="#b19">19]</ref>, subset placement may be preferable. The overall fit of the models will be inferior, but we can save significantly on storage. With optimal placement, we must store delta records with each contraction to encode the new vertex position. Using subset placement, we can eliminate such overhead entirely. Since this overhead grows linearly with the number of attributes, the space savings of subset placement can become substantial.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Homogeneous Variant</head><p>The original description of the quadric error metric <ref type="bibr" target="#b5">[6]</ref> used an alternate notation. We can treat the quadric Q as a homogeneous matrix where</p><formula xml:id="formula_6">Q = ï£® ï£¯ ï£¯ ï£¯ ï£¯ ï£° A b b T c ï£¹ ï£º ï£º ï£º ï£º ï£»</formula><p>This gives us the homogeneous quadratic form Q(v) = h T Qh where h is the homogeneous vector [v 1] T . We have found this less convenient than the form presented earlier because it requires us to move back and forth between regular and homogeneous coordinates. It is also slightly less efficient because all our matrix operations must be on 4Ã—4 rather than 3Ã—3 matrices; this is a noticeable difference, for example, when performing matrix inversions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">PRESERVING DISCONTINUITIES</head><p>Discontinuities of a model, such as creases, open boundaries, and borders between differently colored regions, are often among its most visually significant features. Therefore, their preservation is critical for producing quality approximations. The fundamental algorithm that we have just outlined can already handle shape discontinuities (e.g., creases), and we can easily extend it to handle boundary curves as well. Surface shape discontinuities (where there is only C 0 continuity) are implicitly preserved by the error metric as described. For example, consider the sharp edges of a cube. A point on the edge of a cube will have contributing planes from both adjoining faces of the cube. Since these planes are perpendicular, the cost of moving the point along the edge is much lower than moving it away from the edge. Consequently, the algorithm will be strongly biased against altering the shape of these edges.  Without any modification, the basic simplification algorithm will produce approximations such as shown in <ref type="figure" target="#fig_2">Figure 3b</ref>. This is clearly unacceptable.</p><p>Fortunately, we can easily incorporate boundary constraints into the existing framework. During initialization, we flag all boundary edges. For each face adjacent to a given boundary edge, we compute a plane through the edge that is perpendicular to the face. The perpendicular plane defines a boundary constraint plane (see <ref type="figure" target="#fig_3">Figure 4)</ref>. We can form a quadric for this plane, just as with a regular face plane. We weight the resulting quadric by a large penalty factor, and add it into the initial quadric for each of the endpoints. <ref type="figure" target="#fig_2">Figure 3c</ref> shows the resulting approximation when boundary constraints are enabled. It has the same number of faces as <ref type="figure" target="#fig_2">Figure 3b</ref>; however, it is a far superior approximation because the boundaries have been properly preserved.</p><p>Boundaries may also occur in discrete surface attributes. Consider a surface similar to the one pictured in <ref type="figure" target="#fig_7">Figure 7</ref> where each face would be assigned a color from a small discrete palette. Or perhaps we have a map 4-colored by country. Each edge dividing two faces of different colors can be marked as a boundary. This would cause our algorithm to try to faithfully preserve the borders between separate regions.</p><p>Naturally, there are limits to this approach. If, for instance, every face is assigned a slightly different color, or if we have a triangulated regular grid where every other triangle is a hole, the results will not be good. The implicit assumption is that boundaries are reasonably sparse.</p><p>Many models have surface properties beyond simple geometry. In computer graphics, the most common are surface normals, colors, and textures. To produce approximations which faithfully represent the original, we must maintain these properties as well as the surface geometry. Our basic error metric, based on our earlier work <ref type="bibr" target="#b5">[6]</ref> and restated earlier, only considers surface geometry when simplifying the model. This is an obvious shortcoming. However, we can formulate a natural extension of the basic metric which will incorporate surface properties defined as vertex attributes.</p><p>We will assume that each vertex, in addition to its position in space, has some associated values which describe other properties. As with geometric position, these values will be linearly interpolated over the faces of the model. Consequently, these properties must be continuous; they cannot be restricted to a discrete set of values. Furthermore, we will assume that distance between two property values is measured with the usual Euclidean metric.</p><p>As an ongoing example, we will consider a Gouraud-shaded model for which each vertex has an associated color value [r g b] T where 0 â‰¤ r, g, b â‰¤ 1 (see <ref type="figure">Figure 9)</ref>.</p><p>We need some way to measure errors when surfaces have properties. One natural approach is to use a segregated error metric which measures errors in each attribute separately. This bears some resemblance to Hoppe's <ref type="bibr" target="#b7">[8]</ref> energy function, which has separate terms for spatial and scalar attributes. Using our quadric-based algorithm, we could assign a separate quadric to each attribute. In this case, the storage cost of the quadrics would grow linearly with the number of attributes. For our colored surface example, we could measure error as Q(v pos ) + R(v rgb ) using separate quadrics Q and R for position (v pos = [x y z] T ) and color (v rgb = [r g b] T ), respectively. This will work acceptably with a subset placement policy, because the points we are choosing from (i.e., the two endpoints) are both known to be valid points on the surface. However, this approach will not work well at all with optimal placement because this simple error formula does not account for the cross correlation between position and color.</p><p>When using optimal placement, we allow vertex positions to move freely so as to achieve better surface approximations. The simplest scheme for maintaining attribute values would be to simply copy the attributes of v 1 tov, but this fails quite noticeably (see <ref type="figure" target="#fig_0">Figure 10b</ref>). On the other hand, if the optimal position was constrained to lie along the edge, we could simply interpolate attributes along the edge. However, the optimal positions will, in general, lie near the original surface, but not on it. Consequently, we cannot simply interpolate the property values of the endpoints; we need some way to synthesize entirely new values based on the new position. To do this, we use higher dimensional quadrics whose extra coefficients will implicitly encode the cross correlation between the various properties.</p><p>We will treat each vertex as a vector v âˆˆ R n . The first 3 components of v will be spatial coordinates, and the remaining components will be property values. In the case of our colored model, n = 6, and we would use 6-dimensional vectors of the form [x y z r g b] T . For consistent results, the model can be scaled so that it lies within the unit cube in R n . This ensures that the various properties (including position) have the same scale.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Generalized Error Metric</head><p>Having placed our vertices in n-dimensional space, we can formulate an extended version of our quadric error metric. Consider the triangle T = <ref type="figure">(p, q, r)</ref>. For our example of a colored surface, we would have p = [p x p y p z p r p g p b ] T and so forth. Since we have assumed that all properties are linearly interpolated over triangles, these three n-dimensional points determine a 2-dimensional plane  <ref type="figure">(p, q, r)</ref>.</p><p>in R n . Given this, we can construct a quadric that will measure the squared distance of any point in R n to this plane.</p><p>To derive the n-dimensional quadric for the 2-plane containing T, we begin by computing two orthonormal unit vectors e 1 and e 2 which lie in the plane. <ref type="figure">Figure 5</ref> shows a pictorial representation of these vectors. They are defined by the equations:</p><formula xml:id="formula_7">e 1 = q âˆ’ p q âˆ’ p e 2 = r âˆ’ p âˆ’ (e 1 â€¢(r âˆ’ p))e 1 r âˆ’ p âˆ’ (e 1 â€¢(r âˆ’ p))e 1 .</formula><p>This gives us two unit-length vectors which form two axes of a local frame with p as the origin. In principle, we could compute an entire local frame with axes e 1 , . . . , e n . However, in order to compute distances to the 2-plane of T, we will only need to explicitly represent the axes in the plane; for the rest, it is enough to know that they exist and that they are all perpendicular to the plane in question.</p><p>Now, consider an arbitrary point v âˆˆ R n . We are interested in the squared distance D <ref type="bibr" target="#b1">2</ref>  Note that the left hand side is the squared length of u along all components perpendicular to the plane of T, in other words, the squared perpendicular distance of v to the plane of T. This is precisely the distance we are interested in:</p><formula xml:id="formula_8">D 2 = u 2 âˆ’ (u T e 1 ) 2 âˆ’ (u T e 2 ) 2 = u T u âˆ’ (u T e 1 )(e 1</formula><p>T u) âˆ’ (u T e 2 )(e 2 T u).</p><p>By expanding and collecting terms, we arrive at the following formula:</p><formula xml:id="formula_9">D 2 = v T v âˆ’ 2p T v + pâ€¢p âˆ’v T (e 1 e 1 T )v + 2(pâ€¢e 1 )e 1 T v âˆ’ (pâ€¢e 1 ) 2 âˆ’v T (e 2 e 2 T )v + 2(pâ€¢e 2 )e 2 T v âˆ’ (pâ€¢e 2 ) 2 ,</formula><p>which has the structure of our quadric metric. We can rewrite it as In this generalized quadric, A is an n Ã—n matrix, and b is an nvector.</p><formula xml:id="formula_10">D 2 = v T Av + 2b T v</formula><p>In <ref type="figure">Figure 6</ref>, we can see a simple example of how xyzrgb quadrics work. On top is the 6 triangle neighborhood of the central vertex. Each vertex is labeled with its xyzrgb coordinates. Note that r coordinate is highly correlated with y and that g is highly correlated with x. Below the mesh, we see the matrix A for the initial quadric associated with the central vertex. It is computed by summing the quadrics for the 6 surrounding faces. By examining the non-zero off-diagonal elements, we can see how the quadric records the high correlation between r &amp; y and between g &amp; x.</p><p>Because our generalized quadric error metric has exactly the same structure as before, we can substitute it into our fundamental algorithm very easily. We have changed the way quadrics are constructed from initial triangles, but we use them in an identical manner. In particular, we can use the same simple formulas for finding the optimal target of a contraction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">DISCUSSION</head><p>This generalized metric allows us to continue to use our optimal placement policy. It provides a means to synthesize new property values at vertex positions which do not lie anywhere on the original surface. Since, in most cases, our algorithm produces the best quality approximations using optimal placement, this is a significant advantage.</p><p>Unfortunately, for every property, we must add extra dimensions to the vertices and quadrics. Consequently, as we add more and more properties to a surface, the size of the quadric matrix grows quadratically in the size of the attributes, and the running time will also increase. We can summarize the space requirements for a few However, this overhead is not extreme. For instance, we have run tests on models with both color and surface normals at every vertex; this requires 9-dimensional quadrics. A 30,000 face model can still be simplified in under 30 seconds on a PentiumPro 200 system. We must also be able to deal with constraints on the range of property values. RGB colors, for instance, must be kept within the color cube. While our algorithm will not generate colors far outside the cube, since they would very poorly fit the data, it may generate colors that are slightly below 0 or above 1. In such cases, we merely clamp the offending colors to the nearest point on the color cube. Since only small distances are involved, this should not introduce any appreciable artifacts. The same caution must be applied to texture coordinates. For surface normals, we need to rescale the resulting vectors to have unit length.</p><p>In our presentation of the generalized error metric, we have weighted all vertex attributes equally. However, for optimal results one might wish to selectively weight certain attributes more than others. It seems doubtful that there is a single optimal weighting for a given set of attributes, but it can easily be offered as a userselectable preference.</p><p>A prime application of our algorithm is the simplification of Gouraud-shaded meshes produced by radiosity simulations. Even the simplest geometries are often carved up into very small polygons to achieve high-quality shading. The resulting surfaces are ripe for simplification; typically, the surface geometry is heavily over-sampled and the colors vary smoothly over large areas.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Attribute Continuity</head><p>We have assumed that property values vary continuously over the surface, but in practice, this is not always the case. For example, consider simply wrapping a texture around a cylinder. There will be a seam where s wraps from 0 to 1. Consequently, every vertex along this seam must have two separate texture coordinates, and this will introduce a discontinuity at every one of these vertices.</p><p>To represent and simplify this textured cylinder with our current algorithm, we would need to replicate each vertex along the seam; each copy would have separate texture coordinates but identical positions. In other words, we must force the surface to be a topological plane rather than a cylinder. Using boundary constraints to maintain the seam, this might produce acceptable results.</p><p>However, this will not work for all cases. A model might conceivably have a distinct piece of texture for each face, and this would create a discontinuity at every edge. As mentioned in Section 4, the algorithm does not work well when constraints proliferate to this extent. A more complete solution would require that we allow multiple values for each property at each vertex. To apply our simplification algorithm, we would need to create multiple corresponding quadrics for each vertex. While we have not yet implemented this approach, we believe it would work well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Euclidean Attributes</head><p>We have also assumed that the metric for measuring the difference in attributes is Euclidean. More specifically, we have assumed that attribute values at the vertices will be linearly interpolated over the faces of the model. Perceptual color spaces are not Euclidean in RGB. However, we expect that the approximations produced by our algorithm will be displayed as Gouraud-shaded surfaces. Consequently, for display, colors will be linearly interpolated over faces. Thus, regardless of the non-Euclidean nature of RGB color space, our assumptions coincide with the way the results will be displayed.</p><p>Surface normals are another attribute type which might not seem to conform with our Euclidean assumptions. However, we contend that our algorithm will typically treat normals appropriately. Consider the Gauss mapping of the surface, where every vertex is mapped to the point on the unit sphere corresponding to the unit surface normal at that vertex. Simplifying surface normals as part of our generalized quadric metric is essentially equivalent to simplifying this spherical surface with the basic algorithm. So, as long as normals don't change too rapidly, our extended algorithm will produce good surface normals.</p><p>Figures 8a-e illustrate the performance of the fundamental algorithm on a very complex surface which is purely geometric. The original model contains 1,085,634 faces; the approximations shown contain 20,000 and 1,000 faces. Producing these approximations might require hours with some algorithms. However, on a Pen-tiumPro 200 system, the running time of our algorithm was 46 seconds for initialization (constructing initial quadrics and ordering edges in a heap) <ref type="bibr" target="#b1">2</ref> and 130 seconds for the actual simplification. During execution, the total memory used was roughly 200MB, of which 40MB were required to store the quadrics at each vertex (using 10 doubles each). The initial surface mesh is really very dense; the approximation shown in <ref type="figure">Figure 8b</ref> uses only about 2% of the original number of triangles yet preserves almost all of the surface features. In <ref type="figure">Figure 8d</ref> we see a very simple 1,000 face (0.01%) approximation. Most of the detail of the surface, such as the necklace and facial features, have been removed. However, the basic shape of the object is still faithfully preserved and, at very low resolutions, would be a suitable replacement. <ref type="figure" target="#fig_7">Figure 7</ref> is a simple demonstration of our algorithm using 6-D xyzrgb quadrics. The original surface on the left is a piece of a sphere Gouraud-shaded with a swirl pattern; it also has an open boundary. The approximation is about 5% the size of the original. Notice that the structure of the mesh conforms closely to the color pattern. The mesh is fairly sparse in areas of constant color. Near the borders of the color pattern, not only is the triangle density higher, but the edges are properly aligned with the curve of the swirl pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Color</head><p>A more challenging Gouraud-shaded example is shown in <ref type="figure">Figure 9</ref>. The surface itself is a sphere built from points on a latitudelongitude grid. Each vertex is assigned a color based on the elevation of the Earth's surface at that point. Since it is so simple, the surface shape is preserved very accurately. More importantly, the coloring of the surface is also preserved well. Note that larger triangles appear in areas of constant or linear color variation, such as oceans, while smaller triangles occur along the coastlines. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Texture</head><p>Our extended algorithm can just as easily be used to simplify surfaces with texture maps. In <ref type="figure" target="#fig_0">Figure 10a</ref>, we are looking down at a square height field of the eastern half of North America. The surface is textured with a satellite photograph with height given by altitude and bathymetric data. <ref type="figure" target="#fig_0">Figure 10b</ref> shows the result of simplifying this surface using optimal placement without regard for the texture coordinates. For each contraction, we simply propagate the texture coordinates of v 1 . As we would expect, this produces very poor results. Moving vertices without synthesizing correct texture coordinates causes the texture to warp like a rubber sheet. For example, note the substantial distortion around Florida and New England.</p><p>In contrast, the approximation shown in <ref type="figure" target="#fig_0">Figure 10c</ref>, with the same number of faces, was produced using an xyzst extended quadric. The algorithm produces nearly the same geometric surface as before. However, by using the extended metric, we have allowed the algorithm to synthesize appropriate texture coordinates for the new vertices. Unlike colored surfaces (such as <ref type="figure" target="#fig_7">Figure 7</ref>), the edges of the mesh do not align with features in the texture. The simplification algorithm never accesses the pixels of the texture; it merely tries to update texture coordinates so that the texture is mapped onto the surface in the same way as it was originally.</p><p>In the example of <ref type="figure" target="#fig_0">Figure 10</ref>, there is a direct correspondence between (x, y) and (s, t). This would provide an alternate way to synthesize new texture coordinates: for any vertex position, we can use x and y to compute appropriate s and t values. However, our extended algorithm provides a much more general solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">SUMMARY AND FUTURE WORK</head><p>Our algorithm can quickly produce good quality approximations of polygonal surface models. It is one of the fastest algorithms available for producing quality approximations. The fundamental algorithm works well for purely geometric surfaces <ref type="bibr" target="#b5">[6]</ref>. In this paper, we have explored our original algorithm further. We have provided more detailed analysis of the nature of quadrics, and we have demonstrated that it is capable of simplifying models of reasonably high complexity. Our original algorithm was limited to surfaces without surface properties such as color and texture. In this paper, we have presented a new generalized error metric, which substantially expands the set of models which can be simplified using our algorithm. As we have shown, it is capable of rapidly producing quality approximations that preserve both surface shape and associated surface properties.</p><p>There are certainly further improvements that could be made to the algorithm we have outlined here. A more complete system would also include support for multiple attribute values per vertex. This would, for instance, help solve the problems posed by texture seams and by surface normal discontinuities. We also believe that the memory usage of our implementation could be reduced. Related information and a prototype implementation of our basic algorithm can be found at http://www.cs.cmu.edu/âˆ¼garland/quadrics/. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Contraction of the edge (v 1 , v 2 ) into a single point. The shaded triangles become degenerate and are removed during the contraction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Result of simplifying a bunny model. Only 1.4% of the original faces remain. Centered around each vertex is an isosurface of the corresponding quadric.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>(a) Open-ended cylinder with 7,960 faces. (b) With unconstrained boundaries, this 2,460 face approximation quickly degenerates. (c) Using boundary constraints, the shape is preserved (also 2,460 faces).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Sample boundary constraint plane. Every edge along the boundary defines a single constraint plane. In contrast, the basic algorithm ignores boundary curves. Figure 3a shows a cylinder model with open boundaries at each end.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>2 Figure 5 :</head><label>25</label><figDesc>Orthonormal vectors e 1 and e 2 define a local frame, with origin p, for the 2-plane defined by the triangle</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>of v from the plane of T. Let u = p âˆ’ v; the squared length of u can be decomposed as u 2 = (uâ€¢e 1 ) 2 + â€¢ â€¢ â€¢ + (uâ€¢e n ) 2 , which we can rewrite as (uâ€¢e 3 ) 2 + â€¢ â€¢ â€¢ + (uâ€¢e n ) 2 = u 2 âˆ’ (uâ€¢e 1 ) 2 âˆ’ (uâ€¢e 2 ) 2 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>+ c where: A = I âˆ’ e 1 e 1 T âˆ’ e 2 e 2 TbFigure 6 :</head><label>126</label><figDesc>= (pâ€¢e 1 )e 1 + (pâ€¢e 2 )e 2 âˆ’ p c = pâ€¢p âˆ’ (pâ€¢e 1 ) 2 âˆ’ (pâ€¢e 2 ) 2 . At top is a simple mesh, of 6 triangles, with xyzrgb values at each vertex (rgb values in italic type). Summing quadrics for each face yields the matrix A shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>At left: a curved surface (18,050 faces) with colors at each vertex. At right: 1,000 face approximation. Notice that mesh edges follow the color contours.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :Figure 9 :Figure 10 :</head><label>8910</label><figDesc>Simplifying geometry only: A very complex model of 1,085,634 faces (a) is simplified to 20,000 faces (b-c) and 1,000 faces (d-e). Simplifying geometry &amp; color: A Gouraud-shaded surface of 73,728 faces (a) is reduced to 20,000 faces (b) and 3,000 faces (c-d). Geometry &amp; texture: A 3,872 face model (a) reduced to 53 faces without (b) and with (c) updating texture coordinates.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">We have excluded the time required to read and write files to disk since these vary significantly based on the format used.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">ACKNOWLEDGEMENTS</head><p>We would like to thank Konrad Polthier for the interesting discussion of relating the quadric error metric and differential geometry. Thanks also to the Stanford Graphics Lab for making the models of the Buddha statue and the bunny available 3 . The model of the Earth is based on an image of the ETOPO5 Earth elevation dataset provided by the USGS 4  . This research was supported under NSF grants CCR-9357763 &amp; CCR-9619853 and by the Schlumberger Foundation.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Interactive multiresolution surface viewing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Certain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jovan</forename><surname>PopoviÄ‡</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Salesin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 96 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Simplifying polygonal models using successive mappings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinesh</forename><surname>Manocha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Olano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="395" to="402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Topology and curvature preserving surface decimation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dmitry</forename><forename type="middle">V</forename><surname>Nekhayev</surname></persName>
		</author>
		<idno>rgi-tech-97- 010</idno>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Raindrop Geomagic, Inc</publisher>
			<pubPlace>Champaign, IL</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University ; CS Department</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast polygonal approximation of terrains and height fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
		<idno>CMU-CS-95-181</idno>
		<ptr target="http://www.cs.cmu.edu/Ëœgarland/scape" />
	</analytic>
	<monogr>
		<title level="j">Carnegie Mellon U</title>
		<imprint>
			<date type="published" when="1995-09" />
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
	<note>CS Dept.</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
		<ptr target="http://www.cs.cmu.edu/Ëœgarland/quadrics/" />
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Proc</title>
		<imprint>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Surface simplification inside a tolerance volume</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">AndrÃ©</forename><surname>GuÃ©ziec</surname></persName>
		</author>
		<idno>RC 20440</idno>
		<ptr target="http://www.watson.ibm.com:8080/searchpaper.shtml" />
		<imprint>
			<date type="published" when="1996-03" />
			<pubPlace>Yorktown Heights, NY 10598</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">IBM Research Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;96</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<ptr target="http://research.microsoft.com/hoppe/" />
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">View-dependent refinement of progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<ptr target="http://research.microsoft.com/Ëœhoppe/" />
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Proc</title>
		<imprint>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="189" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Simplification of global-illumination meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Merlin</forename><surname>Hughes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anselmo</forename><forename type="middle">A</forename><surname>Lastra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Saxe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics &apos;96</title>
		<meeting>Eurographics &apos;96</meeting>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="339" to="345" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Principal Component Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">T</forename><surname>Jolliffe</surname></persName>
		</author>
		<ptr target="http://geochange.er.usgs.gov/pub/sealevel/Contents/05mipres.html" />
		<imprint>
			<date type="published" when="1986" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
		<title level="m">The Art of Computer Programming</title>
		<meeting><address><addrLine>Reading, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1997" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
	<note>Third edition</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">View-dependent simplification of arbitrary polygonal environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Luebke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><surname>Erikson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Proc</title>
		<imprint>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="199" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O'</forename><surname>Barrett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Neill</surname></persName>
		</author>
		<title level="m">Elementary Differential Geometry</title>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1966" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Progressive simplicial complexes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jovan</forename><surname>PopoviÄ‡</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<ptr target="http://research.microsoft.com/Ëœhoppe/" />
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Proc</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Full-range approximation of triangulated polyhedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">RÃ©mi</forename><surname>Ronfard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarek</forename><surname>Rossignac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics &apos;96</title>
		<meeting>Eurographics &apos;96</meeting>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="volume">15</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Multi-resolution 3D approximations for rendering complex scenes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarek</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Borrel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modeling in Computer Graphics: Methods and Applications</title>
		<editor>B. Falcidieno and T. Kunii</editor>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="455" to="465" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Decimation of triangle meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><forename type="middle">A</forename><surname>Zarge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;92 Proc.)</title>
		<imprint>
			<date type="published" when="1992-07" />
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="65" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Dynamic view-dependent simplification for polygonal models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julie</forename><forename type="middle">C</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amitabh</forename><surname>Varshney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;96</title>
		<meeting>Visualization &apos;96</meeting>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="327" to="334" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
