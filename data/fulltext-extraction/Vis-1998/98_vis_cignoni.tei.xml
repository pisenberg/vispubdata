<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A general method for preserving attribute values on simplified meshes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Istituto di Elaborazione dell&apos;Informazione -Consiglio Nazionale delle Ricerche</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Istituto di Elaborazione dell&apos;Informazione -Consiglio Nazionale delle Ricerche</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Istituto di Elaborazione dell&apos;Informazione -Consiglio Nazionale delle Ricerche</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Istituto di Elaborazione dell&apos;Informazione -Consiglio Nazionale delle Ricerche</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A general method for preserving attribute values on simplified meshes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:37+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation -Display algorithms; I.3.6 [Computer Graphics]: Methodology and Techniques surface simplification</term>
					<term>detail preservation</term>
					<term>texture mapping</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Many sophisticated solutions have been proposed to reduce the geometric complexity of 3D meshes. A less studied problem is how to preserve on a simplified mesh the detail (e.g. color, high frequency shape detail, scalar fields, etc.) which is encoded in the original mesh. We present a general approach for preserving detail on simplified meshes. The detail (or high frequency information) lost after simplification is encoded through texture or bump maps. The original contribution is that preservation is performed after simplification, by building set of triangular texture patches that are then packed in a single texture map. Each simplified mesh face is sampled to build the associated triangular texture patch; a new method for storing this set of texture patches into a standard rectangular texture is presented and discussed. Our detail preserving approach makes no assumptions about the simplification process adopted to reduce mesh complexity and allows highly efficient rendering. The solution is very general, allowing preservation of any attribute value defined on the high resolution mesh. We also describe an alternative application: the conversion of 3D models with 3D static procedural textures into standard 3D models with 2D textures.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Mesh simplification technology has evolved substantially in the last few years, and many approaches have been proposed for the controlled simplification of simplicial meshes. A possible schematic classification subdivides the large number of techniques into: coplanar facets merging <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b13">14]</ref>, mesh decimation <ref type="bibr" target="#b27">[27,</ref><ref type="bibr" target="#b23">23,</ref><ref type="bibr" target="#b2">3]</ref>, energy function optimization <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b11">12]</ref>, clustering <ref type="bibr" target="#b24">[24,</ref><ref type="bibr" target="#b6">7]</ref>, and waveletbased <ref type="bibr" target="#b1">[2]</ref>. We cite only a few, representative papers; comprehensive overviews have been given in two recent papers <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b20">21]</ref>.</p><p>Many methods proposed offer no immediate provision for accurately controlling the perceptual effect of degradation, because Email: cignoni@iei.pi.cnr.it y Email: montani@iei.pi.cnr.it z Email: rocchini@calpar.cnuce.cnr.it x Email: r.scopigno@cnuce.cnr.it in many cases the simplification criterion has no immediate interpretation in terms of visual degradation <ref type="bibr" target="#b22">[22]</ref>. Perceivable visual degradation may be caused either while visualizing a single simplified representation (e.g. in the case of an excessively simplified mesh, with loss of topology features and/or fuzziness of the simplified surface), or while changing the level of detail, the so-called inter-frame flickering which is common if the meshes in an LOD representation present large visual differences. Defining a methodology for measuring visual degradation is not an easy task. Driving simplification by preserving curvature and sharp edges gives good control on the appearance of the shape, one reason being that most renderers draw elementary components by shading colors according to surface normals <ref type="bibr" target="#b22">[22]</ref>. However, for many applications, taking into account only the pure geometric approximation is not sufficient to ensure that the required accuracy is fulfilled. Pictorial information (color or texture) is an important factor in perception, and therefore preservation of color discontinuities has to be managed carefully. Few papers have seriously taken into account this problem <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">22,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b19">20]</ref>, as summarized in Section 2. Moreover, pictorial information is probably the most common attribute, but it is not the only one. Another type of mesh attribute may be the sampling of a field over the mesh vertices (e.g. the sampled value of physical variables like temperature, potential and pressure). In order to use these field values in visualization (e.g. by mapping field values to color, or by computing iso-lines), a simplification code should take into account the value of the field while reducing the complexity of the mesh <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b11">12]</ref>.</p><p>A new, general approach is proposed in this paper to preserve attribute information on simplified meshes built on dense, triangular meshes. The approach we propose is orthogonal to previous solutions, which take into account attribute values during the simplification process. Conversely, we propose a simple solution for preserving attribute information after a generic simplification process has been run on the input mesh. Attribute preserving can be seen as a post-processing phase, which may be used in conjunction with any simplification code. It is performed by assuming that the simplified mesh S has a sufficiently similar shape if compared with the original high resolution mesh M. A sampling process is applied to the simplified mesh (e.g. each face is scan-converted in object space) and for each sampling point pS we find the corresponding point pM on the original mesh and the original attribute value in pM. The retrieved attribute values are then stored in a texture map <ref type="bibr" target="#b9">[10]</ref>, which we later use to paint the pictorial detail of mesh M onto mesh S. All of the texture patches, computed by sampling the faces of S, are stored efficiently in a single rectangular texture map. The quality of the texture produced obviously depends on the sampling resolution adopted and the accuracy in determining the (pS,pM ) pairs.</p><p>This approach has a number of advantages. It can be used with any simplifier, because no assumptions or constraints on the simplification approach are made. It may restore every type of mesh attribute, given an interpolation rule that allows us to compute the attribute value on each point of the input mesh (examples on the restoration of color, other scalar/vectorial fields and high-frequency surface perturbations are shown in the following). Its complexity depends on the simplified surface area (measured in elementary sampling point units). Moreover, this approach may also be used to solve another problem, that is how to convert an object description which uses procedural textures <ref type="bibr" target="#b4">[5]</ref> into a format that only supports image-based textures. Finally, analogously to other approaches based on textures <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b14">15]</ref>, modeling high frequency detail with texture maps allows highly efficient rendering on modern graphics subsystems, which generally support hardware texture mapping.</p><p>The paper is organized as follows. Section 2 outlines previous research in this area. Our approach is described in detail in Section 3, while implementation-related aspects and the architecture of our prototypal implementation are reported in Subsection 3.2. Section 4 shows how the proposed approach can be extended to manage procedural textures. An evaluation of the results obtained on a set of sample meshes is presented in Section 5. Finally, conclusions are drawn in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK</head><p>Only few simplification papers have taken into account the attribute preservation problem, which is a very critical issue with a direct impact on the actual use of the meshes produced.</p><p>If the pictorial information is defined with a single texture map and the mesh is simplified using a decimation approach <ref type="bibr" target="#b27">[27]</ref>, then the problem of color preservation is trivial. However, if color is defined on a per-vertex basis, or through multiple textures, the problem becomes much more complex, and even worse if we have multiple attributes. Basically, the detail-preserving simplification methods proposed can be categorized as follows:</p><p>1. approaches that take into account attribute discontinuities during the simplification process; discontinuities are usually detected by the selection of a discontinuity threshold value, and the removal or collapse of candidate elements that exceed the discontinuity threshold is not allowed;</p><p>2. approaches which, during simplification, maintain associated with each current mesh element (e.g. a face) the attribute values associated to deleted/collapsed elements of the original mesh section now represented by the current element.</p><p>Approaches that follow the first strategy were proposed in <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b5">6]</ref>. A disadvantage of this strategy is that, because attribute discontinuities prevent element decimation/collapsing, a drastic simplification of meshes with complex pictorial detail is often impossible. Color-preserving solution which adopt the second strategy are described in <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b28">28]</ref>. The color/pictorial information defined over the mesh (e.g. an rgb-color for each vertex of the high resolution mesh) is preserved during simplification by building a mapping between the original mesh vertices and the simplified mesh faces. Once the mesh has been simplified, a texture is built for each face using the colors of the associated removed vertices. Methods for packing the simplified face textures in a single texure map have been proposed <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b28">28]</ref>. An approach similar to the one proposed in the present paper adopts B-splines surfaces for concisely representing dense irregular polygon meshes, and then maps shape detail through displacement maps <ref type="bibr" target="#b14">[15]</ref>. For each spline mesh section, a displacement map represents the error between the fitted surface and the original polygon mesh section. The resulting B-spline surface and the companion displacement maps can then be processed with standard photorealistic rendering systems.</p><p>Wavelet decomposition has been widely used for the generation of simplified or multi-resolution representations. An approach that follows the first strategy above represents, at multiple resolutions, both the shape and color of range-images using non-orthogonal Gabor wavelets <ref type="bibr" target="#b7">[8]</ref>. Unlike other solutions based on the use of wavelet decomposition, in <ref type="bibr" target="#b7">[8]</ref> the shape and the texture are considered as the amplitude and phase of a complex-valued 2D image onto which a hierarchical decomposition is built. Wavelets have also been proposed for separate multi-resolution representation of geometry and color, which are combined only at display time <ref type="bibr" target="#b1">[2]</ref>. This allows the selection at visualization time of independent levels of approximation for both geometry and color. The authors also propose representing color detail through texturemapping; textures are built dynamically, with the required resolution, by painting the color wavelets coefficients on the texture map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PRESERVING DETAIL ON SIMPLIFIED MESHES</head><p>The proposed approach is described here in a general manner. Let us assume that we are interested in recovering onto the <ref type="bibr">[simplified]</ref> mesh S the value of a scalar/vectorial field F defined on mesh M.</p><p>We assume that the field value can be computed for each point p 2 M by means of a function f : M R 3 ! R j R <ref type="bibr" target="#b2">3</ref> . Function f can either be a continuous function in R 3 , or a function defined piecewise on the cells of M (e.g. by interpolating a discrete set of samples of F evaluated on the vertices of mesh M).</p><p>Our approach is as follows. The surface of the simplified mesh S is sampled, and for each elementary surface sample pS we compute the point pM 2 M at minimal Euclidean distance from pS ( <ref type="figure" target="#fig_0">Figure 1</ref>). This nearest point is computed efficiently by using a bucketed data structure for the representation of the mesh M (faces are stored using a uniform grid, and grid cells are processed on the base of their distance from the sampling point pS). This approach generates a point-to-point relationship within surfaces S and M, and requires no knowledge of the simplification approach adopted to build the reduced mesh. Surface sampling is achieved by scan-converting triangular faces under a user-selected sampling resolution. The sampling resolution characterizes the quality (and the size) of the texture produced in output. Given a sampling step, the mesh may contain triangles smaller than the single squared sampling step. To reduce the aliasing associated with this case, the user can specify the minimum number of samples that have to be evaluated for each triangle.</p><p>Then, for each pair of corresponding points pS and pM, the computation performed depends on the particular attribute value we want to preserve:</p><p>pictorial data, or other scalar/vectorial values: for each sampling point pS we retrieve the scalar/vectorial value fpM of the associated point on mesh M. The value computed by f can be: the color of M in pM, either interpolated from the colors of the vertices of the face f which contains pM or interpolated on the rgb-texture associated with f; the interpolated value of a scalar field defined on the vertices of f; etc. data on shape detail: the distance between points pS and pM can be used to define either an approximated bump map <ref type="bibr" target="#b0">[1]</ref> or a displacement-map <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b9">10]</ref>. The displacement between the two surfaces is discretized and stored in a 2D scalar matrix (and will be rendered interactively adopting forthcoming graphics subsystems with hardware bump mapping features <ref type="bibr" target="#b16">[17]</ref>).</p><p>For each face, the collection of sampled values is stored in a triangular texture patch (which may contain either RGB, field, displacement or surface normal perturbation values). The size of this texture patch directly depends on the sampling step size chosen by the user and on the size of the triangular face. The quality of this texture is crucial. Because our approach is an approximate one, the following problems may arise: insufficient sampling rate (blocky textures). This problem depends on the sampling step chosen by the user, which may be too coarse on particular areas of the mesh. This problem is evident in the case of surface patches where attribute values change in a very abrupt manner (e.g. a face painted with a number of different colored stripes, and where adjacent stripes show sharp color discontinuity). But this problem cannot be solved by simply decreasing the sampling step size, because the size of the texture cannot be enlarged too much (texture memory available on graphics subsystems is often limited). Our tool adopts over-sampling to improve texture quality.</p><p>Multiple samples are computed for each sampling point p (distributed regularly in the small sampling area associated to p), and the mean of these samples is stored in the texture.</p><p>Currently, the over-sampling value is one of the parameters specified by the user;</p><p>aliasing on the adjacency border between different textured faces. This problem is related to the fact that, once packed (see next paragraph), texture patches which are adjacent in the overall texture map are generally associated with nonadjacent faces of the mesh. During scan conversion of a mesh face, discrete texture coordinates might be produced which are not contained in the associated texture patch (this might occur frequently while scan-converting the edges of a face, due to insufficient numerical precision). To prevent erroneous color mappings due to imprecise computations of texture coordinates , we produce, for each mesh face, a texture patch which is slightly wider (one texture pixel wider in the discrete texture space). This give rise to slightly larger texture maps, but solves the above aliasing problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Packing texture patches in rectangular textures</head><p>The last step of our algorithm is to pack all the triangular texture patches into a single rectangular 2D texture. Different approaches are possible to store all of the triangular texture patches in a single rectangular texture. A first approach may be based on the use of rectangular texture patches, which due to they regularity in shape result very simple to be packed in a rectangular texture <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b28">28]</ref>. Each texture patch is generated in <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b28">28]</ref> by: storing during simplification the color of the decimated vertices which map onto each simplified mesh face, and then by interpolating the color information associated with the removed vertices to build a high resolution triangular texture map. These techniques use only half-square right triangles, with a further limitation to square edge of size 2 i in <ref type="bibr" target="#b28">[28]</ref>. The use of only halfsquare texture patches means that they can be packed easily with a simple and regular rule: patches are stored in order of magnitude (biggest first), equal size patches are paired to form squares, and squares are stored in adjacent texture areas.</p><p>The use of half-squared texture patches allows efficient packing, but this approach has two disadvantages: only a discrete number of patch sizes is available and the shape of the texture patch is fixed. In the case of the sampling-based approach proposed in this paper for the reconstruction of the texture patches, the first point implies that we don't use exactly the sampling step s selected by the user: given the sampled edge e, we divide it into 2 k chunks such that the</p><formula xml:id="formula_0">v 1 v 2 v 3</formula><p>: texture wasted space <ref type="figure">Figure 2</ref>: Using half-square texture patches: easy to pack in a rectangular texture, but an uneven sampling is performed.</p><formula xml:id="formula_1">v 1 v 2 v 3</formula><p>: texture wasted space  . The second limitation implies that the elementary sampling area is a rectangular area (not squared) in the mesh space (see <ref type="figure">Figure 2</ref>). The texture patch therefore only approximately takes into account the actual size of the associated mesh triangle, and does not consider its actual shape at all. Very thin faces are sampled with very different sampling steps in two dimensions, and this introduces uneven sampling. The actual sampling size selected by the user is an upper bound of the sampling size which is effectively used, since for very elongated faces we actually use a much finer sampling step on the shorter edge.</p><p>To avoid these disadvantages, we designed a different packing technique which allows the use of irregular texture patches. We maintain the limitation of using only a discrete set of patch heights (all texture patches have a height equal to 2 i ), but we use the same sampling step in the two dimensions. Irregular texture triangles are therefore generated, but because they still have only a discrete number of different heights, we can store them in a compact manner. The packing strategy is based on the idea of shearing each texture patch along the X axe, in order to reduce the space which is wasted when we try to pack a patch along the border of the previous patch in the rectangular texture. The example in <ref type="figure" target="#fig_1">Figure 3</ref> shows the border-line case, where each patch is drastically sheared until his leftmost edge has inclination identical to the right-most one of the adjacent patch. Obviously, considerable shearing introduce aliasing, while the use of small shearing angles results sufficiently safe in terms of visual quality. The maximum angle of shearing is one of the parameters of the system (more we share, less texture space is wasted, but more aliasing is introduced).</p><p>The two approaches have been implemented and evaluated. Preliminary results shows that the second solution gives smaller textures. If we define the ideal texture size as the mesh surface area divided by the squared sampling step, then the second solution produces textures which are on average 15-20% larger than the ideal size, while the first solution returns textures 250-300% larger than the ideal one. Given a maximal texture size (which is a common systemdependent constraint), the lower the overhead (e.g. the difference between the ideal and the sampled texture), the better the quality (because we can increase the sampling rate and obtain a more detailed texture).</p><p>An example of the packed textures obtained with the Soucy et al. approach <ref type="bibr" target="#b28">[28]</ref> and our approach is shown in <ref type="figure">Figure 9</ref> (see color tables). The example shows the texture map built for a very simplified model (98 faces) of the fandisk mesh (originally, 12,946 faces). The sampling step size is in this case 0.25% of the mesh bounding box diagonal and the size of the texture maps obtained is 780*1024 in the case of the Soucy et al. method, and 659*521 for our method. The time required is 3.3 sec for initialization, 6. seconds for texture patches sampling and only 0.1 sec for texture patches packing (in the case of the slightly more complex irregular patches packing). Times have been evaluated on an SGI O2, R5000 180MHz.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Implementation details</head><p>This subsection presents some more details on our current prototypal implementation, DePreSS (Detail Preservation on Simplified Surfaces).</p><p>The DePreSS prototype accepts in input meshes formats OpenInventor, VRML V1.0 or raw (list of vertices plus list of faces). Since it would have been too expensive to get dynamically the required color information from the above formats, we convert input data into an internal format which stores geometrical data and colors or texture space coordinates associated with each vertex. The data structure has also been designed to reduce space occupancy, because we may need to store a very complex original mesh (the one before simplification) with all the associated attribute values. ating point to face distances (we used an optimized procedure derived from the source code of the POV ray-tracer <ref type="bibr" target="#b18">[19]</ref>). Moreover, the computation of the minimal distance between point p and all the faces of M is optimized (otherwise, complexity will become quadratic). We adopted a bucketed representation of the faces of M. A regular cubic grid is built, covering the bounding box of M.</p><p>Pointers to the faces contained/intersected are stored in each bucket.</p><p>For each point p, we test faces in order of distance from p, halting the process as soon as no more buckets closest than the nearest face exist. The regular grid structure is defined according to the mesh size (the number of cells is proportional to the number of faces in the mesh) and to the bounding box edges ratio (we subdivide the bounding box into n m p cubic cells).</p><p>In the case of the computation of bump maps, we store in the texture the signed distance between the two meshes. The point to face distance evaluated takes into account if the original mesh is above or below the surface of the simplified mesh. However, these distances only give an approximation of a real bump/displacement map, because displacements are generally evaluated on the direction of the normal to the sampled surface. But computing correct distances along the surface normal direction r is not easy, because in some cases it might not exist an intersection between the original mesh M and the ray r (see an example in <ref type="figure" target="#fig_3">Figure 4</ref>), or the nearest intersection along r might be on a section of the mesh which is much further than the section nearest to the sampling point ps.</p><p>In our implementation, we return the minimal distance between meshes M and S (and the line which passes through the corresponding pair of points may not be aligned with the normal in S).</p><p>A number of experiments showed that the level of approximation is sufficiently good (see <ref type="figure" target="#fig_4">Figures 6 and 7)</ref>.</p><p>The results are currently being produced by adopting the Open-Inventor format, storing geometry, texture coordinates, and the texture image.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EXTENSION TO PROCEDURAL TEX-TURES</head><p>Static procedural textures are a very powerful tool for the simulation of the realistic appearance of materials (e.g. marble or wood). They have been proposed to circumvent the image mapping problem that characterizes 2D textures <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b4">5]</ref>. Moreover, 3D textures are generally obtained by procedural generation, to prevent prohibitive space requirements. The texture function value in every location of the 3D space may be computed using either fractal noise basis functions <ref type="bibr" target="#b17">[18]</ref>, or functions based on the computation of distances from a set of random feature points <ref type="bibr" target="#b25">[25]</ref>.</p><p>Procedural textures can easily be mapped onto a free-form object, but are generally rendered by adopting a ray-casting approach. Many applications use procedural textures, and one problem is how to preserve detail specification when a standard scene description language (OpenGL, OpenInventor or VRML) based on planar, 2D textures is adopted, e.g. to ensure efficiency or portability to distributed environments. An example may be the conversion of a complicated model created with a commercial tool which supports procedural 3D textures (e.g. 3DStudio Max) into a format oriented to interactive CG (such as VRML or OpenGL). The reconstruction of a standard texture that encodes the intersection between a given procedural 3D texture and a surface can easily be performed with our approach. Sampling the procedural texture space at rendering time is replaced by an off-line joint sampling of the given mesh and the texture space. During mesh sampling we only need to recompute, for each sampling point, the associated procedural texture value, and then store it in the texture patch associated with the current face. Patches are then packed as usual in a rectangular 2D texture map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTAL RESULTS</head><p>The proposed system has been tested on many meshes. We report here some examples, which are representative in terms of preserving different attributes. We show two sets of images referring to color or pictorial data preservation: meshes with color defined on a per-vertex basis; <ref type="figure">Figure 9</ref> shows an example, where a CAD-style mesh (fandisk, 12,946 triangular faces) is painted with a number of very thin stripes (on average one face wide), then simplified, and finally colortextured; the two texture obtained,packed using the Soucy et al. and our methods, are shown in <ref type="figure">Figure 9</ref> (see color tables); meshes with texture-mapped pictorial detail (single or multiple textures); <ref type="figure">Figure 5</ref> shows an example 1 .</p><p>Examples concerning shape detail preservation are presented in <ref type="figure" target="#fig_4">Figures 6 and 7</ref>. <ref type="figure">Figure 6</ref> shows the original bunny mesh 2 on the left (69,451 faces) and a simplified representation with both enhanced edges and bump mapping on the right. <ref type="figure" target="#fig_4">Figures 7</ref> shows a section of a mesh which represents a relief drip stone (cornice) from the facade of the Duomo in Pisa (acquired with a commercial range scanner). It was simplified drastically (from 70,050 to a few hundreds), and then a bump map, computed with our prototype, was applied on the simplified model (rightmost image).</p><p>An example of coding 3D procedural textures with standard 2D textures is presented in <ref type="figure">Figure 8</ref>, where a 3D procedural marblelike texture is attached to a 3D vase, converted into a 2D texture, and finally rendered with a standard OpenGL viewer.</p><p>The optimization techniques adopted guarantee the efficiency of our approach. Empirical complexity is nearly linear to the surface area of the simplified mesh, which is measured in squared sampling step units. This is because the uniform grid adopted to store the high resolution mesh allows nearly constant times for the detection of the nearest face to each sampling point. An evaluation of the empirical time complexity of our approach is reported in <ref type="table">Table 1</ref>, where: times are in seconds (SGI O2, R5000 180MHz), sampling step sizes are measured as percentages of the mesh bounding box diagonal, and texture sizes are in pixels (texture sizes reported in the table are only those of the Soucy et al. packing method).   <ref type="table">Table 1</ref>: Processing time (in seconds), number of points sampled on the surface, and size (in pixels) of the texture map produced in output by our prototypal implementation on two simplified meshes and different sampling step sizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS</head><p>We have presented a general method for preserving on a simplified mesh the detail (e.g. color, high frequency shape detail, scalar fields, etc.) which is encoded in the corresponding high resolution mesh. Our approach is very general, because it allows one to preserve any attribute value defined on the high resolution mesh, and because it makes no assumptions about the simplification process adopted to reduce mesh complexity. Detail is encoded through texture mapping, which is extremely efficient in many graphics subsystems. The texture encoding the detail of the high resolution mesh is built by an efficient scan conversion process of the simplified mesh. The results therefore suffer for some approximation: we preserve surface detail with the use of discrete texture maps, whose quality depends on both the sampling step size used and the criterion adopted to locate matching pairs of points on the two surfaces. Despite this limit, the results can be considered of sufficiently high quality for a wide range of possible interactive visualization applications. We also propose an alternative application: the conversion of models with attached 3D procedural textures into standard 2D-textured models.</p><p>As a general point, our approach has to be compared with the other solutions which take into account high-frequency detail dur-ing simplification. Reasons for choosing our approach are the following: simplification is de-coupled from preservation, and this allows the user to choose the more adequate simplification code; when operated as a post-processing action, the task is generally more efficient in time and simpler to be implemented (especially if different kinds of detail have to be preserved); not all simplification approaches can be simply adapted to preserve the mesh attributes.</p><p>Our approach can be extended in several ways. The precision of the sampling process and texture size depend on the sampling step selected. The quality of the textures produced might be improved (and their size reduced) if a semi-automatic and adaptive selection of the sampling step were adopted. Once a texture patch has been computed for a given face of the mesh, this patch could be analysed to detect the degree of uniformity or smoothness of the detail coded. If the texture patch is nearly uniform (e.g. if it corresponds to a constant value section of the mesh) or smooth, then its resolution could be reduced without losing quality. Conversely, if the texture has a high discontinuous content, we could re-sample it using finer sampling , and increase the precision only locally.</p><p>Mip-map representation of textures <ref type="bibr" target="#b29">[29]</ref> is widespread, due to the necessity to reduce aliasing while mapping the texture at different scales. The problem solved by the mip-map approach is how to render faces which map to a large texture patch but, in a current view, map to only a few pixels. Storing our sampled texture under a mip-map approach is not straightforward. The problem is how to compute recursively the associated reduced resolution maps by taking into account the fact that our global texture is subdivided into a number of independent triangular patches. This problem will be the subject of further research. <ref type="figure">Figure 9</ref>: Mapping color from a per-vertex colored mesh: the original mesh on the left (12,946 faces) has been simplified (98 faces, top right), and then the original color info is mapped on the simplified mesh (center right). Texture maps produced with the Soucy method (lower left ) and our method based on the use of irregular texture patches (lower right)</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Mapping color detail on a simplified mesh by sampling color and constructing an rgb-texture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Using irregular texture patches: easy to pack in a rectangular texture, with even sampling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Given a sampling point p on S, the corresponding point on the original mesh M is computed with sufficient efficiency by evalu-The ray r passing through the sampling point ps on the simplified surface S and perpendicular to the face f of S does not pierce any point of the original surface M.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Mapping shape detail: the original mesh on the left (70,050 faces) has been drastically simplified (center image), and then a displacement texture is mapped on the low resolution mesh (on the right</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">The puppet mesh (13,045 faces) was produced by Wolfgang Niem, Univ.of Hannover (D), http://www.tnt.unihannover.de/project/3dmod/multview/examples.html .<ref type="bibr" target="#b1">2</ref> The bunny mesh was range-scanned at Stanford University and is available at http://www-graphics.stanford.edu/data/ .</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ACKNOWLEDGEMENTS</head><p>This work was partially financed by the Progetto Finalizzato Beni Culturali of the Italian National Research Council (CNR). The relief drip stone from the Duomo in Pisa was scanned in cooperation with the "Soprintendenza ai Beni A.A.A.S." of Pisa (Italy). </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Simulation of wrinkled surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics (SIGGRAPH &apos;78 Proceedings)</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="286" to="292" />
			<date type="published" when="1978-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Interactive multiresolution surface viewing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Certain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Popovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Salesin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Comp. Graph. Proc., Annual Conf. Series (Siggraph &apos;96)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Multiresolution decimation based on global error. The Visual Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ciampalini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997-06" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="228" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Shade trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;84 Proceedings)</title>
		<imprint>
			<date type="published" when="1984-07" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="223" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kent</forename><surname>Musgrave</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Darwyn</forename><surname>Peachey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ken</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Worley</forename></persName>
		</author>
		<idno>0-12-228760-6</idno>
		<title level="m">Texturing and Modeling: A Procedural Approach</title>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1994-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Data dependent surface simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th Eurographics Workshop on Visualization in Scientific Computing (EG ViSC&apos;98)</title>
		<editor>D. Bartz</editor>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="100" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Comp. Graph. Proc., Annual Conf. Series (Siggraph &apos;97)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visualization of multidimensional shape and texture features in laser range data using complex-valued gabor wavelets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Koch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visual. and Comp. Graph</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="44" to="59" />
			<date type="published" when="1995-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Survey of surface simplification algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University -Dept. of Computer Science</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Survey of texture mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="56" to="67" />
			<date type="published" when="1986-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Figure 6: Mapping shape detail: the original bunny mesh is on the left (69,451 faces); a drastically simplified mesh with bump texture mapping and solid</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hinker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;93 Proc</title>
		<imprint>
			<date type="published" when="1993-10" />
			<biblScope unit="page" from="189" to="195" />
		</imprint>
	</monogr>
	<note>Geometric optimization. mesh edges is on the right</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics Proc., Annual Conference Series</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
	<note>Siggraph &apos;96)</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Mesh optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics Proc., Annual Conference Series, (Siggraph &apos;93)</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="19" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Superfaces: Poligonal mesh simplification with bounded error</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Kalvin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE C.G.&amp;A</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="64" to="77" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fitting smooth surfaces to dense polygon meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Comp. Graph. Proc., Annual Conf. Series (Siggraph &apos;96)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="313" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Generating texture map from object-surface texture data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Maruya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Proc. of Eurographics &apos;95)</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="397" to="405" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Efficient bump mapping hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Peercy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Airey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Cabral</surname></persName>
		</author>
		<idno>0-89791- 896-7</idno>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Conference Proceedings, Annual Conference Series</title>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="303" to="306" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An image synthesizer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="287" to="296" />
			<date type="published" when="1985-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pov-Team</surname></persName>
		</author>
		<ptr target="http://www.povray.org/" />
		<title level="m">Persistence of vision raytracer 3.0. Publicly available on web</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Viewbased rendering: Visualizing real objects from scanned range and color data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pulli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Figure 8: Mapping a 3D procedural marble texture using standard 2D textures. Proceedings of 8th Eurographics Workshop on Rendering</title>
		<meeting><address><addrLine>St. Etienne, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Simplification, LOD, and Multiresolution -Principles and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Puppo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
		<idno>1017-4656</idno>
	</analytic>
	<monogr>
		<title level="m">EUROGRAPHICS&apos;97 Tutorial Notes</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m">Eurographics Association</title>
		<meeting><address><addrLine>Aire-la-Ville</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="97" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Scrooge: Perceptually-driven polygon reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reddy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="191" to="203" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Full-range approximation of triangulated polyhedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ronfard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Eurographics&apos;96 Proc.)</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="67" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Multi-resolution 3D approximation for rendering complex scenes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Borrel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Geometric Modeling in Computer Graphics</title>
		<editor>B. Falcidieno and T.L. Kunii</editor>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="455" to="465" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A cellular texture basis function</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Worley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Comp. Graph. Proc., Annual Conf. Series (Siggraph &apos;96)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="291" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Decimation of 2D scalar data with error control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schikore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bajaj</surname></persName>
		</author>
		<idno>CSD-TR-95-005</idno>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>CS Dept., Purdue University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Decimation of triangle meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><forename type="middle">A</forename><surname>Zarge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics (SIGGRAPH &apos;92 Proceedings)</title>
		<editor>Edwin E. Catmull</editor>
		<imprint>
			<date type="published" when="1992-07" />
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="65" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">A texture-mapping approach for the compression of colored 3d triangulations. The Visual Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Soucy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guy</forename><surname>Godin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Rioux</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="503" to="514" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Computer Graphics (SIGGRAPH &apos;83 Proceedings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Williams</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983-07" />
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
	<note>Pyramidal parametrics</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
