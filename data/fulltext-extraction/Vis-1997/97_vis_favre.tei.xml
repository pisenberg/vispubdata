<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Efficient Visualization Support for Single-block and Multi-block Datasets</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><forename type="middle">M</forename><surname>Favre</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Swiss Center for Scientific Computing (CSCS/SCSC</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Efficient Visualization Support for Single-block and Multi-block Datasets</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Large simulation grids and multi-grid configurations impose many constraints on commercial visualization softwares. When available RAM is limited and graphics primitives are numbered in millions, alternate techniques for data access and processing are necessary. In this Case-Study, we present our contributions to a visualization environment based on the AVS/Express software. We demonstrate how the efficient visualization of large datasets relies upon several forms of resource sharing, and alternate and efficient data access techniques.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As hardware vendors provide scientists with bigger machines, very large datasets, single-block or multi-block ( <ref type="figure" target="#fig_0">Fig. 1</ref>) are becoming ubiquitous. They present many challenges to scientific visualization softwares, but many opportunities exist to foster the efficient management of visualization resources. AVS/Express[1] comes first as a turn-key system giving scientists access to numerous data readers, filters, mappers and viewers ready to be connected and executed in a data-flow fashion. Additionally, AVS/Express allows many levels of customization, from the look-and-feel of the application itself, to the inclusion of proprietary code into its environment. Its object-oriented design and its "V" scripting language for rapid prototyping offer the programmer many tools to allow the rapid and efficient development of new functionality. In this paper, we will present techniques critical in providing interactive access to large datasets. In Section 2 we discuss visualization problems related to large single grid configurations. Some of the issues of interest are the frugal use of RAM, load-ondemand, the definition of alternate objects for interactive handling, disk-mapped I/Os and periodic extensions. In Section 3, we present our solutions to problems raised by multi-block simulations: sub-setting of blocks, colormap sharing, hierarchical graphics objects and hierarchical data grids. We finally conclude and offer remarks for additional challenges for multi-grid datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Large Single Block Simulations</head><p>A large simulation run at the Swiss Center for Scientific Computing (CSCS/SCSC) is used to model the laminar-turbulent transition process in boundary layers developing over flat plates <ref type="bibr" target="#b0">[2]</ref>. The strongly nonlinear phase of the transition process is dominated by the development of shear layers and vortical structures. One visualization technique used to identify them is based on the fact that in regions with negative second invariant of the velocity gradient tensor, there exists vortical motion. So we use isosurfaces of the second invariant of the velocity gradient tensor to identify vortical motion in the flow field. As the flow fields can have up to several million grid points per time step, doing such visualization on a desktop workstation imposes several constrains which we were able to overcome nicely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Disk-mapped I/Os</head><p>Grids of up to 10 million points are used to model the strongly nonlinear phase of the transition process. The fields stored are velocity, vorticity, the velocity gradient tensor and other scalar fields, for a total of 18 fields. Since solution files are several hundreds of megabytes/time step, we looked for efficient ways of accessing them, avoiding swapping at all costs. AVS/Express provides File Access Objects to establish mappings between a Field's arrays and binary data in a file. Thus, no source code needs to be written to map data to AVS/Express' primitives. These mappings are also very efficient as they use some highly optimized UNIX primitives.</p><p>The direct mappings of data to disk files offer many advantages:</p><p>• When calculating derived quantities and when the primary fields are only accessed once, RAM is not wasted.</p><p>• Data is accessed "on-demand".</p><p>• RAM is preserved for storing intermediate fields (often much smaller in size, i.e. 3D-to-2D mappings such as orthoslices, isosurfaces, etc...)</p><p>We have compared our most common application consisting of: a) accessing the 3x3 velocity gradient tensor and computing its second invariant, b) extracting isosurfaces and mapping the pressure field on them, c) displaying the isosurfaces (often, they consist of meshes of 250+ thousand triangles.</p><p>Our results show that the use of disk-mapped I/Os is in general 36% faster than the same visualization network with Data Readers loading all data in the RAM, even when swapping is not necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Periodic Extensions</head><p>In problems with computational symmetries, it is often necessary to duplicate some graphical objects to build a complete image of the flow structures. <ref type="figure" target="#fig_1">Figure 2</ref> illustrates this technique with an isosurface translated in the X and Y directions. Since some of the isosurfaces we build are often made of 200-300 thousand triangles, we need a very efficient way to reference the original object. We also need the abil-ity to duplicate more than one object at once (to add wallpressure displays for example). We use AVS/Express' referencing techniques, whereby objects at any level of the application's hierarchy can reference any other objects of the same type. AVS/Express' base graphics DefaultObject has input ports for arrays of child objects and automatically concatenates its transformation matrix to that of the children. Thus, groups of objects are easily cloned. We support periodic extensions with a macro of UI buttons to make selections between stream-wise, span-wise or both extensions. Based on the buttons pushed, links to the array of objects being translated are established with a 3x1 vector of floats calculating the transformation matrices from the original bounding box. Since AVS/Express' arrays are dynamically sized, we can add or remove objects (i.e. connections) at run-time, providing a very flexible way or referencing graphical objects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Alternate Objects for interactive transformation</head><p>Periodic extensions can lead to groups of objects of several million triangles. For real-time interaction with the structure, it is thus imperative to be able to switch to alternate objects. Typically, one may render the bounding box of an object, or a wireframe instance of it. AVS/Express provides AltObjects which are alternate renderable objects to be parented to DefaultObjects. By carefully building up the original objects, the periodic extensions point to the original objects and can simply inherit the rendering modes and properties selected for efficient rendering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Summary</head><p>The combined use of disk-mapped I/Os, periodic extensions and alternate objects allows us to visualize simulations of 200-300 Mbytes/time step with isosurfaces of up to 1 million triangles on a small SGI workstation with 160 M of RAM. In the next section, we see how similar techniques can also be applied to multi-block datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Multi-block Simulations</head><p>CFD computations are also often done over multiple blocks. At our Center, we currently support two projects where grids can be contiguous, or hierarchical.</p><p>AVS/Express has already some built-in support for multi-block datasets. Given the primitive data structure Field -which supports structured and unstructured gridsit is a simple extension to manage arrays of Fields, just like arrays of primitive numbers (floats or integers). The macros supporting Arrays_of_Fields use several functions allowing the automatic definition and use of arrays with reference to other arrays (i.e. index_of(), array_size(), array_dims()). They implement the standard visualization techniques by defining linear arrays of the data structures used in the single-grid cases. For example, AVS/Express' isosurface_ARR macro is derived from the single-field isosurface macro.</p><p>Although straightforward, this automatic extension from sets of primitives (essentially a macro dataflow network) to arrays of such sets leads to several problems which we address here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Sub-setting</head><p>Multi-blocks datasets may contain a lot of blocks (the largest example we have run at our Center is a simulation with 380 blocks). Sub-setting becomes a necessity, to i m p r ove i n t e r a c t i ve e x p l o r a t i o n . AV S / E x p r e s s ' select_array module can use an array of pointers to Fields and a parallel array of booleans to create a subset of the input array. While the array of booleans can be edited by hand, it can be cumbersome for large arrays. We have designed instead a User Interface based on a dynamicallysized array of toggle or radio buttons. The set of selected buttons is then mapped to the required array of booleans. Our SubSet_of_Blocks macros can also be piped together providing several levels of sub-setting, particularly useful for hierarchical grids.</p><p>Sub-setting multi-blocks only costs a few pointers and is also very useful in the case of streamline computation for hierarchical grids. Since AVS/Express looks for candidate cells in array order of the blocks, we re-order the blocks from high-resolution to low-resolution. This is done with a dynamically-sized array of references to blocks and insures that integration is done at the highest resolution available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Disk-mapped I/Os</head><p>The disk-mapped I/Os technique used for large singleblock grids works equally well for multi-block simulations. Using AVS/Express' array functions, we can derive with array syntax, a compact representation of byte offsets into our datasets stored in binary. For one project, we use the MEMCOM database management system <ref type="bibr" target="#b3">[5]</ref>, where multi-blocks are stored into a single file. A short filter reads the file descriptors and prints a macro of V commands interpreted into the mappings of coordinates and solution arrays on the disk files. This implementation supports load-on-demand very well and is of great efficiency when used in parallel with the Sub-setting macro presented earlier. The following V script shows an example of a disk mapping of a 3-block dataset, with 5 fields stored at the nodes:  <ref type="figure" target="#fig_0">{1495477, 1534461, 1573445, 1688349,  1727333, 1766317, 1805301, 1883269, 2009613,  2135957,2512941, 2639285, 2765629, 2891973, 3144661};</ref> string Labels[5]=&gt; {"PRES","DENS","MOME","ENER","MACH"};</p><p>int Veclen <ref type="bibr" target="#b3">[5]</ref>  <ref type="figure" target="#fig_0">=&gt; {1, 1, 3, 1, 1}</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Colormap Sharing</head><p>Because AVS/Express implements its Array_of_Fields macros as linear arrays, some resources are not shared appropriately. This is due to the duplication of the network of the single-block macro. In its array implementation, AVS/Express:</p><p>• allocates a private colormap for each grid, and • groups all individual graphics sub-objects under a parent object with its own private colormap.</p><p>Thus, legends are displayed with default values between 0 and 255, and objects are displayed with color discontinuities at the grid boundaries <ref type="figure">(Fig. 7)</ref>.</p><p>Such a problem can be overcome <ref type="figure">(Fig. 8</ref>) with V language macros derived from the standard macros. AVS/ Express' architecture allows new definitions of objects to inherit from the base configuration. Thus, we have derived new macros for the following visualization tasks: Iso-contour lines, Iso-surfaces, Iso-volumes, Texture mapping, Ortho-slicing, Extract_component, Arbitrary slicing, Surf_Plot, Bounds, External faces, External edges, Interpolation of any field on any field.</p><p>For isosurfaces for example, the following short macro is enough to derive a new definition: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Hierarchical Grids</head><p>When grids overlap (e.g. <ref type="bibr" target="#b1">[3]</ref>), the standard implementation of multi-block macros is not usable directly. In fact, all visualization techniques result in an overlap of graphic objects in the regions contained simultaneously in grids at different levels of the hierarchy. For example, two iso-surfaces are created, slightly offset from each other when a region of space is shared by low resolution and high-resolution blocks. To correct this problem, we provide a macro to mask out node points in the low-level grids. For any block at level n, the overlapping node points in blocks of level n-1 can be masked out temporarily when zooming in on a dataset and when the high-resolution grids are turned on for visualization extraction <ref type="figure">(Figs 3,4</ref>,5,6: a fast stellar wind from one component of a double star system blows into the dense circumstellar matter. The emerging radiative shock front is highly unstable and will fragment into blobs and filaments on a small time-scale.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Multi-block Macro Array Un-rolling</head><p>When the overhead of dealing with macros of objects as linear arrays replicating the single-block implementation becomes too high (e.g. our 380-block dataset), we can replace the macro completely, with a compiled module looping over the blocks, at the C source code level, instead of at the level of AVS/Express' interpreted language. Our first test concerned the bounds_ARR macro, which calculates bounding boxes (with optional grid lines and faces) for multi-blocks. This macro has the advantage of being simple to implement and it also requires little computetime, thus making it a good test of efficiency to see how much overhead is paid for the indexing of each block and the execution of the parallel data-flow networks. The following table highlights the improvements we have seen for calculation of bounding boxes. Encouraged by these results, we are now beginning similar implementations for some of the macros of §3.3. Communications with AVS' staff indicates that this is also envisaged for a future release of the commercial product <ref type="bibr" target="#b2">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>AVS/Express has proved to be a very good architecture to support our needs. The flexibility of its interpreted language and the power of its objects referencing scheme are valuable tools for the derivation of the extended support we need for Large Datasets. The data and graphics access methods allow innovative ways to apply standard visualization techniques beyond the ordinary "toy" datasets, and we apply these techniques daily for visualization of hundreds of megabytes of data on desk-top workstations.</p><p>The multi-block datasets offer many new challenges. We are now designing support for datasets with rotational symmetry and we are already encountering problems which the standard software distribution cannot readily handle. Our future work is along this natural upgrade path of support.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>AVS/Express implementation</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig 1 :</head><label>1</label><figDesc>A 12-block configuration used for the simulation of an Electrostatic Precipitator. (Data courtesy of W. Egli, ABB Corp. Research Ltd. Switzerland)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig 2 :</head><label>2</label><figDesc>Stream-and span-wise extensions of a pressure isosurface with pseudo-coloring of density. (Data courtesy of C. Mielke, ETH Zurich)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>file data_file { name = "MBlock/demo.db"; }; int Dims[][3] =&gt; {{73, 65, 1}, {241, 65, 1}, {73, 65, 1}}; int Coords_Offsets[] =&gt; {13445, 137565, 523765}; int Data_Offsets[] =&gt;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig 3 :Fig 5 :Fig 7 :Fig 4 :</head><label>3574</label><figDesc>Grid boundaries in a hierarchical multi-block dataset (black = level 0, blue = level 1, red = level 2). (Data courtesy of Rolf Walder, ETH Zurich) Density solid contours masked-out by level 1 blocks Pressure shading in a 3-block model of the NACA airfoil. Standard solid_contour_ARR module from AVS/Express. (Data courtesy of Edgar Gerteisen, CSCS/SCSC) Density solid contours and iso-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 : Computation Times for Bounding Box Extraction in Large Multi-block datasets.</head><label>1</label><figDesc></figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>My system administrator, Nicola Pedrozzi, deserves many thanks for his extraordinary support of software installations and licensing. Christian Mielke, Rolf Walder, Edgar Gerteisen provided datasets and motivation. Many members of AVS also provided help.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Investigation of the late stages of transition to turbulence in a Mach 4.5 Boundary Layer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mielke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kleiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Numerical Notes on Fluid Mechanics &apos;Computation and Visualization of three-dimensional vortical and turbulent flows</title>
		<editor>R. Friedrich, P. Bontoux</editor>
		<imprint>
			<publisher>Vieweg Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">3D Simulations of Colliding Hypersonic Radiative Flows in Astrophysics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Walder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the fifth International Conference on Hyperbolic Pbs, Theory,Numerics, Applications</title>
		<meeting>the fifth International Conference on Hyperbolic Pbs, Theory,Numerics, Applications</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="478" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Curington</surname></persName>
		</author>
		<imprint>
			<publisher>Personnal Communication</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Merazzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Mem-Com</surname></persName>
		</author>
		<title level="m">An Integrated memory and data management system, SMR Corporation</title>
		<meeting><address><addrLine>Bienne, Switzerland. Multi-block dataset</addrLine></address></meeting>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
