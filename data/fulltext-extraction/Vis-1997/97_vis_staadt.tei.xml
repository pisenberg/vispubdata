<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multiresolution Compression And Reconstruction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><forename type="middle">G</forename><surname>Staadt</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department ETH Zürich</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department ETH Zürich</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Weber</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department ETH Zürich</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Multiresolution Compression And Reconstruction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>E.4 [Coding and Information Theory]: Data compaction and compression</term>
					<term>I.3.5 [Computational Geometry and Object Modeling]: Curve, surface, solid, and object representations</term>
					<term>Splines</term>
					<term>I.3.7 [Three-Dimensional Graphics and Realism]</term>
					<term>I.4.5 [Reconstruction]: Transformation methods wavelets, isosurfaces, volumes, triangulation, tetrahedralization, meshing, oracles</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper presents a framework for multiresolution compression and geometric reconstruction of arbitrarily dimensioned data designed for distributed applications. Although being restricted to uniform sampled data, our versatile approach enables the handling of a large variety of real world elements. Examples include nonparametric, parametric and implicit lines, surfaces or volumes, all of which are common to large scale data sets. The framework is based on two fundamental steps: Compression is carried out by a remote server and generates a bitstream transmitted over the underlying network. Geometric reconstruction is performed by the local client and renders a piecewise linear approximation of the data. More precisely, our compression scheme consists of a newly developed pipeline starting from an initial B-spline wavelet precoding. The fundamental properties of wavelets allow progressive transmission and interactive control of the compression gain by means of global and local oracles. In particular we discuss the problem of oracles in semiorthogonal settings and propose sophisticated oracles to remove unimportant coefficients. In addition, geometric constraints such as boundary lines can be compressed in a lossless manner and are incorporated into the resulting bit-stream. The reconstruction pipeline performs a piecewise adaptive linear approximation of data using a fast and easy to use point removal strategy which works with any subsequent triangulation technique. As a result, the pipeline renders line segments, triangles or tetrahedra. Moreover, the underlying continuous approximation of the wavelet representation can be exploited to reconstruct implicit functions, such as isolines and isosurfaces more smoothly and precisely than commonplace methods. Although it scales straightforwardly to higher dimensions the performance of our framework is illustrated with results achieved on data very popular in practice: parametric curves and surfaces, digital terrain models, and volume data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Motivation and Previous Work</head><p>Geometry compression is an attractive and emerging subfield in computer graphics research which has gained much importance in recent years. Especially when aiming at distributed, interactive rendering and visualization applications, many of which are closely related to the WWW, efficient data encoding is an essential prerequisite for both storage efficiency and real time performance. In this context, we often face client server setups where a remote server maintains complex data sets which have to be browsed, inspected, analyzed or rendered with low latency by a local client. Apart from rendering complex scenes, consider the case of visual-Email: {staadt, grossm, weber}@inf.ethz.ch WWW: http://www.inf.ethz.ch/department/IS/cg izing large digital terrain or medical volume data sets located somewhere in a remote data base: For fast searching and browsing it is often sufficient to generate a low level of detail representation. Conversely, it is sometimes desirable to preserve interesting features such as boundaries, isolines, or spatially appealing regions in full detail while keeping the overall through-put of the communications channel as low as possible. <ref type="figure" target="#fig_0">Fig. 1</ref> illustrates some examples where different criteria hold for a meaningful data representation.</p><p>Hence, the underlying data representation should be flexible and has to encompass both global and local level of detail while accounting for constraints imposed by special data features. Obviously, as opposed to standard image compression methods, information loss is a manifold problem and has to be controlled much more carefully in graphics applications. As a consequence, elaborate data encoding and compression methods are called for which successfully address the situations featured above. While, on the client side, visual data inspection and analysis is tightly related to the computation of geometric reconstructions from the data, mostly in terms of piecewise linear elements such as line segments, triangles, or tetrahedra. It is therefore desirable to perform reconstructions efficiently from the bitstream of incoming data. Moreover, geometry should be refined progressively as more and more data arrives at the client. All representations have to be adaptive, in the way that the number of triangles has to vary as a function of the client's performance and interest while still providing a meaningful representation.</p><p>It is clear that much successful research effort has been spent on developing appropriate methods for geometry compression. Early approaches go back to Douglas et. al. <ref type="bibr" target="#b5">[6]</ref> who proposed a simplification method for line segments. We can also find a vast amount of literature on mesh representation strategies, a good survey of which is provided by Heckbert et. al. <ref type="bibr" target="#b10">[11]</ref>. Later, Deering <ref type="bibr" target="#b4">[5]</ref> for instance, proposed a scheme to compress triangular shapes and their attributes. Hoppe <ref type="bibr" target="#b11">[12]</ref> and Popovic et. al. <ref type="bibr" target="#b15">[16]</ref> suggested the concept of progressive meshes for triangulated shapes where edge split and collapse techniques lead to a continuous hierarchy of levels of detail of an object and constraints may be imposed easily. Others <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b6">[7]</ref> discussed representation and parametrization strategies for meshes of arbitrary topology using linear wavelets. However, high compression gain along with continuous approximation requires smooth, higher order polynomial wavelets, which are difficult to define over arbitrary meshes. The special case of digital terrain data was addressed, for instance, by Lindstrom et. al. <ref type="bibr" target="#b13">[14]</ref> and Gross et. al. <ref type="bibr" target="#b9">[10]</ref>. The latter one used an underlying wavelet representation to govern mesh refinement and featured both global and local levels of detail.</p><p>In summary, much effort has been spent on finding appropriate mesh simplification and representation methods which allow for fast and progressive transmission and rendering of complex scenes. However, little attention has been spent on the following issues:</p><p>•</p><p>Many technical applications in practice, such as medical imaging systems, produce raw data sampled over uniform grids. Due to their complexity, these data sets have to be compressed and stored in a remote database server. Thus, visual inspection and browsing requires computation of piecewise linear geometric reconstructions from the compressed data set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Up to now compression was mostly considered a mesh representation problem. The manifold aspects of a full compression pipeline such as precoding, global and local oracles, quantization, and optimal bit allocation have rarely been discussed in full detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Compression and reconstruction should be embedded in a framework which provides an interface for the client and offers a testbed for individual methods. In particular, both lossy and lossless compression must be combined to satisfy demands arising from geometric reconstructions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Our Approach</head><p>The research presented in this paper was stimulated by the issues discussed above. The goal was to provide an efficient and versatile compression and reconstruction pipeline which accounts for client-server setups. The framework is hybrid in the sense that it combines both lossy and lossless compression. Being restricted to uniform sampled data, we can use bounded B-spline wavelets, such as in <ref type="bibr" target="#b19">[20]</ref> and <ref type="bibr" target="#b17">[18]</ref>, for data precoding. Some of their relatives have successfully been used in image compression <ref type="bibr" target="#b21">[22]</ref>. The underlying approximation features high compression gain, elimination of boundary problems, multiresolution progressive setups, and both global and local oracles within the error bounds of . Furthermore, B-spline wavelets allow one to build linear time decomposition and reconstruction schemes forming a basis for fast compression and decompression. The geometric reconstruction of the data essentially combines a generalized point removal/insertion strategy with a subsequent triangulation. We restrict our attention to vertex removal and keep it independent of the meshing. That is, we consider a meaningful triangulation as a plug-in, such as provided by the qhull library <ref type="bibr" target="#b0">[1]</ref>. Special emphasis, however, is given to implicit reconstruction tasks which occur in many applications. For this, we exploit the smoothness properties of the underlying approximation which allows more smooth and precise computation of implicit intersections than current methods. Again, triangulation algorithms, such as marching tetrahedra <ref type="bibr" target="#b1">[2]</ref>, are provided as plug-ins from other sources. Thus, our framework features modular and object oriented design, currently embedded in AVS/Express. <ref type="figure" target="#fig_1">Fig. 2</ref> depicts an overview of the framework. The individual components can be combined according to requirements of the application. The remote server performs data compression and is governed by parameter settings for global and local oracles, and a bitstream received by a client is produced. It is at this step where geometric reconstruction and interactive visualization are computed. The quality of the geometric reconstruction computed by the client can be controlled depending on network performance, computational and storage capabilities of the client, or on the data themselves.</p><p>We are aware that the restriction to uniform sampled data might be considered a major drawback. We believe, however, that the rich variety of applications covered by our approach justifies the presented research.</p><p>The remainder of our contribution is organized as follows: In Section 2 we describe the fundamentals of the multiresolution data precoding emphasizing new methods for the construction of global oracles for semiorthogonal B-spline wavelets. Section 3 addresses all relevant issues related to our compression strategies for quantization and bit allocation. A fast and easy to use geometric reconstruction technique based on progressive point removal/insertion is explained in Section 4. The special problem of implicit interpolation for isolines and -surfaces is elucidated in Section 5. Finally, we illustrate the versatility of our framework with various examples ranging from different surface types to volume data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">MR APPROXIMATIONS</head><p>In this section we discuss the mathematical fundamentals of the preprocessing we employ for data preconditioning. As stated earlier, B-spline wavelets are used as a precoding transform since they combine various advantageous features, such as vanishing moments, continuous approximation, bounded interval definition, linear time algorithms, and localization. For reasons of readability, we first review some basics of cardinal B-spline wavelets. However, our attention is mostly directed to the definition of global oracles, that is, schemes to reject unimportant coefficients. Our global oracle consists of a greedy algorithm resulting from an elaborate analysis of errors in semiorthogonal settings <ref type="bibr" target="#b8">[9]</ref>, an excerpt of which is given in Section 2.2. Additionally, we will demonstrate how local oracles reject coefficients in unimportant spatial regions and thus enable the construction of electronic magnifying glasses for interactive data inspection. For reasons of simplicity, we perform all computations for 1D functions, but the results extend straightforwardly to higher dimensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">B-Spline Wavelets</head><p>B-spline wavelets were initially introduced by Chui <ref type="bibr" target="#b3">[4]</ref>, and were extended to bounded intervals by <ref type="bibr" target="#b17">[18]</ref> and <ref type="bibr" target="#b19">[20]</ref>, while nonuniform knot sequences were addressed for instance by <ref type="bibr" target="#b2">[3]</ref>. Due to a rich variety of literature in this area, we restrict our introduction to those topics essential for an understanding of our framework. B-spline wavelets can be constructed from a multiresolution hierarchy of cardinal B-spline scaling functions. Semiorthogonality invokes an additional degree of freedom, however. Thus,  approaches as in <ref type="bibr" target="#b17">[18]</ref> or <ref type="bibr" target="#b19">[20]</ref> end up in slightly different construction schemes. We adapted the methods of Quak et. al. <ref type="bibr" target="#b17">[18]</ref> to construct B-spline wavelets of arbitrary order bounded to the interval.</p><p>Assuming the reader is familiar with some fundamentals of discrete wavelet transforms (DWT), the implementation of the forward transform is carried out by sequences of projection operators , where stands for the decomposition level. An initial function is mapped from the higher resolution approximation space onto a lower resolution space and onto its orthogonal complement space . Given the coefficient vectors and for the scaling functions , and wavelets in the 1D setting, with</p><p>, the decomposition is performed by matrix operations .</p><p>Due to the semiorthogonality, we require the inverse operators and to compute the reconstruction with .</p><p>It can be easily proven <ref type="bibr" target="#b17">[18]</ref> that the operators relate to each other by .</p><p>In the case of cardinal B-spline wavelets, sparse operators and come along with dense matrices and . In order to construct linear time algorithms for both decomposition and reconstruction, it is sufficient to know the sequences and to perform an additional base transform of the coefficients into their duals and using the inner product matrices and . This results in a decomposition and reconstruction scheme as depicted in <ref type="figure" target="#fig_3">Fig. 3</ref>.</p><p>Note that the decomposition involves solutions of the sparse linear systems of type for each iteration and for the last iteration step. Fortunately, this can be accomplished in linear time as well. For brevity we abandon all mathematical details associated with the construction of these transforms and refer the reader to <ref type="bibr" target="#b17">[18]</ref>. Instead, we direct our attention in the following section to the problem of global oracles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Global Oracles</head><p>A global oracle rejects unimportant wavelet coefficients from the transform while minimizing a given error norm. It is clear that the global oracle controls the compression and is essential for information loss. In orthogonal settings, optimal oracles can be constructed easily by sorting coefficients according to their magnitude, and by rejecting the smallest ones from the list <ref type="bibr" target="#b19">[20]</ref>. This strategy is commonplace in many applications and offers good results <ref type="bibr" target="#b7">[8]</ref>. Unfortunately, in semiorthogonal spaces, construction becomes more difficult and has hardly been addressed in depth. Maximum distance norm oracles have been proposed by <ref type="bibr" target="#b20">[21]</ref> for biorthogonal wavelets. Mathematical analysis of the behavior of approximation errors for semiorthogonal wavelets is closely related to signal energy computations.</p><p>The computational scheme for the global oracle is based on the observation that the energy of a function expanded by semiorthogonal wavelets is obtained by the following sum of scalar products: <ref type="bibr" target="#b4">(5)</ref> • : scalar product operator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Due to the orthogonality of different complement spaces it is</head><p>sufficient to analyze the error norm of a single space . In order to derive an incremental method we assume out of coefficients in this space to vanish. The approximation error is determined by the following relation: <ref type="bibr" target="#b5">(6)</ref> where represents the residual approximation and denotes the set of all coefficients being rejected from the initial transform. In a next step we compute how the upper error behaves when rejecting an arbitrary , assuming coefficients to have already been rejected in previous procedures. That is, we compute an expression for the error increment generated by a single coefficient. </p><formula xml:id="formula_5">A m B m , m 1…M = f x ( ) V m V m 1 + W m 1 + c m d m φ i m x ( ) ψ i m x ( ) c i m f φ i m , 〈 〉 = d i m f ψ i m , 〈 〉 = i: 1…N 2 m ⁄ order 1 -, order: B-Spline order + c m 1 + A m c m = d m 1 + B m c m = P m Q m c m P m c m 1 + Q m d m 1 + + = A m B m ------- P m |Q m [ ] 1 - = P m Q m A m B m P m Q m c m d m Φ m Ψ m c m c m Φ m c m P M ( ) T c M 1 - c M 1 - c M Q M ( ) T c M 1 - d M Ψ M d M d M = d M … c M Φ M c M c M = a) c m d m : coefficient vectors in dual space, T: transpose , … c M d M P M c M Q M d M … P m 1 + c m 1 + Q m 1 + d m 1 + c m … c m 1 + d m 1 + b) … Ψ m d m ⋅ d m = Φ M c M ⋅ c M = L 2 f x ( ) f x ( ) L 2 2 c M c M • d m d m • m 1 = M ∑ + = W m K N 2 m order 1 - + ⁄ ∆ f m x ( ) ∆ f' m x ( ) - L 2 2 Rej K ( ) d i m ψ i m x ( ) i Rej K ( ) ∈ ∑ d i m ψ i m x ( ) i Rej K ( ) ∈ ∑ , = d i m d j m j Rej K ( ) ∈ ∑ i Rej K ( ) ∈ ∑ ψ i m x ( ) ψ j m x ( ) , 〈 〉 ⋅ = ∆ f ' m x ( ) Rej K ( ) d k m 0 ≠ K ∆ f m x ( ) ∆ f' m x ( ) - L 2 2 Rej K k , ( ) ∆f m x ( ) ∆ f' m x ( ) - L 2 2 Rej K ( ) d k m ( ) 2 2 + d k m d i m i Rej K ( ) ∈ ∑ ψ k m x ( ) ψ i m x ( ) , 〈 〉 ⋅ ⋅ + =</formula><p>Equation <ref type="formula" target="#formula_4">7</ref>expresses the dependence of the error on an increment of the rejection set. We will refer to it as the conditional approximation error in all subsequent discussions. The factor of 2 follows immediately from the symmetry of the inner product matrix. Apparently, the conditional increment is computed by adding one row and one column to the matrix type structure representing the double summation of (6), such as depicted in <ref type="figure" target="#fig_4">Fig. 4</ref>. In summary, the error can be updated by adding the products of the coefficient and the elements of the rejection set times the associated entry of the inner product matrix. Note that this error can be considered a score which reflects the conditional importance of an individual coefficient.</p><p>The relations derived represent an essential step towards the development of an oracle. They allow one to predict how the approximation error changes when rejecting an individual wavelet coefficient under the precondition that K other coefficients have been rejected earlier. Based on this fundamental relationship, it is possible to develop a greedy rejection algorithm which optimizes locally and computes a minimum error rejection set of coefficients. In essence, the greedy oracle operates as follows: It first assigns an initial score to all wavelet coefficients of all iterations . The score is defined by the overall conditional approximation error, which governs the oracle. In a second step, the oracle iteratively selects the coefficient with the minimum score, rejects it, and recomputes the scores of all other coefficients. The iteration loop runs up to a predefined number of cycles or up to a predefined error bound . As with equation <ref type="formula" target="#formula_4">7</ref>, the score can be recomputed by an appropriate increment after each iteration. Thus we end up with a simple reject-and-update scheme for our oracle. The pseudocode is provided below:</p><formula xml:id="formula_6">Initialize: score[i,m] ← d[i,m]⋅d[i,m]; for i ← 1 to K for m ← 1 to M do Search: coefficient[i rej ,m rej ]| score[irej,mrej] = min ≠ 0; Reject: d[i rej ,m rej ] ← 0; if m = m rej &amp;&amp; score[i,m] ≠ 0 then increment[i,m] ← 2⋅d[i,m]⋅d[i rej ,m rej ]⋅ψ[i,i rej ,m] + score[i rej ,m rej ] -old_score else if score[i,m] ≠ 0 increment[i,m] ← score[i rej ,m rej ] -old_score; Update: score[i,m] ← score[i,m] + increment[i,m]; end;</formula><p>After each step, the score</p><formula xml:id="formula_7">[i,m] of a coefficient d[i,m]</formula><p>represents the overall conditional approximation error when rejecting d <ref type="bibr">[i,m]</ref>. Note that the time-complexity of the oracle equals and applies only on forward compression.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Local Oracles and Selective Refinement</head><p>A local oracle allows one to control the approximation locally in interesting regions. Here, the spatial localization of the basis functions enables us to accentuate particular wavelets while suppressing the influence of others. In this understanding, a straightforward local oracle consists of a weighting function which operates on the coefficients of the transform. A first approach to this is given in Gross et. al. <ref type="bibr" target="#b9">[10]</ref> who employed a Gaussian weighting. The basic idea is to assume some ellipsoidal weighting area as a local region of interest in the spatial domain. Localization of the wavelet transform enables the projection of scaled and translated versions of it into wavelet space, where individual coefficients are influenced. The initial version presented in <ref type="bibr" target="#b9">[10]</ref>, however, did not consider the support regions of individual basis functions, and can lead to some artifacts by rejecting wavelets ranging into the region of interest. Therefore, we extended the method with the computation of support and bounded wavelets.</p><p>An illustration for geometry based image representation is given in <ref type="figure" target="#fig_5">Fig. 5</ref>. In <ref type="figure" target="#fig_5">Fig. 5a</ref>, we computed a mesh of the IEEE Computer Society logo using the approach explained subsequently. Selectively refined meshes using Gaussian weighting are presented in <ref type="figure" target="#fig_5">Fig. 5b</ref> and <ref type="figure" target="#fig_5">Fig. 5c</ref> respectively, where the areas of interest are located around different areas of the logo. For illustration, the mesh was kept artificially dense.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">COMPRESSION STRATEGIES</head><p>This section explains in detail all essential processing steps associated with the definition of appropriate compression strategies. We first give an overview of the compression and decompression pipelines, which are hybrid, in the sense that they combine both lossy and lossless methods depending on the type of feature to encode.</p><p>Data compression has a long tradition and has been studied intensively <ref type="bibr" target="#b18">[19]</ref>. However, the individual requirements of a geometry based approach encouraged us to design the pipeline explained subsequently. For instance, in the context of lossy compression, issues of floating point data handling and quantization must be adapted to our needs where the structure of the wavelet representation plays an important role. Furthermore, additional effort has to be spent on progressive settings. Since the preservation of constraints, such as iso-or boundary values or lines, is desirable in many applications we propose a lossless compression strategy for these features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview</head><p>Based on the wavelet precoding steps explained previously, we designed a compression/decompression pipeline as depicted in <ref type="figure" target="#fig_7">Fig. 6</ref>. The forward compression proceeds as follows: After extraction of constraints, the data set is normalized, wavelet-transformed and both local and global approximation errors are controlled by the oracles introduced above. Sorting of the individual channels of the WT transforms the multidimensional array into a 1D data vector which is quantized and encoded subsequently. Line-constraints, as extracted earlier, are fed into a lossless compression scheme. Conversely, the decompression pipeline inverts the procedure and prepares the data for subsequent geometric reconstruction.  </p><formula xml:id="formula_8">d k m d k m d i m ψ k m x ( ) ψ i m x ( ) , ( ) ∆ f m x ( ) ∆ f' m x ( ) - L 2 2 Rej K ( ) m K E b O N 2 ( )</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Progressive Lossy Compression</head><p>Handling of Floating Point Values. First the data is normalized, i. e. the values are scaled to . We decided to carry this out before transformation, because post-normalization maps an offset onto small wavelet coefficients and is more difficult to handle upon compression.</p><p>In order to prepare the data for bandwise progressive transmission, we sort the multidimensional coefficient array into a 1D vector as displayed in <ref type="figure" target="#fig_8">Fig. 7</ref>. Here, the array is traversed from the most significant scaling function coefficients to the high frequency bands representing fine grained detail.</p><p>Note that the vector contains floating point values and has to be converted into an array of integers.</p><p>Quantization. The quantization step comprises a multiplication of the initial floating point coefficients with a factor of , where represents the number of bits to be assigned for each coefficient. Subsequent rounding operations transform the floating point value into signed integer formats of size . Let be a coefficient, we obtain it's quantized version by .</p><p>Note that strongly affects the quantization error and appears as noise after reconstruction. Lossless quantization would typically require 23 bits on a 32 bit machine for single precision due to the IEEE-754 floating point format.</p><p>Coding and Bit Allocation. The major task in the proposed compression is to convert the quantized integer vector into a bitstream of data. Therefore, we employ an entropy coding scheme in the spirit of JPEG <ref type="bibr" target="#b22">[23]</ref>. Assuming that many of the coefficients will equal zero, encoding is carried out as follows: All nonzero coefficients are represented by 2-tuples, where the first element represents the number of bits of the second one. The second element contains the data value itself. All negative numbers are thus replaced by their absolute values, where in the case of a positive number the first bit is cleared. This enables the encoding of the sign. Let's say to encode a value of 17 we get (5, 00001), whereas to encode -17 we obtain <ref type="bibr" target="#b4">(5,</ref><ref type="bibr">10001)</ref>. Similarly, 5 is represented by (3, 001), whereas -5 is converted to <ref type="bibr" target="#b2">(3,</ref><ref type="bibr">101)</ref>. Note specifically that since the number of bits is known in advance, the representation is unique and the additional encoding of the sign bit in the most significant bit is possible.</p><p>Zero valued coefficients are encoded differently. Here we recommend a runlength coding up to a length of which generates a set of 32 new symbols. These symbols, together with the first part of our 2-tuples, are stored in a Huffman-table which has essentially 64 entries. The Huffman symbols are as follows: The scheme proposed here compromises the complexity of the Huffman-table with the maximum number of zero coefficients (32) to be encoded in one symbol. The 'EOB' Symbol usually allows the encoding of long sequences of 'zero'-coefficients in the least significant positions of our data vector. However, it is only used where the Huffman table has not been built individually. The following pseudocode illustrates the procedural flow of the scheme: // N:total number of integer coefficients // d i : coefficient i // hufflen i : length of Huffman-code for symbol i // huffcode i : Huffman-code for symbol i // WriteBits(l,i): // appends the last l bits of i to bitsream // Make2Tupel(i,first,second): // converts integer into 2-tuple i ← 0; while i &lt; N do if d i = 0 then j ← 0; while j&lt;32 &amp;&amp; d i ← 0 do inc(i); inc(j); end; WriteBits(hufflen j+31 , huffcode j+31 ); else Make2Tupel(d i ,first,second); WriteBits(hufflen first-1 ,huffcode first-1 ); WriteBits(first,second); inc(i); end; end; WriteBits(hufflen 31 ,huffcode 31 );</p><p>For brevity we do not explain the construction of the Huffman-table and refer to standard literature, such as <ref type="bibr" target="#b18">[19]</ref>. However, in our framework the Huffman-table is generated individually for each data set upon compression and is transmitted along with the data and header information, which is presented in <ref type="table" target="#tab_1">Table 2</ref>. Since the size of the table is fixed to 64 entries, this does not lead to a notable overhead. Another solution would be the employment of a generic table, such as in image compression which, however, drops the compression gain and, due to the variety of geometric data, is much more difficult to construct. An example of encoding a sequence of coefficients is given in <ref type="figure" target="#fig_9">Fig. 8</ref>.</p><p>It should be stated again that progression is achieved channel by channel. That is, we transmit the low frequency scaling function coefficients first followed by the wavelet coefficient channels in order of ascending frequency.  32 = Some results of the lossy compression of a B-spline surface with different parameter settings are depicted in <ref type="figure" target="#fig_10">Fig. 9</ref>. In order to decompose the control points of this B-spline surface we used the pipeline explained in detail in Section 4.3.</p><p>Finally, <ref type="table">Table 1</ref> compares the proposed encoding scheme (encode) with some of the most popular lossless compression methods, like zip, arc, urbon and compress. Note that information loss occurs only upon coefficient removal and quantization. Thus, all subsequent steps in our pipeline are lossless and can be compared with some standard algorithms. Results are given for a 3D volume data set, where the data was prequantized with 8 bits and 16 bits respectively. Interestingly, even in lossless mode our method competes with popular algorithms in overall performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Compression of Constraints</head><p>In many cases it is desirable to compress spatially interesting features, such as boundary-or isolines and individual vertices in a lossless manner. We call these data constraints, since they usually constrain subsequent geometric reconstruction. In our pipeline we represent constraints as polylines or polygons. <ref type="figure" target="#fig_0">Fig. 10</ref> illustrates the use of constraints in a digital terrain data set of the Swiss Alps. Here the geometric reconstruction, i. e. triangulation of the surface, was simplified up to a given bound. The constraints invoked by the polygon force the reconstruction to keep the triangulation dense, however. The constraint is imposed in terms of a terrain following polyline of a given extent.</p><p>Assuming the polyline constraint is represented as a stream of vertices of type (x, y, data), we employ a lossless compression strategy, as shown in <ref type="figure" target="#fig_7">Fig. 6</ref>.</p><p>The position and the data value are encoded separately using both delta and higher order arithmetic compression algorithms. For details see <ref type="bibr" target="#b18">[19]</ref>.</p><p>The resulting bitstream format is presented below in <ref type="figure" target="#fig_0">Fig. 11</ref>, where two headers are followed by the individual x-, y-and datastreams.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">VERTEX REMOVAL STRATEGIES</head><p>The following section is dedicated to vertex removal methods, which enable the client to compute geometric reconstructions adaptively and progressively from the incoming bitstream of data.   <ref type="table">Table 1</ref>: Comparison of the proposed method (encode) with some popular compression algorithms (3D volume data set of <ref type="figure" target="#fig_0">Fig. 19</ref> and <ref type="figure" target="#fig_1">Fig. 20</ref>   <ref type="table" target="#tab_1">Table 2</ref>. When seeking an appropriate algorithm, computational performance and invariance to the dimensionality are important considerations. Due to the rich literature on vertex removal in graphics and computational geometry we found that the well-known algorithm of Douglas et. al. <ref type="bibr" target="#b5">[6]</ref> is a good starting point. First, we briefly explain its initial form in a nonparametric 1D setting and illustrate its application in multiresolution representations. Here, special emphasis is given to extension of the method for progressive reconstruction. Next, we generalize the method to multidimensional and parametric cases and give some examples of how it works. The versatility of the introduced method imposes no restriction on subsequent triangulation methods, which can range from constraint Delaunay <ref type="bibr" target="#b16">[17]</ref> to fast look-up tables <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">1D Settings</head><p>In order to construct a point removal strategy, let's first consider the 1D setting. Here, the problem reduces to finding a strategy for the reduction of line segments in piecewise linear approximations. Inspired by the algorithm of <ref type="bibr" target="#b5">[6]</ref> we extended these ideas and modified the method to a recursive and progressive algorithm, illustrated in <ref type="figure" target="#fig_0">Fig. 12</ref> ered important and labeled. We split the initial line segment in two halves, on each of which the algorithm can be applied recursively.</p><p>Obviously, the quality of the removal can be controlled by the distance threshold. The advantage of this extension to the original method lies in the tree type refinement of the vertex analysis coming along with the recurrence relations.</p><p>The distance can be computed in different ways, where, however, the computation of the vertical distance, such as depicted in <ref type="figure" target="#fig_0">Fig. 12c</ref>, is computationally much more expensive for general multidimensional settings. Therefore, we recommend computation of the y-distance (see <ref type="figure" target="#fig_0">Fig. 12a</ref>) approximating nonparametric data. The problem of parametric data sets will be discussed in upcoming sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Generalizations to Multiple Dimensions</head><p>Generalizations of the method towards multidimensional nonparametric data is straightforward. Starting from an initial grid, as in <ref type="figure" target="#fig_0">Fig. 13</ref>, the algorithm seeks the vertex with the maximum distance and subdivides the field into 4 (in 2D) or 8 (in 3D) subcells on which the method is applied recursively. In these cases the distances to the bilinear and trilinear interpolants of the cell vertices are computed, respectively.</p><p>Recalling the multiresolution B-spline approximation of the data motivates the extension of the algorithm towards a channelwise progressive point insertion. Therefore, the algorithm analyzes mesh vertices progressively and labels unimportant points as new data comes in. In 2D, for instance, the basic idea is to start from an initial vertex field of resolution in each direction, where represents the maximum iteration. The vertices are provided by the scaling function approximation and are processed further by our algorithm. To define a distance metric, we assume a bilinear interpolant between the vertices which approximates the B-spline scaling function representation. If the difference signal is received, the resolution is refined by 2 and all newly inserted vertices are checked conforming to our distance metric. If required, they will be inserted.</p><p>In order to compute the intermediate vertices for each iteration, an inverse wavelet transform has to be applied on all coefficients of a given iteration as soon as they are received and decompressed.</p><p>An apparent drawback of this approach, however, deserves some attention: Once a vertex is labeled as important there is no way to reject it in subsequent steps. Obviously, the detail signals added during progression influence the importance of each vertex. Therefore, we recommend an exponential alignment of the threshold to the iteration. That is if stands for the current iteration step, the associated threshold is computed by <ref type="bibr" target="#b8">(9)</ref> : global threshold governing the point removal.</p><p>In our implementation we employ a tree type data structure to maintain the individual cells representing the mesh. The tree grows iteratively as progression proceeds. After iteration, the leaves of the tree represent the remaining cells and can be triangulated with appropriate methods. <ref type="figure" target="#fig_0">Fig. 14 further elucidates</ref> the data representation.    For subsequent triangulations we employed the qhull library from <ref type="bibr" target="#b0">[1]</ref> in 2D and 3D. Note, that the N-tree type cell structure enables computation of very fast meshings using look-up tables, such as the ones presented in <ref type="bibr" target="#b9">[10]</ref>. An example of progressive point removal is depicted in <ref type="figure" target="#fig_0">Fig. 18</ref>, where the mesh is refined gradually with each wavelet channel arriving at the client side.</p><formula xml:id="formula_10">P 0 P k P 2 P 0 P 2 P k P 0 P 2 P k P 1 P 3 P 0 P 2 P k P 1 P 3 P</formula><formula xml:id="formula_11">+ P i 1 j 1 + + , , , 2 m M - M f M x y , ( ) ∆f m x y , ( ) m ε 0 m ε m ( ) ε m ( ) ε 0 e M m - ⋅ = ε 0</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Parametric Data Sets</head><p>A parametric version of the introduced algorithm can be constructed as elucidated below. For reasons of simplicity, we restrict our description to 2D parameter spaces, however higher dimensional spaces can be easily generalized from that. The conceptual components of our pipeline are illustrated in the diagram of <ref type="figure" target="#fig_0">Fig.  15</ref>. We assume an initial parametric B-spline surface to be defined by its vector valued control points at iteration .</p><p>: number of tensor product B-spline scaling functions.</p><p>Thus compression has to proceed separately on the x, y and z components of the control vertices. Specifically, the WT and the oracles operate for now independently on the individual coordinates.</p><p>However things become more complicated upon reconstruction, which operates again in parameter space independently for the spatial coordinates , , and .</p><p>As a result three binary label fields are generated indicating the importance of individual vertices in parameter space for subsequent triangulation. Unfortunately, different results are obtained for , , and and we have to decide on the final removal. This decision is accomplished by applying a Boolean OR operator over the individual vertex fields a motivation of which is given as follows: As explained earlier the non-parametric version of our removal strategy holds for linear approximations in terms of triangulations and thus refines the mesh in spatial regions, where the underlying function features nonlinear behavior. In the parametric setting similar criteria are valid for a linear approximation of a surface. The mesh has to be refined in those regions where the surface shows nonlinear behavior, that is where the local curvature does not equal zero. This however happens if either , or indicate nonlinearity. Obviously, the Boolean OR of the label fields considers a vertex important if one or more of the three coordinates behave locally nonlinear. The usefulness of this approach can be seen in <ref type="figure" target="#fig_0">Fig. 17</ref>, where a parametric surface is compressed and reconstructed with different parameter settings.</p><p>Here, we end up with a dense mesh in spatial regions of high curvature and simplification occurs in regions of local planarity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">IMPLICIT INTERPOLATION</head><p>In the following section the problem of implicit reconstruction is addressed. In practice, implicit structures are mostly isolines or isosurfaces. An advantageous feature coming along with the multiresolution B-spline representation is the higher order continuous approximation of the underlying data. Although any computation bases on adaptive triangulations obtained from previous procedures, this property can be exploited to reconstruct implicit structures more precisely. For instance, in 2D data sets, piecewise linear representations of isolines can be recovered by immediate computation of the intersections along the triangle edges from the Bspline approximation. Similar procedures hold for isosurface reconstructions from tetrahedralizations. The cubic polynomials perform data smoothing and cancel out most of the jags and discontinuities commonplace in standard methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Isolines</head><p>In order to handle isolines we start from the initial B-spline description of the underlying 2D height function and obtain an implicit formulation by <ref type="bibr" target="#b10">(11)</ref> : isovalue.</p><p>Recalling the approximation properties of B-splines we recommend to precompute an interpolation problem to get the appropriate coefficients related to the data samples to be interpolated. These types of interpolations are extensively investigated and relate tightly to inverse B-spline filtering problems which perform in linear time <ref type="bibr" target="#b21">[22]</ref>.</p><p>For <ref type="bibr" target="#b10">(11)</ref> we provide a polyline approximation using a marching triangle-like look-up table which operates on a triangle mesh representing . A slight extension of the look-up table enables the extraction of those parts of the surface which are interior to the isoline, that is whose function values . The vertices of the describing polygonal hull are given by the intersections of the isoline with triangle edges, such as shown in <ref type="figure" target="#fig_0">Fig. 16a</ref>.  </p><formula xml:id="formula_13">c i j x , 0 c i j y , 0 c i j z , 0 , , ( ) T = m 0 = s u v , ( ) c ij 0 φ j 0 v ( )φ i 0 u ( ) j 1 = J ∑ i 1 = I ∑ = J I ⋅ u v</formula><formula xml:id="formula_14">u v , ( ) s x u v , ( ) s y u v , ( ) s z u v , ( ) s x u v , ( ) s y u v , ( ) s z u v , ( ) s x u v , ( ) s y u v , ( ) s z u v , ( ) f x y , ( ) f x y , ( ) c ij 0 φ j 0 y ( )φ i 0 x ( ) j 1 = J ∑ i 1 = I ∑ τ = = τ c ij 0 f x y , ( ) f x y , ( ) τ &gt;</formula><p>Note that in cases 011, 101, and 110 the initial triangle representing the surface is split into 2 primitives. The intersection of the isoline, implicitly defined by <ref type="bibr" target="#b10">(11)</ref>, with the triangle edge is calculated using a binary search along the edge. Here we exploit the regional separation with respect to provided by the isoline. <ref type="figure" target="#fig_0">Fig. 18</ref> illustrates the performance of the method on digital terrain data. We employed progressive triangular approximations of different quality to compute both isolines and to extract interior regions. Comparing the isolines computed by our method with those of a linear interpolation reveals the superiority of the approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Isosurfaces</head><p>Similar relations hold for the generation of isosurfaces and interior or exterior volumes. Here we start from a B-spline volume approximation of :</p><p>: number of tensor product volume B-splines. After solving the initial B-spline interpolation problem the isosurface is obtained by a marching tetrahedron <ref type="bibr" target="#b1">[2]</ref> algorithm, where the intersections of the surface with the tetrahedral edges are computed using the binary search on the B-spline volume. Again, a little work on the look-up table enables one to extract interior or exterior volume segments which are important for many applications, such as finite element simulations <ref type="bibr" target="#b12">[13]</ref>. <ref type="figure" target="#fig_0">Fig. 16b</ref> exploits symmetry and illustrates the 5 out of 16 cases arising upon triangulation giving the connectivity for the extraction of interior volumes.</p><p>Note especially that individual tetrahedra may split up into three primitives for representing the bounding surface of the interior volume.</p><p>The results given in <ref type="figure" target="#fig_0">Fig. 19</ref> and <ref type="figure" target="#fig_1">Fig. 20</ref> illustrate the approximation behavior of the method, where standard marching cubes and marching tetrahedron with linear interpolation are contrasted to the B-spline binary search algorithm. Although intersection computation is more expensive we observe that the resulting isosurface is figured out more precisely and smoothly using the new approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RESULTS</head><p>In this section we demonstrate the versatility of the introduced compression and reconstruction framework by investigating its performance on different data sets. First, <ref type="figure" target="#fig_0">Fig. 17</ref> shows a series of triangulations of a parametric interpolating B-spline surface generated in accordance to the diagram in <ref type="figure" target="#fig_0">Fig. 15</ref>. The initial control mesh of points was decomposed and reconstructed using 60% of the coefficients. By fixing the quantization to 10 bits we achieved a compression gain of 1:5. We observe that the quality of the reconstruction is governed by the parameter . The triangulation was computed using the qhull library from <ref type="bibr" target="#b0">[1]</ref>. Interestingly, our method generates numerous slivers, long thin triangles, which are mostly located along the shaft of the object. This effect can be explained easily by analyzing the curvature in those regions. We find that it differs significantly in u and v direction in parameter space and therefore long, thin structures provide an efficient planar approximation.</p><p>Further progressive mesh refinements and isoline reconstructions are depicted in <ref type="figure" target="#fig_0">Fig. 18</ref> for a digital terrain data set of the Swiss Alps, Matterhorn region. The initial grid consists of vertices and 168,000 triangles. We applied a forward compression by keeping only 5% of the coefficients at a decomposition level of , which corresponds to a compression gain of 1:40 at 10 bits quantization. The series reveals how the mesh is refined progressively and adaptively upon reconstruction with each incoming wavelet channel. The extracted isolines were computed using the method of Section 5.1 and are contrasted against the bilinear interpolations of <ref type="figure" target="#fig_0">Fig. 18e</ref>. By comparing them to <ref type="figure" target="#fig_0">Fig. 18a</ref> we note that artifacts coming along with linear interpolation are avoided in our approach using the binary search technique. Further pictures from this series illustrate the extraction of interior and  <ref type="table" target="#tab_4">Table 3</ref>.    <ref type="figure" target="#fig_0">16b</ref>). exterior regions and variations of the compression gain. <ref type="figure" target="#fig_0">Especially  Fig. 18h</ref> illustrates the quality of the approximation at a compression gain of 1:100.</p><formula xml:id="formula_16">v 0 v 2 v 1 v 0 v 2 v 1 v 3 v 5 v 0 v 2 v 1 v 0 v 2 v 1 v 0 v 2 v 1 v 0 v 2 v 1 v 0 v 2 v 1 v 0 v 2 v 1 v</formula><formula xml:id="formula_17">v 3 v 2 v 1 v 0 v 7 v 8 v 6 v 5 v 4 v 9 b) τ f x y z , , ( ) f x y z , , ( ) c ijh 0 φ h 0 z ( )φ j 0 y ( )φ i 0 x ( ) h 1 = H ∑ j 1 = J ∑ i 1 = I ∑ τ = = H J I ⋅ ⋅</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>NO.</head><formula xml:id="formula_18">V 0 V 1 V 2 V 3 TETRAHEDRA (VERTEX LIST) 0 - - - - {} 1 - - - + { {v 4 , v 7 , v 8 , v 3 } } 2 - - + + { {v 8 , v 5 , v 6 , v 2 }, {v 5 , v 8 , v 7 , v 3 }, {v 8 , v 5 , v 2 , v 3 } } 3 - + + + { {v 7 , v 5 , v 9 , v 2 }, {v 3 , v 1 , v 2 , v 7 }, {v 7 , v 2 , v 9 , v 1 } } 4 + + + + { {v 0 , v 1 , v 2 , v</formula><p>A set of 3D isosurface reconstructions is presented in <ref type="figure" target="#fig_0">Fig. 19</ref>. Here a voxels subset of the CT-VHD ( <ref type="figure" target="#fig_1">Fig. 20a</ref>) was decomposed, compressed and tetrahedralized adaptively to obtain a fraction of the skull surface. We fixed the parameters to and achieved a compression gain of 1:15 at 20 bits. In this picture our method is compared to a standard marching cubes technique and to a trilinear interpolating marching tetrahedron, as included in the libraries of AVS/Express 3.0. Again, the higher order interpolation provided by the cubics smooths out most artifacts striking in the reconstruction of <ref type="figure" target="#fig_0">Fig. 19c</ref>, where continuity is lost and the surface "breaks up". Moreover, we avoid even some of the "voxel-like" artifacts of the marching cubes reconstruction shown in <ref type="figure" target="#fig_0">Fig. 19b</ref>.</p><p>Reconstructions of interior and exterior volumes from the same data set are depicted in <ref type="figure" target="#fig_1">Fig. 20b</ref> and <ref type="figure" target="#fig_1">Fig. 20c</ref>. We observe that our point removal strategy keeps the tetrahedra dense in those regions, where the underlying volume features high spatial frequencies. The adaptive tetrahedralizations were computed using the look-up table extensions proposed in Section 5.2. This allows one to extract anatomic substructures for further processing, such as FEM. Finally, the computing times of some of the examples are listed in <ref type="table" target="#tab_5">Table 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSION AND FUTURE WORK</head><p>We presented a versatile framework for multiresolution compression and reconstruction of non-parametric, parametric and implicit data which bases on wavelet approximations. Although being restricted to uniform grids the scheme handles many real world data types and features numerous advantageous properties, such as both lossless and lossy compression or progressive and selective mesh refinement. However the current implementation only supports channelwise progressive mesh refinement. Hence, future research activities have to comprise the development of a true "coefficient-wise" progressive mesh refinement procedure, which improves the approximation as data comes in. The extension of the framework toward nonuniform sample grids is still interesting, in spite of the fact that appropriate WTs have already been introduced to the community <ref type="bibr" target="#b2">[3]</ref>. In addition the inclusion of 2D and 3D texture compression and reconstruction is an important issue for ongoing investigations.     </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Illustration of situations arising from visual inspection of data sets: a) 2D nonparametric surface. b) 2D parametric surface. c) 3D implicit isosurface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>L 2</head><label>2</label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Illustration of the conceptual components of our compression and reconstruction framework embedded into a client-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Linear time decomposition and reconstruction pyramids for cardinal B-spline wavelet transforms a) decomposition. b) reconstruction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Illustration of the conditional approximation error increment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Illustration of the effect of a local oracle on a triangulated image. a) Initial triangulation. b), c) Local oracle is centered at the upper and central area of the triangulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>•</head><label></label><figDesc>Symbols 0 -30: First element of a 2-tuple minus 1 • Symbol 31: 'EOB' (End Of Bitstream) • Symbols 32 -63:Runlength of 'zero'-coefficients</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Compression pipeline including both lossless and lossy data compression. For decompression, all of the above steps have to be reversed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Conversion of the multidimensional array into a 1D coefficient vector depicted for a 2D WT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Example of encoding a sequence of coefficients and the resulting bitstream.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>Compression of a B-spline surface with different quantizations. No additional point removal is performed ( ). Some triangles degenerate due to quantization. a) 50% coefficients, 23 bit quantization, compression gain 1:1.33. b) 10 bit, 1:4. c) 7 bit, 1:5. d) 5 bit, 1:10. (Data source: Courtesy Advanced Visual System Inc.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :Figure 11 :</head><label>1011</label><figDesc>Illustration of constraints in a digital terrain data set. a) Interactive specification of the constraint path. b) Mesh after constraint insertion. (Data source: Courtesy Bundesamt für Landestopographie, Bern, Switzerland) Data format of the bitstream for constraint compression. The individual header formats are given in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 :</head><label>12</label><figDesc>a) Recursive algorithm assuming a smooth representation of the underlying curve: a) P 2 has largest vertical distance. b) new approximation after insertion of P 2 . c) example for vertical distance measure. d) final result.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 13 :</head><label>13</label><figDesc>Extension towards multiple dimensions exemplified for nonparametric data: 2D version. The underlying B-spline patch is outlined in bold. A new vertex is inserted at position and the distance is computed with respect to the bilinear-interpolant of .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 14 :</head><label>14</label><figDesc>Construction of a 1D tree data structure with 64 vertices and its growth during progression. The equivalent list structure is given below. a) First segment at the beginning. b) Insertion of P 29 causes split into two segments. c) Final tree after inserting all points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 15 :</head><label>15</label><figDesc>Illustration of the conceptual components for parametric compression and reconstruction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 16 :</head><label>16</label><figDesc>Polyline approximation of isolines: a) Isoline as computed by intersections with the triangle edges and look-up table to extract interior or exterior parts of the surface. b) Generation of isosurfaces and interior volumes using a marching tetrahedron algorithm: 5 basis cases arising upon triangulation. The connectivity table for generation of interior volumes is presented in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 17 :</head><label>17</label><figDesc>Compression and reconstruction of a parametric B-spline surface for different levels of linear approximation. a) , 19602 triangles (100%). b) , 43% triangles. c) , 34% triangles. d) , 22% triangles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Figure 18 :</head><label>18</label><figDesc>Extraction of isolines and interior surfaces from a digital terrain model of the Swiss Alps and progressive mesh refinement: 3 isolines are extracted for , and , respectively. a) , Wavelet channel 1, 0.1% triangles. b) Channel 3, 1.15% triangles. c) Channel 5, 5.80% triangles. d) Channel 7, 15.83% triangles. e) Standard isoline algorithm for channel 1. f) DTM split into interior and exterior regions at . g) 5% coeff., compression gain 1:33, , 62% triangles. h) 1% coeff., compression gain 1:100, , 62% triangles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure 19 :</head><label>19</label><figDesc>Extraction of isosurfaces volume data. Isovalue (skull). a) Our method, 20% coefficients, , 124,343 tetrahedrons, compression gain 1:15. 51,970 triangles b) Marching Cubes, same compression settings, 540,800 cells, 40,522 triangles. c) Marching Tetrahedron (as provided by AVS/Express 3.0), same settings as a). Data source: Visible Human Project. Courtesy National Library of Medicine.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Figure 20 :</head><label>20</label><figDesc>Extraction of interior and exterior volumes. a) Initial CT volume data set with 2,704,000 tetrahedrons. b) Interior and exterior volumes, (skin surface), 133,091+ 34,290 tetrahedrons. c) Interior volume, (skull), 124,491 tetrahedrons.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>8 BIT QUANT. 16 BIT QUANT. CPU (IN S) 50% COEFF. (IN KB) 10% COEFF. (IN KB) 50% COEFF. (IN KB) 10% COEFF. (IN KB)</head><label></label><figDesc></figDesc><table><row><cell>Wavelet Coefficients</cell><cell cols="2">0.037 0.147</cell><cell cols="2">0.000 0.000</cell><cell>0.000</cell><cell>0.439</cell></row><row><cell>(256 bits)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Quantization</cell><cell>76</cell><cell>301</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>899</cell></row><row><cell>with 12 bits</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>2-tuples</cell><cell cols="2">(7,76) (9,301)</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>(10,899)</cell></row><row><cell>Bitstream</cell><cell cols="6">1011 0001100 11 000101101 100010 1011 0111101</cell></row><row><cell cols="2">Huffman symbol</cell><cell cols="2">value</cell><cell cols="3">'zero' Huffman symbol</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>:</cell></row><row><cell>128x64x64 voxels).</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>ENCODE</cell><cell>568</cell><cell cols="2">245</cell><cell>1,835</cell><cell></cell><cell>466</cell><cell>2</cell></row><row><cell>ZIP</cell><cell>618</cell><cell cols="2">290</cell><cell>2,399</cell><cell></cell><cell>660</cell><cell>5</cell></row><row><cell>ARC</cell><cell>711</cell><cell cols="2">300</cell><cell>2,727</cell><cell></cell><cell>764</cell><cell>13</cell></row><row><cell>URBAN</cell><cell>501</cell><cell cols="2">233</cell><cell>1,888</cell><cell></cell><cell>496</cell><cell>69</cell></row><row><cell>COMPRESS</cell><cell>533</cell><cell cols="2">253</cell><cell>2,407</cell><cell></cell><cell>607</cell><cell>3</cell></row><row><cell>UNCOMPRESSED</cell><cell>2,248</cell><cell cols="2">2,248</cell><cell>4,496</cell><cell></cell><cell>4,496</cell><cell>0</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Header formats of bitstream.</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>NAME</cell><cell>TYPE</cell><cell>DESCRIPTION</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>magic_number</cell><cell>byte</cell><cell>ASCII '67'</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>stream_size</cell><cell>integer</cell><cell>total size</cell></row><row><cell></cell><cell cols="2">GENERAL HEADER</cell><cell></cell><cell cols="2">xValues_size yValues_size info width field_dims integer[2] integer integer byte float npoints integer ndata integer</cell><cell>size of x-stream size of y-stream misc info constraint width mesh dimension # points of constraint # extracted data values</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>xFirstValue</cell><cell>float</cell><cell>first x-coordinate</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>yFirstValue</cell><cell>float</cell><cell>first y-coordinate</cell></row><row><cell>HEADER FOR</cell><cell cols="2">ARITHMETTIC</cell><cell>CODING</cell><cell>arithFirstValue maxValue minValue nIntBits huffFirstValue</cell><cell>float float float integer integer</cell><cell>first extracted data value maximal value minimal value multiplication factor 1 st integer value</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>iterationDepth</cell><cell>short</cell><cell>iteration depth</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>weightArr</cell><cell>float[]</cell><cell>array of weights</cell></row><row><cell cols="2">HEADER FOR</cell><cell cols="2">ENCODE</cell><cell cols="2">huffTable integer[64] quantBits short degree short minValue float maxValue float</cell><cell>Huffman-table quantization (# of bits) degree of B-spline bases minimum coefficient value maximum coefficient value</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>nDim</cell><cell>short</cell><cell># of dimensions</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>dimArr</cell><cell>short[]</cell><cell>dimension array</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Connectivity table for generation of interior volumes (seeFig.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 4 :</head><label>4</label><figDesc>Computing times for various steps of our compression and reconstruction framework.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">ACKNOWLEDGMENT</head><p>This research was supported in parts by the ETH research council under grant No. 41-2642.5. We are grateful to the Bundesamt für Landestopographie, Bern, Switzerland, for the digital terrain data and to the NLM for providing the VHD set. Our special thanks to R. Kisseleff, U. Hengartner, J.-P. Hofstetter, and P. Ruser for implementing parts of the framework.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Qhull</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Huhdanpaa</surname></persName>
		</author>
		<ptr target="http://www.geom.umn.edu/locate/qhull" />
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An implicit surface polygonizer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Gems IV</title>
		<editor>P. Heckbert</editor>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="324" to="349" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Spline prewavelets for nonuniform knots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Buhmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Micchelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Numerische Mathematik</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="455" to="474" />
			<date type="published" when="1992-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">An Introduction to Wavelets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chui</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Geometry compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Deering</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GRAPH 95 Conference Proceedings, Annual Conference Series</title>
		<editor>R. Cook</editor>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="6" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Algorithms for the reduction of the number of points required to present a digitized line or its caricature</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Douglas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peucker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Canadian Cartographer</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="112" to="122" />
			<date type="published" when="1973-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Multiresolution analysis of arbitrary meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lounsbery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 95 Conference Proceedings, Annual Conference Series</title>
		<editor>R. Cook</editor>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="6" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Wavelet radiosity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Gortler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schroder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings, Annual Conference Series</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="221" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">L 2 optimal oracles and compression strategies for semiorthogonal wavelets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
		<ptr target="http://www.inf.ethz.ch/publications/tr200.html" />
	</analytic>
	<monogr>
		<title level="j">Technical Report</title>
		<imprint>
			<biblScope unit="volume">254</biblScope>
			<date type="published" when="1996" />
		</imprint>
		<respStmt>
			<orgName>Computer Science Department, ETH Zürich</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Efficient triangular surface approximations using wavelts and quadtree data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">G</forename><surname>Staadt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gatti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="130" to="143" />
			<date type="published" when="1996-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Survey of polygonal surface simplification algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<ptr target="http://www.cs.cmu.edu/~ph" />
	</analytic>
	<monogr>
		<title level="j">Carnegie Mellon U</title>
		<imprint/>
		<respStmt>
			<orgName>CS Dept.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;96 Proceedings)</title>
		<editor>H. Rushmeier</editor>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Simulationg facial surgery using finite element models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Koch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">R</forename><surname>Carls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Büren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fankhauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">I H</forename><surname>Parish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;96 Proceedings)</title>
		<editor>H. Rushmeier</editor>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="421" to="428" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Real-time, continuous level of detail rendering of height fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">F</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIG-GRAPH &apos;96 Proceedings)</title>
		<editor>H. Rushmeier</editor>
		<imprint>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Multiresolution Analysis for Surfaces of Arbitrary Topological Type</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Lounsbery</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<pubPlace>Seattle</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Washington</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Progressive simplicial complexes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Popovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;97 Proceedings)</title>
		<imprint>
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">P</forename><surname>Preparata</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">I</forename><surname>Shamos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<date type="published" when="1985" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Decomposition and reconstruction algorithms for spline wavelets on a bounded inverval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Quak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Weyrich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Applied and Computational Harmonic Analysis</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="217" to="231" />
			<date type="published" when="1994-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Introduction to Data Compression. Morgan Kaufmann</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sayood</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<pubPlace>San Francisco</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Wavelets for Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Stollnitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Salesin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<publisher>Morgan Kaufmann Publishers, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Wavelets for computer graphics: A primer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Stollnitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="75" to="85" />
			<date type="published" when="1995-05" />
		</imprint>
	</monogr>
	<note>part 1) and</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Fast b-spline transforms for continous image representation and interpolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Unser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aldroubi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="277" to="285" />
			<date type="published" when="1991-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The jpeg still picture compression standard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K</forename><surname>Wallace</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="30" to="44" />
			<date type="published" when="1991-04" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
