<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Principal Stream Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenli</forename><surname>Cai</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pheng-Ann</forename><surname>Heng</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Fraunhofer Institute for Computer Graphics</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Dept. of Computer Science &amp; Engineering</orgName>
								<orgName type="institution">The Chinese University of Hong</orgName>
								<address>
									<settlement>Kong</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Principal Stream Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image generation; I.4.3 [Image Processing]: Enhancement flow field</term>
					<term>visualization</term>
					<term>volume rendering</term>
					<term>filtering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>The use of stream surfaces and streamlines is well established in vector visualization. However, the proper placement of starting points is critical for these constructs to clearly illustrate the flow topology. In this paper, we present the principal stream surface algorithm, which automatically generates stream surfaces that properly depict the topology of an irrotational flow. For each velocity point in the fluid field, construct normal to the principal stream surface through the point. The set of all such normal vectors is used to construct the principal stream function, which is a scalar field describing the direction of velocity in the fluid field. Volume rendering can then be used to visualize the principal stream function, which is directly related to flow topology. Thus, topology in a fluid field can be easily modeled and rendered.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The generation of stream surface <ref type="bibr" target="#b6">[7]</ref> and streamline <ref type="bibr" target="#b3">[4]</ref>, as well as particle tracing <ref type="bibr" target="#b16">[17]</ref> and probes <ref type="bibr" target="#b14">[15]</ref> are well known techniques for vector visualization, and there are many papers devoted to the subject (see, for example, <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b8">9]</ref>). A drawback of using stream surfaces and lines is that starting points need to be selected carefully; only certain starting points will trace out stream surfaces that properly describe flow topology. Determining such starting points is very difficult, particularly when dealing with unknown fluid fields. A recent paper <ref type="bibr" target="#b11">[12]</ref> discusses an effective method (using an energy function) for addressing this problem in two dimensions.</p><p>Several methods have been proposed to visualize the flow topology without tracking stream surfaces from starting points, to avoid the selection of starting points placements. Helman and Hesslink <ref type="bibr" target="#b5">[6]</ref> attempted to extract the topology of the fluid field directly using 'separation surfaces', modeled with stream surfaces tracked from critical points. But the construction of such surfaces is neither easy nor fully automatic. Another way to view flow topology is using texture mapping, including the linear integral convolution (LIC) method of Cabral and Leedom <ref type="bibr" target="#b1">[2]</ref> and the spot noise <ref type="bibr" target="#b12">[13]</ref> method of van Wijk. Applying textures to depict flow orientation is very useful in 2D fields, but not nearly as successful in three dimensions. We have attempted to expand the texture method to 3D fluid fields using 3D linear integral convolutions and volume rendering, but as shown in <ref type="figure" target="#fig_0">Figure 1</ref>, the results are not very good; too many details obscure the flow topology.</p><p>The concept of a stream function <ref type="bibr" target="#b15">[16]</ref> is a fundamental concept in computational fluid dynamics (CFD). In a 2D fluid field, streamlines correspond to lines of constant C = X , where is the stream function. In a 3D fluid field, the constant C corresponds to wcal@igd.fhg.de y pheng@cse.cuhk.edu.hk  <ref type="bibr" target="#b7">[8]</ref> first applied stream function to streamline tracking, and Van Wijk followed with an 'implicit stream surface' way to calculate stream function distributions by simulating the process of placing 'ink' on the inlet of the fluid field. All points in the fluid field are tracked backward to the inlet and the value at the corresponding inlet point is assigned to the tracked point. But the evaluation of a stream function on the inlet boundary and the detection of the inlet boundary are very difficult especially for unknown fluid field. Thus, the difficult problem with implicit stream surfaces is similar to the placement of starting points, due to the fact that it relies on tracking in preprocessing. However, the implicit stream surface introduces a new method to model stream surface and a general way to visualize flow topology directly, using the stream function and volume rendering instead of tracking. Fruhauf <ref type="bibr" target="#b4">[5]</ref> proposes a raycasting method for direct rendering of vector fields; his work focused on streamline shading. He proposed a view-dependent stream-line computing method for illuminating streamlines. The rendering result is sensitive to view direction and light direction.</p><p>There is only one streamline passing through any particular velocity point in a fluid field, but infinitely stream surfaces that contain it. How may we determine which ones provide the most useful information about flow topology? As illustrated in <ref type="figure" target="#fig_1">Figure 2</ref> about a cylindrical flow along the Z axis, we intuitively prefer certain surfaces to others. For example, most people would choose Surface1 over Surface2 or Surface3, to indicate the flow past point P. We would like to depict the flow topology using stream surfaces that show the flow motion to the greatest extent, that is, we care about the changing of velocity more than the velocity itself. Surface1 is, in fact, tangent to rectifying planes in the Frenet frame at all passing points. We refer to this kind of stream surface as a principal stream surface. The following section describes a way to automatically model the principal stream surface, in order to view flow topology. Briefly, the principal normal vectors in the Frenet frame are used to calculate the principal stream function (the stream function of the principal stream surface). Since these normal vectors constitute, by definition, the gradient of the principal stream function, it is straightforward to construct the scalar field of the principal stream function from them. The process is similar to the reconstruction of a potential field and only a single reference point is required. After the principal stream function is generated, the flow topology can be visualized directly with volume rendering <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b2">3]</ref> or other iso-surface extraction methods <ref type="bibr" target="#b10">[11]</ref>.</p><p>The next section talks about concepts related to principal stream surfaces and functions. We follow with an algorithm to calculate the principal stream function, and finally a discussion of the implementation and experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Concepts</head><p>In a Frenet frame, two tangent planes passing point P are chosen: the osculating plane and the rectifying plane ( <ref type="figure" target="#fig_2">Figure 3</ref>). These two planes form a basis (via linear combination) for any other tangent plane. The normals of the osculating plane and rectifying plane are, respectively, B and N </p><formula xml:id="formula_0">B = V A jV Aj ; N = B V (1)</formula><p>where V is the first-order derivative of curve L at point P, and A is the second-order derivative. If L is thought of as an integral curve in the velocity field, that is, the unique streamline passing point P, then V is the velocity vector and A is the acceleration.</p><p>The osculating and rectifying planes are tangent to different stream surfaces at point P. The osculating plane is the nearest tangent plane to L, and the rectifying plane is the farthest (where nearest and farthest refer to the high order infinitesimal distance). These two planes show different attributes of the velocity at that point; the osculating plane depicts the velocity itself whereas the rectifying plane depicts more information about the changing of the velocity nearby. Other stream surfaces passing through P can be expressed as linear combinations of these two extreme cases.</p><p>The placement of stream surfaces passing through P is determined by their starting points. The most meaningful stream surface is the one that depicts the local topology, that is, the primary direction of velocity and its nearby rate of change. The integral curve L lies within the osculating plane, the tangent line to L lies within the intersection of these two planes, and the normal vector to L lies along the direction of curvature of the streamline which is the direction of the changing of the velocity.</p><p>As shown in <ref type="figure" target="#fig_1">Figure 2</ref>, plane X Ybased on the origin gives no hint about the 3D flow topology although it is a stream surface, since no fluid flows across the X Yplane. Plane X Yis therefore a typical osculating plane. Surfaces similar to Surface1 are more helpful in viewing the flow topology, because it depicts the flow topology more clearly than other stream surfaces.</p><p>Definition 1 A principal stream surface is a stream surface whose tangent planes are the rectifying planes of the streamlines within it. The normal of each point on the principal stream surface has the same direction as the streamline's principal normal vector, and its magnitude is defined to be the magnitude of velocity at that point.</p><p>In a 3D fluid field, a stream surface is defined as the set of all points for which a particular stream function is a constant. The velocity at any point is the crossproduct of two stream functions (generated by the intersection of two stream surfaces): see <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b13">14]</ref>. In the Frenet frame,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V = N B</head><p>(2)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2</head><p>The principal stream function is the stream function of the principal stream surface, and its gradient is the normal of the principal stream surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Existence of Principal Stream Function</head><p>The relationship between the velocity field V u; v; w and two stream functions f;g at a point is <ref type="bibr" target="#b15">[16]</ref>:</p><formula xml:id="formula_1">pV = 5f 5 g</formula><p>where p is the density value at that point. For an incompressible flow, p is a constant. According to the conservation of mass, 5pV = 5 5 f 5 g = 0 f and g must satisfy V 5 f = ufx + vfy+wfz = 0 V 5 g = ugx + vgy+wgz= 0</p><p>The constant surfaces of f and g are stream surfaces in the field. There exist a global f and a global g in the whole velocity field, but normally it is difficult to represent f and g as some elementary functions.</p><p>The principal stream function field can also be expressed as a function of f and g. Since f and g exist globally, the total differential of rectifying planes of the field can be expressed as the composite function of 5f and 5g. Thus, the principal field is integrable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Principal Stream Surface</head><p>In order to model the principal stream surface, we must first compute its normals, the gradients of the corresponding principal stream function. Based on the gradient and a reference point, the principal stream function (a scalar field) can be constructed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Normal of a Principal Stream Surface</head><p>According to Def. (1) and Eq. (1), the second-order derivative of streamline at point P is:</p><formula xml:id="formula_2">A = dV dl = V P+ , V P, 4l<label>(3)</label></formula><p>where P+; P , are, respectively, the previous and next discretized points on the streamline, parametrically separated from P by distance 4t.</p><p>Using the fixed Euler algorithm for ordinary differential equations, we specify:</p><formula xml:id="formula_3">P+ = P + V + V+ 2 4 t; P, = P , V, + V 2 4 t; V+ = V P + V 4 t ; V , = V P , V 4 t (4)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 4: Normal of Principal Stream Surface</head><p>We define 4l as the absolute distance between P+ and P, along the streamline, and approximate it as:</p><formula xml:id="formula_4">4l = V + V+ 2 4 t + V + V , 2 4 t = V 4 t + V + + V , 2 4 t<label>(5)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Construction of a Principal Stream Function</head><p>By finding a normal to the principal stream surface, we find (up to a scalar multiplier field) the gradient of the principal stream function.</p><p>Since the stream function is a scalar field, calculating the principal stream function is similar to reconstructing a potential field from its gradients at grid points. The gradient of the principal stream function is assigned, by definition, the same magnitude as the fluid velocity at any point (see <ref type="bibr" target="#b15">[16]</ref> for a similar process in 2D). Similarly, the magnitude of second-order derivatives of the principal stream function equals the second-order derivatives of the velocity field.</p><p>The Taylor expansion of the stream function around point P along a line is (this line is not the streamline, but a step along the construction direction):</p><p>FP +4P = F P + F 0 P 4 P + 1 2! F 00 P4P 2 + (6)</p><p>where F 0 P is the gradient of the stream function at point P, and F 00 P is its Hessian matrix.</p><p>Equation <ref type="formula">6</ref>allows us to calculate the principal stream function: the only problem is finding a reference point for the fluid field. For simplicity, we select the first point t = 0 of the principal stream function as the reference point, and set it equal to 0; 0; 0 in Cartesian coordinates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Outline of the Algorithm</head><p>We use only Cartesian coordinates in this paper. Each element of the fluid field is a cube with edges parallel to the three coordinate axes. The algorithm scans the whole fluid field and constructs the distribution of the principal stream function, thus generate a 3D scalar field (scan volume).</p><p>The outline of the algorithm is, for k = Z0 to Zn do for j = Y0 to Yn do for i = X0 to Xn do C = Cubei; j; k;</p><p>reconstruct velocity V f in C:</p><p>for kk= 0 to ScaleZ do for jj= 0 to ScaleY do for ii = 0 to ScaleX do P = i + ii=ScaleX; j + jj=ScaleY; k + kk=ScaleZ P P = previous point of P The reconstruction of the velocity across all the cubic elements can use 3D linear interpolation or any other accurate interpolation scheme that conforms to CFD. For the purpose of reconstruction from Eq. (6), we define the previous point P P as: P P i; j; k = 8 : F P P = 0 i = 0 ; j = 0 ; k = 0 0; 0; k , 1 i = 0 ; j = 0 ; k 6 = 0 0; j , 1 ; k i = 0 ; j 6 = 0 i , 1 ; j ; k otherwise <ref type="bibr" target="#b6">(7)</ref> Recall that F is the stream function around point P. It is important to normalize FP, thus ensuring that the principal stream function lies in the range 0:0; 1:0 , for the sake of volume rendering. On the other side, normalization is necessary for cancelling the effect of the selection of reference point and its initial value.</p><formula xml:id="formula_5">V = V</formula><p>Note that the binormal B to the osculating plane can be approximated by finding the normal to the plane defined by P, P+, and P, . Equivalently, B = V+ V, <ref type="bibr" target="#b7">(8)</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments and Discussion</head><p>The goal of our experiments is twofold, to demonstrate the principal stream surface and the principal stream function, and to develop a direct volume rendering method to display flow topology rather than using tracking.</p><p>We implemented the principal stream function construction algorithm described above, as well as a ray tracing volume renderer, and performed two experiments with steady irrotational flow: past a circular cylinder, and between two vortices. Volume rendering is done similarly to <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Stream past a Circular Cylinder</head><p>We set the center of the circular cylinder to be the line 5; 5; z , with radius a = 2 , and define r as the distance between x; y; z and 5; 5; z , is the angle between r and Xaxis: Then the velocity data is generated by Eq. 9 at the grid points (see <ref type="figure" target="#fig_1">Figure 2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Vx = U0 a 2 r 2 cos 2 , 1</head><p>Vy = U0 a 2 r 2 sin 2 Vz = 0:0 Noted that this method is fully automatic, as opposed to the implicit stream surface method in <ref type="bibr" target="#b13">[14]</ref>, in which the inlet boundary should first be detected then different source functions are assigned to all different inlets. <ref type="figure" target="#fig_3">Figure 5b</ref> shows the result of iso-surface rendering, with several surfaces generated from corresponding iso-values. The colors of these values are mapped to their stream surfaces in <ref type="figure" target="#fig_3">Figure  5c</ref>. This simple experiment demonstrates the correctness of the principal stream surface and the construction of principal stream function. It also shows the effectiveness of using principal stream surface to display the flow topology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Stream between two Vortices</head><p>The velocity of this fluid field are calculated according to the following equations: Vx = 1 2 Vortexxx ;y;z;,5:5;,5:5;,5:5 + Vortexxx ;y;z;15:0; 15:0; 15:0 Vy = 1 2 Vortexyx ;y;z;,5:5;,5:5;,5:5 + Vortexyx ;y;z;15:0; 15:0; 15:0 Vz = 1 2 Vortexzx ;y;z;,5:5;,5:5;,5:5 + Vortexzx ;y;z;15:0; 15:0; 15:0 Vortexx x;y;z;x0; y 0 ; z 0 = sym z , z0 , A 2 z , z0 x , x0 2 + y , y 0 2 + z , z 0 2</p><p>x , x 0 p x , x 0 2 + y , y 0 2 ! where Vortexyx ;y;z;x0; y 0 ; z 0 = symz , z0 , A 2 z , z0 x , x0 2 + y , y 0 2 + z , z 0 2 y , y 0 p x , x 0 2 + y , y 0 2 ! Vortexzx ;y;z;x0; y 0 ; z 0 = symz , z0</p><formula xml:id="formula_6">A 2 p x , x0 2 + y , y 0 2 x , x 0 2 + y , y 0 2 + z , z 0 2 ! symx = 1x 0 , 1 x 0<label>(10)</label></formula><p>where A = 720; x = 1 ::10; y = 1 ::10; z = 1 ::10 This equation is applied to a 101010 regular grid. <ref type="figure">Figure   6</ref> shows the volume-rendered result, using the same rainbow color mapping as in <ref type="figure" target="#fig_3">Figure 5</ref>. Transparency is set to 0:9 at all points. The value range of the principal stream function is mapped to 0 : : : 255</p><p>for the sake of volume rendering and image processing. It is easy to perform volume cutting to view the inner topology of the flow. <ref type="figure">Figure 7</ref> shows several different value ranges of principal stream function (generated from their corresponding stream function values). This is useful for visualization; the user may adjust the value range of the principal stream function until satisfied with the topology thus generated. <ref type="figure">Figure 8</ref> shows the stream surfaces directly modeled by iso-surface modeling, with two iso-values used. After a high-pass filter is applied to the principal stream function data set before volume rendering, implicit stream surfaces are enhanced as shown in <ref type="figure">Figure 9</ref>. The flow topology of the fluid field is displayed more clearly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Discussion</head><p>A particular principal stream function possesses not only one surface, but a collection of level sets, which may have more than one connected component. Physically, these stream surface components will often meet at some places outside the current domain. In <ref type="figure" target="#fig_3">Figure 5</ref>, the separation stream surfaces located at the lower part of the box will meet just below the bottom of the box, which we can directly detect from the trend of its neighbors. In <ref type="figure">Figure 7</ref>, since the two vortices belong to two different streams and their inner parts will not meet together, these results are due to the spread of stream function from their intersection region, that is, a saddle point. This phenomenon can be avoided by defining a ranking direction of stream surfaces, if the normal vector of the principal stream surface is opposite to the ranking direction we simply reverse it. Actually, in <ref type="figure" target="#fig_3">Figure 5</ref> of the first experiment, the ranking direction is used to attain the different stream surfaces along Y axis.</p><p>In <ref type="figure">Figure 7</ref>, we notice some isolated stream surfaces in <ref type="figure">Figure 7</ref>(g) and 7(h), which is the result of the saddle point in the middle of the field. Just as in the construction of a potential field, the position of reference point and its initial value have no effect on the final distribution of the stream function after normalization. Changing the reference point and its initial value has no effect on the final distribution. Changing the reference point affects only the absolute value of the principal stream function. Normalization requires that we know the minimum and maximum values of the principal stream function, and so normalization is not done until volume rendering begins.</p><p>The magnitude of the principal normal vector equals the magnitude of the velocity at any particular point, and so the length of the principal normal vector is proportional to the rate of change of the principal stream function. A region of large velocity values will possess a large range of the stream function. This means that the volume rendering must display more stream surfaces (corresponding to iso-surfaces) and thus more colors in the areas of large velocity, supplying another way to visualize velocity magnitudes from the distribution of principal stream surfaces. This is shown, for example, in the upper-right and lower-left corners of the cube in <ref type="figure">Figure 7</ref>.</p><p>Although we can construct iso-surfaces easily, as shown in <ref type="figure">Figure 8</ref>, color mapping is important in viewing the flow topology. Changing the stream function value range will change the mapping density, as specified by the user. In addition, selecting different normalization value ranges also allows the user to view dense distribution in the volume.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions and future work</head><p>The generation of principal stream surface is a new and general method for visualization of the topology of irrotational 3D flow. Its advantages include:</p><p>Flow topology is represented by principal stream surfaces.</p><p>Modeling of principal stream surfaces does not require careful placement of starting points.</p><p>The principal stream function is constructed automatically, with no user interaction.</p><p>Volume rendering can be applied directly to the visualization of flow topology.</p><p>Modeling and rendering can be implemented in an efficient and simple fashion.</p><p>The following aspects need further work:</p><p>Extending the PSS to numerically simulated data sets, such as bluntfin vector data, to construct the PSS directly from a CFP irregular grid instead of the present regular grid.</p><p>Using a multi-neighbor construction method instead of the present single-neighbor scheme, to increase the stability of construction.</p><p>Determining to what extent high order terms of the Taylor expansion affect the accuracy of the principal stream function, especially near the critical point.</p><p>A more effective volume rendering method to render the topology of stream motions, including segmentation rather than thresholding to extract flow topology from the PSS.</p><p>Currently, the local velocity orientation is not as clear as the result using the linear integral convolution method.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>3D Linear Integral Convolution a set of stream surfaces and a streamline corresponds to the intersection of two stream surfaces C1 = 1 ; C 2 = 2 : Kenwright and Mallinson</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Different stream surfaces passing Point P around a cylindrical flow</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Frenet Frame</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5</head><label>5</label><figDesc>shows the results of two volume renderings. The stream is flowing from left to right in both cases. Figure 5a shows the distribution of the principal stream function; color is mapped as a rainbow from 0::255 . Different principal stream surfaces have different colors, due to the different principal stream function values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>A flow field passing through a circular cylinder. (a) Principal Stream Function (b) Principal Stream Surfaces (c) Color mapped of (b) Volume rendering of the Principal Stream Function of Eq.(10) (a) rotate X = 15, Y = 60 (b)rotate 15, Y = -120 (c, d) volume cutting of (a,b) respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :Figure 8 :Figure 9 :</head><label>789</label><figDesc>The Principal Stream Function distribution in different value range (a) [165, 255] (b) [100, 165] (c) [90, 100] (d) [80, 90] (e) [50, 60] (f) [40, 50] (g) [30, 40] (h) [0, 30] Principal Stream Surfaces, yellow surface iso value = 78, red surface iso value = 95 Application of high-pass filter to enhance the principal stream function</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We are grateful to Prof. Tim Poston of Institute of Systems Science, National University of Singapore and Mr. Zeba Kimmel for their careful proofreading and helpful suggestions. Thanks also to the reviewers for their valuable suggestions and careful review. This work was supported by the CUHK UGC Research Grant Direct Allocation Program.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Sources of Error In The Graphical Analysis Of CFD Results</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Imaging Vector Fields Using Line Integral Convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH 93</title>
		<editor>Steve Cunningham</editor>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="1069" to="529" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanaran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 88 Conference Proceedings)</title>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1988" />
			<biblScope unit="page" from="65" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Computer Graphics Programs For Streamline Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eliasson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oppelstrup</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stream3d</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advanced Engineering Software</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="162" to="168" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Raycasting Vector Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fruhauf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;96</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="115" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Visualization Of Vector Field Topology In Fluid Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hemman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesslink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Application</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Constructing Stream Surfaces In Steady 3D Vector Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hultquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;92</title>
		<editor>Arie E. Kaufman and Gregory M. Nielson</editor>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1992-10" />
			<biblScope unit="page" from="0" to="8186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A 3D Streamline Tracking Algorithm Using Dual Stream Function</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kenwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mallinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;92</title>
		<editor>Arie E. Kaufman and Gregory M. Nielson</editor>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1992-10" />
			<biblScope unit="page" from="0" to="8186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Stable And Accurate Convective Modeling Procedure Based On A Quadratic Upstream Interpolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Leonard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Methods in Applied Mechanics and Engineering</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Display Of Surface From Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Application</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
		<idno>No. 0097-8930</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 87 Conference Proceedings)</title>
		<editor>Maureen C. Stone</editor>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Imaged-Guided Streamline Placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bank</surname></persName>
		</author>
		<idno>0-201-94800-1</idno>
		<editor>Holly Rushmeier</editor>
		<imprint>
			<date type="published" when="1996" />
			<publisher>ACM SIGGRAPH</publisher>
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="page" from="453" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Spot Noise Texture Synthesis For Data Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 91 Conference Proceedings)</title>
		<editor>Thomas W. Sederberg</editor>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="309" to="318" />
		</imprint>
	</monogr>
	<note>ISBN 0-201-56291-X</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Implicit Stream Surface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<idno>0-8186-3940-7</idno>
	</analytic>
	<monogr>
		<title level="m">Greory M. Nielson and Dan Bergeron</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1993-10" />
			<biblScope unit="page" from="245" to="252" />
		</imprint>
	</monogr>
	<note>IEEE Visualization &apos;93</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Three Ways To Show 3D Fluid Flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>De Leeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Application</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="33" to="39" />
			<date type="published" when="1994-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Fluid Mechanism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">S</forename><surname>Yih</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1969" />
			<pubPlace>New York McGraw-Hill</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">An Algorithm For Tracking Fluid Particles In Numerical Simulation Of Homogenous Turbulence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Yueng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pope</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Physics</title>
		<imprint>
			<biblScope unit="page">79</biblScope>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
