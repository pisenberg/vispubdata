<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Interval Volume Tetrahedrization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
							<email>nielson|jsung@asu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science</orgName>
								<orgName type="institution">Arizona State University Tempe</orgName>
								<address>
									<postCode>85287-5406</postCode>
									<region>AZ</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junwon</forename><surname>Sung</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science</orgName>
								<orgName type="institution">Arizona State University Tempe</orgName>
								<address>
									<postCode>85287-5406</postCode>
									<region>AZ</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Interval Volume Tetrahedrization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The interval volume is a generalization of the isosurface commonly associated with the marching cubes algorithm. Based upon samples at the locations of a 3D rectilinear grid, the mc algorithm produces a triangular approximation to the surface defined by c z y x F = ) , , <ref type="bibr">(</ref> . The interval volume is defined by</p><formula xml:id="formula_0">β α ≤ ≤ ) , , ( z y x F</formula><p>. We describe an algorithm for computing a tetrahedrization of a polyhedral approximation to the interval volume.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>In this paper we describe an algorithm for computing a tetrahedrization of an interval volume. The interval volume is a generalization of the isosurface commonly associated with the marching cubes algorithm (see <ref type="bibr" target="#b3">[4]</ref> . We describe an algorithm for computing a tetrahedrization of a polyhedral approximation to the interval volume. The uses and benefits of the interval volume have been delineated rather well in earlier papers on this subject (see Guo <ref type="bibr" target="#b2">[3]</ref> and Fujishiro, Maeda and Sato <ref type="bibr" target="#b1">[2]</ref>) and so we will not repeat them here. The algorithm of Guo <ref type="bibr" target="#b2">[3]</ref> is based on the alpha shapes of Edelsbrunner and Mucke <ref type="bibr" target="#b0">[1]</ref>. The algorithm of Fujishiro, Maeda and Sato <ref type="bibr" target="#b1">[2]</ref>  which are approximated by the polygon surface of the mc algorithm <ref type="bibr" target="#b3">[4]</ref> appropriately adjusted for the ambiguous cases (see Nielson and Hamann <ref type="bibr" target="#b5">[6]</ref>). For the discussion here, the two surfaces which bound the interval volume, ) (α  While it is impossible to anticipate all the application domains of algorithms for computing interval volumes, in this paper, we are primarily interested in applications where samples of the data function ) , , ( z y x F over a 3D rectilinear grid are known. This includes the typical data sets associated with MRI and CAT scans. In order to make the interval volume well defined, we make some inference about the variation of the data function,</p><formula xml:id="formula_1">) , , ( z y x F</formula><p>, over the voxel domains defined by the vertices of the rectilinear grid. Our approach is very simple and leads to a two step algorithm:</p><p>Step 1. Each voxel is decomposed into tetrahedra and F is assumed to vary linearly over each tetrahedron.</p><p>Step 2. For each tetrahedron of each voxel, the interval volume is computed and decomposed into tetrahedra.</p><p>For the first step, there are several choices for decomposing a voxel into a collection of tetrahedra. Since we require the final collection of tetrahedra to be a proper tetrahedrization of the complete interval volume it is important that this first tetrahedral decomposition step also be a tetrahedrization. This implies, among other things, that the diagonals from the tetrahedrization of one voxel to the next must match. We normally use the decomposition shown in <ref type="figure" target="#fig_2">Figure 2</ref> which leads to five tetrahedra per voxel.</p><p>The five-tetrahedron decomposition must be alternated from voxel to voxel with a rotated version of itself in order to maintain a proper tetrahedrization. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">An Algorithm for Tetrahedrizing the Interval Volume</head><p>The section is devoted to the details of the second step of our algorithm.</p><p>At this point, we assume that we have a tetrahedrization of the domain of interest and the values of the data function, F, are known at the vertices of all the tetrahedra. We extend F to the interior of each tetrahedron by assuming that it varies linearly. With this assumption, the interval volume,</p><formula xml:id="formula_2">) , ( β α F I</formula><p>, is well defined and consists of a collection of polyhedron. Our algorithm computes the interval volume tetrahedrization for each tetrahedron separately and so we need only describe the algorithm as it applies to a single tetrahedron with consideration to how the individual pieces will match up properly. The four vertices of each tetrahedron are classified according to the function value at this point. There are three possibilities. If the function value is less than or equal to α, then we call this a "white vertex" and mark it in our illustrations with an open white circle. If the function value is strictly between α and β, we call this a "gray vertex" and mark it with a gray filled circle. If the value is greater than or equal to β, then we call it a "black vertex" and mark it with a black filled circle. This classification leads to 15 distinct configurations which are all shown in <ref type="figure" target="#fig_3">Figure 3</ref>. All other cases can be rotated into one of these 15 equivalence class representers. The labels we use for these configurations are based upon a triple index indicating the number of white, gray and black vertices present. This naming convention is shown in <ref type="figure" target="#fig_4">Figure 4</ref>.  Note that all the polyhedra representing interval volumes in <ref type="figure" target="#fig_3">Figure 3</ref> have planar faces and are convex. The planarity of the interior quadrilaterals lying on the αor β-surfaces is an immediate consequence of the use of linear interpolation to compute the vertices along the edges.</p><p>We next describe how to decompose each of the interval volumes of <ref type="figure" target="#fig_3">Figure 3</ref> into tetrahedra. We first note that there are four distinct types of polyhedra, namely: Tetrahedra: Configurations: 013, 040, 310.</p><p>Prism shaped polyhedra: Configurations: 031, 022, 103, 130, 220, 301 Each of these polyhedra has six vertices, two opposing triangular faces and three planar quadrilateral faces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Crystal shaped polyhedra: Configurations: 112, 121, 211</head><p>Each of these polyhedra has eight vertices, two opposing triangular faces, two planar quadrilateral faces and two planar pentagonal faces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Cube shaped polyhedra: Configuration: 202</head><p>The polyhedra of this configuration have eight vertices and six planar quadrilateral faces.</p><p>We now describe how each of these distinct types of polyhedra can be tetrahedrized so as to lead to a global tetrahedrization of the interval volume. Since they are all convex polyhedra, there is no problem as to whether or not they can be individually tetrahedrized. (See Nielson <ref type="bibr" target="#b4">[5]</ref>.) The problem becomes interesting in trying to maintain a global tetrahedrization. Unless special provisions are made, it is possible that the tetrahedrization of a portion of the interval volume in one tetrahedra could not join with the tetrahedrization of another portion of the interval volume in a separate tetrahedra in manner that would lead to an overall tetrahedrization of the interval volume. This could happen, for example, if these two portions shared a common quadrilateral face and in one instance one diagonal is chosen and in another instance the other diagonal is chosen. See <ref type="figure">Figure 5</ref>. This eliminates the possibility of having a well-defined piecewise linear function defined over this type of decomposition. In order to circumvent this problem and have a consistent choice of edges on any of the planar faces, we use the "index connection rule." The invocation of this rule assumes that we have a total ordering on the vertices so that for any two vertices one is "&lt;" or "smaller" than the other. There are, of course, many ways to accomplish this linear ordering of the vertices. The details of how we do it for the examples presented here is given in the next section. <ref type="figure">Figure 5</ref>. The "3D cracking problem" on the right.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Index Connection Rule:</head><p>Quadrilateral: The edge consisting of the unique smallest vertex joined to its opposing vertex will be contained in the tetrahedrization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Pentagon:</head><p>Each pentagonal face has a unique vertex which is gray; that is, the function value at this vertex is between α and β. Also, it is always the case on pentagonal faces that there are two adjoining α-vertices and two adjoining β-vertices. The gray vertex and its non-neighbor α-vertex will form an edge as well as the gray vertex and its non-neighbor β-vertex. See <ref type="figure">Figure 7</ref>.  We now set out to prove how each of the different types of polyhedra (prism, crystal and cube) can be tetrahedrized and in a manner which is consistent with the edges required by the "index connection rule." Prism shaped polyhedra: Configurations 031, 022, 103, 130, 220, 301. On any prism shaped polyhedron, there are eight different possible edge connections for the three quadrilateral faces. Six of them can be "realized" by a tetrahedrization of the polyhedron while two can not. See <ref type="figure" target="#fig_6">Figure 8</ref>. The edge connections shown in the upper left and lower right are the ones that can not be realized, but these particular vertex connections would never be specified by the "index connection rule" or otherwise we would have by transitivity a contradiction to the linear ordering of the vertices. For this type of polyhedra, we can first decompose it into two pyramids and one tetrahedron and this decomposition leads to edges on the boundary of the polyhedron which are consistent with the edges specified by the "index connection rule" applied to pentagonal faces. This is shown for the three configurations, which lead to this case, in <ref type="figure" target="#fig_7">Figure 9</ref>. The "index connection rule" is now applied to the remaining quadrilateral faces of the pyramids and these are split into two tetrahedra each leading to a total of five tetrahedra decomposing a crystal shaped polyhedron. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Cube Shaped Polyhedra:</head><p>As with the other cases, we must show that the polyhedron can be tetrahedrized such that the edges imposed by the "index connection rule" are realized. Not all possible edge configurations on the faces of this hexahedron can be realized by a tetrahedrization. See Nielson <ref type="bibr" target="#b4">[5]</ref> for examples that are not realizable. But the edges imposed by the "index connection rule" are all fully realizable, as we now will show. First, let us identify the smallest vertex of this polyhedron and also the second smallest. In the figures, the smallest is marked with a "1" and the next smallest is marked with a "2". There are three cases to consider. The first is when these two special vertices are located diagonally opposite from each other. Since everyone of the eight faces contains exactly one of these two special vertices, the "index connection rule" applies and the edges on all eight faces are completely specified. Fortunately, this particular configuration of edges is fully realizable by a tetrahedrization of the cubed shaped polyhedra. The tetrahedrization consistent with these edges on the faces is shown in <ref type="figure" target="#fig_1">Figure 10</ref>. The next case is when the smallest vertex and the next smallest vertex are diagonally located on the same face. All faces except the face opposite the one containing these two special vertices has at least one of these special vertices and so the edges are determined for these faces. This leaves only two cases to consider. These two cases are illustrated in <ref type="figure" target="#fig_1">Figure 11</ref>. In the first case, shown on the left, all opposing faces have diagonal edges which are switched. This particular edge configuration can be realized with a tetrahedrization consisting of five tetrahedra as shown. The other case shown on the right is realized with the tetrahedrization shown consisting of six tetrahedra. <ref type="figure" target="#fig_1">Figure 11</ref>. The second type of case for the cube shaped polyhedron.</p><p>The third case is when the smallest vertex and the next smallest are on a common edge. In this case there are four subcases as the "index connection rule" leaves the edges on two adjoining faces undetermined. These four subcases and the realizing tetrahedrizations are shown in <ref type="figure" target="#fig_1">Figure 12</ref>. In all subcases, we have a tetrahedrization consisting of six tetrahedra. <ref type="figure" target="#fig_1">Figure 12</ref>. The third type of case for the cube shaped tetrahedron.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Implementation Considerations and Examples</head><p>Our implementation produces a tetrahedral grid rather than simply a list of the four vertices of each tetrahedron. The efficiency and benefits of a tetrahedral grid over this simpler data structure are evident for most applications.</p><p>For compactness in the following discussion, rather than the cumbersome "tetrahedral grid representing a tetrahedrization", we often use the simpler "tetrahedrization." Our definition of a tetrahedrization starts with the collection of vertices</p><formula xml:id="formula_3">N i z y x P i i i i , , 1 ), , , ( K = =</formula><p>which we assume are not collectively coplanar. We denote this collection of points by P . A tetrahedrization consists of a list of 4-tuples which we denote by ii) The interiors of any two triangles do not intersect. That is if</p><formula xml:id="formula_4">t I ijk ∈ l and t I ∈ αβγδ then φ αβγδ = ∩ ) ( Int ) ( Int T T ijkl .</formula><p>iii) The boundary of two tetrahedra can only intersect at a common triangular face. iv) The domain is the union of all tetrahedra, .</p><p>We should point out that condition iii) must hold in the strictest sense and so tetrahedra joining as shown in right side of <ref type="figure">Figure 5</ref> are not allowed. The reason for this condition (and all the others) is that we eventually wish to be able to define C 0 functions in a piecewise linear manner over the domain consisting of the union of all tetrahedra.</p><p>The tetrahedral grid data structure for representing tetrahedrizations is illustrated by the example of <ref type="figure" target="#fig_1">Figure 13</ref> where a tetrahedrization of the cube into 5 tetrahedra is shown.  <ref type="figure" target="#fig_1">Figure 13</ref>. An example which defines the tetrahedral grid data structure.</p><p>As we noted earlier, the use of the "index connection rule" requires that we have a linear ordering of the vertices. The ordering we use is based upon the lexicographic ordering of a unique naming rule. The name of a vertex is specified by vertex_name = i, j, k, X|Y|Z|XY|XZ|YZ|YX|ZX|ZY|0, α|β <ref type="bibr" target="#b0">(1)</ref> This is further illustrated in <ref type="figure" target="#fig_1">Figure 14</ref>. As the algorithm processes each tetrahedron (five per voxel) this naming scheme is used to record the tetrahedra of the interval volume for each tetrahedron. This makes it easy to invoke the "index connection rule" locally. Later we post process this tetrahedral grid into the more conventional format illustrated in <ref type="figure" target="#fig_1">Figure 13</ref> by sequentially replacing the name (pointer) as describe in equation (1) with a simple integer pointer (or one-dimensional array index). It is also interesting to note that this particular ordering eliminates the possibility of the first and second types of cases for the cube shaped polyhedra and so only the third type of case ( <ref type="figure" target="#fig_1">Figure 12</ref>  vertices. In <ref type="figure" target="#fig_1">Figure 15</ref> we show the interval volume. The α-surface is colored white and the βsurface is colored red. We have cut a section of the data away so as to show the interior of the volume. Triangular faces of the interval volume which do not lie on either the α-surface or the β-surface are colored blue. <ref type="figure" target="#fig_1">Figure 15</ref>. Display of interval volume for Example 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 2.</head><p>This next example is based upon some MRI data. The grid size is 58 64 64 × × and we have chosen the α and β values in order to try and get a volume representation of the "skin". These are taken to be 15.0 and 40.0 respectively. These values lead to <ref type="table">916  ,  454  tetrahedra and  711  ,  147</ref> vertices. A rendering of the interval for this example is shown in <ref type="figure" target="#fig_1">Figure 16</ref>. The left image is the interval volume and we see nothing more than the α-surface which has been colored white. In the right image we show a cut-away with the triangular faces not lying on an either the α-surface or the β-surface colored in blue <ref type="figure" target="#fig_1">Figure 16</ref>. Interval volume "skin" of MRI data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 3.</head><p>The next example is based upon the data function </p><formula xml:id="formula_5">= = = k j i k j i .</formula><p>The final tetrahedrization has 4,034 tetrahedra and 1,480 vertices. A picture of the interval volume is shown in <ref type="figure" target="#fig_1">Figure 17</ref>.   </p><formula xml:id="formula_6">= = = k j i k j i .</formula><p>The interval volume consists of 5,782 tetrahedra and 2,092 vertices. A rendering of the interval volume is shown in <ref type="figure" target="#fig_1">Figure  18</ref>.  </p><formula xml:id="formula_7">= = = k j i k j i .</formula><p>The tetrahedrization has 8,500 tetrahedra and 3,224 vertices. A rendering of the interval volume is shown in <ref type="figure" target="#fig_1">Figure 19</ref>.  In this example, we have also included a wire frame renderings so that the tetrahedrization is apparent.</p><p>It is interesting to note the frequency of the various configurations. In <ref type="figure" target="#fig_1">Figure 21</ref>, we show the statistics for the frequency of occurrence of these configurations for the six examples we have discussed here. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Remarks</head><p>1 While our primary attention for application data sets has been rectilinear grids, for the most part, our algorithm works for any tetrahedrization of a domain. This includes tetrahedrized 3D curvilinear grids and scattered volumetric data sets.</p><p>2. Some readers may wonder why we did not use the Delaunay tetrahedrization of the convex polyhedra of Step 2 since a Delaunay tetrahedrization would lead to a two-dimensional Delaunay choice on the common faces and therefore guarantee a matching across common faces. The problem here is to properly and efficiently deal with the neutral and near neutral cases which are far from uncommon in the applications that we have discussed here.      </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>as the α-surface and the β-surface respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 .</head><label>1</label><figDesc>Tetrahedrization of the Interval Volume.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Steps of the Interval Volume Tetrahedrization Algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>The fifteen distinct configurations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>Method of labeling the configurations</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .Figure 7 .</head><label>67</label><figDesc>Index connection rule applied to quadrilateral. Index connection rule applied to pentagonal face.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 .</head><label>8</label><figDesc>The eight possible edge configurations for the quadrilateral faces of the prism shaped polyhedron. Crystal Shaped Polyhedra: Configurations: 121, 112, 211.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 .</head><label>9</label><figDesc>Decomposition of Crystal shaped polyhedra into a tetrahedron and two pyramids.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 .</head><label>10</label><figDesc>The first type of case for the cube shaped polyhedron.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>Figure 14. Vertex naming scheme.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 17 .</head><label>17</label><figDesc>Interval volume for Example 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 18 .. 5 .</head><label>185</label><figDesc>Interval Volume of Example 4Example This example is based upon the spherical data function</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 19 .</head><label>19</label><figDesc>Interval Volume of Example 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 20 .</head><label>20</label><figDesc>Interval Volume of Example 6. Shaded and wire frame renderings.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 21 .</head><label>21</label><figDesc>Frequency of occurrence of configurations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Figure 15 .</head><label>15</label><figDesc>Display of interval volume for Example 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 16 .</head><label>16</label><figDesc>Interval volume "skin" of MRI data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 17 .</head><label>17</label><figDesc>Interval volume for Example 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Figure 20 .</head><label>20</label><figDesc>Interval volume for Example 6. Shaded and wire frame renderings.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure 18 .</head><label>18</label><figDesc>Interval volume for Example 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Figure 19 .</head><label>19</label><figDesc>Interval volume for Example 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>3D rectilinear grid. Given a threshold value, c , the mc algorithm produces a triangulated approximation to</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="4">). It is assumed that a</cell></row><row><cell cols="3">trivariate function</cell><cell></cell><cell cols="2">F</cell><cell>(</cell><cell cols="2">x</cell><cell>,</cell><cell cols="2">y</cell><cell>,</cell><cell></cell><cell cols="2">z</cell><cell cols="2">)</cell><cell></cell><cell cols="9">has been sampled at domain</cell></row><row><cell>points lying on a the surface S F</cell><cell>(</cell><cell>c</cell><cell>)</cell><cell>=</cell><cell cols="3">{(</cell><cell cols="2">x</cell><cell>,</cell><cell cols="2">y</cell><cell cols="2">,</cell><cell cols="2">z</cell><cell>)</cell><cell>:</cell><cell cols="2">F</cell><cell>(</cell><cell cols="2">x</cell><cell>,</cell><cell cols="2">y</cell><cell>,</cell><cell>z</cell><cell>)</cell><cell>=</cell><cell>} c</cell><cell>. The interval</cell></row><row><cell cols="5">volume is defined as</cell><cell></cell><cell cols="2">I F</cell><cell></cell><cell cols="3">( α</cell><cell cols="2">,</cell><cell cols="3">β</cell><cell>)</cell><cell cols="2">=</cell><cell cols="3">{(</cell><cell cols="2">x</cell><cell>,</cell><cell cols="2">y</cell><cell>,</cell><cell>z</cell><cell>)</cell><cell>: α</cell><cell>≤</cell><cell>F</cell><cell>(</cell><cell>x</cell><cell>,</cell><cell>y</cell><cell>,</cell><cell>z</cell><cell>)</cell><cell>≤</cell><cell>β</cell><cell>}</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We wish to acknowledge the support of the National Aeronautical and Space Administration under NASA-Ames Grant, NAG 2-990 and the support of the Office of Naval Research under Grant, ONR N00014-97-1-0243.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Three dimensional Alpha Shapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Mucke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="43" to="72" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Volumetric Data Exploration Using Interval Volume</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Maeda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Takeshima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="144" to="155" />
			<date type="published" when="1996-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Interval set: A volume rendering technique generalizing isosurface extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baining</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;95</title>
		<meeting>Visualization &apos;95</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="3" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3D surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<title level="m">Scientific Visualization: Overviews, Methodologies, and Techniques</title>
		<editor>G. M. Nielson, H. Mueller, and H. Hagen</editor>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
	<note>Tools for triangulations and tetrahedrizations</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Asymptotic Decider: Resolving the Ambiguity in Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;91</title>
		<meeting>Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="83" to="90" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
