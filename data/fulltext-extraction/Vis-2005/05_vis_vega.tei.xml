<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">High Performance Volume Splatting for Visualization of Neurovascular Data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Vega-Higuera</surname></persName>
							<email>*fernando.vega.higuera@cs.fau.de</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Neurosurgery and Computer Graphics Group</orgName>
								<orgName type="institution">University of Erlangen</orgName>
								<address>
									<settlement>Neurocenter</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hastreiter</surname></persName>
							<email>hastreiter@neurozentrum.imed.uni-erlangen.de</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Neurosurgery and Computer Graphics Group</orgName>
								<orgName type="institution">University of Erlangen</orgName>
								<address>
									<settlement>Neurocenter</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fahlbusch</surname></persName>
							<email>rudolf.fahlbusch@nch.imed.uni-erlangen.de</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Neurosurgery and Computer Graphics Group</orgName>
								<orgName type="institution">University of Erlangen</orgName>
								<address>
									<settlement>Neurocenter</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
							<email>greiner@cs.fau.de</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Neurosurgery and Computer Graphics Group</orgName>
								<orgName type="institution">University of Erlangen</orgName>
								<address>
									<settlement>Neurocenter</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">High Performance Volume Splatting for Visualization of Neurovascular Data</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation-Display algorithms-[I.3.7]: Computer Graphics-Three-Dimensional Graphics and Realism-Color</term>
					<term>shading</term>
					<term>shadowing</term>
					<term>and texture volume visualization</term>
					<term>volume splatting</term>
					<term>neurovascular structures</term>
					<term>segmented data</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: Volume splatting of neurovascular structures with CT-angiography (a,b,c) and tagged MR data (d). Between 0.75% and 1.16% of the voxels are required for visualization of the vessels. Rendering is 4 to 10 times faster than screen aligned slicing of the whole volume (512 2 × 64).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Direct volume rendering with splatting was first proposed by Westover <ref type="bibr" target="#b24">[25]</ref>. The basic idea behind this algorithm is the reconstruction of a continuous function from a sampled scalar field. 3D reconstruction kernels associated to each scalar value are pre-integrated and projected to the screen. Front-to-back or back-to-front compositing of these projected kernels (2D-footprints) produces a volume reconstruction. Zwicker et al. <ref type="bibr" target="#b25">[26]</ref> developed EWA volume splatting for anti-aliased splatting. Recently, Chen et al. <ref type="bibr" target="#b2">[3]</ref> proposed Hardware Accelerated Adaptive EWA Volume Splatting to increase the performance of volume splatting. However, this approach uses volume-aligned quads requiring four vertices per splat.</p><p>As an alternative to textured quads, graphics hardware generates screen aligned textured point primitives denoted as point sprites. Based on this functionality, Botsch et al. <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b26">27]</ref> introduced the use of point sprites for surface splatting. In addition to that, we propose the use of hardware accelerated point sprites in order to obtain high performance volume splatting. In the presented approach, proxy geometry is generated as point sprites that are placed at the center of voxels. As point sprites are screen-aligned, high quality volume reconstruction is obtained without filtering, and the inherent blurring is reduced. More importantly, point sprite coordinates are used to compute splatting kernels and per-fragment 3D-texture coordinates on the fly in the programmable stages of the graphics pipeline. Thereby, only one vertex coordinate is necessary in order to generate each splat on the GPU. Coordinates are encoded as short values which means that only 6 bytes are required per splat. Moreover, vertex shader load is reduced by a factor of four when compared to the quad based approach. Points are depth-sorted in a preprocessing step and the resulting indices are stored on the GPU. Thereby, splats are generated with correct depth-order for transparency while no data transfer between CPU and GPU occurs during rendering.</p><p>An adequate 2D transfer function (2DTF) editor was implemented in order to obtain high quality volume representations with a reduced number of voxels. In this context, our work was focused on the visualization of neurovascular structures, where typically less than 2 % of the data contributes to the visualization if Please see supplementary material on conference DVD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Visualization 2005</head><p>October 23-28, Minneapolis, MN, USA 0-7803-9462-3/05/$20.00 ©2005 IEEE.</p><p>only clinically important structures are taken into account. High quality visualizations of vessels in the vicinity of osseous tissue were produced from CT-angiography (CTA) data. A second application shows high quality volume rendering of tagged magnetic resonance (MR) data with up to four subvolumes. Both approaches require only a single rendering pass, which made it possible to obtain between 40 fps (tagged volume) and 130 fps (CTA data) using a 900 × 900 viewport. This represented a rendering rate increased by a factor between 4.4 (tagged volume) and 11.4 (CTA data), when compared with screen-aligned volume slicing. Moreover, the image quality of our technique is comparable to standard slicing for transparent renderings and superior for lit isosurfaces without filtering.</p><p>The structure of this paper is organized as follows: Related work is discussed in Section 2. The presented algorithm is described in Section 3. Section 4 comprises an overview of the techniques applied for direct volume visualization of neurovascular structures. Image quality and rendering performance are evaluated in Section 5. A comparison with volume slicing and various examples are presented. Finally, conclusions are presented in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Direct volume visualization of tomographic data was first proposed by Levoy <ref type="bibr" target="#b12">[13]</ref>. Cabral et al. <ref type="bibr" target="#b1">[2]</ref> introduced a hardware accelerated algorithm using compositing of textured geometry. View-aligned slicing approaches with 3D textures <ref type="bibr" target="#b23">[24]</ref> are usually preferred over volume aligned 2D multi-textures <ref type="bibr" target="#b18">[19]</ref> due to high memory requirements. High quality results can be obtained with a limited number of slices by pre-integration <ref type="bibr" target="#b3">[4]</ref> and high performance can be achieved on the GPU by empty space skipping combined with occlusion clipping <ref type="bibr" target="#b13">[14]</ref>. As an alternative, high performance ray casting on the GPU can be achieved applying early ray termination with empty space skipping <ref type="bibr" target="#b11">[12]</ref>. A central point of direct volume visualization is separation of tissues via transfer functions (TFs). This area has highly benefited from the use of a multidimensional basis. An intuitive and interactive interface in combination with graphics hardware <ref type="bibr" target="#b10">[11]</ref> represented a big step towards the application of multidimensional TFs in practical environments. Nevertheless, in certain cases TFs are not enough to clearly separate important structures and explicit segmentation has to be applied. High quality volume rendering of segmented data requires the determination of tag boundaries at subvoxel resolutions. Approaches based on software ray casting have successfully addressed this problem <ref type="bibr" target="#b8">[9]</ref>. On the graphics hardware side, color tables with 3D-textures for tagged volumes offer high frame rates <ref type="bibr" target="#b18">[19]</ref>. As a drawback of this approach, only pre-classification is available. This problem can be treated as an arbitrary volumetric clipping problem which has to be combined with pre-integration by adjusting the lookup table <ref type="bibr" target="#b19">[20]</ref>. However, problems arise if the segmentation volume includes more than two tags. In order to address this problem, a multi-level approach on consumer graphics hardware has been proposed <ref type="bibr" target="#b5">[6]</ref>.</p><p>In this paper, we focus on the visualization of highly sparse volume data corresponding to neurovascular structures embedded in tomographic scans. High quality volume visualization of unstructured data on the GPU has been proposed before <ref type="bibr" target="#b4">[5]</ref>. As an alternative in case of tomographic data, rectilinearity of the volume can be exploited to enhance the rendering performance. Empty space skipping based on the traversal of an orthogonal BSP tree containing the partitioned volume has been successfully applied for data where up to 52 % of the voxels contribute to the visualization <ref type="bibr" target="#b13">[14]</ref>. However, arterial structures in the brain typically correspond to less than 2 % of the voxels. In this case the computations for empty space skipping are expensive and a speed-up by a factor of only 2.76 has been reported <ref type="bibr" target="#b11">[12]</ref>. Thereby, we apply high performance volume splatting as an alternative to accelerated volume slicing.</p><p>Since the original work on splatting from Westover <ref type="bibr" target="#b24">[25]</ref>, dif-ferent approaches have been proposed in order to improve image quality, including blur reduction <ref type="bibr" target="#b14">[15]</ref>, image-aligned splatting <ref type="bibr" target="#b15">[16]</ref> and perspective accurate splatting <ref type="bibr" target="#b26">[27]</ref>. Aliasing problems were addressed by Swan and Mueller <ref type="bibr" target="#b7">[8]</ref>. More recently, Zwicker et al. developed EWA filtering and extended it for volume splatting <ref type="bibr" target="#b25">[26]</ref>. Complementary to improvements in quality, performance was enhanced with opacity based culling <ref type="bibr" target="#b15">[16]</ref>, postconvolved splatting <ref type="bibr" target="#b17">[18]</ref> and hierarchical splatting <ref type="bibr" target="#b6">[7]</ref>. In addition to that, GPU based EWA <ref type="bibr" target="#b2">[3]</ref> was presented which uses volume aligned splats and requires the specification of four vertices per splat. As an alternative to textured quads, Botsch et al. <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b26">27]</ref> proposed the use of point sprite functionality of GPUs for surface splatting. In order to achieve high quality volume splatting and considerably increased performance when compared to texture quads, we present volume splatting based on GPU generated point sprites.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">POINT SPRITE ACCELERATED VOLUME SPLATTING</head><p>Point sprite functionality of GPUs was developed to support applications such as particle systems to use point primitives instead of textured quads <ref type="bibr" target="#b20">[21]</ref>. Points in OpenGL are represented as quads centered around a vertex. Thereby, only one vertex is required for the specification of the geometry. If the point sprite extension is enabled, the application replaces the texture coordinate of the generated fragments with point sprite texture coordinates which are interpolated across the point. In this work, hardware accelerated point sprites for high performance volume splatting is presented. The reconstruction kernel is described in Section 3.1. Then, voxel classification and depth-sorting is explained in Section 3.2 followed by a description of the implementation in Section 3.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Reconstruction kernel</head><p>The main concept in volume splatting is the interpretation of 3Ddata as a cloud of particles that emit and absorb light. Integration of rays across each particle is computed to obtain the so called 2D footprint functions (splats) in the image plane. Back-to-front or front-to-back compositing of these splats produces the final 3Dreconstruction of the data. Due to their noise reducing properties and smoothness, 3D-elliptical Gaussian kernels are commonly used for representing the particles. According to Zwicker et al. <ref type="bibr" target="#b25">[26]</ref>, an elliptical Gaussian kernel centered at a point t k with a 3×3 variance matrix V can be represented as:</p><formula xml:id="formula_0">G V (t − t k ) = 1 (2π) 3 2 |V | 1 2 e − [(t−t k ) T V −1 (t−t k )] 2 .</formula><p>(1)</p><p>The reconstruction kernel in object space around a point t k denoted as r</p><formula xml:id="formula_1">k (t) = G V k (t − t k )</formula><p>is then transformed to obtain the Gaussian kernel in camera space around a point u k :</p><formula xml:id="formula_2">G V (u − u k ) = 1 |W −1 | G V k (u − u k ) ,<label>(2)</label></formula><p>where the matrix W represents the rotation and scaling parts of the viewing transformation. The variance matrix in camera coordinates V k is given by V k = WV k W T . In order to compute the 2D footprint of the Gaussian kernel, it is necessary to integrate it along the zcoordinate, as we used screen aligned splats. It is easy to verify that this results in a 2D Gaussian around a pointû k :</p><formula xml:id="formula_3">R G V k (u − u k )dz 2 = GV k (û −û k ) ,<label>(3)</label></formula><p>with the 2 × 2 variance matrixV k obtained by skipping the third row and column of V k .</p><p>In this work, screen aligned Gaussian splats are created at voxel locations, whose size is adjusted on the GPU according to the current splat position and camera perspective <ref type="bibr" target="#b16">[17]</ref>. This approximation corrects aliasing and is computationally less expensive than mapping the volume to ray space as proposed by Zwicker et al. <ref type="bibr" target="#b25">[26]</ref>. Additionally, low pass filtering was not applied in order to avoid the suppression of important tiny neurovascular structures. As a result, volume splatting was performed using equation 3, which implies a performance gain with respect to computing Jacobians of the projection matrix in the vertex shader.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Voxel classification and depth sorting</head><p>Classification of tissues in volume visualization is based on the mapping of measured intensities to colors and opacities with the use of TFs <ref type="bibr" target="#b12">[13]</ref>. Further characteristics of the data, such as the first and second directional derivatives can be taken into account in order to enhance tissue separation <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>. In this work, 2DTFs based on intensities and gradient magnitudes were applied for the classification of voxels contributing to the visualization (see <ref type="figure" target="#fig_0">Figure 2</ref>). After adjustment of the 2DTF the volume data is scanned for voxels whose opacity is non-zero. For each voxel fulfilling this criterion a vertex centered in the voxel is created. Rectilinearity of the volume data is exploited in order to compress the vertex information. Vertex coordinates are converted to short values spanning the range from 0 to 32767 (2 <ref type="bibr" target="#b14">15</ref> values, since vertex arrays in OpenGL can only be specified as signed data). These values can be converted back to object coordinates in the vertex program with two vector multiplications and one addition (see Section 8.1). The vertex data is then sent to the GPU and stored in a vertex buffer object (VBO). During rendering, vertex information is used for the generation of point primitives which have to be depth-sorted for transparency. In order to avoid data transfer between the CPU and the GPU at that stage, the grid alignment of the data was exploited. In the presented work, static points are generated over a rectilinear grid. Thereby, it is possible to approximate exact depth sorting of the proxy geometry using only a limited number of all possible viewing directions. According to this, the proxy geometry is transformed on the CPU from object coordinates to world coordinates using 8 viewing directions which correspond to the octants in 3D space (see <ref type="figure" target="#fig_0">Figure 2</ref>). For each of these directions, vertices are depth-sorted back-to-front and the resulting indices are stored in 8 VBOs on the GPU. Since neurovascular structures correspond to less than 2 % of the volume data, the classification and pre-sorting process takes less than 2 seconds for 300k splats on commodity hardware. During rendering the viewing direction that best approximates the current camera orientation is determined and the corresponding index array is used for the generation of the point primitives. Thus, after pre-processing no information is sent to the GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Splat and 3D-texture coordinate computation on the GPU</head><p>In order to obtain post-classification for each fragment, the proxygeometry has to be textured using the source data. Thereby, 3Dtextures containing the corresponding volumes are stored on the GPU and 3D-texture coordinates have to be determined per fragment. As point sprites in OpenGL are equivalent to screen aligned quads with texture coordinates (0.0, 0.0) and (1.0, 1.0) at the topleft and lower-right corner respectively (see <ref type="figure" target="#fig_1">Figure 3)</ref>, they are ideal to serve as proxy-geometry for volume splatting. On the one hand, point sprite coordinates can be used for computing the 2D footprint function and per-fragment 3D-texture coordinates on the fly, which means that no additional vertex attributes have to be transmitted to the GPU. Thus, only one vertex coordinate per splat has to be stored in the graphics memory. On the other hand, screen-aligned proxy-geometry is obtained for free. After vertices are generated for each voxel contributing to the visualization according to a 2DTF, a vertex program (see Section 8.1) computes the size of the sprite in image space. Positions of the four sprite corners in image space are determined and transformed back to object space. These transformed values are then used to compute the 3D-texture coordinates at the corners. Texture coordinates are then passed to a fragment program which uses the GPU generated point sprite coordinate to evaluate the 2D footprint function. Since point sprite coordinates define a 2D coordinate system around the voxel in image space, equation 3 is computed using the distance to the center of the point sprite which is located at (0.5, 0.5) (see <ref type="figure" target="#fig_1">Figure 3)</ref>. Analogously, the components of the point sprite coordinate are used as α and β factors for bilinear interpolation of the four 3Dtexture coordinates at the corners that were computed by the vertex program (see Section 8.2). Thus, correct per-fragment 3D-texture coordinates are obtained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Visualization framework</head><p>The presented approach is applied for the visualization of rectilinear grids that correspond to tomographic data. Initially, the source data is used to create 3D-textures according to the applied visualization approach. In case of volume visualization with 2DTFs, a RGBA texture is stored where the RA-components contain intensity and gradient magnitude. The GB-components and a second luminance texture are used to store the data normals for diffuse lighting. In case of other visualization strategies, different texture and shader combinations can be used, as the presented framework is independent of the applied visualization technique.  3). The obtained fragment opacity is convolved with the 2D footprint function which is computed on the fly. Finally, volume reconstruction is obtained by compositing using alpha blending. Additional fragment processing (e.g. illumination or tag classification) can be performed in the fragment shader without loss of generality. Overall, rendering is entirely performed on the GPU.</p><p>The storage requirements for the presented approach are equivalent to those imposed by volume slicing. A very small amount of additional graphics memory is necessary for the proxy geometry thanks to efficient data compression. Only 6 bytes per splat are stored on the graphics card in contrast to quad based approaches <ref type="bibr" target="#b2">[3]</ref> where 16 bytes are required. Moreover, vertex shader load is reduced by a factor of four, since only one vertex has to be processed instead of four quad vertices. As an additional advantage of the presented technique, screen aligned proxy-geometry avoids popping artifacts which occur in algorithms using object-alignment when the viewing direction is changed. As a drawback of the presented approach, it is vertex limited and performance drops when the number of voxels included in the visualization increases. However, we focused on highly sparse visualizations such as the reconstruction of vessels in the brain where typically less than 2 % of the voxels are involved in the 3D-reconstruction process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">DIRECT VOLUME VISUALIZATION OF BRAIN VESSELS</head><p>Direct volume visualization of vascular structures is an important strategy for diagnosis and therapy planning. In this paper, high performance visualization of vessels within the brain is presented. We aim at high quality direct volume visualization of vessels for a future integration in augmented reality systems for computer as-sisted intervention. In this section, we briefly discuss techniques that have been developed in order to address high quality visualization of neurovascular structures within CTA and tagged MR data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Visualization of aneurysms involving the skull base</head><p>Direct volume visualization is based on the solution of the radiance equation for light transport <ref type="bibr" target="#b12">[13]</ref>. Physical quantities describing the light emission and absorption are assigned to every voxel. For this process TFs that map data values to colors (emission) and opacities (absorption) are usually applied (1DTFs). Kniss et al. <ref type="bibr" target="#b10">[11]</ref> proposed an user interface for the creation of multidimensional TFs based on the interactive manipulation of widgets. In particular, visualization with 2DTFs suits remarkably well volume rendering involving CT data. Transfer functions based on intensities and gradient magnitudes demonstrated their value for the correct 3D-visualization of vascular structures within the brain using CTA data, particularly in cases of aneurysms involving the skull base <ref type="bibr" target="#b22">[23]</ref>. The measured intensities for vessels in CTA are in a region close to the data values of osseous tissues. The unambiguous separation of these structures represents an unsolvable problem for volume visualization with 1DTFs if the examined lesions are not anatomically well separated from the skull. This results from partial volume effects (see <ref type="figure" target="#fig_5">Figure 6a)</ref>. A solution to this problem is provided by subtraction CTA, where the patient is scanned with standard CT in a first step and right afterwards with CTA. Subtraction of the CT from the CTA data results in a volume containing only vessels. As a major drawback, this procedure doubles the radiation exposure for the patient. Alternatively, volume visualization with 2DTFs and standard CTA data produces unambiguous reconstructions of vascular structures.</p><p>Kniss et al. <ref type="bibr" target="#b10">[11]</ref> proposed the use of direct manipulation widgets for direct volume visualization. Based on that idea, a TF editor was developed providing a new widget that represents tissue boundaries <ref type="bibr" target="#b22">[23]</ref>. <ref type="figure" target="#fig_4">Figure 5a</ref> illustrates a typical 2D histogram obtained from CTA data. The boundaries between tissues are clearly visible as parabolic curves in the histogram. Accordingly, voxels corresponding to vessels can be easily identified and the widget can be interactively adjusted in order to fit the selected tissue boundary (see <ref type="figure" target="#fig_4">Figure 5b)</ref>. This feature plays a mayor role in the system due to the time required for applying a particular TF. Proper adjustment of the TF is achieved without requiring continuous TF updates. In this way, volume splatting with 2DTFs allows for interactive high quality visualization of complex vascular structures in the immediate proximity of osseous tissue (see <ref type="figure" target="#fig_4">Figure 5c</ref>). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Tagged volume visualization</head><p>2DTFs are very effective for the separation of tissues within medical data. Nevertheless, it is sometimes impossible to achieve a clear separation of structures without additional information. This problem can be solved by proper labeling of the data in which an object ID is assigned to every voxel based on an explicit segmentation of the target structures. However, hardware based volume rendering of tagged data shows difficulties at the boundaries between voxels with different IDs and a pre-classification approach produces strong voxelization artifacts <ref type="bibr" target="#b18">[19]</ref>. A hardware based strategy for multi-level direct volume visualization of segmented data with post-classification has been proposed <ref type="bibr" target="#b5">[6]</ref>.</p><p>In particular, the visualization of neurovascular compression syndromes (NVC) has greatly benefited from hardware accelerated volume visualization of tagged data <ref type="bibr" target="#b21">[22]</ref>. These syndromes are caused by a contact between vascular structures and the root entry or exit zone of cranial nerves, and an association with different neurological diseases has been established. In the presented work, post-classification of tagged volumes with 2DTFs in case of NVC has been implemented (see <ref type="figure" target="#fig_0">Figure 12)</ref>. The source data are labeled MR volumes with four initially segmented objects assigned to individual tags: brain stem (tag 0), cerebrospinal fluid with embedded vascular structures (tag 1), nerves (tag 2) and background (tag 3). As illustrated in <ref type="figure" target="#fig_6">Figure 7</ref>, a 3D-RGBA-texture containing intensities and gradients of the volume data and another 3D-RGBA-texture containing the coded tags are stored on the GPU. In the second texture, the tag IDs are coded as follows: if a voxel belongs to tag 0, 1.0 and 0.0 values are respectively assigned to the R and GBA parts of the corresponding texels. Analogously, if a voxel belongs to tag 1, 1.0 is assigned to the G part, while the remaining components are set to 0.0. In this way, post-classification of the four tag boundaries is reduced to four parallel problems of binary boundary determination. After trilinear interpolation of the tag-texture, the per-fragment tag distribution is obtained. A fragment program is then used to determine the tag of each fragment based on a step function centered around 0.5 (see Section 8.3). Thereby, the tag coordinate is obtained by adding the four binary decisions, where tag uniqueness is ensured by the intrinsic nature of trilinear interpolation. The tag coordinate is combined with the interpolated intensity and gradient magnitude for a lookup in a 3D-RGBA-texture, which contains four 2DTFs corresponding to the four tags. Additionally, the distance to the tag boundary is used as antialiasing factor for the opacity. Fragments at the center of the boundary are transparent. Thereby, inconsistencies for tag coordinate values of 0.5 are avoided. In this way, correct post-interpolative classification of the four subvolumes is achieved in a single rendering pass.</p><p>The vascular structures are obtained from the cerebrospinal fluid with an adequate 2DTF. Thus, tiny vessels and nerves around the brain stem are reconstructed with high accuracy. Moreover, point sprite based volume splatting allows for interactive frame rates considerably supporting diagnosis and therapy planning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>Our test system was a PC equipped with a 3 GHz Intel P-IV processor and a GeForce 6800 Ultra graphics card (256 MB RAM). <ref type="figure" target="#fig_7">Figure 8</ref> illustrates semi-transparent reconstruction of isosurfaces with screen aligned volume slicing (left) and the presented approach (right). Whereas artifacts are slice aligned for volume slicing, they are data aligned for volume splatting, since splats are created at voxel centers. This phenomenon occurs due to insufficient sampling. Artifacts can be corrected in both cases using an increased sampling rate through the volume. However, the computational complexity of the algorithm strongly grows with the number of samples. As a solution, pre-integration techniques <ref type="bibr" target="#b3">[4]</ref> for volume slicing have been proposed and its application in the context of volume splatting must be investigated in the future.   <ref type="figure" target="#fig_8">Figure 9</ref> illustrates the evaluation of the presented approach in comparison with EWA volume splatting. In this case, volume slicing produces very strong aliasing artifacts failing to produce a precise edge reconstruction (d). EWA is successful in removing aliasing artifacts. Nevertheless, sharp details are blurred because of lowpass filtering (a,c). Although the presented algorithm does not reduce aliasing as strongly as EWA does, it better preserves sharpfeatures (b,e). This aspect is illustrated in <ref type="figure" target="#fig_9">Figure 10</ref>. Sinusoids of very high frequency are incorrectly reconstructed with volume slicing (left) if the viewing direction is not axis-aligned. The splatting approach correctly reconstructs high frequency features with minimal blurring (right). Application of the presented algorithm for visualization of neurovascular structures with CTA is illustrated in <ref type="figure" target="#fig_1">Figure 13</ref>. Volume splatting (right) achieves a better reconstruction reducing aliasing artifacts in comparison to volume slicing (left).</p><p>Performance measurements were made with a 1200 × 800 viewport. The sampling rate was set to one slice per voxel along the viewing direction for volume slicing, and to one splat per voxel for volume splatting. As shown in <ref type="figure" target="#fig_10">Figure 11</ref>, the performance of the splatting algorithm is clearly superior to volume slicing. Additionally, it varies with the number of overlapping splats and as expected, the number of frames decreases when the number of voxels increases. However, this work is focused on the visualization   <ref type="table">Table 1</ref>).</p><p>of neurovascular structures where less than 2 % of the voxels contribute to the final rendering, which makes volume splatting at least 5 times faster than volume slicing. As a comparison, Krüger et al reported acceleration ratios of 2.76 for early ray termination and empty space skipping for neurovascular structures <ref type="bibr" target="#b11">[12]</ref>. <ref type="figure">Figure 1</ref>, demonstrates the advantages of the presented approach for direct volume visualization of vessels. Non-transparent voxels which are included in the visualization are very sparse. This property means a very reduced number of blending operations in comparison to volume slicing. Another important feature is the small number of fragments generated with volume splatting, which leads to a reduction of fragment shader load. This is a critical issue in volume rendering, due to the massive number of fragments to be processed. The performance of volume visualization drops exponentially as the complexity of the fragment program increases. The impact of this factor is smaller for volume splatting as can be observed in <ref type="figure" target="#fig_10">Figure 11</ref>, where acceleration ratios for diffuse lighting are higher.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS</head><p>We have presented a new approach based on point sprites and 3Dtextures for volume splatting on the GPU. It provides high performance due to the reduced number of vertex and fragments to be processed on the graphics card. Additionally, only 6 bytes per splat have to be stored in graphics memory. The developed strategy was applied for direct volume visualization of neurovascular structures, where superior image quality was obtained when compared to volume slicing. Moreover, rendering rates were up to 11 times higher with our algorithm, allowing for an application in augmented reality systems such as intraoperative stereo microscopes.</p><p>For the future, enhancements in terms of image quality are planned. This includes pre-integration <ref type="bibr" target="#b3">[4]</ref> in order to reduce ringing artifacts without increasing the number of splats. Consecutive samples at the front and back projection of each splat can be used for the lookup into the pre-integration table. In addition to this, complex filtering will be investigated aiming at a reduction of aliasing without blurring tiny details. Finally, the work will be extended to the visualization of irregular volume data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ACKNOWLEDGMENTS</head><p>This work was funded by the Deutsche Forschungsgemeinschaft in the context of projects GRK 244 and SFB 603-C9. We would like to thank Stefan Meinlschmidt for his valuable shader debugging, and Frank Enders for his work in the construction of our visualization SDK. We are also grateful to Ramin Naraghi and Bernd Tomandl for fruitful discussions and for providing the medical data. <ref type="figure" target="#fig_0">Figure 12</ref>: Volume splatting of relations between nerves and tiny vessels near the brain stem with tagged data (512 2 × 64). The visualization shows the loop at the anterior inferior cerebellar artery (AICA) compressing the facial nerve (N7). High quality renderings are obtained by per-fragment post-classification on the GPU with 2DTFs and diffuse lighting. Rendering is 4 times faster than volume slicing (40.2 FPS with a 600 × 600 viewport).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Voxels are classified with an adequate 2DTF. Proxy geometry is created for non transparent voxels. Vertices are depth-sorted using 8 predefined viewing directions (arrows) and the resulting indices are stored in corresponding VBOs (vertex buffer objects) on the GPU.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>The point sprite extension of OpenGL defines a 2Dcoordinate system with values ranging from (0.0, 0.0) to (1.0, 1.0). An elliptical Gaussian splat is computed around (0.5, 0.5). Screen aligned 2D-footprints produce a correct representation of the 3Dreconstruction kernels. 3D-texture coordinates are bilinearly interpolated using the volume texture coordinates at the four corners of the sprite and the (α, β ) fragment coordinate.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Hydrogen atom dataset (128 3 ) reconstructed with point sprite-based volume splatting: a vertex is created for each voxel contributing to the visualization. Pre-sorted indices are used for point sprite primitive generation. Point sprite texture coordinates are used for on the fly computation of texture coordinates and Gaussian splats on the GPU. A 3D-representation of two isosurfaces is obtained with 2DTFs and toon shading.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4</head><label>4</label><figDesc>illustrates the application of point sprites for highperformance volume splatting. After CPU based pre-processing (see Section 3.2), vertices and pre-sorted indices of the proxy geometry are stored on the GPU. The best sorting approximation is selected during rendering and primitives are generated with point sprite functionality. Depth testing is disabled in order to avoid errors due to the approximative depth sorting. Fragment color and opacity are determined according to the selected visualization technique in the fragment shader (see Sections 8.2 and 8.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Volume visualization of vessels within CTA. The 2D histogram of CTA data clearly reveals voxels corresponding to vessels filled with contrast medium (a). Tissue boundary shaped widgets allow clear visualization of vascular structures with 2DTFs (b). A CTA dataset (512 2 × 64) is rendered by volume splatting at 130.5 FPS with a 900 × 700 viewport (c).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Volume visualization of aneurysms of the internal carotid arteries (arrows) embedded in the skull base. 1DTFs fail to clearly separate vessels from the skull (a). 2DTFs allow for unambiguous representation of vascular structures. Volume splatting leads to improved quality and performance (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Post-interpolative 2DTFs for tagged volumes on the GPU. Source data (intensity I and gradient magnitude |∇ I |) and coded tag IDS are stored in separate 3D-textures. Four binary boundaries are parallelly determined in the fragment shader for 3D-texture lookup in the TF texture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Transparent renderings of the Boston teapot dataset (256× 256 × 178) using one sample per voxel. A two dimensional TF shows the boundary between air and material. Screen aligned slicing (left) shows the typical ring artifacts. Volume aligned ringing is visible by point splatting (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Checkerboard dataset visualization (512 2 × 4). EWA volume splatting ((a,c) from [3]) compared with volume slicing (d) and the presented approach (b,e).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Marschner/Lobb high frequencies dataset (41 3 ) represented with lit isosurfaces. Volume slicing with one sample per voxel misses details (left), while point splatting reconstructs sinusoids peaks faithfully (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Acceleration ratio (y-axis) for a texture size of 512 2 × 64 voxels based on average fps values obtained with 11 standard CTA datasets (see</figDesc></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Splats</head> <ref type="bibr">394</ref> <p>6.7 39.9 5.9 <ref type="table">Table 1</ref>: Frame rates and acceleration ratios for vessel visualization with CTA data (512 2 × 64) and 1200 × 800 viewport. <ref type="figure">Figure 13</ref>: Volume reconstruction of an aneurysm close to skull base using CTA data (512 × 512 × 64). A zoomed view using volume slicing (6.7 fps) reveals stronger aliasing artifacts (left), while splatting (47.6 fps) performs a better reconstruction (right). Both renderings where generated using a 1200 × 800 viewport.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">APPENDIX. OPENGL SHADING LANGUAGE CODE</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">High-Quality Point-Based Rendering on Modern GPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leif</forename><surname>Kobbelt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PG &apos;03: 11th Pacific Conference on Computer Graphics and Applications</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page">335</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Accelerated volume rendering and tomographic reconstruction using texture mapping hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nancy</forename><surname>Cam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Foran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Volvis</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Hardware-accelerated adaptive EWA volume splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Liu Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanspeter</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pfister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="67" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">High-quality preintegrated volume rendering using hardware-accelerated pixel shading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">High-quality unstructured volume rendering on the pc platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Guthe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Roettger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Schieber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Strasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH/EUROGRAPHICS HWWS &apos;02</title>
		<meeting><address><addrLine>Aire-la-Ville, Switzerland, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>Eurographics Association</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="119" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Highquality two-level volume rendering of segmented data sets on consumer graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Hadwiger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helwig</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="301" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Hierarchical Splatting of Scattered 4D Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Hopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Luttenberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comput. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="64" to="72" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An anti-aliasing technique for splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Edward</forename><surname>Ii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Torsten</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naeem</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roni</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="197" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Tricubic interpolation of discrete surfaces for binary volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arie</forename><surname>Kadosh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Cohen-Or</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roni</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="580" to="586" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Semi-automatic generation of transfer functions for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">W</forename><surname>Durkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Volvis</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Interactive volume rendering using multi-dimensional transfer functions and direct manipulation widgets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Kniss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="255" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Acceleration techniques for gpu-based volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruediger</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="287" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comput. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Empty Space Skipping and Occlusion Clipping for Texture-based Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arie</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="317" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Splatting without the blur</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Torsten</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="363" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">High-Quality Splatting on Rectilinear Grids with Efficient Culling of Occluded Voxels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naeem</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="116" to="134" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast perspective volume rendering with splatting by utilizing a ray-driven approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roni</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page">65</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Post-convolved splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neophytos</forename><surname>Neophytou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/EG Vissym</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="223" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Volume rendering techniques for general purpose graphical hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Rezk-Salama</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. of Erlangen-Nuremberg</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Smart hardware-accelerated volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephan</forename><surname>Röttger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Guthe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/EG Vissym</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="231" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The OpenGL Graphics System: A Specification (Version 2.0)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kurt</forename><surname>Akeley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Silicon Graphics Inc</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Smooth volume rendering of labeled medical data on consumer graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Vega-Higuera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Hastreiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramin</forename><surname>Naraghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rudolf</forename><surname>Fahlbusch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Günther</forename><surname>Greiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Medical Imaging: Visualization, Image-Guided Procedures, and Display</title>
		<imprint>
			<publisher>SPIE Press</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">5744</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Enhanced 3D-visualization of intracranial aneurysms involving the skull base</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Vega-Higuera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Natascha</forename><surname>Sauber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Tomandl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Nimsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Günther</forename><surname>Greiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Hastreiter</surname></persName>
		</author>
		<editor>MICCAI, Montreal</editor>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Efficiently using graphics hardware in volume rendering applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rüdiger</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="169" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Footprint evaluation for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Jeroen van Baar, and Markus Gross. EWA volume splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanspeter</forename><surname>Pfister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="29" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Perspective accurate splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jussi</forename><surname>Räsänen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Dachsbacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Pauly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics interface</title>
		<imprint>
			<publisher>Canadian Human-Computer Communications Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="247" to="254" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
