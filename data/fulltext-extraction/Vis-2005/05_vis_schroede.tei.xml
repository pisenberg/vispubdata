<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Framework for Visualizing Higher-Order Basis Functions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kitware</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">François</forename><surname>Bertel</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kitware</forename><surname>Mathieu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malaterre</forename><forename type="middle">‡</forename><surname>Kitware</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Thompson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sandia</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><forename type="middle">P</forename><surname>Pébay</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">¶</forename><surname>Sandia</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>O'</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bara</forename><surname>Simmetrix</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saurabh</forename><surname>Tendulkar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Simmetrix</surname></persName>
						</author>
						<title level="a" type="main">Framework for Visualizing Higher-Order Basis Functions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>finite element</term>
					<term>basis function</term>
					<term>tessellation</term>
					<term>framework</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Techniques in numerical simulation such as the finite element method depend on basis functions for approximating the geometry and variation of the solution over discrete regions of a domain. Existing visualization systems can visualize these basis functions if they are linear, or for a small set of simple non-linear bases. However, newer numerical approaches often use basis functions of elevated and mixed order or complex form; hence existing visualization systems cannot directly process them. In this paper we describe an approach that supports automatic, adaptive tessellation of general basis functions using a flexible and extensible software architecture in conjunction with an on demand, edge-based recursive subdivision algorithm. The framework supports the use of functions implemented in external simulation packages, eliminating the need to reimplement the bases within the visualization system. We demonstrate our method on several examples, and have implemented the framework in the open-source visualization system VTK.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Interpolation and approximation functions play a major role in numerical computation, simulation, and computer modeling. These basis functions take a variety of forms ranging from the linear, isoparametric shape functions found in finite element analysis to the complex non-uniform rational B-splines found in modeling and CAD applications. These functions are typically codified in small, finite subregions of a domain referred to as elements or cells. Such elements are defined by a set of maps: let R be the parametric space; each attribute, Φ : R → F may have a different type of interpolant, with geometry being a special attribute, Ξ, that has subset X ⊂ IR <ref type="bibr" target="#b2">3</ref> as its range and parametric coordinates (r, s,t). Typical bases range from continuous interpolants such as orthogonal Legendre, Hermite, or Lagrange polynomials seen in finite element models Φ( r) = A 0,0,0 + A 1,0,0 r + A 0,1,0 s + A 0,0,1 t + A 1,1,1 rst + • • • <ref type="bibr" target="#b0">(1)</ref> to piecewise tensor-product B-Spline basis functions defined by</p><formula xml:id="formula_0">Φ( r) = n i ∑ i=0 n j ∑ j=0 n k ∑ k=0 P i, j,k N p i (r)N p j (s)N p k (t)</formula><p>(2) * e-mail:will.schroeder@kitware.com † e-mail:francois.bertel@kitware.com ‡ e-mail:mathieu.malaterre@kitware.com § e-mail:dcthomp@sandia.gov ¶ e-mail:pppebay@ca.sandia.gov e-mail:obara@simmetrix.com * * e-mail:saurabh@simmetrix.com where p is the degree</p><formula xml:id="formula_1">N p (u) =    u−u u +p −u N p−1 (u) + u +p+1 −u u +p+1 −u +1 N p−1 +1 (u) p &gt; 0, u ∈ [u , u +p+1 [ 1 p = 0, u ∈ [u , u +1 [ 0 otherwise with knot values u 0 ≤ u 1 ≤ • • • ≤ u p+n +1 in IR</formula><p>(3) used by many CAD packages. The common thread among these is that a unique parameterization exists for the function. Furthermore, we require Ξ to be locally invertible over its domain so that f ( x) = Φ • Ξ −1 ( x) exists for all x ∈ X.</p><p>Despite the wide use of these basis functions, there is a surprising lack of tools for visualizing these functions directly, or in the case of numerical computation, the results data defined across the range of the basis function (e.g., variation of stress across an element). While methods for visualizing linear basis functions on simple computational domains (triangles, tetrahedra, quadrilaterals, and hexahedra) are quite common, methods for visualizing general higher-order basis functions are non-existent or require custom software solutions. The typical solution used today is to tessellate the basis functions with fixed levels of subdivision, and then visualize the resulting linear primitives. The reasons for this approach are compelling: first, existing visualization and graphics display systems are optimized for linear primitives, and second, implementing visualization algorithms applied to non-linear bases is an area of on-going research with few results thus far. Unfortunately, current approaches for tessellating basis functions introduces two significant problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Visualization 2005</head><p>October 23-28, Minneapolis, MN, USA 0-7803-9462-3/05/$20.00 ©2005 IEEE.</p><p>First, the burden of tessellating the mesh lies outside of the visualization system. Generally the simulation package must be modified to produce output compatible with the visualization system, or a separate program is used to convert the simulation output to a form the visualization system can handle. Correctly tessellating data, in a way that is compatible across boundaries of elements and that accurately captures the results, is a difficult task. Users tend to apply uniform subdivision and over-tessellate, exacerbating the large data problem, or under-tessellate, producing significant errors in the visualization. As <ref type="figure" target="#fig_0">Figure 1</ref> shows, poor tessellation can produce dramatically differing results.</p><p>Second, as alluded to in the paragraph above, there is a decided lack of integration between simulation packages and visualization systems that becomes acutely problematic as the complexity of the basis increases. Typical visualization systems reimplement selected families of interpolation functions (e.g., linear isoparametric quadrilateral element) corresponding to supported simulation packages. While this approach works well for linear or low-order bases, for more complex functions this can be extremely difficult. For example, the modern polynomial refinement method (or p-method) for finite elements employs elaborate interpolation functions that adaptively and independently vary the interpolation order on edges, faces and regions, and may even use different interpolation bases for geometry and dependent data (i.e., the element shape versus data attributes are interpolated separately). Moreover, some numerical simulation packages use proprietary or highly optimized bases, and it is difficult if not impossible to replicate the bases in the visualization system.</p><p>In this paper we address these two problems by describing a framework for automatic, adaptive basis function tessellation for bases that may be codified in external simulation packages. The framework supports any basis that is uniquely parameterized, provides the ability to add multiple tessellation error measures, and implements a simple edge-based, adaptive tessellation method. The framework has been designed so that it can be parallelized for distributed computing, and performs local, on demand tessellation of cells in response to algorithmic queries. We demonstrate the utility of the framework and show results for finite element and finite difference simulation. Finally, we have provided the implementation in the open source VTK visualization system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>In general, visualizing algorithms implemented on higher-order basis functions is an open research problem with little treatment in the literature. Much of the existing work is devoted to specific algorithms such as isocontouring or volume rendering, or is limited to basis of a particular polynomial order. Meek and Beer <ref type="bibr" target="#b14">[15]</ref> describe a method for contour generation that tessellates the basis in parametric space, using traditional linear algorithms to produce line segments interior to the element, and then mapping the line segments back into global space. Akin and Gray <ref type="bibr" target="#b1">[2]</ref> describe a method for generating contour lines on isoparametric finite elements by marching along a path of zero variation in isovalue, also computed in parametric coordinates (reminiscent of techniques for streamline generation). Gallagher <ref type="bibr" target="#b8">[9]</ref> also describes methods for high precision isocontour generation in finite element meshes. Williams et al. <ref type="bibr" target="#b27">[27]</ref> developed an accurate volume renderer that treats quadratic and linear meshes.</p><p>There is no shortage of work describing basis functions for finite element application. Probably the most common formulation is the so called isoparametric element, where the interpolation function for both geometry and attribute data is of the same form <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b28">28]</ref>. An emerging method in finite element analysis showing promise in terms of accuracy and the rate of solution convergence is known as the p-method. In this approach, the poly- nomial order of interpolation across each topological entity of the element (edge, face and interior) may be independently varied as a function of desired solution accuracy <ref type="bibr" target="#b22">[22]</ref>. While promising, the adoption of this method has been hampered due to its inherent complexity and the lack of supporting visualization tools.</p><p>Basis functions are also used in modeling applications to mathematically describe the shape of objects. Coon patches, Bezier splines, non-uniform rational B-splines (NURBS), and other parametric surface descriptions are used to describe physical objects <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b15">16]</ref>. Such basis functions have traditionally been used to represent the geometry and topology of physical objects, as in CAD/CAM application. However, these modeling basis functions can also be used to interpolate the variation in dependent variables such as stress, strain, and temperature variation. While tessellating bases for visualizing geometric models has been addressed <ref type="bibr" target="#b6">[7]</ref>, these methods are based solely on geometric considerations, including concerns on surface smoothness (i.e., continuity of derivatives). In numerical simulation both geometric and attribute data are interpolated, possibly with different bases. Thus methods that treat both simultaneously are needed.</p><p>While applications of numerical simulation and modeling routinely employ higher-order basis functions, visualization systems in general support only linear bases. For example, commercial systems such as AVS <ref type="bibr" target="#b26">[26]</ref>, Data Explorer <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b12">13]</ref>, Iris Explorer <ref type="bibr" target="#b23">[23]</ref>, and VTK <ref type="bibr" target="#b21">[21]</ref> support a wide variety of linear types (e.g., triangle, tetrahedral, quad, hexahedra, etc.) but provide only limited support for isoparametric quadratic and infrequently, cubic, bases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">APPROACH</head><p>In this section we begin by describing the framework used to implement the adaptive tessellation method. We follow this treatment with details of the tessellation procedure. In the latter part of this section we describe advanced methods to demonstrate the flexibility of the framework to support new approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Adaptor Framework</head><p>A major goal of this work was to develop an architecture that would allow users to plug in their own basis functions, including providing the ability to link against external simulation packages. We wanted to avoid reproducing the implementation of the basis functions in the visualization system, or to force users to write data in a particular file format. In addition, we did not want to simply translate one data structure into another (at the cost of significantly increasing memory requirements). To realize this goal, we designed an adaptor framework residing between the existing linear visualization system (VTK in this case) and an external package. <ref type="figure" target="#fig_1">Figure 2</ref> illustrates the key classes of the framework. The typical data visualization abstraction-that data is represented by a dataset, and in turn the dataset consists of points and cells-is preserved, except that the classes' API removes all assumptions on the linearity of the data. The API also provides a more elaborate traversal mechanism based on cell and point iterators. These iterators are used both to traverse over the cells of the dataset, as well as on the boundaries of a cell. The representation of dependent data associated with the geometry and topology of the dataset (i.e., attribute data) is also abstracted. Access to the attribute data is via point and cell iterators; thus it is possible to associate data with any geometric or topological entity found in the dataset representation. The design defines several abstract superclasses, the GenericDataSet, Generic-AdaptorCell, PointIterator, CellIterator, and GenericAttributeData that must be subclassed with concrete class implementations in order to interface to external simulation systems.</p><p>The tessellation process is carried out by the GenericCellTessellator (and its subclasses). GenericCellTessellator works with the GenericSubdivisionErrorMetric and its derived classes to evaluate various types of error. Generally, these classes can be used as is, but users can create new tessellation algorithms or add new error measures to modify the default behavior of the system.</p><p>A new concept that we refer to as DOF nodes was introduced into the design. These nodes represent collections of coefficients at each topological entity of a cell, excluding the cell corner vertices. For example, a triangle has four DOF nodes corresponding to its three edges and interior region. The coefficients define the interpolation function on the particular topological entity with which the DOF node is associated. Note that these coefficients may be implicitly or explicitly defined and can be omitted in many cases. The exact meaning and data structure of the coefficients depend on the particulars of the basis function being represented, and are defined by the concrete subclasses described previously.</p><p>The creation of this new dataset type introduced a different API into the system, hence existing filters were no longer compatible with this new dataset. While we considered rewriting all the filters for the new API, we observed that the number of filters that operate on general datasets is relatively small, since most filters are specialized for particular types of data (e.g., images, polygon meshes). As a result, we chose the most important algorithms and rewrote them for the API introduced by the adaptor framework. These algorithms include contouring, clipping, cutting, streamline generation, glyphing, probing, extracting surface geometry, and outlining the data. A given algorithm is typically implemented as follows:</p><p>for each cell c to be processed { linearDataSet = TessellateCell(c) for each linear cell cl in linearDataSet { OperateOn(cl) } }</p><p>We also created a general purpose dataset tessellator to linearize the mesh. The tessellator filter serves as a fallback position: we avoid linearizing input datasets whenever possible since doing so may consume excessive memory resources as every cell is tessellated.</p><p>With this approach, the cell tessellation is only performed when absolutely necessary, especially since we can take advantage of the iterators to visit only those cells that need processing. Further, the tessellation is performed dynamically and the results of tessellation are discarded once the processing of each cell is complete. In this way we avoid tessellating the entire dataset all it once and incurring the resulting memory cost.</p><p>The remainder of this paper focuses on the tessellation algorithms used to reimplement the algorithms referred to previously.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Edge-Based Tessellation</head><p>The edge-based tessellation that we adopted is similar to <ref type="bibr" target="#b3">[4]</ref> and <ref type="bibr" target="#b19">[19]</ref>. Besides the design of our framework, our major contributions have been to use a more sophisticated error metric, to add additional efficiencies into the algorithm, and to introduce advanced methods for tessellation. We describe the basic algorithm in this section, and discuss the error metric in the next. Finally, we describe some advanced tessellation methods to demonstrate the flexibility of the adaptor framework.</p><p>The central idea behind the algorithm is simple: each cell edge is evaluated via an error metric and may be marked for subdivision. Based on the cell topology, and the particular edges requiring subdivision, templates are used to subdivide the cell. This process continues recursively until the error metric is satisfied on all edges. This algorithm is easily implemented in 2D, but in 3D maintaining face compatibility is an issue and is discussed later in this section. There are also several performance issues to consider as well, including minimizing the cost of evaluating the error metric.</p><p>The advantages of this algorithm are its relative simplicity, and the fact that cells can be tessellated independently. This is because edge subdivision is a function of one or more error measures that consider only information along the edge, and do not take into account cell information. Therefore no communication across cell boundaries is required, and the algorithm is well suited for parallel processing and on the fly tessellation as cells are visited during traversal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Details</head><p>The algorithm operates on topological simplices s n i of dimension n that form a compatible mesh M:</p><formula xml:id="formula_2">M = i s n i (4)</formula><p>The mesh is compatible meaning that simplices intersect only on</p><formula xml:id="formula_3">boundary faces f p k of dimension p s m i ∩ s n j = f p k with p &lt; min(m, n) and f p k ⊂ s m i , f p k ⊂ s n j<label>(5)</label></formula><p>Here we refer to the s n i as cells, and note that cells of non-simplicial topology can be treated by first triangulating them, insuring that the resulting tessellation is compatible. Also, the algorithm supports meshes whose cells are of mixed dimension n.</p><p>The algorithm operates on M to produce a linear (both in geometry and topology), compatible tessellationM. In the discussion that follows we distinguish between mesh topological entities f  Currently the subdivision splits the edge at the parametric midpoint. In the future we may optimize the split position to minimize the error.</p><formula xml:id="formula_4">ε i &gt; ε T i , for any ε i ∈ E<label>(6)</label></formula><p>After all edges are evaluated, the cell is assigned a case number. The case number indexes into a subdivision table as illustrated in <ref type="figure" target="#fig_3">Figure 3</ref>. The triangle is then subdivided and the process continues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Face Consistency in 3D</head><p>The algorithm requires special treatment when tessellating the faces of 3D cells. Referring to <ref type="figure" target="#fig_3">Figure 3</ref>(b), notice that there are two different ways to tessellate the triangle (the face of a tetrahedron) as indicated by the dotted line. While the method of ordered triangulation <ref type="bibr" target="#b20">[20]</ref> can be used to address this situation, we wanted a faster method specialized to tetrahedra. Ignoring any geometric criteria used to select the diagonal, we instead use strictly topological deciders. In this case point ids were used, under the assumption that the cell point ids are unique and can be sorted. The rule here is that the diagonal edge connecting the lowest point id is selected. (This is similar to the work of <ref type="bibr" target="#b17">[17]</ref>.)</p><p>In practice we use two subdivision case tables depending on whether the tetrahedron is a left-handed or right-handed. A righthanded tetrahedron is one in which the ordering of its indices {0, 1, 2, 3} is such that the first three indices define a face with an inward pointing normal (using the right-hand rule). A left-handed tetrahedron produces an outward pointing normal. Each table consists of 2 <ref type="bibr" target="#b5">6</ref> = 64 entries where each entry defines the tetrahedra to be created during subdivision. We decided to use two tables for efficiency rather than a single table with symmetric modifiers as in <ref type="bibr" target="#b19">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Efficiency Considerations</head><p>Evaluation of the edge error metric can be a time consuming operation. Further, since many cells may share the same edge, a naive implementation of the algorithm repeatedly evaluates the error metric many times. Additional costs are associated with edge splitting including coordinate system conversion and evaluation of the attribute data at the center split point. To improve the performance of the algorithm, we devised a special hash table to store information on edges to insure that calculations are performed only once. The hash table also stores point ids which are essential for insuring proper face consistency in 3D as described previously.</p><p>The hash table is specially designed to retain edge information only as long as it is needed. For example, consider a mesh consisting of two higher-order triangles joined along a common mesh edge e. Then all tessellant edge information produced along e must be maintained after the first triangle is processed because successful processing of the second triangle also requires information along e. It is only after the second triangle is processed that the information associated with e can be deleted. In 3D, tessellant edge information on the faces of cells must also be maintained until the adjoining face neighbor (if any) is processed. Memory management via reference counting was used to implement this capability. Edges, when constructed during tessellation, must be classified in the interior, on the edges, or on the faces of the original higher-order cell. Tessellant edges have an initial reference count equal to the number of times the higher-order topological entities on which they are classified are used in the mesh. Once a cell is processed, it decrements the reference count of all the edges created during tessellation. Thus all interior edges are immediately deleted, and tessellant edges on the boundary of the cell may or may not be deleted depending on whether all neighboring cells have been processed.</p><p>Assigning an initial reference count depends on proper classification of edges. One way to achieve this is to create a richer topological structure where tessellant vertices, edges and faces keep track of their relationship to each other, as well as their relationship to the original cell. We decided against this approach due to the costs associated with memory management. Instead, we deduce the classification of edges from either geometric or topological information. Edges can be classified using geometric calculations, with minimal impact on memory requirements, by determining (in parametric space) whether the edge is located along a cell edge, on a cell face, or interior to the cell. This works well as long as numerical accuracy concerns can be avoided (e.g., by limiting the depth of recursive tessellation). Alternatively, topological information can be used to classify edges. In this case, a classification is carried by each tessellant vertex. The classification is simply a label that indicates the type and on which topological entity the vertex lies (e.g. which mesh vertex, edge, face, or region). Then the classification of any tessellant edge is a simple table lookup based on the topology of the cell and the classification of the edges vertices. Of course, any vertices created during subdivision receive the classification of the tessellant edge as it is subdivided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Error Measures</head><p>What makes this algorithm adaptive is that edge splitting is controlled by local mesh properties and/or its relation to the view position. The goal is to insure that the quality of the tessellation is consistent with the particular requirements of the visualization. In general, we expect the adapted tessellation to be of better quality as compared to a fixed subdivision for the same number of simplices, or have fewer simplices for tessellations of equal quality.</p><p>Our design allows for the definition of multiple error measures. As indicated in Equation 6, the error metric consists of several error measures, each of which evaluates local properties of the edge against the linear approximation, and compares the measure against a user-specified threshold. If any measure exceeds the threshold, then the edge is subdivided. These error measures may evaluate geometric properties, approximation to solution attributes, or error related to the current view, among other possibilities. Error measures based on geometry or attributes are independent of view and the mesh requires only one initial tessellation.</p><p>The following paragraphs describes several error measures that we have found useful. Since the tessellator is designed to process a list of error measures, it is straightforward to add new ones (by deriving from the GenericSubdivisionErrorMetric class) and/or combine it with existing error measures.</p><p>Object-Based Geometric Error Measure. Referring to <ref type="figure" target="#fig_4">Figure 4(a)</ref>, this error measure is the perpendicular distance, d, from the edge center point C to the straight line passing through the cell edge vertices (A and B). Note that d is computed in world coordinates, but C is computed by evaluation at the parametric center of the edge. The perpendicular distance is used rather than the distance between C and D because if C lies on (AB) but is not on D the error is non-zero and may produce many useless edge subdivisions.</p><p>Object-Based Flatness Error Measure. This error measure is the angle between the chords (AC) and (CB) passing through the real mid-point C. As the angle approaches 180°the edge becomes flat. The threshold is the angle over which the edge is viewed as flat.</p><p>Attribute-Based Error Measure. Referring to <ref type="figure" target="#fig_4">Figure 4</ref>(b), this error measure is the distance between the linearly interpolated value a i of an attribute at the midpoint and the actual value of this attribute at the edge midpoint a m .</p><p>Image-Based Geometric Error Measure. This error measure is the distance, in pixels, between the line (AB) projected in image space to the midpoint C also projected in image space. Because the computation involves projection through the current camera matrix, this error measure is view-dependent. As a result, the tessellation may be crude in portions of the mesh away from the camera. Note that one of the disadvantages of this approach is that tessellation may be required each time the camera is repositioned relative to the mesh.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Advanced Methods</head><p>In the first half of this section we described a basic algorithm focused on speed and simplicity. In this section we describe an alternate tessellation method to demonstrate the utility of the framework. (Details on these methods are available in <ref type="bibr" target="#b24">[24]</ref> and additional research is ongoing.) This advanced method focuses on two requirements: guaranteeing that the tessellation captures all topological features of the higher order bases, and producing a refined mesh with high-quality elements. We address these topics in the following subsections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.1">Capturing Topological Features</head><p>To capture all the features of the original higher-order basis, certain conditions must be met on the tessellation. Often these conditions depend on the characteristics of a visualization algorithm. For example, linear isocontouring algorithms require that the following conditions are met in order to produce topologically correct results.</p><p>• each mesh edge intersects an isocontour of a particular value at most once,</p><p>• no isocontour intersects a mesh face without intersecting at least two edges of the face, and</p><p>• no isocontour is completely contained within a single element.</p><p>By definition, these conditions are directly related to critical points, since an extremum of a differentiable <ref type="bibr" target="#b0">1</ref> Φ over an open domain is necessarily a critical point. Linear meshes assume that all extrema of the scalar field Φ : IR 3 → IR occur at vertices, but in general when using a higher-order basis this is not the case, and extrema can be found interior to a cell. These three requirements above may be rephrased in terms of critical points: <ref type="bibr" target="#b0">1</ref> we assume the field is differentiable over each cell. (C1) Φ has no interior extrema along any tessellant edgef <ref type="bibr" target="#b0">1</ref> k . We may specify an edge as a linear relationship among parametric coordinates so that, if the dependency is in terms of r, this constraint may be written g (r) = ( ∂ Φ ∂ r + a ∂ Φ ∂ s + b ∂ Φ ∂t ) (r,s(r),t(r)) = 0 over some interval ]r 0 , r 1 [⊂ IR, where a and b are real constants. Note that one can have g (r) = 0 (i.e., an extrema on f 1 k ) even though ∇Φ (r,s(r),t(r)) = 0.</p><p>(C2) Φ has no interior extrema over any tessellant facef <ref type="bibr" target="#b1">2</ref> k . We may specify a face as a linear relationship among parametric coordinates so that this constraint may be written, if the dependency is that of t in terms of r and s, ( (C3) Finally, we note that for a component of an isocontour to be completely contained in some element, a critical point of the differentiable Φ must exist somewhere in the element. Thus, we must insure that all extrema must occur at vertices.</p><formula xml:id="formula_5">∂ Φ ∂ r + a ∂ Φ ∂t , ∂ Φ ∂ r + b ∂ Φ ∂t ) (r,</formula><p>In order to meet these requirements, it is clear that we must locate all critical points on the interior of the element, as well as critical points of Φ restricted along eachf i k . Once located, these critical points must be inserted into an initial tessellation of the element in a way that preserves the properties described above 2 . For example, consider a d-dimensional finite element with a set of d + 1 or more critical points</p><formula xml:id="formula_6">{r * 0 , r * 1 , . . . , r * m } ∈ R m+1 i .</formula><p>There is no guarantee that an edge r * u r * v should exist in the tessellation. As <ref type="figure" target="#fig_5">Figure 5</ref> illustrates in two dimensions, the restriction of Φ to the interior of r * u r * v may have some critical point that is not a critical point of Φ. For instance, if edge AC were used instead of edge BD, there is some isovalue Φ(X) &lt; Φ(A) along edge AC that would not appear in the output since Φ(X) &lt; Φ(A) &lt; Φ(C). Thus isosurfaces generated by ABC and ACD would not be topologically correct, while those generated by ABD and BCD would be correct. In fact, this means that the tessellation of the initial cell vertices along with volume, face and edge critical points must comply with (C1). In general, for an edge to be present in the initial tessellation of an element, there should be a path of steepest descent (or ascent) that connects its endpoints.</p><p>Faces and non-isolated critical introduce additional complexity. Some tessellant faces(i.e., triangles) r * u r * v r * w should not be in the final tessellation because they may cross curves that induce a minimum or maximum on the restriction of Φ to the face-this means that the choice of subfaces is constrained by (C2). This is further complicated when non-isolated critical points are allowed. Isosurfacing algorithms allow edges or faces to be composed of critical points, while curves and sheets of critical points are not allowed interior to an element.</p><p>An initial tessellation that meets the above requirements will guarantee that linear isosurfacing algorithms will produce topologically valid approximations <ref type="bibr" target="#b2">3</ref> . Even without properly connecting the critical points, the true range of Φ over R will be represented, which is perhaps the most basic characterization of Φ possible. However, it is possible that other visualization algorithms make assumptions beyond the ones considered above. For example, some volume rendering algorithms assume that scalar values along a ray passing through an element are constant or linear (even though trilinear interpolants do not meet this criterion except along a coordinate axis). Specific visualization algorithm requirements must be considered when developing an initial tessellation.</p><p>The framework supports this by allowing each class representing a type of cell to present an initial tessellation to the tessellation algorithm. This initial tessellation may be altered depending on the requirements at hand.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.2">Refined Element Quality</head><p>Although visualization algorithms are generally less susceptible to simplices of poor quality than finite element simulations, there are many instances in which poor element quality can be problematic. For example, hardware interpolation across a long, thin triangle can introduce artifacts during rendering. To ensure a high-quality tessellation, there are various approaches that can be used to improve quality. One simple, effective approach in 3D is to simply select the best, alternative tessellation of a tetrahedra that does not affect the triangulation on its faces. This choice is due to the fact that certain configurations of edge subdivision may be tessellated in more than one way.</p><p>The framework supports quality-driven tessellation by separating the adaptive tessellation functionality into a class of its own. Implementing this capability (or other tessellation scheme) requires deriving from the GenericCellTessellator class (see <ref type="figure" target="#fig_1">Figure 2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>In this section we use our framework to visualize several datasets to demonstrate its effectiveness. The framework code is integrated into VTK and available for download from vtk.org. Note that in Sections 4.1 through 4.3, adaptors to Simmetrix, Inc.'s (simmetrix.com) proprietary commercial system were used to process the datasets shown. In Section 4.4, adaptors to Sandia's S3D simulation system were used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Linear Geometry, Cubic Attribute</head><p>The first example is a finite element mesh with linear elements and cubic attribute functions (the Kovasznay flow problem). <ref type="figure" target="#fig_0">Figure 1</ref> compares how visualizing the mesh as linear elements <ref type="figure" target="#fig_0">(Figure 1(a)</ref>) <ref type="bibr" target="#b2">3</ref> We can further extend linear isosurfacing algorithms to find zeros of the higher-order interpolant rather than the linear one so that the piecewise approximation of the isosurface will be exact at each output vertex. or performing one level of fixed subdivision ( <ref type="figure" target="#fig_0">(Figure 1(b</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Quadratic Geometry, Quadratic Attribute</head><p>The next example is a finite element mesh with quadratic geometric and attribute basis functions. The attribute data is an approximation to the analytic function f (x, y, z) = y 2 + z 2 + 10(1 − x). <ref type="figure" target="#fig_7">Figure 6</ref> compares how visualizing the mesh as linear elements <ref type="figure" target="#fig_0">(Figure 1(a)</ref>) or performing one level of fixed subdivision ( <ref type="figure" target="#fig_0">(Figure 1(b</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Error Measures</head><p>The third example compares the effect of different error measures on the adaptive tessellation process. As <ref type="figure" target="#fig_10">Figure 7</ref> shows, a plate with a hole is represented by a finite element mesh. Both the geometry and attribute data are interpolated with quadratic basis func-tions. The attribute field is an approximation to the analytic function f (x, y, z) = 100(100x 2 + 100y 2 + z). For comparison purposes, the mesh is uniformly subdivided (three levels of subdivision) and the resulting error in geometry and attribute data is used to specify the error thresholds for the adaptive process. The geometric error metric threshold is set to 2.7% of the diagonal of the bounding box of the mesh. The attribute error metric threshold is set to 2.04% of the attribute range. The flatness error metric threshold is set to 160.5°. <ref type="table" target="#tab_5">Table 3</ref> compares the number of points and cells created in each case. One of the more gratifying aspects of these results is that for equivalent error measures, the adaptive subdivision produces fewer linear primitives in faster time than the uniform subdivision. When combining all the error measures (item #7 in <ref type="table" target="#tab_5">Table 3</ref>), the adaptive process ran nearly 20 times faster, and produces 34 and 50 times fewer points and cells, respectively, than the fixed subdivision of equivalent quality.  (1) Original higher order mesh, (2) fixed subdivision,(3) flatness error metric only, (4) geometric error metric only, (5) attribute error metric only, (6) flatness and attribute error metrics, and (7) combined geometric and attribute error metrics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Quadratic Isocontouring</head><p>One application of higher order visualization is the identification of features in complex flow simulations. In particular, <ref type="figure">Figure 8</ref> shows isocontours of the vorticity magnitude of a channel flow computed with a 3-dimensional finite difference scheme using Sandia's S3D simulation package for turbulent reacting flows. To produce the isocontours, we adapted a 3 × 3 × 3 quadratic finite difference stencil to the framework <ref type="figure">(Figure 9(b)</ref>). This contrasts with the traditional approach of using trilinear interpolants for visualizing the results of such finite difference simulations <ref type="figure">(Figure 9(a)</ref>). It is not clear what the best interpolant is to represent such high order (up to order 12 in each direction) finite difference solutions. However, by inspecting differences in visualization results when employing interpolants of different orders, we gain additional information about how the simulation is behaving.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION AND FUTURE WORK</head><p>We have developed a general, flexible framework supporting the automatic tessellation of higher-order basis functions. The framework supports cells that may employ different basis functions for the interpolation of geometry and attribute data. By using an abstract, adaptor-based architecture the framework may be extended by adding new classes or derivation, and can be linked against external simulation packages avoiding the need to duplicate data structures or convert data files. An error metric has been defined that consists of a set of measures for geometry, data attribute and view error, which may also be extended by object derivation. The error metric controls an efficient, edge-based, recursive subdivision algorithm that can produce compatible tessellations on demand during  algorithm execution. The framework supports advanced techniques such as pre-tessellation for critical points and the ability to control mesh quality by selecting the best tessellations during the subdivision process. We are currently working on improving the speed of the tessellation process and investigating alternative error measures. In particular we continue to work on improving the quality of the adapted mesh. This is especially challenging since the input to the algorithm often consists of poorly shaped cells, and we want to insure that any cells that we generate are of equal or better quality than the input.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Results for mesh with linear geometry and cubic attribute basis functions showing (a) linear, (b) one level of uniform subdivision, (c) adaptive subdivision at 1% error, and (d) adaptive subdivision of the cubic attribute function at 0.1% error.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Overview of the framework architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>pk</head><label></label><figDesc>(i.e., vertices, edges, faces, regions) and tessellant topological entities f p k . Obviouslyf p k are produced from the tessellation of s n i . Edges are subdivided once when the error metric fails. As described later in this section, the error metric E consists of multiple error measures ε i , and if any one exceeds its error threshold ε T i the edge is split Split edge e if</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>A portion of the subdivision case table.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Definition of the geometric and attribute error measures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Critical points must be connected into a proper tessellation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>s,t(r,s)) = 0 over some open domain U i ⊂ IR 2 , where a and b are real constants. Once again, this expression can vanish (i.e., both components are 0) even at a point where ∇Φ does not.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Results showing (a) linear, (b) one level of uniform subdivision, and (c) adaptive subdivision.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 7 :</head><label>7</label><figDesc>Adaptive versus fixed subdivision: (a,b) fixed subdivision, (c,d) combined geometric and attribute error metrics, (e,f) geometric error metric only, (g,h) flatness error metric only, and (i,j) attribute error metric only.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 8 :Figure 9 :</head><label>89</label><figDesc>Isocontour of the vorticity magnitude of a channel flow computed with a 3-dimensional finite difference scheme. Differences between linear (a) and quadratic (b) isocontours of the same underlying finite difference simulation. Note the differences in topology. (Dataset courtesy of A. Gruber (SINTEF).)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table /><note>Results for Figure 1</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Results forFigure 6</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 3 :</head><label>3</label><figDesc>Adaptive versus fixed subdivision for varying error measures.</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">Because this initial tessellation then serves as an input to the edgesubdivision algorithm, edge refinement will not miss features interior to an element</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An extended data flow architecture for data analysis and visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Abram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Treinish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Visualization &apos;95</title>
		<meeting>of Visualization &apos;95</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995-10" />
			<biblScope unit="page" from="263" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Contouring on isoparametric elements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Akin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. of Numerical Methods in Engineering</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1893" to="1897" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Interactive Computer Graphics Functional, Procedural, and Device-Level Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Burger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gillies</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A simple recursive tessellator for adaptive surface triangulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Field</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graphics Tools: JGT</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="9" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Concepts and Applications of Finite Element Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Malkus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Plesha</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>John-Wiley</publisher>
		</imprint>
	</monogr>
	<note>third edition</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Curves and Surfaces for Computer Aided Geometric Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Farin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Computational Geometry for Design and Manufacture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">D</forename><surname>Faux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Pratt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979" />
			<publisher>Ellis Horwood</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Frey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-L</forename><surname>George</surname></persName>
		</author>
		<title level="m">Mesh Generation. Hermes Science Publishing</title>
		<meeting><address><addrLine>Oxford &amp; Paris</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An efficient 3-d visualization technique for finite element models and other coarse volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Multiresolution visualization of higher order adaptive finite element simulations. Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Haasdonk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ohlberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rumpf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Siebert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-07" />
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="page" from="181" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A data model for scientific visualization with provisions for regular and irregular grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Haber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lucas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Collins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Visualization &apos;91</title>
		<meeting>of Visualization &apos;91</meeting>
		<imprint>
			<publisher>IEEE Comp. Soc. Press</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="298" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Finite Element Method: Linear Static and Dynamic Finite Element Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Hughes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Data Explorer Reference Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ibm Corp</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lapidus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">F</forename><surname>Pinder</surname></persName>
		</author>
		<title level="m">Concepts and Applications of Finite Element Analysis</title>
		<imprint>
			<publisher>John-Wiley</publisher>
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Contour plotting of data using isoparametric element representations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Meek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Beer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Numerical Methods in Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="954" to="957" />
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Geometric Modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Mortenson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985" />
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Interval volume tetrahedrization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Visualization &apos;97</title>
		<meeting>of Visualization &apos;97</meeting>
		<imprint>
			<publisher>IEEE Comp. Soc. Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="221" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Communication-free streaming mesh refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P</forename><surname>Pébay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Sciences In Engineering</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
	<note>In print</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A scheme for edge-based adaptive tetrahedron subdivision</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ruprecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Müller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mathematical Visualization</title>
		<editor>H.-C. Hege and K. Polthier</editor>
		<meeting><address><addrLine>Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="61" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Compatible triangulations of spatial decompositions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Geveci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Malaterre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Visualization</title>
		<meeting>of Visualization</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="211" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The Visualization Toolkit An Object-Oriented Approach To 3D Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
	<note>third edition</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A straightforward structure to construct shape functions for variable p-order meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Shephard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Flaherty</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Methods in Applied Mechanics and Engineering</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="209" to="233" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Silicon Graphics, Inc. Iris Explorer User&apos;s Guide</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Visualization of higher-order finite elements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Khardekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pébay</surname></persName>
		</author>
		<idno>SAND2004-1617</idno>
		<imprint>
			<date type="published" when="2004" />
			<pubPlace>Sandia National Laboratories</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Performance of a streaming mesh refinement algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P</forename><surname>Pébay</surname></persName>
		</author>
		<idno>SAND2004-3858</idno>
		<imprint>
			<date type="published" when="2004-08" />
			<pubPlace>Sandia National Laboratories</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Sandia Report</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The application visualization system: A computational environment for scientific visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Upson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Faulhaber</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kamins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE CGA</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="30" to="42" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A high accuracy volume renderer for unstructured data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">L</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Stein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions On Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1998-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">C</forename><surname>Zienkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Taylor</surname></persName>
		</author>
		<title level="m">The Finite Element Method</title>
		<imprint>
			<publisher>McGraw-Hill Book Co</publisher>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
	<note>4th edition</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
