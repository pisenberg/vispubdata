<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Exploring 2D Tensor Fields Using Stress Nets</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Wilson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Sandia National Laboratories</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rebecca</forename><surname>Brannon</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Sandia National Laboratories</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Exploring 2D Tensor Fields Using Stress Nets</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:40+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3. [COMPUTER GRAPHICS]: Picture/Image Generation-Line and curve generation; J.2. [Physical science and engineering]-Engineering tensor field</term>
					<term>stress tensor</term>
					<term>streamlines</term>
					<term>controlled density streamlines</term>
					<term>crack propagation</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In this article we describe stress nets, a technique for exploring 2D tensor fields. Our method allows a user to examine simultaneously the tensors&apos; eigenvectors (both major and minor) as well as scalar-valued tensor invariants. By avoiding noiseadvection techniques, we are able to display both principal directions of the tensor field as well as the derived scalars without cluttering the display. We present a GPU-only implementation of stress nets as well as a hybrid CPU/GPU approach and discuss the relative strengths and weaknesses of each. Stress nets have been used as part of an investigation into crack propagation. They were used to display the directions of maximum shear in a slab of material under tension as well as the magnitude of the shear forces acting on each point. Our methods allowed users to find new features in the data that were not visible on standard plots of tensor invariants. These features disagree with commonly accepted analytical crack propagation solutions and have sparked renewed investigation. Though developed for a materials mechanics problem, our method applies equally well to any 2D tensor field having unique characteristic directions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Tensor visualization is a relatively new area of study compared to vector and scalar field visualization. It is difficult because the meaning of a tensor is strongly problem-dependent. Whereas a vector field usually has an intuitive meaning as a representation either of flow or force, a single tensor can represent such disparate entities as stress forces, strain stretches, the gradient of a velocity field, and diffusion of water within tissue. There are also many aspects of a tensor that can be displayed, including its invariants, eigenvalues, eigenvectors, and even its individual components.</p><p>In light of this difficulty, the most successful tensor visualization algorithms so far have been domain-specific. Rather than attempting to display the whole of the tensor data at once, such algorithms extract only the information necessary to the user's area of interest. Examples of such methods include Mohr's circles for stress/strain data <ref type="bibr" target="#b5">[6]</ref> and geometric extraction methods for diffusion tensor MRI data <ref type="bibr" target="#b28">[28]</ref>. Although the search for a universally useful tensor visualization method continues, we believe that domain-specific methods will always have an advantage in conveying meaning to a user.</p><p>After completing a simulation of crack propagation at atomic scale, materials scientists within our laboratory sought to compare their results with published asymptotic continuum-mechanics solutions for a nearly equivalent problem. However, the information they needed could not be seen in standard 2D plots of tensor invariants. We were asked to develop a tool with the following capabilities:</p><p>1. Display, at all points within the data, the orientation of the maximum shear directions (which are simply 45° rotations of the major and minor eigenvectors) 2.</p><p>Provide a continuous global view of the data 3.</p><p>Browse through the data and zoom in for higherresolution detail 4.</p><p>Color the data using some scalar invariant derived from the tensors Contributions: In this paper we describe stress nets, a novel visualization algorithm for exploring 2D tensor fields. A stress net can display both major and minor eigenvector fields (or, as needed by our customers, vectors derived from these eigenvectors) as well as some scalar quantity derived from the data. Moreover, our method does not limit the scalar display to hue only, as is commonly the case in noise-based approaches.</p><p>Although we deal with non-isotropic symmetric tensors in this paper, our method can handle asymmetric tensors as well (with minor revisions). We have incorporated stress nets into an application used by geomechanicists to investigate models of crack propagation. Our application has allowed them to identify discrepancies between the properties of a simulation of crack propagation at atomic scale and the predictions made in the continuum mechanics literature. The rest of this paper is organized as follows. We survey related work in Section 2. In Section 3, we describe the driving problem in mechanics that led to the development of stress nets. In Section 4 we present two different implementations of stress nets, one using the GPU alone and one using both the CPU and Sandia National Laboratories PO Box 5800, M/S 0822 Albuquerque, NM 87185-0822, USA {atwilso,rmbrann}@sandia.gov Please see supplementary material on conference DVD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Visualization 2005</head><p>October 23-28, Minneapolis, MN, USA 0-7803-9462-3/05/$20.00 ©2005 IEEE.</p><p>GPU. In Section 5 we discuss the performance, advantages, and disadvantages of each approach as well as our customers' reaction to the method. In Section 6 we conclude with a brief discussion of possible future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK</head><p>In this section we survey related work in tensor visualization. Compared with vector visualization, tensor visualization is a relatively unexplored area of study. Moreover, it is difficult to find generally applicable tensor visualization methods because the meaning of a tensor is highly domain-specific. We give examples of both general and domain-dependent visualization techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.1</head><p>General tensor visualization methods One approach to tensor visualization is to exploit the fact that tensors, like matrices, have eigenvalues and (possibly indeterminate) eigenvectors. In this context, we can treat the eigenvectors as velocity fields and apply generalizations of vector visualization methods. The common hedgehog plot of a vector field can be extended to a field of glyphs. For example, Haber <ref type="bibr" target="#b8">[9]</ref> and Kriz et al. <ref type="bibr" target="#b16">[16]</ref> construct a field of ellipsoids to represent a field of tensors. The major and minor axes of each ellipsoid are aligned with the major and minor eigenvectors of the tensors and scaled according to the corresponding eigenvalues. While these plots can be useful for local inspection, the problems of clutter, occlusion, and ambiguity in shape make it difficult to observe the behavior of the tensor field over space. De Leeuw and van Wijk <ref type="bibr" target="#b17">[17]</ref> use a more complex glyph, the flow probe, to illustrate several quantities within a flow field. This conveys more information at the expense of more screen space for each glyph, reducing further the number of glyphs that can be usefully displayed. Hyperstreamlines <ref type="bibr" target="#b6">[7]</ref> are an alternative approach that combines aspects of glyphs and flow visualization. Streamlines are traced through the velocity field formed by the major eigenvectors of a set of tensors. Then, an ellipse is swept along each streamline. The minor eigenvectors and eigenvalues of the data are used as the direction and length of the axes of the ellipse. Although this method illustrates changes in the eigenvectors over a path in space, it introduces the common problem of choosing appropriate seed points for the streamlines in order to display the most important features in the data. Moreover, like fields of glyphs, hyperstreamlines encounter problems of clutter and occlusion as more lines are added to the display.</p><p>Another approach to conveying the global structure of a tensor field is to decompose it into its topological structure <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b22">22]</ref>. This structure consists of the field's degenerate points, where the tensors have duplicate eigenvalues, and a set of skeleton curves connecting these points. Although this method allows for reconstruction of the tensor field, interpretation can be difficult.</p><p>Noise-based vector visualization methods have also been adapted for tensors. HyperLIC <ref type="bibr" target="#b27">[27]</ref>, a generalization of the line integral convolution algorithm for vector fields <ref type="bibr" target="#b4">[5]</ref>, integrates a noise field over many small regions of the data. The shape and size of each region is determined by the eigenvectors and eigenvalues of the tensors in that region. The resulting image shows the field of major eigenvectors, smoothed in regions where the tensors are (nearly) isotropic. Hotz et al. <ref type="bibr" target="#b12">[12]</ref> take a different approach. They use LIC to generate images for both the major and minor fields of eigenvectors in tensor data, then overlay the two images for display. This is similar in principle to our approach. Their approach to displaying a scalar variable differs from ours in that they use the variable to determine the hue of the LIC image. It can be difficult to separate variability in the luminance of the LIC image from differing values in the scalar being displayed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2</head><p>Domain-specific methods In some cases, the problem domain that gives rise to the tensor data being examined suggests a visualization technique. Exploiting this technique allows us to present an image the users will understand quickly by keying into metaphors they have already learned.</p><p>For example, Mohr's circles, originally developed around 1900, are commonly taught in undergraduate engineering classes as a way to visualize and interpret stress tensors. The circles provide a visual estimate of the tensor's eigenvalues as well as an overall measure of whether the tensor represents a compressive, tensile, or combined force -all properties that are important in mechanics and materials science. Crossno et al. <ref type="bibr" target="#b5">[6]</ref> use Mohr's circles to convey an overview of the forces within a finite-element geomechanical data set. Dickinson <ref type="bibr" target="#b7">[8]</ref> addresses stress/strain fields in a more general treatment of interactive methods for scalar, vector, and tensor data. He points out that the orientation components of tensor data are important in their own right and shows an example of a method similar in spirit to stress nets.</p><p>Diffusion tensor MRI (DT-MRI) can also produce tensor data with a natural interpretation. The dominant eigenvectors of the diffusion tensors indicate pathways of maximum diffusion, corresponding to structures of interest such as neural fibers within the brain. Methods such as streamtubes <ref type="bibr" target="#b26">[26]</ref> and oriented tensor reconstruction <ref type="bibr" target="#b28">[28]</ref> work by recognizing and extracting those structures for display. Weinstein and Kindlmann <ref type="bibr" target="#b25">[25]</ref> combine a glyph-based approach with direct volume rendering by mapping the anisotropy of diffusion to both hue and the lighting model at each point within the data.</p><p>Tchon et al. <ref type="bibr" target="#b21">[21]</ref> apply tensor visualization in the context of mesh generation and optimization for finite element simulations. They use the Riemannian metric tensor, a measure of the "best" shape of a mesh element at each point on a surface, and construct two vector fields from the major and minor eigenvectors of the metric tensor. They trace streamlines through these fields to construct a net qualitatively similar to the optimal mesh for a particular metric and data set. Their method differs from ours in that the step size taken at each point during streamline integration is governed by the magnitude of the eigenvalue at that point. This is entirely appropriate for mesh construction and optimization, producing larger elements in regions where the data are smoother, but not as helpful for visual inspection. We achieve similar effects by allowing the user to zoom in and out to view the data and the stress net at different scales.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">DRIVING PROBLEM</head><p>We developed stress nets in response to a request from a materials scientist studying the propagation of cracks through an elasticplastic material. The simulation setup for this study is illustrated in <ref type="figure">Figure 2</ref>. We begin with a 2D rectangular slab of some notional material. Tension is applied to the material by pulling vertically on the upper and lower faces A and B. Eventually, the stress near the crack tip exceeds the material's failure threshold. When this happens, a crack at point C will propagate from left to right along the material's center line. The reason for this study is that there are multiple models in the materials science literature that describe crack propagation. One solution, due to Leighton, Champion and Freund <ref type="bibr" target="#b18">[18]</ref>, describes cases where the crack is propagating at some non-negligible velocity v (the dynamic case). Another solution, due to Achenbach and Dunayevsky <ref type="bibr" target="#b0">[1]</ref>, describes the behavior of the material as v vanishes (the quasi-static case). Intuition would suggest that the dynamic solution should converge to the quasistatic one as v approaches zero. This is not the case: the models make qualitatively different predictions about the shear forces within the material. Our customers sought to determine whether or not independent atomistic solutions to a nearly equivalent problem could offer insight leading to revisions in the continuum mechanics solutions that might resolve this discrepancy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.1</head><p>Customer Requirements Our customers asked for a tool that would allow them to inspect the structure of shear forces within their simulation results. This includes the directions of maximum shear, which are derived from the eigenvectors at each data point, and any one of several scalar quantities derived from the stress tensor. These quantities included the tensor's eigenvalues, its other invariants (such as the trace and the magnitude of the deviatoric part), and its individual components. All of this had to be derived from the raw simulation data, which was supplied as a series of points. Each point represents a single atom and specifies a 2D position in space as well as a symmetric 2D tensor representing the stress forces incident upon that atom. Both the orientations of the shear forces and the underlying scalar field had to be shown simultaneously across the visible extent of the data. The goal of this study was to compare qualitatively the simulation results with the predictions made in <ref type="bibr" target="#b18">[18]</ref> and to look especially for abrupt changes of direction in the shear forces near the crack tip. Such changes are not permitted by those predictions. This information does not appear in standard 2D plots of tensor invariants: it is only visible in the orientation portion of the tensors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Stress Nets</head><p>We chose as a model for our solution a deformed grid whose lines reflect the orientation of the underlying tensor data. Instead of tying the grid's density to the magnitude of the eigenvalues of the tensor field, as is done in <ref type="bibr" target="#b21">[21]</ref>, we attempt to keep the size of the grid cells roughly constant over the whole of the data. This sort of display is similar in spirit to an electric field diagram including both field lines and equipotential lines, as shown in <ref type="figure">Figure 3</ref>. Moreover, the derived scalar must be clearly visible along with the net itself: the two must not obscure one another. When color is used to display a scalar variable in noise-based methods such as LIC and HyperLIC, the variation in color (due to the scalar variable) and the variation in luminance (due to the noise texture) can be difficult to disambiguate. By creating a grid instead of a space-filling texture, we leave plenty of room free for displaying the scalar variable exclusively. We refer to the orientation component of the display as the stress net and the derived scalar variable as the scalar field.</p><p>We addressed the following issues while developing stress nets: 1. The data are supplied as atoms without extent. How do we construct a space-filling representation that can be used for display or query? 2. How do we construct and render the stress net? 3. How does the system respond to zooming in and out?</p><p>Should the net be recomputed automatically at each frame? 4. How do we handle situations where the eigenvectors are poorly defined because of repeated eigenvalues?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">STRESS NETS</head><p>We have implemented two different versions of stress nets in a tool used in our customers' study. We used VTK <ref type="bibr" target="#b19">[19]</ref> for the rendering components of our system and Qt <ref type="bibr" target="#b2">[3]</ref> for its user interface. In the rest of this section we describe the two implementations and the design decisions that guide them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">GPU-only implementation</head><p>Our first implementation of stress nets computed both the scalar field and the stress net on programmable graphics hardware. This implementation is separated conceptually into rendering the scalar field and rendering the stress net, although the actual code performs both tasks in a single pass. First we discuss the rendering of the scalar field using a discrete Voronoi diagram of the input data. Next, we show how the stress net is rendered as a texture map on top of the scalar field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1.1</head><p>Discrete Voronoi diagram and Scalar Field We draw the scalar field by building a discrete Voronoi diagram of the input points using the GPU. There are several methods in the literature for accomplishing this. We adopted the method described in <ref type="bibr" target="#b10">[11]</ref> for simplicity. At each data point, we draw a cone whose apex points straight up toward the view plane. All cones have the same slope and radius. The radius is chosen empirically so that the only gap visible in the scalar field is in the interior of the crack.</p><p>After rendering, we are left with an image where the fragment with the lowest Z value at each pixel is part of the cone belonging to the data point nearest that pixel. The visible portion of each cone is therefore a sampled representation of its data point's Voronoi region. We can use this to render the scalar field simply by using the currently selected scalar to assign a color to each cone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1.2</head><p>Drawing the Stress Net We render the stress net as a texture map on top of the scalar field. Texture coordinates are defined in screen space rather than world space so that the net's resolution will adapt automatically to the visible extent of the data. The user can specify a scaling factor to determine how many times the texture repeats across the screen and thus how fine the net itself is.</p><p>The net texture is applied using vertex and fragment shaders. A texture coordinate register is used to pass in the orientation of the stress net for each point in the scalar field. Within each cell, the screen-space texture coordinates are rotated to match this orientation. Since we know that the eigenvectors and hence the shear directions in the original data will always be perpendicular to one another where they exist at all, we can render both grid directions at once. Our particular application contained no isotropic regions where the eigenvectors become non-unique because of equal eigenvalues. If isotropic or nearly isotropic states are possible, an appropriate generalization of our method would be to make the opacity of the stress net texture proportional to the magnitude of the stress deviator (hence making the net disappear at isotropic states where the deviator is zero). The choice of the threshold below which the net is completely transparent should be application-and data-dependent in order to show the net only where there is enough anisotropy for the characteristic directions to be meaningful. Pseudocode for computing and applying the net texture is shown in <ref type="figure" target="#fig_2">Figure 4</ref>. The texture map used by the fragment shader is shown in <ref type="figure" target="#fig_3">Figure 5</ref>. In practice, we render both the scalar field and the stress net in a single pass.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2</head><p>CPU/GPU implementation Our second implementation focused on the goal of computing a smooth, continuous stress net across the whole of the data at the possible expense of speed and memory. This task requires global knowledge. For the lines of the stress net in one cell to connect to lines in a neighboring cell, the start and end positions of that cell's lines must be known in advance. The same is true for connecting a neighboring cell's net to its neighbors, and so on through the entire data set.</p><p>The streaming nature of programmable graphics hardware makes it difficult to provide such information. Although an iterative process could be used to adjust the positions of the net incrementally within each cell, this would carry the high cost of copying the frame buffer into texture memory after each step. Rather than incur that overhead, we moved the computation of the stress net back onto the CPU to take advantage of random access to global information. Instead of generating the stress net using texture maps, we treated it as two independent sets of streamlines: one set each for the two sets of directions displayed by the stress net. This is similar in concept to the noise-based approach presented by Hotz et al. <ref type="bibr" target="#b12">[12]</ref> 4.2.1</p><p>Space-filling representation As before, we begin with the problem of converting the simulation data into a space-filling representation. This representation will be used as the vector field through which the streamlines composing the stress net will be drawn. Our data were provided as a set of points in space, each associated with a symmetric 2x2 tensor. We convert these points into a spacefilling representation by inserting them into a data structure that allows nearest-neighbor queries. Once again, we perform no blending of nearby points in order to avoid introducing extra information into the data.</p><p>We use a kd-tree for simplicity. There are a plethora of other suitable data structures, including the Voronoi diagram, constrained Delaunay triangulations, a spatial hash table, and even a uniform grid. Our choice of the kd-tree was wholly pragmatic: it is available already within VTK. By selecting this rather than implementing a (potentially) more efficient structure from scratch, we were able to deliver tools to our customers more quickly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2.2</head><p>Generating the Stress Net Once we have a space-filling representation of the data, the construction of the stress net is straightforward. We create two independent sets of streamlines to follow the two different sets of directions in the net. We use Jobard and Lefer's method <ref type="bibr" target="#b13">[13]</ref> to help ensure consistent spacing between adjacent streamlines. The user is permitted to control the streamline density by specifying the separation distance as a fraction of screen space. A streamline is terminated if it enters a region where the eigenvectors are illdefined or if it comes within a threshold distance of another streamline. The streamlines composing the stress net are stored as line segments for later rendering.</p><p>Explicit computation and storage of the stress net raises scalability concerns. In order to keep memory requirements low and performance high, we do not recompute the net every time the streamline density or view region changes. Instead, we generate the net only upon request and restrict the region through which it propagates. The streamline region is always centered on the current view and is typically 1.5 times the size of the visible extent of the data. This allows for limited panning and zooming while still covering the visible region with the stress net. Both the extent and the regeneration of the stress net are placed within the user's control.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3</head><p>Rendering the Combined Display The scalar field is rendered directly from the input points using the algorithm in Section 4.1.1 in both GPU-only and CPU/GPU implementations. Since the stress net is available as actual geometry (the line segments of the streamlines), we render it on top of the scalar field in a single pass instead of displaying it using textures. Vertex and fragment programs are not necessary in the CPU/GPU implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">PERFORMANCE AND RESULTS</head><p>In this section we discuss the performance, advantages, and drawbacks of the two different implementations of stress nets. All statistics were acquired using one processor of a PC with two 2.6 GHz Pentium IV processors, 4GB of main memory, and an NVIDIA QuadroFX 3000 graphics card with 256MB of memory. The texture map used to display the stress net in the GPU-only implementation took 256KB of this memory.   <ref type="figure">Figure 6</ref> shows examples of the output of the GPU-only implementation. The scalar field alone is shown in <ref type="figure">Figure 6</ref>(a). The stress net alone is shown in <ref type="figure">Fig. 6(b)</ref>. The two fields combined are shown in <ref type="figure">Fig. 6(c)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.1</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GPU-only implementation</head><p>The orientation of the stress net at points across the image can be observed by focusing on the area in question. Since the net is computed in screen space and is recomputed for every frame, zooming into the data permits examination of its orientation at finer scales.</p><p>The chief advantages of this implementation are its low overhead and quick startup. Since the stress net is rendered directly from the orientation data within the vertex and fragment programs, there is no need for auxiliary data structures like the kd-tree. Moreover, this implementation will run at the same frame rate regardless of the net's density. This automaticity comes at the expense of slower frame rates, as shown in <ref type="table">Table 1</ref>.</p><p>The major drawbacks of the GPU-only implementation are the rendering artifacts visible in the stress net. We observe two types of artifacts. First, moiré patterns ( <ref type="figure" target="#fig_0">Figure 11</ref>) often become visible when looking at large parts of the data. These occur when the individual cells in the scalar field are much smaller in screen space than the area covered by a single grid cell. In such a situation, the orientation of the net can change drastically between one grid line and the next or even within the area covered by a single grid line. Moreover, the origin about which the grid texture is rotated remains constant across all the data. We made this assumption in an attempt to produce a coherent net in as much of the display as possible. This is a reasonable restriction near the crack tip, which forms the center of rotation for the net in that region. However, it is incorrect in areas such as the wake singularity shown in <ref type="figure" target="#fig_0">Figures 1, 7</ref>, and 10. We attempted to compute a center of curvature at each data point in order to alleviate this but were unable to achieve useful results due to rapid changes in curvature. In severe cases, such as in <ref type="figure" target="#fig_0">Figure 11</ref>, the moiré patterns can totally obscure the actual orientations of the stress net.</p><p>The moiré artifacts disappear as the user zooms in to view smaller parts of the data. At smaller scales, however, the net appears broken and discontinuous along cell boundaries, as shown in <ref type="figure" target="#fig_0">Figure 12</ref>. This happens because the vertex program that computes the stress net has no way to ensure the continuity of grid lines from one cell to the next: indeed, the vertex program is not even aware of other cells. While it may be possible to introduce such information using recent graphics hardware that permits texture lookups within a vertex shader, we believe that these shortcomings are inherent to the use of a single-pass GPU-only algorithm for computing stress nets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.2</head><p>CPU/GPU implementation The hybrid CPU/GPU implementation eliminates nearly all of the artifacts within the stress net as shown in <ref type="figure">Figures 6 and 7</ref>. We observe that the moiré artifacts are no longer present. This is because the lines composing the net are constructed specifically to be continuous and are represented explicitly as geometry instead of existing only as a combination of single-pixel textures. There are still a few discontinuities in the net, produced when grid lines approach too closely to one another and are terminated by the streamline generation algorithm. Also, the spacing between lines (and thus the size of the cells of the net) is not everywhere constant. Nonetheless, the overall display is far more coherent than with the GPU implementation. Rendering speed has also been increased since we no longer recompute the stress net from scratch at every frame.</p><p>The greatest advantage of the CPU-based stress net algorithm is that the net's coherence makes it simple to observe the way the stress net changes over a region. We illustrate this in <ref type="figure" target="#fig_0">Figure 12</ref>. Although both images show the same feature in the data, it is much easier to see in the absence of the discontinuity artifacts present in the GPU-only version.</p><p>The increased image quality and rendering speed of this approach are balanced by its increased overhead. As seen in <ref type="table">Table 1</ref>, computing and storing the stress net using the CPU requires more storage space and a substantial startup time. Both of these are due to the kd-tree that we use to look up directions for the stress net during streamline integration. However, there are at least two simple ways to reduce this expense. First, we could substitute some other, more compact spatial data structure for the kd-tree. In the case of the crack-propagation data our customers provided, a geometric hash table or a uniform grid might work well. Second, we could save the kd-tree for a data set to disk after computing it once, then simply reload it during future runs. This would reduce the 11-minute construction time to the few seconds it would take to read the tree from disk. Many different data sets (corresponding to different time steps in the simulation) could be preprocessed in a few hours and then made available for rapid browsing using this approach. It is also possible to optimize the kd-tree implementation itself.</p><p>Finally, since we do not recompute the stress net automatically in this implementation, it is possible for the user to outrun it by panning beyond its extent or zooming in or out to the point where its cells are too large or small to be useful. Recomputing the stress net when the user changes either the desired viewing region or the net's density typically takes 5-15 seconds. In practice, we feel that this is not a serious problem. We observe that users tend to spend most of their time examining one small region of the data, then moving rapidly to another area. The brief pause required to recompute the stress net after zooming in or out is small compared to the time spent focusing on an area of interest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.2.1</head><p>User Reactions Our customers reacted positively to the results they obtained using our tools. Their first comments did not concern the tool at all, but instead the fact that the structure (now revealed) in their data did not match what the literature predicted. This discrepancy is illustrated in <ref type="figure" target="#fig_0">Figures 8-10</ref>. This is the goal of any successful visualization tool: to be so transparent that the users see meaning within their data instead of the software used to display it.</p><p>After their initial positive response, our customers began to express dissatisfaction with the artifacts in the display. They reported that the moiré patterns and discontinuities in the stress net made it difficult to interpret what was really present in the data. This dissatisfaction led eventually to the hybrid CPU/GPU implementation. The drastic reduction of artifacts in that version enabled our customers to discover a feature in the data (the "wake" of the crack visible in <ref type="figure" target="#fig_0">Figures 1, 7</ref>, and 10) that had been obscured by artifacts in the GPU-only implementation. They have since asked us to incorporate stress nets into Paraview, an  <ref type="table">Table 1</ref>: Performance statistics for the GPU and CPU implementations of stress nets on a data set containing 342,000 points and 8 derived quantities. Memory use is measured when the net is visible on the screen with equal density in both implementations. Startup time is the length of time between loading a data set and the appearance of the stress net. The CPU implementation achieves a much higher frame rate because it does not incur the overhead of vertex and fragment programs.</p><p>open-source visualization platform used within our laboratory, so that our method can be applied to other data in other domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>We have presented stress nets, a novel visualization algorithm for fields of 2D tensors, and discussed the advantages and disadvantages of two different methods for generating and rendering the net. Our first implementation, using only the GPU, automatically recomputed the net to fit the visible extent of the data exactly. However, the streaming nature of programmable graphics hardware resulted in artifacts that ultimately proved unacceptable to our customers. A second implementation using the GPU for the scalar field and the CPU for the stress net yielded faster rendering and much higher image quality at the cost of increased preprocessing time and memory overhead. We incorporated stress nets into a tool used to explore the results of a simulation of crack propagation. This tool allowed our customers to identify discrepancies between their simulation results and the predictions made by the prevailing model in the literature. Future investigation of these discrepancies may lead to unifying revisions of conflicting continuum solutions and/or changes in the theory by which interatomic forces are converted to stress tensors in atomistic simulations. We consider the use of our tools to advance a completely separate area of science to be a validation of the utility of our approach.</p><p>Stress nets are applicable to a broader range of tensor visualization problems, including nearly any problem that involves a symmetric tensor field or, with some revision, even non-symmetric tensor fields as well. Within the geomechanics arena, drilling paths for oil wells must closely follow the eigenvectors associated with maximum stress to ensure well-bore viability. Stress nets can provide a simple and intuitive view of these preferred paths. In biomechanics, we could apply stress nets to visualize the stresses and strains operating within the heart, and "diffusion nets" can be generated in perfect analogy with stress nets. As described here, our method applies to any 2D symmetric tensor field.</p><p>Stress nets may be extended to support 2D non-symmetric tensor fields whose eigenvectors are not orthogonal. The key is to compute a set of lines for the major and minor fields of eigenvectors separately, then overlay them on one another for display. In the GPU implementation, the net texture would change to a line segment instead of a cross. Two separate texture lookups would be required: one for each field of eigenvectors. The fragment program would combine both textures with the scalar field just as it currently does the single net texture. The CPU/GPU implementation needs no modification to its algorithm, as its two sets of streamlines are already computed separately using the major and minor eigenvectors.</p><p>These examples raise the question of how best to extend our method into three dimensions. The simplest approach may be to draw the net on a cutting plane or some other surface. A stress net itself can be computed in three (or more) dimensions with little change to the algorithm, but visualizing the results presents a challenge. We note that the problem of robust visualization methods for 3D vector flow fields is still an active area of research. We could also compute stress nets at several different resolutions simultaneously using a method similar to the one presented by Jobard and Lefer <ref type="bibr" target="#b14">[14]</ref> to reduce the number of times the net must be recomputed during viewing.</p><p>Finally, our method does not preclude the simultaneous use of other tensor visualization methods. A stress net could be overlaid on a topological decomposition of a tensor field, such as the methods described by Hesselink et al., or used in concert with an alternate display method such as Mohr diagrams. We feel that multiple linked views of a single data set are a promising area for future research.   <ref type="figure" target="#fig_0">Figure 12</ref>: When the user zooms into the data, the moiré patterns in the GPU implementation disappear but the stress net appears to break. This happens because the GPU has no way to ensure continuity of the net from cell to cell. The CPU implementation remains continuous at all scales. <ref type="figure" target="#fig_0">Figure 11</ref>: Moiré artifacts appear in the GPU implementation when the cells of the stress net are large compared to the individual data cells. This is an extreme example. These artifacts are not present in the CPU/GPU implementation.    <ref type="figure" target="#fig_6">Figure 8</ref>. This is the asymptotic, analytical solution in the literature. Our customers expected to see this structure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GPU implementation CPU/GPU implementation</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>A stress net for one time step in an atomistic simulation of crack propagation. This image shows the directions of maximum shear (the white grid lines) and the magnitude of the deviatoric component of the stress tensor (underlying color).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>Simulation of crack propagation. A 2D slab of material is stressed by pulling vertically on faces A and B. When the tension exceeds the material's failure threshold, a crack beginning at point C will propagate from left to right. A notional stress net for a circular field. We attempt to keep the size of the cells of the net constant across space to avoid crowding the display.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>the grid cells square in screen space screenPosition.x *= windowAspectRatio; // Normalize after projection screenPosition /= screenPosition.w; float4 normalizedPosition = screenPosition -netOrigin; float4 netTextureCoords = normalizedPosition * netRotation; netTextureCoords *= textureScale; Pseudocode for vertex and fragment programs that generate the stress net in the GPU implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Texture map used for the GPU implementation of the stress net. Black areas of the texture are transparent and allow the underlying scalar field to show through. White areas are opaque.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 (Figure 6 (</head><label>66</label><figDesc>a): Scalar field in GPU implementation b): GPU stress netFigure 6(c): Combined scalar field and stress net for the GPU-only implementation. Although it is possible to discern the orientation of the stress field at any point, the rendering artifacts make it difficult to observe its behavior over a wide region.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 (Figure 7 (</head><label>77</label><figDesc>a): Scalar field in CPU/GPU implementation b): CPU/GPU stress netFigure 7(c): Combined scalar field and stress net in the CPU/GPU implementation. Computation of the stress net itself is moved back onto the CPU. The rendering artifacts have disappeared, leaving the features of the data much clearer at the cost of some additional preprocessing. GPU implementation CPU/GPU implementation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>This style of orientation plot was in use by our customers prior to our development of stress nets. Each glyph corresponds to a single data point. The crack tip is in the center of the image. The discontinuous glyphs make it difficult to discern the structure of the changes in the tensor field.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 :</head><label>10</label><figDesc>Stress net created from atomistic simulation data. It differs substantially from the predicted structures. The angles around the crack tip (again, in the center of the image) differ from predictions. The structures in the crack's wake, spreading diagonally up and down to the left of the crack, are not present at all in the analytical solution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Stress net created from the tensor field shown in</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0" />
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Crack-Tip Plasticity for Rapid Crack Propagation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Achenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Dunayevsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Fracture Research (Fracture 81) 5, ICF5</title>
		<imprint>
			<date type="published" when="1981" />
			<biblScope unit="page" from="2205" to="2213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Anisotropic Polygonal Remeshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Alliez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cohen-Steiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olivier</forename><surname>Devillers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Lévy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathieu</forename><surname>Desbrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Transactions on Graphics (Proceedings of SIGGRAPH 2003)</title>
		<meeting><address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003-07" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="485" to="493" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jasmine</forename><surname>Blanchett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Summerfield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">C++ GUI Programming with Qt</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<date type="published" when="2004-01" />
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interactive deformations from tensor fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ed</forename><surname>Boring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization<address><addrLine>Research Triangle Park, North Carolina</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="297" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leith</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 1993 Proceedings)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1993-08" />
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="263" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Visualizing of Geologic Stress Perturbations using Mohr Diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patricia</forename><surname>Crossno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">H</forename><surname>Rogers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rebecca</forename><forename type="middle">M</forename><surname>Brannon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Coblentz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joanne</forename><forename type="middle">T</forename><surname>Fredrich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint/>
	</monogr>
	<note>To appear in</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Visualizing secondorder tensor fields with hyperstreamlines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thierry</forename><surname>Delmarcelle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lambertus</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="25" to="33" />
			<date type="published" when="1993-07" />
			<publisher>IEEE Computer Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A unified approach to the design of visualization software for the analysis of field problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">R</forename><surname>Dickinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Three-Dimensional Visualization and Display Technologies, SPIE Proceedings</title>
		<imprint>
			<date type="published" when="1989-01" />
			<biblScope unit="volume">1083</biblScope>
			<biblScope unit="page" from="173" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Visualization techniques for engineering mechanics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">B</forename><surname>Haber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Systems in Engineering</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="37" to="50" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The topology of symmetric, second-order 3D tensor fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lambertus</forename><surname>Hesselink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yingmei</forename><surname>Lavin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="1997-03" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast Computation of Generalized Voronoi Diagrams using Graphics Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><surname>Hoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Culver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Keyser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinesh</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;99</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m">Conference Proceedings)</title>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1999-08" />
			<biblScope unit="page" from="277" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Physically Based Methods for Tensor Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ingrid</forename><surname>Hotz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Louis</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boris</forename><surname>Jeremic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization<address><addrLine>Austin, Texas</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="2004-10" />
			<biblScope unit="page" from="123" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Creating evenly-spaced streamlines of arbitrary density</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilfrid</forename><surname>Lefer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th Eurographics Workshop on Visualization in Scientific Computing</title>
		<meeting><address><addrLine>Boulogne-sur-Mer, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-04" />
			<biblScope unit="page" from="45" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multiresolution flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilfrid</forename><surname>Lefer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9thth International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision (WSCG &apos;01)</title>
		<meeting>the 9thth International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision (WSCG &apos;01)<address><addrLine>Plzen, Czech Republic</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Superquadric Tensor Glyphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><surname>Kindlmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Joint Eurographics -IEEE TCVG Symposium on Visualization</title>
		<editor>O. Deussen, C. Hansen, D. A. Keim, and D. Saupe</editor>
		<meeting><address><addrLine>Konstanz, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Visualization blackboard: Visualizing gradients in composite design and fabrication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ron</forename><forename type="middle">D</forename><surname>Kriz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">H</forename><surname>Glaessgen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Macrae</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="10" to="13" />
			<date type="published" when="1995-11" />
			<publisher>IEEE Computer Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A probe for local flow field visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Willem</forename><forename type="middle">C</forename><surname>De Leeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarke</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th conference on Visualization &apos;93</title>
		<meeting>the 4th conference on Visualization &apos;93</meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="39" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Asymptotic analysis of steady dynamic crack growth in an elastic/plastic material</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Leighton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Champion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">B</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mech. Phys. Solids</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page">541</biblScope>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Will</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ken</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bill</forename><surname>Lorensen</surname></persName>
		</author>
		<title level="m">The Visualization Toolkit</title>
		<imprint>
			<publisher>Pearson Education, Inc</publisher>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Shreiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mason</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jackie</forename><surname>Neider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OpenGL Programming Guide</title>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
	<note>Fourth Edition</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Visualizing Mesh Adaptation Metric Tensors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julien</forename><surname>Ko-Foa Tchon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marie-Gabrielle</forename><surname>Dompierre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ricardo</forename><surname>Vallet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Camarero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th international Meshing Round Table</title>
		<meeting>the 13th international Meshing Round Table<address><addrLine>Williamsburg, Virginia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="353" to="363" />
		</imprint>
		<respStmt>
			<orgName>Sandia National Laboratories</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Tensor topology tracking: A visualization method for time-dependent 2D symmetric tensor fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EG 2001 Proceedings</title>
		<editor>A. Chalmers and T.-M. Rhyne</editor>
		<imprint>
			<publisher>Blackwell Publishing</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="461" to="470" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Image-guided streamline placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Turk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 96</title>
		<meeting>SIGGRAPH 96<address><addrLine>New Orleans, Louisiana</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="453" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A flow-guided streamline seeding strategy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Verma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization<address><addrLine>Salt Lake City, Utah</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="163" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Tensorlines: Advection-diffusion based propagation through diffusion tensor fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">M</forename><surname>Weinstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><forename type="middle">L</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">C</forename><surname>Lundberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Visualization &apos;99</title>
		<meeting>of IEEE Visualization &apos;99<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="1999-10" />
			<biblScope unit="page" from="249" to="253" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Streamtubes and streamsurfaces for visualizing diffusion tensor MRI volume images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">T</forename><surname>Curry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">S</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">H</forename><surname>Laidlaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="454" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">HyperLIC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoqiang</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;03</title>
		<meeting>IEEE Visualization &apos;03<address><addrLine>Seattle, WA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="249" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Oriented Tensor Reconstruction: Tracing Neural Pathways from Diffusion Tensor MRI</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leonid</forename><surname>Zhukov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization<address><addrLine>Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="2002-10" />
			<biblScope unit="page" from="387" to="394" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
