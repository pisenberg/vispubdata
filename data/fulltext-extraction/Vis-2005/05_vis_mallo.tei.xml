<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Illuminated Lines Revisited</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ovidio</forename><surname>Mallo</surname></persName>
							<email>ovidiom@student.ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><surname>Peikert</surname></persName>
							<email>peikert@inf.ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Sigg</surname></persName>
							<email>sigg@inf.ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filip</forename><surname>Sadlo</surname></persName>
							<email>sadlof@inf.ethz.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zürich</surname></persName>
						</author>
						<title level="a" type="main">Illuminated Lines Revisited</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Picture/Image Generation I.3.3 [Computer Graphics]: Picture/Image Generation-Viewing algorithms</term>
					<term>I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color, shading, shadowing, and texture</term>
					<term>I.3.8 [Computer Graphics]: Applications</term>
					<term>Field lines, illumination, vector field visualization, texture mapping, graphics hardware</term>
				</keywords>
			</textClass>
			<abstract>
				<p>For the rendering of vector and tensor fields, several texturebased volumetric rendering methods were presented in recent years. While they have indisputable merits, the classical vertex-based rendering of integral curves has the advantage of better zooming capabilities as it is not bound to a fixed resolution. It has been shown that lighting can improve spatial perception of lines significantly, especially if lines appear in bundles. Although OpenGL does not directly support lighting of lines, fast rendering of illuminated lines can be achieved by using basic texture mapping. This existing technique is based on a maximum principle which gives a good approximation of specular reflection. Diffuse reflection however is essentially limited to bidirectional lights at infinity. We show how the realism can be further increased by improving diffuse reflection. We present simplified expressions for the Phong/Blinn lighting of infinitesimally thin cylindrical tubes. Based on these, we propose a fast rendering technique with diffuse and specular reflection for orthographic and perspective views and for multiple local and infinite lights. The method requires commonly available programmable vertex and fragment shaders and only two-dimensional lookup textures.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>A core topic of scientific visualization is the representation of vector and tensor fields in three-dimensional space. The dimensionality of the problem forbids a direct visualization such as color coding and requires an abstraction to be made, classically either arrows or integral curves. The latter kept their place in scientific visualization even though a wide spectrum of innovative techniques have evolved over the years (see e.g. <ref type="bibr" target="#b10">[11]</ref>). The reason is certainly that field lines have a physical meaning for most kinds of simulation or measurement data such as electric and magnetic fields, velocity and vorticity fields. Beyond field lines, streaklines and trajectories can be used for visualizing transient flow, whereas integral curves of eigenvectors is a way of visualizing tensor fields.</p><p>While explicit computation of field lines has been practiced since the early days of scientific visualization, newer techniques provide an implicit way of visualizing field lines. Crawfis and Max <ref type="bibr" target="#b3">[4]</ref> were the first to adapt direct volume rendering to vector fields. A few years later, the line integral convolution method of Cabral and Leedom <ref type="bibr" target="#b2">[3]</ref> was extended to three dimensions for volume rendering by Interrante and Grosch <ref type="bibr" target="#b5">[6]</ref>. More recently, a texture-based method exploiting programmable graphics hardware was presented by Li et al. <ref type="bibr" target="#b7">[8]</ref>. For the visualization of tensor fields, methods based on anisotropic volume rendering have been developed by Sigfridsson et al. <ref type="bibr" target="#b13">[14]</ref> and by Schussman and Ma <ref type="bibr" target="#b12">[13]</ref>, the latter being also applicable to general sets of lines.</p><p>In other areas of computer graphics, the display of lines in space is of much less importance nowadays. This probably explains why graphics libraries such as OpenGL do not offer an automatic access to high-quality rendering of polylines comparable to that of polygonal surfaces. In fact, OpenGL's entire lighting system is targeted at polygons. But it is obvious that lighting is as important for the spatial perception of line bundles as it is for surfaces. The rendering of lines as tubes is a theoretical solution but in practice it is too costly and produces poor quality caused by thin elongated polygons. Nevertheless, the cylindrical tube is the basis for two line rendering techniques that have been described in literature. Banks <ref type="bibr" target="#b0">[1]</ref> introduced the idea of maximizing the reflected light over the perimeter of an infinitesimally thin cylinder, treating diffuse and specular reflection separately. Zöckler, Stalling and Hege <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b14">15]</ref> found a fast way of rendering polylines illuminated according to this maximum reflection principle in OpenGL. Their method requires only 2D textures and texture transformations, concepts that were commonly available on graphics cards of that time. Under these hardware constraints, their method is probably the optimal tradeoff between speed and quality. The idea of using texture transformations for lighting has been studied in the context of polygon rendering by Heidrich and Seidel <ref type="bibr" target="#b4">[5]</ref>. A variation of the maximum reflection illumination model has been applied to the visualization of diffusion tensor imaging data by Wenger et al. <ref type="bibr" target="#b15">[16]</ref>.</p><p>The maximum reflection only approximates the reflection from the cylinder as calculated by integrating over its perimeter. In the case of high gloss specular reflection, the approximation works Please see supplementary material on conference DVD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Visualization 2005</head><p>October 23-28, Minneapolis, MN, USA 0-7803-9462-3/05/$20.00 ©2005 IEEE.</p><p>quite well since the angles near the maximum contribute most to the integral. The method produces best results if the reflection type is chosen to be mostly specular. Diffuse reflection is not well approximated by the maximum which is not even sensitive to the sign of the light direction. This means that any (infinite) light source is effectively bidirectional, in the sense that there is a second light source in the opposite direction. Bidirectional lights are less disturbing if the light direction is close to the viewing direction. In fact, the use of a headlight is also recommended in <ref type="bibr" target="#b14">[15]</ref>.</p><p>As an alternative to the maximum reflection principle, cylinder averaging can be used for illumination of lines. Here, the spatial curve is treated as the limit of a cylindrical tube of a radius approaching zero. The cylinder is considered opaque and has therefore self-occlusion which eliminates much of the diffusely reflected light. Diffuse and specular reflection are calculated by integrating over the visible part of the perimeter. Such a lighting model has been used by Schussman and Ma <ref type="bibr" target="#b12">[13]</ref>. The diffuse component of their model is a view dependent version of the one introduced by Kajiya and Kay <ref type="bibr" target="#b6">[7]</ref>. Early work on numerically computed diffuse and specular reflection from cylinders was done by Miller <ref type="bibr" target="#b8">[9]</ref> for the rendering of hair and by Poulin and Fournier <ref type="bibr" target="#b11">[12]</ref> for the purpose of modeling surface anisotropy.</p><p>Illuminated lines based on maximum reflection was an optimal way of utilizing a past generation of graphics hardware. It is the goal of this work to find out how illuminated lines can be improved with the features offered by current graphics cards. We aim at line rendering at a speed and quality comparable to standard OpenGL rendering of polygons. Therefore, our focus is on efficiency, not on realistic lighting in a physical sense. Our contributions are simplified expressions for cylinder averaging, allowing the computation of diffuse and specular reflection for orthographic and perspective views, multiple local and infinite lights and variable gloss without the need for 3D textures. We implemented our polyline rendering as a replacement for OpenGL's glMultiDrawArrays function, making it easy to switch between standard rendering and illuminated lines. Finally, we demonstrate on a few examples how the improved diffuse reflection can help to better perceive spatial structures visualized by bundles of field lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">LINE ILLUMINATION</head><p>If a point P on a surface is to be lit, the standard Phong <ref type="bibr" target="#b9">[10]</ref> and Phong/Blinn <ref type="bibr" target="#b1">[2]</ref> lighting models require besides the material and light properties the three unit vectors V (pointing from P towards the camera), L (pointing from P towards the light source) and N (oriented surface normal). The Phong lighting model for a single white light source and a single channel is </p><formula xml:id="formula_0">I = I a + I d + I s = k a + k d L • N + k s (V • R) n<label>(1)</label></formula><formula xml:id="formula_1">H = (V + L) / V + L . It is I = I a + I d + I s = k a + k d L • N + k s (H • N) n<label>(2)</label></formula><p>and approximates Eq. 1 with a specular exponent of n 4 . This model is used by OpenGL as it is more efficiently computed.</p><p>For a point P on a curve in space, the situation differs in that a curve does not have a uniquely defined normal. Lighting must instead be computed from the three unit vectors V, L and the tangent T to the curve at the point P. Throughout this paper we will use a curve/view-aligned coordinate frame (T, N, B), with the binormal B = T × V/||T × V|| and the normal N = B × T. If the curve is understood as an infinitesimally thin cylinder, it has at P the normal vectors N θ = N cos θ + B sin θ where the phase is chosen such that N 0 = N. This is illustrated in <ref type="figure" target="#fig_1">Fig. 2</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Maximum reflection principle</head><p>Banks <ref type="bibr" target="#b0">[1]</ref> resolved the ambiguity in the choice of the normal vector by choosing those angles θ for which the dot products occurring in the diffuse and specular terms of Eq. 1 are maximal. In general, two different angles result for the diffuse and the specular term. Their derivation is recapitulated in the next two subsections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">Diffuse term</head><p>Calculation of the diffuse reflection is based on the assumption of a Lambertian reflector, meaning that diffuse reflection does not depend on the viewing direction. According to Phong's model, diffuse reflection is L • N θ , the product of the light vector and the facet normal. In the basis (T, N, B), these vectors are</p><formula xml:id="formula_2">L = ⎛ ⎝ L T L N L B ⎞ ⎠ = ⎛ ⎜ ⎜ ⎝ L T 1 − L 2 T cos α 1 − L 2 T sin α ⎞ ⎟ ⎟ ⎠ N θ = ⎛ ⎝ 0 cos θ sin θ ⎞ ⎠ (3)</formula><p>where α is the angle between N and the projection of L onto the (N, B) plane. The dot product of the two vectors is</p><formula xml:id="formula_3">L • N θ = 1 − L 2 T cos(θ − α).<label>(4)</label></formula><p>The maximum is reached at θ = α, making the diffuse term  <ref type="bibr" target="#b5">6)</ref> and the reflection of the vector</p><formula xml:id="formula_4">I d = k d 1 − L 2 T .<label>(5)</label></formula><formula xml:id="formula_5">V = ⎛ ⎜ ⎝ V T 1 −V 2 T 0 ⎞ ⎟ ⎠<label>(</label></formula><formula xml:id="formula_6">L at N θ R θ = −L + 2(L • N θ )N θ = ⎛ ⎜ ⎜ ⎝ −L T 1 − L 2 T cos(2θ − α) 1 − L 2 T sin(2θ − α) ⎞ ⎟ ⎟ ⎠ . (7)</formula><p>The dot product to be maximized is then</p><formula xml:id="formula_7">V • R θ = −V T L T + 1 −V 2 T 1 − L 2 T cos(2θ − α)<label>(8)</label></formula><p>and its maximum is reached at θ = α/2, making the specular term:</p><formula xml:id="formula_8">I s = k s −V T L T + 1 −V 2 T 1 − L 2 T n .<label>(9)</label></formula><p>In <ref type="bibr" target="#b0">[1]</ref> Eq. 9 is given with opposite signs. The first sign gets positive due to the different definition of L, but the sign preceding the square roots is nevertheless positive. The expression is given correctly in <ref type="bibr" target="#b14">[15]</ref> though its derivation does not apply to the general case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.3">Rendering</head><p>As is described in <ref type="bibr" target="#b14">[15]</ref>, the diffuse and specular parts of this lighting model can be implemented in OpenGL for standard shaders. 3D textures can be avoided by restricting to orthographic view and lights at infinity. Then the vectors V and L are constants. The three components of the tangent T are taken as original texture coordinates from which the dot products L • T and V • T are computed by multiplying with an appropriate texture transformation matrix. Finally, the diffuse and specular intensities are looked up in textures built up from Eq. 5 and 9, respectively.</p><p>The main drawback of lighting based on the maximum principle is its unrealistic modeling of diffuse reflection. As is shown in <ref type="figure" target="#fig_2">Fig. 3</ref>, lateral lighting from the left and from the right cannot be discerned if only diffuse reflection is present. A more realistic diffuse lighting of lines has to be view dependent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Cylinder averaging</head><p>Schussman and Ma <ref type="bibr" target="#b12">[13]</ref> calculate diffuse and specular reflection by integrating the reflection from the infinitesimally thin facets of a cylinder. The range of integration consists of those facets which are both visible and lit. It depends on the angle α between the projections of V and L onto the (N, B) plane. To get simpler formulas, we can force α to lie between 0 and π by making the third component of L nonnegative, i.e. by possibly reflecting L at the (T, V) plane. This way the integration bounds are always α − π 2 and π 2 . The contribution of each facet to the total reflected light depends on the projected area as seen from the V direction. For a cylinder of unit height and unit radius, the facet perpendicular to N θ is projected to an area of</p><formula xml:id="formula_9">V • (N cos θ + B sin θ )dθ = V • N cos θ dθ .<label>(10)</label></formula><p>The total projected area is 2V • N, therefore the integrand has to be weighted with cos θ 2 . </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Diffuse term</head><p>The diffuse term for an infinitesimally thin cylinder facet is given by Eq. 4. As explained above, this term has to be multiplied with the weight cos θ 2 and integrated from α − π 2 to π 2 . The integral can be resolved analytically, giving:</p><formula xml:id="formula_10">I d = k d π/2 α−π/2 (L • N θ ) cos θ 2 dθ = k d 1 − L 2 T π/2 α−π/2 cos (θ − α) cos θ 2 dθ = k d 1 − L 2 T sin α + (π − α) cos α 4 .<label>(11)</label></formula><p>An equivalent but less compact expression was published in <ref type="bibr" target="#b12">[13]</ref>. Our expression lets us recognize the square root term as obtained with the maximum reflection principle (Eq. 5), but multiplied with a factor between 0 and π 4 depending on the angle α between projected view and projected light. By taking the dot product of L and V given in Eq. 3 and Eq. 6, respectively, this angle can be computed as</p><formula xml:id="formula_11">α = arccos V • L −V T L T 1 −V 2 T 1 − L 2 T .<label>(12)</label></formula><p>In the special case of constant vectors V and L (i.e. for orthographic view and directional light) the technique of <ref type="bibr" target="#b16">[17]</ref> can be applied. First, V T and L T are computed by a texture transform from T, then I d is looked up in a 2D texture.</p><p>In the general case, V and L must be computed per vertex which can be done in a vertex program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Specular term</head><p>Cylinder averaging of the specular term can be done for both the Phong and the Phong/Blinn model. However, both lead to integrals which need to be solved numerically. In the case of the Phong model, the integral of Eq. 8 depends on the three parameters V T , L T and α if the specular exponent n is considered fixed. The three parameters describe the relative orientation of T, V and L and are independent in general. If the numerical integrals are precomputed and stored in lookup textures, this would imply 3D textures which we find an inappropriate use of resources for the sole purpose of line illumination.</p><p>Therefore, we follow <ref type="bibr" target="#b12">[13]</ref> and use the Phong/Blinn model leading to simpler expressions and finally to 2D textures only. From V and L we first compute the halfway vector</p><formula xml:id="formula_12">H = V + L V + L = ⎛ ⎜ ⎜ ⎝ H T 1 − H 2 T cos β 1 − H 2 T sin β ⎞ ⎟ ⎟ ⎠ .<label>(13)</label></formula><p>Note that the angle β between projected view and projected halfway vector can vary between 0 and π, (not just π 2 ) 1 . Using the weighting term and the integration bounds as above, the specular term can be calculated as:</p><formula xml:id="formula_13">I s = k s π/2 α−π/2 (H • N θ ) n cos θ 2 dθ = k s 1 − H 2 T n π/2 α−π/2 cos n (θ − β ) cos θ 2 dθ .<label>(14)</label></formula><p>Further simplification yields:</p><formula xml:id="formula_14">I s = k s 1 − H 2 T n sin β 2(n + 1) sin n+1 β − sin n+1 (α − β ) + cos β 2 (S n+1 (π − α + β ) − S n+1 (β ))<label>(15)</label></formula><p>where the function  <ref type="bibr" target="#b15">(16)</ref> and <ref type="bibr" target="#b16">(17)</ref> in <ref type="bibr" target="#b12">[13]</ref> up to the plus signs in the integration bounds which should be minus signs.</p><formula xml:id="formula_15">S n+1 (x) = x 0 sin n+1 tdt<label>(16)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Brightness adjustment</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Excess brightness</head><p>Diffuse and specular lighting based on maximum reflection leads to high average brightness of rendered scenes. To compensate for this, Banks <ref type="bibr" target="#b0">[1]</ref> proposed an artificial brightness reduction factor. Lighting based on cylinder averaging does not have this problem. By definition of the lighting model, a random set of lines has the same brightness distribution as a random set of polygons. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Stretching of dynamic range</head><p>Because of the averaging process in the infinitesimal cylinder method, both the diffuse and the specular term have a maximum less than 1. This offers the option to stretch the dynamic range by multiplying the reflection term with a constant, which has the effect of brighter light sources. For the diffuse term (Eq. 11) the maximum is π 4 at α = 0, L T = 0, k d = 1. Therefore, it is possible to stretch the dynamic range by multiplying Eq. 11 with <ref type="bibr" target="#b3">4</ref> π . Likewise, the specular term (Eq. 14) has a maximum at k s = 1,</p><formula xml:id="formula_16">H T = α = β = 0, of √ π 2 Γ n + 1 2 Γ n + 3 2 .<label>(17)</label></formula><p>This is a monotonically decreasing function (see <ref type="figure" target="#fig_3">Fig. 4</ref>) which simplifies to This maximum decreases rapidly with increasing n, therefore it is advisable to stretch the dynamic range at least for the typically high specular exponents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">IMPLEMENTATION</head><p>The lighting model presented in this paper has been implemented in C++ on top of the OpenGL graphics library. Since our main goal was to allow for a transparent and seamless integration of our code into already existing applications, the interface provided by our implementation consists of a replacement of the glMultiDrawArrays function which is part of the OpenGL API. This makes it possible to easily switch between standard rendering and illuminated lines.</p><p>As opposed to OpenGL, our lighting model will be evaluated on a per-pixel basis. For maximum performance, this is done by a combination of traditional texture mapping and modern programmable Graphics Processing Units (GPUs).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Lighting Textures</head><p>For evaluating the lighting model, two 2D lighting textures are used, one for the diffuse, the other for the specular component of the lighting model. We will refer to the values stored inside those textures through the functions F d and F s for the diffuse and specular part, respectively. For F d , we have</p><formula xml:id="formula_17">F d (cos α, L T ) = 1 − L 2 T sin α − (π − α) cos α 4 .<label>(18)</label></formula><p>This basically corresponds to the full diffuse term as given in Eq. 11, without the reflection coefficient k d , which is not stored inside the texture. For the specular part, we only store the integral given in Eq. 14 in the texture, which needs to be integrated numerically, since storing the full specular term would require 3D textures to be used. Thus, for F s , we have Note that we use the cosine of α and β instead of the angles themselves for accessing the textures since the arc cosine function is usually not directly supported by programmable GPUs and therefore very slow.</p><formula xml:id="formula_18">F s (cos α, cos β ) = π/2 α−π/2 cos n (θ − β ) cos θ 2 dθ .<label>(19)</label></formula><p>Using these textures, for every incoming fragment with color C in , the final color of the illuminated fragment can be computed as</p><formula xml:id="formula_19">C out = C in (k a + k d F d (cos α, L T )) +k s 1 − H 2 T n F s (cos α, cos β ).</formula><p>(20)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Shader Programs</head><p>For evaluating Eq. 20, we first of all need to compute the tangent vector at each vertex. With today's powerful programmable GPUs, this can be done efficiently at each frame in a vertex program. To do so, for each vertex P i , we pass P i−1 and P i+1 as texture coordinates to our vertex program, where the tangent vector T is then computed as T = (P i+1 −P i−1 )/||P i+1 −P i−1 ||. Of course, this does not work for the first and last vertex of each polyline. For those vertices, the tangent vectors are computed in software. Furthermore, if O is the position of our light, the vertex program computes in camera coordinates the light vector L = O − P and the viewing vector V = −P.</p><p>L, V and T are then passed to a fragment program. Since per-vertex data is only interpolated linearly between vertices before being passed to the fragment processing unit, those vectors need to be normalized at each fragment. After this normalization, the curve/view-aligned coordinate frame (T, N, B) described in section 2 as well as the halfway vector H are computed.</p><p>The expressions needed for accessing the lighting textures according to Eq. 18 and Eq. 19 can then be computed as <ref type="bibr" target="#b1">2</ref> and L T = L • T, which in turn allows us to easily evaluate our lighting model according to Eq. 20.</p><formula xml:id="formula_20">cos α = (L • N)/ 1 − (L • T) 2 , cosβ = (H • N)/ 1 − (H • T)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Multiple Lights</head><p>Throughout the discussion of our lighting model, we have restricted ourselves to the case of a single light source in the scene. Nevertheless, a generalization for supporting multiple lights is straightforward. In Eq. 18 and Eq. 19, we can see that the values stored in the lighting textures are independent of any light source. Therefore, no additional texture resources are needed for supporting multiple lights.</p><p>The vertex program only needs to be changed in that, instead of computing and passing a single light vector L to the fragment program, it has to do so for each light source, yielding a set of light vectors L i .</p><p>In the fragment program, we see that the local coordinate frame (T, N, B) does not need to be computed for each light source, since it only depends on T and V, but the halfway vector and the texture coordinates actually do depend on the light vector L i . The number of light sources must be fixed and is of course limited by performance requirements and size of the fragment program.</p><p>By adding an index i to each expression dependent on the light vector L i , the generalized version of Eq. 20 supporting multiple lights reads</p><formula xml:id="formula_21">C out = C in ∑ i k a i + k d i F d (cos α i , L T i ) + ∑ i k s i 1 − H 2 T i n F s (cos α i , cos β i ).<label>(21)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Depth Sorting</head><p>Data sets which need to be visualized often result from areas such as computational fluid dynamics (CFD) and other numerical simulations, which typically produce a vast amount of data. In such situations, where very dense line bundles need to be rendered, the use of alpha blending can considerably improve the visual perception of the scene. Unfortunately, this makes it necessary to depth-sort the scene as mentioned in <ref type="bibr" target="#b14">[15]</ref>, since alpha blending only yields correct results if the objects are drawn in back to front order. Although this need for sorting the scene is not limited to the rendering of lines, but a general issue related to alpha blending itself, we have integrated a sorting routine in our implementation. We have opted for performing a full depth sort instead of using approximations like the one described in <ref type="bibr" target="#b14">[15]</ref> where real sorting is actually avoided.</p><p>For the actual sorting, we use the sort function provided by the STL library of the C++ programming language. For simplicity reasons, we sort the individual line segments of the polylines according to the averaged depth of their end points.</p><p>There is another less apparent scenario which is more tightly related to line rendering and which makes depth sorting necessary: antialiasing. Due to the way antialiased lines are realized in rendering APIs like OpenGL, i.e. using alpha blending for smoothing out the edges of the lines, depth sorting of the scene becomes necessary although no transparent lines are actually drawn. Since antialiasing is visually very important when rendering lines and since full depth sorting is by far the most expensive step during the rendering process, it is an option to replace the OpenGL line antialiasing mechanism by a full scene antialiasing technique using multisampling. This makes depth sorting superfluous and yields good results at significantly higher frame rates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Vertex Buffer Objects</head><p>Usually, the rendering of lines does not involve a complex setup of the rendering pipeline, but the problem typically consists in an efficient visualization of a large amount of data. In such situations, the bottleneck usually lies in sending the data from main memory to the GPU. With the traditional use of vertex arrays (VAs), this requires sending the data at each frame over the bus to the GPU, even for static scenes.</p><p>To avoid this, at least for static datasets, we have found the concept of so called vertex buffer objects (VBOs) very useful. While VBOs are conceptually very similar to VAs, the data stored in VBOs is cached in high-performance graphics memory directly on the GPU, thereby increasing the rate of data transfers during the rendering process. The use of VBOs often led to important performance gains, as can be seen in <ref type="table" target="#tab_4">Table 1</ref>, by comparing the "default" and "dynamic data" rows. <ref type="table" target="#tab_4">Table 1</ref> also reveals, that the actual benefit of using VBOs is GPU specific. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>For validating our implementation we selected a number of datasets with different characteristics in terms of size and distribution of lines in space. The Lorenz attractor u = (10(y − x), 28x − y − xz, − 8 3 z + xy) was chosen for its near planar substructures near its two foci. It is visualized by uniformly seeded streamlines which are colored by seed location. The electrostatic field of the water molecule is another simple test dataset which we chose for its high degree of symmetry. It is computed by the superposition of three potentials of point charges and the field lines are seeded on a recursively subdivided sphere centered at the oxygen atom. The draft tube dataset is computed from industrial CFD data. As a test visualization, instantaneous streamlines are seeded on seven rings close to the (roughly conical) hub of the rotor. For all three datasets, the classical fourthorder Runge-Kutta integration was used to generate polylines from the given seed points.</p><p>In <ref type="figure" target="#fig_5">Fig. 5</ref> the three datasets are rendered with illumination based on maximum reflection and on cylinder averaging. In all image pairs the expected good positional match of the specular highlights between the two methods is confirmed. The highlights were adjusted to roughly equal brightness by stretching the dynamic range as described in section 2.3.2. This makes the different distribution of diffuse reflection clearly visible in that there are more and larger dark regions in the right column of images. Even though this difference is present in all three image pairs, from the point of view of spatial perception the improvement is most noticeable in some areas of the draft tube data where the effect of <ref type="figure" target="#fig_2">Fig. 3</ref> comes into play. The same data is visualized in <ref type="figure" target="#fig_0">Fig. 1</ref> with fewer but wider lines and a different light position.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Performance</head><p>We measured frame rates on two PCs with ATI Radeon X800 Pro and nVidia GeForce 6800 graphics cards. The CPUs were Pentium 4 with 3.0 and 3.2 GHz, respectively. The datasets are those depicted in <ref type="figure" target="#fig_5">Fig. 5</ref> ranging from 600,000 to 1,431,599 vertices. We placed the objects such that the image was roughly filled, but such that no frustum culling occurred.</p><p>In <ref type="table" target="#tab_4">Table 1</ref> the "default" rendering mode refers to a 512x512 pixel image rendered with maximal multisampling (6x for ATI, 8x for nVidia) and using vertex buffer objects. In this mode, interactive frame rates can be obtained even with large datasets.</p><p>In the "dynamic data" mode VBOs are not used and the vertex arrays are filled with new data for each frame. The higher frame rates achieved with the default mode demonstrate mostly the benefits of VBOs which pays off especially on the ATI system.</p><p>The "1024x1024" mode is the same as "default" up to the image resolution. It is remarkable that even though most of the processing is done within the fragment program, the frame rates drop by less than a third when the resolution is doubled.</p><p>In "high quality" mode, lines are semitransparent and antialiased and consequently also depth sorted. This mode is required only if multisampling is not available. Due to the sorting step, it is not suitable for interactive use, but can serve for redrawing a static scene.</p><p>"No multisampling" is the same as "default" but with multisampling turned off. The frame rates indicate that it is not worth turning multisampling off.</p><p>In "directional" mode, illumination is computed for constant V and L which is done without vertex/fragment programs. On the nVidia system, this mode is significantly faster than the default mode and is an option if directional light and orthographic viewing is sufficient.</p><p>Finally, "no illumination" simply draws Gouraud shaded lines. As can be seen, the price to pay for line illumination is a factor of about 2 to 6 on our two systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>In this paper, we have presented a method for rendering illuminated lines in three-dimensional space. The method results from a viewdependent lighting model based on averaged Phong/Blinn lighting over the surface of an infinitesimally thin cylinder. Orthographic and perspective views, as well as multiple local and infinite lights are supported.</p><p>We have derived simpler expressions for the given lighting model and implemented it on top of the OpenGL API using traditional resources such as texture mapping, but also exploiting modern hardware capabilities provided by todays graphics processing units, in particular shader programs 2 . Several issues related to the rendering of field lines such as antialiasing, but also depth sorting in conjunction with the use of alpha blending have been discussed, and solutions for an efficient and high-quality rendering have been provided. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Flow in a Francis draft tube visualized by streamlines regularly seeded on a cone and colored by speed. Streamlines are illuminated based on cylinder averaging. In the vertical part of the tube, a vortex rope is visible.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Front and top view of cylinder, unit vectors. Visible sector of diffuse reflection (red arc and lighter shading).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Stack of horizontal sine curves with directional lighting from the right. Left image: Maximum reflection produces bidirectional diffuse lighting (bottom half), a strong specular component is needed to disambiguate light direction (top half). Right image: Cylinder averaging. The light direction is clear even without a specular component (bottom half).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Maximum of specular term as a function of the specular exponent n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Comparison of illumination based on maximum reflection (left) and on cylinder averaging (right). Visualized datasets are (from top): Lorenz attractor, electrostatic field, drafttube</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>where k a , k d and k s denote the ambient, diffuse and specular reflection coefficients and n the specular exponent. R is the reflection of L at N. The intensities I d and I s are clamped between 0 and 1 and in the case of multiple or colored lights they are weighted sums.</figDesc><table><row><cell>The Phong/Blinn model avoids computing R and uses instead</cell></row><row><cell>the halfway vector</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>2.1.2 Specular termThe specular term, if computed according to the Phong model, requires the view vector</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>For actually computing this texture during the preprocessing step, Eq. 15 is used for better efficiency.Evidently, the expressions cos α, cosβ and L T used in Eq. 18 and Eq. 19 all lie in [−1, +1]. Therefore, they need to be range compressed to [0, 1] in order to use them as texture coordinates. If x is any of those expressions, this can simply be done by the transformation (x + 1)/2.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 1 :</head><label>1</label><figDesc>Performance measurements for various rendering modes. Frames per second are given for the ATI (fps 1 ) and nVidia cards (fps 2 ).</figDesc><table><row><cell>Dataset</cell><cell cols="2">Lorenz</cell><cell>El. Field</cell><cell>Draft tube</cell></row><row><cell>Vertices</cell><cell cols="2">600,000</cell><cell>883,564</cell><cell>1,431,599</cell></row><row><cell></cell><cell>fps 1</cell><cell cols="3">fps 2 fps 1 fps 2 fps 1 fps 2</cell></row><row><cell>default</cell><cell cols="4">51.8 22.4 39.4 14.5 25.7 11.7</cell></row><row><cell>dynamic data</cell><cell cols="4">17.0 21.8 16.9 13.6 6.8 10.7</cell></row><row><cell cols="5">1024x1024 pixels 36.1 15.8 26.2 11.1 22.7 9.0</cell></row><row><cell>high quality</cell><cell>5.7</cell><cell cols="3">4.7 3.8 3.0 2.0 1.5</cell></row><row><cell cols="5">no multisampling 58.1 50.5 41.7 21.3 26.8 30.7</cell></row><row><cell>directional</cell><cell cols="4">51.5 79.4 60.2 58.1 34.2 36.1</cell></row><row><cell>no illumination</cell><cell cols="4">94.3 113.6 99.0 78.1 54.3 54.1</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Illumination in diverse codimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;94: Proceedings of the 21st annual conference on Computer graphics and interactive techniques</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="327" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Models of light reflection for computer synthesized pictures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">F</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;77: Proceedings of the 4th annual conference on Computer graphics and interactive techniques</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1977" />
			<biblScope unit="page" from="192" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SIGGRAPH-93: Computer Graphics</title>
		<meeting>of SIGGRAPH-93: Computer Graphics<address><addrLine>Anaheim, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Direct volume visualization of threedimensional vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nelson</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VVS &apos;92: Proceedings of the 1992 workshop on Volume visualization</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Realistic, hardwareaccelerated shading and lighting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Heidrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Peter</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="page" from="171" to="178" />
			<date type="published" when="1999" />
			<publisher>Annual Conference Series</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Strategies for effectively visualizing 3d flow with volume lic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victoria</forename><surname>Interrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chester</forename><surname>Grosch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;97: Proceedings of the 8th conference on Visualization &apos;97</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="421" to="424" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Rendering fur with three dimensional textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Kay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="271" to="280" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Chameleon: An interactive texture-based rendering framework for visualizing three-dimensional vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">D</forename><surname>Bordoloi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="241" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">From wire-frames to furry animals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S P</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings on Graphics interface &apos;88</title>
		<meeting>on Graphics interface &apos;88<address><addrLine>Toronto, Ont., Canada, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>Canadian Information Processing Society</publisher>
			<date type="published" when="1988" />
			<biblScope unit="page" from="138" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Illumination for computer generated pictures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phong</forename><surname>Bui Tuong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="311" to="317" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Feature extraction and visualization of flow fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Frits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helwig</forename><surname>Vrolijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">S</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helmut</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Doleisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROGRAPHICS 2002, State of the Art Reports</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="69" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A model for anisotropic reflection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Poulin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alain</forename><surname>Fournier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;90: Proceedings of the 17th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="273" to="282" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Anisotropic volume rendering for extremely dense, thin line data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Schussman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwan-Liu</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;04: Proceedings of the IEEE Visualization 2004 (VIS&apos;04)</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="107" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Tensor field visualisation using adaptive filtering of noise fields combined with glyph rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sigfridsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ebbers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Heiberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wigstrom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="371" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fast display of illuminated field lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Detlev</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Zöckler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Christian</forename><surname>Hege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="118" to="128" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Interactive volume rendering of thin thread structures within multivalued scientific datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Wenger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Keefe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">H</forename><surname>Laidlaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="664" to="672" />
			<date type="published" when="2004-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Interactive visualization of 3d-vector fields using illuminated stream lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Zöckler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Detlev</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Christian</forename><surname>Hege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;96: Proceedings of the 7th conference on Visualization &apos;96</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="107" to="114" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
