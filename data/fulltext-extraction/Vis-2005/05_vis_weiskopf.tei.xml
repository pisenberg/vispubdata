<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Particle and Texture Based Spatiotemporal Visualization of Time-Dependent Vector Fields</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Weiskopf</surname></persName>
							<email>weiskopf@vis.uni-stuttgart.de</email>
							<affiliation key="aff0">
								<orgName type="department">Graphics</orgName>
								<orgName type="laboratory">Usability, and Visualization (GrUVi) Lab</orgName>
								<orgName type="institution">Simon Fraser University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Institute of Visualization and Interactive Systems</orgName>
								<orgName type="institution">University of Stuttgart</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frederik</forename><surname>Schramm</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Institute of Visualization and Interactive Systems</orgName>
								<orgName type="institution">University of Stuttgart</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><surname>Erlebacher</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computational Science and Information Technology</orgName>
								<orgName type="institution">Florida State University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Institute of Visualization and Interactive Systems</orgName>
								<orgName type="institution">University of Stuttgart</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Particle and Texture Based Spatiotemporal Visualization of Time-Dependent Vector Fields</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:40+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color</term>
					<term>shading</term>
					<term>shadowing</term>
					<term>and texture Unsteady flow visualization</term>
					<term>visualization framework</term>
					<term>LIC</term>
					<term>texture advection</term>
					<term>particle systems</term>
					<term>GPU methods</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We propose a hybrid particle and texture based approach for the visualization of time-dependent vector fields. The underlying spacetime framework builds a dense vector field representation in a twostep process: 1) particle-based forward integration of trajectories in spacetime for temporal coherence, and 2) texture-based convolution along another set of paths through the spacetime for spatially correlated patterns. Particle density is controlled by stochastically injecting and removing particles, taking into account the divergence of the vector field. Alternatively, a uniform density can be maintained by placing exactly one particle in each cell of a uniform grid, which leads to particle-in-cell forward advection. Moreover, we discuss strategies of previous visualization methods for unsteady flow and show how they address issues of spatiotemporal coherence and dense visual representations. We demonstrate how our framework is capable of realizing several of these strategies. Finally, we present an efficient GPU implementation that facilitates an interactive visualization of unsteady 2D flow on Shader Model 3 compliant graphics hardware.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Many vector field visualization techniques compute the motion of massless particles along the vector field to obtain characteristic structures like streamlines. With a dense representation like Line Integral Convolution (LIC) <ref type="bibr" target="#b0">[1]</ref>, the domain is densely covered with particle lines to overcome the issue of appropriately choosing seed points for particle tracing.</p><p>In this paper, we focus on the dense visualization of timedependent vector fields. Any dense representation has to address the challenging goal of achieving spatiotemporal coherence. In Section 4, we analyze the strategies followed by previous methods to construct a spatiotemporally coherent evolution of dense line-like visual patterns, such as streamlines, pathlines, or streaklines.</p><p>A generic spacetime framework, as developed in our previous work <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>, is one possible approach for the visualization of timedependent vector fields. This framework builds upon the fact that two types of coherence are important in animated visualizations: spatial coherence, which conveys the structure of a vector field within a single picture by visual patterns, and frame-to-frame coherence, which allows the user to identify the motion of these pat-terns. The spacetime framework provides explicit control over both types of coherence by means of a two-step process. The first step generates continuous trajectories in spacetime to achieve temporal coherence. The second step generates spatial patterns by convolution along another set of paths through the spacetime volume.</p><p>In this paper, we adopt our previous texture-based implementation of the framework <ref type="bibr" target="#b26">[27]</ref> and improve the construction of spacetime trajectories by replacing texture-based backward gathering with particle-based forward integration. The main advantage of forward integration is a significant reduction of computations and memory footprint. A typical speedup is in the range of 10-100 for a comparable visualization quality. In particular, the particle approach is extremely efficient when the density of the representation is low. Another advantage is that constant spatial frequencies can be maintained. We describe two alternative methods to achieve a uniform density of particles over time: The first approach controls particle density by stochastic injection and removal of particles. The second approach checks and adjusts the particle density that is explicitly measured on cells of a uniform grid. In a special case, exactly one particle is kept per cell, leading to the new particle-in-cell advection method.</p><p>The combined particle/texture-based framework retains all important advantages of the previous, purely texture-based implementation <ref type="bibr" target="#b26">[27]</ref>. First, its high degree of flexibility allows us to implement or mimic previous flow visualization methods. Second, high visualization quality is achieved by Lagrangian integration, which avoids artificial blurring inherent to Eulerian or semi-Eulerian methods. Third, a direct mapping to graphics processing units (GPUs) leads to an efficient implementation. The GPU implementation of the particle-based method makes use of a coupling between texture information and vertex processing, which is facilitated by GPUs with Shader Model 3 support.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK</head><p>The discussion of previous work focuses on noise-based and dense representations <ref type="bibr" target="#b9">[10]</ref>. Early texture-synthesis techniques for vector field visualization are spot noise <ref type="bibr" target="#b21">[22]</ref> and LIC <ref type="bibr" target="#b0">[1]</ref>. Although LIC has been extended in various respects, specific methods for timedependent vector fields and animation are particularly interesting in the context of this paper, such as Unsteady Flow LIC (UFLIC) <ref type="bibr" target="#b18">[19]</ref>, Accelerated UFLIC (AUFLIC) <ref type="bibr" target="#b13">[14]</ref>, Dynamic LIC (DLIC) <ref type="bibr" target="#b19">[20]</ref>, and Unsteady Flow Advection-Convolution (UFAC) <ref type="bibr" target="#b26">[27]</ref>.</p><p>A related class of dense representations makes use of texture advection, which represents a dense collection of particles in a texture and transports this texture along the vector field <ref type="bibr" target="#b14">[15]</ref>. Both Lagrangian-Eulerian Advection (LEA) <ref type="bibr" target="#b4">[5]</ref> and Image-Based Flow Visualization (IBFV) <ref type="bibr" target="#b22">[23]</ref> adopt the idea of texture advection to achieve an interactive visualization of 2D unsteady flow. Recent progress in interactive flow visualization has been driven by the development of fast and flexible GPUs <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b28">29]</ref>. GPU-based interactive visualization can be extended to vector fields on curved surfaces <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b27">28]</ref> and in 3D <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b29">30]</ref>. The Chameleon system <ref type="bibr" target="#b12">[13]</ref> allows the user to interactively modify the rendering style</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Visualization 2005</head><p>October 23-28, Minneapolis, MN, USA 0-7803-9462-3/05/$20.00 ©2005 IEEE. of pre-computed particle paths. Efficient particle tracing can be accomplished when a vector field is used to drive the evolution of a GPU-based particle system <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>. Finally, frame-to-frame coherence can be achieved for the animation of geometrically constructed streamlines <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b11">12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">NOMENCLATURE</head><p>This section describes the nomenclature used for vector fields and different types of particle traces throughout this paper. The terminology is adopted from our previous discussion <ref type="bibr" target="#b26">[27]</ref> and allows us to explicitly distinguish between spatial and temporal properties.</p><p>In Euclidean n-dimensional space, a time-dependent vector field is a map u(x,t) that assigns a vector to each point x in space at time t. In what follows, lower-case boldface letters denote vectors or points in nD space R n . Pathlines x path of the vector field are governed by the ordinary differential equation</p><formula xml:id="formula_0">dx path (t; x 0 ,t 0 ) dt = u(x path (t; x 0 ,t 0 ),t) ,<label>(1)</label></formula><p>with the initial condition x path (t 0 ; x 0 ,t 0 ) = x 0 . In general, we adopt a notation in which x(t; x 0 ,t 0 ) describes a curve parameterized by t that yields the point x 0 for t = t 0 .</p><p>Particle motion can be investigated in spacetime, i.e., in a manifold with one temporal and n spatial dimensions. The world linethe spacetime curve-traced out by a particle can be written as Y (t; x 0 ,t 0 ) = (x path (t; x 0 ,t 0 ),t). In general, curves in spacetime are denoted by scripted variables and have n + 1 components: n spatial and one temporal. Y (t; x 0 ,t 0 ) is parameterized by its first argument and passes through the point (x 0 ,t 0 ) when t = t 0 . We use the term trajectory for the spacetime description of a pathline, i.e., a trajectory can be considered as a pathline that is lifted from nD space to (n + 1)D spacetime.</p><p>Besides pathlines, there exist two important additional types of characteristic curves for a time-dependent vector field: streamlines and streaklines. A streamline is defined as the particle path associated with an artificially steady, instantaneous vector field at a fixed physical time τ, which is governed by</p><formula xml:id="formula_1">dx stream (t; x 0 ,t 0 ) dt = u(x stream (t; x 0 ,t 0 ), τ) .</formula><p>Here, t and t 0 are just parameters along the curve and do not have the meaning of physical time. A streakline is produced by dye that is continuously released into a vector field. To obtain the snapshot of a streakline at time t, particles are released from x 0 at times s ∈ [t min ,t] and their positions are evaluated at time t: x streak (s; x 0 ,t) = x path (t; x 0 , s). The streakline is parameterized by s, and t min is the first time that particles are released.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">STRATEGIES FOR UNSTEADY FLOW VISUALIZATION</head><p>Characteristic curves of a flow are good candidates to build dense line-like vector field representations. In fact, pathlines, streamlines, and streaklines are employed in various visualization methods for time-dependent data sets. A fundamental goal of any visualization method is to construct a spatiotemporally coherent visualization. This goal is not trivially achieved; for example, as discussed by Shen and Kao <ref type="bibr" target="#b18">[19]</ref>, a straightforward application of pathlines and streamlines leads to problems with spatial and temporal correlations in a dense representation. A related issue is that pathlines (or streaklines) may intersect each other, which makes them a problematic choice for a consistent representation.</p><p>We discuss several different strategies used in previous work to achieve a useful visualization of unsteady flow. The first strategy lifts the visualization from nD space to (n + 1)D spacetime. This higher-dimensional description avoids the problem of intersecting lines because spacetime trajectories are unique and cannot intersect. The disadvantage of this approach is that the problems are essentially postponed to a later stage of visualization when a final image has to be rendered on a 2D display <ref type="bibr" target="#b30">[31]</ref>.</p><p>The second strategy is to replace characteristic curves by arbitrary curves. A generic curve transported along a vector field is called a timeline. Timelines have the advantage of being temporally coherent, and they do not intersect each other at any time if they do not intersect each other at seed time. However, timelines usually become convoluted after a short advection period. Another problem is that timelines have no direct relationship to the vector field; they do not show direction or magnitude of the flow. Therefore, dense timelines are rarely used.</p><p>A third strategy is to relax the goal of constructing dense linelike structures. LEA <ref type="bibr" target="#b4">[5]</ref> and IBFV <ref type="bibr" target="#b22">[23]</ref>, for example, are based on line integral convolution along (time-reversed) streaklines. Since streaklines may intersect, this strategy leads to visual patterns that are smeared out in more than just a single direction. Similarly, UFLIC <ref type="bibr" target="#b18">[19]</ref> and AUFLIC <ref type="bibr" target="#b13">[14]</ref> generate widened "lines" for unsteady vector fields. Therefore, LEA, IBFV, UFLIC, and AUFLIC achieve a temporally coherent visualization at the cost of a nonconstant resolution of spatial structures. The extent of line widening can be decreased by using short curves, e.g., streaklets or pathlets, which reduce the chance of overlapping and intersecting lines. A sparse representation, e.g., based on Oriented LIC (OLIC) <ref type="bibr" target="#b24">[25]</ref> or dye injection at a few isolated locations, can also be used to reduce the problem of overlapping curves because a few isolated lines can be distinguished even when they intersect.</p><p>The fourth strategy is to relax temporal coherence. A straightforward approach builds an animation from a collection of LIC computations for different time steps. A naive implementation of this method leads to significant flickering. UFAC <ref type="bibr" target="#b26">[27]</ref>, however, reduces or even removes flickering by controlling the length of streamlines as a function of unsteadiness.</p><p>The fifth strategy is to transport line-like visual patterns not along the original vector field, but to choose an evolution along a different vector field. As demonstrated by DLIC <ref type="bibr" target="#b19">[20]</ref>, this approach is useful for vector fields that do not represent a physical motion of material, e.g., for time-dependent electric fields.</p><p>The third strategy is most popular for the visualization of unsteady flow when the range of research and applications is considered. Although previous research addresses issues of temporal and spatial coherence, none of the papers on LEA, IBFV, UFLIC, or AUFLIC describes explicitly what kind of line-like patterns are shown in a single snapshot of an animation. In our previous work <ref type="bibr" target="#b2">[3]</ref>, we have attempted to identify the types of lines generated by these visualization methods because we believe that the characteristics of different methods can be best assessed with an explicit specification of both the temporal and spatial properties.</p><p>The following section describes a visualization framework suitable for the third, fourth, and fifth of the aforementioned strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONTINUOUS FRAMEWORK</head><p>We briefly discuss a generic continuous framework that targets an explicit model of a spatiotemporal visualization. The framework is detailed in our previous work <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>.</p><p>The basic idea of the framework is to adopt a spacetime view on particle tracing. In general, a dense representation of a vector field employs a large number of particles so that the intersection between each spatial slice and the trajectories yields a dense coverage by points. Accordingly, spacetime itself is densely filled by these trajectories Y (s; x,t), associated with the vector field u(x,t).</p><p>Properties that typically comprise just a gray-scale value from the range [0, 1] can be attached to particles to distinguish them from one another. Properties are allowed to change continuously along the trajectory; very often, however, they remain constant. From a collection of trajectories, a property function I(x,t) can be defined by identifying its value with the property of the particle that crosses through the spacetime location (x,t). The function value is set to zero if the location is not covered by a trajectory. By this construction, I(x,t) fills the complete spacetime domain. The continuous behavior of trajectories and their attached properties guarantees that spatial slices through the property field I(x,t) at nearby times are strongly related, i.e., these slices are temporally coherent. An animated sequence built from spatial slices with increasing time results in the motion of particles governed by the vector field.</p><p>Since, in general, different particles are not correlated, spatial slices of the property field do not exhibit any coherent spatial structures. To achieve spatial correlation, a filtered spatial slice D t (x) is defined through the convolution</p><formula xml:id="formula_2">D t (x) = ∞ −∞ k(s)I(Z (t − s; x,t)) ds (2)</formula><p>along Z (s; x,t). The subscript on D t is a reminder that the filtered image depends on time. The kernel k(s) need not be the same for all points on the filtered slice and may depend on additional parameters, such as derived vector field data. Z (s; x,t) can be any path through spacetime and need not be the trajectory of a particle. However, the spatial components of the path are given by the pathlines of some other vector field w(x,t). The temporal component of Z (s; x,t) may depend on s and t.</p><p>An animated visualization is composed of images D t for uniformly increasing time t. The structure of D t is defined by the triplet [I, Z , k], where I is built from trajectories Y . The main advantage of this generic framework is its separate control over the temporal evolution along pathlines of u(x,t) and over the spatial structures that result from convolution along paths based on w(x,t).</p><p>Several parameter choices for this triplet lead to useful visualizations <ref type="bibr" target="#b26">[27]</ref>. For example, the framework-based version of LEA <ref type="bibr" target="#b4">[5]</ref> is realized by setting u(x,t) to the given input vector field v(x,t), and w(x,t) = 0. LEA constructs a dense collection of time-reversed streaklets, adopting the third strategy from Section 4. Similarly, IBFV <ref type="bibr" target="#b22">[23]</ref> is based on a dense collection of streaklets, obtained by using u(x,t) = 0 and w(x,t) = v(x,t). In contrast, UFAC <ref type="bibr" target="#b26">[27]</ref> sets u(x,t) to the input vector field v(x,t) and performs the convolution along instantaneous streamlines at time t of the same field, i.e., w(x,t) = v(x,t ) and Z (s; x,t ) = ( • ,t ). The length of streamlines is controlled by the unsteadiness of the vector field, following the fourth strategy from Section 4. Finally, DLIC <ref type="bibr" target="#b19">[20]</ref> targets the animation of instantaneous streamlines (or fieldlines) of a timedependent vector field. Two different vector fields are used for a framework-based version of DLIC: w(x,t) governs the streamline generation at each time step, while u(x,t) describes the evolution of streamlines. DLIC can be considered as an example of the fifth strategy from Section 4, which transports line-like visual patterns along a separate vector field. Therefore, the framework is capable of implementing three important strategies for time-dependent vector fields, through an appropriate choice of parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">PARTICLE-BASED DISCRETIZATION</head><p>A discretization of the continuous framework allows us to compute visualization images. The property field I, the visualization images D t , and the vector fields are represented by discrete uniform gridsor textures. The implementation can be separated into two major parts: First, spatial slices of the property field I are constructed from trajectories of one vector field; the complete property field is generated on the spacetime domain by combining spatial slices. Second, convolution is performed along Z within the spacetime property field.</p><p>The previous discretization <ref type="bibr" target="#b26">[27]</ref> implements both parts by a purely texture-based gathering of property contributions: Starting from a texel, trajectories are traced and potential contributions are gathered and accumulated from locations along these trajectories. Benefits of this implementation are a high-quality visualization due to Lagrangian integration (as opposed to artificial blurring in Eulerian and semi-Lagrangian approaches) and a highly flexible framework that facilitates various visualization methods. Unfortunately, the gathering approach requires a recurring and time-consuming integration of particle traces to construct the spacetime property field I. Each spatial slice through I triggers a complete integration of long trajectories backward in time. The computational costs are determined by the maximum particle lifetime, on the order of 20-200 time steps. A related problem is that a significant temporal portion of the data set needs to be kept in memory because backward particle tracing must access the corresponding time steps of the vector field. A third issue is a non-constant spatial frequency in slices through I, introduced by the divergence of the vector field.</p><p>The goal of our new discretization scheme is to overcome these problems and, at the same time, retain the aforementioned benefits. The basic idea is to replace gathering based on backward integration by an approach that propagates particles forward in time. The changes mainly concern the first stage of the framework, i.e., the construction of the spacetime volume.</p><p>To achieve a high flexibility in designing the injection of new particles, we support a continuous description of injected "particles" on a spatial slice of constant time t. We use radial basis functions (RBFs) <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b17">18]</ref>, which are spherically symmetric functions around associated center points, to represent the injection of "particles":</p><formula xml:id="formula_3">I inject (x) = ∑ i λ i φ i (||x − x i ||) ,</formula><p>with an index i that labels a particle, the corresponding weight λ i , the center x i , and the radial basis function φ i (r). Common types of basis functions for numerical approximations are thin-plate splines, multiquadrics, inverse multiquadrics, or Gaussians. The goal of this paper is to model particle traces, not to approximate a generic function. Therefore, basis functions with compact or quasi-compact support are adequate because they represent localized particles of finite size. We typically use Gaussian functions, φ (r) = exp(−r 2 /(2σ 2 )), with width σ .</p><p>For the temporal evolution of injected particles, we assume that the center points x i travel along pathlines and the basis functions φ i remain constant. However, weights λ i may change over time to model a phase-in and phase-out of particles. Additional external parameters, such as additional attributes of a flow, may also influence λ i . For simplicity of notation, these parameters are not explicitly included in the mathematical expressions. The scenario is extended to a repeated injection that occurs at several discrete time levels τ. Then, the spacetime property field is</p><formula xml:id="formula_4">I(x,t) = ∑ τ≤t ∑ i λ τ,i (t − τ)φ τ,i (||x − x path (t; x τ,i , τ)||) . (3)</formula><p>The additional subscript τ labels the time of particle injection. Moreover, the weight λ τ,i depends on the age of a particle, t − τ.</p><p>This formulation allows us to compute spatial slices of I incrementally: If pathlines have been determined for time t, particle positions at the following time step t + ∆t can be calculated by integrating the particle tracing Equation (1) only for a small time interval ∆t, i.e., a re-computation of complete pathlines is avoided. In this state-preserving approach, current particle positions are stored for later reuse. Particle states are held in an array that represents all active particles. The particle state comprises position x, age t − τ, Boolean state for activity, and possible additional attributes. The activity state allows us to remove a particle from the system by setting its activity state to false. Particle removal is useful to free computational and memory resources for particles that have died, i.e., whose weight is zero for all future times. Therefore, the size of the particle array can be restricted to the maximum number of simultaneously active particles. A new particle is injected by filling a previously inactive array element with the initial particle position, and by setting the age to zero and the activation state to true. The particle system is propagated from time t to t + ∆t by updating positions according to a Lagrangian integration of Eq. (1) and by adding ∆t to the age of a particle.</p><p>The construction of the property field in Eq. <ref type="formula">3</ref>requires the evaluation of RBFs in a finite region around particle positions, defined by the size of the support of the RBFs. This process is identical to a scan conversion of RBFs on an nD spatial domain if the property field is discretized on a uniform grid. Then, the summation in Eq. (3) can be computed by additively blending several particles.</p><p>The second major part of the discretization implements the convolution along trajectories Z through the spacetime property field. The basic idea is to discretize the convolution integral (2) by a Riemann sum. Since the convolution is performed for each time step separately, this part of the framework generally cannot benefit from incremental computations. Therefore, the calculations are performed for each time step and each texel independently.</p><p>The incremental construction of the spacetime property field has several advantages. First, pathlines are computed incrementally and, thus, unnecessary re-computations of complete trajectories are avoided. Second, the computation time is linear in the number of particles, i.e., the particle-based method is very efficient for moderately sparse representations like OLIC <ref type="bibr" target="#b24">[25]</ref>. Third, the memory footprint for the time-dependent vector field u(x,t) is significantly cut down to just a single time step. Fourth, for the case of LEA-type visualization within the framework, the convolution stage can be efficiently realized by a repeated alpha blending of subsequent slices through the spacetime volume <ref type="bibr" target="#b26">[27]</ref>, i.e., the convolution computation can also be performed incrementally. Therefore, LEA-style visualization nicely fits in with the incremental construction of the property field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">PROBABILISTIC DENSITY CONTROL</head><p>A problem of any particle-oriented visualization method is an effective control of particle density. For example, a divergent flow makes particles drift away from each other and, thus, reduces particle density. Our goal is to control particle density while avoiding its explicit evaluation. To this end, a probabilistic approach is applied: We assume that a large number of particles covers the domain so that the law of large numbers, as formalized by Chebyshev's inequality, can be used to identify the density of discrete particles with a continuous material density. The idea is to specify probabilities for the injection of new particles and the removal of old particles in a way which ensures that an imposed particle density is maintained.</p><p>We begin the discussion with a continuous description in 3D and later apply it to a discretized particle formulation and to the 2D case. A continuous stream of material is characterized by its velocity u and mass density ρ, which can be combined to form the density of mass flow, j = ρu. The total mass in a volume</p><formula xml:id="formula_5">V is M = V ρ(x,t) d 3</formula><p>x. Mass can be changed by inflow and outflow of material according to dM/dt = − ∂V j(x,t) • dA, where ∂V and dA describe the boundary of the volume and an oriented surface element of the boundary, respectively. Assuming conservation of mass, a change of mass density is exclusively caused by inflow and outflow:</p><formula xml:id="formula_6">dM dt = V ∂ ρ(x,t) ∂t d 3 x = − ∂V j(x,t) • dA = − V ∇ • j(x,t) d 3 x .</formula><p>(4) The last equality is due to the general Stokes' theorem, valid in nD space. The differential form of Eq. (4) yields the continuity equation</p><formula xml:id="formula_7">∇ • j(x,t) + ∂ ρ(x,t) ∂t = 0 .</formula><p>Density can be controlled by introducing new material or removing existing material, i.e., the continuity equation needs to be extended to</p><formula xml:id="formula_8">σ inj (x,t) − ρ(x,t)σ del (x,t) = ∇ • (ρ(x,t)u(x,t)) + ∂ ρ(x,t) ∂t ,<label>(5)</label></formula><p>where σ inj describes the rate of injection of mass density per time interval and σ del the relative rate of mass removal. Equation <ref type="formula" target="#formula_8">5</ref>can be simplified by taking into account two useful approximations. First, ∇ • (ρu) ≈ ρ∇ • u if a slow spatial change of the density ρ is assumed. Second, if the time scales for changes of ρ are larger than the time scales for injection and removal of particles, the term ∂ ρ/∂t can be neglected because the particle system is in a dynamic equilibrium. Similarly to the treatment in equilibrium thermodynamics, we still can change ρ over time, with a brief delay caused by tuning-in. However, in most cases, we would like to maintain a temporally and spatially constant density anyway. The two approximations lead to σ inj (x,t) = ρ(x,t)(σ del (x,t) + <ref type="figure">∇ • u(x,t)</ref>) .</p><p>The choices for σ inj and σ del are not independent. In addition, σ inj and σ del are constrained to non-negative values because an "inverse" injection or removal of particles is impossible. One possibility is to set σ inj to a globally fixed, user-defined value. Then, σ del is used to locally control material density. The removal rate is proportional to the amount of existing material ρ. From a probabilistic point of view, (σ del ∆t) is a measure for the probability that a particle is removed during time step ∆t, i.e., particle removal can be implemented by Russian roulette. If a vector field u, an arbitrary but fixed value σ inj , and a density distribution ρ are given, the corresponding σ del can be computed. An alternative approach sets σ del to a globally fixed value and determines an associated space-dependent σ inj . The injection density σ inj can be related to a corresponding probability density by normalization:</p><formula xml:id="formula_10">σ * inj (x,t) = σ inj (x,t)/ V σ inj (x,t) d 3</formula><p>x. Therefore, injection can be modeled by probabilistically generating new particles according to this probability density. A third approach uses a space-dependent injection and removal of particles, combining the other two methods. In all three approaches, density can be globally scaled with a constant factor ξ by uniformly scaling σ inj with the same factor ξ . Therefore, the density or sparseness of the representation can be easily adjusted by modifying the injection rate, i.e., the number of new particles per unit time.</p><p>Even when the expectation value for particle density is kept constant, a modification of injection and removal rates may affect temporal coherence. For example, low injection and removal rates lead to high temporal coherence. Conversely, high injection and removal rates reduce the time and length scales over which the equilibrium state is achieved: They are better for quickly adapting density-at the cost of decreased temporal coherence.</p><p>A probabilistic injection of particles requires the construction of associated probability density functions. We assume that a (pseudo) random number generator provides a uniform random variable. From a 1D uniform distribution, a non-uniform nD probability density function can be constructed in various ways <ref type="bibr" target="#b1">[2]</ref>. We use rejection sampling to construct the probability density σ * inj . Russian roulette for particle removal can be achieved with the inversion method: A single, uniformly distributed random number is drawn; if the number is less than the probability for particle deletion, the particle is removed. The discussion of this section can be immediately transferred from 3D domains to 2D domains because Stokes' theorem also applies in 2D. The only difference is that boldface variables represent 2D vectors instead of 3D vectors and that volume V is replaced by area A. <ref type="figure" target="#fig_0">Figure 1</ref> illustrates the probabilistic density control for a 2D vector field with radial inflow and a sink at the center. The flow can be best recognized in the LEA-type visualization displayed in <ref type="figure" target="#fig_0">Figure 1d. Figures 1a-c</ref> show snapshots of the particle system, without the second convolution stage of the framework. <ref type="figure" target="#fig_0">Figure 1a</ref> illustrates a spatially uniform injection and removal of particles. Due to convergence of the flow, particles clump together in the center of the image. <ref type="figure" target="#fig_0">Figure 1b</ref> demonstrates probabilistic density control by adapting both injection and removal properties to the divergence of the flow, which achieves a uniform density. <ref type="figure" target="#fig_0">Figure 1c</ref> shows another example of density control, with a much smaller density and larger RBFs than in <ref type="figure" target="#fig_0">Figure 1b</ref>. Animations corresponding to the four images can be found on our project web page <ref type="bibr" target="#b25">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">EXPLICIT DENSITY CONTROL</head><p>An alternative approach for density control explicitly checks the density of particles. We compute the density by counting particles in cells of a uniform grid covering the domain. After each particle integration step, the cell-based density is computed and compared with the given density. If both differ by more than a user-defined tolerance threshold, surplus particles have to be removed or, alternatively, missing particles have to be injected.</p><p>We propose an efficient algorithm for a special case of deterministic density control-for a uniform density with exactly one particle per cell. Due to this particle-per-cell property we name this method particle-in-cell advection. The approach is also based on the particle framework from Section 6; it just uses a different method for density control than Section 7.</p><p>The particle-in-cell technique consists of the following stages. First, a valid particle configuration is initialized: One particle is chosen per cell, with randomized fractional coordinates. The cell contents is identified with the particle property. Initial properties are modeled as white noise. Second, particles are transported according to forward Lagrangian integration. Third, a re-initialization is performed after each integration step to re-establish a valid configuration. This means that maximally one particle is stored per cell. If several particles are transported to the same cell, only one of them is kept, which can be realized by overwriting existing particles by new ones. A valid configuration also means that minimally one particle has to be located in each cell. Since forward transport may leave destination cells untouched, all cells have to be checked if they are empty, and empty cells have to be filled with a new particle. The property of a new particle is set to a random value.  <ref type="figure" target="#fig_1">Figure 2a</ref> uses yellow color to visualize the empty cells that occur after one particle integration step. This picture indicates that a significant portion of the cells may receive new particles, which reduces temporal coherence. <ref type="figure" target="#fig_1">Figure 2b</ref> shows a LEA-type visualization-with a continuous alpha blending between subsequent particle distributions-leading to streaklets. Here, LIC postfiltering <ref type="bibr" target="#b4">[5]</ref> with a short filter kernel is additionally applied to increase the visualization quality. In general, particle-in-cell advection provides a rather low temporal and spatial coherence due to a high rate of particle creation and deletion. Therefore, the probabilistic approach from Section 7 is more appropriate when high quality is required.</p><p>Particle-in-cell advection is related to the original implementation of Lagrangian Eulerian Advection (LEA) <ref type="bibr" target="#b4">[5]</ref>. LEA also maintains a single particle per cell, it uses Lagrangian integration, and a re-initialization step. However, there are some differences: First, LEA applies backward integration and backward texture mapping. Second, LEA suffers from "noise duplication" <ref type="bibr" target="#b4">[5]</ref>, which reduces the spatial frequency of the noise. Therefore, LEA needs a continuous ad-hoc injection of noise, which is not required for particle-incell advection. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">IMPLEMENTATION</head><p>We have implemented the framework from Section 6, including probabilistic and particle-in-cell density control for time-dependent 2D vector fields. The implementation is based on C++ and Di-rectX 9.0. GPU states, vertex programs, and fragment programs are configured within effect files, using HLSL (high-level shading language) for the shader programs. The implementation requires Shader Model 3 functionality and was developed on NVIDIA GeForce 6 GPUs. The implementation with probabilistic density control can be separated in four major parts: (1) Lagrangian particle representation and integration, (2) probabilistic density control, (3) construction of spacetime property fields, and (4) convolution. Particle-in-cell advection adopts this pipeline and modifies it by an alternative control of particle density.</p><p>The first part of the probability-based pipeline is implemented similarly to previous GPU particle systems <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>. We use a statepreserving particle system that holds the current position (its x and y components), age, and activity state for each particle. Particle states are stored in 32-bit floating-point 2D textures, labeled by particle IDs. Particle positions for a subsequent time step are determined by explicit Euler integration of the particle tracing Equation <ref type="formula" target="#formula_0">1</ref>, based on a vector field stored in a 16-bit floating-point 2D texture. The integration step is implemented by updating the state texture in a texel-by-texel fashion within a fragment program. Here, renderto-texture functionality is employed in combination with ping-pong rendering, i.e., two versions of a texture are held on the GPU, one serving as render target, the other one serving as lookup texture. Both textures are exchanged after each rendering pass. The integration step also updates the particle's age and checks whether the particle has left the computational domain. In the latter case, the particle is deactivated.</p><p>The second part implements particle removal and injection in order to control density. Random numbers are pre-computed by the CPU and transferred to a texture on the GPU. Particle removal needs just a single uniformly distributed random number per particle. Russian roulette is implemented by comparing the entry from the random number texture with a probability value accessed from a separate 2D texture that holds the divergence of the vector field, pre-computed on the CPU. Particle injection is realized by another random number texture, constructed from an injection probability density by rejection sampling on the CPU. This texture yields the random 2D position of a new particle. Particle injection can be performed for previously inactive state-texture elements. Particle removal and injection is implemented within a fragment program that processes all particles in a texel-by-texel fashion via ping-pong rendering. Both random textures can be reused for several time steps by applying a randomized overall rotation of texture coordinates.</p><p>In the third part, a spacetime property field is constructed from particle trajectories according to Eq. (3). RBFs are evaluated by rasterizing point sprites defined by a center point (i.e., the particle position) and a 2D texture (i.e., a 2D discretized version of the RBF). A phase-in and phase-out of particles is employed to avoid flickering; the particle's age is used to modulate the brightness of the sprite. With Shader Model 3 compliant GPUs, a vertex program can access texture data and, therefore, the geometry pipeline can read the particle-state texture to position the center of a point sprite. The vertex texture is addressed by texture coordinates corresponding to the particle ID. The summation of several RBFs according to Eq. (3) is implemented by an additive blending of the point sprites corresponding to active particles into a common render-target texture. We use a 16-bit floating-point target, which supports alpha blending and leads to higher accuracy than 8-bit fixed-point textures.</p><p>The fourth part implements the convolution according to Eq. (2). Similarly to our previous implementation <ref type="bibr" target="#b26">[27]</ref>, Lagrangian par- ticle integration is applied to perform line integral convolution. The main difference is that the integral (2) is evaluated in a single rendering pass through a GPU fragment program that executes a loop over all sampling positions in the Riemann sum. Shader Model 3 facilitates loops and long fragment programs (in contrast to Pixel Shader 2) and, therefore, multiple rendering passes can be avoided. An alternative convolution model is used for frameworkbased LEA: Successive alpha blending is applied between the property field for the current time step and the previously filtered property field, realizing a discretized version of an exponential filter kernel <ref type="bibr" target="#b2">[3]</ref>.</p><p>Particle-in-cell advection uses a slightly modified pipeline to implement an explicit control of particle density. A valid particle configuration is constructed by the CPU, and particle transport is identical to that of the original pipeline. During re-initialization, a vertex program accesses the particle-state texture to fill a single texel at the new particle position. If several particles are transported to the same texel, they are automatically overwritten by the latest drawn particle, leading to a random selection of surviving particles. A separate rendering pass visits all texels of the particle-state texture and fills empty texels by a random property value and random fractional coordinates. Finally, subsequent time steps of the property field are combined by successive alpha blending.</p><p>Several postprocessing stages have been implemented to improve visualization quality. First, histogram equalization <ref type="bibr" target="#b15">[16]</ref> reestablishes good contrast. Second, LIC post-filtering <ref type="bibr" target="#b4">[5]</ref> can be applied to improve filtering quality. The implementation of the convolution stage is reused here, just with a very short filter kernel (typically some five integration steps). <ref type="figure" target="#fig_3">Figure 3</ref> illustrates post-filtering with a Gaussian filter kernel, applied to a framework-based LEAtype visualization of a vortical flow. Third, color mapping is used to visualize additional attributes or to enhance flow features by masking, e.g., by velocity masking <ref type="bibr" target="#b4">[5]</ref>. <ref type="figure" target="#fig_4">Figure 4</ref> shows snapshots taken from animated visualizations of three different unsteady vector fields. In <ref type="figure" target="#fig_4">Figure 4a</ref>, a LEA-style framework-based visualization with velocity masking is used to display time-dependent water flow in the Gulf of Mexico. The complete data set contains 183 time steps with a spatial resolution of 352 × 320. <ref type="figure" target="#fig_4">Figure 4b</ref> is generated by framework-based UFAC and shows the velocity field produced by the interaction of a planar shock with a longitudinal vortex (200 time steps with a resolution of 256 × 151). In regions of large unsteadiness, such as the shock regions at center and bottom of the image, the correlation length along streamlines is reduced by UFAC. In addition, velocity masking is applied to emphasize high velocity magnitude. In <ref type="figure" target="#fig_4">Figure 4c</ref>, a LEA-style framework-based visualization with velocity masking is applied to represent the wind velocity in a hurricane Dennis prediction for a 96-hour forecast (17 time steps with a spatial resolution of 151 × 181). Corresponding animations and additional images can be found on our project web page <ref type="bibr" target="#b25">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">RESULTS</head><p>Other types of results concern the performance of our implementation. All measurements were conducted on a PC with NVIDIA GeForce 6800 Ultra GPU (256 MB) and Intel Pentium IV (3.2 GHz) CPU, running under Windows XP and DirectX 9.0. Viewport size is 640×480 unless otherwise noted. Performance numbers are always given in frames per second (fps). <ref type="table" target="#tab_1">Table 1</ref> shows the performance of the particle system, including point sprite rendering and blending, for a varying number of particles, different sizes of point sprites (sizes on the image plane), and a steady flow. The column "w/o VP" shows performance numbers for particle tracing only, i.e., no point sprites are drawn and there is no texture access from the vertex program to the particle state texture. When point sprites are rendered, the overall performance drops significantly with increasing size of point sprites, which shows that an overdraw from rasterization is the bottleneck of the typical particle system, not particle integration. The column with point sprite size "0 2 " documents the cost for a texture lookup in the vertex program without any rasterization of point sprites. For comparison, the gathering implementation for particle transport <ref type="bibr" target="#b26">[27]</ref> achieves 11.4 fps for a maximum particle lifetime of 200 on the same GPU, i.e., our new discretization achieves a speedup by a factor of 40 for a reasonably comparable visualization (128 2 particles, 10 2 point sprite size). In general, forward particle-based integration is extremely advantageous for long particle lifetimes, while it loses some of its efficiency for a very dense set of particles with significant overdraw.</p><p>A time-dependent visualization needs an additional transfer of flow data from main memory to the GPU for each time step. The performance overhead only depends on data size. For example, for 128 2 particles with 10 2 point sprite size, 16-bit floating-point flow data sets, and a fixed viewport size of 640 × 480, the overall performance decreases from 444.1 fps for steady flow to 44.5 fps or 161.4 fps for unsteady flow with a flow resolution of 640 × 480 or 320 × 240, respectively. <ref type="table" target="#tab_2">Table 2</ref> documents the performance for varying size of the sprite texture, when the size of the point sprite is fixed in image space. The numbers indicate that textures of size 32 2 or less fit into texture cache because no performance increase is achieved by reducing the texture size below 32 2 . Therefore, we use point sprite textures of size 32 2 for all applications as an optimal compromise between texture resolution and speed. <ref type="table" target="#tab_3">Table 3</ref> shows performance measurements for particle-in-cell advection. The size of the property texture is identical to the number of particles. The numbers demonstrate that the computation time is approximately linear with the number of particles and that alpha blending between successive time steps has a small effect when a reasonably large number of particles is employed. <ref type="table" target="#tab_0">Table 4</ref> documents the performance of the convolution stage of the framework. Different filter lengths and viewport sizes are compared, showing an approximately linear behavior with respect to the number of texels and the number of integration steps. For example, this convolution has to be explicitly performed for the DLIC and UFAC realizations within the framework. Here, the overall computation time is determined by adding the computational costs for convolution and particle advection (see <ref type="table" target="#tab_1">Table 1</ref>).   22.9 22.7</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">CONCLUSION AND FUTURE WORK</head><p>We have presented a new hybrid particle and texture based approach for the visualization of time-dependent vector fields. A particlebased representation overcomes efficiency and memory problems of our previous implementation of a spacetime framework for timedependent vector field visualization because trajectories can now be constructed incrementally and a simultaneous access to many different time steps is avoided. We have described a probabilistic particle injection and removal mechanism to maintain a given particle density. As an alternative, particle-in-cell advection provides a deterministic density control, with exactly one particle per cell. We have presented an efficient GPU implementation of our approach that facilitates the interactive visualization of unsteady 2D flow on Shader Model 3 compliant graphics hardware. Another advantage of the hybrid particle/texture framework is high visualization quality, achieved by accurate Lagrangian integration. Our framework achieves spacetime-coherent dense representations by a two-step process: construction of continuous trajectories in spacetime for temporal coherence, and convolution along another set of paths through the above spacetime volume for spatially correlated patterns. We have demonstrated the flexibility of the framework by mimicking LEA, DLIC, and UFAC and we have explicitly stated what visual structures are constructed by these different approaches. In this context, generic strategies for dense unsteady flow visualization have been analyzed.</p><p>For future work, an extension to 3D vector fields will be most challenging. Particle representation, Lagrangian integration, and density control are already formulated in a dimension-independent manner and could be easily used for 3D flow. More difficult, however, will be the development of methods for fast 3D convolution and for an efficient scan conversion of RBFs on a 3D uniform grid. In addition, perceptual issues (occlusion, clutter, spatial perception) have to be addressed for dense 3D representations. Nevertheless, we are convinced that our approach is immediately interesting for 3D flow visualization on curved surfaces: Recent methods for curved manifolds <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b27">28]</ref> are based on 2D image space, where our 2D framework implementation could be adopted.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Probabilistic density control for a flow with a sink in the center. Image (a) shows the particle distribution without density control, (b) with density control, (c) a sparse representation with density control, and (d) the particle system from (b) with LEA-type alpha blending.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2</head><label>2</label><figDesc>illustrates particle-in-cell advection based on a circular vector field. Figure 2a (left part) shows a snapshot of the particle distribution from an animation. This image demonstrates that a random and uniform collection of particles is maintained. The right part of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Particle-in-cell advection for a circular flow. Image (a) shows a snapshot of the particle distribution (left part), indicating empty cells by yellow color (right part). Image (b) displays the result of temporal blending in combination with LIC post-filtering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Framework-based LEA-type visualization of a vortical flow. Image (a) shows spatial structures from alpha blending, image (b) adds post-filtering to improve the visualization quality.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Examples for unsteady flow visualization: (a) LEA-style framework-based visualization of water flow in the Gulf of Mexico. (b) UFAC visualization of the interaction of a planar shock with a longitudinal vortex. (c) LEA-style visualization of a hurricane Dennis prediction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 4 :</head><label>4</label><figDesc>Performance for convolution (in fps).</figDesc><table><row><cell>Viewport</cell><cell>Filter Length 20 40 80</cell></row><row><cell>640 × 480 1600 × 1200</cell><cell>61.1 33.2 17.2 10.8 5.7 2.8</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Performance of the particle system for integration, rendering, and blending (in fps).</figDesc><table><row><cell cols="2"># Particles w/o VP</cell><cell>0 2</cell><cell>Point Sprite Size 5 2 10 2</cell><cell>20 2</cell></row><row><cell>64 2 128 2 256 2 512 2 1024 2</cell><cell cols="4">1968.3 1380.4 1285.9 1012.8 565.1 1450.3 831.0 712.9 444.1 186.1 681.4 323.0 253.1 137.9 51.2 191.1 84.7 68.0 35.5 12.8 47.3 22.3 16.7 8.9 3.2</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Performance for a point sprite size of 10 2 pixels (in fps).</figDesc><table><row><cell cols="2"># Particles Texture Size 64 2 256 2</cell></row><row><cell>8 2 16 2 32 2 64 2 128 2</cell><cell>1015.1 137.9 1014.2 137.9 1012.8 137.9 663.6 66.0 424.4 34.5</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>Performance for particle-incell advection (in fps).</figDesc><table><row><cell cols="3">Alpha Blending # Particles Disabled Enabled</cell></row><row><cell>64 2 128 2 256 2 512 2 1024 2</cell><cell>1095.9 753.2 323.0 90.6</cell><cell>796.6 600.0 291.5 87.6</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The data of the Gulf of Mexico was made available courtesy of Dr. O'Brien (COAPS/FSU), and the hurricane Dennis data was kindly provided by Dr. X. Zou (Meteorology/FSU). G. Erlebacher acknowledges support from the Program Enhancement Grant program at FSU. Thanks to Simon Stegmaier for fruitful discussions on texture advection.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">C</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGGRAPH 93</title>
		<meeting>ACM SIGGRAPH 93</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Non-Uniform Random Variate Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Devroye</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Springer</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Flow textures: Highresolution flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Erlebacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Visualization Handbook</title>
		<editor>C. D. Hansen and C. R. Johnson</editor>
		<imprint>
			<publisher>Amsterdam</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="279" to="293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Hardware-accelerated texture advection for unsteady flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Erlebacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Y</forename><surname>Hussaini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="155" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Lagrangian-Eulerian advection of noise and dye textures for unsteady flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Erlebacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Y</forename><surname>Hussaini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="211" to="222" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Unsteady flow visualization by animating evenly-spaced streamlines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lefer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Forum</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="31" to="40" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Uberflow: A GPU-based particle engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kipfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Gr. Hardw</title>
		<meeting>Gr. Hardw</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="115" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Hardware-based simulation and collision detection for large particle systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kolb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Latta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rezk-Salama</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Gr. Hardw</title>
		<meeting>Gr. Hardw</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="123" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A particle system for interactive visualization of 3D flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Krüger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kipfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kondratieva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr. Accepted for publication</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The state of the art in flow visualization: Dense and texture-based techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Doleisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Vrolijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">H</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Forum</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="143" to="161" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Image space based visualization of unsteady flow on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="131" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">High-quality animation of 2D steady vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lefer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leduc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="2" to="14" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Chameleon: An interactive texture-based framework for visualizing three-dimensional vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G.-S</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Bordoloi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="241" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Accelerated unstead flow line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Moorhead</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="113" to="125" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Flow visualization using moving textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Becker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICASW/LaRC Symp. Vis. Time-Varying Data</title>
		<meeting>ICASW/LaRC Symp. Vis. Time-Varying Data</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="77" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Enhanced line integral convolution with flow feature detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Okada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visual Data Exploration and Analysis IV</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">3017</biblScope>
			<biblScope unit="page" from="206" to="217" />
		</imprint>
	</monogr>
	<note>Proc. SPIE</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Modeling and editing flows using advected radial basis functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">P</forename><surname>Pighin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EG/SIGGRAPH Symp. Comput. Anim</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="223" to="232" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Function representation of solids reconstructed from scattered surface points and contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>Savchenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">A</forename><surname>Pasko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">G</forename><surname>Okunev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Kunii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Forum</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="181" to="188" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A new line integral convolution algorithm for visualizing time-varying flow fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Kao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="98" to="108" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Dynamic line integral convolution for visualizing streamline evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sundquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Gr</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="273" to="283" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">3D IBFV: Hardware-accelerated 3D flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="233" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Spot noise -texture synthesis for data visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGGRAPH 91)</title>
		<meeting>ACM SIGGRAPH 91)</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="309" to="318" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Image based flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Gr</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="745" to="754" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Image based flow visualization for curved surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="123" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Animating flow fields: Rendering of oriented line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wegenkittl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Purgathofer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Comput. Anim. &apos;97</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="15" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Texture-based flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<ptr target="http://www.vis.uni-stuttgart.de/texflowvis" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A texture-based framework for spacetime-coherent visualization of time-dependent vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Erlebacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="107" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A hybrid physical/device-space approach for spatio-temporally coherent interactive texture advection on curved surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Gr. Interface</title>
		<meeting>Gr. Interface</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Hardware-accelerated visualization of time-varying 2D and 3D vector fields by texture advection via programmable per-pixel operations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VMV &apos;01</title>
		<meeting>VMV &apos;01</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="439" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Real-time advection and volumetric illumination for the visualization of 3D unsteady flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schafhitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurovis (EG/IEEE TCVG Symp. Vis.)</title>
		<meeting>Eurovis (EG/IEEE TCVG Symp. Vis.)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="13" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">High dimensional direct rendering of time-varying volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Woodring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Vis</title>
		<meeting>IEEE Vis</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="417" to="424" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
