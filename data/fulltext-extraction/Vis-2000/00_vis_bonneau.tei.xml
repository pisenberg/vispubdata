<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Polyhedral modeling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georges-Pierre</forename><surname>Bonneau</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefanie</forename><surname>Hahmann</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="laboratory">Laboratoire LMC</orgName>
								<orgName type="institution">CNRS University of Grenoble</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="laboratory">Laboratoire LMC-IMAG</orgName>
								<address>
									<addrLine>BP.53</addrLine>
									<postCode>F-38041</postCode>
									<settlement>Grenoble Cedex 9</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Polyhedral modeling</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>triangular meshes</term>
					<term>visual continuity</term>
					<term>arbitrary topology</term>
					<term>visualization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Polyhedral meshes are used for visualization, computer graphics or geometric modeling purposes and result from many applications like iso-surface extraction, surface reconstruction or CAD/CAM. The present paper introduces a method for constructing smooth surfaces from a triangulated polyhedral mesh of arbitrary topology. It presents a new algorithm which generalizes and improves the triangle 4-split method [7] in the crucial point of boundary curve network construction. This network is then filled-in by a visual smooth surface from which an explicit closed form parametrization is given. Furthermore, the method becomes now completely local and can interpolate normal vector input at the mesh vertices.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Polyhedral meshes consisting of a collection of vertices, edges and triangular faces which describe an oriented 2-manifold in IR <ref type="bibr" target="#b2">3</ref> are dealt with in many applications. They result f.ex. from iso-surface extraction algorithms like marching cubes. Surface reconstruction methods used for virtual reality purposes of CAD/CAM applications produce a fine triangulated polyhedral mesh approximating an object from which a 3D scanner has sampled millions of unorganized data points. In medical imaging where CT or MRI scanner produce a set of slices with a grid of gray level values a 3D volume is reconstructed. But contour line approximation on each slide followed by contour reconstruction also produces a polyhedral mesh. They also occur in CAD/CAM applications where the classical tensor product surface models fail. Topological complex situations like inner corner blends need an extraneous treatment. Surfaces defined on polyhedral meshes can however represent surfaces of arbitrary topological type.</p><p>In particular in CAD/CAM applications or surface reconstruction but also for computer graphics or visualization purposes, it is often desired to get a visual smooth representation of the object which is roughly approximated by a polyhedral mesh. On one hand surface subdivision algorithms converge to a smooth surface starting from a polyhedral mesh, but they generally don't provide an explicit closed form expression of the resulting surface. Therefore, computations on such surfaces like intersections or evaluations of intrinsic quantities like curvature can become tricky. On the other hand, and this is the subject the present paper deals with, parametric polynomial surfaces fulfill all these requirements. The polyhedral mesh serves as a control mesh. Recall that, since every polyhedra can be triangulated, it is sufficient to consider as input a triangular mesh. Triangular surface patches which join with geometric continuity in order to produce an overall smooth surface while interpolating the mesh vertices can then be computed.</p><p>The main difficulty in developing a triangular interpolation scheme for polyhedral meshes of arbitrary topological type consists of ensuring the G 1 continuity (visual smoothness, tangent plane continuity). Three kinds of schemes exist for polynomial representations: the Clough-Tocher-like domain splitting methods <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b11">[12]</ref> the G 2 continuous constructions <ref type="bibr" target="#b10">[11]</ref>; or the twist compatible boundary curve schemes <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b6">[7]</ref>. Further non-polynomial methods also exist <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b0">[1]</ref>. In addition to an explicit closed form parametrization, the scheme should be local. This means that a local modification of the polyhedral control mesh should only locally affect the surface. This allows an interactive modeling of smooth surfaces by interactive modeling of polyhedral meshes.</p><p>The present paper deals with such a polyhedral modeling method. It is based on a recently developed method <ref type="bibr" target="#b6">[7]</ref>, called 4-split method (chapter 2), and presents a new algorithm (chapter 3) which generalizes and improves the 4-split scheme in such a way that the number of degrees of freedom for the construction of the boundary curves can significantly be increased. A more flexible and more intuitive control of the surface shape is now possible. Further features of the scheme are localness and normal vector interpolation at the mesh vertices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">THE 4-SPLIT METHOD</head><p>The triangular 4-split method interpolates a polyhedral mesh of arbitrary topology by a visual smooth (G 1 continuous) piecewise quintic Bézier surface. It is local, affine invariant and provides an explicit closed form parametrization. Several degrees of freedom are available for shape control.</p><p>The following subsections briefly present first the method's basic idea and why this is benefit in comparism to other existing schemes. Then the algorithm itself is outlined without going into too much detail, but enough for reproducing this method.</p><p>Let the polyhedral control mesh M be a set of vertices, edges and triangular faces that describe an oriented 2-manifold in IR 3 .</p><p>The surface S which interpolates the vertices of M is composed of triangular surfaces M i which are in one-to-one correspondence to the mesh facets and which meet with tangent plane (G 1 ) continuity along the common boundary curves. The M i 's are piecewise polynomial images of the unit domain triangle, we call them macropatches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Four split of the mesh triangles.</head><p>The basic idea of the present method is to subdivide each domain triangle into four subtriangles by joining together the edge midpoints. Each macro-patch therefore consists of four Bézier patches. A convenient parametrization of the macro-patches concentrates on the mesh vertices, see <ref type="figure">fig. 1</ref>. <ref type="figure">Figure 1</ref>: Parameterization of n patches around a common vertex.</p><formula xml:id="formula_0">u i−1 M i . u i+1 u i M i M i−1 p 0 1/2 1</formula><p>This triangle 4-split has several advantages:</p><p>-it allows to introduce more degrees of freedom for each macro-patch, -the boundary curves and cross-boundary tangents are piecewise polynomial functions (2 pieces),</p><p>-the surface scheme is local.</p><p>It will be seen later that the requirements on the boundary curves concern their first and second derivatives at the endpoints. In order to keep the surface scheme local the derivatives should be independent from one vertex to another. Instead of degree 5 curves, piecewise curves need only to be of degree 3. Similar considerations hold for the cross-boundary tangents and finally the macro-patches are composed of four quintic Bézier triangles, which is the lowest possible degree for this kind of methods.</p><p>The polyhedral 4-split mesh interpolation method consists of three main steps:</p><p>-generating first and second derivative informations at the mesh vertices, -computing first order cross derivatives along the curves, -computing inner Bézier points for each macro-patch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Generating first and second derivative informations at the mesh vertices.</head><p>The first step of the algorithm consists of constructing a network of piecewise cubic C 1 boundary curves of the macro-patches interpolating the mesh vertices. It turns out that the G 1 conditions for joining a network of patches together imposes quite restrictive conditions on the set of boundary curves incident to a common mesh vertex.</p><p>Let p be a mesh vertex of order n, i.e. p is common to n mesh facets (or edges) and therefore has n neighbour points p i . The n first and second derivatives of the n boundary curves in p are not free. The boundary curve network is constructed from these derivative informations by computing for each vertex the curve pieces incident to that vertex. Since each piece of curve is a cubic Bézier parameterized over 0 <ref type="bibr">1 2 ]</ref>, this means that the control points b0, b1, b2 must be computed. They are directly related to the first and second derivatives at the curve's endpoints by</p><p>x(0) = b0 x 0 (0) = 6(b1 ; b0) x 00 (0) = 24(b2 ; 2b1 + b0):</p><p>The complementary curve pieces are computed when the neighbour mesh vertices are treated. Finally, the curve network is closed by computing for each boundary curve the middle control point b3 which is common to both curve pieces and which should be calculated such that the two pieces join with C 1 continuity.</p><p>Let us consider a mesh vertex p and its n curve pieces as illustrated in <ref type="figure" target="#fig_0">fig. 2</ref>. These derivatives have to satisfy a set of equations (see <ref type="bibr" target="#b3">(4)</ref> and <ref type="formula" target="#formula_10">7</ref>of chapter 3) and are therefore not free. The following solution has been found <ref type="bibr" target="#b6">[7]</ref>, which consists of</p><formula xml:id="formula_1">b =p 0 i b 1 i b i b 3 i p p i−1 p i+1 i 2 tangent plane</formula><formula xml:id="formula_2">b i 0 = p b i 1 = b i 0 + n P n j=1 cos ; 2 (j;i) n p j b i 2 = 1 ; 2 3 2 ]b i 0 + 1 n P n j=1 cos ; 2 (j;i) n p j + 2 P n j=1 p j ( 1=6 if j = i ; 1 i + 1 1=3 if j = i 0 otherwise<label>(1)</label></formula><p>where i = 1 : : : n is taken modulo n. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Computing first order cross derivatives along the edges.</head><p>The second step of the algorithm is also related to the G 1 continuity conditions. It consists of computing the network of tangent planes along the boundary curves. The boundary curves determine already the tangent planes of the macro-patches at the mesh vertices. At each curve point ui 2 0 1] the tangent plane is spanned by the curve derivative @M i @u i (ui 0) and one of the cross-boundary It turns out that Vi is a piecewise continuous degree two polynomial, which can be written in Bézier form. As in the case of the boundary curves, only the pieces incident to the mesh vertex p are computed: n , and ni is the order of p i i is a linear function, therefore the cross-boundary tangents are therefore piecewise cubic. However, the surface must be of degree 5 in order to ensure C 1 continuity between the 4 inner Bézier patches. The ribbons of cross-boundary tangents are now determined, and the first inner row of control points of the macro-patches can be computed from <ref type="bibr" target="#b0">(1)</ref> and (3).</p><formula xml:id="formula_3">derivatives @M i @u i+1 (ui 0). p i−1 p i+1 p i p M i (u ,0) u i M i (u ,0) u</formula><formula xml:id="formula_4">Vi(ui) = P 2 j=0 v i j B 2 j (ui) ui 2 0 1 2 ] with v i 0 = 6 n P n j=1 sin 2 (j;i) n p j v i 1 = 6 n P n</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Computing inner Bézier points.</head><p>Each macro-patch is composed of four quintic triangular Bézier patches. The boundary curves of the macro-patch are the twice degree elevated curves of section 2.2. The cross-boundary tangents of sect. 2.3 determine the first inner row of control points after one degree elevation. The remaining 15 inner control points, which are highlighted in <ref type="figure" target="#fig_4">fig. 4</ref>-left, are now computed by joining the four inner patches with C 1 continuity. The necessary and sufficient C 1continuity conditions between two internal Bézier patches inside one macro-patch are shown in <ref type="figure" target="#fig_4">fig. 4</ref>-right: all pairs of adjacent triangles must form a parallelogram, otherwise C 1 continuity would not be possible. In <ref type="bibr" target="#b6">[7]</ref> it was shown, that the first and last pairs of adjacent triangles in <ref type="figure" target="#fig_4">fig. 4</ref>-right already form parallelograms (gray shaded). The 15 control points are therefore subject to 9 linear parallelogram equations ensuring C 1 joints of the 4 patches. 6 control points are thus free for shape control of the macro-patch. Minimization of an energy functional produces a well shaped smooth surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">GENERATING DERIVATIVE INFORMA-TION AT THE MESH VERTICES</head><p>The polyhedral mesh interpolation method which we now want to describe in detail has the same skeleton as the 4-split method sketched out in chapter 2. It preserves all the attractive features but generalizes the method in an important point, that is the construction of the boundary curve network. A more flexible approach will be presented offering more degrees of freedom which are necessary in order to obtain a well shaped curve network. It is well known that visual smoothness, which stands for G 1 continuity, generally doesn't always guarantee a "nice shape" <ref type="bibr" target="#b8">[9]</ref>. "Bad" shape features, like wiggles, bumps or self-intersections, should be avoided and the shape inherent to the polyhedral input mesh should be reproduced smoothly. It is therefore obvious that the construction of the boundary curve network is the crucial point of such an interpolation method; it is predominant for the final result. The generalized method we propose for the construction of a G 1 compatible curve network interpolating a polyhedral mesh is due to a detailed study of the G 1 and the twist conditions which are imposed at the mesh vertices. This leads to a new and quite different approach as what has been done until now in related works <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>. The benefit is threefold: more freedom and intuitive control for the boundary curve network is available; one gets a more local interpolant; normal vector interpolation becomes possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">G 1 Continuity.</head><p>Let us start by remembering that two patches X and Y sharing a common boundary curve meet with first order geometric continuity, denoted G 1 , if they share a common tangent plane at all points of their common boundary, i.e. if there exist three scalar functions such that When joining polynomial patches together to a network of patches with G 1 continuity special attention has to be paid to the patch corners. The idea is to construct the triangular surface patches in oneto-one correspondence to the polyhedral mesh faces. Let us consider the n patches parameterized as in <ref type="figure">fig. 1</ref>, each triangular patch</p><formula xml:id="formula_5">M i = M i (ui u i+1)</formula><p>is the piecewise polynomial image of the unit triangle. i = 1 : : : n is taken modulo n.</p><p>In order to obtain at the end an explicit expression for each patch some simplifying and symmetric assumptions on the G 1 conditions have to be made as follows: i(0) = i;1(0) =: 0 0 i (0) = 0 i;1 (0) =: 1 i(ui) i(ui) 1 2 i = 1 : : : n :</p><p>The G 1 condition between a pair of surface patches M i and M i;1 now looks as follows:</p><formula xml:id="formula_6">i(ui) @M i @ui (ui 0) = 1 2 @M i;1 @ui;1 (0 u i) + 1 2 @M i @ui+1 (ui 0): (4)</formula><p>At the patch corner p, i.e. for ui = 0 , the condition (4) can be written in matrix form as follows: :</p><formula xml:id="formula_7">P r 1 = 0<label>(5)</label></formula><p>Note, that r 1 is a (n 3) vector containing the first partial derivatives of the patch boundary curves at the vertex ui = 0 . The function i can be determined from the fact that det P = 0 should be satisfied and that the derivative of i at ui = 0 should not depend on the value <ref type="bibr" target="#b0">(1)</ref>. i should also be of lowest possible degree which leads to the following choice:</p><formula xml:id="formula_8">i(ui) = ( cos 2 n (1 ; 2ui) + ui for ui 2 0 1 2 ]</formula><p>(1 ; ui) + ( 1 ; cos 2 n i )(2ui ; 1) for ui 2 1 2 1]</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Twist Compatibility.</head><p>When joining n polynomial patches around a common vertex with G 1 continuity an additional condition has to be satisfied at the common vertex. It is called twist compatibility condition and given by T t = 1 r 1 + 0 r 2</p><p>where T =   :</p><p>It is obtained by differentiating (C) with respect to ui and evaluation at ui = 0 . The condition (7) must hold because polynomial patches lie in the continuity class C 2 , implying that the twist terms (mixed partial derivatives) are identical. Different approaches exist in order to solve the twist compatibility problem <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b6">[7]</ref>. We solve the system <ref type="bibr" target="#b6">(7)</ref> which is singular if n is even, by constructing a twist compatible boundary curve network i.e. boundary curves are determined such that the vectors r 1 and r 2 lie in the image space of T . It will turn out in the following subsections that the kernel of P and the image space of T is explicitly known <ref type="bibr" target="#b1">[2]</ref>. This will enable us to characterize the vectors r 1 and r 2 with a maximum number of degrees of freedom while simultaneously satisfying equations (4), <ref type="bibr" target="#b4">(5)</ref>, <ref type="bibr" target="#b6">(7)</ref>.</p><p>Once the first and second order derivatives of the boundary curves at the vertices, r 1 , r 2 , are known, the whole curve network is also known. The construction of the cross-boundary tangents and the inner patches can then be continued as in the 4-split method, see chapter 2 in order to obtain a smooth polyhedral mesh modeling method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">First order derivatives.</head><p>Let us now explain how the boundary curves can be determined. They will consist of piecewise (two pieces) cubic curves in order to keep the scheme local by separating first and second derivatives from one vertex to its neighbouring vertices. The final triangular patches will be given explicitly in Bézier form, let us therefore use the Bernstein-Bézier notations <ref type="bibr" target="#b3">[4]</ref> for the boundary curves as well.</p><p>Let x(t) = x 00 (a) = 6 (b;a) 2 (b2 ; 2b1 + b0):</p><p>For the boundary curve pieces incident to the vertex p = b i 0 we adopt the notations as illustrated in <ref type="figure" target="#fig_0">fig. 2</ref>. The joining curve pieces are determined from the neighbouring vertices p i (locality of the scheme). b i 0 = p is already known (interpolation of the mesh vertices), the vector r 1 is therefore determined by the control points b i 1 and r 2 is determined by the control points b i 2 , i = 1 : : : n . From <ref type="bibr" target="#b4">(5)</ref> and <ref type="bibr" target="#b6">(7)</ref> follows that the vector r 1 should lie in the kernel of P      </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">:</head><p>The vector r 1 can therefore be written as a linear combination of k a and k b "</p><formula xml:id="formula_11">r 1 # n 3 = " k a # n 1 ( a )1 3 + " k b # n 1 ( b )1 3 (9)</formula><p>where the vectors a and b are the degrees of freedom and can be chosen arbitrarily.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Geometrical interpretation:</head><p>Equations <ref type="formula">8</ref> For practical use of these theoretical considerations it is now important to choose a and b such that the n tangents of the boundary curves in p fit the best. For this purpose we first determine "optimal tangents", denoted r 1 opt , by a simple heuristic rule and then approach them in a least squares sense. The heuristic rule <ref type="bibr" target="#b11">[12]</ref> consists of choosing the optimal tangent vectors r 1 iopt as lying in the plane spanned by the edge pp i and a mean normal vector of the mesh facets at p, see <ref type="figure">fig. 7</ref>.</p><p>These are the tangents which we want to reach by using a linear least squares approximation </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Second order derivatives.</head><p>A further requirement on the boundary curves is to have second order derivatives at the end points lying in the image space of the matrix T . We can therefore choose any vector r 2 , such that r 2 = T r 2</p><p>where r 2 is an arbitrary (n 3) vector. T is a (n n) cyclic matrix. If n (order of the vertex p) is odd, then T is invertible, and thus n second derivatives for the n boundary curves r 2 can be chosen arbitrarily. And if n is even, T has only rank n ; 1, therefore some chosen n second derivatives, denoted r 2 opt can only be approximated, for example through a linear least squares approximation kr 2 ; r 2 opt k 2 ! min :</p><p>Since the matrix T has nearly full rank, this least squares minimization approaches quite good the desired second derivatives. As an example, see <ref type="figure" target="#fig_0">fig. 12</ref>, where the input mesh consists only of vertices of even order.</p><p>Note, that the total amount of n resp. n ; 1 vector valued degrees of freedom are available at each vertex. Once these second order derivatives are fixed, i.e. the control points b i 2 are fixed, the whole boundary curve network is entirely fixed. Remember, that each boundary curve is a piecewise cubic curve, which is required to be C 1 continuous, therefore the control points b i 3 and b k</p><p>3 of a boundary curve between the vertex p and its neighbour vertex p i have to be identical and b i 3 = b k 3 = 1 2 (b i 2 + b k 2 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Target middle points &amp; target derivatives.</head><p>It's not quite evident how to choose the "optimal" second order derivatives at a vertex p for the boundary curves. On one hand, the scheme should keep a local one, i.e. both curve pieces of a boundary curve have to be constructed independent from each other. On the other hand, fixing b i 2 and b k 2 (k is the index of p in the neighbourhood of p i ) determines finally the shape of the boundary curve between p and p i .</p><p>In order to cope with both problems we propose the following solution. For each boundary curve we choose a middle control point, called target point and a derivative at that point, see <ref type="figure" target="#fig_19">fig. 8</ref>, which we want to approach or interpolate by the curve. This is equivalent to choosing b i 2 and b k 2 . It keeps the scheme local, but allows at the same time a control of the whole curve. Furthermore, these control handles offer an intuitive way for controlling the curve network. Optimal values can be found either by using a heuristic rule, or by minimizing some energy norm.</p><p>Note, that for odd order vertices, these optimal target handles can be interpolated exactly, while otherwise they have to approximated in a least squares sense.   illustrates how important it is to have a maximum number of degrees of freedom for the second order derivatives. On the right some optimal target points and target derivatives have been approached. They are shown in red with respect to a cubic parametrization. The smooth surface is also shown together with the control polygon of the boundary curves (blue). They are shown as degree 5 curves (two times degree elevated). The sensitivity of the interpolation scheme is shown on the left figures, where some "bad" target points and tangent have been chosen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Twist information.</head><p>Once the vectors r 1 and r 2 are determined the system (T) can be solved for the twist vectors t. An explicit expression can be given as follows t = 1 ( k a a + k b b) + 0 r 2 :</p><p>This expression is used in the next step of the algorithm, which is the construction of the cross-boundary tangent ribbons along the boundary curve network. Here it is important to know the twists explicitly, because otherwise it would not be possible to provide an explicit expression of the final surface. For this purpose and the last setp of filling-in the macro-patches C 1 -continuously one proceeds analogously to the 4-split method, see sections 2.3 and 2.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remark 1: normal interpolation</head><p>Since we are able to exactly choose the tangent plane basis vectors, all one has to do in order <ref type="figure">Figure 10</ref>: Polyhedral mesh -smooth surface with boundary curve network. <ref type="figure">Figure 11</ref>: control polygon -smooth surface with boundary curves.</p><p>to interpolate a given normal vector at the vertex is to choose these two tangent plane vectors orthogonal to that given normal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remark 2:</head><p>Locality of the scheme The scheme is local in the sense that moving one vertex will only affect the macro-patches around that vertex, and more over will leave the tangent ribbons of the opposite edges to that vertex unchanged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>The first example stresses the ability to interpolate meshes with arbitrary topology. The input mesh is available at ftp:// ftp.cs.washington.edu/pub/graphics/meshes. <ref type="figure">Fig.  10</ref>-left shows the input mesh. <ref type="figure">Fig. 10</ref>-right shows the resulting G 1 surface together with the boundary curves. The order of the vertices ranges from 4 to 8 in this example. <ref type="figure">Fig. 11</ref>-left shows the control polygons of each of the triangular Bézier patches. Different colors have been used in order to distinguish the four Bézier patches per macro-patch. The curve control polygons are also highlighted, while the interpolated points are shown in red. <ref type="figure">Fig. 11</ref>-right shows the surface together with the boundary curve control polygons. It should be pointed out that we used a very crude treatment for the surface border and some additional work should be done on how to handle open meshes. <ref type="figure" target="#fig_0">Fig. 12, 13</ref> show at the top an input mesh, in the middle the resulting surface together with the interpolated points in red, and the bottom the control polygons. For the torus input mesh in <ref type="figure">Fig.</ref> 14 a heuristic rule in order to find optimal second derivatives r 2 opt (see sect. 3.4) has been used. Even though all vertices have an even order, which means less degrees of freedom in the choice of the second derivatives, the torus is nearly reproduced.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Boundary curves incident to a mesh vertex. The control points b i 0 are fixed by the interpolation condition. Then the first and second derivative informations of the n boundary curves have to be calculated in order to determine b i 1 and b i 2 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>A few degrees of freedom f 1 2 g, b i 1 and di = 2 6</head><label>22</label><figDesc>are nevertheless available for each vertex. The control points b i 1 form an affine transformation of a regular n-gon. They all lie in the same plane, which is the tangent plane at p. controls the magnitude of the first derivatives. The second derivative control points b i 2 lie in a plane containing the 3 points b i 0 (2p + p i;1 + 2 p i + p i+1 ). More details can be found in<ref type="bibr" target="#b6">[7]</ref>.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Cross-boundary tangents.The cross-boundary derivatives are defined as@Mi @ui+1 (ui 0) = i(ui) @Mi @ui (ui 0) + i(ui)Vi(ui) (2)where i and i are scalar functions and Vi is a vector valued function. These functions should -be of minimal degree, and -interpolate the first and second derivatives at the curve endpoints.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>C 1 -conditions between two adjacent quintic Bézier patches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>(Figure 5 : G 1</head><label>51</label><figDesc>s)Ys(s 0) = (s)Xr(0 s ) + (s)Yt(s 0) : continuity between two adjacent patches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>At the end point t = a one obtains for the first and second derivatives x 0 (a) = 3 b;a (b1 ; b0)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>and in the image space of T . P and T are cyclic matrices [DAV79]. The kernel of P is spanned by two vectors</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>k b lie also in the image space of T , because two vectors k a and k b exist such that T k a = k a and T k b = k bwhere</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 6 :</head><label>6</label><figDesc>and (9) can be interpretated geometrically in order to indicate the correct way for choosing a and b. Geometrical interpretation of the vectors a and b. The components r 1 i are the tangents of the boundary curves at the common vertex p which are all lying in the same plane, which is the tangent plane T p at p (see G 1 -condition (4)). fa bg is the basis of the tangent plane and k a i k b i are the coordinates of r 1 i in this basis, see fig. 6. These coordinates, k a i = c o s 2 i n , k b i = sin 2 i n imply that the first derivative control points b i 1 = b i 0 + 1 6 r 1 i of the boundary curves form an affine transformation of a plane regular n-gon. This affine transformation is explicitly given by the choice of the tangent plane basis a and b.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>kr 1 ( 1 Figure 7 :</head><label>117</label><figDesc>a b) ; r 1 opt k 2 ! min a bin order to determine a and b. "Optimal" first derivatives.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Figure 8 :</head><label>8</label><figDesc>Target point and target vector.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 9 :</head><label>9</label><figDesc>Torus mesh, left with bad target points, right with correct target points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 9</head><label>9</label><figDesc>Figure 9 illustrates how important it is to have a maximum number of degrees of freedom for the second order derivatives. On the right some optimal target points and target derivatives have been approached. They are shown in red with respect to a cubic parametrization. The smooth surface is also shown together with the control polygon of the boundary curves (blue). They are shown as degree 5 curves (two times degree elevated). The sensitivity of the interpolation scheme is shown on the left figures, where some "bad" target points and tangent have been chosen.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Figure 12 :</head><label>12</label><figDesc>Figure 13: Top to bottom: polyhedral mesh, smooth surface, control polygon.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure 14 :</head><label>14</label><figDesc>Polyhedral mesh -smooth surface -smooth surface with boundary curves.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Smoothing polyhedra using implicit algebraic splines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bajaj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="79" to="88" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Circulant Matrices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Davis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979" />
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A construction for visual C 1 continuity of polynomial surface patches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Farin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics and Image Processing</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="272" to="282" />
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Curves and Surfaces for Computer Aided Geometric Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Farin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Academic Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">N-sided surface patches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Gregory</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Clarendon Press</publisher>
			<biblScope unit="page" from="217" to="232" />
			<pubPlace>Oxford</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Geometric surface patches without twist constraints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="179" to="184" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Triangular G 1 interpolation by 4-splitting domain triangles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hahmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G-P</forename><surname>Bonneau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint/>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A G 1 triangular spline surface of arbitrary topological type</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Loop</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="303" to="330" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">A survey of parametric scattered data fitting using triangular interpolants</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Loop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lounsbery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Meyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Painter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sloan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>SIAM</publisher>
			<biblScope unit="page" from="145" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">A transfinite, visually continuous, triangular interpolant</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nielson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<publisher>SIAM</publisher>
			<biblScope unit="page" from="235" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Smooth interpolation of a mesh of curves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Peters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Constructive Approximation</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="221" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Visually smooth interpolation with triangular Bézier patches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Piper</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<publisher>SIAM</publisher>
			<biblScope unit="page" from="221" to="233" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
