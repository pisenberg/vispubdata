<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fairing Of Non-Manifolds For Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Hubeli</surname></persName>
							<email>hubeli@inf.ethz.ch</email>
							<affiliation key="aff0">
								<orgName type="institution">ETH Zentrum</orgName>
								<address>
									<postCode>CH -8092</postCode>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Gross</surname></persName>
							<email>grossm@inf.ethz.ch</email>
							<affiliation key="aff0">
								<orgName type="institution">ETH Zentrum</orgName>
								<address>
									<postCode>CH -8092</postCode>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zurich</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">ETH Zentrum</orgName>
								<address>
									<postCode>CH -8092</postCode>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Fairing Of Non-Manifolds For Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Boundary Representations</term>
					<term>Surface Representations</term>
					<term>Non-manifold</term>
					<term>Fairing</term>
					<term>Geometric Modeling</term>
					<term>Triangle Decimation</term>
					<term>Multiresolution Models</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fairing of a simple scene (see also CP1): a) Original input scene. b) Scene faired in the two-manifold setting: the intersections between water and land and between the columns and the top/bottom of the shrine are lost. c) Scene faired in the non-manifold setting: the topological type of the scene is preserved, and the model is smooth both along and across intersection curves.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Motivation: Model-Centric Graphics</head><p>In recent years, with ubiquitous low-priced, high-performance graphics hardware conquering the desktop, the models of many graphics applications are becoming ever more complex. Driven by the need to manage model complexity there has been a conver-gence of computer graphics and modeling technologies. Rather than maintaining separate representations for modeling and rendering, researchers strive towards model-centric graphics, the benefits of which include improved workflows and reduced data loss <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b9">[10]</ref>.</p><p>Most core fields of computer graphics, such as animation, have concentrated their efforts on working with manifold surfaces, since they can be handled more easily: non-manifold models are inherently more complex to construct and to maintain. The rationale behind this choice has been that the visual quality of a product is of paramount importance, and other considerations, such as the topological consistency of a model, were not thought of as priorities. By taking a model-centric view we free the artist from concerns about topological inconsistencies and construct automatisms that allow him to concentrate on the creative part of his work. We advocate the use of non-manifold models, as built in an advanced modeling framework. As an example, consider figure 1-a that depicts a non-manifold graphics model, where the water, the land, the columns, the top and bottom of the shrine and the bunny were modeled separately as manifold surfaces. If these manifolds are faired independently (figure 1-b), severe artifacts become visible. For instance, the water does not wash against the terrain and the top and bottom of the shrine are not connected to the columns. If the same model is faired in a non-manifold model-centric setting (figure 1-c), the topological type of the model is preserved, and some of its features, such as the shape of the top of the shrine, are preserved more accurately.</p><p>A significant step towards model-centric graphics are editing frameworks that build multiresolution hierarchies directly from triangle meshes. As a core feature, users can interactively edit and manipulate meshes at different levels of resolution. A key ingredient of these frameworks is discrete mesh fairing, applying signal processing techniques to meshes. However, advanced modeling frameworks typically build non-manifold models. We address the issue of applying fairing to non-manifold models.</p><p>In order to further understand the problem of non-manifold fairing, consider the example given in figure 2-a, where two triangular meshes intersect. Applying an adaptation of a manifold fairing method will either remove the intersection completely, depicted in figure 2-b, or it will generate a non-smooth model, as shown in figure 2-c. Our non-manifold fairing method, by contrast, smooths the entire model including the two partial surfaces and the intersection line, as presented in figure 2-d (see section 2.3).</p><p>By extending conventional fairing operators to non-manifolds we provide a framework that can be used to build advanced multiresolution and model-centric graphics representations supporting constraints and other useful functionalities. In fairing non-manifold models we approach a system capable of automation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Related Work</head><p>Among the most popular concepts of multiresolution editing frameworks we mention <ref type="bibr" target="#b16">[17]</ref>. The authors used Loop subdivision for the estimation of the high resolution mesh from the coarse representation. Another elegant system was devised by <ref type="bibr" target="#b8">[9]</ref>, who was the first to demonstrate the advantages of a discrete fairing method as a fairing operator for mesh editing. He combined a very fast multilevel smoother with a progressive mesh algorithm for mesh simplification. These two examples show that the key ingredients to design multiresolution mesh representations include both a fairing or subdivision method and a mesh reduction algorithm.</p><p>Of the variety of mesh reduction methods, the most popular ones encompass the progressive mesh of <ref type="bibr" target="#b6">[7]</ref> that computes a sequence of progressively refineable meshes by successive application of an edge collapse operator. In combination with appropriate data structures <ref type="bibr" target="#b7">[8]</ref> and error metrics <ref type="bibr" target="#b3">[4]</ref> this method provides a very powerful representation for triangle meshes. Other popular methods comprise <ref type="bibr" target="#b13">[14]</ref> who proposes a vertex removal strategy with a local remeshing method to successively simplify an initially dense mesh.</p><p>In order to efficiently build such multiresolution mesh hierarchies, mesh fairing has often been used as a core technology to enhance the smoothness of a mesh. Unlike geometrically motivated approaches to fairing that involve the costly minimization of fairing functionals, <ref type="bibr" target="#b15">[16]</ref> pioneered a signal processing approach to mesh fairing. This approach generalizes the notion of "frequency" to meshes of arbitrary connectivity by taking the eigenfunctions of the discretized Laplacian. Hence, mesh smoothing can be accomplished by attenuation of the eigenvalues associated to the "high frequencies" of the mesh. This type of "low-pass" filtering bandlimits the mesh and produces visually appealing models. Since the storage and computational cost is linear in the number of vertices, this approach has become popular for mesh filtering. While mesh fairing can be considered as a diffusion of the perturbations over the mesh surface, <ref type="bibr" target="#b1">[2]</ref> proposed a fast and robust implicit fairing scheme using a backwards Euler integration. Another important aspect relates to the quality of the estimation of the surface curvature. Rather than using discretized Laplacians <ref type="bibr" target="#b1">[2]</ref> proposed a discrete curvature flow operator. A further important extension of the signal processing approach to triangle meshes has been given in <ref type="bibr" target="#b5">[6]</ref>. They elegantly combined non-uniform subdivision with a fairing algorithm to transform an arbitrary mesh into a multiresolution representation, where the details influence the mesh on an increasingly coarse scale. By manipulation of individual scales, they obtain low-, high-, and bandpass behavior, with very impressive results.</p><p>We note, however, that most of the described research has been directed towards the handling of arbitrary, but two-manifold, meshes. In contrast, relatively little work has been conducted towards multiresolution editing of non-manifold models. By abandoning topologically simple models, such as spheres and manifolds, and by tolerating non-manifold geometry, we obtain a new dimension of modeling features and bring in more of the classical Computer Aided Design functionality into graphics modeling. Although non-manifold representations are being widely used in modeling, there has not been any framework for multiresolution editing of non-manifolds introduced so far.</p><p>In order to devise such a framework, the described key components have to be extended to tolerate non-manifold geometry. Multiresolution meshes in principle can accommodate topological changes <ref type="bibr" target="#b3">[4]</ref> and extend to multidimensional simplices <ref type="bibr" target="#b11">[12]</ref>. We are, however, not aware of any fairing framework for non-manifolds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Our Contribution</head><p>In this paper we present a framework for multiresolution fairing of non-manifold models -one of the key ingredients needed to build multiresolution editors. We demonstrate the usefulness of our methods by taking various examples, including subsurface models from the domain of geoscience. The framework comprises the following components: • A multilevel fairing algorithm based on a multiresolution representation of non-manifold models. The flexibility of the basic fairing algorithm allows us to use any discrete Laplacian, curvature flow, or second order difference operator. • The underlying boundary representation data structure allows us to model basic constraints, such as boundary conditions and intersection curves. These constraints are usually extracted automatically from models, but they can also be specified manually by the user. • The data structure, in conjunction with the basic fairing algorithm, enables us to define complex constraints, such as volume preservation and feature preservation easily. The volume preservation strategy is applied locally, thus we can define volumes in a model in a simple and consistent manner. Features are preserved by freezing vertices and curves, without degrading the quality of the fairing process. Section 2 stresses the difference between surfaces and models and briefly reviews the core concepts of conventional mesh fairing. Section 3 introduces the novel non-manifold fairing algorithm. Finally, in section 4 we address two important extensions to our basic fairing framework: volume and feature preservation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Surfaces versus Models</head><p>In this section we briefly review some of the existing fairing methods for manifolds. All of the algorithms that we will describe can be extended for usage within our framework to smooth non-manifold models. In addition we will introduce the notions of two-manifold and non-manifold models and stress the specifics of nonmanifold fairing. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Fairing Methods for Manifolds</head><p>We start our survey of fairing strategies by presenting a onedimensional fairing operator. Fairing in one dimension is easier to achieve, since we are working in a regular, parametrizable setting. As <ref type="bibr" target="#b1">[2]</ref> noted, the standard 1D Laplacian assumes the distance between the three vertices , and as being constant. If the distance between individual vertices varies substantially, the standard Laplacian can be improved using, for instance, generalized divided differences or other concepts from numerical analysis <ref type="bibr" target="#b14">[15]</ref>, which results in <ref type="bibr" target="#b0">(1)</ref> where and <ref type="bibr" target="#b0">1</ref> . The fairing of two-dimensional triangular meshes is inherently more complex, since in general meshes are not regular. In the following we summarize the better known fairing operators that have been constructed in recent years.</p><p>In his pioneering work <ref type="bibr" target="#b15">[16]</ref> generalized the fairing concepts known from signal processing to smooth irregular meshes. He essentially constructed a matrix that provides a discrete approximation of the Laplacian for all the mesh vertices <ref type="bibr" target="#b1">(2)</ref> and he proposed to smooth the mesh using an iterative Gaussian filtering method:</p><formula xml:id="formula_0">(3)</formula><p>where is the identity matrix and is an appropriately selected scalar value. The construction of the matrix determines the properties of the fairing operators.</p><p>[9] constructed a multiresolution editing framework for meshes with arbitrary connectivity. In order to edit surfaces effectively they used a fairing method to remove high frequencies from the mesh. Their fairing algorithm combines a Gaussian smoother with an umbrella operator to approximate the Laplacian . A variational formulation states the fairing problem as a minimization of a membrane energy and a thin plate energy of a "mesh-function". In order to discretize the variational formulation using divided difference operators the authors assumed that the vertices in the oneneighborhood of every vertex have a regular parametrization. Under this assumption he could construct the following two operators: <ref type="bibr" target="#b3">(4)</ref> which corresponds to a discretization of the Laplacian and <ref type="formula">5</ref>which corresponds to the discretization of . In (4) and in (5) the vertices lie in the one-neighborhood of , and denotes the number of vertices in . <ref type="bibr" target="#b1">[2]</ref> proposed two new, improved operators to smooth two-manifold surfaces. The first one extends equation <ref type="bibr" target="#b3">(4)</ref> to better handle meshes with differently sized triangles. To this end, each vertex in the one-neighborhood of is weighted with the length of the edge between and , yielding:</p><formula xml:id="formula_1">with (6)</formula><p>The second operator introduced in [2] is based on the concept of curvature flow. Surfaces are faired by moving the vertices in the mesh along their normals with a speed equal to their mean curvature . Hence, <ref type="formula">7</ref>The right hand side of equation <ref type="formula">7</ref>can be computed efficiently for a triangular mesh as <ref type="bibr" target="#b7">(8)</ref> where the and are the angles opposite to the edge in the two triangles that share , and is the sum of the areas of the triangles in the one-neighborhood of .</p><p>The authors also presented a more efficient solution of the underlying diffusion equation than (3) by using implicit integration, and they devised a strategy to obtain exact global volume preservation during the fairing process.</p><p>Finally, <ref type="bibr" target="#b5">[6]</ref> described a new fairing algorithm that relies on the minimization of second order differences defined at every edge e in the mesh. The new position of a vertex is chosen as to minimize the sum of the squares of the second order differences within the support of the vertex . From this formulation it is possible to obtain a discretized Laplacian that has the form:</p><formula xml:id="formula_2">, with<label>(9)</label></formula><p>where stands for the extended one-neighborhood of with flaps, and the are a set of coefficients that depend on the geometric position of the vertices in the mesh. More details can be found in <ref type="bibr" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Manifolds and Non-Manifolds</head><p>In order to better understand what follows, let us first consider a formal definition: a surface is a two-manifold if all of its points have an open neighborhood homeomorphic to . This definition can be extended to two-manifold surfaces with boundaries, where every point has an open neighborhood homeomorphic to either or . More information on n-manifolds can be found in <ref type="bibr" target="#b10">[11]</ref>.</p><p>If a surface does not satisfy this criteria, it is called a non-manifold. Examples of non-manifold surfaces include for instance selfintersecting surfaces or T-junctions 2 . There are various data structures that describe non-manifolds. In the subsequent framework we use a boundary representation, such as the one presented in <ref type="bibr" target="#b12">[13]</ref>. This representation describes a model using a graph: three-dimensional volumes are bounded by two-dimensional surfaces, which in turn are bounded by one-dimensional curves. Finally, 1D lines are bounded by zero-dimensional vertices. In general, we are going to call these primitives n-features, where . In this paper, we will also assume that the non-manifold models are simplicial complexes, that is, the intersection of two simplices is either empty or a simplex. An n-simplex is the convex hull of n+1 affine independent vertices: a 0-simplex is a point, a 1-simplex is a segment, a 2-simplex a triangle and so on.</p><p>In our framework, we describe a non-manifold model with the following data structure:</p><p>• A set of geometric positions: every vertex in the model has a unique entry in this set. Non-manifold vertices also have only one entry to guarantee that the model is smoothed correctly. <ref type="bibr" target="#b0">1</ref> Note that (1) corresponds to the standard Laplacian for</p><formula xml:id="formula_3">x i 1 - x i x i 1 + ∆ x i 2 δ ∆ + ------------- x i 1 - x i - δ ---------------------- x i 1 + x i - ∆ ---------------------- +     = δ ∆ = δ x i 1 - x i - = ∆ x i 1 + x i - = K x i ∆x K x ⋅ - = x x' I λK - ( )x = I 0 λ 1 &lt; &lt; K ∆x x i ∆ x i 1 n --- x j j N 1 i ( ) ∈ ∑ x i - = ∆x ∆ 2 x i 1 n --- ∆ x j j N 1 i ( ) ∈ ∑ ∆ x i - = ∆ 2 x x j N 1 i ( ) x i n N 1 i ( ) x j x i e i j , e i j , x i x j ∆ x i 2 E --- x j x i - e i j , ---------------- j N 1 i ( ) ∈ ∑ = E e i j , j N 1 i ( ) ∈ ∑ = 2</formula><p>Note that a T-junction, as presented in figure 3, can be considered as a special case of an intersection of two manifolds.</p><formula xml:id="formula_4">x i n i κ i ∆ x i κ i n i - = ∆ x i 1 4 A ------- α j cot β j cot + ( )x j x i - ( ) j N 1 i ( ) ∈ ∑ = α j β j e i j , e i j , A x i D e 2 x i x i ∆ x i w i j , x j x i - j N 1 i ( ) ∈ ∑ = w i j , c e i , c e j , ⋅ j e , ∑ c e i , 2 e ∑ ----------------------------- - = N 1 i ( ) x i c e i , ℜ 2 ℜ 2 ℜ + 2 0 n 3 ≤ ≤</formula><p>• A set of two-features: a two-feature is defined as a triangulated two-manifold. If we assume that the non-manifold model was generated from n two-manifold surfaces, then a two-feature corresponds to one of these two-manifolds plus all the vertices and triangles introduced in the manifold by the computation of the intersection curves. • A set of one-features: one-features are piecewise linear curves defined in one or more two-features. We will distinguish in this paper between two types of one-features: user-specified one-features and representation-specific one-features. Intersection and boundary curves are examples of representation-specific onefeatures. • A set of zero-features: zero-features are vertices in the model that must be interpolated. We distinguish between two types of zero-features: user-specified zero-features and representationspecific zero-features. Vertices shared by two or more one-features are examples of representation-specific zero-features. The user can force any vertex to be a zero-feature, and any 1D curve to be a one-feature. This will allow us to construct point-and curve-interpolating smoothers (see section 4.2).</p><p>Furthermore, we observe that it is possible to identify two different embeddings of oriented (n-1)-dimensional manifolds (such as a one-feature) in an oriented n-dimensional manifold (such as a twofeature). Consider the intersection curve between the two two-features illustrated in figure 3: for the yellow two-feature it is an interior curve, for which the 2D Laplacian can be computed, and for the green two-feature it is an boundary curve, for which the 2D Laplacian cannot be evaluated without explicit boundary conditions. We define two types of (n-1)-dimensional embeddings:</p><formula xml:id="formula_5">• An (n-1)-dimensional manifold is an l-seam if an n-dimensional</formula><p>Laplacian will be computed for its vertices. Usually this corresponds to (n-1)-manifolds embedded in the interior of an n-manifold. They will be denoted by blue curves in our examples.</p><formula xml:id="formula_6">• An (n-1)-dimensional manifold is an l-limit if an n-dimensional</formula><p>Laplacian will not be computed for its vertices. Usually this corresponds to (n-1)-manifolds embedded on the boundary of an nmanifold. They will be denoted by red curves in our examples. <ref type="bibr" target="#b0">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Why Manifold Fairing Operators Fail on Models</head><p>Unfortunately, a non-manifold model cannot be smoothed by straightforward application of the operators we described previously to all the two-manifold surfaces in the model. The operators from section 2.1 assume that the neighborhood of a vertex is homeomorphic to and, as a consequence, they are not defined at non-manifold singularities. Of course, one could envision straightforward extensions of the manifold operators to adapt them to non-manifold models. We discuss two of them using the model illustrated in figure 2-a: I. A simple adaptation consists in smoothing the model by fairing all the two-features separately. In this approach, each two-feature would have its own geometric information, and the position of the non-manifold vertices would be replicated in multiple two-features. <ref type="figure" target="#fig_0">Figure 2</ref>-b depicts the result of fairing the input model using this strategy. Since the two-features have been faired separately, and since the information on the l-seam has not been used, the resulting model is optimally smooth, but the l-seam has been entirely removed. In general this approach does not preserve l-seams or l-limits, and the faired models it generates are not simplicial complexes. As a consequence it is required to recompute the intersections between all the twomanifolds -a very costly computational burden that must be avoided. II. Another strategy is to define the neighborhood of a vertex as the union of all the neighborhoods of in all the two-features where is defined, and then use a standard manifold fairing operator to smooth the model. <ref type="figure" target="#fig_0">Figure 2</ref>-c presents the faired model obtained when using this method. The model was not smoothed at all. The problem is that the Laplacian of the vertices in the l-seam is equal to zero, since the Laplacians of these vertices in the yellow and green two-features have the same magnitude, but inverse directions. Finally, <ref type="figure" target="#fig_0">figure 2-d</ref> shows what we consider a correct result. First of all, the l-seam has been preserved. This is very important, since we usually do not want to change the topology of the model during the fairing process. Furthermore, the two two-features in the model are smooth, also across the l-seam. Finally, all the one-features in the model are smooth as well, and the ten zero-features (the green points) have been interpolated.</p><p>In this example we used the Umbrella operator to estimate the Laplacian, and we avoided the shrinking problem by handling the boundaries of the model as l-limits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Model-Centric Fairing</head><p>In this section we present a novel approach to smooth non-manifold models. In a model we will smooth both the two-features and the one-features simultaneously, and we will achieve cross-l-seams smoothness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview</head><p>The manifold smoothers described in section 2.1. remove high frequencies by moving the mesh vertices so as to minimize an approximation of the curvature. Without restricting the generality of our framework, we will work with an approximation of the Laplacian for the following analysis. Other operators could be used as well.</p><p>Our goal in smoothing non-manifold models is to fair all the two-features and all the one-features while interpolating the zerofeatures and guaranteeing cross-l-seams smoothness. As we will explain subsequently, this can be achieved by constructing a framework on top of any conventional manifold smoother. The algorithmic flow of the resulting method is similar to the flow of conventional smoothing algorithms, and is summarized by the following pseudo-code fragment: In the first step the approximation of the Laplacian is computed for all the vertices in the model. A 2D Laplacian is computed for all vertices that do not lie in an l-limit, and a 1D Laplacian is computed for all the vertices that are not l-limits in the one-features. Intersection curve</p><formula xml:id="formula_7">//</formula><formula xml:id="formula_8">x i ℜ 2 x i x i x i</formula><p>Note that it might be necessary to compute multiple Laplacians for a single vertex, such as for vertices in an l-seam, where both a 1D and a 2D Laplacians are needed.</p><p>The core of our framework is the function computeNewPos () in the second step, where the new position for all vertices must be computed. Immediate use of simple approaches such as <ref type="bibr" target="#b2">(3)</ref> would not generate fair models, since cross-l-seam smoothness could not be guaranteed. Instead, the new position for the vertex is chosen as to minimize a weighted sum of the Laplacian and the Laplacians of the vertices in the one-ring of , thereby increasing the support of the vertices in the model. The zero vertices in the model are interpolated, the vertices that belong to a one-feature are smoothed with a 1D Laplacian, and the remaining vertices are smoothed with a 2D Laplacian.</p><p>Note that depending on the choice of the underlying operator we will minimize different functionals, such as the ones reviewed in section 2.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">A Fairing Functional for Non-Manifolds</head><p>The first step in the pseudo-code algorithm presented in the previous subsection can be computed using any existing fairing operator. The basic principle behind our approach for the second step is to increase the support of a vertex , so that during the fairing process it will not only minimize its own Laplacian , but also the Laplacian of its neighboring vertices . Formally, the new position of a vertex is computed using <ref type="bibr" target="#b9">(10)</ref> for vertices in the one-features and (11) for the remaining vertices. <ref type="formula">10)   (11</ref>where and are the indices of the vertices to the left and right of in the one-feature respectively, and represents a weight associated with the Laplacian of the vertex . Note that the weights control the importance of the curvature of an individual vertex with respect to the fairing process. In the next subsection we will present a strategy to choose these weights.</p><p>Equation <ref type="bibr" target="#b9">(10)</ref> and <ref type="bibr" target="#b10">(11)</ref> increase the support of the vertex . For instance, if the original operator had a support over the one-neighborhood of , then (11) extends its support over the two-neighborhood of . This is a fundamental property, since it allows us to achieve cross-l-seam smoothness without having to move the vertices on the l-seams.</p><p>In the following we will show how to derive equation <ref type="bibr" target="#b10">(11)</ref>. A similar approach can be used to derive equation <ref type="bibr" target="#b9">(10)</ref>. The new vertex position is computed by solving an system of equations using a least squares method. We start with the following system of equations <ref type="bibr" target="#b11">(12)</ref> which depicts the ideal solution where all the Laplacians are zero. Next, we need a formulation of the Laplacian for a vertex .</p><p>This definition is general enough to represent most of the operators described in section 2.1. If more advanced operators should be devised in the future, it might be necessary to extend the definition.</p><p>We can construct a linear system of equations from equation <ref type="bibr" target="#b11">(12)</ref> using equation <ref type="bibr" target="#b12">(13)</ref>, which yields: <ref type="bibr" target="#b13">(14)</ref> Note that if we plug equation <ref type="bibr" target="#b12">(13)</ref> in <ref type="bibr" target="#b13">(14)</ref> would disappear from the right hand side. Finally, we can compute the new position of the vertex that best solves <ref type="bibr" target="#b13">(14)</ref> with respect to the twonorm. This can be achieved using a least squares approach that yields the normal equation <ref type="formula">15</ref>: <ref type="bibr" target="#b14">(15)</ref> It should be noted that we do not make any assumption about the Laplacians . We simply use these values as approximations of the curvature at every vertex . Equation <ref type="formula">15</ref>essentially states the fundamental relationship used to compute the new position of the vertex analytically from the old position . This confirms our claim that we can use any of the manifold smoothers presented in section 2.1. <ref type="figure" target="#fig_2">Figure 4</ref> visualizes the ideas behind the functional described in this section: figure 4-a shows the Laplacian computed at every vertex using a manifold smoother, and figure 4-b shows the new displacements computed using <ref type="bibr" target="#b14">(15)</ref>. Finally, figure 4-d illustrates the surface generated by our fairing operator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Computation of Weights</head><p>In equation <ref type="bibr" target="#b14">(15)</ref> a set of weights has been used that control the importance of the different Laplacians. In our framework we developed a simple strategy to select those weights allowing us to achieve reasonable cross-l-seam smoothness.</p><p>Our approach is simple: we want to assign larger weight values to vertices that are closer to an l-seam or a zero-feature, and smaller weights to vertices that are farther away. We accomplished this in two steps.</p><p>In the first step we compute the distance for each vertex to the closest l-seam or zero-vertex. In our framework we used a topological measure, where the distance between two vertices and equals the minimum number of edges traversed to get from to . Next, the weight for each vertex is computed as the ratio between the distance and the maximum distance of any mesh vertex to the closest l-seam or zero-vertex whose path goes through : </p><formula xml:id="formula_10">x i ' i x i ' i ∆ x i ∆ x j x j x i x i ∆ x i ∆ x j x j x i ' i x i ' min ω i i , ∆ x i ⋅ ( ) 2 ω i l , ∆ x l ⋅ ( ) 2 ω i r , ∆ x r ⋅ ( ) 2 + + ( ) arg = x i ' min ω i j , ∆ x j ⋅ ( ) 2 j N 1 i ( ) ∈ ∑ ω i i , ∆ x i ⋅ ( ) 2 +     arg = l r x i ω i j , ∆ x j x j x i x i x i x i ' n 1 + ( ) 1 × ω i i , ∆ x i 0 = ω i j 1 , ∆ x j 1 0 = … ω i j n , ∆ x j n 0 = ∆ x k x k ∆ x k c k j , x j j N 1 k ( ) ∈ ∑ x k - =</formula><formula xml:id="formula_11">ω i i , ω -i j 1 , c j 1 i , … ω -i j n , c j n i , x i ⋅ ω i i , ∆ x i x i + ( ) ω i j 1 , ∆ x j 1 c j 1 i , x i - ( ) … ω i j n , ∆ x j n c j n i , x i - ( ) = x i x i ' i x i ' x i ω i i , 2 ∆ x i ω i j k , 2 c j k i , ∆ x j k k 1 = n ∑ - ω i i , 2 ω i j k , 2 c j k i , 2 k 1 = n ∑ + ---------------------------------------------------------------------------- + = ∆ x k k x k ' k x k a) b) c) d) ω i j , d i x i x i x j x i x j ω i x i d i d max x i (16)</formula><p>where is a user specified maximum weight. <ref type="figure" target="#fig_2">Figure 4</ref>-c shows a colormap of the weights associated with the vertices in the model: blue corresponds to small values, yellow to high values. We have chosen a linear function to model the weights, since it was sufficient for our needs. However, note that any function can be used in its place.</p><p>During the smoothing step of a vertex the weights for a vertex are chosen as follows:</p><p>where is the number of neighbors of that satisfy . As a consequence, the new position of the vertex is chosen to minimize its curvature plus the curvature of the vertices that are closer to an l-seam or to a zero-feature.</p><p>If the model does not contain any l-seam, our operator would reduce to the standard two-manifold operator, since the weights would be defined as:</p><formula xml:id="formula_13">(18)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Boundary Conditions</head><p>Real-world models usually have boundaries, i.e. they are created by computing the intersections of a set of two-manifolds with boundaries. The boundaries in our models are handled in the same way we handle any one-feature: they are smoothed using a onedimensional fairing operator, and the zero-features are interpolated. This approach guarantees smooth boundaries, and since the boundaries are handled as one-features, we explicitly avoid having to define special operators for the case where the neighborhood of a vertex is homeomorphic to . For the time being we are not applying additional constraints on the boundaries, but boundary constraints could be easily included into the model. This could be done for example by specifying the derivative or the curvature at the boundary vertices. Using this information we would treat the boundaries as l-seams, and we would be able to construct approximations of the 2D Laplacians for the boundary vertices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Multiresolution Representation</head><p>In <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b5">[6]</ref> the fairing operators were used in a multiresolution setting to construct three important applications:</p><p>• A multi-level smoother. This is a very important application since, as noted in <ref type="bibr" target="#b15">[16]</ref> and <ref type="bibr" target="#b8">[9]</ref>, explicit solvers based on a Gauss-Seidel iteration scheme only smooth high frequencies efficiently. This effect is caused by the fact that the filtering process attenuates the eigenvectors with largest corresponding eigenvalues referring to the high mesh frequencies. The application of a fairing operator on coarse approximations of the mesh allows us to smooth lower frequencies efficiently. • A multiresolution representation for meshes, which can be constructed using a prolongation operator and a set of local frames, as demonstrated in <ref type="bibr" target="#b5">[6]</ref>. The operator , which can be considered as a non-uniform subdivision operator, is used to approximate the position of a vertex that is being re-introduced in the mesh. The distance between the exact position and is then stored in a local frame.</p><p>• A multiresolution editing tool for meshes with arbitrary connectivity can be built from a fairing operator in conjunction with a set of local frames. In the following, we introduce the tools required to construct these three applications in our setting, namely an edge collapse operator, a prolongation operator and a set of local frames.</p><p>We constructed a multiresolution representation based on the progressive mesh algorithm presented in <ref type="bibr" target="#b6">[7]</ref> and <ref type="bibr" target="#b7">[8]</ref>. We extended the edge collapse strategy to meet the underlying boundary representation of our models: vertices that do not lie in a one-feature can be removed using the standard edge collapse operator. Vertices in a one-feature must be removed with special care. A vertex in a one-feature can only be collapsed with its left or right neighbor in the one-feature. After the collapse, the topology of all the two-features sharing the one-feature must be updated. A collapse of a vertex in a one-feature is illustrated in <ref type="figure" target="#fig_3">figure 5</ref>.</p><p>In order to construct simplified approximations of our models of good quality, we explicitly check if an edge collapse operation introduces degeneracies in the mesh, such as triangles with a very small area or folded triangles. A rigorous analysis of the problem can be found in <ref type="bibr" target="#b2">[3]</ref>. It should be noted that the problem of bubbling can occur, where the removal of a vertex from a model could introduce new self-intersections in the model. The solution of this problem is outside the scope of our paper.</p><p>As a prolongation operator we can use directly the results from section 3.2 expressed by <ref type="bibr" target="#b14">(15)</ref>:</p><p>inserts a vertex into the model at the position that minimizes both the Laplacian of and of the vertices in its neighborhood. We implemented the local frames proposed in <ref type="bibr" target="#b8">[9]</ref> for our models. It should be noted that we must handle special configurations, such as vertices that lie on an l-limit or an l-seam.</p><p>We show in figure 6 how a geological model is smoothed using a multilevel approach, implemented as a full V-cycle, which can be described as <ref type="bibr">(19)</ref> The input mesh (figure 6-a and b) is first smoothed using (15), denoted by</p><p>. Next, the model is simplified using our extension of the progressive mesh scheme, denoted by the operator . These two operations are repeated times, until the model is coarse enough (figure 6-c). The coarse model is then refined using the prolongation operator , which will re-introduce vertices into the model. Since we use (15) as our operator, the resulting refinement will be smooth. After that, the model is smoothed once again using <ref type="bibr" target="#b14">(15)</ref>. These two operations must also be repeated times, in order to reconstruct a model that has the same connectivity as the input model.</p><p>Since the surfaces in the example of figure 6 are height fields, we constructed a robust global parametrization for all the two-features in the model, which allowed us to map textures to the model and avoid tearing problems caused by the drifting of vertices encountered in the fairing process. Vertex being removed </p><formula xml:id="formula_14">ω i W W - d i 1 - d max 1 - -------------------- ⋅ = W x i x k ω i k , ω i m ⁄ if k N 1 i ( ) and ω k ω i &gt; ( ) ∈ 0 i fk N 1 i ( ) and ω k ω i ≤ ( ) ∈ 1 ω i - ( ) if k i =      = m j x i ω j ω i &gt; x i ω i k , 0 if k i ≠ 1 if k i =    = x i ℜ + 2 P P x i ' i x i x i '</formula><formula xml:id="formula_15">P P i x i ' i x j x' I λK - ( ) P ⋅ ( ) n Q I λK - ( ) ⋅ ( ) n x ⋅ ⋅ = x I λK - ( ) Q n P n</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Improvements and Extensions</head><p>In this section we present two important extensions to improve the quality of the fairing procedure. It should be noted that these approaches can be applied to standard manifold smoothers as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Volume Preservation</head><p>In the literature, two volume preservation strategies have been discussed: I. <ref type="bibr" target="#b15">[16]</ref> applied an un-shrinking step after each fairing step. An unshrinking step consists in applying equation <ref type="formula">3</ref>using a constant instead of . As Desbrun noted in <ref type="bibr" target="#b1">[2]</ref> this strategy will not preserve the volume exactly leading to severe problems in certain types of modeling applications. II. <ref type="bibr" target="#b1">[2]</ref> proposed a new strategy to preserve the global volume of a mesh by computing its volume, and rescaling it after every fairing step to guarantee exact global volume preservation. The problem of this approach is that the local distribution of the volume in the model is not considered in the fairing process.</p><p>In our framework we implemented a local volume preservation strategy derived from a simple observation: when a vertex is smoothed the change of the volume can be computed locally. This is accomplished by computing the volumes of the tetrahedra defined by the triangles in the one-neighborhood of and the new position of . We can compensate for by moving the vertices in the one-neighborhood of into the "opposite" direction that we moved , as shown in figure 7.</p><p>We do not allow the vertices in the one-neighborhood of to move in an arbitrary direction to preserve the volume of the model. Instead we fix one vector, along which all the vertices are moved during the fairing of . In our implementation we </p><formula xml:id="formula_16">µ λ - &lt; λ a) b) c) d) x i x i ' x i x i ' x i x j ' x j x i ∆V x i x i ' i ∆V x i x i x i j N i i ( ) ∈ x i</formula><p>chose this vector to be the Laplacian of the vertex . This choice is motivated by being able to construct a simple formulation of the volume preservation strategy using a linear system of equations. Hence, the change of the volume can be formulated as</p><formula xml:id="formula_17">(20)</formula><p>where the operator represents the determinant of the matrices used to evaluate the volume of the associated tetrahedra. We observed reasonable numerical stability, however, it is possible to use alternative approaches, such as <ref type="bibr" target="#b4">[5]</ref>.</p><p>We then enforce each of the vertices in the one-neighborhood of to compensate for a part of , where</p><p>Since all the vertices in the one-neighborhood of are moved along the same vector , we must solve  <ref type="figure" target="#fig_7">Figure 8</ref> presents the result of the volume preserving fairing operation as applied to a simple model. Since our operations are local, the overall shape of the model is not changed. For instance, if the input model is a V-shaped manifold, our algorithm will smooth it while preserving its volume and </p><formula xml:id="formula_19">∆ x i x i ∆V ∆V x i x i ' x j x j 1 + 1 1 1 1 T j N 1 i ( ) ∈ ∑ = • 4 4 × x j x i 0 c ≤ j 1 ≤ ∆V c j j N 1 i ( ) ∈ ∑ 1 = x i ∆ x i x j x j t ∆ x i ⋅ + ( )x k x k 1 + 1 1 1 1 T k N 1 j ( ) ∈ ∑ c j ∆V ⋅ = t x j ' j x j ' x j t ∆ x i ⋅ + = j x j x j 1 - x j 1 + a) b)</formula><p>its shape, whereas a global volume preservation strategy would return a flat plane in the limit. As opposed to <ref type="bibr" target="#b4">[5]</ref>, we use our local volume preservation strategy in a diffusion process, and therefore we are faced with possible convergence problems. We attacked this problem by minimizing the drifting of the vertices in the model and by choosing in <ref type="bibr" target="#b2">(3)</ref> sufficiently small. This leads to a slower convergence, however, we observed stable results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Point-and Curve Constraints</head><p>One of the prominent applications of mesh fairing is the removal of noise from meshes that are acquired from real world data, such as meshes constructed from laser-scanners or from seismic data. The noise is usually introduced by imperfect acquisition systems, and it has to be removed in order to reconstruct the original shape.</p><p>The conventional fairing operators that have been constructed so far do not distinguish between noise and features, however. That is, during the fairing process special features of meshes might be removed. When constructing a simple feature preserving fairing operator, we exploited the properties of our B-rep data structure.</p><p>We allow the user to preserve two types of features in a model: sets of zero-features and sets of one-features. The zero-vertices can be interpreted as the set of vertices that contains the structural information of the model. To prevent these vertices from moving during the fairing process we set these vertices as zero vertices. The use of l-limits in the interior of a two-feature allows us to smooth curves without requiring cross-curve smoothness.</p><p>In <ref type="figure" target="#fig_8">figure 9</ref> we depict the result of applying this simple strategy to a model. In this example we set six vertices on the top of the Vshaped manifold as zero-features. We observe that the algorithm smoothed the model while preserving its overall shape and the six interpolatory constraints.</p><p>Taubin presented in <ref type="bibr" target="#b15">[16]</ref> a similar approach to compute a smooth interpolation of vertices. The drawback of his approach, however, is that in order to achieve smooth surfaces using interpolatory constraints, it is first necessary to compute a set of smooth surfaces. In a second step, a linear system of equations must be solved having the same size as the number of vertices to be smoothly interpolated. Furthermore, if the fairing operator requires geometric information, this problem must be solved for each iteration. In our approach, the B-rep data structure gives us feature preservation at no additional cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion and Future Work</head><p>In this paper we presented a framework for fairing non-manifold models. We used a multi-level approach to remove both high-and lower frequencies from models by smoothing models at different levels of resolution. We also introduced important extensions of our framework that allow us to guarantee local volume and feature preservation.</p><p>We consider the described framework as a core technology enabling us to construct a multi-resolution representation of nonmanifold models. Future work comprises improved multiresolution representations of non-manifold models, adaptive visualization algorithms and multi-resolution editing tools. Furthermore, we plan to develop robust texture parametrization methods that are independent of the fairing operator and the topological type of the two-features. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>The problem of non-manifold fairing: a) Initial model. b) + c) Results obtained using simple adaptations of manifold smoothers. d) Smooth model computed with our framework.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>The blue one-feature is an l-limit in the green two-feature and an l-seam in the yellow two-feature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Illustration of the fairing functional (see also CP2): a) Magnitude and direction of the Laplacian. b) Displacement of the vertices computed using (15). c) Color coding of the weights, from small (blue) to high (yellow) values. d) Smoothed surface that interpolates the l-seams (in blue).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Collapse of a vertex in a one-feature in our boundary representation: a) Before edge collapse. b) After edge collapse.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Multilevel fairing of a geological model (see also CP3): a) Original model. b) Wireframe of the original model. c) Wireframe of the simplified model. d) Smoothed model in full resolution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Local volume preservation: a) Model before fairing. b) The vertex x i is smoothed. c) The neighbors vertices x j of x i compensate for the change in the volume. d) Final model after fairing and volume preservation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>t. If we expand equation (22) we can construct a linear equation with respect to the unknown . The solution of this linear equation allows us to compute the new position of as (23) Equations (22) and (23) compute the new position of the vertex correctly, since the volume changed by the movement of is independent of the position of the vertices and .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Volume preservation: a) Input model. b) Faired model using the local volume preservation strategy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Feature preservation of a model: a) Input model with no l-seams and ten zero-vertices. b) Smoothed model that interpolates the zero-vertices.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Note that we extended the conventional definitions of seams and limits from CAD.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Integrating VR and CAD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Berta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="14" to="19" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Implicit fairing of irregular meshes using diffusion and curvature flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH &apos;99 Proceedings, Annual Conference Series</title>
		<imprint>
			<publisher>ACM SIGGRAPH, ACM Press</publisher>
			<date type="published" when="1999-08" />
			<biblScope unit="page" from="317" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Topology preserving edge contraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nekhayev</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Raindrop Geomagic Inc</publisher>
			<pubPlace>Research Triangle Park, North Carolina</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Conference Proceedings, Annual Conference Series</title>
		<editor>T. Whitted</editor>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Locally toleranced surface simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guéziec</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<pubPlace>Yorktown Heights, N.Y.</pubPlace>
		</imprint>
		<respStmt>
			<orgName>IBM Watson Research Center</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Multiresolution signal processing for meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Guskov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Sweldens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;99 Proceedings</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1999-08" />
		</imprint>
	</monogr>
	<note>Computer Graphics Proceedings</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GRAPH 96 Conference Proceedings, Annual Conference Series</title>
		<editor>H. Rushmeier</editor>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1996-08" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient implementation of progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<idno>0097-8493</idno>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="27" to="36" />
			<date type="published" when="1998-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Interactive multi-resolution modeling on arbitrary meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Campagna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vorsatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 98 Conference proceedings, Annual Conference Series</title>
		<editor>M. F. Cohen, editor</editor>
		<imprint>
			<publisher>ACM Press and Addison Wesley</publisher>
			<date type="published" when="1998-07" />
			<biblScope unit="page" from="105" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Adaptive visualization for interactive geometric modeling in geoscience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">Q</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hammersley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 8th International Conference in Central Europe on Computer Graphics, Visualization and Interactive Digital Media</title>
		<imprint>
			<date type="published" when="2000-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">A Basic Course in Algebraic Topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Massey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>Springer Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Progressive simplicial complexes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Popovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Conference Proceedings, Annual Conference Series</title>
		<editor>T. Whitted</editor>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A dimension-independent model for pointsets with internal structures and incomplete boundaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>O'connor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Geometric Modeling for Product</title>
		<editor>Engineering. M.J. Wozny, J.U. Turner and K. Preiss Eds., North Holland</editor>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Decimation of triangle meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zarge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 92 Conference Proceedings, Annual Conference Series</title>
		<imprint>
			<date type="published" when="1992-07" />
			<biblScope unit="page" from="65" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Introduction to Numerical Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stoer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bulirsch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Springer Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A signal processing approach to fair surface design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 95 Conference Proceedings, Annual Conference Series</title>
		<editor>R. Cook</editor>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="351" to="358" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Interactive multiresolution mesh editing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zorin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Sweldens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Conference Proceedings, Annual Conference Series</title>
		<editor>T. Whitted</editor>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="259" to="268" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
