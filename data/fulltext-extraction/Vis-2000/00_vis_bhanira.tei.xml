<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Isosurfacing In Higher Dimensions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Praveen</forename><surname>Bhaniramka</surname></persName>
							<email>praveenb@engr.sgi.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Silicon Graphics, Inc</orgName>
								<address>
									<settlement>Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rephael</forename><surname>Wenger</surname></persName>
							<email>wenger@cis.ohio-state.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer &amp; Information Science</orgName>
								<orgName type="institution">The Ohio State University</orgName>
								<address>
									<settlement>Columbus</settlement>
									<region>OH</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
							<email>crawfis@cis.ohio-state.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer &amp; Information Science</orgName>
								<orgName type="institution">The Ohio State University</orgName>
								<address>
									<settlement>Columbus</settlement>
									<region>OH</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Isosurfacing In Higher Dimensions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Visualization algorithms have seen substantial improvements in the past several years. However, very few algorithms have been developed for directly studying data in dimensions higher than three. Most algorithms require a sampling in three-dimensions before applying any visualization algorithms. This sampling typically ignores vital features that may be present when examined in oblique cross-sections, and places an undo burden on system resources when animation through additional dimensions is desired. For time-varying data of large data sets, smooth animation is desired at interactive rates. This paper provides a fast Marching Cubes like algorithm for hypercubes of any dimension. To support this, we have developed a new algorithm to automatically generate the isosurface and triangulation tables for any dimension. This allows the efficient calculation of 4D isosurfaces, which can be interactively sliced to provide smooth animation or slicing through oblique hyperplanes. The former allows for smooth animation in a very compressed format. The latter provide better tools to study time-evolving features as they move downstream. We also provide examples in using this technique to show interval volumes or the sensitivity of a particular isovalue threshold.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Given a continuous scalar field, i.e., a scalar function on R d , an isosurface is the set of points with identical scalar values. The Marching Cubes algorithm by Lorensen and Cline is a popular, simple, and efficient algorithm for constructing a piecewise linear isosurface from scalar values in a three-dimensional regular grid <ref type="bibr" target="#b10">[11]</ref>. The regular grid divides the volume into cubes whose vertices are the grid vertices and the isosurface is constructed piecewise within each cube. Each grid vertex is labeled positive, '+', or negative, '-', depending upon whether its value is greater than or less than the value of the isosurface. The structure of the By exploiting symmetry, Lorensen and Cline reduced the 2 <ref type="bibr" target="#b7">8</ref> cases to fourteen. They analyzed these fourteen cases by hand, constructing a triangulated surface for each case. Montani, Scateni and Scopigno added more cases to resolve certain ambiguities and inconsistencies in Lorensen and Cline' s original algorithm <ref type="bibr" target="#b12">[13]</ref>. This algorithm is commonly known as the Modified Marching Cubes algorithm.</p><p>A hypercube in four dimensions has sixteen vertices and 2 <ref type="bibr" target="#b15">16</ref> possible vertex labelings. Even after exploiting symmetry, we found that we were left with 222 cases. Analyzing all these cases by hand, would have been a tedious and error prone exercise. Higher dimensions are even more problematic. Therefore, we first looked for a systematic way of generating the surface and its triangulation for each case.</p><p>Weigle and Banks generalized a variation of the marching cubes algorithm by replacing the cubes with simplices <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>. Using barycentric subdivision, they broke each cube into simplices and then constructed the isosurface in each simplex. They triangulated the isosurface by recursively triangulating the various dimensional faces of the polyhedra composing the isosurface. Because of the simple structure and symmetry of a d-simplex, there are only d + 2 cases, each case corresponding to a different number of vertices with positive orientation. However, a d-cube breaks into between d! and 2 d-1 d! simplices, depending upon the decomposition used <ref type="bibr" target="#b18">[19]</ref>. The time and space used by their algorithm also increases by a corresponding factor making it impractical for real problems.</p><p>Many techniques have been proposed for visualization of higher dimensions, but most of the work has dealt with the aspect of rendering higher dimensional data. Hanson et.al. in <ref type="bibr" target="#b6">[7]</ref>[8][9] <ref type="bibr" target="#b9">[10]</ref> use 4D lighting, shading, projections, rotations and plane-tracing (a generalization of ray tracing to 4D) among others, as techniques for visualizing higher dimensional data. Bajaj et.al. in <ref type="bibr" target="#b1">[2]</ref> generalize splatting to higher dimensions. We will apply some of these techniques to our resulting higher dimensional surface and refer the reader to the references for visualization techniques in higher dimensions.</p><p>Specifically, we make the following contributions in this paper -1. We present a new algorithm for automatically generating a lookup table of the isosurface and its triangulation for all the possible 2 2 d labelings of the hypercube in a d-dimensional regular grid. To the best of our knowledge this has not been done before.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">We outline the proof of correctness of our algorithm and also</head><p>show that it generates a valid isosurface which is a a triangulated (d−1)-manifold with boundary in R d .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>We apply our algorithm and discuss its advantages to the following applications • Compact representation and smooth animation of timevarying isosurfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Interval volumes and contour sensitivity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>•</head><p>Arbitrary slicing of higher dimensional data.</p><p>In section 2, we describe the algorithm in detail giving 2 and 3 dimensional examples and in section 3, we prove the correctness of the algorithm.</p><p>In section 4, we analyze the results obtained for the 3-dimensional case. Then in section 5, we discuss the different applications and show how our approach is superior to those currently used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">ISOSURFACING ALGORITHM IN R D</head><p>The isosurfacing algorithm can be divided into two primary steps. First, we generate the lookup table for a given dimension d. We do this for all possible 2 2 d cases and store the resulting table for step 2. Secondly, we generate the isosurface using the lookup table on each of the d-cubes intersected by the isosurface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Lookup Table Generation</head><p>An edge of the hypercube intersects the isosurface if one endpoint has a positive label and one endpoint has a negative label (by the intermediate value theorem). For a given configuration of the vertices of the hypercube h, we find the midpoint of each such edge. Let W + (h) be the set of all such midpoints together with all hypercube vertices with a positive label. (Alternatively, we could use W -(h) which is the set of all such midpoints together with all hypercube vertices with negative labels.) The convex hull of W + (h) is a d-polytope lying in the hypercube and approximating the set of points in the d-cube with positive isovalues. In order to extract the desired isosurface, we remove any (d-1)-dimensional facets of this polyhedron which lie on the boundary of the hypercube. This causes the removal of any facets, which share a vertex with the hypercube. The remaining (d-1) facets comprise the isosurface in the hypercube and are written into the lookup table. To generate the complete table, we repeat the above for each of the 2 2 d possible cases. <ref type="figure">Figure 1a</ref> illustrates the algorithm in 2 dimensions. The black vertices of the square (2-cube) correspond to positive labels while the white vertices correspond to the negative labels. The cross signs represent mid points of the edges with zero crossings. We start with the set W + (h), which is the union of the black vertices along with the crosses, i.e. the set of edge-isosurface intersection points, along with the positive labeled vertices. The black edges show the facets (1-simplices) of the convex hull of W + (h). Finally, removing facets on the boundary of the 2-cube gives the final triangulation of the isosurface. <ref type="figure">Figure 1b</ref> shows the steps for a 3 dimensional example. The resulting d-polytope, which is the convex hull of W + (h), is not necessarily simplicial. In fact, in many instances it will contain (d-1)-facets which are not simplices, e.g. for the 3-dimensional case, there might exist 2D polygons with more than 3 vertices. These facets can be triangulated in more than one way. This is not a problem in 3D since any triangulation of the reconstructed isosurface in one cube is compatible with any triangulation of the reconstructed isosurface in another. However, in 4D the reconstructed isosurfaces in two adjacent hypercubes meet in a two dimensional polygon, for instance a planar quadrilateral. If the triangulations in these two hypercubes contain different diagonals of this quadrilateral, then the resulting triangulations will not match. This mismatch manifests itself as visible artifacts when the 4D isosurface is sliced along a given axis. Also, a mismatch makes it impossible to construct any face adjacency graphs, which might be needed for many algorithms. This is essentially the problem identified by Albertelli et. al. in <ref type="bibr" target="#b0">[1]</ref> while constructing 3D tetrahedral grids by subdividing unstructured finite-element meshes.</p><p>To ensure consistent isosurface triangulations, we use an implementation by Clarkson <ref type="bibr" target="#b3">[4]</ref> of an incremental convex hull algorithm. The algorithm is similar to the one described in <ref type="bibr" target="#b2">[3]</ref> but without randomization. Clarkson's program adds one vertex at a time, updating the convex hull as necessary. It produces a complete triangulation of the convex hull whose structure depends upon the input order of the vertices. By lexicographically sorting the initial vertex set W + (h), as described in <ref type="bibr" target="#b13">[14]</ref>, we can fix this order and produce a 'canonical' triangulation. We claim that the 'canonical' triangulations of the reconstructed isosurfaces in two adjacent hypercubes properly match at their boundaries. For the 4dimensional case, we also verified our results by computing all the 2 24 possible triangulations of the isosurface for two adjacent 4cubes and found that the triangulations on the boundary match. The convex hull algorithm used by Clarkson is not optimal but it seems the most practical solution to our problem of generating consistent triangulations.</p><p>Instead of using W + (h) containing the vertices with positive labels, we could have used the set W -(h) which contains the vertices with negative labels. Doing so gives a different, although equally valid, isosurface. However, using positive labels for some cases and negative labels for others can result in mismatches on the boundaries of the hypercubes. This was essentially the problem discovered by Durst in the original marching cubes algorithm <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Alternative Construction</head><p>An alternative method for constructing the isosurface would be to compute the convex hull of just the midpoints of the edges with zero crossings. If this convex hull is d-dimensional, then the boundary of this convex hull is a (d-1)-dimensional surface.</p><p>Removing all the points lying on the boundary of the hypercube breaks this surface into two or more components. One set of components corresponds to the positive isosurface and the other set corresponds to the complementary 'negative' configuration. For instance in figure 2, removing the points on the boundary of the cube (coplanar facets), gives four components. Two of these components correspond to the desired positive isosurface and the remaining two to the isosurface for the complementary negative configuration. Finding the components corresponding to the desired positive isosurface would be more difficult compared to our approach. If the convex hull of the midpoints is (d-1)dimensional, then this (d-1)-dimensional surface is the isosurface for both the positive and negative cases.</p><p>In our algorithm, by adding the positive vertices, we 'cover' the simplices in the negative components. This allows us to easily extract the desired 'positive' isosurface by removing the simplices lying on the boundary of the hypercube. If we had added the negative vertices to the set of midpoints, we would have obtained the isosurface corresponding to the complementary configuration. Note also that the convex hull of the midpoints and the positive vertices is always d-dimensional, while the convex hull of just the midpoints may not be. This slightly simplifies the convex hull construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Convex Hull Coplanar facets</head><p>Complementary Isosurface Desired Isosurface <ref type="figure">Figure 2</ref>. Alternative isosurface construction using only the mid points of edges with zero crossings</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Isosurface Construction</head><p>This step is primarily an extension of the original Marching Cubes algorithm to higher dimensions, where the isosurface is constructed piecewise within each cell in the grid. For each logical d-cube, with 2 d voxels as its vertices, we use the lookup table generated in step 1 to construct the isosurface within the cube. The index for the d-cube depends on the labelings of the vertices of the d-cube and is given by,</p><formula xml:id="formula_0">2 d -1 Σ 2 i * color(i) i = 0</formula><p>where, color(i) is one, if vertex i has a '+' label, and zero, if it has a '-' label. A value of either zero or </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">ALGORITHM CORRECTNESS</head><p>Unless the underlying scalar function is known, it is not possible to reconstruct the exact isosurface from a discrete sampling of the function. A simple requirement is that the isosurface intersect the grid edges with one positive and one negative endpoint and only those grid edges. However, even in 3D there are many topologically distinct isosurfaces satisfying this restriction. We claim that our algorithm constructs a (d−1)-dimensional surface in R d that satisfies this requirement. More specifically, it constructs a triangulated (d−1)-manifold with boundary in R d . Note that a valid isosurface need not be a manifold but in many applications it is desirable that the surface be a manifold. A set T of simplices defines a simplicial complex if the non-empty intersection of any two or more simplices of T is a face of each of these simplices. For instance, the non-empty intersection of any two tetrahedra is either a (triangular) face, or an edge or a vertex of the two tetrahedra and the non-empty intersection of any three tetrahedra is an edge or a vertex of all three.</p><p>Let T be the set of simplices returned by our algorithm. The set of points contained in all the simplices of T is called the underlying point set of T and denoted |T|.</p><p>We prove: 1. The set T of simplices defines a simplicial complex; 2. |T| is a (d−1)-dimensional manifold with boundary.</p><p>In this paper, we only have room for the main ideas behind the proof. The complete proof will appear in another article elsewhere.</p><p>Let h be a d-dimensional hypercube whose vertices are labeled positive or negative. As defined before, let W + (h) be the set of positive vertices of h and the midpoints of edges of h with one positive and one negative endpoint. Form S + (h) by taking the boundary of the convex hull of W + (h), removing any points on the boundary of h, and taking the closure of the remaining set. Formally, S + (h) equals cl(∂conv(W + (h)) -∂h), where cl, ∂ and conv are the closure, boundary and convex operators, respectively.</p><p>For instance, in <ref type="figure">Figure 1a</ref>, set S + (h) contains the two open line segments in the interior of h connecting the midpoints marked 0. It also contains the endpoints of these line segments, which lie on the boundary of h. These endpoints are in the closure of the open line segments. Similarly, in <ref type="figure">Figure 1b</ref>, set S + (h) contains the two open rectangles in the interior of h, but it also contains the rectangular boundary of these rectangles which lies on the boundary of h. Again, this rectangular boundary is the closure of these rectangles.</p><p>Let G be a regular grid whose vertices are labeled positive or negative. Our algorithm returns S + (h) for every hypercube h in G. Actually, it returns a set of (d−1)-dimensional simplices whose underlying point set is S + (h).</p><p>The interior of S + (h) is identical with the boundary of a ddimensional convex set and so clearly forms a surface. It is much less clear that the surfaces defined by S + (h 1 ) and S + (h 2 ) for two adjacent grid hypercubes h 1 and h 2 fit together properly at their boundaries. The key point to note is that, for any k-face f of a hypercube h, the intersection of S + (h) and f is completely determined by the labels of the vertices of f.</p><p>Lemma: Let G be a regular grid whose vertices are labeled positive or negative. If h 1 and h 2 are two adjacent grid hypercubes in R d and f = h 1 ∩ h 2 , then S + (h 1 ) ∩ f = S + (h 2 ) ∩ f.</p><p>Let (p 1 ,…,p n ) be a sequence of points in convex position in R d . We call a triangulation T' of conv(p 1 ,…,p n ) canonical if T'−p n , the simplicial complex T' with all the simplices incident on p n removed, is a canonical triangulation of conv(p 1 ,…,p n−1 ). A single simplex is a canonical triangulation. Intuitively, a canonical triangulation is built by adding points and their incident simplices in sequential order. This is exactly what Clarkson's convex hull program <ref type="bibr" target="#b3">[4]</ref> does. Thus the simplices reported by that program form a cannonical triangulation of the facets of the convex hull. The points are sorted in lexicographic order. We claim and prove that the cannonical triangulations of S + (h 1 ) and S + (h 2 ) are identical on their intersection. Thus the simplices in T fit together to define a simplicial complex.</p><p>Since T defines a simplicial complex, we need only check neighborhoods of the vertices of T to prove that |T| is a manifold with boundary. We construct an explicit mapping from the neighborhood of each vertex to R d-1 or a closed half-space in R d- <ref type="bibr" target="#b0">1</ref> . Thus |T| is a (d−1)-dimensional manifold with boundary. Our construction of W + (h) and S + (h) ensures that this manifold intersects the grid edges with one positive and one negative endpoint and only those grid edges.</p><p>Our proof only holds when the isosurface vertices are located at the midpoints of edges. In Section 2.3 we propose computing the locations of isosurface vertices by linearly interpolating between the field values at the endpoints of intersected edges. It may be possible that replacing the midpoints by interpolants causes the isosurface to intersect itself. This cannot happen in three dimensions, but we do not know if it can happen in higher dimensions. The simplices will still fit together properly to form an abstract simplicial complex and a manifold with boundary, but the embedding of that manifold given by the values of the interpolated points may intersect itself within a given hypercube.</p><p>Instead of using a lookup table, we could construct conv(W + (h)) and S + (h) for each hypercube separately. We could then replace the midpoints in each W + (h) by the linear interpolants and form the convex hull of these interpolants. The proof of correctness outlined above holds for this modified algorithm. The only difference is that the set W + (h) has changed.</p><p>A more practical approach might be a hybrid scheme in which we sometimes use table lookup and sometimes construct S + (h) from interpolated values. However, it is not clear how such a scheme would guarantee that surfaces and triangulations from adjacent hypercubes would fit together properly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">COMPARISON TO THE MODIFIED MARCHING CUBES</head><p>Our algorithm generates topologically the same lookup table as proposed in the Modified Marching Cubes algorithm <ref type="bibr" target="#b12">[13]</ref>, except for one case where we get a different, but an equally valid, isosurface (figure 3). When two negative vertices are diagonally opposite to each other, our algorithm generates a tunnel-like surface, while the Marching Cubes algorithm gives two disconnected surfaces. One drawback of this approach is that it increases the number of triangles from two to six for this particular case. It is curious to note that this is not one of the ambiguous cases pointed out in the Nielson and Hamann's Asymptotic Decider <ref type="bibr" target="#b14">[15]</ref>. Our method has a tendency to keep the '+' vertices together, preserving pathways when possible. This property can also be seen in the first two cases in figure 4, which shows the ambiguous cases given in <ref type="bibr" target="#b12">[13]</ref> and the respective complementary cases generated by our algorithm. It can also be seen that all the cases generated by our algorithm are topologically the same as those suggested in Modified Marching Cubes.</p><p>Marching Cubes Our Algorithm <ref type="figure">Figure 3</ref>. Different triangulations generated by our algorithm as compared to Marching Cubes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 4</head><p>The left row shows the ambiguous cases shown in Modified Marching Cubes while, the right row shows the corresponding complementary cases generated by our algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">APPLICATIONS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Time Varying Isosurfaces</head><p>A number of different techniques have been introduced for fast isosurface extraction and compressed representation of timevarying fields <ref type="bibr" target="#b15">[16]</ref>[17][21] <ref type="bibr" target="#b21">[22]</ref>. Our algorithm provides another approach to compact representation of time varying isosurfaces, similar to that of Weigle and Banks <ref type="bibr" target="#b19">[20]</ref>. The drawback of their method is that they decompose each 4-cell into 192 4-simplices and then recursively contour each of the simplices. This approach results in a very large number of tetrahedra compared to our method.</p><p>We output our tetrahedral grid sorted in time, hence, we need only compute the intersection for a given interval of the time constraint. This approach makes the slicing independent of the total number of time steps and speeds up the slicing considerably.</p><p>On an SGI Octane, computing a time slice is interactive for an isosurface already generated from a 40x40x40x36 size data set. This is much faster compared to 2 minutes in <ref type="bibr" target="#b19">[20]</ref> and can be attributed to the large number of tetrahedra generated due to simplicial decomposition of each 4-cell. Constructing the isosurface in R 4 allows slicing at non-integral time steps, effectively merging the steps of interpolation and isosurface extraction into one, allowing us to generate smooth animations of the time-varying isosurface very efficiently.</p><p>For 10 time steps of the Jet Shockwave data set, an isovalue of 37 generated an isosurface with 8,021,739 tetrahedra and 1,394,104 vertices in 1109 seconds. The isosurface intersected 1,317,975 hypercubes, giving an average of around 6 tetrahedra per hypercube. The total number of triangles generated for the same 10 time steps by Marching Cubes was 1,796,350.</p><p>Time-varying isosurfaces can also be used as a compressed representation in volume morphing applications. <ref type="figure">Figure 7</ref> shows a sequence of frames generated using a time varying function. This function is radial at time 0, migrates to a toroidal function at time 1, and then to a union of two radial functions at time 2. The movie file, morph.mpv, (on the CD ROM proceedings) shows an animation of this function. Note how easily this technique can handle topology changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Interval Volumes and Contour Sensitivity</head><p>For a trivariate function f(x,y,z) sampled on a 3D rectilinear grid, the interval volume <ref type="bibr" target="#b13">[14]</ref> is defined by I f (α,β) = {(x,y,z): α ≤ f(x,y,z) ≤ β }. Fujishuro <ref type="bibr" target="#b5">[6]</ref> discuss applications of interval volumes and propose a solid fitting algorithm for tetrahedralizing the interval volume by extending Marching Cubes. Max et.al. <ref type="bibr" target="#b11">[12]</ref> and Nielson et.al. <ref type="bibr" target="#b13">[14]</ref> compute the tetrahedralization by decomposing each cube in the grid to five tetrahedra. Nielson then uses an efficient lookup table to compute the interval volume within each simplex and decompose it into tetrahedra. Since they do this for simplices rather than cubes, the number of tetrahedra generated is very large. We project the problem of interval volume tetrahedralization as a 4-dimensional problem as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interval Volume</head><p>Wireframe Slice along the w-axis Slice along the x-axis The interval volume I f is then given by the isosurface F(x,y,z,t) = 0. We use our algorithm to compute the isosurface for F = 0 and then use parallel projection to project the resulting isosurface to 3D to give the tetrahedralization of I f . In order to compare our technique to that of Nielson's, we show the results obtained for the following function sampled on a 14x14x14 grid for α = 0.35, β = 0.37 ( <ref type="figure">Figure 5</ref>).</p><formula xml:id="formula_1">f(x,y,z) = (x -0.5) 2 + (y -0.5) 2 + (z -0.5) 2</formula><p>The resulting tetrahedralization consists of 4204 tetrahedra and 1496 vertices as compared to 8500 tetrahedra and 3224 vertices in <ref type="bibr" target="#b13">[14]</ref>. Furthermore, the 3D isosurface can be animated to show the contour sensitivity by slicing the 4D isosurface. Slicing allows the user to quickly move back and forth between different isovalues to see the contour sensitivity. Sections of the isosurface, which are more sensitive to the isovalue can be seen to change more rapidly compared to other sections.</p><p>In order to visualize a larger range of isovalues (α 1 , α 2 ,α 3 , ...,α n ) this idea can be extended to tetrahedralize the volume using n steps along the t axis. Thus, the function F(x,y,z,t), is given by</p><formula xml:id="formula_2">F(x,y,z,t i ) = f(x,y,z) -α i for 1 ≤ i ≤ n</formula><p>Using 5 steps, we generated the interval volume for timestep 60 of Jet Shockwave for isovalues of 17 through 57. The resulting interval volume consisted of 2,563,331 tetrahedra and 501,110 vertices compared to over 7 million triangles generated by Marching Cubes for the same range of values. The movie file, interval.mpv, shows the slices for the interval at intermediate isovalues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Arbitrary Slicing of higher dimensions</head><p>The higher dimensional isosurfaces can be sliced along arbitrary axes or hyperplanes in R <ref type="bibr" target="#b3">4</ref> . For example, slicing along the z-axis allows one to see the various trends in the isosurface at a given z value in the grid. Animating the slice allows one to see the isosurface changing along the z-axis. This can be useful to follow a time-evolving structure, by taking a slice in the structures direction of movement.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RESULTS</head><p>In this paper, we have shown an efficient algorithm for constructing isosurfaces in d-dimensional grids and also discussed a few applications of the algorithm. The lookup table for 4dimensional contours has 2 <ref type="bibr" target="#b15">16</ref> entries with a maximum of 26 tetrahedra in a given case. The average was approximately 13 tetrahedra for the complete table. In practice, the average is much less then 13. For the Jet Shock Wave data set, the average number of tetrahedra per hypercube was approximately 6.</p><p>We also generated a five-dimensional isosurface by combining the interval volume and time varying techniques together. Rather than precompute the lookup table, we used a lazy evaluation method with our algorithm to generate the entries as needed. The interval hypervolume for the Jet Shockwave having isovalues 27 and 37 for timesteps 56 and 57, consisted of 3.3 million hypertetrahedra and 2.2 million vertices for the 256x256x256x2x2 size data set. The average number of hypertetrahedra per intersected 5-cube was approximately 24.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">FUTURE WORK</head><p>For four-dimensional isosurfaces, tetrahedral mesh compression techniques can be employed to reduce the memory and processing overhead for the rendering system, also allowing level-of-detail rendering of the time evolving isosurface. We plan to extend current tetrahedral mesh simplification techniques <ref type="bibr" target="#b17">[18]</ref> to allow compression in four dimensions.</p><p>A future direction of research would be to integrate time-varying isosurfaces with a volume morphing application. This would allow the user to interactively slice back and forth to animate the volume as well as interactively manipulate the model in three dimensions.</p><p>Further, fast isosurface extraction algorithms <ref type="bibr" target="#b15">[16]</ref>[17] <ref type="bibr" target="#b20">[21]</ref>[22] can be used to replace the linear search for the cells intersected by the isosurface to speed up the isosurface construction. A lookup table for a five dimensional isosurface, will have 2 32 entries. We are currently working on ways to generate entries on the fly and then caching the more frequently used ones.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1a .Figure 1b .</head><label>1a1b</label><figDesc>Two-dimensional example of the algorithm. Three-dimensional example of the algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 .Figure 6 .</head><label>56</label><figDesc>Interval volume for the sphere function Slices of F along different coordinate axes From f(x,y,z), construct a 4D function F(x,y,z,t) given by, f(x,y,z) -α for t = 0 F(x,y,z,t) = { f(x,y,z) -β for t = 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 6</head><label>6</label><figDesc>shows slices of the following function along different axes. The function gives a sphere along the w-axis, while along the x-axis a paraboloid is generated. F(x,y,z,w) = (x -0.5) 2 + (y -0.5) 2 + (z -0.5) 2 -cw -d where, c and d are constants.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 8</head><label>8</label><figDesc>shows slices of the Jet Shockwave isosurface along different axes. Interesting features can be seen from the slices, e.g. the y-slice shows features developing with time in the cross section of the isosurface along the x-z plane. The movie file, zSlice.mpv, shows an animation of the z-slice for increasing z values. Patterns can be seen as the time evolving 'tube' is sampled at different z-values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>2 2 d -1 for the index implies that the isosurface does not intersect this d-cube.</figDesc><table /><note>The actual surface-edge intersections are computed by linearly interpolating between the field values at the vertices of the intersected edges. Since, the algorithm computes the above for each d-cube in the grid, it is linear in the number of d-cubes. This can be improved by using techniques, which exploit spatial and temporal coherence, to locate the cells that are actually intersected by the isosurface [16][17][21][22].</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">ACKNOWLEDGEMENTS</head><p>This work was supported by NSF career grant #ACI-9876022. We would like to thank Zhi Yao, Donglin Liang and Hoseok Kang for contributing to the introductory ideas for this work. We would also like to thank Zbigniew Fiedorowicz for helpful consultations on topology. The Jet Shockwave data is part of the Advanced Visualization Technology Center's data repository and appears courtesy of the University of Chicago.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Efficient subdivision of finite-element datasets into consistent tetrahedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Albertelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;97</title>
		<meeting>Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="213" to="219" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hypervolume Visualization: A challenge in simplicity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rabbiolo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 Symposium on Volume Visualization</title>
		<meeting>the 1998 Symposium on Volume Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="95" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Four results on randomized incremental constructions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mehlhorn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Geom.: Theory and Applications</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Clarkson</surname></persName>
		</author>
		<ptr target="http://cm.bell-labs.com/who/clarksonandhttp://cm.bell-labs.com/netlib/voronoi/hull.htm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Additional reference to Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Durst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="72" to="73" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Volumetric data exploration using interval volume</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Maeda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Takeshima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions On Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="144" to="155" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Rotations for n-dimensional Graphics. Graphics Gems V</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hanson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
			<publisher>Academic Press</publisher>
			<biblScope unit="page" from="55" to="64" />
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visualizing the Fourth Dimension using Geometry and Light</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Heng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;91</title>
		<meeting>Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="321" to="328" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Interactive visualization methods for four dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Cross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;93</title>
		<meeting>Visualization &apos;93</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="196" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Four-dimensional views of 3D scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Heng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;92</title>
		<meeting>Visualization &apos;92</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="84" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Marching Cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="170" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Area and volume coherence for efficient visualization of 3D scalar functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="27" to="33" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A modified look-up table for implicit disambiguation of Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scateni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Visual Computer</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="353" to="355" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Interval Volume Tetrahedralization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;97</title>
		<meeting>Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The Asymptotic Decider: Resolving the ambiguity in Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;91</title>
		<meeting>Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="83" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Isosurface extraction in time-varying fields using a temporal hierarchical index tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;98</title>
		<meeting>Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="159" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Isosurface extraction in time-varying fields using a temporal branch-on-need tree (T-BON)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;99</title>
		<meeting>Visualization &apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="147" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Simplification of tetrahedral meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">J</forename><surname>Trotts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Wiley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;98</title>
		<meeting>Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="287" to="295" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Complex-valued contour meshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weigle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization&apos;96</title>
		<meeting>Visualization&apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="173" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Extracting isovalued features in 4-dimensional scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weigle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 Symposium on Volume Visualization</title>
		<meeting>the 1998 Symposium on Volume Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="103" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Octrees for faster isosurface generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhems</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Multi-dimensional trees for controlled volume rendering and compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhems</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1994 Symposium on Volume Visualization</title>
		<meeting>the 1994 Symposium on Volume Visualization</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
