<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Texturing Techniques for Terrain Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><surname>Döllner</surname></persName>
							<email>dollner@uni-muenster.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Baumann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Hinrichs</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department for Computer Science</orgName>
								<orgName type="institution">University of Münster</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">LOD Terrain Representation Terrain Geometry Data Multiresolution Modeling of Terrain Geometry Multiresolution Modeling of Terrain Texture</orgName>
								<orgName type="institution">University of Münster</orgName>
								<address>
									<addrLine>Einsteinstraße 62</addrLine>
									<postCode>48149</postCode>
									<settlement>Münster</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Texturing Techniques for Terrain Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation -Display algorithms; I.3.6. [Computer Graphics]: Methodology and Techniques Terrain Rendering</term>
					<term>Texture Mapping</term>
					<term>Multiresolution</term>
					<term>Level of Detail</term>
					<term>3D Maps</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a new rendering technique for processing multiple multiresolution textures of LOD terrain models and describe its application to interactive, animated terrain content design. The approach is based on a multiresolution model for terrain texture which cooperates with a multiresolution model for terrain geometry. For each texture layer, an image pyramid and a texture tree are constructed. Multiple texture layers can be associated with one terrain model and can be combined in different ways, e.g., by blending and masking. The rendering algorithm traverses simultaneously the geometry multiresolution model and the texture multiresolution model, and takes into account geometric and texture approximation errors. It uses multi-pass rendering and exploits multitexturing to achieve real-time performance. Applications include interactive texture lenses, texture animation, and topographic textures. These techniques offer an enormous potential for developing new visualization applications for presenting, exploring and manipulating spatio-temporal data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>For a long time research in terrain visualization has been concerned with developing techniques to cope with complex terrain geometries. While LOD terrain models as well as image-based modeling and rendering techniques form the basis of any kind of large-scale, real-time terrain visualization, texturing techniques for terrain visualization have not been studied as much. If textures have been considered at all, the texture management refers to one single large-scale texture such as satellite images.</p><p>Texture mapping, however, is a fundamental graphics primitive <ref type="bibr" target="#b13">[14]</ref> with various applications and implications for terrain visualization: luminance textures, alpha textures, multitexturing, and real-time texture generation offer an enormous potential for developing new terrain visualization techniques for presenting, exploring and manipulating spatio-temporal data.</p><p>Terrain texturing has to deal with the following problems: Handling of large-scale multiresolution textures and multiple texture layers; developing a rendering algorithm using multitexturing and multiple passes; and investigating applications of texture mapping to terrain visualization. We understand texture mapping as a fundamental tool for the visual design of terrain contents.</p><p>We present a multiresolution model for terrain textures as an extension of a generic multiresolution model for terrain geometry. Consequently, it is possible to integrate the texturing techniques in any kind of geometry multiresolution model, for example, gridbased models or TIN-based models.</p><p>For each texture layer, the multiresolution model preprocesses the original texture and derives an image pyramid as well as a texture tree <ref type="figure" target="#fig_0">(Figure 1</ref>). The texture tree represents texture patches at different levels of detail; each texture patch is associated with a geometry patch provided by the geometry multiresolution model. The original texture may have arbitrary size and may cover the whole terrain or only parts of it. Texture layers can be combined (in screen space) by imaging operations such as addition, blending, and masking. The rendering algorithm takes into account both geometric and texture approximation errors. User-defined thresholds for these errors control the visual quality as well as rendering performance. Both multiresolution models have to cooperate closely because the rendering algorithm traverses them simultaneously. Multi-pass rendering is required to cope with multiple textures. To improve real-time performance, the number of rendering passes can be reduced using multitexturing <ref type="bibr" target="#b28">[29]</ref>; multitexturing is now available even on low cost graphics hardware. The algorithm has been efficiently implemented on top of OpenGL.</p><p>The texturing techniques allow for implementing interactive, animated visualization tools. Multiple texture layers representing different thematic data sets can be visually combined in the image. A texture layer can be used to modify other texture layers, e.g., their appearance or luminance. Furthermore, multiple texture layers can be used for animating spatio-temporal data. Visual tools for guiding the user by highlighting and animating information can be implemented in a straightforward manner. In addition, a so-called topographic texture layer can substitute geometry-based shading which drastically improves the perception of morphology and rendering performance.</p><p>Due to their effective and efficient visual design capabilities, the presented texturing techniques permit to implement new tools for presenting, exploring, and manipulating terrain data as required by a growing number of applications <ref type="bibr" target="#b18">[19]</ref> such as spatial decision support systems, virtual reality applications, real-time GIS, and interactive cartographic environments <ref type="bibr" target="#b20">[21]</ref>. We have implemented the presented texturing techniques as part of a realtime terrain visualization system <ref type="bibr" target="#b0">[1]</ref> focusing on information visualization for cartography <ref type="bibr" target="#b1">[2]</ref> and navigation systems.</p><p>The remainder of this paper is structured as follows: Section 2 briefly summarizes related work. Section 3 describes the texture  multiresolution model. Section 4 explains the rendering algorithm. Sections 5, 6, and 7 describe applications of the presented texturing techniques. Section 8 reports results, and Section 9 gives some conclusions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rendering of Multitextured Terrain Models</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Image-based modeling and rendering (IBMR) and many LOD techniques for terrain models have been developed for terrain visualization. Hierarchical triangulations for terrain geometry based on TINs are applied to generate multiresolution models which can be used by LOD algorithms (de Floriani et al. <ref type="bibr" target="#b7">[8]</ref>, Gross et al. <ref type="bibr" target="#b12">[13]</ref>, Voigtmann et al. <ref type="bibr" target="#b26">[27]</ref>, and Xia et al. <ref type="bibr" target="#b29">[30]</ref>). Hoppe <ref type="bibr" target="#b14">[15]</ref> introduces a general view-dependent LOD triangulation, called progressive mesh, and the geomorph, a technique to minimize popping effects <ref type="bibr" target="#b15">[16]</ref>. Recent work takes into account both geometric and visual quality of a LOD representation (e.g., Hoppe <ref type="bibr" target="#b16">[17]</ref>). Regular grids have been used for multiresolution modeling (Falby et al. <ref type="bibr" target="#b11">[12]</ref>) and for real-time, continuous LOD rendering (Duchaineau et al. <ref type="bibr" target="#b10">[11]</ref>, Lindstrom et al. <ref type="bibr" target="#b19">[20]</ref>, and Pajarola <ref type="bibr" target="#b22">[23]</ref>). As a common characteristic of these approaches, they do not provide an explicit model for multiple, multiresolution textures.</p><p>Several methods for real-time terrain rendering use IBMR techniques. Cohen et al. <ref type="bibr" target="#b3">[4]</ref> as well as Soucy et al. <ref type="bibr" target="#b23">[24]</ref> model a scene by combining 3D geometry and 2D image sprites; they create a texture map from an object represented at a highresolution which is used to texture the same object represented at a lower resolution -re-introducing detail contained in the texture. Chen et al. <ref type="bibr" target="#b2">[3]</ref> computes these textures at run-time and takes advantage of the frame-to-frame coherence in screen-space. These approaches use texturing basically to substitute geometric modeling with IBMR in order to reduce geometric complexity of terrain models; they do not focus on texturing as a mechanism for the visual design of terrain contents.</p><p>The FlyAway system (Hüttner <ref type="bibr" target="#b17">[18]</ref>) uses a mipmap-approach for a single, memory-resident, texture which must satisfy the constraints imposed by the graphics system. Lindstrom et al. <ref type="bibr" target="#b19">[20]</ref> and Hüttner <ref type="bibr" target="#b17">[18]</ref> proposed a method which handles a single largescale texture related to a LOD terrain geometry. Cline and Egbert <ref type="bibr" target="#b5">[6]</ref> discuss how one large-scale texture, understood as bandwidthlimited resource, can be efficiently treated for terrain rendering using a cache hierarchy. The clipmap <ref type="bibr" target="#b24">[25]</ref> provides a hardwaresupported mechanism to handle a single extremely large texture such as needed by earth-wide visualizations whereas our data structure simulates a clipmap-like behavior without specialized hardware. A texture paging mechanism for large-scale external texture data has been investigated by Davis et al. <ref type="bibr" target="#b6">[7]</ref>. Most other terrain visualization approaches are limited with respect to the management of large-scale texture data: In contrast to the LOD mechanism for geometry data, no similar LOD management is provided for texture data.</p><p>Most terrain visualization techniques consider textures to be images superimposed on geometry. The applications of textures, however, go far beyond as recent developments in real-time rendering show (e.g. elevation maps <ref type="bibr" target="#b8">[9]</ref> and per-pixel lighting <ref type="bibr" target="#b9">[10]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MULTIRESOLUTION MODELS</head><p>Conceptually, the multiresolution model for texture data is independent from the concrete multiresolution model used for terrain geometry. We introduce briefly a generic multiresolution model for geometry used to explain the links between both types of multiresolution models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Geometry Multiresolution Model</head><p>Multiresolution models for terrain geometry are essential to visualize large-scale geometry terrain data. We summarize briefly the key properties of a generic multiresolution model for terrain geometry which hold for other known LOD terrain models as well.</p><p>Let G be a terrain surface and H(G) be a corresponding hierarchical terrain model represented by a tree. The tree nodes are called geometry patches. Each geometry patch N represents a rectangular region within the terrain domain, i.e., D(N) ⊆ D(G), and approximates the terrain surface G in that region by an approximating terrain surface G(N). The way the node calculates G(N) depends on the type of the given terrain surface and the approximation strategy adopted by the LOD algorithm. For example, a grid-based node could select evenly spaced points from a grid data set, whereas a TIN-based node could select points from an arbitrary data set based on an error criterion. The geometric approximation error ε(N) of a geometry patch N is defined as the maximal vertical distance between the terrain surface G and the approximating surface G(N).</p><p>The hierarchical representation defines how many child nodes a geometry patch N can have. In general, the child nodes are constructed as follows: If the geometric approximation error ε(N) exceeds a certain threshold ε ≥ 0, the domain D(N) is decomposed into a set of at most d rectangular, disjoint sub-domains D(N i ). The strategy for decomposing a patch depends on the type of LOD technique: a grid-based technique could apply a quadtree-like subdivision, whereas a TIN-based technique could subdivide by a line parallel to the x-or y-axis such that the number of points on each side of the line are nearly equal. For each sub-domain D(N i ), a child node N i of N is constructed which approximates the terrain surface in that sub-domain. The domain of the root node of H(G) is D(G) covering the whole domain of the terrain surface G. A sample implementation can be found in <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Texture Multiresolution Model</head><p>Multiresolution modeling for texture data is as important as for geometric data because large-scale texture data is unlikely to fit into texture memory or even into main memory. Furthermore, texturing techniques must go beyond the concept of a single texture covering the whole terrain: It must be possible to texture a terrain partially, to texture a terrain surface with multiple, possibly overlapping textures, to combine and mask textures, and to generate textures dynamically. Our multiresolution model for terrain textures provides the foundations for this functionality. It preprocesses texture data by an internal image pyramid and organizes the texturing of a terrain hierarchically by a texture tree. Both constructs represent a texture layer of a terrain model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Image Pyramid</head><p>The image pyramid <ref type="bibr" target="#b27">[28]</ref> is derived from the original image data, which might be contained, for example, in a 2D image file. The image pyramid of a texture layer consists of a sequence of images with decreasing resolution. Each image is created by scaling down the predecessor image by a factor of ½. The first image of the sequence is identical to the original image data, the last image consists of 1 x 1 pixels. The initial image can have an arbitrary size: Cartographic textures and satellite images, for example, are likely to have a width and height of several ten thousands pixels. In addition, the pyramid can store further images at each level which are anisotropically scaled versions of the main image of the corresponding level, used to reduce blurring effects <ref type="bibr" target="#b28">[29]</ref>. In contrast to <ref type="bibr" target="#b17">[18]</ref> which uses several image pyramids, called MPGrids, we use only one image pyramid for a terrain texture, and there is no restriction to the sizes of the images used as terrain textures, such as that the sizes must be powers of 2.</p><p>The implementation is facilitated by memory-mapped files provided by the operating system which permit an application to map the contents of a file directly to its virtual address space. Memory-mapped files are useful for managing extremely large images since their usage consumes few physical resources -only small portions of the file are mapped into the physical address space. Without memory-mapping, image files not fitting into main memory could not be used as initial images of image pyramids.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Texture Tree</head><p>A texture tree is specified by a tree of nodes, which are called texture patches. The texture tree is associated with the hierarchical model H(G) of the terrain geometry. Each texture patch M is related to exactly one geometry patch N M , covering (or at least overlapping) the domain of the geometry patch N M with respect to its geo-referenced coordinates. Therefore, the texture tree has a similar structure as the corresponding geometry tree H(G). Compared to the hierarchical model of the terrain geometry, however, the texture tree may prune its sub-trees for those texture tree nodes which reference already a sub-image of the image pyramid that has full resolution. If such a node would have child nodes, they would require additional textures, but these textures would have the same texture resolution as the large texture of their parent node, i.e., there would be no quality improvement.</p><p>A texture patch M specifies that sub-image of one of the pyramid's images that covers the domain of the associated geometry patch, i.e., D(M) ⊇ D(N M ), and has the highest resolution while still satisfying the texture constraints imposed by the rendering system. For example, each OpenGL implementation defines a maximal texture size (e.g., 1024 x 1024) and requires that the texture size is a power of 2 <ref type="bibr" target="#b28">[29]</ref>. Since a texture patch specifies only the region of the corresponding sub-image for one of the pyramid levels, without storing the actual image data itself, a redundant replication of image data is avoided, even though the domains of the texture patches may overlap each other within a level of the texture tree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Texture Layers</head><p>Technically, a texture layer is represented by an image pyramid and a texture tree <ref type="figure" target="#fig_0">(Figure 1</ref>). Conceptually, we can distinguish between four types of texture layers:</p><p>• Thematic Texture Layer: A thematic texture layer carries color information used as terrain content, typically imported from image files and implemented by a three channel RGB texture. • Luminance Texture Layer: A luminance texture layer specifies brightness modifications applied to other texture layers. It is implemented as a one channel luminance texture. • Topographic Texture Layer: A topographic texture layer specifies shading information for a terrain model calculated, for example, based on the high-resolution geometric model (see <ref type="bibr">Section 7)</ref>. It can be implemented as a specialized luminance texture layer. • Visibility Texture Layer: A visibility texture layer specifies the visibility of other texture layers in terms of transparency (see <ref type="bibr">Section 5)</ref>. Technically, a one channel alpha texture is used for implementation. Usually, thematic and topographic texture layers are precalculated and stored persistently, while visibility and luminance texture layers could be generated by the application, e.g., in response to user interaction and preferences. Geo-coordinates are needed in order to construct the terrain-aligned texture tree. The depth of the pyramid can be controlled by the application.</p><p>If more than one texture layer is used, it must be specified how these layers are combined in image space. The layer operations correspond to the texture blending operations supported by OpenGL and include:</p><p>• Texture Layer Blending: Two texture layers can be blended based on weights provided by a separate alpha texture, that is, the weights can vary from pixel to pixel. This way, arbitrarily shaped blending regions can be defined (see Section 5). • Weighted Texture Layer Addition: Several texture layers can be added to a terrain surface. The weights are specified as constant factors for each of the texture layers (see Section 6). • Texture Layer Modulation: The contents of two or more texture layers can be multiplied on a per-pixel basis. This technique is usually used for visualizing several independent thematic data layers at once and for adding the shading information provided by a topographic texture (see Section 7). These operations can be applied successively, i.e., the result of one layer operation can be piped as input to another layer operation. Multiple texture layers require multiple rendering passes. If the hardware supports multitexturing, the number of actual rendering passes can be reduced.</p><p>Texture layers are independent from each other regardless of the layer operations since texture layers are combined in screen space. Consequently, no preprocessing and costly 2D imaging operations are needed to combine texture layers, which is important to achieve real-time rendering for dynamic texture layers. This technique, based on multi-pass rendering, can be scaled to future hardware designs that support multiple texture units.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RENDERING ALGORITHM</head><p>The rendering algorithm simultaneously traverses the multiresolution model for terrain geometry and the texture trees for all active texture layers, selecting geometry patches and texture patches according to a user-defined visual geometric error threshold γ user ≥ 0 and a user-defined visual texture error threshold τ user ≥ 0.</p><p>We start describing the rendering algorithm for a hierarchical terrain model H(G) without any active texture tree, and refine this algorithm step by step to conclude with a rendering algorithm which can manage a hierarchical terrain model together with an arbitrary number of active texture layers.</p><p>Let B(N) be the axis-parallel 3D bounding box containing the approximating terrain surface G(N) of the geometry patch N ∈ H(G). If B(N) intersects the current view frustum, the visual geometric error γ(N) is defined as follows: Determine the nearest point p ∈ B(N) to the current camera position inside the view frustum. Construct a line segment of length ε(N), centered at p, and parallel to the z-axis (the direction of elevation). Project this segment onto the view plane. The visual geometric error γ(N) is the length of this projected segment measured in screen pixels <ref type="figure" target="#fig_1">(Figure 2</ref>). If N has no child patches we define γ(N) := 0. γ(N) describes the maximum texel displacement measured in screen pixels and the quality of the silhouette of the approximating terrain surface G(N) with respect to the current camera settings: the lower the value the smaller the deviation. Using this visual geometric error as a quality criterion we can now specify a recursively defined rendering algorithm: With this additional quality criterion we can modify the rendering algorithm to handle one texture tree as well. The algorithm traverses the geometry tree and the texture tree simultaneously. It exploits the fact that the structure of the texture tree is the same as that of the geometry tree, except that some sub-trees may be missing. Hence, we use an additional test to determine whether M has a corresponding child patch: We can exploit this fact for two different purposes:</p><p>• If we use the parent texture patch M parent instead of M for texturing, a single texture patch can be used for texturing more than one geometry patch. This reduces the amount of texture data to be loaded and processed during the rendering, and thus reduces memory requirements and increases performance of the algorithm. We can recursively choose the parent texture patch as long as this texture patch satisfies the user-defined quality criterion τ user (first while-loop of the algorithm).</p><p>• Only a part of the image pyramid is actually required to render a single frame. Therefore, a texture patch M loads its texture data only on demand, spanning a separate thread (nonblocking call of M.requestTextureData()). While the texture data is being loaded, the texture data of the parent texture patch M parent can be used instead. In this case, texture resolution is not optimal, but interactivity is ensured because the application is not blocked and can use at least a reasonable approximation of the required texture. If the user-defined texture capacity of the main memory is exceeded, texture data is unloaded for the least recently used (LRU) texture patches. For a set S = {M 1 ,…,M n } of texture patches M i we define τ(N,S) := max M ∈ S τ <ref type="figure">(N,M)</ref>. The algorithm for dealing with a set of active texture trees is essentially the same as the algorithm for one texture tree, but with an additional loop iterating over the set of texture patches, implementing a simultaneous traversal of all trees: The algorithm paintWithTextures(N,T) gets one geometry patch N and a set T of n texture patches. It renders the approximating terrain surface G(N) n times, each time texturing it with the texture data of another texture patch. The result of each pass (a 2D color image) is combined with the results of the previous passes (already stored in the frame buffer) using 2D image operations like multiplication, addition, blending or interpolation. Thus, the process of combining all texture layers is performed solely in screen-space. If the graphics hardware supports multitexturing with m texture units, the algorithm can take advantage of it and render G(N) applying m textures simultaneously, reducing the number of needed passes to n/m. Newer graphics hardware commonly supports 2 texture units, but support for 4 texture units are already announced and can be expected in the near future.</p><formula xml:id="formula_0">Algorithm renderWithTextures(GeometryPatch N,</formula><p>Sometimes a texture T does not cover the whole terrain surface. For example, high resolution satellite images may only be available for some parts of the terrain domain. In order to handle this case as well, we have to modify the properties of a texture patch and the rendering algorithm. For textures covering the terrain partially there should be a white border of one pixel around the texture since OpenGL uses this border color for texturing parts of graphics primitives that are not covered by the applied texture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">TEXTURE LENSES</head><p>As a direct application, multiple thematic data sets can be superimposed on the terrain by multiple thematic texture layers which are added or blended (e.g., land use information and temperature).</p><p>For one or more texture layers, we can specify a luminance texture layer to highlight certain regions of the terrain. Such a visual focus control can be used, for example, to guide the attention of the user. In <ref type="figure" target="#fig_10">Figure 3</ref>, the conceptual model (left) and the resulting image (center) of a terrain with a topographic and thematic texture layer are illustrated.</p><p>For two thematic texture layers, we can specify the visibility regions of both layers by an additional visibility texture layer which contains the weights used to combine both thematic texture layers. For example, to model an interactive thematic texture lens, the visibility texture layer defines a circular region with large weights around a hot spot, controlled by user interaction; only a low texture resolution (e.g., 128x128) is actually needed <ref type="figure" target="#fig_10">(Figure 3  right)</ref>. In the case of static lens shapes, it suffices to manipulate the texture matrix of the visibility texture layer, that is, the underlying alpha texture needs not to be recalculated at all.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">TEXTURE ANIMATIONS</head><p>Dynamic terrain data can be represented by a sequence of texture layers. During animation, two consecutive texture layers are active according to their corresponding time coordinates. These layers are rendered with the weights α and (1-α), respectively. No intermediate texture has to be created which allows us to animate even high-resolution texture sequences. Both active texture layers represent a weighted texture layer combination and can be rendered together with other texture layers, e.g., thematic texture layers. <ref type="figure" target="#fig_12">Figure 4</ref> shows a flooding animation. The texture key frames are 1200 x 2400 pixels large and describe the flooding state in a landscape at discrete time stamps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">TOPOGRAPHIC TEXTURES</head><p>The user perceives and recognizes the morphology of a terrain mainly by the silhouette and shading of the terrain model. We take this into account by so-called topographic textures, provided as a separate texture layer, which improve the perception of a terrain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Appearance Preservation</head><p>The strategies rely on the following principle: a high-resolution topographic texture containing appearance information such as shades is pre-computed based on the original geometric model and stored separately <ref type="bibr" target="#b4">[5]</ref>. Thus, visual detail is re-introduced into the LOD terrain model since topographic textures are applied to terrain patches in screen-space, that is, a pixel-precise shading is obtained even for low-resolution terrain parts. In particular, a wrong visual impression of the terrain's topography which would result for simplified, low-resolution parts of the terrain is avoided. The shading quality depends only on the resolution of the topographic texture and not on the geometric resolution. No triangle-based shading is required during rendering, saving per-vertex lighting calculations. Both impressive speed and quality improvements can be achieved using topographic textures on low-cost 3D graphics hardware with accelerated texture mapping because the texture-based approach bypasses the (generally limited) geometric processing capabilities of these platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Calculating Topographic Textures</head><p>The calculation of a topographic texture may depend on surface properties, surface geometry, topographic features, light sources, and shading rules (e.g., cartographic terrain shading). In addition, it can take into account topographic features such as peaks, pits, saddles, valleys, ridges and other landform elements <ref type="bibr" target="#b25">[26]</ref>.</p><p>Topographic textures can be calculated in an automated preprocessing step by an orthogonal projection of the full-resolution, illuminated terrain model. Then, the frame buffer content is used as image data to construct a texture layer. To achieve a resolution higher than the maximal frame buffer size, the topographic texture can be composed of tiles. The full-resolution terrain model can be shaded using the standard OpenGL lighting, an applicationspecific illumination model (e.g., cartographic hill shading), or it can be based on elevation mapping <ref type="bibr" target="#b8">[9]</ref>.</p><p>In <ref type="figure" target="#fig_6">Figure 5</ref>, the topographic texture takes into account self shadowing of the terrain model. The self-shadowing is calculated by a ray intersection test between light source and full-resolution terrain model. In the example, the topographic texture layer is modulated with a cartographic texture layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Hybrid Shading</head><p>Since the quality of the shading depends on the resolution of the topographic texture, the resolution can become insufficient if the camera gets very close to the terrain surface. For all parts close to the camera, we can apply standard Gouraud shading instead of topographic texturing in order to prevent blurring effects ( <ref type="figure" target="#fig_7">Figure 6</ref>).</p><p>We identify these parts of insufficient topographic texture resolution by evaluating the visual texture error γ(N,M). If M is a leaf patch of a topographic texture tree and γ(N,M) exceeds the  user-defined threshold γ user then the topographic texture is switched off and the standard lighting calculations are used for shading the geometry patch N. This approach combines the advantages of both shading strategies: it provides pixel-precise shading for geometry patches with a coarse approximation and object-precise shading for geometry patches with small approximation errors for which the topographic texture resolution is insufficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Encoding Surface Normals by Topographic Textures</head><p>New graphics hardware (e.g., GeForce from NVidia) support register combiners <ref type="bibr" target="#b21">[22]</ref> that can perform dot-product calculations based on texel data for each rasterized fragment. Used for topographic texturing, this permits the implementation of dynamic shading effects, such as changing the direction of a directional light source or simulating a point light source moving above the terrain surface, without the need to recalculate the topographic texture.</p><p>To encode surface normals, the topographic texture stores normal vectors of a high-resolution terrain surface as an RGBtexture. During the texturing process the dot-product of the encoded surface normal vectors and the direction of the light vector is used as a luminance value simulating the shading of the terrain surface. Note that this shading simulation is based on a per-pixel calculation so the shading information is as precise as the topographic texture is. We can also apply the hybrid shading scheme explained in Section 7.3 for terrain regions where the resolution of the topographic texture is inadequate.</p><p>For a directional light source the light vector is constant for the whole texturing process. For the simulation of a point light source we use a second texture which encodes the light vector just like the topographic texture does for the surface normal vectors. By perspective projection of this light vector texture onto the terrain surface as a second texture and moving the center of this projection we can simulate a moving point light source which can be arbitrarily placed above the terrain surface. <ref type="figure" target="#fig_8">Figure 7</ref> left shows the triangles used to render the images in the center and to the right. The center image is rendered with a directional light source. The right image is rendered with a simulated point light source. Both images use the same topographic texture without the need for recalculation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">RESULTS</head><p>The time measurements presented in <ref type="figure" target="#fig_9">Figure 8</ref> were performed on a standard PC equipped with a 400 MHz Pentium II processor, 256 MB RAM, Riva TNT2 graphics card with 16 MB graphics memory and 2 texture units, and running Windows NT 4.0. The terrain data set consists of about 500.000 triangles and has been rendered in a 640x480 pixels true-color canvas. For each test, 1000 frames have been generated flying over the terrain with an average terrain visibility of 70%. <ref type="figure" target="#fig_9">Figure 8</ref> left compares the standard Gouraud shading with the topographic texturing approach presented in Section 7. The usage of a topographic texturing compared to Gouraud shading has no noticeable impact on rendering performance if we take the same number of rendered triangles. But to achieve the visual quality of topographically textured terrains, the number of rendered triangles would have to be drastically increased if standard Gouraud shading is used. Therefore, the topographic texturing approach is actually more efficient. <ref type="figure" target="#fig_9">Figure 8</ref> right compares the impact of the number of active texture layers on rendering performance. Visualizing many independent texture layers can be done efficiently using the multitexturing capabilities of modern graphics hardware. Topo. 1200x2400, thematic 2400x4800, thematic 512x1024, and luminance lens Topo. 1200x2400, thematic 2400x4800, and thematic 512x1024 Topo. 1200x2400 and thematic 2400x4800 Topographic texture 1200x2400 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">CONCLUSIONS</head><p>The visual design of terrain contents becomes more and more important because terrain models form the graphics basis for any kind of spatial data visualization. The presented texturing techniques enable terrain visualization applications to design interactive, animated terrain textures. The multiresolution model for texture data can be integrated with and complements most existing LOD terrain models. Real-time rendering with multiple texture layers relies on multitexturing which can be implemented efficiently using today's graphics hardware. The approach can be extended towards procedural texture definitions which could be used for visualizing motion and flow. Also the application of multiple texture layers as a technical tool for information visualization has to be investigated. Technical details and the prototype implementation are available at the following WWW site:</p><p>http://www.mamvrs.de/geovisualiz.htm    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Conceptual model of multiple texture layers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>AlgorithmFigure 2 :</head><label>2</label><figDesc>render(GeometryPatch N) if(B(N) ∩ view frustum = ∅) // hierarchical view frustum culling return; if(γ(N) &gt; γuser) // recursive refinement for(each child Ni ∈ N) render(Ni); return; // painting paint(N); Visual geometric error γ(N) and its calculation.The recursion is started by calling the rendering algorithm for the root patch N root ∈ H(G).Similarly to the visual geometric error γ(N) we can define the visual texture error τ(N,M) for a given geometry-texture-patch pair (N,M) with D(N) ⊆ D(M) as follows: Determine the width w and height h of a texel of M in the coordinate system of the terrain surface. Construct two line segments centered at p: one parallel to the x-axis of length w, the other parallel to the y-axis of length h. The visual texture error τ(N,M) is the maximum length of both segments projected to the view plane and describes the maximum size of a texel of M in screen pixels. If M has no child patches we define τ(N,M) := 0.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Algorithm</head><label></label><figDesc>renderWithTexture(GeometryPatch N, TexturePatch M) if(B(N) ∩ view frustum = ∅) return; if((γ(N) &gt; γuser) or (τ(N,M) &gt; τuser)) // recursive refinement for(each child Ni ∈ N) if(M has child Mi) renderWithTexture(Ni,Mi); else renderWithTexture(Ni,M); return; paintWithTexture(N,M); The recursion is started by calling the rendering algorithm for the geometry-texture-root-patch pair (N root ,M root ). Note that a texture patch M can be used for texturing all geometry patches N with D(M) ⊇ D(N). Thus, if a geometry-texturepatch pair (N,M) has been chosen for painting by the rendering algorithm, not only M can be used for texturing the geometry patch N, but also the parent texture patch M parent of M can be used, since D(M parent ) ⊃ D(M) ⊇ D(N) holds: Algorithm renderWithTexture(GeometryPatch N, TexturePatch M) if(B(N) ∩ view frustum = ∅) return; if((γ(N) &gt; γuser) or (τ(N,M) &gt; τuser)) ...; return; while(τ(N,Mparent) ≤ τuser) // reduction of texture data M = Mparent; while(data of M is not loaded) // ensuring interactivity M.requestTextureData(); // non-blocking!!! M = Mparent; paintWithTexture(N,M);</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Set&lt;TexturePatch&gt; S) if(B(N) ∩ view frustum = ∅) return; if((γ(N) &gt; γuser) or (τ(N,S) &gt; τuser)) ...; return; Set&lt;TexturePatch&gt; T = ∅; for(each M ∈ S) while(τ(N,Mparent) ≤ τuser) M = Mparent; while(data of M is not loaded) M.requestTextureData(); M = Mparent; T.insert(M); paintWithTextures(N,T);</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>A texture patch M can have fewer children than the associated geometry patch N M . The missing children correspond to the children of N M which do not overlap with D(T). The property of covering the whole domain of N M (D(N M ) ⊆ D(M)) can be weakened to overlapping (D(N M ) ∩ D(M) ≠ ∅) for those geometry patches which are not totally covered by D(T) but overlap with it. The recursive refinement part of the algorithm has to be changed accordingly by one additional test: we check whether the corresponding child texture patch exists: Algorithm renderWithTextures(GeometryPatch N, Set&lt;TexturePatch&gt; S) if(B(N) ∩ view frustum = ∅) return; if((γ(N) &gt; γuser) or (τ(N,S) &gt; τuser)) for(each child Ni of N) Set&lt;TexturePatch&gt; T = ∅; for(each M ∈ S) if(M has child Mi) T.insert(Mi); renderWithTextures(Ni,T); return;...</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Texture lenses. Conceptual view of the topographic, thematic, and luminance texture layers (left) modeling a highlight lens used to focus spatial positions (center). Partial combination of two thematic texture layers by a visibility texture layer (right). Animation of temporal flooding data by interpolation between two consecutive textures of a texture layer sequence.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Topographic texture layer with self-shadowing combined with cartographic thematic texture layer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Gouraud-shaded terrain (upper left). Same terrain using a topographic texture (upper right). Closer view of the terrain with a topographic texture (lower left). Same view using a hybrid shading scheme (lower right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Topographic textures encoding surface normals: wire-frame (left), directional point light (center), point light source (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Gouraud shading vs. topographic texturing (left), and the impact of the number of active texture layers (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 3 center:</head><label>3</label><figDesc>Texture lenses. Conceptual view of the topographic, thematic, and luminance texture layers(Figure 3 left)modeling a highlight lens used to focus spatial positions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 3 right:</head><label>3</label><figDesc>Partial combination of two thematic texture layers by a visibility texture layer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 4 :</head><label>4</label><figDesc>Animation of temporal flooding data by interpolation between two consecutive textures of a texture layer sequence.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 5 :</head><label>5</label><figDesc>Topographic texture layer with self-shading combined with cartographic thematic texture layer.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Kersting: A Hybrid, Hierarchical Data Structure for Real-Time Terrain Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Döllner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hinrichs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings Computer Graphics International</title>
		<imprint>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page" from="85" to="92" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Concept and Implementation of an Interactive, Cartographic Virtual Reality System. International Cartographic Conference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Buziek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Döllner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<pubPlace>Ottawa</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">LOD-Sprite Technique for Accelerated Terrain Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kuo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;99</title>
		<meeting>IEEE Visualization &apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Appearance-Preserving Simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Olano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;98</title>
		<meeting>SIGGRAPH &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="115" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A General Method for Preserving Attribute Values on Simplified Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interactive Display of Very Large Textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cline</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Egbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="343" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Faust: Intent, Perception, and Out-of-Core Visualization Applied to Terrain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="455" to="458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient Implementation of Multi-Triangulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>De Floriani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Magillo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Puppo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dietrich</surname></persName>
		</author>
		<ptr target="http://www.nvidia.com" />
		<title level="m">Elevation Maps. NVIDIA Corporation, White Paper</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dietrich</surname></persName>
		</author>
		<ptr target="http://www.nvidia.com" />
		<title level="m">Dot Product Texture Blending and Per-Pixel Lighting. NVIDIA Corporation, White Paper</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Duchaineau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wolinsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sigeti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Aldrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mineev-Weinstein</surname></persName>
		</author>
		<title level="m">ROAMing Terrain: Realtime Optimally Adapting Meshes, Proceedings IEEE Visualization &apos;97</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="81" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">NPSNET: Hierarchical Data Structures for Real-Time Three-Dimensional Visual Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Falby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zyda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mackey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="69" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Staadt: Fast Multiresolution Surface Meshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gatti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;95</title>
		<meeting>IEEE Visualization &apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="135" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Texture Mapping as a Fundamental Drawing Primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Haeberli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Segal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4 th Eurographics Workshop on Rendering</title>
		<editor>Cohen, C. Puech, F. Sillion</editor>
		<meeting>the 4 th Eurographics Workshop on Rendering</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="259" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<title level="m">Progressive Meshes. Proceedings of SIG-GRAPH &apos;96</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">View-Dependent Refinement of Progressive Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;97</title>
		<meeting>SIGGRAPH &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="189" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">New quadric metric for simplifying meshes with appearance attributes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;99</title>
		<meeting>IEEE Visualization &apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hüttner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FlyAway: a 3D terrain visualization system using multiresolution principles</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="479" to="485" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Interactive Modelling Environment for Threedimensional Maps: Functionality and Interface Issues</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization in Modern Cartography</title>
		<editor>A. M. MacEachren, D. R. Fraser Taylor</editor>
		<meeting><address><addrLine>Pergamon</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="269" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Real-time continuous level of detail rendering of height fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">F</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;96</title>
		<meeting>SIGGRAPH &apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Maceachren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Fraser Taylor</surname></persName>
		</author>
		<title level="m">Visualization in Modern Cartography. Modern Cartography</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
	<note>Pergamon</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title/>
		<ptr target="http://www.nvidia.com" />
	</analytic>
	<monogr>
		<title level="j">NVIDIA Corporation. NVIDIA OpenGL Extension Specifications</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Large Scale Terrain Visualization Using The Restricted Quadtree Triangulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pajarola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="19" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Rioux: A texture-mapping approach for the compression of colored 3D triangulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Soucy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Godin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="503" to="514" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Tanner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Migdal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Jones</surname></persName>
		</author>
		<title level="m">The Clipmap: A Virtual Mipmap. Proceedings of SIGGRAPH &apos;98</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="151" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Algorithmic Foundations of Geographic Information Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van Kreveld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Digital Elevation Models and TIN Algorithms</title>
		<editor>M. van Kreveld, J. Nievergelt, T. Roos, P. Widmayer</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1997" />
			<biblScope unit="volume">1340</biblScope>
			<biblScope unit="page" from="37" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Hinrichs: A Hierarchical Model for Multiresolution Surface Reconstruction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Voigtmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphical Models and Image Processing</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="page" from="333" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Williams</surname></persName>
		</author>
		<title level="m">Pyramidal Parametrics. Proceedings of SIGGRAPH &apos;83</title>
		<imprint>
			<date type="published" when="1983" />
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Neider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shreiner</surname></persName>
		</author>
		<title level="m">OpenGL Programming Guide, 3 rd Edition</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Adaptive Real-Time Levelof-detail-based Rendering for Polygonal Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>El-Sana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">97</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="171" to="183" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
