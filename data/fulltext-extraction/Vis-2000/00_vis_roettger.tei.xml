<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Hardware-Accelerated Volume And Isosurface Rendering Based On Cell-Projection</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Röttger</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Visualization and Interactive Systems Group</orgName>
								<orgName type="institution">Universität Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Kraus</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Visualization and Interactive Systems Group</orgName>
								<orgName type="institution">Universität Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Visualization and Interactive Systems Group</orgName>
								<orgName type="institution">Universität Stuttgart</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Hardware-Accelerated Volume And Isosurface Rendering Based On Cell-Projection</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation</term>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling</term>
					<term>I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism Volume Rendering</term>
					<term>Isosurfaces</term>
					<term>Unstructured Meshes</term>
					<term>Cell Projection</term>
					<term>Graphics Hardware</term>
					<term>Texture Mapping</term>
					<term>Compositing</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present two beneficial rendering extensions to the Projected Tetrahedra (PT) algorithm by Shirley and Tuchman. These extensions are compatible with any cell sorting technique, for example the BSP-XMPVO sorting algorithm for unstructured meshes. Using 3D texture mapping our first extension solves the longstanding problem of hardware-accelerated but accurate rendering of tetrahedral volume cells with arbitrary transfer functions. By employing 2D texture mapping our second extension realizes the hardware-accelerated rendering of multiple shaded isosurfaces within the PT algorithm without reconstructing the isosurfaces. Additionally, two methods are presented to combine projected tetrahedral volumes with isosurfaces. The time complexity of all our algorithms is linear in the number of tetrahedra and does neither depend on the number of isosurfaces nor on the employed transfer functions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Ten years ago direct volume rendering of unstructured tetrahedral meshes was dramatically accelerated by the Projected Tetrahedra (PT) algorithm by Shirley and Tuchman <ref type="bibr" target="#b20">[21]</ref>, which is summarized in Section 2. Although there are numerous competing approaches to direct volume rendering of unstructured meshes, e.g. ray casting <ref type="bibr" target="#b21">[22]</ref>, slicing <ref type="bibr" target="#b34">[35]</ref>, or sweep-plane algorithms <ref type="bibr" target="#b26">[27]</ref>, several aspects of the PT algorithm are still subject of current research, e.g. the sorting of tetrahedral cells (see <ref type="bibr" target="#b4">[5]</ref> and references therein). Our   The original PT algorithm approximates the opacity and color between vertices linearly resulting in Mach bands as reported by <ref type="bibr">Max et al. in</ref>  <ref type="bibr" target="#b13">[14]</ref>. Stein et al. presented a solution for the correct interpolation of opacities utilizing 2D texture mapping in <ref type="bibr" target="#b23">[24]</ref>, which is also discussed in Section 2. However, this method is restricted to linear transfer functions for the opacity and still interpolates color components linearly ignoring the transfer functions for them inside the tetrahedra.</p><p>Our first improvement of the PT algorithm allows us to render both, opacity and color, accurately by exploiting 3D texture mapping. In particular this method allows us to employ arbitrary transfer functions. The method and its application to a volume density optical model is described in Section 3. In Section 4 we derive an approximate rendering method based on 2D texture mapping, which is supported by considerably more graphics systems and requires less texture memory.</p><p>A second extension allows us to include the rendering of isosurfaces in the PT algorithm using 2D texture mapping without extracting a polygonal representation of the isosurfaces. There are numerous algorithms to display isosurfaces efficiently. We will mention a selection in Section 5. However, none of these algorithms takes any particular advantage of the PT algorithm. Therefore, the costs of displaying an isosurface were not reduced by a combination with the PT algorithm in the past.</p><p>Our approach, however, reuses the visibility ordering and the decomposition of the tetrahedral cells, which are an essential part of every variant of the PT algorithm. There are many efficient algorithms for the visibility ordering (see <ref type="bibr" target="#b4">[5]</ref>), which all appear to be compatible with our rendering extensions. By reusing the ordering and decomposition of tetrahedra our method is capable of rendering isosurfaces without constructing a polygonal representation. As it is conceptually similar to the first pass of the multi-pass algorithm for smoothly shaded isosurfaces by Westermann and Ertl <ref type="bibr" target="#b27">[28]</ref>, we present a variant of this first pass in Section 6. We employ this idea in the context of the PT algorithm and present a specialized singlepass algorithm for flat-shaded isosurfaces using 2D texture mapping in Section 7. Moreover, a two-pass algorithm for smoothly shaded isosurfaces is described in Section 8.</p><p>Extensions for colored and multiple isosurfaces are discussed in Section 9, while Section 10 presents two methods for mixing isosurfaces with projected volume cells, either approximately but smoothly using appropriate blending and texture mapping or more accurately by modifying the texture maps.</p><p>We emphasize that the worst-case time complexities of all our methods, i.e. volume rendering with arbitrary transfer functions, rendering of multiple and smoothly shaded isosurfaces, and mixing of isosurfaces with projected volume cells, are linear in the number of tetrahedra and neither depend on the transfer functions nor on the number of isosurfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Decompose the volume into tetrahedral cells. Scalar values</head><p>are defined at each vertex of the mesh. Inside each tetrahedral cell,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¥ § ¦ ©</head><p>is assumed to be a linear combination of the vertex values.</p><p>2. Sort the cells according to their visibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Classify each tetrahedron according to its projected profile</head><p>and decompose it into smaller triangles (see <ref type="figure">Figure 1</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>class 1a class 1b class 2</head><p>Figure 1: Classification of non-degenerate projected tetrahedra (top row) and the corresponding decompositions (bottom row) according to <ref type="bibr" target="#b20">[21]</ref>. <ref type="bibr" target="#b3">4</ref>. Find color and opacity values for the triangle vertices using ray integration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Render the triangles.</head><p>In the reminder of this section and in Sections 3 and 4 we will only discuss methods to improve the last two points: ray integration and rendering of the decomposed triangles with emphasis on hardware-accelerated rendering.</p><p>The original PT algorithm interpolates color and opacity linearly between the triangle vertices. This, however, is an approximation which leads to rendering artifacts as demonstrated in <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b23">24]</ref>.</p><p>In order to avoid these artifacts Stein et al. suggested in <ref type="bibr" target="#b23">[24]</ref> to use a 2D texture map with the texture coordinates being the averaged extinction coefficient ! and the thickness " of the projected cell, while the texture map contains an</p><formula xml:id="formula_0"># -component which is set to # % $ ' &amp; ) ( 1 0 3 2 5 4 ¦ ( 6 ! 7 " ©</formula><p>. In between the vertices of each triangle the texture coordinates and, therefore, ! and " are interpolated linearly; thus, this approach is restricted to a linearly varying extinction coefficient</p><formula xml:id="formula_1">! , i.e. a linear transfer function ! 8 $ 9 ! ¦ @ ¥ § ¦ © § A</formula><p>. Moreover, the color is still linearly interpolated between vertices. Williams et al. extended these ideas to piecewise linear transfer functions in <ref type="bibr" target="#b31">[32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PT with Accurate Opacity and Color</head><p>In this section a generalization of the method of Stein is presented which works for color and opacity, and places no restrictions on the transfer functions. We achieve these benefits by employing 3D texture mapping.</p><p>Let us start by investigating the situation depicted in <ref type="figure" target="#fig_3">Figure 2</ref>. " denotes the thickness of the cell for this ray.</p><p>As texture coordinates are interpolated linearly, we should only use variables, the values of which vary linearly with screen coordinates. We will restrict our considerations to orthographic projections. In this case . For many applications the calculation of the texture map is a preprocessing step and, therefore, not time-critical. Usually it includes a numerical integration of a ray for each texel in the 3D texture map. We sketch the procedure for the volume density optical model proposed by <ref type="bibr">Williams</ref>  </p><formula xml:id="formula_2">R S $ T V U W 0 X 2 Y 4 P a ( T c b W I ¦ @ B U ¦ © d e 5 d g f H ¦ @ B U ¦ i h p I ¦ @ B U ¦ i h e q h r s D t u v x w y © 0 3 2 5 4 P ( T U W I ¦ @ B U ¦ i h e q h f r s D t u &amp; ( # © R<label>(1)</label></formula><p>with the abbreviation </p><formula xml:id="formula_3">B U ¦ © $ V B G C " ¦ @ B F E ( B D C X v</formula><formula xml:id="formula_4">H ¦ @ B U ¦ i h p I ¦ @ B U ¦ i h by a differential color vector ¦ @ B U ¦ i h (or ¦ @ B U ¦ i h</formula><p>in the notation of <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b31">32]</ref>).</p><p>After the calculation of the texture map in a preprocessing step, all tetrahedra are projected from back to front. Before rendering the triangles of one projected tetrahedron, the three texture coordinates are set for each vertex of the triangles. Then they are blended appropriately into the frame buffer. The blending operation corresponds to</p><formula xml:id="formula_5">R S $ v x w y i ¦ &amp; ( # © R g</formula><p>and is done very efficiently by today's graphics hardware.</p><p>We give a synthetic example of this rendering method in <ref type="figure" target="#fig_5">Figure  3</ref>. The scalar values at the vertices of the visualized tetrahedral mesh are determined by the distance of each vertex to the surface of a sphere. The transfer function of the opacity is 0 except for a small interval, which results in the two partially opaque rings in <ref type="figure" target="#fig_5">Figure 3</ref>.</p><p>In summary our method allows us to exploit hardware-supported 3D texture mapping in order to render projected tetrahedra without the need to do any time consuming calculations for each pixel. Our approach is not as accurate as ray-casting algorithms or the high accuracy (HIAC) volume rendering system described in <ref type="bibr" target="#b31">[32]</ref> because of limited texture memory and non-linear transformations in the case of perspective projections. Especially limited texture memory will limit the size of the 3D texture map resulting in a less accurate resampling of the transfer functions. Within this limited accuracy, however, arbitrary transfer functions may be used without affecting the rendering times, whereas the performance of the HIAC system depends crucially on the chosen transfer functions. In particular, thin peaks are possible within our approach resulting in unshaded isosurfaces as demonstrated in the appendix.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">A New Approximation for PT</head><p>As hardware-supported 3D texture mapping is only available on a few graphics workstations, and the 3D texture maps that are employed in Section 3 need rather much texture memory, we will describe a new approximation to the rendering of projected tetrahedra using 2D texture mapping, which interpolates the opacity linearly. However, this method allows us to use arbitrary transfer functions, while existing hardware-accelerated solutions are limited to linear transfer functions within each cell (e.g. <ref type="bibr" target="#b23">[24]</ref>).</p><p>The basic idea is to approximate the dependencies of the integrals in Equation (1) on " by linear terms, and to implement these terms by a modulation of the vertex colors. </p><p>and is modulated by colors at the vertices with the RGB# components set equal to</p><formula xml:id="formula_7">¦ z " © i " @ { " © i " p " © i " | " i i " z</formula><p>. In practice we are scaling these colors by the maximum opacity value in the texture map in order to avoid clamping for values " } "</p><p>. This scaling is compensated by multiplying the entries in the texture map with the reciprocal value. The combined effect of texturing and blending with appropriate blending coefficients (e.g. in OpenGL GL ONE for the source blend factor and GL ONE MINUS SRC ALPHA for the destination blend factor) is</p><formula xml:id="formula_8">R S $ " " v x w y © y &amp; 6 ( " " # z y a R g</formula><p>which is our new approximation of Equation (1). On the one hand, this approximation results in artifacts because of the linear interpolation (see <ref type="bibr" target="#b23">[24]</ref>), on the other hand, the use of 2D texture mapping enables us to utilize larger texture maps compared with the 3D texture maps employed in Section 3 resulting in an improved resampling of the transfer functions. <ref type="figure" target="#fig_6">Figure 4</ref> shows the synthetic example from <ref type="figure" target="#fig_5">Figure 3</ref> using 2D instead of 3D texture mapping. The linear approximation results in slightly smaller opacities resulting in lighter colors, while the improved resampling results in sharper edges of the structures generated by the transfer functions. The middle image in <ref type="figure" target="#fig_5">Figure 13</ref> represents an example of a 2D texture map generate by Equation (2).</p><p>The following sections discuss an independent extension of the PT algorithm capable of displaying smoothly shaded isosurfaces without vertex interpolations. Additionally, two methods are presented to combine projected tetrahedra with opaque isosurfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Prior Work about Isosurfaces</head><p>For an in-depth introduction into current research about isosurfaces the reader is referred to <ref type="bibr" target="#b0">[1]</ref>. Isosurfaces are an indispensable tool in volume visualization, although direct volume rendering includes much more information in one picture. However, isosurfaces are preferred for many applications as they are usually more comprehensible.</p><p>Thus, direct volume rendering techniques are often extended with isosurfaces in order to combine the advantages of both techniques.</p><p>In their description of the PT algorithm <ref type="bibr" target="#b20">[21]</ref> Shirley and Tuchman suggested to calculate isosurfaces based on a marching tetrahedra algorithm similar to the marching cubes algorithm <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b33">34]</ref>. The combination of these algorithms makes it possible to render isosurfaces with any degree of transparency as noted in <ref type="bibr" target="#b20">[21]</ref>.</p><p>However, research on marching cells algorithms concentrated on reducing the number of cells tested for intersections with the isosurface <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b29">30]</ref> and on simplifying the polygonal mesh representing the isosurface <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b17">18]</ref>.</p><p>Instead of reducing the number of polygons point-based algorithms for the extraction of isosurfaces <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b22">23]</ref> do not produce any polygons. Westermann's multi-pass algorithm for shaded isosurfaces <ref type="bibr" target="#b27">[28]</ref> also does not construct a polygonal representation of the isosurface. As our algorithm is based on the same idea, we present the common concept in Section 6 before discussing our algorithm in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">A Hardware-Accelerated Marching Cells Algorithm</head><p>This section discusses a variant of the first pass of Westermann's algorithm for shaded isosurfaces in unstructured grids <ref type="bibr" target="#b27">[28]</ref>. The algorithm presented here sets all pixels of the silhouette of an intersection of an isosurface with a tetrahedral cell. The first step is to render those parts of the back faces of the cell where the interpolated scalar value is less than the isovalue (see <ref type="figure" target="#fig_7">Figure 5b</ref>). Utilizing OpenGL this can be achieved by setting the # components of the vertices' color to the scalar values and activating an appropriate # -test. Then the front faces are rendered in exactly the same way, i.e. again only those parts are rendered where the interpolated scalar value is less than the isovalue (see <ref type="figure" target="#fig_7">Figure 5c</ref>). By combining both pictures with an exclusive-OR (XOR) operation the correct set of pixels is obtained. Using OpenGL an XOR operation can be realized with the help of a 1-bit stencil buffer by inverting its contents whenever a pixel passes the # -test. Note that the result is not sensitive to the order of the polygon rendering, i.e. the back and front faces could be rendered in any order. The result is also the same if the # -test is inverted for all faces, i.e. if those parts of the polygons are rendered where the interpolated scalar value is greater than the isovalue. Westermann's original algorithm differs in so far as the # -test is inverted for the back faces only and the pictures are combined with an AND-operation. However, this requires additional passes in order to generate both faces of the isosurface.</p><p>In summary this algorithm requires the rendering of all front and back faces in order to set the stencil buffer and to render either the front or the back faces once more for flat-shaded isosurfaces. Thus, for a tetrahedral cell five to seven triangles have to be rendered, while a polygonal representation of the isosurface in a tetrahedron needs only one or two triangles. Therefore, the advantage of interpolating the scalar data with the help of OpenGL hardware is more than compensated by the need to render additional polygons.</p><p>The situation is, however, fundamentally different in the context of the PT algorithm as will be discussed in the following section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Flat-Shaded Isosurfaces</head><p>As mentioned in Section 2 the PT algorithm <ref type="bibr" target="#b20">[21]</ref> triangulates the projection of tetrahedra as shown in <ref type="figure">Figure 1</ref>. However, instead of refering to a triangulation of the projected silhouette into triangles, we can as well think of a decomposition of the original tetrahedron into smaller tetrahedra, which are projected after the decomposition. The projections of these smaller tetrahedra are all of the same kind: Two faces are degenerate and the other two faces are projected onto the same (non-degenerate) triangle. This observation enables us to reduce the algorithm presented in Section 6 to a single-pass algorithm for these tetrahedra using 2D texture mapping.</p><p>As explained in Section 6 pixels are set if and only if the interpolated scalar value of either the back or the front face is less than the isovalue. As noted the back and front face are projected onto the same triangle. Therefore, it is sufficient to render this triangle using a checkerboard-like, two-dimensional texture map as shown in the right-hand column of <ref type="figure" target="#fig_9">Figure 6</ref> with the two texture coordinates corresponding to the interpolated scalar value of the back and front face, respectively. (See the appendix for an alternative derivation of this 2D texture map.)  The first texture coordinate corresponds to the scalar value on the front face and the second texture coordinate to the scalar value on the back face. As the scalar data are interpolated linearly, the texture coordinates should also be interpolated linearly. Perspective corrections of texture coordinates should, therefore, be disabled. Actual values of texture coordinates have to be specified at the vertices of the triangle and are determined by the scalar data defined at the vertices of the projected tetrahedron. (See the left-hand column in <ref type="figure" target="#fig_9">Figure 6</ref> for the scalar data defined at the vertices of the tretrahedron and the middle column for the resulting pairs of texture coordinates at the vertices of the projected triangle.) If the scalar data are not in the appropriate range for texture coordinates, the values have to be scaled accordingly. However, this can be done in a preprocessing step.</p><p>The texture itself has to determine the # -component, i.e. the opacity, which has to be 1 for opaque isosurfaces whenever either the first or the second texture coordinate is less than the isovalue, and 0 otherwise (see the right-hand column of <ref type="figure" target="#fig_9">Figure 6</ref>). As this pass does not allow any kind of smooth shading, we employ flat shading, i.e. the RGB-components of the color of the triangle are constant.</p><p>Unfortunately, edges of isosurface patches within triangles (see the middle column of <ref type="figure" target="#fig_9">Figure 6</ref> for some examples) will cause rendering artifacts as there is no mechanism which aligns them exactly to the corresponding edges in the projected tetrahedra in front or behind. We can avoid gaps by slightly modifying the texture map, effectively 'thickening' the isosurface. This eliminates artifacts for opaque isosurfaces; for partially transparent isosurfaces, however, this will visually enhance edges of the tetrahedral mesh by rendering pixels twice. In fact these edges help to comprehend the three-dimensional structure of flat-shaded isosurfaces. Nonetheless, removing these artifacts for partially transparent isosurfaces is an open problem and requires additional efforts in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Smoothly Shaded Isosurfaces</head><p>Our algorithm for smoothly shaded isosurfaces is again a variant of the corresponding passes of Westermann's algorithm for shaded isosurfaces in unstructured grids <ref type="bibr" target="#b27">[28]</ref>; however, there are several crucial differences. For each triangle the steps of our algorithm are:</p><p>1. Render the shaded back face triangle restricted to the isosurface silhouette as discussed in Section 7.</p><p>2. Repeat the preceding step for the front face triangle.</p><p>3. Form the weighted sum of the two pictures.</p><p>The weights differ for each pixel as they depend on the relative distances of the isosurface to the front and back face, respectively (see <ref type="figure">Figure 7</ref>). For reasons which will become clear in the next paragraph, let were defined in Section 3. The weight of a corresponding pixel on the back face triangle is &amp; 6 ( # . While weights for all pixels were calculated in software in <ref type="bibr" target="#b27">[28]</ref>, we are calculating the weighted sum completely in hardware.</p><p>We still use the 2D texture map of Section 7 for the back face triangle but employ a modified version of this texture map for the front face triangle. This new texture map (see <ref type="figure">Figure 8</ref> for an example) is modulated with the weights # . As the original texture map contains only opacity values 0 and 1, this modulated map in fact stores the weights .) Thus, the weights # in fact specify opacities. Using this texture map when rendering the front face triangle and blending it appropriately onto the opaque back face triangle generates, therefore, the correct weighted sum of both triangles.  Thus, our algorithm for smoothly shaded isosurfaces can be reformulated in two passes for each tetrahedron:</p><p>1. Render the shaded back face triangle restricted to the isosurface silhouette. (See Section 7.)</p><p>2. Blend the shaded front face triangle modulated with a texture map containing the correct weights onto the back face triangle.</p><p>Special care has to be taken with vertices from the decomposition of projected tetrahedra, because they can result in artifacts similar to those induced by hanging nodes. Therefore, the color of a vertex inserted between two vertices of the mesh has to be equal to the color generated by the graphics hardware interpolating between these vertices.</p><p>The algorithm was used in <ref type="figure" target="#fig_12">Figure 10</ref> to render several isosurfaces of different colors as explained in the following section.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">Results</head><p>With hardware-accelerated texture mapping the direct volume rendering methods presented in Sections 3 and 4 are essentially as fast as existing implementations of the PT algorithm. We emphasize that the rendering times for our methods is not affected by the particular transfer functions employed.</p><p>Our extensions of the PT algorithm are hard to compare with "non-PT" algorithms for direct volume rendering, e.g. approaches based on slicing, because the most time critical step of the PT algorithm is the sorting of the tetrahedra, which is not affected by the extensions presented in this paper.</p><p>The algorithms for the rendering of isosurfaces described in Sections 7 and 8 depend on the correct sorting and decomposition of the tetrahedral cells, while most of the algorithms mentioned in Section 5 do not require any sorting or decomposition of tetrahedra.</p><p>Moreover, we did not attempt to reduce the number of cells tested for intersections with the isosurface. Thus, most of the algorithms mentioned in Section 5 will usually be faster than our current implementation if used to render only a single isosurface. However, as our worst-case rendering time does not depend on the number of isosurfaces, our method will outrun most of the other algorithms if the number of isosurfaces is large enough (see also <ref type="table" target="#tab_5">Table 1)</ref>.</p><p>Moreover, our rendering algorithms greatly benefit from a combination with projected volume cells as described in Section 10 because the sorting and decomposition of tetrahedra can be reused in this scenario. Thus, the inclusion of isosurfaces in a visualization application based on the PT algorithm is almost for free. As the rendering in our methods includes extraction and triangulation of the isosurface, the rendering time (without sorting and decomposition of tetrahedra) should be compared to the sum of the extraction, triangulation, and rendering times of other algorithms. Additional efforts required by other algorithms for partially transparent isosurfaces and mixing with volume cells should also be considered in a fair comparison.  The rendering times in <ref type="table" target="#tab_5">Table 1</ref> were obtained on an Octane MXE with an MIPS R10K 250 MHz CPU. The isosurfaces were extracted from the NASA bluntfin data set, which was converted into 187,395 tetrahedra. An image with three isosurfaces is depicted in <ref type="figure" target="#fig_6">Figure  14</ref>. Clearly the rendering times for flat-shaded isosurface depend on the number of intersected tetrahedra (no double-counting) instead of the number of isosurfaces. Smoothly shaded isosurfaces require about twice as much time because the back and front faces have to be rendered separately.</p><p>For a single, smoothly shaded isosurface our rendering time is close to the 0.2 seconds reported by Westermann in <ref type="bibr" target="#b27">[28]</ref>. The rendering performance is comparable to the results of Wittenbrink in <ref type="bibr" target="#b32">[33]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="12">Conclusion</head><p>We presented a hardware-accelerated but accurate way of rendering projected tetrahedra using 3D texture mapping. We expect this method to become more attrative as 3D texture mapping hardware becomes more widespread. As an alternative we derived a less accurate method using 2D texture mapping. Both methods allow us to employ arbitrary transfer functions, which is important for several volume visualization techniques, e.g. the extraction of unshaded isosurfaces with appropriate transfer functions.</p><p>A second extension to the PT alogrithm allows us to render multiple isosurfaces which may be partially transparent, colored, and/or smoothly shaded. The generation of these isosurfaces does not require the explicit calculation of new vertices and needs only a fraction of the computation time of the PT algorithm.</p><p>We have also described two methods to combine isosurfaces with projected volume cells. In this case our approach to rendering isosurfaces rather than extracting them is much faster than traditional techniques.</p><p>Furthermore, we expect the possibility of interactively rendering dozens or hundreds of isosurfaces in combination with projected volume cells to be useful for visualizing data sets which are less effectively visualized by direct volume rendering, e.g. the display of multiple time surfaces in flow visualization as presented by Westermann <ref type="bibr" target="#b25">[26]</ref>.</p><p>Finally, we would like to point out that our methods are especially suited for low-level graphics APIs; therefore, they would greatly benefit from an implementation of the PT algorithm in hardware. In particular the calculation of the vertices of the decomposed tetrahedra including the interpolation of gradients and scalar values at the new vertices could be tremendously accelerated. Supplemented with an API that also includes utility functions for the generation of suitable texture maps such a hardware implementation of the PT algorithm would allow programmers to quickly develop very fast and powerful volume visualization applications for structured and unstructured meshes. were used to render the Bluntfin data set depicted below. The left and right textures were employed to render the back and front face triangles, whereas the projected volume was generated by the middle texture. The texels on the diagonal of this texture represent the transfer functions. Black pixels in these images correspond to completely transparent texels.    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>¡</head><label></label><figDesc>Universität Stuttgart, IfI, Abt. VIS, Breitwiesenstr. 20-22, 70565 Stuttgart, Germany; E-mail: ¢ Stefan.Roettger</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>£</head><label></label><figDesc>Thomas.Ertl¤ @informatik.uni-stuttgart.de . extensions of the PT algorithm are restricted to the rendering of projected tetrahedra.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Intersecting a tetrahedral cell with a viewing ray. values on the entry (front) and exit (back) face respectively;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>".</head><label></label><figDesc>they are interpolated linearly between vertices as mentioned above. Therefore, three texture coordinates. Fortunately, all other values, e.g. color, opacity, etc., can be calculated from " Thus, we can set up a 3D texture map which contains the color and opacity characterizing the intersection of a ray and a cell in dependency of "</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Visualization of a synthetic data set with nonlinear transfer functions implemented with a 3D texture map of dimensions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Same data set as inFigure 3but rendered using a 2D texture map of dimensions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5ashows the resulting silhouette, while Figures 5b and 5c show intermediate steps of the algorithm. The polygon of an isosurface (isovalue 0.5) within a tetrahedral cell (a) can be obtained by an XOR combination of the two pictures (b) and (c). (b) shows the parts of the back faces of the cell with scalar value less than 0.5. (c) is the analogue to (b) for the front faces.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 6 :</head><label>6</label><figDesc>Projected tetrahedra (middle column) with flat-shaded isosurfaces for isovalues 0.75 (top row), 0.5 (middle row), and 0.3 (bottom row). The left-hand column shows the same tetrahedra slightly rotated with scalar data at the vertices. These values define the texture coordinates included in the pictures of the actual projections in the middle column. The right-hand column shows the corresponding texture maps including the triangles in the space of texture coordinates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 8 :Figure 9 :</head><label>89</label><figDesc>A 2D texture map used for a front face triangle; black corresponds to opacity 1 (opaque), white to opacity 0 (transparent). It is a modulation of the lower texture map inFigure 6with the weights The correct combination of the texture maps fromFigure 6into a single texture map for multiple isosurfaces. (See Section 9.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 10 :</head><label>10</label><figDesc>Several isosurfaces extracted from the data set shown inFigures 3 and 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 11 :Figure 12 :</head><label>1112</label><figDesc>Smooth combination of Figures 4 and 10. (See Section 10.) Visualization of the opacity of the 3D texture map that corresponds to the 2D texture map in Figure 15. The additional dimension parameterizes the length of the viewing ray within a tetrahedral cell. The isosurface represents opacity values of 0.25.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 13 :</head><label>13</label><figDesc>These 2D texture maps of dimensions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 14 :</head><label>14</label><figDesc>Visualization of the Bluntfin data set with three isosurfaces mixed with projected tetrahedra.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 15 :</head><label>15</label><figDesc>2D texture map corresponding to the middle texture ofFigure 13but with the integration stopped at the isovalues.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 16 :</head><label>16</label><figDesc>A visualization of an MRI head scan. The isosurface depicts soft tissue located in the cheeks and behind the eye balls.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 17 :</head><label>17</label><figDesc>A CT scan of a bonsai: Leaves are visualized by direct volume rendering, while the trunk and the branches are shown by the brown isosurface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>.</head><label></label><figDesc>Thus, the texture map has to be updated whenever the transfer functions are modified.It is an intrinsic limitation of our method that H and I have to depend on the same scalar field. However, we are not limited to this optical model; for example the model of Wilhelms and Van Gelder<ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b31">32]</ref> could be implemented by simply replacing</figDesc><table><row><cell>x w and # y © i and # © fer functions denotes the color components (note that the opacity of an entry in the 3D texture map. H is a vector), v x w y © depend on the texture coordinates " , B D C , B , and the trans-F E H</cell></row></table><note>and I</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 1 :</head><label>1</label><figDesc>Rendering times (including 'extraction' and 'triangulation') for isosurfaces from the NASA bluntfin data set. The number of cells refers to the number of tetrahedra intersected by at least one isosurface. Timings for the sorting and decomposition of tetrahedra are not included as these steps are already done by the original PT algorithm without our extensions.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="13">Acknowledgments</head><p>The authors would like to thank Rüdiger Westermann for many fruitful discussions and Bernd Tomandl for providing the CT scan of the bonsai, which is visualized in <ref type="figure">Figure 17</ref>.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>#</head><p>denote the weight of a pixel of the front triangle. According to <ref type="figure">Figure 7</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Colored and Multiple Isosurfaces</head><p>The techniques presented in Sections 7 and 8 can be extended to colored and multiple isosurfaces. Coloring can be achieved by setting the vertex colors to white and modulating them with colored RGB# texture maps. The two faces of an isosurface can be colored independently by choosing different colors for texels with</p><p>respectively. An example of a texture map for multiple isosurfaces is given in <ref type="figure">Figure 9</ref>, which shows the combination of the (colored) texture maps from <ref type="figure">Figure 6</ref>. The 'visibility ordering' is easy to understand: For</p><p>we view along the gradient of the scalar field, thus isosurfaces for smaller isovalues occlude those for greater isovalues, and vice versa for</p><p>. Assuming that all cells are rendered, the number of isosurfaces in the texture map does not affect the rendering time. For opaque isosurfaces our method shares this feature with Westermann's algorithm for multiple isosurfaces <ref type="bibr" target="#b25">[26]</ref>, while ray-casting approaches depend at least logarithmically on . For partially transparent isosurfaces our method does still not depend on while the dependency of ray-casting approaches changes to .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Mixing Isosurfaces with Projected Volumes</head><p>It was claimed that rendering mixtures of opaque polygons and volumetric data is straightforward, e.g. in <ref type="bibr" target="#b7">[8]</ref>. This claim, however, does not apply to any cell projecting approach including the PT algorithm, since special attention has to be paid to partially occluded cells. In <ref type="bibr" target="#b31">[32]</ref> Williams et al. suggest to slice each cell at user-specified isovalues. The time complexity of this method, however, depends linearly on the number of isosurfaces. As we noted in Section 9 the time complexity of our algorithm does not depend on the number of isosurfaces; therefore, we propose two alternative methods of mixing isosurfaces and projected tetrahedra, which are more appropriate in this context. The algorithm presented in Section 8 allows us to smoothly include projected tetrahedra by rendering them after the corresponding back face triangle and before the front face triangle. This order ensures that the projected volume is completely occluded where the front face triangle is opaque, i.e. where the isosurface is in front of the volume at the front face, and that the volume is not affected where the front face is transparent, i.e. where the isosurface is behind the volume at the back face. <ref type="figure">Figure 7</ref> illustrates this correlation: The relative thickness of the occluded part of the tetrahedron (white) corresponds to the weight of the front face (left gray scale).</p><p>An example employing this method is given in <ref type="figure">Figure 11</ref>, which mixes the isosurfaces of <ref type="figure">Figure 10</ref> with the projected tetrahedra of <ref type="figure">Figure 4</ref>. More realistic examples are presented in <ref type="figure">Figures 14, 16</ref>, and 17. <ref type="figure">Figure 13</ref> comprises the three 2D texture maps required to render the NASA Bluntfin data set ( <ref type="figure">Figure 14)</ref>.</p><p>Although our approach avoids discontinuities, it is not completely accurate with respect to correct ray integration. Therefore, we developed a more rigorous method. For opaque isosurfaces the ray integration in Equation <ref type="formula">2</ref>, respectively Equation (1) if 3D texture mapping is employed, has to be stopped as soon as one of the isovalues is reached, i.e. for</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B U ¦ i h $ B i</head><p>(see <ref type="figure">Figure 7)</ref>. By rendering the isosurfaces for each triangle first (either in one pass for flat-shaded isosurfaces or two passes for smoothly shaded isosurfaces), followed by the projected volume with the modified 2D or 3D texture map, we are able to generate an accurate picture.</p><p>An example of a 2D texture map generated this way is shown in <ref type="figure">Figure 15</ref> which corresponds to the middle texture in <ref type="figure">Figure 13</ref>. The isosurfaces manifest themselves in transparent vertical stripes which correspond to a scalar value B G C on the front face of a tetrahedron slightly greater than one of the isovalues. In <ref type="figure">Figure 12</ref> this technique is used to visualize the opacity of the corresponding 3D texture map of Section 3.</p><p>Both methods presented in this section can be generalized to partially transparent isosurfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix</head><p>This appendix demonstrates the extraction of unshaded isosurfaces with the technique presented in Section 3 by choosing an approriate transfer function</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I</head><p>. As a side effect the 2D texture maps of Section 7 reveal themselves as special cases of the 3D texture map of Section 3.</p><p>In order to extract the isosurface for an isovalue is already visualized in the texture maps shown in <ref type="figure">Figure 6</ref>. Obviously, the 2D texture maps used in Section 7 are in fact special cases of the 3D texture map of Section 3. However, the derivation presented in Sections 6 and 7 appears to be more intuitive and comprehensible.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Bajaj</surname></persName>
		</author>
		<title level="m">Data Visualization Techniques</title>
		<imprint>
			<publisher>John Wiley &amp; Sons</publisher>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Fast Isocontouring For Improved Interactivity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">. R</forename><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1996 Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="39" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Speeding Up Isosurface Extraction Using Interval Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Puppo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="158" to="170" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Optimal Isosurface Extraction From Irregular Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Puppo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1996 Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="31" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast Polyhedral Cell Sorting For Interactive Rendering Of Unstructured Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Comba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Klosowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S B</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Proc. EUROGRAPHICS &apos;99)</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="369" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Nonpolygonal Isosurface Rendering For Large Volume Datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Durkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Hughes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="293" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Isosurface Extraction Techniques For Web-Based Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="139" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Mixing Translucent Polygons With Volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kreeger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="191" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An Efficient Volume-Rendering Algorithm With An Analytic Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chyi-Cheng</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu-Tai</forename><surname>Ching</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="515" to="526" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">View Dependent Isosurface Extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;98</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="175" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Near Optimal Isosurface Extraction Algorithm Using Span Space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="73" to="84" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics (Proc. SIGGRAPH &apos;87)</title>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Optical Models For Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="99" to="108" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Flow Volumes For Interactive Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;93</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="19" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Discretized Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scateni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="281" to="287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Type-Merging Algorithm For Extracting An Isosurface From Volumetric Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyu Ho</forename><surname>Kwang-Man Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Park</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="406" to="419" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Interactive Ray Tracing For Isosurface Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-P</forename><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;98</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="233" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Octree-Based Decimation Of Marching Cubes Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shekhar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Fayyad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Cornhill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;96</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="335" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Sweeping Simplices: A Fast Iso-Surface Extraction Algorithm For Unstructured Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;95</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="143" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Isosurfacing In Span Space With Utmost Efficiency (ISSUE)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;96</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="287" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A Polygonal Approximation To Direct Scalar Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tuchman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics (San Diego Workshop on</title>
		<imprint>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="63" to="70" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Lazy Sweep Ray Casting Algorithm for Rendering Irregular Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mitchell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="142" to="156" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Fast Surface Rendering From Raster Data By Voxel Traversal Using Chessboard Distance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Šrámek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="188" to="195" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Sorting And Hardware Assisted Rendering For Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">L</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="83" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">W</forename><surname>Weisstein</surname></persName>
		</author>
		<ptr target="http://mathworld.wolfram.com/" />
	</analytic>
	<monogr>
		<title level="j">Eric Weisstein&apos;s World Of Mathematics</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A Level-Set Method For Flow Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;00</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The VSBUFFER: Visibility Ordering Unstructured Volume Primitives By Polygon Drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;97</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="35" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Efficiently Using Graphics Hardware In Volume Rendering Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics (Proc. SIGGRAPH &apos;98)</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="169" to="177" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A Coherent Projection Approach For Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics (Proc. SIGGRAPH &apos;91)</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="275" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Octrees For Faster Isosurface Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A Volume Density Optical Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Volume Visualization)</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
	<note>ACM Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A High Accuracy Volume Renderer For Unstructured Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">L</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Stein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="37" to="54" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">CellFast: Interactive Unstructured Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Wittenbrink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99 Late Breaking Hot Topics</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="21" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Data Structures For Soft Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mcpheeters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="227" to="234" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Hardware Assisted Volume Rendering Of Unstructured Grids By Incremental Slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Law</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="55" to="63" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
