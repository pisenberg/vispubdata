<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Simplification Of Surface Annotations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Suits</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">T</forename><surname>Klosowski</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">P</forename><surname>Horn</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gérard</forename><surname>Lecina</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ibm</forename><forename type="middle">T J</forename><surname>Watson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dassault</forename><surname>Systèmes</surname></persName>
						</author>
						<title level="a" type="main">Simplification Of Surface Annotations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling-Curve</term>
					<term>surface</term>
					<term>solid</term>
					<term>and object representations simplification</term>
					<term>polygonal path</term>
					<term>mesh</term>
					<term>CAD/CAM</term>
					<term>FEM</term>
					<term>cartography</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Geometric models are often annotated to provide additional information during visualization. Maps may be marked with rivers, roads, or topographical information, and CAD data models may highlight the underlying mesh structure. While this additional information may be extremely useful, there is a rendering cost associated with it. Texture maps have often been used to convey this information at relatively low cost, but they suffer from blurring and pixelization at high magnification. We present a technique for simplifying surface annotations based on directed, asymmetric tolerance. By maintaining the annotations as geometry, as opposed to textures, we are able to simplify them while still maintaining the overall appearance of the model over a wide range of magnifications. Texture maps may still be used to provide low-resolution surface detail, such as color. We demonstrate a significant gain in rendering performance while retaining the original appearance of objects from many application domains.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Geometric simplification and the use of texture maps to represent surface features are established techniques <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b15">15]</ref> for improving rendering performance while still conveying the original appearance of an object. As support for texture and bump mapping becomes common in even the most inexpensive graphics cards, the use of textures will continue to grow not only for games but also for three-dimensional application areas such as CAD/CAM, Internet catalogs, cartography, and scientific visualization.</p><p>Although the quality of texture mapped renderings has greatly improved through refinements such as mipmapping <ref type="bibr" target="#b15">[15]</ref>, there remains a fundamental limitation set by the highest resolution texture present in the mipmap. This becomes a problem when important surface features appear blurred or pixelized when viewed at close £ suits, jklosow, hornwp @us.ibm.com † Dassault Systèmes, Suresnes France <ref type="figure">Figure 1</ref>: Example of annotations draped onto a surface with a contextual texture. range, and can greatly detract from the realism and impact of the rendered image. <ref type="figure">Figure 1</ref> shows examples of annotations draped onto a texture mapped surface, and <ref type="figure" target="#fig_0">Figure 2</ref> is a close-up of the surface revealing the distracting pixelization of the textured annotation, as opposed to the cleanly stroked lines of the draped annotation. Many applications have two types of surface features that are important: a contextual texture that conveys the nature of the object and gives it a sense of realism and presence, and annotations that depict important surface features or text. For example, a regional map could use a low-resolution image of the local geography as a contextual texture, while the roads, rivers, cities, and their names would carry the annotation, which may be the key information to convey.</p><p>In this paper we describe a technique for creating hybrid visualizations consisting of a relatively low-resolution contextual texture merged with stroked annotations drawn directly onto the surface. The technique can be visualized as projecting, or draping, a twodimensional stroked annotation (e.g., text, polygonal mesh) onto a surface and then simplifying the draped result while conforming to the surface. <ref type="figure">Figure 1</ref> shows two common types of annotations handled in this paper: a simple path containing no self-intersections, and a mesh structure with many line segments meeting at each vertex. The simplification process uses the surface normals to pro-  <ref type="figure">Figure 1</ref>. The left example shows an annotation drawn directly into the applied texture map, and resulting pixelization when zoomed in. In contrast, the draped and stroked annotation on the right retains its appearance with changing magnification. vide a directed, asymmetric error tolerance that keeps the annotation close to the surface while allowing greater tolerance in the plane tangent to the surface. The result is a simplified version of the original object that does not require high resolution textures since the most visually important surface annotations are drawn directly onto the surface geometry as stroked lines. Although the cost of drawing the lines has been added to the rendering process, we show that draping and simplifying the annotation geometry onto the surface provides a significant improvement in rendering speed while retaining the appearance of the object over a wide range of magnifications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">OVERVIEW OF THE PROBLEM</head><p>We start with the most general scenario in which a threedimensional annotation consisting of vertices, arbitrarily connected by edges, is attached to a nearby surface. The goal is to retain the appearance of the annotation as if it were draped onto the surface, as depicted in <ref type="figure">Figure 1</ref>. For annotations that are simple polygonal paths, the general shape of the path should be retained, while for meshes or paths that contain many self-intersections, it is also important that the connectivity appear unchanged after simplification. This requires special handling at vertices shared by more than two edges, as discussed later.</p><p>The process of draping the annotation onto the surface consists of four stages:</p><p>1. Project the annotation vertices onto the surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">For each edge in the annotation, determine an appropriate</head><p>cutting plane through the surface that defines the path of the draped edge along the surface.</p><p>3. Find the intersection of the cutting plane with the surface triangle edges to build a new list of line segments that constitute the draped edge by "walking" along the surface from one vertex to the other. <ref type="bibr" target="#b3">4</ref>. Simplify the draped edges using a directed, asymmetric error tolerance based on surface normals. The vertex on the left projects into the interior of the triangle while the one on the right snaps onto a triangle edge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Projecting The Vertices</head><p>The first stage finds the projections of the vertices on the surface.</p><p>Here, a good projection is one that approximates the nearest point on the surface but also avoids the creation of short segments that appear when a projected point lands near a triangle vertex or edge. We use a tolerance value, ε, based on a percentage of the average annotation edge length, that forces projected points to snap first to the nearest vertex within ε of the projected point, and if no vertex is within that range, to snap the point to the nearest edge within the ε range. If the point does not snap to a vertex or edge, it simply projects directly into the nearest triangle. <ref type="figure" target="#fig_1">Figure 3</ref> shows an edge suspended above a surface and the normals of the two nearest triangles. The vertex on the right projects near to a triangle edge and snaps onto the edge, while the vertex on the left does not snap and remains in the interior of the triangle. Note that the desired projected edges, drawn on the surface in black, appear crooked due to the low angle of view and the creases between adjacent triangles; from above, the edges appear straight. The criteria for draping the vertices of an annotation are somewhat unique since one needs only a visually appropriate approximation of the projection, and one that results in a projected annotation of minimal complexity. Although the projection algorithm used in this work is a simple implementation that checks for projection onto all surface triangles (hence O´N pts ¢N tri µ), techniques such as spatial subdivision could reduce the expense to at most O´N pts ¢ log´N tri µµ. Furthermore, if the annotation vertices come from an original surface and if the projection surface is a simplified version of that original surface, it would be straightforward to maintain an association between the original vertices and the simplified triangles during the simplification process, reducing the complexity to O´N pts µ. An important example of this special case is draping the wireframe of an object onto its own simplified surface, as discussed in more detail below. One final item that reduces the expense of the projection when the target is a simplified surface is the fact that N tri can be significantly smaller than the number of triangles in the original surface since the projection only deals with the triangles of the destination surface, allowing the draping process to benefit directly from the surface simplification.</p><p>Although the projection process is well-behaved for points near a smoothly varying manifold surface, ambiguous projections arise when a vertex is floating near a plane that bisects a sharp and nearby corner. If the point is outside the corner, it projects onto the nearest <ref type="figure">Figure 4</ref>: Result of direct connection of the two projected vertices. In this case, the edge penetrates the surface and is hidden over most of its length. edge in a well-defined manner; if the point is on the inside, however, it projects onto the nearest of the two surfaces in a manner sensitive to its exact location relative to the bisecting plane. Based upon our experiences with the models below, we expect these occurrences to be rare and have little impact on the appearance of the draped edges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Determining The Cutting Plane</head><p>Once the annotation vertices project onto the surface, the problem becomes how to reconnect them while conforming to the surface, yet retaining the straight appearance of the original annotation edges. <ref type="figure">Figure 4</ref> shows two projected vertices directly connected without regard for the surface triangles. The resulting edge penetrates deep into the surface and, alternatively, could also float high above the surface. Either artifact would stand out perceptually and would detract from the visual purpose of the draped edge as a markup of the surface itself.</p><p>The problem of finding the shortest path between two points on a polyhedron is known to be computationally expensive <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12]</ref> and therefore cannot be used in a practical draping algorithm. Since the goal is to have a simplified version of the original object that is visually consistent, the requirement that the path be minimal can be exchanged for a requirement that the path appear straight when viewed from somewhere above the surface. This amounts to finding a plane that cuts through the surface at the two projected points, as shown in <ref type="figure" target="#fig_2">Figure 5</ref>, but with only two points and a triangulated surface, the plane is not defined. A plane that also goes through the original points near the surface would suffice, but four points then over-constrain the plane. As a compromise that is computationally efficient and captures the geometry of the draping process, we use the plane defined by the two projected vertices and the midpoint of the original edge, as shown in <ref type="figure" target="#fig_2">Figure 5</ref>. Just as with point projection, problem situations can arise in which the three points are collinear and do not define a plane, such as when the original points are identical to their projected counterparts. Fortunately, such cases involve original edges that are close to the surface and therefore insensitive to the angle of the plane through the projected points. To accommodate the case when the three points are collinear, the plane is defined by the two projected vertices and the average of the two surface normals at those vertices.</p><p>The above description of vertex projection and edge draping applies to the general case of edges draped onto a surface based on surface normals and closest proximity, but there are many applica- tions where the draping process is more straightforward because the direction of point projection and the orientation of the cutting plane are strictly vertical. This happens whenever the surface is a rubbersheeted version of a two-dimensional data set and the annotation is registered with the same two-dimensional coordinate system. This is the case in cartographic examples where geographic features such as rivers or roads are specified in the same coordinate system as a Digital Elevation Model (DEM) onto which they can drape. In such examples the point projection is done by direct interpolation of the DEM data set to find the elevation at each point on the annotation, and the cutting plane is the one that passes through the two vertices of each edge and is oriented vertically. This simplifies the draping algorithm and guarantees the annotation will have no distortion when viewed from directly above the surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Walking Along The Surface</head><p>For each of the original edges of the annotation, we must reconnect the projected vertices to form new edges that conform to the surface geometry. We refer to this process as "walking" along the surface, since our algorithm begins at one of the projected endpoints and walks from triangle to triangle, creating new edges as necessary, until the second projected endpoint is reached.</p><p>If the two projected endpoints, P and Q, are within the same triangle on the surface, we can simply reconnect the two vertices without walking since the new edge lies on the surface. Otherwise, we compute a plane containing the two projected vertices that cuts a path along the surface, as described in Section 2.2 and shown in <ref type="figure" target="#fig_2">Figure 5</ref>.</p><p>Once we define the cutting plane, we use the same plane for the entire walking procedure, since this produces straighter looking edges and more visually appealing results (see <ref type="figure" target="#fig_3">Figure 6</ref>). We initially recomputed the plane for each new segment during the walk, but this introduced additional bends, and the overall effect was unsatisfactory.</p><p>In general, the walking process begins by computing the intersection of the cutting plane with the surface triangle that contains the first projected vertex, P. Since the plane was chosen to contain P, this intersection will typically consist of two intersection points, from which we choose the one, W , closest to our destination, Q. This intermediate point defines a new edge, PW , lying on the surface geometry, and we continue the walking process from W to Q.  As discussed in Section 2.1, we use an ε threshold to snap the projected points to vertices and edges on the surface. Consequently, the projected vertex P often lies on an edge or a vertex of the surface. In these instances, to complete the first iteration of the walk, we repeat the above process for each of the triangles incident to P. After computing each of the potential intermediate points, we choose the point, W , closest to Q, and continue as before.</p><p>While this procedure is easily described, many pitfalls may arise to complicate matters. For example, occasionally it happens that there are two closest intermediate points that are equidistant from the destination, Q. Deciding which of these two points to use can be problematic and could easily lead the walking procedure in the wrong direction. This can happen when the vertex gets projected onto the wrong connected component due to problems in the surface geometry, such as self-intersections or nearly coincident parallel planes.</p><p>To avoid these issues as much as possible, we have implemented several heuristics. One of the simplest is to walk from P to Q until the algorithm finishes, or we reach a problem area at vertex W , at which time we simply reverse the direction of the walk and go from Q to W . This typically avoids most of the problems that can occur during the walking. In the remaining few cases, P and Q are connected directly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Simplifying The Walked Edges</head><p>The process of walking the edges to reconnect the projected vertices on the surface will necessarily produce a draped annotation containing at least as many vertices and edges as in the original annotation, and likely many more due to the bending of the edges as they follow the surface triangles. Clearly there is an opportunity to simplify the walked edges since, on a simplified surface, many of the edges are not only coplanar, where multiple triangles merge into one, but also nearly collinear. For rendering purposes, it is important that the edges remain close to the surface without penetrating it, while edge position errors within the plane of the surface are much less noticeable. Although there has been work in the area of arbitrary path simplification in computational geometry <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b9">10]</ref> and cartography <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>, the algorithm described here is unique because it is tailored to the appearance of an annotation rendered on a surface and it purposefully alters the actual topology of the annotation <ref type="figure">Figure 7</ref>: Schematic of the directed, asymmetric tolerance window constructed for edge PQ. V 1 projects within the window and is a candidate for simplification, while V 2 does not.</p><p>without significantly impacting the appearance. This can produce a simplified annotation that conforms to the surface yet contains far fewer edges than the original annotation.</p><p>The edge simplification algorithm accommodates meshes and self-intersecting paths by special handling of vertex stars £ of degree greater than two. An edge with a vertex shared by many other edges is simplified with the joining edge that is best paired with it, which may not be well-defined for arbitrary irregular meshes containing high order vertex stars and very acute angles between edges sharing a vertex. The algorithm outlined below refers to Figures 7 and 8, which depict an edge, PQ, being simplified with edges joining at Q. In <ref type="figure">Figure 7</ref>, the vertex star at Q has degree three since it is shared by edges PQ, QV 1 , and QV 2 . <ref type="figure">Figure 8</ref> shows the continuation of the algorithm where PQ and QV 1 have been simplified into the new edge, PV 1 , and now the edges shared by V 1 are tested for simplification. In this case the vertex star at V 1 has degree two and the only edge to test is</p><formula xml:id="formula_0">V 1 V 3 .</formula><p>The algorithm for simplifying the edges is as follows:</p><p>1. Select an edge, PQ, from the list of walked edges.</p><p>2. Construct a local coordinate system, as shown in <ref type="figure">Figure 7</ref>, with the origin at Q, the y-axis in the direction of the triangle normal associated with PQ, the z-axis in the direction PQ, and the x-axis in the plane of the triangle, found by the crossproduct ofŷ andẑ.</p><p>3. For each walked edge, QV 1 , that connects with PQ at Q, project the vertex, V 1 , into the x-y coordinate plane.</p><p>4. If the projected vertex, V 1 , falls outside a rectangular tolerance window of dimensions E x , E y , then reject it and continue to the next edge in the vertex star at Q. <ref type="figure">Figure 7</ref> shows the projection of V 2 landing outside of the tolerance window, disqualifying it as a possible direction for simplification.</p><p>5. If the new vertex, V 1 , does project within the tolerance window, construct a new coordinate system using edge PV 1 , but still using the same normal associated with the original edge, PQ (See <ref type="figure">Figure 8)</ref>. This allows the simplified edge tolerance <ref type="figure">Figure 8</ref>: New tolerance window constructed after simplifying PQ with QV 1 . Note that the window has pivoted about P in the plane tangent to the surface, but has not moved perpendicular to the surface. V 3 would have projected outside the original tolerance window, but projects within the new window and is a candidate for simplification.</p><p>to slew in the tangent plane of the surface while remaining confined to the surface. If the vertex does not project into the tolerance window, return to step 3 and try the next vertex connected to Q. The new tolerance window will be centered around V 1 in the x-axis, but may not be centered along the y-axis since the window does not move in the y-direction, as shown in <ref type="figure">Figure 8</ref>, where V 1 appears slightly below the center of the new tolerance window.</p><p>6. Project all the intermediate points along the original path from P to V 1 into the new tolerance window, and if any fall outside the window, return to step 3 and try the next vertex connected at Q. If all the intermediate points do project within the tolerance window, mark edges PQ and QV 1 as "invalid" and continue using the new edge, PV 1 .</p><p>7. Continue in this direction until no joining edges will fit in the tolerance window, then repeat from the P side of edge PQ.</p><p>8. When edge PQ has been simplified in both directions with connected edges, continue with the next valid edge in the list of walked edges.</p><p>9. Invalid edges are always ignored during the above steps.</p><p>The above algorithm works well for paths on surfaces but may create artifacts for annotations containing: (a) vertices shared by more than four edges, (b) edges that form an acute angle at a vertex, (c) short line segments in the star of a vertex. Annotations with these features can produce noticeable errors in the form of bends (or "jogs") and breaks near the problem vertex. Our solution to this problem is to add an additional set of criteria that prevent the simplification of problem edges. These criteria do not significantly increase the edge count of the simplified results, and they eliminate otherwise glaring deformations in the draped annotation.</p><p>The additional criteria are:</p><p>If an edge, QV 1 , forms an angle less than Θ min with any other edge in the vertex star at Q, do not simplify it with PQ.</p><p>If edge, QV 1 , is more collinear with some other edge in the vertex star at Q than it is with PQ, do not simplify it with PQ. The first criterion fixes the appearance of acute edges at vertices, and the value of Θ min will be dependent on the model. The second criterion prevents the simplification of short edges in the wrong direction, which would produce a jog in the edge. Not simplifying it with PQ will allow it later to be simplified with the other edge joining at Q that is more collinear. See <ref type="figure">Figures 7 and 8</ref>. <ref type="figure" target="#fig_5">Figure 9</ref> shows the final result of a draped and simplified edge. Some penetration of the surface may occur, as determined by E y , although the edge will be rendered unbroken if the penetration is not too deep.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RESULTS</head><p>We present simplification results for three types of surface annotations: finite-element method (FEM) mesh edges on a CAD/CAM model, rivers on a three-dimensional relief map, and general markup of an object with a low-resolution contextual texture. The main goal of the CAD/CAM example is to have faster interaction with a view of the model while still conveying analysis results, as color on the surface, and the input FEM mesh, as edges drawn on the surface. It is therefore important to simplify the geometric surface and FEM mesh while still retaining the appearance of the surface, mesh, and colors. The edge draping process in this case involves projection onto the surface from all directions using the cutting plane algorithm of Section 2.2. In contrast, the cartographic example demonstrates annotation draping and simplification when the cutting plane has a known orientation, in this case vertical. The final example shows signatures drawn onto a highly simplified version of a texture mapped baseball, conveying the general application of this technique and the beneficial effect of merging stroked annotations with a contextual texture.</p><p>The automobile model consists of 80K vertices and 143K triangles. Each vertex has a scalar data attribute corresponding to an FEM analysis result and corresponds to a color on the rendered model. The FEM mesh consists of 80K vertices and 156K edges, which must drape onto a simplified version of the model containing only 23K vertices and 35K triangles, or a reduction to 25% of the original triangles. The simplification algorithm used for this example was that of Garland and Heckbert <ref type="bibr" target="#b6">[7]</ref>; however, there are no dependencies within our work on this or any other simplification algorithm. After draping and walking the mesh on the surface, Simp 45% <ref type="figure">Figure 10</ref>: For a multi-frame flythrough of an automobile model, rendering times are reported for the original edge geometry, the walked edges, and several degrees of simplified edge geometry. The percentage indicated refers to the percentage of edges in comparison to the original model. the number of walked edges was 236K, or 151% of the original. Simplification using tolerances of E x 4% and E y 20%, and Θ min 35 AE reduced this number to only 98K edges, or 63% of the original. The results are shown before and after simplification in <ref type="figure" target="#fig_1">Figures 13 and 15</ref>. Note the overall similarity of the views and the quality of the mesh on the surface, despite the drastic reduction in triangles and edges rendered. <ref type="figure">Figure 10</ref> shows rendering times of this model for various degrees of simplification as the model is displayed in a multi-frame flythrough. Note the significant reduction in rendering times with simplification of the model and annotation. The results shown in the figures of this paper corresponds to "Simp 65%", which is the second curve from the bottom, with approximately 30% of the rendering time of the original model. The walking and simplification algorithms are very efficient since they take advantage of the connectivity of the surface and annotation respectively. Both algorithms have O´N WalkedEdges µ time expense, and both execute in approximately 10 seconds on a 400 MHz Pentium II computer with 128 MB of RAM.</p><p>Because the quality of the mesh is retained so well after simplification, it is hard to see evidence that the mesh has actually been simplified. To show this, we traverse the simplified mesh and color the edges so that no two connected edges share the same color (analogous to the four-color map problem). <ref type="figure" target="#fig_0">Figures 19 and 22</ref> show the resulting colors in the windshield area of the automobile before and after simplification. In <ref type="figure" target="#fig_5">Figure 19</ref>, each quad edge has a unique color, indicating that each edge is rendered individually. We contrast this with <ref type="figure" target="#fig_0">Figure 22</ref>, in which long segments (the simplified edges) have one color and even cross segments of the same color, indicating the removal of the vertex at their intersection. One can also see a preferential simplification along the vertical axis of the windshield, as one would expect since the windshield curves more in the horizontal than the vertical direction. This is a direct result of controlled simplification with an oriented tolerance window.</p><p>The cartographic example in <ref type="figure" target="#fig_3">Figure 16</ref> shows a river draped onto a simplified relief map. Here the projection and walking used a strictly vertical orientation. The results show the river nicely stroked onto the surface, with occasional gaps, from this viewpoint, due to occlusion by local topographic features. Zooming and flying over the model shows the river drawn in a consistent manner as stroked line segments, without sizing and blurring artifacts that would result if the river were included in a texture map.</p><p>The final example in <ref type="figure" target="#fig_0">Figure 20</ref> shows handwriting captured from a pen tablet and draped onto a highly simplified sphere with a lowresolution texture map. The combination of simplified geometry with a low-resolution texture map still provides a very compelling sense of a baseball, while the consistent rendering of the signatures conveys their role as markup of a three-dimensional object. The simplification of the annotation in this case was 21%, and the simplification algorithm retained the form of the text without special treatment for handwriting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">SIMPLIFICATION TOLERANCE</head><p>Three parameters control the degree of simplification of the surface annotation: E x , E y , and Θ min . The allowed tolerance in the plane of the surface, E x , controls the shape of the simplified annotation, and its maximum allowed value depends strongly on what the annotation represents. If the annotation is a grid structure such as an FEM mesh, the resulting lines should appear straight and visually convey the overall layout of the grid, while annotations such as text contain curves that must retain their form after simplification. The tolerance perpendicular to the surface, E y , depends on a number of factors specific to the visual application and the method used for rendering lines on surfaces. If lines are drawn on the surface using a z-buffer with no regard for the equal depth of the surface and line pixels, the image suffers from partial or broken lines obscured by the surface. There are several techniques <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b13">13]</ref> to overcome this problem, including glPolygonOffset() in OpenGL <ref type="bibr" target="#b14">[14]</ref>, which biases the depth of triangles with respect to lines during rendering, ensuring that lines are drawn in front of the surface. Alternatively, if the surface has a well-defined front and back determined by the triangle normals, the draped edges can be intentionally offset a small amount from the surface in the direction of the normal. In either case, the tolerance perpendicular to the surface, E y , is determined by the limit at which the line segments begin to penetrate or float above the surface at a level that is unacceptable using the particular rendering method of the visual application. The third parameter, Θ min , is relevant only for annotations that cross themselves in ways that must not appear to change after simplification, such as an FEM mesh. For such a mesh, Θ min must be large enough to prevent the corruption of acute angles found in the annotation, but small enough to allow simplification of the more common angles found in edge  The three parameters above determine the degree of simplification, but do not convey how the resulting degree of simplification varies with changes in the input parameters. To investigate this relationship, we performed a number of simplification runs on the automobile model using geometrically increasing values of E x and E y independently. <ref type="figure" target="#fig_7">Figure 11</ref> shows the percentage change in the number of vertices and edges versus E y , where E y = 0.2, 0.5, 1.0, and 2.0, in units of average edge length. (Note that the simplification percentages are relative to the original annotation, not the "walked" edges that are the actual input to the simplification algorithm. This causes some values to exceed 100%). Each cluster of four measurements corresponds to E x for values of 5, 10, 20, and 40%, in order from top (less simplification) to bottom (more simplification). The figure shows a logarithmic decrease in resulting edges and vertices for increasing E x and E y , but does not provide insight into the nature of this relationship.</p><p>We can gain insight to the relationship between the degree of simplification and the input tolerances by viewing a single image containing all of the vertex stars tested during simplification. Be-   <ref type="figure" target="#fig_10">Figure 14</ref>. Note the similarity with the original model shown in <ref type="figure" target="#fig_1">Figure 13</ref>, despite the reduction in rendered triangles and lines (25% and 63% respectively).</p><p>cause the tolerance window is oriented relative to the surface normal associated with each visited edge, we construct a novel visualization of the annotation geometry by combining all vertex stars into one view, using the local coordinate system described in Section 2.4, to establish the location of the vertices at the end of each edge in the vertex star. <ref type="figure">Figure 17</ref> shows the resulting cloud of vertices for the walked FEM edges of the automobile model. Imagine each edge, PQ, of the annotation entering from the right of the figure, with vertex Q shown at the center of the cloud. The edge normal is up and the vertex cloud tends to consist of points either in the x-y plane or the y-z plane. If we collapse all the points into the x-y plane, we see directly their location relative to the tolerance window. <ref type="figure" target="#fig_0">Figure 23</ref> shows the same points projected into the x-y plane as a histogram with height corresponding to the logarithm of the density of points in the plane. Superimposed on the histogram is the tolerance window used for the simplification done (in this instance) <ref type="figure" target="#fig_3">Figure 16</ref>: Detail of a river draped onto a relief map. on the automobile model. Points that lie outside the tolerance window correspond to edges that are rejected for simplification with the reference edge used to locate it in <ref type="figure">Figure 17</ref>. Note that the main density of points near the center are found along a ridge near the xaxis, and another smaller ridge is along the y-axis. Changes in the tolerance window size and orientation will select a corresponding area of the histogram, allowing a direct interpretation of the tradeoff between the tolerance window and resulting simplification. The shape of the histogram can therefore serve as a guide in selecting the shape and size of the tolerance window for a simplification. <ref type="figure">Figure 17</ref>: Vertex cloud constructed from all of the walked edges of the draped automobile FEM mesh. For each edge, end points of the adjoining edges were placed in the view using the coordinate system shown in <ref type="figure">Figure 7</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>We have presented methods for draping geometric annotations onto the surface of objects to provide detail that does not suffer a loss of quality over a range of magnifications. We provided algorithms for draping the annotation and then simplifying the result with a directed, asymmetric tolerance window. Results from several application domains show high fidelity reproduction of the original annotation despite significant simplification. The technique works well in conjunction with surface simplification to reduce the complexity of the rendered geometry, especially when combined with a low-resolution texture map to convey qualities of the underlying surface.       <ref type="figure">Figure 17</ref>. The vertices that fall outside the tolerance window are ruled out for simplification. This provides a view of the trade-off between the tolerance window size and the resulting simplification for a particular model.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Close-up of the example shown in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Vertices projecting onto the surface based on normals.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Cutting plane determined by the two projected vertices and the midpoint of the original edge. The intersection of the plane with the surface defines the path of the draped edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Result after walking the edges along the cutting plane to find all intersections of the plane with surface triangle vertices and edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6</head><label>6</label><figDesc>illustrates a completed walk from P to Q which, in this case, consists of six new edges along the surface geometry.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 9 :</head><label>9</label><figDesc>Final result of a draped and simplified edge. Some penetration of the surface may occur, as determined by E y , the y-dimension of the tolerance window. Rendering techniques will show the edge unbroken if the penetration is not too deep.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 11 :</head><label>11</label><figDesc>Dependency of simplification results on vertical tolerance.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 12 :</head><label>12</label><figDesc>Interior view of the automobile showing the original surface triangles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 13 :</head><label>13</label><figDesc>View of the original FEM edges on the original surface. stars at vertices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 14 :</head><label>14</label><figDesc>Interior view of the automobile showing the simplified surface triangles. Note the significant reduction in the number of triangles and the corresponding change in the surface morphology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 15 :</head><label>15</label><figDesc>Draped and simplified edges on the simplified surface of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 18 :</head><label>18</label><figDesc>View of the original automobile geometry with analysis results shown as a one-dimensional texture map. The original FEM mesh is shown on the surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 19 :</head><label>19</label><figDesc>Close-up of the windshield area of the original automobile model. Edges are colored so that no two edges of the same color are connected.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 20 :</head><label>20</label><figDesc>Handwriting draped onto a simplified sphere with lowresolution texture map of a baseball applied.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 21 :</head><label>21</label><figDesc>View of the simplified geometry and data with draped and simplified FEM mesh. Note the similarity of the FEM mesh and the analysis results.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 22 :</head><label>22</label><figDesc>Same view asFigure 19, but showing simplified geometry and edges. Note the long edges of one color indicating the simplification of many edges into one. Also note lines of the same color crossing each other, indicating the removal of the vertex at the crossing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 23 :</head><label>23</label><figDesc>View of the tolerance window used for the automobile model superimposed on a rubber-sheeted histogram of the points in the vertex cloud of</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">£ Here we use the term vertex star to refer to the set of all edges that contain a vertex.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We would like to thank Paul Borrel for useful discussions and Lloyd Treinish for helping with the geographic data, obtained from World Data Center-A, National Geophysical Data Center. We would also like to thank Lauretta Jones for the calligraphy data.</p><p>IBM Visualization Data Explorer was used for most of the figures in this paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Efficiently approximating polygonal paths in three and higher dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Barequet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Daescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th Annu. ACM Sympos</title>
		<meeting>14th Annu. ACM Sympos</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="317" to="326" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Shortest paths on a polyhedron</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th Annu. ACM Sympos</title>
		<meeting>6th Annu. ACM Sympos</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="360" to="369" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A general method for preserving attribute values on simplified meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;98</title>
		<meeting>Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Algorithms for the reduction of the number of points required to represent a digitized line or its caricature</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Douglas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">K</forename><surname>Peucker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Canadian Cartographer</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="112" to="122" />
			<date type="published" when="1973-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Extraction of geographic features using multi-operators fusion. Image and Signal Processing for Remote Sensing IV</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dherete</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Desachy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="418" to="428" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On approximating polygonal curves in two and three dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Eu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">T</forename><surname>Toussaint</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CVGIP: Graph. Models Image Process</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="231" to="246" />
			<date type="published" when="1994-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &apos;97</title>
		<meeting>SIGGRAPH &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Surface simplification with variable tolerance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guéziec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd International Symposium on Medical Robotics and Computer Assisted Surgery</title>
		<meeting>2nd International Symposium on Medical Robotics and Computer Assisted Surgery</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="132" to="139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">High-quality polygon edging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Herrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Baldwin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wilcox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="68" to="74" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Computational-geometric methods for polygonal approximations of a curve</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Imai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Iri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Vision Graph. Image Process</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="31" to="41" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Approximating weighted shortest paths on polyhedral surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lanthier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maheshwari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-R</forename><surname>Sack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 13th Annu. ACM Sympos</title>
		<meeting>13th Annu. ACM Sympos</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="274" to="283" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Approximating shortest paths on a convex polytope in three dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Har-Peled</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">R</forename><surname>Varadarajan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 12th</title>
		<meeting>12th</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Annu. ACM Sympos. Comput. Geom</title>
		<imprint>
			<biblScope unit="page" from="329" to="338" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Programming with OpenGL: advanced techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mcreynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Blythe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Grantham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Course 17 notes at SIG-GRAPH &apos;98</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">OpenGL Architecture Review Board</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Neider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Woo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
	<note>OpenGL programming guide. 3rd edition</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Pyramidal parametrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIG-GRAPH &apos;83 Proceedings)</title>
		<imprint>
			<date type="published" when="1983-07" />
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
