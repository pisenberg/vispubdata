<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fishing for Information on the Internet*</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Mitchell</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Day</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lynette</forename><surname>Hirschman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Fishing for Information on the Internet*</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:42+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>As the Internet continues to grow, the amount of accessible information becomes increasingly vast. Search tools exist that allow users to find relevant information. However, a search can often produce such a large amount of data that it becomes hard to ferret out the most appropriate and highest quality information. In addition, some search tools lose valuable information when displaying the results to the user. This paper describes a search visualization tool, called FISH, for viewing hierarchically structured information and managing information overload. FlSH (Forager for the Information Super Highway) allows users to visualize the results of search requests across large document spaces in a way that preserves the structure of the information space. FISH displays the returned documents as rectangles, using a combination of order, indentation, size, and color to denote document hierarchy, the score of the documents with respect to the search, and other data attributes. In addition, the user can navigate through the document space for in-depth probing and refinement.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Background</head><p>One of the most significant developments in society today is the accessibility of information. The number of searchable databases continues to grow at an extraordinary rate. A side effect of this expansion is that it has become increasingly difficult to find relevant information. Once a set of information sources has been located, a data repository can easily contain such a large number of documents that the user's ability to identify the highest quality and most appropriate document is impaired. These effects are multiplied as the Internet continues to grow.</p><p>Search tools exist that can assist in reducing these effects. One popular tool which is available on the Internet is WAIS (Wide Area Information Server) [ 11. Based on the 239.50 protocol <ref type="bibr" target="#b1">[2]</ref>, WAIS allows users to access document collections across the network by forming a single query, generally as a Boolean combination of keywords. The query string is then sent to each of the document collections via 239.50, and references to relevant documents are returned. WAIS also provides a simple document retrieval rating (WAIS score) calculated using metrics such as keyword frequencies and proximity of keyword hits to the beginning of the document. Current WAIS interfaces include one for TTY (waisq), one for the X window system (xwais), and one that is integrated as part of World Wide Web browsing clients.</p><p>While WAIS technology is effective in finding relevant documents, its presentation of the information provides little help beyond listing or accessing the documents. For example, in the standard Unix WAIS interface xwais <ref type="figure">(Figure l</ref>), a query is sent to three databases, and the resulting documents are displayed as a list sorted by the WAIS score. Due to the size of the screen, the user can only see the top 12 documents, while there were 40 documents found. In addition, the user is unable to see which data source contains which documents, and how the data sources compare to one another with respect to the number of hits and the total score for the hits in the datasource. Another problem arises when the user wishes to refine a query with additional search terms. The results of a query with the new search terms can not be integrated with the results of the previous search.</p><p>To overcome these limitations, we developed a system that focused on separating the visualization component from the underlying application or search engine. In doing so, we provided the ability to visualize alternate types of data, including WAIS sources and other hierarchical data structures. In addition, we increased the display options and allow the user to reconfigure the visualization of the data. Through the course of developing several applications, a core set of functionalities, called FISH, was created that allowed for more application and user flexibility. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1: XWAIS</head><p>The goal of FISH is to provide a means by which any number of attributes of a data record can be encoded by space, color, or order. This allows the user to alter the display so that the highest quality data, as determined by a set of significant data attributes, can be easily accessible. In addition, FISH is designed so that the visualization component needs little or no modification when porting to new applications.</p><p>To do this, we made use of Shneiderman's Treemap system <ref type="bibr" target="#b2">[3]</ref>. Treemap is designed to provide visualization and a means of exploring large hierarchies such as relational databases or file systems. It attempts to display as much information as possible by using all available screen space. It also allocates more screenspace to items that are more important.</p><p>FISH overcomes some of the limitations of the xwais interface. First, all of the hits from the query are displayed on the screen. This allows the user to quickly assess the quality and quantity of the documents. Secondly, the relationship between the documents and their sources is preserved in the display. The system allows for color variations of the documents so that higher rated documents are lighter in color, making them stand out more clearly to the user. In addition, queries to the data sources can be refined by searching new keywords, and viewing a combination of the results of the successive queries within FISH, rather than submitting a new query. Section 2 describes one application that was built using FISH. Section 3 describes the type of data used with FISH applications, the manner in which the data is displayed, and how the user can interact with the data. Finally, in Section 4, we discuss future considerations for this technology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Starfish</head><p>The application Starfish ( <ref type="figure" target="#fig_1">Figure 2</ref>) is driven by data generated from queries made to data repositories using WAIS. Successive queries to the sources return document references and the scores of the documents with respect to the search string. By building internal representations for both the data sources and the documents, the FISH visualization component can then show the combined results of an arbitrary number of queries. The server to document relationship is inherently hierarchical, albeit shallow, making this a good application for the FISH technology.</p><p>In this application, the user begins by selecting a set of WAIS sources to use. The user can then issue a query to the selected sources, which FISH processes as calls to WAIS sources. Each source returns a list of document references and their scores with respect to the query. Each source is displayed as a column in FISH. <ref type="figure" target="#fig_1">Figure 2</ref> shows one query against three sources. We can see that the promt source has the best overall score (i.e. takes up the most space). Once the results have been generated, a tree is built using records containing the name of the documents and their score. Successive queries can add new nodes to this tree, or simply add additional scores to previously found documents. Individual documents are available for viewing by spawning a Mosaic 1 client.</p><p>To date, our testing of this system has been limited to internal use within our department. During the next phase of our development, we plan to instrument FISH and deploy it to obtain feedback from real users.  The FISH technology represents hierarchical, non-cyclical data. When data is read into FISH, it is stored as a record. The records are then linked, based on a parent-child relationship, and together form a tree. If a record has children, then it is called an internal node, otherwise the record is label as a leaf node. For example, when visualizing WAIS databases, each data source (server) is viewed as the parent of all documents in that data source. Therefore, internal nodes are used for storing data sources. On the other hand, documents do not have chidren, and therefore are represented by leaf nodes. The data associated with a leaf node can differ from that of an internal node. For example, while a name is present for WAIS sources and documents, authors are generally associated with documents and not with WAIS sources. The application defines what constitutes the difference between a leaf node and an internal node. This is declared for each new application.</p><p>(attribute, mapping, encoding, propagation).</p><p>The first field is a specific data attribute, for instance the name of a document, the date a document was created, the size of a document, or a list of WAIS scores. The second field specifies whether the attribute affects the size, color, or order of the node. For example, we can declare three 4-tuples that determine the size of the node based on the score returned from WAIS, the color based on the date a document was created, and order of the nodes by the size of documents. The ability to arbitrarily assign how an attribute is displayed allows the application developer to give greater prominence to particular attributes, thus enhancing the user's ability to expose higher quality data. If an attribute is used to build the display of the node, then a mapping is generated between the attribute and a display encoding (see Section 3.2).* We define a spatial encoding value and a color encoding value for each node. The spatial color encoding value is used to determine the size of the node, and the color encoding value is used to define its color. The third field of the 4-tuple is used to encode the attribute. The value of an integral attribute itself can be used or a function can be defined that generates a number. For example, if the collection of WAIS scores from multiple queries is to be used to determine the size of a node, then the scores can be combined to produce a single number to be used for the spatial encoding value for the node. When the mapping of a attribute is ordering, then a comparison function is used to determine order. For example, if the user wanted to order the tree based on the author, then we would supply a comparison function that can determine alphabetical relationships. The fourth field defines how, if at all, the attribute is propagated through the tree. This allows for additional information to be added to internal nodes. In the WAIS exampIe, since only documents (leaf nodes) are given WAIS scores, the scores from the documents are propagated to server nodes (internal nodes) by adding the scores from all of the documents in the server. Therefore, the server no&amp; will contain a list of scores that represents the total score for all documents in that server for each keyword query. Alternatively, we could easily use a normalized or weighted summation scheme for propagating the scores to emphasize or exaggerate one query. Other attributes, such as date, can be propagated using a function such as min or max. If the attribute is not supplied by the data source for internal nodes, then it must be propagated if it is to be mapped to a display encoding. Currently, the developer of a FISH application must define the applicable set of 4-tuples.</p><p>An example of a set of 4-tuples for a leaf and an internal node is given in Example 1. For the leaf nodes, we define four 4-tuples. The first is the name of the node, and it is not propagated or used to affect the display of the node. The next 4-tuple is the list of WAIS scores (one per query). It is mapped to the spatial encoding value by adding the scores together. There is no propagation function since it is the responsibility of internal nodes to propagate the value through the tree. The next 4-tuple is document type. It is mapped to the color encoding attribute and the function getType returns a color value representing the type of document (e.g. textual, binary, etc.). The last It-tuple is date and is mapped to ordering. A comparison function for the encoding compares two dates and returns the most recent. The Internal node has the same set of 4-tuples, but also defines the propagation functions. For the list of WAIS scores, the internal node adds the scores of all its children. The document type attribute is not propagated and is not applicable to internal nodes. Lastly, the date attribute is propagated by choosing the most recent date from its children. We define four types of encodirig attributes that define how a data record is presented to the user. Order encoding defines how the nodes are arranged with respect to one another, query encoding identifies which records are visible, spatial encoding specifies how much space is devoted to the node, and color encoding assigns a color to the node. Each of these encodings are dynamically reconfigurable by the user. 3</p><p>Order Encoding. ,Once all of the records have been read in, and the data attributes have been propagated, the tree can then be ordered. Nodes are sorted only with respect to their siblings, so the hierarchy of the tree remains unaltered. Ordering is based on a comparison of the attribute that is mapped to order encoding (called the designated ordering attribute). The tl&amp;d field of the data attribute is the function that determines the order of records. For example, if the designated ordering attribute is the , 2 An attribute can be mapped any given time.</p><p>to more than one display encoding at 3 There must be at least one attribute mapped to each of the size, color, and oxI&amp; encodings.</p><p>title, the third field of the attribute may be a function that sorts the documents based on their titles.</p><p>Query Encoding. FISH also provides the ability to dynamically reconfigure the keyword searches. Query encoding defines how multiple queries are combined. For any given WAIS query, there is a related set of documents that have scores with respect to that query. Therefore, a given document set can contain documents that had scores on one or more queries. We define three methods of query encodings that describe which documents are visible: union, intersection, and refinement. The first method, union, allows any document that had a score on any query to be displayed. Intersection can be chosen to limit the documents displayed to those that had hits on all queries. The last method, refinement, displays only those documents that had hits on the query currently selected in the user interface.</p><p>Spatial Encoding. When the tree has been ordered and visibility determined, we then determine the amount of space that will be allocated to the rectangle and generate its coordinates. There are three methods by which space is assigned to the node's rectangle. The first is by assigning a fixed width and height to all leaf nodes, and then generating the surrounding dimensions for the internal nodes based on the number of descendants <ref type="figure" target="#fig_3">(Figure 3</ref>). After generating its dimensions, the top level node is placed at the coordinates (0,O). The ordered children of the top level node are placed horizontally spanning the width of the top level node. All subsequent children are nested vertically inside of its parent. This method of space allocation gives the user the ability to quickly access any document and gives a "bar chart" effect based on hits per source.</p><p>The second method of allocating space uses variable height to denote a relationship between a node and its parent. This is done by fixing the node's width, and generating the height of the node's rectangle based on its score relative to its parents.</p><p>The last method of allocating space is based on the "slice and dice" paradigm used in the Treemap system.4 The top level node is sliced vertically so that each child's width is proportionate to its parent. The proportion is defined as  Then, each of these nodes are diced horizontally and their children's height are determined by the proportion of their attribute to their parents. The second level children's widths are equivalent to their parents. This process is continued throughout the tree <ref type="figure" target="#fig_1">(Figure 2</ref>). Using this method of spatial encoding, the user can quickly identify which documents and document collections provide the most information with respect to the mapped attribute.</p><p>Color Encoding. Color is the last display encoding to be assigned.5 There are three methods by which color can be assigned: saturation variation, mixing, and multicolor. Saturation variation is ideal when the designated color attribute is easily divisible into separate regions, whereby each region is assigned a distinct saturation of a particular color (See color figure at end of proceedings). For example, dividing the WAIS score into five regions shaded light to dark, the user could easily distinguish between the quality of the document with respect to its WAIS score.</p><p>Another method is by mixing two colors to form a new color. This is based on the saturation encoding, but uses two different colors for two distinct attributes. One attribute is mapped. to a particular saturation of a primary color, and another attribute is mapped to a particular saturation of another primary color. The two primary colors are then combined while the third primary color stays constant. For example, the user could select the color blue to represent the score of one WAIS query and red to represent the score of another query. Therefore, the color light purple would represent a document that scored high on both queries. While this method is useful in distinguishing the related contributions of two attributes, it can sometimes be confusing, and can only be used to display two attributes.</p><p>The last color encoding scheme, multicolor, is used when the user wishes to distinguish between different categories or types of the designated color attribute. For example, if the designated color attribute is the type of document, then one color can be used for a binary file, one for text files, one for shell files and so on.</p><p>The spatial, color and query encodings are application independent and form the core functionality for the FISH technology. Because of the data abstractions used to develop these encodings, new FISH applications can be built on top of preexisting code. The mechanisms for order encodings are also included, but the developer must supply the actual comparison functions as part the data 4-tuples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Display / Interaction Parameters</head><p>A set of display and interaction parameters are defined that give the user additional parameters for controlling the display of the data hierarchy. Some of these parameters are application independent, and are included in the core functionality of a FISH application, while other parameters are defined by the needs of the application.</p><p>The first parameter determines what text, if any, is displayed inside of the rectangle representing a node. In most cases, this is simply the name attribute of the record.</p><p>Offset can be added around the edges of the rectangles so that internal nodes are visible. When the offset is set to zero, then the internal nodes are covered by the leaf nodes. When the offset is raised, then the internal nodes and their associated text is displayed. The offset can be changed in real time. The display size can also be altered dynamically by the user. When the spatial encoding is either "Width and Height" , or "Height", then the size of the top level node is altered. When the spatial encoding is Fixed Size, then the size of the leaf nodes is altered. A popup dialog is provided with sliders that allows the user to interactively change the offset, display width, and display height.</p><p>Mouse sensitivity is defined so that the user may select a node with the mouse. The node is highlighted with a white border. If an internal node has been selected, the user may "zoom in" on that node so that node then becomes the top level node of the display. Note that this does not alter the underlying data hierarchy, only the display hierarchy. Alternatively, the user may "zoom out" whenever the top level display node is not the root node in the data hierarchy.</p><p>Due to the slice and dice procedure of the Width and Height spatial encoding, the user may be unable to see the full text associated with documents that are aligned horizontally. We have added a feature that allows the user to flip the orientation, so that the top level node is sliced horizontally, instead of vertically. This causes every node to be aligned in the opposite direction, which usually results in the once obscured titles being visible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Future Directions</head><p>Our next step will be to instrument FISH and field it to several active communities of users. This will allow us to obtain feedback on the interface and its functionality, which is crucial for further development.</p><p>We are in the planning stages of developing a FISH client to use data from digital libraries and allow users to share their results from FISH with others through Collaborative Virtual Workspaces. This requires several extensions to the FISH technology. First, the ability to save the FISH state as well as load a previously saved state is needed. Since the data for FISH applications is already filebased, this task is straightforward. Secondly, while the user can click on a document and view its contents, drag and drop functionality is needed. This would allow the user to select a node in the display and drop its contents (i.e. the actual document) into a shared workspace. In addition, printing capabilities for printing the screen as well as the data hierarchy are planned.</p><p>In order to support non-programmers in applying this technology to their applications, we are considering support for the dynamic definition of the data 4-tuples as well as selection of the search engine. A generic FISH tool could then be developed and used for multiple applications. One difficulty is in allowing non-programmers to define the attribute encoding functions as part of the data 4-tuple. Visual programming techniques are being considered to overcome this limitation.</p><p>Another consideration is error recovery. In one application, we would occasionally receive incomplete data. Simple techniques were employed that could discard incomplete data, however better error recovery schemes are needed as well as the ability to allow for user intervention.</p><p>In addition to the existing FISH applications, we are investigating the use of FISH for Internet News administration, directory browsing, and indexing and searching classified advertisements.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>'</head><label></label><figDesc>Mosaic is copyrighted by The Board of Trustees of the University of Illinois</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2</head><label>2</label><figDesc>4-tuples is defined for both internal and leaf nodes:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>(</head><label></label><figDesc>Node's spatial encoding value / Parent's spatial encoding value ) * Parent's Height 4 The top level node size is defined at the user interface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Fixed Width and Height Spatial Encoding</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Proceedings of the Proceedings on Information Visualization (INFOVIS '95) 0-8186-7201-3/95 $10.00 © 1995 IEEE</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5">For efficiency, order, size, and color are assigned in one pass through the tree.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An Information System for Corporate Users: Wide Area Information Servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>K&amp;e</surname></persName>
		</author>
		<idno>TMC-199</idno>
	</analytic>
	<monogr>
		<title level="m">Thinking Machines</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
	<note type="report_type">Thinking Machines Technical Report</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">50-1988: Information Retrieval Service Definition and Protocol Specification for Library Application</title>
	</analytic>
	<monogr>
		<title level="j">P.O. Box</title>
		<imprint>
			<biblScope unit="volume">239</biblScope>
			<biblScope unit="issue">239</biblScope>
			<date type="published" when="1988" />
			<publisher>National Information Standards Organization</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Tree-Maps: A Space-Filling Approach to the Visualization of Hierarchical Information Structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visulaization 91 Conference Proceeding&apos;s</title>
		<meeting><address><addrLine>San Diego, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-10" />
			<biblScope unit="page" from="284" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Integrating Natural Language with Large Dataspace Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Smotroff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hirschman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture notes in Computer Science</title>
		<imprint>
			<biblScope unit="page" from="209" to="223" />
			<date type="published" when="1995" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
	<note>Bharqaua and Y. Yesha 4s. Advances in Digital Libraries</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
