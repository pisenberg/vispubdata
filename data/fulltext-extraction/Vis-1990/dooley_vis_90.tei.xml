<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Automatic Illustration of 3D Geometric Models: Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debra</forename><surname>Dooley</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<region>UT</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<region>UT</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Automatic Illustration of 3D Geometric Models: Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Computer-generated models are becoming increasingly complex in structure, and therefore more difficult to display within single concise images. To better convey to the viewer overall shape information about the model, the advantages of line drawings and shaded surface renderings need to be used cooperatively. A system based on the techniques of traditional illustrators is described for automatically generating illustrations of complex three dimensional models. The system relies upon a richer set of display primitives, which are also outlined. Algorithmic details for emphasizing significant model components are discussed, and some preliminary results are presented.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>As the geometry of computer-generated models becomes ever more complex, the problem of displaying the multiple model components within a single intelligible image becomes an important issue in the field of computer graphics. Due to advances in computer modeling tools, as well as image display software and hardware, more information can be incorporated into a single model and can be manipulated, stored, and displayed in a reasonable way. However, as the complexity of the model increases, the difficulty of communicating the information contained in the model becomes exceedingly problematic. Whether the model is mechanical, biological, or geographical, a need exists for a visualization tool that somehow communicates structure without overburdening the display with relatively insignificant details.</p><p>Today's image synthesis techniques provide users in the graphics community with an impressive array of possibilities for displaying shaded images of geometric models. Reflections between surfaces, as well as refraction through transparent objects, are made possible by methods such as ray tracing <ref type="bibr" target="#b13">[14]</ref> <ref type="bibr" target="#b7">[8]</ref>. The subleties of light and shadow are captured by radiosity techniques [2] <ref type="bibr" target="#b2">[3]</ref>, and a wide variety of surface qualities may be rendered with the use of texture mapping and bump mapping. As a result of these and other techniques, computer images have become increasingly realistic in appearance over the years.</p><p>Structure, however, has been left behind in the race to create more and more realistic images. While photo-realism is eye catching, it is not necessarily informative. One of the great potentials of computer graphics is to provide a vision of what we might not otherwise be able to see in a photograph or real life.</p><p>Interest in scientific visualization has heightened immensely in recent years due to both the increase in graphics capabilities and a simultaneous improvement in the technology used to generate or acquire great amounts of data.. A vast quantity of scientific data is ready to be presented in some visually helpful way. If computer graphics are to be used for displaying this data, the structure issue can no longer be bypassed. Visualization teams must be able to create images that provide an unambiguous, comprehensive view of the data to the scientist. To this end, photo-realism will in many cases have to be compromised in favor of more structural representations.</p><p>Traditional illustrators have a wealth of experience in this area that can be used for discovering practical approaches to visualization tasks [9][12] <ref type="bibr" target="#b12">[13]</ref>. For centuries, illustrators have been applying disciplined doses of creativity to the task of visual communication. In the course of accurately presenting the facts, some artistic liberties are necessarily taken by illustrators in order to avoid ambiguity, display items that might otherwise be obscured, and add emphasis to important elements .</p><p>To automate the illustration principles on a modern workstation, a new set of display primitives will be introduced specifically for illustration purposes. While current hardware primitives, such as lines and polygons, can be displayed in increasing numbers at great speeds, they are too limited in terms of assignable attributes. For instance, transparency, variable width, and special endpoint conditions are not typically among the features included in lines displayed by hardware. Even in software, the notion of emphasis of particular elements is lacking. Thus, new primitives, such as emphasls factors, endpoint conditions, surface patterns, and so forth, will have to be incorporated. This paper presents new techniques for automating the illustration of geometric models baaed on traditional hand illustration methods. Users are treated as clients, and are given CH2913-2/90/0000/0307/$01 .OO -1990 IEEE the opportunity to provide guidance to the system about the importance of each model component, and how items of a particular importance should be drawn. The goal is not only to allow users to see what they want to see in a model, but also how they want to see it. The illustration techniques combine new surface rendering methods combined with an expanded set of line primitives. Some early work in the automation of illustration can be found in <ref type="bibr">[l]</ref> and <ref type="bibr">[lo]</ref>. The algorithms that deal with lines were outlined in a companion paper [4] and will be reviewed here. The primary focus in this paper, however, will be on how surfaces are displayed and then composited with line illustrations.</p><p>Illustration Pipeline A diagram of the illustration pipeline is shown in <ref type="figure">Figure 1</ref>. The first step in the process is the creation of a geometric model, which will subsequently be used as the subject of the illustration. This model may be directly created within a geometric modeling system, or may originate from a process of filtering data and mapping it to geometric objects. (All of the models included in this paper were created with the Alpha-1 modelling system I.) Geometric definitions may optionally include boolean objects to cut away portions of the geometry. Once the geometric model is complete, a camera model is specified. The selected viewpoint then becomes fixed for all subsequent stages in the pipeline leading to a single frame of an illustration.</p><p>The next four modules in the pipeline represent the heart of the illustration system. Since lines * and surfaces each require special attention for the purpose of illustration, they are handled separately. Lines are passed through a hidden line detection routine. Meanwhile, surfaces are ray traced to gather visibility information including a list of hiding surfaces. The collected visibility data is then used to map the model geometry to drawable primitives. A line image and surface image result. These separate images are then composited together, thereby combining the merits of each within a single image. It is envisioned that the resulting image be supplied to a paint program for interactive placement of text labels in order to provide a finished illustration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Emphasis Factors</head><p>A basic rule of thumb in illustration is to emphasize the important elements of the subject matter. For this purpose, the concept of an emphasis factor is introduced. The user has a good idea of which parts of the model are of particular importance, and which play relatively minor roles. To keep track of these notions of relative significance, the user may attach an emphasis factor as an attribute to each component. These factors then become integral parts of the model to be used by the illustration system for determining how each part should be drawn. interactive tools, one each for lines and surfaces, allow the user to specify a set of illustration rules. There are an infinite number of possible combinations of hiding and hidden surfaces (e.g. a high emphasis surface hidden by two low emphasis surfaces), thus not all combinations can be directly specified by the rules set by the user. Rules governing these situations are inferred from the initial user specified collection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lines and Curves</head><p>In the context of raster computer graphics, drawing lines has generally meant selecting the set of pixels lying between two specified endpoints and filling them in. Recent advances have provided anti-aliasing in hardware, but the lines themselves remain essentially the same. In contrast, lines used in illustrations act as fundamental symbols for expressing the three dimensional shape of an object. The line's style and thickness, and the way in which the ends are rendered, all impart meaning to an illustration. To successfully communicate shape information, line segments must assume a fairly rich set of attributes, including color, transparency, style, and width. These attributes will often vary over the length of the line segment to better convey the three dimensionality of space curves or some other aspect of change.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Line Illustration Rules</head><p>The user is given a certain amount of control over how particular lines should appear in the line drawing. The attributes that are determined by the line illustration rules include:</p><formula xml:id="formula_0">0 Color 0 Width 0 Transparency 0 Style (solid, dashed, dotted, invisible)</formula><p>An interactive tool is provided to allow the user to set the rules for a limited set of lines. This limited set includes only lines that are visible, or hidden by a single low, medium, or high emphasis surface. All other cases, such as a line hidden by more than one surface, are inferred from this limited set of rules as described in Dooley and Cohen <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hidden C u r v e Detection</head><p>In the illustration pipeline, the first step in determining which illustration rules apply to a given curve segment involves gathering hiding information about each segment. The hidden curve detection routine [7] <ref type="bibr" target="#b4">[5]</ref> reads in a set of surfaces, extracts a corresponding set of defining curvea, and computes a complete set of hiding data for the curves. <ref type="figure" target="#fig_1">Figure 2</ref> shows the step-by-step process of mapping curves to displayable segments. The curves are first divided into four sets according to cume type (including boundary, silhouette, discontinuity, and isoprametric). Each curve is then intersected with all boundary and silhouette curves, resulting in a series of curve segments. A curve segment is defined as a portion of a curve in which all points are equally hidden (or visible).</p><p>A list of hiding surfaces is collected for each of these segments. If two curve segments were originally connecting portions of the same curve, the change in visibility from one to the next determines the endpoint state for the common endpoint of each. Endpoint states include FREE, LESS-HIDDEN, MORE-HIDDEN, and CONSTANT. Finally, the illustration rules set by the user are applied to each segment. The rules determine the color, initial width, style, and transparency of each segment, based on curve type, emphasis, and the emphasis of each hiding surfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Line Rendering</head><p>For rendering purposes, curve segments are each represented as a polyline, a connected series of edges. The attributes of each edge are inherited from the initial curve segments. The width at an edge endpoint, however, is increased or decreased based on the distance of the endpoint from the eye. As a result, the width becomes greater as the segment comes closer to the eye, and likewise becomes thinner further from the eye. Endpoint states are used to determine whether ends of curves will be drawn with a space at the end or will be drawn fully up to the curve's defined end position.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Surfaces</head><p>While line drawings are helpful in conveying the geometry of a subject, they do not divulge aspects of shape that become evident only through the way light is reflected from and between the surfaces. Surface qualities (such as color, transparency, and shininess), which help to impart additional meaning to different objects, are manifested only in surface models. Thus, a shaded counterpart to the line illustration helps to increase the overall effectiveness of final rendered illustrations.</p><p>The set of steps taken to map a group of surfaces to a shaded image is shown in <ref type="figure" target="#fig_3">Figure 3</ref>. A ray tracing paradigm was selected for the shading of surfaces, since this provides local rendering control on a per pixel basis. Each point in the image can be characterized by the surface that is visible at that point as well as by those surfaces that are hidden. By applying a "filter" to this notion, each point is also influenced by the local area around it. The surface illustration process described below makes use of information to accentuate important aspects of the model as defined by the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Surface Illustration Rules</head><p>As with lines, surface illustration rules are specified by the user and determine:</p><p>Attribute An interactive tool will allow the user to specify illustration rules for the surface rendering process. The intended design of the tool is pictured in <ref type="figure" target="#fig_5">Figure 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Modification of Coverage</head><p>To visualize important obscured surfaces, the coverage (or hiding ability) of less significant surfaces must be decreased. However, if a surface is simply made transparent, its actual color, opacity, and shape will not be properly communicated. Therefore, only the local areas of a surface that hide another important object are modified.</p><p>The term coverage is used to denote the ability of one surface to obscure what is behind it. Note the difference between coverage, which is used in an illustration to modulate the "X-ray vision" through surfaces, and transparency, which is an actual attribute of the model component.</p><p>A two-pass approach is taken to calculate the coverage for surfaces at a given pixel. During the first pass, rays are cast through the center of each pixel. For each ray, a list of ray-surface intersections is collected. Each of the intersected surfaces is given an initial coverage value (CVGO). This initial value is determined by applying the surface illustration rules for coverage, which are a function of both the surface's own attributes and those of the surfaces it hides.  where: n = number of surfaces hidden by the current surface.</p><p>The second pass then calculates a filtered coverage value, CVGl, for each surface by passing a filter over a neighborhood of the initial coverages. This provides a buffer of lowered coverage around the screen dimensions of a high emphasis object. This gradual change from one coverage to the next prevents the appearance of sudden discrete changes in surface quality which might convey discontinuities that are not part of the original model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Surface Patterning</head><p>When it comes time to map the final coverages to actual pixel values, a number of options are available. If coverage is simply equated to transparency, then the desired effect of high emphasis objects being visible through low emphasis objects is achieved. However, this approach often results in an ambiguous image in that the relative depth of model components is not communicated. A better solution is to modify the surface by blending the coverage of the surface  with a screen space based pattern. This automatically pro duces a Uhatchedn appearance that allows surfaces to show through but reminds the user which surface lies in front of another. This is not unlike the qualities that are sought in volume visualization algorithms to convey inner structure without losing the context in which the structure lies [S] <ref type="bibr">[ll]</ref>.</p><p>A screen space based pattern mapping was chosen for two reasons. First, parameters that follow object contours may not be readily available for referencing pattern value locations. Secondly, in a sequence of images in which the viewpoint changes, a screen based pattern maintains the illusion of the "X-ray vision" paradigm as opposed to a modification of material property.</p><p>A surface pattern is simply an N x N grid of coverage values.</p><p>This pattern is repeated across the illustration. Thus, at a given pixel position, (z,y), the pattern value is simply:</p><formula xml:id="formula_1">P = patterngrid[(z mod N)[(y mod N ) ] (2)</formula><p>The final coverage for the surface at that pixel is then a blend of the filtered coverage with the pattern value:</p><formula xml:id="formula_2">CVG, = P + (1 -P ) x CVGl</formula><p>(3) <ref type="figure" target="#fig_6">Figure 5</ref> shows some examples of surface coverage modification and patterning for a model including two cylinders and a hidden sphere. In the traditional ray traced version of the image ( <ref type="figure">Figure Sa)</ref>, the sphere is not visible at all. A viewer would not have any way of knowing that the sphere exists. <ref type="figure" target="#fig_6">Figure 5b</ref> shows the same model using box filtered coverage modification. In this case, the sphere is clearly visible; the viewer is not being denied any information. However, the order in which the three objects hide each other is somewhat confusing to perceive. This ambiguity is lessened in <ref type="figure" target="#fig_6">Figure  5c</ref>, which incorporates a hatched pattern into the reduced coverage a r e a of the two cylinders.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Auto-Spotlighting</head><p>The positioning of light sources has a great influence on the final illustration. Many systems provide varying levels of sophistication for locating and pointing lights. In the context of an illustration, however, there is information that can guide the automatic placement of lights based on the emphasis factors that the user provides. Rather than forcing the user to recalculate the light positions each time the component of interest changes in an illustration, the spotlight parameters are automatically derived from the model and its attributes.</p><p>Spotlights are constructed as parallel beams with intensity that falls off from the center to the edges. A default directionality places the beam over the shoulder of the viewpoint. Light vectors are automatically constructed from the centers of high emph2is objects in this direction. The width of the beam is derived from the diameter of a bounding sphere around the high emphasis object (see <ref type="figure">Figure 6 )</ref> . <ref type="figure" target="#fig_6">Figure 5d</ref> shows the previously pictured objects with a spotlight automatically centered on the sphere.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>Initial results from the illustration system defined above have been very encouraging. The use of both lines and surface shading has proven very useful in quickly communicating shape. The last four images in the color plates show a portion of an automobile engine consisting of a crankshaft and parts of four connecting rods. The first of these four shows a standard ray traced shaded model. The next shows the results of surface shading using the visualization system. The use of the patterning for lower emphasis surfaces is evident. The final two images show composites with both line and surface shading. The only modification that was made by the user was a change in emphasis between different parts of the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion</head><p>This paper has presented an initial implementation of techniques for automating the illustration of complex geometric models. Emphasis factors were integrated directly within the model description to be used by the illustration system. A new set of graphics primitives for line drawing and surface shading were used to generate final images that are composites of both line and surface renderings.</p><p>One can easily extrapolate these techniques to a wide variety of domain applications within the scope of scientific visualization and geometric modeling. For example, multiple renderings for the investigation of a complex molecular struc- There are a great number of areas for future work. The use of color has the potential to increase the power of the illustration paradigm but has not yet been dealt with in an integrated way. The current implement ation leaves this aspect to the user. There is also a need for further expansion and experimentation with other line and surface types. For example. "sketchy" lines and "painterly" surface qualities can also add meaning to an illustration.</p><p>The illustration system that has been presented should provide a framework for the incorporation of ideas and techniques for illustration that have previously been left up to hand illustration or "paint" systems. The primary motivating force for the work presented here was to widen the capabilities for communzcatzon of complex phenomena with the computer. We hope the methods outlined above will help in this endeavor.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>'</head><label></label><figDesc>Alpha1 is an experimental spline-based modelling system under development at the University of Utah.2The term line is used by the authors interchangably with curve. In either case, the term applies to a continuous set of points that define the edge or boundary of an object. component of the model is rendered according to a set of user defined illustration rules. These rules control the way in which objects of a particular emphasis and visibility are rendered and how they effect the rendering of other objects.Examples of illustration rules might be: should not cast shadows on any high emphasis surface.High emphasis surfaces should be visible through low emphasis surfaces.Medium emphasis surfaces should be diffusely shaded.Hidden lines on high emphasis objects should be drawn as dotted lines.Hidden portions of low emphasis objects should be invisible.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Curve Illustration Pipeline</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>The resulting illustration primitives are placed in an image buffer by a scanline renderer. The first image in the color plates shows a sample result of the line illustration process. A typical wireline image of the same model is also shown as a basis for comparison.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Surface Illustration Pipeline CVGo = n get-coverage-rule(currsur f -emphasis, emphasis;) i=O</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>J</head><label></label><figDesc>Overall I m a g e ---</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Surface Illustration Rule Specification</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Surface Illustration ivith High Emphasis Hidden Object ture can be directly driven from a single model by varying the emphasis factors of different components of the molecule Less important portions of the model will still be rendered to provide a context without obscuring the emphasized regions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>I Curves + Group Curves Boundary, lsoparametric, Silhouette, Discontinuity Curves Split Curves I\ Curve Segments Test Visibility Curve Segments, Hiding Info Calc. Endpoint States Curve Segments, Hiding Info. Endpoint States Apply Rules 1 Drawable Primitives Render Line Image</head><label></label><figDesc></figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors would like to thank Professor Elaine Cohen and Gershon Elber for many suggestions during the implementation and writing of this paper. Credit is also due to Professor Jamie Painter and to Rod G. Bogart for providing constructive criticism and helpful suggestions during the course of the research. The crankshaft model was created on Alpha1 by Don Dovey. This work was supported in part by DARPA (N00014-88-K-0689) and in part by Apple Computer Corporation. All opinions, findings, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views of the sponsoring agencies.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The Notion of Quantitative Invisibility and the Machine Rendering of Solids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Appel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM National Conference</title>
		<meeting>ACM National Conference</meeting>
		<imprint>
			<date type="published" when="1967" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Radiosity Solution for Complex Environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">P</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SZGGRAPH&apos;85</title>
		<meeting>SZGGRAPH&apos;85</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1985-07" />
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="31" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Shenchang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">R</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">P</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Greenberg</surname></persName>
		</author>
		<title level="m">A Progressive Refinement ings of SIGGRAPH&apos;88</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1988-08" />
			<biblScope unit="page" from="75" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Automatic Illustration of Three Dimensional Models: Lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debra</forename><forename type="middle">L</forename><surname>Dooley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Computer Graphics (Proceedings of 1990 Symposium on Interactive 9D Graphics)</title>
		<imprint>
			<date type="published" when="1990-03" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="77" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Hidden Curve Removal for Freeform surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gershon</forename><surname>Elber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elaine</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SZGGRAPH &apos;90</title>
		<meeting>SZGGRAPH &apos;90</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interactive Visualization of 3D Medical Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><forename type="middle">M</forename><surname>Pizer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ZEEE Computer</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Application of a Hidden Line Algorithm to Surface Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vanessa</forename><surname>Fuson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
		</imprint>
		<respStmt>
			<orgName>University of Utah</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master&apos;s Thesis</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">S</forename><surname>Glassner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ray</forename><surname>Tracing</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Guild Handbook of Scientific ZZlustmtion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elaine</forename><forename type="middle">R S</forename><surname>Hodges</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Van Nostrand Reinhold</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An Enhanced Treatment of Hidden Lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kawai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="308" to="323" />
			<date type="published" when="1987-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Hybrid Ray Tracer for Rendering Polygon and Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ZEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Using Technical Art: An Industry Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">A</forename><surname>Magnan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1970" />
			<publisher>John Wiley and Sons, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Technical nlustration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Thomas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1968" />
			<publisher>McGraw Hill Inc</publisher>
		</imprint>
	</monogr>
	<note>2nd Ed</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An Improved Illumination Model for Shaded Display</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Whitted</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="343" to="349" />
			<date type="published" when="1980-06" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
