<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Interactive Visualization of Quaternion Julia Sets</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">C</forename><surname>Hart</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Electronic Visualization Laboratory</orgName>
								<orgName type="institution">University of Illinois at Chicago</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Louis</forename><forename type="middle">H</forename><surname>Kauffman</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Electronic Visualization Laboratory</orgName>
								<orgName type="institution">University of Illinois at Chicago</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">J</forename><surname>Sandin</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Electronic Visualization Laboratory</orgName>
								<orgName type="institution">University of Illinois at Chicago</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Interactive Visualization of Quaternion Julia Sets</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>The first half of a twestep quaternion Julia set visualization system is described. This step uses a quaternion square root function to adapt the classic inverse iteration algorithm to the quaternions. The augmented version produces a 3-D Julia set defined by a point cloud that can be interactively manipulated on a graphics workstation. Several cues are assigned to the point cloud to increase depth perception. Finally, a short theorem is proven that extends the domain of the inverse iteration method to a rotational family of quadratic quaternion Julia sets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The first step of a twepart quaternion Julia set visualization process is presented. This step produces a point cloud defining the quaternion Julia set that can be manipulated in interactive time. The parameters investigated by this step are passed along to a parallel ray-tracing algorithm <ref type="bibr">[3]</ref>, the second step, that produces presentation quality renderings of quaternion Julia sets. Areas of interest in the ray-traced images can then be further explored by using the interactive step to provide the viewing parameter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Approaching Fractals</head><p>With the introduction of fractal geometry, mathematics has presented some interesting but difficult objects to computer graphics. These objects are functional-based but the function is often expensive, requiring many computations per point. This expense has impeded the visualization of these objects until now, as a different approach to fractals makes them as easy to visualize as any other data.</p><p>The field of computer graphics has claksically dealt with continuous piecewise smooth euclidean shapes.</p><p>These shapes have properties that can be taken advantage of when rendering. One example is the property that the perspective projection of a 3-D polygon is, at worst, a 2-D polygon. Fractals are difficult objects to display when euclidean objects are expected.</p><p>On the other hand, non-euclidean mathematical objects often have an assortment of other properties that may be taken advantage of for more efficient visualization. For example, the inverse iteration algorithm uses the properties of attractivity and symmetry to efficiently generate a fractal shape called a Julia set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">History</head><p>The inverse iteration algorithm for Julia set,s in the complex plane, hereby denoted 43, first appeared in <ref type="bibr">[6]</ref>. The algorithm was used by Alan Norton to illustrate fractal shapes in <ref type="bibr">[6]</ref> and <ref type="bibr">[7]</ref>.</p><p>Norton later discovered that Julia sets had interesting extensions in the quaternions. He first visualized these shapes using a boundary tracking method <ref type="bibr">[8]</ref>.</p><p>This method produced striking renderings of neverbefore-seen shapes but required a large amount of time and memory to operate.</p><p>At the same time, John Holbrook developed the first quaternion inverse iteration algorithm. He generated sparse point cloud representations of quaternion Julia sets. In fact, so sparse he called them "starfields" [4, 51. Dissatisfied, he computed the quaternion Julia sets by sampling every point in a 3-D grid and then rendered the resulting binary voxel array.</p><p>Later, a ray-tracing algorithm was developed that produced high quality images of these sets at various levels of detail <ref type="bibr">[3]</ref>. Unfortunately, like most raytracing algorithms, this method was computationally expensive and not always the most appropriate method for scientific investigation.</p><p>The inverse iteration algorithm has now been fully developed for a rotational family of quadratic quaternion Julia sets. It requires nominal space and runs in a few seconds on an average graphics workstation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Quaternion Julia Sets</head><p>There is still a lot to be discovered about Julia sets in the quaternions. Currently, most of the investigations deal with the quadratic forms. Even though the book is nearly closed on quadratic dynamics in 43, there is still much to be learned about their quaternion counterparts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Dynamics and Julia Sets</head><p>The dynamics of a function are found by repeated application of a function to an initial starting value.</p><p>For example, let f be a function and 20 be an initial value. Then the orbit of zo is z 1 , z 2 , . . . , z, defined by One very popular function is the quadratic where z is the iterated variable and c is a fixed p a rameter.</p><p>The set K , called the filled-in Julia set of polynomial function f, contains all the initial points 20 whose orbits under f remain bounded. The Julia set o f f , denoted J , is the boundary of IC. In <ref type="figure" target="#fig_0">Figure 1,</ref> the Julia set is the black boundary of the four-colored filled-in Julia set. Here, as with most Julia sets of Eq. ( l ) , the boundary, J , is fractal [6].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The Quaternions</head><p>The quaternions were introduced by Hamilton in the mid-19th century as a method of performing 3-D multiplication <ref type="bibr">[l]</ref>. As the name suggests, the addition of a fourth dimension was necessary for Hamilton to get the multiplication properties he desired.</p><p>A quaternion value z = a + pi + y j + 6k is a fourtuple of independent real values (a, p,7,6) assigned  What is perhaps unexpected is that when Eq. (6) is iterated in H, completely different shapes occur for the same c but different 8. These shapes all share the same intersection with C (except for a rotation) but the topology of their extensions in H change dramati c ally.</p><p>The quaternion Julia set in <ref type="figure">Figure 5</ref> is an extension to the one in <ref type="figure" target="#fig_0">Figure 1</ref> but Eq. (6) is used with 0 = 90'. This causes the i, j plane to intersect the complex Julia set at its thinnest section and provides perhaps the most characteristic quaternion extension of the complex Julia set.</p><p>A closer inspection of Eq. (6) reveals that commutivity was expected. For use in H, it should have been derived This lack of commutivity is why the two parameter function Eq. (6) produces the entire family of quaternion Julia sets for any quadratic functions parameterized by a single complex constant. For example, the complex Julia set of</p><formula xml:id="formula_0">f ( z ) = Xz(1 -%)<label>(8)</label></formula><p>for a given parameter X produces the same shape as the complex Julia set of Eq. (1) given the right parameter c â‚¬ C . But their counterparts in H are quite different. Both quaternion Julia sets can be produced by Eq. (6) given the parameter c from Eq. (1) and the proper rotation 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Useful Properties</head><p>Sever a1 properties of quat ernion J ulia sets have been discovered. The properties that follow were essential for the development of the efficient visualization method using the inverse iteration algorithm. However, knowledge of their details and proofs are not necessary to implement the algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Strange Attractors</head><p>The Julia set is repulsive with respect to f which farther away from it. Conversely, the Julia set is attractive with respect to the inverse</p><formula xml:id="formula_1">f-1(%) = Jz-c<label>(9)</label></formula><p>because the orbits under f of points far away from J come closer to it <ref type="bibr">[lo]</ref>. This means that Julia sets are a specific form of strange attractor. These shapes commonly rise from physical differential equations such as the popular Lorenze attractor. Each evaluation of Eq. (9) will have some error in its result. This is often a problem in dynamical systems since a small error can become quite large after many iterations of a function (a property called the Butterfly Effect). This will not a problem here because the strong attraction to J is such that any error produced by Eq. <ref type="formula" target="#formula_1">9</ref>is reduced by the next application o f f .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Collapsing Two-Spheres</head><p>In R as well as C, squaring is a two-to-one mapping everywhere but the origin. This is not so in H, as suggested by Eq. (2). Here the squaring mapping is capable of mapping an infinite number of values to a single point.</p><p>Let</p><formula xml:id="formula_2">S2 = { z : z E H, J z I = l,Re(z) = 0)<label>(10)</label></formula><p>be a unit two-sphere of totally imaginary points. Then</p><formula xml:id="formula_3">: s2 H -1.<label>(11)</label></formula><p>In general, any such sphere of radius p E R+ (the positive real axis), when squared, "collapses" to a single point in R-(the negative real axis), specifically -%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.3">j, k Equivalence</head><p>This property is less than obvious and so is presented in the form of a theorem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 1 The dynamics of the function</head><p>for c E 43 is independent of the angle 4 in Hence the 4-0 Julia set is obtained as a set of revomeans that the orbits of points near the set move lution about 43 of the 3-D Julia set.</p><p>A simple algebraic proof may be found in Appendix B. The hypothesis of this theorem requires that c E 43. This causes no loss of generality on c since a theorem in <ref type="bibr">[2]</ref> shows that the dynamics of Eq. <ref type="formula">1</ref>for c E H are the same as with c E C except for a rotation about the real axis.</p><p>The consequences of Theorem 1 are that the dynamics under Eq. (1) are the same in 3-D as they are in 4-D. Thus, when necessary, a 3-D quaternion value suffices for computation. This also means that if z E J then its reflection with respect to C, algebraically z -2Imj.2, is also in J .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Visualization Algorithms</head><p>Visualization algorithms for fractals most always involve two phases: A generation phase that involves some form of production or detection of the fractal object and a surface normal determination phase that deals with the problem of assigning a surface normal to a point on a non-differentiable surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Point Cloud Generation</head><p>The algorithm presented by this paper is an extension of the classical inverse iteration algorithm to handle quaternion values. This involves more than just changing the square root function. Several other properties of H can be used to make the algorithm run more efficiently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Classical Inverse Iteration</head><p>Inverse iteration was first used to produce Julia sets by <ref type="bibr">Mandelbrot [6]</ref>. It was later developed by Peitgen and Richter <ref type="bibr">[lo]</ref> and then Peitgen and Saupe [Ill where several properties of Julia sets were taken advantage of to make it run more efficiently.</p><p>The basic inverse iteration algorithm, <ref type="figure">Figure 2</ref>, utilizes the attractivity of the Julia set under the inverse equation.</p><p>The parameter N , the number of points generated, should be set so that enough points are plotted to reasonably define the set but still run in a decent amount of time.</p><p>If the initial point is chosen at random then several iterations of the inverse function will bring the point very close to the set. The value M may be set to zero if zo is chosen sufficiently close to J .</p><p>This algorithm is capable of generating complex Julia sets in real time. In fact, using lookup tables, 1. Select an arbitrary initial point ZO.  classical inverse iteration algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">F o r i</head><formula xml:id="formula_4">E { l , 2 , 3 , . . . , N }</formula><p>we have created a real time complex Julia set exploration game called "Complex Shapes From Simple Rules" that runs on a PC. It is part of the Interactive Image, an installation of educational games that teach various computer graphics concepts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Quaternion Inverse Iteration</head><p>The quaternion inverse iteration algorithm, <ref type="figure" target="#fig_4">Figure 3</ref>, utilizes the collapsing twGsphere property to provide initial values that give a more even distribution of points across the quaternion Julia set.</p><p>The property of collapsing two-spheres is used to define the initial values of the backward orbits. Since the only way to forward iterate from H into C is to hit a totally imaginary two-sphere, this is tmhe best place to start to get a quaternion backward orbit.</p><p>Since the initial values of the process are taken from a circle, this algorithm can be thought of as inverse iteration of loops. These loops, however, become quite convoluted in the deeper branches of the inverse iteration tree.</p><p>The square root returns at least two values, a positive and a negative, so both are plotted. Theorem 1 allows us to reflect each point across 63. These two symmetries allow each point to be plotted as four in the resulting point cloud. The production of four points from each iteration reduces the number of quaternion square root calls, which are quite expensive.</p><p>The enhancements made to classical inverse iteration [lo, 111 have been investigated and were found to be less than fruitful. Some forms of "tree pruning" have had a slight effect on the distribution of points in the quaternions but overall the enhancements to classical inverse iteration do not improve the quaternion version.</p><p>One more improvement that keeps the values in H</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Compute</head><formula xml:id="formula_5">p = min{y : yi 4 K } (14) Y &gt; O</formula><p>by extending a ray from the origin up the i axis to find the least positive i value not in the filled-in Julia set. </p><formula xml:id="formula_6">s1 = { z : Iz( = J-,~e(z) = Imk(z) = 0} ii. Plot z i , -2,.</formula><p>iii. Plot the reflections z, -2Imj(z,) and -2, + 2Imj(zi).</p><p>(b) . . . End of "for."</p><p>3. End of "for each." is to start over from zo when z; E C. Once a point is in C, application of f-' keeps it there until it hits R-. Waiting for that event may take a considerable amount of time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Inverse Iteration of Rotated Quaternion Julia Sets</head><p>When Eq. (9) is applied to a point with zero k component, then the result also has zero k component. This is not true for the inverse of Eq. (6). This means that the inverse iteration method only applies to the Julia sets of Eq. (6) when O,= 0. Here Theorem 1 comes to the rescue, showing how any point in J with non-zero k component can be converted into a point in J with zero k component.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>This is done simply by setting</head><formula xml:id="formula_7">z = Re(z) + Im,(z)i + .\/Imj(z)2 + Imk(z)2 j (17)</formula><p>for any z E J .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Point Cloud Display</head><p>A simple orthogonal projection can be obtained by displaying h ( z ) horizontally and Im;</p><p>(2) vertically.</p><p>One small 3-D cue is given in that sparse areas of the projection are surfaces with a large dot product with respect to the viewing vector while the denser areas show smaller dot products. This simulates a light source at the eye position and is a nice way to display the shapes when a single-bit black and white display is used.</p><p>A more sophisticated workstation allows a perspective projection along with animation which gives a much better sense of the depth of the point cloud. Perspective along with other dynamic transformations show closer points moving faster than farther points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Stereo</head><p>Stereo can be integrated into the orthogonal projection easily by the following formula This is computed for positive x axis pointing to the viewer's right and positive z axis pointing away from the viewer. The viewer can percieve a true 3-D image without any special equipment by crossing his/her eyes until the left and right images fuse into one. Focusing may take a moment; sometimes squinting helps.</p><p>Some people that have difficulty crossing their eyes may find it helpful to place a finger between the two images. Then focus on the finger while drawing it closer to the face until the left and right images merge.</p><p>The quaternion Julia set in <ref type="figure">Figure 4</ref> is displayed as a stereo pair. It was computed on a laptop PC compatible in less than a minute.</p><p>The factor 0.12 is the disparity and can be adjusted to change the depth of the stereo image. These equations force the center of focus of the stereo projection to be at the z = 0 plane so half of the points will be in front of the screen and the other half will be behind.</p><p>A more correct stereo display involves two perspective transformations performed after a translation to the left and right by some disparity factor. Although rotation can produce a stereo effect, it is not valid stereopsis whereas off-axis perspective p r s jections are.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Depthcueing</head><p>Another simple 3-D cue is obtained by depthcueing. This is a technique where the color of an object fades for points farther away as if viewing the point cloud through a fog.</p><p>An alternative but similar cue is to use a modulo color scheme based on a coordinate. For example, if valid color indices range from 0 to 255 inclusively, then the function</p><formula xml:id="formula_9">C(z) = [256(Re(z) mod l)J (18)</formula><p>will assign colors that vary across the point cloud in the direction of the real axis. Computationally, some modulo functions return unexpected values for negative values. In such a case, adding 10 to z does not change its modulo with respect to 1 and insures the points to be positive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Computation of Surface Normals</head><p>A forward iterative method for computing the surface normal of a point on the quaternion Julia set exists [3] but it is computationally expensive. The technique is to define some scalar field that is zero at I&lt; and diverges as it approches infinity. Two continuos fields that work well are the potential and the estimated distance. The surface normal is then computed as the gradient of this field at any given point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Rendering</head><p>This method can produce renderable point clouds and an easy method exists for rendering them <ref type="bibr">[2]</ref>. During inverse iteration, a z-buffer is maintained and each resulting point is added to the z-buffer. After all the points have been produced the visible points in the z-buffer are rendered by computing their surface normals and lighting them according to the Lambertian lighting model.</p><p>The surface normal of a z-buffered point may be found by forming two other vectors <ref type="bibr">[8]</ref>. Let</p><formula xml:id="formula_10">x' = ( 1 , 0 , z ( x + 1,Y)), ? = ( O , l , z ( x , y + l ) )</formula><p>where z is the z-buffer indexed by x and y. surface normal may then be computed as The If a shadow buffer is maintained by projecting each point with respect to each light source and adding them to a separate z-buffer dedicated to each light source, then the object can be rendered with shadows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>The inverse iteration algorithm is much simpler and faster than the other quaternion Julia set visualization algorithms. It also does not require an expensive frame buffer. We expect that these factors will make the algorithm very popular to those wanting to investgate these objects but without the resources available to a research mathematician.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Comparisons</head><p>The inverse iteration method runs in object-time but takes image-space. This requires much less memory <ref type="figure">Figure 4</ref>: A disconnected quaternion Julia set of f ( z ) = z2 + 1.2i generated by inverse iteration on a laptop PC compatible and displayed as a stereo pair. than does Norton's boundary tracking method and significantly less memory than Holbrook's exhaustive method. The ray-tracing method not only runs in image-space but in image-time as well.</p><p>Inverse iteration is the best method for quickly visualizing the global shape of the Julia set whereas ray tracing is the best method for investigating the finer details of the set. Boundary tracking also provides a global view that is significantly better than inverse iteration but at the expense of much more time and memory.</p><p>The boundary tracking method is the most efficienct algorithm when a single Julia set is to be animated. The inverse iteration method is more efficient at animating Julia sets undergoing changes due to varying a parameter but the ray-tracing method is the most efficient algorithm for this type of animation when a well-defined image is desired.</p><p>The inverse iteration method is by far the best way to visualize disconnected Julia sets in C or H. The disconnected Julia set in <ref type="figure">Figure 4</ref> is impossible to produce by boundary tracking and would be quite difficult to accurately display using the ray tracing method. and white as stereo pairs. The stereo images would generate visually and one could watch as the inverse iteration fills in the quaternion Julia set.</p><p>Our current version runs on a Personal Iris 4D/20 which allows interactive positioning of the point cloud and almost interactive parameter changes. The user is allowed to rotate and translate the point cloud to provide the most informative viewing angle. Currently, 12,000 points take less than one second to generate. The display is real-time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Acknowledgements</head><p>Special thanks are due to Alan Norton for his extensive communication with this group. Thanks also to John Holbrook for his communication.</p><p>Steven Lecompte did the initial programming for this project when it first started in 1987. Thanks are also due to Sumit Das for his help on the user interface.</p><p>The research for this project was performed at the Electronic Visualization Laboratoy under the codirection of Thomas A. DeFanti and Daniel J . Sandin with Maxine D. Brown (Assistant Director) and Irving Moy (Systems Specialist).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Implement at ions</head><p>This method was originally implemented on a laptop where the sets were displayed in single-bit black</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Derivation of the Quaternion Square Root</head><p>-, form a+bu where a, b E R and U = uli+u2j+u3k and IuI = 1. It then follows directly from the algebraic structure of H that u2 = -1. Thus, in and of itself each quaternion belongs to a complex plane in fourspace that is determined by the real axis and the direction of the unit vector U in the complementary three-space.</p><p>For H, the consequence of the preceding remark is that a power mapping such as Eq. (1) can be computed entirely via the complex numbers formalism of u2 = -1. By the same token, the core of t,he formula for the inverse of this power mapping is a square root mapping, and this can be expressed in a form identical to the formula for the square root in complex numbers as shown above.  <ref type="figure" target="#fig_0">= (u1, u2, .</ref> . . , U N ) , then a+bu is identical with the point <ref type="figure" target="#fig_0">( a , bu1, bu2, bug,.</ref> . <ref type="bibr">. , b u N )</ref> in ( N + 1)-space. Define formally, the product U' = -1 (for U of unit length), and define ( a + bu)"the nth power mapping in Euclidean N + 1 space exactly as though a + bu were a complex number.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . l Power Mapping in Any Dimension</head><p>Note that we do not define the products (uv) where U and v ae linearly independent directions in N-space. There are many choices for such products, but only in C and H do such products enjoy an associative algebraic structure that is analogous to that of ordinary arithmetic .</p><p>If N = 2, then we obtain a representation of R3</p><p>(Euclidean three-space) as the set of points of the form a + bu where a and b are real, and U is a unit direction in the Euclidean plane. Thus U is specified by an angle 6 . The core of the simplest computation of three dimensional Julia sets is the function for the square root Recall that the simple formula for the square root of Of a point in three space with respect to this second order power mapping. Let this point be specified by a + bu(6) where a and b are real, and u(6) denotes a complex number is given by the point (cos 6 , sin 6 ) in the plane. This formula is derived directly from our geometric considerations, and it can be used to program in parameterized by three reals a , p, p and an angle q5.</p><p>Notice that g-@(z) = a + Pi + pj </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The filled-in Julia set of f(z) = t 2 + 0.2809 + 0.53i.to one real axis and three imaginary axes: kj = -i; ik = -j.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(a) Let z, be chosen at random from the two possible results of f-'(ti-1).(b) If i &gt; 3. End for.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure</head><label></label><figDesc>50) then plot z; and -zi.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>2.</head><label></label><figDesc>For each value O E [0,2r) let zo = p cos Bi + p sin Oj be a point on a circle of radius p about the origin in the i , j plane . . .(a) F o r i E ( 1 , 2 , 3 , . . . liV}... i. Compute the next point A. Let zi = f -' (~i -~) be the next point in the iteration unless . . . B. (zi-1c) E Rin which case t i should be chosen at random from the circle</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>The quaternion inverse iteration algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Regard</head><label></label><figDesc>Euclidean space of diinension N + 1 as the set of points of the form a + bu where a and b are real numbers, U is a unit length vector in Nspace, and bu denotes the usual multiplication of this vector by the scalar b. Thus, if u</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>when a2 + b2 = 1. Here E denotes the sign of b if it is non-zero, and E is zero otherwise.Letting x = a, y = b cos 6 , z = b sin 6 we can form dGTii as follows:1. Let R = dx2 + y2 + 2 2 .2. Let x' = s l y ' = $,z' = 5. 3. Let S = and m = d m . 4. Let A = fi and B = e. 5. Then d -= S [ A , B [ $ , GI].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>z</head><label></label><figDesc>z from H into H I . Then Fe 0 g-+(z) = (27) e-ie(a' -p' -p2 + 2api + 2apj) + eiec standard three dimensional coordinates. This makes = (a2-p2-p2)cosB+2apsinL9+ (28) possible a simple and useful program for 3-D Julia sets, computed by inverse (random for the sign of the ((-a' + p' + p') sin e + 2ap cos e); + root) square root iteration. 2apcosBj-2apsinBk+eiec. Rotating back we get B Proof of j , k Equivalence in Julia Sets g+ 0 Fe 0 g -+ ( z ) = (29) ( a 2 -p2p 2 ) cos e + 2apsin e + ( ( -a 2 + p2 + p 2 ) sin e + 2ap cos e); + 2crp(cos 0 cos q5sin 0 sin 0)j -2ap(sin 0 cos q5 -cos 0 sin Q)k + eisc. Theorem 1 The dynamics of the function (21) Fe(r) = e-"z' + eiec for c E 63 is independent of the angle q5 in which is the same result as = a + pi + pei@j. Hence the 4 -0 Julia set is obtained as a set of revolution about C of the 3-D Julia set. + pi + pcosdj + psinq5k)' + eiec 2aPi + 2ap cos q5j + 2ap sin q5k) + eiec = e-"(a2 -P' -p' cos' Q -p2 sin2 Q + (31) ie(azp' -p2 + 2api + g+(z) = h ( z ) + Im;(z)i+ (23) ei+(Imj(z)j + Imk(r)k) 2ap cos q5j + 2ap sin q5k) + eiec be a rotation of quaternion z about the complex plane that leaves points in C fixed. The proof consists of showing algebraically that = ( a 2 -p' -p') cos e + 2aPsin e + ((-a' + p' + p') sin e + 2aP cos L9)i + 2ap( cos 0 cos q5 -sin 0 sin 4) j -2ap(sin 0 cos Qcos 0 sin q5)k + eiec. 0 the symbol H i denotes the space spanned by 1, i and j. Any arbitrary z E H can be expressed z = a + pi + pei+j (25)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>a + pi + y j + bk are denoted</head><label></label><figDesc></figDesc><table><row><cell>tion</cell><cell></cell></row><row><cell>adds a new parameter to Eq. (1) which causes the</cell><cell></cell></row><row><cell>resulting Julia set to be rotated by 8 radians counter-</cell><cell></cell></row><row><cell>clockwise about the origin in C [9].</cell><cell></cell></row><row><cell cols="2">The symbol H (after Hamilton) denotes the quater-</cell></row><row><cell>nions to avoid confusion with the rationals.</cell><cell></cell></row><row><cell cols="2">The values of the individual components of a</cell></row><row><cell cols="2">quaternion number z = Re(z) = a,Im;(z) = p,Imj(t) = 7, Imk(z) = 6. The</cell></row><row><cell cols="2">quaternions are an extension of C. Thus, every com-</cell></row><row><cell>plex number is a degenerate quaternion number.</cell><cell></cell></row><row><cell cols="2">Unlike the complex numbers, quaternion multipli-</cell></row><row><cell cols="2">cation is not commutative. This becomes important</cell></row><row><cell cols="2">when writing polynomials. For example, in H, the</cell></row><row><cell cols="2">expression a t 2 is not equivalent. t,o z 2 a nor is it equiv-</cell></row><row><cell>alent to zaz.</cell><cell></cell></row><row><cell>2.2.1 Rotational Families</cell><cell></cell></row><row><cell>Let</cell><cell></cell></row><row><cell>g e ( Z ) = eiez</cell><cell>( 5 )</cell></row><row><cell cols="2">be a function that rotates point z by 0 radians</cell></row><row><cell cols="2">counter-clockwise about the origin in 43. A new func-</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Hamilton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Elements of Quaternions</title>
		<imprint>
			<date type="published" when="1969" />
			<publisher>Chelsea Publishing Company</publisher>
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Image space algorithms for visualizing quaternion Julia sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Hart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
		<respStmt>
			<orgName>EECS Dept., University of Illinois at Chicago</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Ray tracing deterministic 3-D fractals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Sandin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">H</forename><surname>Kauffman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="289" to="296" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A R</forename><surname>Holbrook</surname></persName>
		</author>
		<title level="m">Quaternionic astroids and starfields. Applied Mathematical Notes</title>
		<imprint>
			<date type="published" when="1983" />
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="1" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Quaternionic Fatou-Julia sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A R</forename><surname>Holbrook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Science and Math Quebec</title>
		<imprint>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="79" to="94" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fractal aspects of the iteration of z + Xz(1 -z ) for complex X and z</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Mandelbrot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals New York Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">357</biblScope>
			<biblScope unit="page" from="249" to="259" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Generation and rendering of geometric fractals in 3-D</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Mandelbrot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="61" to="67" />
			<date type="published" when="1982" />
			<publisher>Freeman</publisher>
		</imprint>
	</monogr>
	<note>The Fractal Geometry of Nature</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Julia sets in the quaternions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Norton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="267" to="278" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Beauty of Fractals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Peitgen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Richter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m">The Science of Fractal Images</title>
		<editor>H.-0. Peitgen and D. Saupe</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
