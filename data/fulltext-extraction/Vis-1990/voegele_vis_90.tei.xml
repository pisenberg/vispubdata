<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Scattered Data Interpolation Tools in a Microcomputer Visualization Environment</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keith</forename><surname>Voegele</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Arizona State University Tempe</orgName>
								<address>
									<settlement>Arizona</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Scattered Data Interpolation Tools in a Microcomputer Visualization Environment</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Scattered data interpolation can best be explained in the context of an example. Consider a demographic researcher constructing a population projection of a given geographical area. In the absence of total information, which available resources rarely permit gathering, projections will be based upon data obtained at a few key sites. At this point, the researcher attempts to draw a mathematically reasonable surface through the available data (interpolation by position). This surface serves both to visually exhibit the trends in the available data, as well as to enable a degree of prediction about those areas of interest without directly observed information. The demographer might then modify this surface on the basis of informational trends observed from past census reports (interpolation by first derivative). Scattered data interpolation techniques are the mathematical tools for crafting these surfaces, and 3D computer graphics algorithms deliver their visualization to the researcher.</p><p>For a given set of scattered values there is no inherently "best" surface that can be drawn through the data and as such there exist many interpolation techniques with different capabilities and end results. Finding an optimal interpolation for an arbitrary data set is still an open research question (contrasted with the case of regularly gridded data which is readily handled with classical linear or polynomial interpolation). Scattered data interpolation can be global (Le., Shepard's or Hardy's methods) or local (i.e., Courant's or Sibson's methods) depending upon how much influence neighboring data points have on the surface in the vicinity of a point of evaluation. Some interpolants are defined throughout a rectangular domain, while others are valid only with the convex hull of the data set (that shape that a rubber band would take if stretched about a group of pins stuck into each of the data sites). Many of the techniques that work in crafting interpolation surfaces in 2D can be extended to create interpolation volumes in three dimensions. (See <ref type="bibr">Alfeld[l]</ref>, Barnhill and Nielsonr21, <ref type="bibr">Farin[5]</ref>, <ref type="bibr">Foley[6]</ref>, and Franke[71 for technical review of these issues.)</p><p>In addition to the applications in demography, scattered data interpolation is a visualization tool used CH2913-2/90/0000/0315/$01 .OO -1990 IEEE in other health sciences. In biometry, for example, a researcher tracks the incidence or prevalence of a disease based on observations made at selected geographic sites. In statistics and epidemiology, and for general purpose exploratory data analysis, it is often useful to visualize a key variable as a smooth function of other reference variables, or to see a series of stratified survival curves as one, two dimensional surface. Another example is in the display of a surface drawn through the odds ratios from an analysis factored by two categorical variables. Outside of the health sciences applications for scattered data interpolation also abound. In chemistry, pressuretemperature-volume surfaces are constructed from a non-gridded set of observations to categorize a compound's deviation from the perfect gas law. In the earth sciences (meteorology, geology, oceanography) interpolation techniques are used to display spatially observed variables. In archaeology, surfaces are drawn through the 3D coordinates of artifacts in attempting to delineate and separate surfaces of occupation at sites of repeated settlement.</p><p>Scattered data interpolation techniques will also gain importance in the rapidly developing field of medical imaging (CT, MRI, SPECT, etc.). Many of the volume visualization algorithms in this discipline rely on cubically gridded density data (voxels). From this cuberille of data, surfaces are extracted using standard interpolation when boundaries do not lie on exact voxel edges. As these cubic volumetric data sets are very large, and the algorithms computational intensive, very fast graphics hardware has been developed to display the resulting images. Scattered data interpolation methods will be useful in two aspects of this visualization process. At the front end of the pipeline, scattered data from sources that do not produce cubically gridded data (including noisy or MRI images resulting from multiple, non-stationary data sets integrated into a single scan) can be interpolated and then evaluated at each of the volume's voxel locations for visual display. At the other end of the pipeline, scattered data interpolation tools can reduce the information burden of storage and retrieval of these large data sets by allowing the researcher to define regions of importance. In this latter case many points near the region of interest are included in the reduced data set, and correspondingly fewer f" other areas. When the image needs to be reconstructed, a One of the few existing programs that does perform scattered data interpolation is the SYMAP codes that can be found on many mainframes. Primarily this program is used to produce various styles of contour maps using (only) a localized Shepard's method for interpolation of the input scattered data. Although the program does not produce 3D graphics, it can write the evaluation data out to a file which can then be manipulated by other graphics programs. On the other hand, 3D computer graphics packages for microprocessors are readily available. The public domain codes from the National Center for Supercomputing Applications (ImageTool, etc.) are a fine example of graphics tools that are useful for examining simulation results. For that matter many graphical spreadsheets can produce effective 3D scatterplots and surfaces. The problem with these microcomputer packages is the lack of the scattered data front end necessary to take many "real" data sets into the rectangularly gridded contraints they require for plotting these surfaces. It should be noted, however, that a skilled user of those statistical packages that offer an internal programming language might laboriously construct the mathematics of the scattered data interpolation to produce the required g</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>n d d e d h</head><p>What is needed at the microcomputer level is a package that can bridge the connection between scattered data sets and the highly structured sets required by the graphics algorithms. Although export of evaluation data is a necessary capability, it is very important for this package to have a fully featured 3D graphics subsystem to interactively guide the researcher toward the final visualization results. At that point the option exists of using more sophisticated and more powerful graphics tools to achieve the desired presentation. The application promoted in this paper has been designed to effectively meet these needs and to promote the awareness of the value of interpolation tools in visualization. Full details of this design are presented in a subsequent section.</p><p>Collecting many different interpolation methods into one package promotes the important realization that many surfaces can be drawn through a data set consistent with what information is available to the researcher. Given an effective interface it will be easy to see the range of possibilities which should help lead to an informed interpretation of the data. <ref type="figure" target="#fig_1">Figure  2</ref> illustrates this point by showing two snapshots from a cint sequence formed by varying the radial parameter in a Hardy's multiquadric interpolation.</p><p>These tools should be carefully organized at the source level to isolate as much as possible the mathematics of a given method from the surrounding application codes that perform the graphics display and resource management (printing and file service, etc.). In this way the source to these interpolation tools could be offered to a smaller set of researchers interested in custom crafting a new or modified interpolation method for their specific needs. They would supply the mathematics while the existing application would act as an effective graphics test environment. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Software Design</head><p>The basic structure of the Macintosh package of interpolation tools (hereafter referred to as the Inturpitude package) is very simple. A data set is read (or randomly generated from a test function), an interpolation method is chosen, and then the user examines the results using a variety of graphical output styles. From this point, the user can modify interpolation parameters and options that customize the appearance of the displayed output (resolution, viewpoint. etc.). A visual scripting capability can be invoked in the background to capture the sequence of user actions to later be replayed for review or parallel analysis on another similar data set.'</p><p>The following sections present the various functional components of the Inturpitude package. In general, the current level of development is described first followed by details of "work in progress". These proposed modifications are justified and evaluated with respect to their importance in meeting the needs of the targeted users and with respect to the feasibility of their achievement.</p><p>The preliminary version of Inturpitude is quite limited in its data handling capabilities. Only 150</p><p>x,y,z triples of numbers can be manipulated and the data must be presented in a text file in white space separated format (or in the parlance of 'Cl, fscanfable). Clearly to be a useful tool to researchers, the program must be capable of handling thousands of data points (though at reduced efficiency depending upon system memory availability) and should support a variety of input formats (such as import from spreadsheets or space saving raw binary files produced by other programs). Another drawback with the current data handling is the inability for the user to modify the data once it has been read (short of exiting the program and revising the data file that was originally input). One of the specific aims of the current work is to add a spreadsheet like interface for data manipulation. The Macintosh operating system provides a List Manager to facilitate such an interface.</p><p>The columns of values will appear in a separate data window and the user will be able to edit their values. It would also be beneficial to include a minimal set of recalculation tools to allow users to modify or create entire columns of values. One important feature that can then be provided is the ability to write out data files that have been modified or that have been created using the evaluation points of a given interpolation.</p><p>These latter files will serve as an export channel to other graphics applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>kluQE"</head><p>Besides reading a data file, Inturpitude can generate a random data set taken from one of three intemal sampling functions. These generally small random data sets are an excellent way to leam what to expect from various interpolation methods and are generally handled quickly enough to maintain an absorbing level of interaction. The bicubic Hermite internal function comes with a patch editor to allow an endless variety of smooth surface shapes to be explored. Editors for the quartic and planar functions would be useful enhancements, as would the addition of other internal generating functions (bivariate Gaussian, trigonometric, etc.).</p><p>Many packages for the Macintosh use the About.. entry in the APPLE menu as a portal to the help information. Inturpitude uses the same mechanism and presents the user with an iconic list of topics that can be selected by the click of the mouse. Each page of a given topic contains pertinent information and buttons to quit or to return to the main level (a hypertext interface style). Currently, only six topics have help panels which represents about one fifth of what a novice user might find useful. One set of panels would provide in detail the mathematics of each interpolation method (perhaps with formulas and technical references in the CAGD literature). While the coding technology is in place for this enhancement, the writing of clear and informative help text remains a difficult and time consuming undertaking.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PrintinP and Postsc ript Files</head><p>The Macintosh operating system makes it fairly simple for any application to print graphics on both the Laserwriter and the Imagewriter printers. However, in providing this generality certain capabilities of the 300 dpi Laserwriter are precluded and can only be accessed directly. Inturpitude is able to write Postscript (the page description language for the Laserwriter) files to support finer line widths and more efficient grey scale handling of shaded images (see the shaded image in <ref type="figure">figure 4)</ref>. One useful extension to the printing capability will be support for multiple, appropriately scaled, images per printed Page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Clipboard S a</head><p>In a Macintosh application the Clipboard provides the interapplication exchange of data which may be simple text, QuickDraw graphics, or arbitrary information of specific format. In the Inturpitude package the Clipboard is tied to the Edit menu's commands for Cut, Copy, Paste, and Clear and presently only supports the export of a graphics image via the PICT format (which can be then be transferred to such applications as MacDraw, Superpaint, and most other graphics programs for the Macintosh). When the spreadsheet data interface is implemented, the program will also be able to import tables of numbers from the Clipboard. On a related issue, the Edit menu is the logical place for the Undo command which, when implemented, will provide a convenient means of resetting option parameters if the user decides to revert to previous, more acceptible, values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Scaline and Windowing</head><p>Inturpitude draws all of its graphics into a single window that can be resized to any dimensions consistent with the Macintosh monitor in use. If a parameter is changed, the old graphic is erased and a new one drawn. Clearly these tools will be more useful if the user is easily able to make side-by-side comparisons of several methods or display styles for a given data set. Although a multiple windowing context is supported by the Macintosh operating system, several underlying issues need to be addressed to match the window context to the user's semantic understanding of the window's content. For example, do the menus and option parameters belong only to the front most (active) window or does each window own a complete set of these values so that the thread of interactivity is regained when a background window is once again selected? Another descision to be made is whether or not to update windows (a potentially time consuming process) that are in the background as the foreground environment changes. The issue of color is also a problem since only the front window owns the current palette of 256 colors (and a shaded image, even in one color, can easily require most of these color entries), therefore background window image colors will "jump" about to match the current CLUT values (color look up table). Even when the compromises have been made, however, the addition of multiple windowing will prove a very useful enhancement for this package.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Global CO ntext</head><p>A typical user of Inturpitude may read in a data set and then make many interactive decisions about how the data is viewed. Currently there is no session level context that can be manipulated except by quitting the program and starting again. The program would definitely be improved by adding menu commands to save, revert, read, and reset the global context of the Inturpitude machinery. This can be readily done by a painstakingly careful file based organization of all the intemal variables and resources used in the application environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mechanism</head><p>Updating a graphics window in Inturpitude occurs at a number of different levels. Some changes such as switching interpolation methods or data sets demand a complete redraw. Other changes, like establishing a new viewpoint, leave the 3D coordinates intact and just recalculate the 3D to 2D display transformations. Scaling of windows and their PICT encoded contents is mostly handled by the operating system so these changes are fast and require little change to intemal data structures. Whenever an image is being updated, Inturpitude draws a STOP icon on the Screen that allows the user to abort (cut short) the current redraw. The next time a redraw is required (say after another parameter is changed) all outstanding changes will be made to the image. Unfortunately, the granularity of the check for user abort is too coarse to be immediately responsive.</p><p>This feature will need to be refined to prevent needless user frustration. One possible solution would be to add a menu option to temporarily suppress all updates until the user has negotiated a sequence of parameter changes. Some subtle interactions with copying, printing, and PostScript file generation codes would need to be m h l l y handled however.</p><p>Background calculation is work performed during the processor idle time in a Macintosh application waiting to respond to user events (mouse clicks and keystrokes). For example, spreadsheets calculate formulas, and word processors can repaginate in the background. Inturpitude could use idle cycles to perform interpolation evaluations, to sort by zdepth for the painter's algorithm. and to add frames to an active cinC sequence. This technique is even more important in the Multifinder environment of the Macintosh where currently unselected applications can get a share of the active application's idle cycles.</p><p>Therefore, the user could set up an intensive graphic image request in Inturpitude and then return to work in another application without waiting for the image to be completely rendered While the concept is easy to understand, and the operating system provides the hooks for its implementation, using background calculation will require careful organization of many inherently small sized steps in the performance of the requiredovdtask. It will be important to continue to add other interpolation methods out of the scores that are currently in the CAGD literature. Next on the list to be added include several radial interpolants and the Clough-Tocher interpolant. Multistage interpolants (an interpolant evaluated on a coarse mesh followed by an approximation that is easier to calculate at a finer mesh) will be added when the scripting capabilities (described below) are completed. A localized version of the global interpolants (the evaluation depends only upon the nearest N neighbors) needs to be added to efficiently handle larger data sets. </p><formula xml:id="formula_0">mu = 4. SF = 2 F~ di</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c"G&amp;.S</head><p>Given a data set and an interpolation method, Inturpitude supports a variety of output display styles. <ref type="figure">Figure 4</ref> shows the six currently available styles. For now, each style is fixed, but an important enhancement will be to support style variants for each of the basic types. For example, data spikes could be replaced by data points suspended in the unit volume. Also the appearance of the axes should be optional. The contour style should allow a shaded variant. The curve display could support the floating horizon algorithm which gives the appearance of a hidden line surface. An exciting possibility would be to add simple ray tracing as an entirely new style since a single mathematical surface is comparatively easy to trace (intersection calculations consume much of the computational effort of a ray tracing algorithm).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>pptions: Viewiqg</head><p>The viewing dialog is used to interactively select the vantage from which the interpolated surface is viewed. <ref type="figure" target="#fig_5">Figure 5</ref> illustrates this dialog and has been included here to demonstrate an important principle of the user interface to Inturpitude. In a very expensive graphics computer it would be possible to rotate the 3D image in real-time. thereby allowing the user to easily select a desired view. In the microcomputer realm, construction of complex images can easily take minutes, which is an unacceptable wait between the setting of an option and the feedback about the desirability of that choice. Therefore, the shaded cube in the center of the dialog represents the unit volume of the main display screen within which the interpolated surface appears. As the user adjusts the eye location by moving the black satellites about the latitude and longitude of the earth, the unit cube "follows" the new viewpoint to provide immediate, if necessarily imperfect feedback. This user interface idiom is adopted in many other dialogs as well.</p><p>Other options of the viewing dialog include the house icon to allow the user to easily return to the startup defaults (as pictured), and the Lens parameter that adjusts the degree of perspective in the 3D display transformation. A useful feature to add to this dialog would be a button to support binocular stereo display of the 3D images. The binocular pair of images in <ref type="figure">Figure 6</ref> can be "cross-fused'' to reveal a startlingly realistic 3D image. This stereo option is currently only available as a special case of rotation movies (see below). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>45"</head><p>. . .   <ref type="figure">Figure 6</ref>. The tape player dialog for cint sequence display.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">5 O</head><p>hhons: Reso lutiQQ Currently, Inturpitude customizes the resolution dialog to each of the display styles. The basic parameter involves the locations in the x-y plane for interpolation evaluation with independent controls in both directions and options to vary the interval spacing. In addition, for contour plots the number of levels can be set, and for curve plots the number of steps per curve can be set. The contour plot resolution dialog could be improved by allowing the user to set the spacing between the levels as well (i.e., non-uniformly spaced contour levels).</p><p>At the moment, the only annotation Inturpitude supports (besides the window title matching the data set filename) is a user typed text label that will be printed along with the main graphic display. An appropriate enhancement would be to automatically entitle the graphic snapshots based on the interpolation method, selected options, and data file name. Another feature would be to provide a minimal set of MacPaint-style tools (text, lines, etc.) to allow the user to arbitrarily annotate the content of the graphics window.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Movies</head><p>Motion parallax turns out to be a powerful 3D visual cue and so animation sequences have become an important visualization tool. Inturpitude has a limited animation capability by saving many images in a compressed data file as they are generated and then later loading them up into memory for playback at the 30 frames a second needed for smooth animation. <ref type="figure">Figure 6</ref> shows the tape player which offers controls for direction, rate of playback, continous loop or rocking motion, and, in the special case of rotation movies, the ability to show rotating stereo images! The program can make several kinds of movies besides the simple 3D rotation variety. For example, a sequence can be generated to show how a surface changes as a function of an interpolant's parameters. Another type is a modified "cube tool" that shows successive contour images as if an imaginary plane were slicing through the unit volume. Besides adding new kinds of movies, this feature can be enhanced by adding support for color and alternative movie sizes. Due to the large file sizes of these movies the code and file handling will need to be improved as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ScriDts</head><p>Inturpitude implements visual scripting as a means of saving a sequence of interactive operations as a "program" which can later be played back (perhaps on a different data set) to repeat the sequence. When a new script is created, user actions in the main program are stored as icons in the script window. At the end of the sequence the user can save the script, play it back, ar even edit the exact parameters that are associated with a given script frame. The editing of script frames is handled in the identical fashion as setting the parameter in the first place, so no new commands need to be learned for this rudimentary programming language. <ref type="figure">Figure 7</ref> shows an example script. Although the concept behind a visual scripting language is very powerful ( cf. ChangDI, than the purely linear organization of the script Haeberli[lOl, the current implementation in window. A good first step in this interesting research Inturpitude is more realistically viewed as a user area would be to provide the user the ability to friendly and very effective macro (or keystroke) redirect screen output from the script's execution to a facility. Promotion to a full visual language would log file for later review. With this feature the user require the support of looping constructs and two could program lengthy sequences of images to run dimensional connections between iconic actions rather overnight and retrieve the images later when needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E O</head><p>sample.scrip t , . ... ... ... ... .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Resolution Viewing Scaling</head><p>5 Frames in S c r i p t 1 <ref type="figure">Figure 7</ref>. A sample visual script.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>A smooth surface through a set of data "spikes" scattered data method will reproduce the important parts of the image with arbitrary fidelity, while retaining the overall general structure to preserve the context of the original image. (Confer Drebin Carpenter and Hanrahan[4], Fuchs, Levoy and Pizer[8], Haber[9], Kaufmakfrn and Bakalash[l2], Levoy[l3], and McCormick, DeFanti and Brown[l4] for detailed aspects of the volume vizualization pipeline.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Effect of R parameter in Hardy's multiquadric interpolation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>-</head><label></label><figDesc>Inturpitude currently supports two global interpolants (Shepard's and Hardy's multiquadric methods) and four local interpolants (Courant's piecewise planar, Sibson's method, and cubic and quintic BQier methods). The localized interpolants depend upon a Dirichlet tesselation of the plane and the corresponding triangulation to determine relevant neighboring data sites. For each interpolant that has parameters a dialog can be accessed to conveniently change them. The dialog for the S h e p d s interplant is shown in Figure 3. Shepard's formula involves a weighted combination of the distances between the data points and has an exponent parameter. Larger values of this exponent produce surfaces of increasing flatness, an idea that is conveyed by the icons associated with the scroll bar used to set the parameter. Only values consistent with the given method are selectable since the user is never asked to type in an arbitrary value.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>Parameter dialog for Shepard's interpolant.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>ations: ColorinGLighting. Texture These three options interface to the core of computer graphics routines that determine the shaded appearance of the interpolated surface. For example. the top and bottom surfaces, and background can each be assigned any of the supported colors (256 out of a palette of 16 million on an 8-bit color Macintosh). The lighting dialog controls the shading algorithm (flat, Gouraud, or Phong), as well as the ambient light intensity and the surface finish characteristics. The texture option allows the mapping of planar textures onto the output surface. Many improvements and enhancements are possible in this section of the codes since the entire world of realistic 3D computer imaging is built upon these concepts. The highest priority additions include: a z-buffer algorithm for hidden surface elimination (rather than the painter's algorithm), transparency effects, an altitude volume texture (as used in cartography), an improved texture dialog interface, support for a more complex lighting model, and a dialog to set the lighting direction and possibly the color and number of lights shining on the image. (Hall[ 111 provides a review of lighting and shading models in computer graphics.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>The viewing dialog.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>I</head><label></label><figDesc>rot at e. m ou ie</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work has been supported in part through a grant from the Office of the Vice-President of Research at Arizona State University, and by the excellent technical support of the group from Engineering Computer Services.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Scattered Data Interpolation in Three or More Variables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Alfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mathe matical Methods in Computer hded G e o m m . Desien, Lyche T. and Schumaker L., editors</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="1" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Bamhill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Surfaces. Special Issue of The Rocky Mountain Journal of Mathematics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Visual Language: A Tutorial and Survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang</forename><forename type="middle">S</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Conference Proceedings</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Smooth Interpolation to Scattered 3D</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Farin</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Data</surname></persName>
		</author>
		<title level="m">Surfaces in ComD -uter Aided Geo metnc &apos; Desien</title>
		<editor>Barnhill R.E. and Boehm W.</editor>
		<meeting><address><addrLine>Amsterdam</addrLine></address></meeting>
		<imprint>
			<publisher>North Holland</publisher>
			<date type="published" when="1983" />
			<biblScope unit="page" from="43" to="63" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Interpolation and Approximation of 3-D and 4-D Scattered Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>; I G G R Aph</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer and Mathematical Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="29" to="39" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
	<note>Rendering</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Scattered Data Interpolation: Tests of Some Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Franke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Computation</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="181" to="200" />
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Interactive Visualization of 3D Medical Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Pizer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="46" to="51" />
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Scientific Visualization and the Rivers Project at the National Center for Supercomputing Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Haber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">ConMan: A Visual Programming Language for Interactive Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Haeberli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 88 Conference Proceedings</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A Characterization of Illumination Models and Shading Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Visual Computer</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="268" to="277" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Memory and Processing Architecture for 3D Voxel-Based Imagery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bakalash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="10" to="23" />
			<date type="published" when="1988-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Display of Surfaces from Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Visualization in Scientific Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">H</forename><surname>Mccormick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Defanti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="103" to="112" />
			<date type="published" when="1987-11-22" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
