<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Techniques for Visualizing Fermat &apos;s Last Theorem: A Case Study</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hanson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and the Center for Innovative Computer Applications</orgName>
								<orgName type="institution">Indiana University</orgName>
								<address>
									<postCode>47405</postCode>
									<settlement>Bloomington</settlement>
									<region>Indiana</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Heng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and the Center for Innovative Computer Applications</orgName>
								<orgName type="institution">Indiana University</orgName>
								<address>
									<postCode>47405</postCode>
									<settlement>Bloomington</settlement>
									<region>Indiana</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Kaplan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and the Center for Innovative Computer Applications</orgName>
								<orgName type="institution">Indiana University</orgName>
								<address>
									<postCode>47405</postCode>
									<settlement>Bloomington</settlement>
									<region>Indiana</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Techniques for Visualizing Fermat &apos;s Last Theorem: A Case Study</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Mathematical Ideas of Fermat&apos;s Last Theorem We describe some mathematical approaches and computer graphics techniques for illustrating concepts related to Fermat&apos;s Last Theorem. We present a selection of visualization methods, and describe their interactions with the available software systems and with the mathematical subject matter. In the margin of his copy of Arithmetica by the Greek number theorist Diophantus of Alexandria, the 17th century mathematician Pierre de Fermat stated that</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Special techniques are required to effectively exploit computer graphics for the visualization of concepts that are important in abstract mathematics. In this paper, we describe observations made in the process of creating a three minute computer animated videotape dealing with some elementary aspects of Fermat's Last Theorem, a famous unsolved problem in number theory.</p><p>Our approach to the representation of the different concepts presented in the video was influenced by many factors: the available hardware, real and perceived constraints of the available software, constraints imposed by the video medium, and a number of peculiarities and features of the mathematical domain itself. In the following sections, we describe the mathematical concepts that we tried to depict, our experiences with the software systems that played a part in our efforts, some specific successful visualization techniques, and some unexpected mathematical insights that we noticed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Zn + yn = zn cannot be solved with non-zero integers</head><p>(2, y, z ) for any integer power n &gt; 2 , <ref type="bibr" target="#b0">(1)</ref> and then wrote I have discovered a truly marvelous proof that this margin is too small to contain.</p><p>No one has yet succeeded in proving or disproving Fermat's declaration, although it is known to be true for all integers n below an astronomical number. Fermat himself never referred to this "marvelous proof" in any of his other writings, so no one knows whether he had a proof or not. For a very readable account of the early history of the theorem, see Edwards <ref type="bibr" target="#b2">[3]</ref>; a more mathematical survey of the theorem's status (no longer quite up to date) is provided by Ribenboim <ref type="bibr" target="#b4">[5]</ref>.</p><p>In our video, we touched on only a handful of the vast variety of mathematical ideas that are potentidy relevant to the Fermat theorem. We naturally chose those that were both relatively understandable to a scientific but non-CH2913-2/90/0000/0097/$01 .OO -1990 IEEE mathematical audience, and adaptable to visually interesting graphical displays.</p><p>Explicit parametric solutions of the equation. We now show how to obtain a parametric solution for Eq. (1) in a particular local coordinate system. First, we observe that the expressions </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(4)</head><p>Next, we define </p><p>and substituting the right hand sides of Eqs. (5,6) for t l , z 2 , we see that Eq. (4) implies that Eq. (8) is identically satisfied. Since there are n possible distinct values for each of the phases SI and 232, the entire finite surface is obtained by patching together the n2 different quadrilateral regions found by evaluating the pair (21, 2 2 ) for 0 5 b 5 ( n / 2 ) and some practical range of a .</p><p>This technique is well known in computer graphics in the real domain (see below); we are unaware of whether or not this approach to representing the complex surfaces has been noted in the mathematical literature.  The full 3D form of Eq. (1) is cone-like, interpolating between a true cone for n = 2 and an inverted, square-based pyramid as n -+ 00. The planar cross sections of the 3D equations are of course 2D superquadrics; <ref type="figure" target="#fig_3">Figure 2</ref> shows the 3D shape for n = 7. Integer crossings of the curve. The fundamental statement of Fermat's last theorem translates graphically into the following observation: if we vary the superquadric exponent n continuously with n &gt; 2, so that the curve with a fixed integer value of z sweeps a portion of the z y plane, the curve of necessity passes through many integer pairs (z,y), but none of these intersections occurs for integer n. We also see that for any z , there is always a particular value of n, n = log 2/(log zlog(z -1)) (corresponding t o the point ( 2 -1, z -1, z ) ) , beyond which no more integers can be intercepted. The 3D space of integers for which intersections of the curve might be sought can be viewed as a cubic lattice, shown in <ref type="figure" target="#fig_4">Figure 3</ref>.</p><p>Inverting the deformation transform. In computer graphics, <ref type="bibr">Barr</ref>  <ref type="bibr">[a]</ref> introduced a technique for ray tracing deformed superquadrics by inverting the original deformation transformation and tracing the deformed ray. We may perform an analogous transformation on the integer grid,</p><p>We then see the integers sliding into the center of the plane as n 4 00, as illustrated in  Projecting the homogeneous equation to the unit square. For many mathematical purposes, it is preferable to look at Fermat's equation not as a homogeneous equation for a cone in 3-space, but as the 2D inhomogeneous equation found by dividing both sides by zn. In this framework, the curve deforms from the unit circle to the unit square as n increases, and our 3D integer lattice is replaced by the set of rational points in the unit square. We show the set of such points with denominators up to 24 in <ref type="figure">Figure 5</ref>.</p><p>Extending the real curve to a surface in two complex dimensions. The full complex equations (5,6) produce a surface of one complex dimension in the space CP2 of two complex dimensions (that is, a surface of two real dimensions embedded in a real four dimensional space). To display this surface, we therefore had to choose particular ways of projecting the object from four dimensions into three, and then into two dimensions for computer graphics display. We accomplished this by transforming the two imaginary components of z1 and z2 into a single three-dimensional value z;</p><p>4 0 + 3 0 projection then became</p><formula xml:id="formula_1">x = Re(z1) Y = Re(z2) z = cos a Im( z1) + sin a Im( 22 he full (10)</formula><p>The finite part of the resulting surface for n = 3 looks like <ref type="figure" target="#fig_10">Figure 6a</ref>. Typically, we chose a different color for each value of the phases S I , s2 in Eq. (7), so that the surface appeared as a patchwork quilt of n2 distinct square pieces sewn together t o make the full 2D surface. The fixed points of the cyclic group were then distinguishable as the centers of "pie charts" with n wedges meeting at a single point on the surface.</p><p>Global topology and transforming to the generalized Riemann sphere. For each integer power n, the complete Fermat surface is a closed manifold with the topology of a 2-sphere having g handles attached. g is known as the genus of the surface and, according to the genus formula <ref type="bibr" target="#b3">[4]</ref>, has the value</p><formula xml:id="formula_2">(11) (n -1)(n -2) 2 9 =</formula><p>The Euler characteristic of the surface is related to the genus by x = 2 -29.</p><p>To depict these closed surfaces for computer graphics purposes, we perform the following transformation: Eq. (12) parameterizes a 4-sphere embedded in a 5-dimensional space. This transformation is the analog of the transformation from CP1 to the Riemann sphere S2, except that CP2 is not precisely equivalent to S4, while CP1 is equivalent to S2. An example of the result of the projection of this transformation to 3D from 5D is shown in <ref type="figure" target="#fig_10">Figure 6b</ref>. We have considered several other approaches, some more topologically consistent than this one, for representing and depicting the surface within a finite volume; we hope to investigate these alternatives later.</p><p>The surfaces that we deal with intersect in extremely complex ways in the 3D projection, but they are in fact nonintersecting in 4D. Thus in 4D it is relatively simple to get a complete topological description in terms of a unique and nonredundant set of vertices, edges, and faces giving an Euler characteristic x = V -E + F = 2 -29 agreeing with Eq. (11).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Constraints and Features of the Software Environment</head><p>In a project of this type, the result and the techniques used can clearly be driven as much by the software capabilities (and the ability of the designers to exploit documented and undocumented features of the software systems) as by the methods one would ideally like to use for visualizing the problem.</p><p>The whole visualization process that was undertaken in the production of our video can be divided into three parts. The first part was the development of the script and explicit algorithms for generating the desired mathematical objects; these elements were laid out in a Mathematica notebook (running on a Macintosh IIcx) that served as a storyboard and a rough draft of the animation sequences. The second part dealt with animating integer grids and was done by using Wavefront Technology's design and rendering package. The third part, which focused on animating surfaces in CP2, was carried out using an object-oriented graphics library based </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Experience with Mathematica</head><p>The first task in creating the animation was to develop a storyboard showing approximate timing and the expected content of typical frames from each scene. We used Wolfram Research's Mathematica system on the Macintosh for this purpose, as well as for studying various visual approaches to the material. Equations needed by the animators were checked in the storyboard, which then served both as a source of explicit algorithms and as a rough draft for the animation. We were very impressed by Mathematica's ability to handle almost anything we neededwe found it to be a very powerful tool for our purposes, with only a handful of drawbacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Strengths. Among the particular strengths of Mathematica were:</head><p>0 Complex arithmetic is handled transparently. This was very useful given our emphasis on experimenting with the Fermat equations in the complex domain.</p><p>0 The parametric plotting packages both in 2D and 3D were extremely flexible and easy to use. This made small experiments in visualizing aspects of the equations very convenient. <ref type="figure" target="#fig_2">Figures 1, 2, 3, 4</ref>, and 5 were all generated and printed by Mathematica.</p><p>0 Numerical computation is handled very carefully in Mathematica.</p><p>Thus some of the problems we had when computing surfaces using standard programming languages could be circumvented in Mathematica, at the price of reduced speed. 3D graphics routines to be used on the numerical results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Drawbacks</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Experience with Wavefront</head><p>One member of the team was fresh from an intensive training course given by Wavefront Technologies. Thus we felt confident using Wavefront for certain types of rendering tasks that were familiar from the course and the documentation. However, we should note that other, undocumented, Wavefront features are covered in a more advanced course we could not commit resources to attend.</p><p>Wavefront was designed for commercial animation, not for visualization, so naturally Wavefront handles those aspects of animation that are used in commercial applications (i.e., camera movement, special effects, etc.) better than it does mathematical objects. Wavefront has excellent tools for creating visual excitement in an animation, something that DorC cannot easily match. In particular, the user interface for the Wavefront choreography program Preview is one of the best available.</p><p>Tasks Attempted. Among the specific tasks attempted with Wavefront for the video were the followinrr:</p><p>Provide visual support while the introductory narration explains the history and definition of the theorem. Tie all parts of the animation together using the Wavefront Compositor to create titles, dissolves, and other special effects. We found this essential as a substitute for traditional video special effects equipment which was not available to us.</p><p>Advantages. We found that good visual effects could be achieved using our knowledge of Wavefront for the following sorts of images: 0 Simple graphs not involving complicated mathematics.</p><p>0 Linear and spline movements between camera positions.</p><p>0 Visually exciting camera moves to help the viewer get a real "feel" for the geometry of the surfaces.</p><p>0 Compositing dissolves from one scene to another.</p><p>0 Special effects such as transparency, textures, and changes in camera projection types from perspective to orthographic.</p><p>Constraints. However, for the particular mathematical domain at hand, the methods available to us in Wavefront presented the following difficulties:</p><p>0 We would have found a "compiled-in" representation for spheres, cones, splines, and other smooth, nonpolygonal surfaces t o be extremely useful.</p><p>0 We needed automatic retessellation of objects depending on the camera distance. <ref type="figure">Figure 7a</ref> shows an anomaly resulting from the need to use one fixed sphere tessellation to represent mat hematical points.</p><p>0 Mathematical objects such as points, lines, and planes could not be represented in Wavefront as idealized graphical icons whose size did not change with distance from the camera.</p><p>0 Wavefront's built-in interpolation methods did not support many of the specialized interpolations among key frames that we 0</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.3</head><p>needed (e.g., perspective transformations of the camera focal length tied in tandem with an overall scene scaling that kept one object the same size in the view field).</p><p>Since Wavefront deals with "object files" that are polygon lists, simple mathematical objects, such as a 20 x 20 x 20 grid of spheres, had to be represented as astronomically large object files. (See, e.g., <ref type="figure" target="#fig_4">Figure   3</ref>.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experience with Do&amp;</head><p>We quickly found that DorC was a much more appropriate tool to use than Wavefront for examining our complex parametric surfaces in CP2. However, we also found that DorC imposed its own undesirable constraints, many discovered while doing video recording.</p><p>Tasks Attempted. We implemented the following kinds of animation with DorC in order to visualize the complex surfaces:</p><p>0 The easiest animation to implement was the "cutaway" view. This was accomplished simply by moving the front clip plane back and forth. More complex styles of cutaway would clearly have been useful.</p><p>0 Surface sweeping was another good way of visualizing these mathematical objects. By gradually increasing the a bounds in the parametric equations (2,3), we could see the surface grow from thin slices to its full topology. Changing the zoom factor and viewpoint while the object grew made the growing process even clearer. However, this technique was time-consuming because the vertices had to be recomputed at each step. an open surface to a compact one. This animation was much better from some viewing angles than others; we found these angles by rotating the surfaces interactively. Interactively testing out various ideas was a critical part of our approach with Dork.</p><p>Constraints. We encountered a number of difficulties peculiar to the Dork graphics library. Among these were:</p><p>0 Dissolves. During video recording, we had no natural utility function available in DorC to do dissolves between two different scenes. The only simple way to do this was to fade the first scene to a black screen, switch to a blacked-out second scene, and gradually increase the light intensity back to the normal value. A tedious alternative was to do X-window dumps of both DorC scenes, convert the file formats, and use the Wavefront Compositor.</p><p>0 Transparency. Transparency worked unexpectedly well with the dynamic renderer in Dork. However, there was no way to change smoothly between an opaque surface and a transparent surface. In DorC, a surface with transparent intensity equal to 1 is totally transparent, but a surface with transparent intensity equal to 0 is not totally opaque as we expected. It already looks rather transparent.</p><p>0 Animation. The default user-interface controls for orientation choices are awkward t o use in an exploratory manner, and there is no support for interpolation or splining among orientations or viewpoints.</p><p>To accomplish these effects, we had to add several commands by hand to the user interface code, including a command to read other commands from a file for scripting. This ultimately allowed us t o write a single script for the entire video recording run. Improving the animation facilities would be very desirable.</p><p>0 Patch glitches. When the integer n is greater than 8, there are gaps in between patches; this appears t o be due to rounding error in computing the vertices of those patches, as well as some "butterfly twists" of square patches where the surface is rapidly varying. This phenomenon is illustrated in <ref type="figure">Figure 7b</ref>. The gaps are reduced by substantially increasing the patch grid size, but this is very time-consuming.</p><p>As a result, we used n = 6 as the most complicated case in our video recording.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Advantages of DorC</head><p>0 DorC programming itself is object-based, so it was quite easy t o build an object-oriented graphics library based on it. One of the classes that we used for this project was an analytical surface object designed for representing parametric equations. There are methods associated with this class of object for setting various parameters on the surface; diffuse color, transparency, bounds for parameters in the equation, mesh size, and many other features can all be set or changed by sending a message to the object.</p><p>0 The library has classes of objects such as buttons and sliders that can easily be added to manipulate the graphics. We used many such controls to interactively determine the parameter settings that were used in the final animation script. The same controls can be used for interactive visualization as well.</p><p>0 The dynamic renderer in DorC is quite fast.</p><p>Consider an image made up of 36 patches, each of which contains more than 100 polygons and is rendered with features such as Gouraud shading, transparency, and specular highlighting, together with frequent sin, cos, tan-', cosh, sinh, and exponential function calls. It took approximately 8 seconds to generate such an image using only one Stardent Titan processor. When the values of n and the mesh detail are small, we can have almost real time animation. Furthermore, we can use options such as backface culling, flat shading, wireframe representation and multiple processors to make the program run even faster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Useful Visualization Met hods</head><p>The following techniques are among those that we used in the videotape or found very helpful for visualizing mathematical data:</p><p>1. Cutaway surfaces. Cutaways of selfintersecting or centrally detailed structures can be accomplished almost trivially by adjusting the position of the front clip plane. Arbitrary "negative" cutaway volumes would give more flexibility. Another useful cutaway variant not used in our video is to divide the surface into ribbons and cut out alternate ribbons, so that one can see the interior through the missing st rips.</p><p>judicious choice of view angles and rotational motion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Rotations.</head><p>Rotating the mathematical object in 3D as well as in 4D (or higher dimensions if appropriate) is very effective in generating additional spatial intuition about the object due to the extra information carried by motion parallax cues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Focal length.</head><p>Varying 3D or 4D (or higher dimensional) focal length parameters generates a hierarchy of foreshortening cues that help the viewer to develop a feeling for the relative spatial position of objects that have been projected from a high dimensional space down to the computer graphics screen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Model parameters.</head><p>Varying the model parameters is useful to understand such phenomena as the limiting behavior of the mathematical object. For Fermat's equation, for example, we can watch the true cone change to a pyramid as n + 00.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Compactification. For surfaces whose</head><p>defining equations pass through the manifold at infinity, a view of the global topology can be achieved by mappings that bring all the points, including those at infinity, within a compact sphere.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Mat hematical Serendipity</head><p>While carrying out this project, we encountered a handful of pleasant surprises when the computer graphics techniques and the mathematical subject matter joined together in unexpected ways. Among these were the following:</p><p>1. The projection from the 3D grid of integers used to test Eq. (1) to the 2D grid of rational numbers is accomplished by a simple viewpoint change! That is, certain properties of projective geometry in mathematics can be visualized as a graphical operation consisting of a simultaneous camera motion and a focal length change.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>When finite size spheres were used to represent grid points, the perspectively projected image of the rational numbers just described has the following property: spheres with larger distances in the denominators of their projective transformations are displayed smaller than spheres closer to the camera. Thus, families of equivalent ratios (e. <ref type="figure" target="#fig_2">g., (3,4), (6,8), (9,12)</ref>) are shadowed by the nearest point of the family, i.e., the one with the smallest denominator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>We had to display complex surfaces made of dozens of patches with intricate local topology, multiple intersections, and multiple local common points. We color-coded the patches by their complex phase for visual interest. We then noticed the accidental side-effect that we could easily see when corners of many distinct square patches shared a common pointa fixed point of the action of the cyclic group.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>The topology of the surface as a collection of patches was never computed explicitly; from a computer graphics standpoint, we just added each patch to the graphics context as an independent object. The "sewing together'' of the patches to represent a complete analytical surface was accomplished automatically by the graphics package without our having to work it out in detail. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>u1 = 1 - 2 cos b cosh a + i sin b sinh a 1 -=</head><label>121</label><figDesc>(exp ( a + ib) + exp ( -aib)) (exp ( a + ib)exp (-Usin b cosh ai cos b sinh a, where 0 5 b &lt; 2n and a ranges over all real values, behave like complex extensions of cos(b) and sin(b), that is (u1)2 + (u2)2 = 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>z</head><label></label><figDesc>where s1 and s2 are nth roots of unity of the form s ( k , n) = exp(2nik/n)(7)for integers 0 5 k 5 (n -1). Rewriting Eq. (1) as + (22)" = 1,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Superquadric 2D shapes for several values of n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>The 3D Fermat equation for n = 7; constant z cross sections of this cone-like surface are 2D superquadrics. Superquadrics and cones. When a = 0 and 0 5 b 5 ( n / 2 ) , in Eqs. ( 2 , 3 ) , the family of real 2D solutions t o 1z1I2 + 1z2I2 = 1 with SI = f l , s2 = f l are known as superquadrics in the computer graphics literature [l]; we plot the resulting curves in Figure 1 for various values of n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>A perspective view of the cubic integer lattice.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>-. . . . . . . . -. . . . . . . ._. . . . . . . ._. . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>The deformed integer grid at z = 7 corresponding to the deformed conical curve ofFigure 2.. -A portion of the grid of rational points in the unit square for denominators up to 24.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>where 21 = Re(zl), y1 = 1m(zl),x2 = (~2 )~ + (~2 )~) / 2 r , and 4 = 1 + x 0 / 2~. Since Re(z2), Y2 = Im(z2), 20 = ((.1)2 + (yl)2 + ('11d2 + ('11212 + ('113)2 + ('114)2 + ('110)2 = 1,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>Give the viewer a feeling for the Fermat equation by conducting a visual tour around and through the surface as n changes from 2 to infinity. (See Figure 2.) Show visually how, even though the graph goes through integer points for various values of n, this never occurs when n is an integer &gt; 2. Show how an inverse transformation of the integer grid can be used as an alternate means of viewing the graph of the equation as n varies. (See Figure 4.)Show how a camera motion transforms the 3D integer lattice into the rational points of the 2D unit square. (SeeFigure 5 . )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>0</head><label></label><figDesc>Another interesting parameter animation was what we called "r-animation." By varying the value of r in the transformation (12) taking the equation to a 4-sphere of radius r , we could see the surface evolve from</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 6 :</head><label>6</label><figDesc>(a)  One view of the surface obtained by projecting the Fermat equation for n = 3 from 4D to 3D. (b) The n = 3 surface obtained by projecting the entire infinite surface into a compact four-sphere, and then projecting that to 3D.(Color Plate 49, page 468) (Color Plate 50, page 468) Figure 7: (a) Coarsely tessellated spheres. meant to represent integer lattice points, do not have the right effect if they are too close to the camera. (b) Rounding error and butterfly-twisted square patches cause gaps in the patchwork approach to the surface for large exponents n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Dynamic Ob- ject Rendering Environment.</head><label></label><figDesc>on Stardent Computer's DorC -All rendering and animation were done on a Stardent Titan interfaced t o a SONY VO-9850 single-frame animation video recorder using a Lyon Lamb MiniVas controller, with controlling software provided by Wavefront and Stardent.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>.</head><label></label><figDesc>Among the drawbacks we experienced in our 8 megabyte Macintosh IIcx environment were the following: While graphics animation is supported in Mathematica, there is no way to specify a sequence of times for a set of graphics frames. This prevented us from being able to test the exact timing of the rough draft storyboard specified by a set of representative still frames.</figDesc><table /><note>00 Memory limitations caused unending prob- lems and loss of time; virtual memory sup- port and graceful recovery from memory overflows would have been invaluable. We were prevented from discovering certain ba- sic properties of the equations in Mathe- m a t i c~ because we never had enough mem- ory to finish; the discoveries were made instead after much programming effort in the DorC graphics package described below. We had originally expected t o be able to carry out all such investigations of math- ematical properties directly within Mathe- matica.0 The speed of 3D graphics is painfully slow as well as being very memory intensive even for very simple objects. It would have been very useful to have some sort of support for high-speed 3D graphics once the polygon tables had been reduced to pure numbers; in principle, Mathematica should be able to know that a polygon table has been evalu- ated numerically, thus enabling high-speed</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="0">Single scenes. The standard user interface provided with the Titan demonstration package includes many nice commands, buttons and knobs for interactively manipulating scenes in a single window. Support for multiple windows in the user interface would have been useful. 0 Lighting. The effectiveness of particular views was strongly influenced by the lighting choices; unfortunately, the default user interface does not allow the lighting positions to be changed interactively. This capability would have given much needed flexibility.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">. Surface evolution. By animating the bounds of the parameters used in the parametric equation, we can see how the surface evolves.3. Transparency. The interior properties ofthe object can be seen using transparency, whose effectiveness is greatly enhanced by</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>Among the many people who contributed to this effort we would like to thank Dennis Gannon, Rick McMullen, Eric Ost, and the staff of CICA (the Indiana University Center for Innovative Computer Applications). Special thanks go also to John Ewing and Chuck Livingston of the Indiana University Department of Mathematics, and to Amy Thomas of WTIU.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Superquadrics and Angle-Preserving Transformations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="11" to="23" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Global and Local Deformations of Solid Primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="21" to="30" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Fermat&apos;s Last Theorem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename><surname>Edwards</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific American</title>
		<imprint>
			<date type="published" when="1978-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Griffiths</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Harris</surname></persName>
		</author>
		<title level="m">Principles of Algebraic Geometry</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ribenboim</surname></persName>
		</author>
		<title level="m">13 Lectures on Fermat&apos;s Last Theoreliz</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Color Plate 47, page 461) (Color Plate 48</title>
		<imprint>
			<biblScope unit="page">467</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
