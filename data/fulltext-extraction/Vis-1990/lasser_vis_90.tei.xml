<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of F r e e F o r m Volumes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dieter</forename><surname>Lasser</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Fachbereich Informatik</orgName>
								<orgName type="institution">Universitat Kaiserslaut-ern</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Visualization of F r e e F o r m Volumes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>An algorithm is presented which creates planar as well ques well known from free form curves and surfaces as arbitrarily curved sections of free form volumes. The t o trivariate representations. The definition will be givalgorithm itself can be used as a subroutine for algo-en in section t w o for volumes in Bernstein-Bbzier rerithms which are able t o perform more general inter-presentation. This specific kind of definition has already sections of free form volumes, e.g. boolean operations been proven t o be very suitable for the purpose of on t w o free form volumes. CAGD f o r curve and surface representation.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Computer Aided Geometric Design (CAGD) has emerged from the need of being able t o describe free form curves and surfaces for use in CAD/CAM technology. Rapidly CAGD became one of the main focuses of Computer Science as well as of Applied Mathematics with many direct applications in engineering.</p><p>The aim of CAGD is, t o provide the engineer with a description of curves and surfaces and volumes in a computer compatible form, with representation and visualization methods, and with techniques t o manipulate data, e. g. modify the shape of a curve, surface o r volume, respectively. In t h e past t h e interest in CAGD was mainly focused on curves and surfaces, but during the last few years, higher dimensional data and surfaces as well as volumes became more and more popular and important.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The t w o most widely used methods of representing sol-</head><p>ids are the Conshvctive Solid Geometry (CSG-Rep.) method and the Boundary Representatlm (B-Rep.) method.</p><p>However, free form character of both methods is not very substantial, and they also assume internal homogeneity. On the other hand free form volumes possess per definition a high free form characteristic and describe every interior point as well as every point on the boundary surface of the volume uniquely. No assumption on internal homogeneity or structure is done.</p><p>The definition of free form volumes generalizes techni-CH2!313~2/90/0000/0379/$01 .OO -1990 IEEE</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>379</head><p>The third section of t h e paper illustrates an intersection algorithm, which can be used t o perform intersection operations on free form volumes. A few calculated examples will be given in the fourth section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Bbzier Representations</head><p>A BBzler CUNe</p><formula xml:id="formula_0">X(U) = , i i=O where bi t Rd, of degree I in U is defined by bi Bt(u). U E [O,l] and (1)</formula><p>are t h e (ordinary) Bemstein polynomials of degree I in U.</p><p>The coefficients bi E IRd are called Bezler points. They form in their natural ordering, given by their subscripts, the vertices of t h e BBzier polygon (see <ref type="figure" target="#fig_16">Fig. 1</ref>).</p><p>The Bbzier description of a curve is a very powerful tool because the expansion in terms of Bernstein polynomials yields, firstly, a numerically very stable behavior of all the curve algorithms. This is a consequence of the extraordinary numerical properties of t h e Bernstein polynomials <ref type="bibr">[7, 81.</ref> And secondly, a geometric relationship between a curve and its defining BCzier points (see <ref type="bibr">[lo]</ref>). For example:</p><p>The Bezier polygon gives a rough impression of the BCzier curve (see <ref type="figure" target="#fig_16">Fig. 1</ref>).</p><p>The curve has its endpoints a t bo and b, with tangent vectors defined by bo, b, and b,, b,-l (see <ref type="figure" target="#fig_16">Fig. 1</ref>).  </p><p>I m n i=o i=o k=O Bezier curve of the same degree a s the original one. The Bezier points of these t w o segments are 'byproducts' of the de Casteljau construction for the evaluation of t h e point X(uo). They are given by b; and bb (i = 0 , . . . , I) (see <ref type="figure" target="#fig_0">Fig. 3</ref> ) .</p><p>The subdivision process may be repeated yielding a sequence of polygons. For this sequence of polygons we have the important 1 Approximation property. If the uo are dense in 10.11 the sequence of polygons converges t o the curve.</p><formula xml:id="formula_2">surfaces x(''v) (see Fig' ' )</formula><p>can be defined by the   By reason of t h e tensor product definition the properties of (rational) Bezier surfaces (see <ref type="bibr">[6]</ref>, <ref type="bibr">[lo]</ref>, <ref type="bibr">[213 and volumes (see [121, [14]</ref>, Cl511 are similiar t o the ones for curves and can easily be deduced from properties of t h e underlying Bezier curve scheme (cf.  Also, as a consequence of the tensor product definition algorithms in U, in v and in w, like the de Casteljau construction and derived ones, as segmentation, commute, and t h e result is independent of the order.</p><p>Beside the vector valued parametric representation (5).</p><p>where bilk 6 R3, a function valued non-parametric repre- with bjjk E IF? can be discussed (see e. g. <ref type="bibr">[24]</ref>). The bilk have to be carried up now as ordinates over the over the abscissae <ref type="bibr">(u,v,w)</ref>  </p><formula xml:id="formula_3">abscissae (+,+,*) E [0,11 x [O,ll x [O,ll.</formula><formula xml:id="formula_4">E [0,1] x [O,l] x [O,l]</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Intersection Algorithm</head><p>Volumes - <ref type="figure">Figure 8</ref> gives an examplecan be visualized by plotting some parameter surfaces, as done in <ref type="figure" target="#fig_2">Figure 5</ref>, and in <ref type="figure">Figure 9</ref>. Because of t h e 3-dimensional character of volumes, but only 2-dimensional drawing ability, pictures can easily become difficult t o survey, badly arranged and unclear. This is especially true for 'real life objects', i.e. objects which have t o be described by volumes of higher polynomial degree o r by spline volumes. In t h a t case planar sections (e.g. cross or longitudinal sections or a series of one of these two) can provide an alternative visualization method. Planar sections might be also useful in addition t o the visualization of parameter surfaces. For example if there is the need for a perspective drawing of a volume, and in addition the need for a accurate-scale reproduction of certain parts of the volume. The first property is intrinsic t o plotting a perspective view of some paramet e r surfaces, the second, for example, t o the computation of planar sections of a volume. Finally, the integration of free form volumes into a solid modeller s y st e m makes sense only if operations like planar or arbitrarily curved sectioning can be performed, or even more general intersections of free form volumes, e. g. boolean operations on t w o free form volumes.</p><p>the (rational) Bernstein-Bezier representation of volumes. This is indeed not a great restriction, because the properties t h a t are basic t o the algorithm also exist for the (rational) B-spline representation. On the other hand, a B-spline representation can be redefined in a Bezier representation <ref type="bibr">[lo]</ref>. The (rational) B-spline-Bezier representation of curves, surfaces and volumes became the de facto industry standard in CAGD during the past years.</p><p>The algorithm itself can not only act as a main program, but also can be used as a subroutine for algorithms which are able t o calculate more general intersections, e.g. boolean intersection operations on t w o free form volumes. The idea will be described for the case of creating a cross section of a volume. A cross section is defined as a planar section which is done orthogonally t o the longitudinal axes of the volume (see <ref type="figure" target="#fig_16">Fig. 10</ref>). Therefore, an algorithm has been formulated, which is able t o create planar and also arbitrarily curved sections of free form volumes. The algorithm is based on A user specified number of inner parameter surfaces varying in direction of the longitudinal axes is getting checked for intersection with the plane. If there is any intersection i t is calculated. Additionally the six boundary surfaces of the volume are checked f o r intersection with the plane.</p><p>A pseudo code of the algorithm therefore is simply written as given in <ref type="figure" target="#fig_12">Fig. 11</ref>. The core of t h e algorithm is t h e subroutine <ref type="figure">INTSEClb,,, b,,)</ref> which has t o be linked into t h e main program <ref type="figure">. INTSEC(b,,, b,,)</ref> has the ability of calculating and plotting all the intersection curves between a parametrically defined arbitrarily curved surface and a plane. The procedure is the same in principle, if t h e volume has t o be sectioned by planes parallel t o t h e longitudinal axes, o r by planes in arbitrary position. o r even for the intersection of the volume with an arbitrarily curved surface. Thus, the algorithm can handle all these more general cases, if there is a suitable algorithm available, which is able t o find all the intersections curves between t w o parametric surfaces. Applications where we m i g h t need The underlying idea of the algorithm is t o deal with the Bezier net, instead of the surface description itself. The mathematical foundations of the algorithm are the well known relations between BCzier polygon and Bezier curve, listed above in section 2, which are also valid for surfaces (and volumes).</p><p>Both surfaces are repeatedly subdivided, yielding a t the same time a subdivision and refinement of the net, until a fine mesh is obtained and the surfaces can be approximated by planar polygons defined by these subdivided nets. This procedure reduces the problem t o a number of plane-plane intersections that can be handled easily. Subdividing the whole surfaces in each algorithm s t e p is relatively time-consuming and needs a lot of storage space. Therefore, in addition an estimation of the intersection region is done (divideand-conquer 8b'atxgy). which results in a drastic acceleration of the algorithm and reduction of storage space. with marching algorithms, might be t h a t they are more time-consuming because of the subdivision process. But the great advantages of t h e divide-and-conquer algorithms are that;</p><p>they are very user-friendlythere is no need t o worry about 'suitable' starting points ; they find independently, without any interactive disruption t o the user, all intersection curves within the specified tolerance; they can be formulated easily for arbitrary polynomial degree and for rational and non-rational representations; and they are numerically very stable because of the extraordinary numerical properties of the Bernstein polynomials C71, [SI.</p><p>Because of these favorable properties of the intersection algorithms based on the B-spline-Bezier representation using divide-and-conquer methods and because parameter and boundary surfaces of Bezier volumes are Bezier surfaces, we are using an intersection algorithm of this kind <ref type="figure">in INTSEC(b,,, bp,I</ref>.</p><p>quired by the level of accuracy needed. After each subdivision, four new subsegments are formed, each corresponding t o a smaller convex hull. When more and more subdivisions are done, each convex hull becomes smaller and smaller, while the surface topology near the intersection curve isaccording t o the approximation property listed in section 2reasonably closely approximated by the nets of the subsegments (see <ref type="figure" target="#fig_13">Fig. 12</ref>). adaptive[y into four subsegments using de ~~~~~l~~~. segmentation procedure. This yields a t the same time a refinement of the Bezier nets (cf. with <ref type="figure" target="#fig_6">Fig. 7)</ref>. A mlnmax box defined by the maximum and minimum x, y For calculating the intersection curve, three polnt segand z coordinates of the surface segments defining ments are created, each one defining a planar triangle</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTSEC(b,,, bp,I subdivides both surfaces of interest</head><p>Bezier points is built up for every surface segment. I t patch. After this a plane-plane intersection is carried is clear t h a t a surface segment is enclosed totally in out f o r every t w o planar triangle patches of different its associated min-max box because this encloses by surfaces but of the same interference index. Note t h a t definition the convex hull of the surface segment. A t w o triangle patches might have an intersection line comparison using min-max boxes instead of the convex but they do not have to. To see this, remember the hulls is certainly rougher, but much more easily han-separability t e s t compares the min-max boxes only. If a dled and quickly practised. line segment of the intersection is found, it is stored in a database. This database provides the intersection The boxes of the t w o surfaces are then compared with each other in a so-called separability test (see <ref type="figure" target="#fig_13">Fig. 12</ref>).</p><p>Those subsegments whose boxes do not intersect any box of the other surface will no longer be considered. Only those subsegments whose boxes can not be separated from t h a t of their rivals will be dealt with further. For this, Bezier points of pairs of interfering box- <ref type="figure" target="#fig_0">Figure 13</ref> gives an example of a cross section. In <ref type="figure">Figure   es</ref> of different surfaces will be provided with an sub-13a a 3D-view and in <ref type="figure" target="#fig_0">Figure 13b</ref>  The algorithm also has the capability of computing curved sections. <ref type="figure" target="#fig_3">Figure 16</ref> illustrates the generation of of the same interference index will all go through the algorithm subroutines.</p><p>The de Casteljau subdivision process, the min-max box a bore hole. The bore hole is actually not really circuformation and the separability t e s t are connected by an lar, for i t is defined a s a Bezier spline surface build up algorithm loop, which will be done a s often as is re-by four biquadratic (polynomial) Bezier surfaces. Visualization of large data sets is becoming more and more important. Just recently there is a strong increase in interest in higher dimensional, multivariate subjects like volumes and hypersurfaces of Rd (d &gt; 3). Obviously, with that, visualization problems have t o appear:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Summary and Conclusion</head><p>n-variate representations with n &gt; 3 conceal themselves from our imagination, additionally real-world 3D-segments, i.e. solids, volumes with internal structure, free form volumes so t o speak, on which this paper is based, are difficult t o visualize in a clear and easily t o surveyable way. This is because of the 3D-character, the spatial dimension of free form solids, but only 2-dimensional drawing ability.</p><p>Trivarlate vector valued representatlons can be visualized by plotting a few parameter surfaces of the volume as it was done in <ref type="figure">Figure 9</ref> (see also <ref type="bibr">[41, [91)</ref>. Trivariate vector valued representations can be understood as a mapping of t h e unit cube of (u,v,w) parameter space into R3. They define solids (with internal structure) in the common understanding. The described strategy works fine for volumes of low polynomial degree, and for spline volumes of not t o o many volume segments. Otherwise, i.e. f o r high polynomial volumes o r spline volumes built up by a large number of segments, the pictures easily become difficult t o survey or badly ar-  tion of trivariate scattered data interpolants. Adaptive contouring of a piecewise polynomial trivariate interpolant defined with respect t o tetrahedrons has been described in <ref type="bibr">[la]</ref>, generalizing a method given in [17] for 3-dimensional surfaces. In <ref type="bibr">[ZS]</ref> an algorithm is presented which calculates and plots contour surfaces of a function of three variables, under the assumption that datas are given evenly on a regular net. Contours of 4-dimensional surfaces are also useful for surface design in IR3. In C231 algebraic design surfaces are defined implicitely a s contour surfaces of level zero of hypersurfaces of R~.</p><p>On principle many differently defined quantities can be used too, t o visualize hypersurfaces of lR4. For example <ref type="bibr">[ZZ]</ref> examines isophote surfaces, generalizing the idea of isophote lines, i.e. lines of equal light intensity, of a surface of I R~.</p><p>Finally, we would like t o note that color rendering can improve graphic quality of drawings of hypersurfaces and volumes substantially (see <ref type="bibr">[ll, 131, [41)</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">References</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 3 .</head><label>3</label><figDesc>D e Casteljau Construction Fig. 1. Quintic BCzier curve1 Convex hull property. The Bezier curve lies completely within the convex hull of its Bezier polygon (seeFig. 2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>03Fig. 2 .Fig. 4 .</head><label>24</label><figDesc>Convex hull property 1 The curve point X(uo), for any uo E [0,1], can be computed by repeated de CastelJau steps by the recursion formula (see Fig. 31 bP,(Uo) (l-u0) Va-'(uo) + u0 Va+l(~o) Bicubic BBzier surface and Bezier volumes X(u,v,w) (see Fig. 5) by the tensor product of three curve schemes, i.e. by where b : = bm and X(uo) = b:. The point X(uo) subdivides a Bezier curve into t w o Cm-continuous segments. Each segment is again a X(u,v,w) = C bijk Bj(u) B;"(v) B;(W).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 5 .A</head><label>5</label><figDesc>Triquadratic BBzier volume, defining BBzier points tensor product of t w o curve schemes, i.e. by and grid. The boundary surfaces and some parameter surfaces (inclusive parameter Lines) of c o n s t a n t v-value (v = 0, i, 5 , a. 11, of t h e volume are shown. On t h e t o p rational Bezler curve can be defined by where are t h e raUonal Bernsteia polynomlals of degree I in U with weights 8, E IF? [19].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6</head><label>6</label><figDesc>compares t h e (ordinary) Bernstein polynomials B:(u) and the rational Bernstein polynomials R:(u) with 8, &gt; 0, f o r all i. If we demand Pi &gt; 0, f o r all i, we have all the properties and algorithms f o r rational Bezier curves which we have for ordinary, i.e. f o r non-rational curves [SI. Modifying (4) and (5) analogously t o (6) results in ratlonal Bezler surfaces and volumes [6], ClSl, [21].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig</head><label></label><figDesc>Fig. 6. Ordinary and rational Bernstein polynomials o f degree four: (Bo. . . . , B4) = (1, 3. 2, 5 , 1)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7</head><label>7</label><figDesc>gives an illustrative example of the approximation property in case of a biquadratic Bezier surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>sentationFig. 7 .</head><label>7</label><figDesc>Three s t e p s of t h e de Casteljau subdividing process, each time halving the U and the v parameter interval</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>define a hypersurface of R4, called tensor product Bezler polynomialbriefly TPB polynomial. All the properties and algorithms f o r vector valued, parametrically defined representations are also valid f o r function valued, non-parametrical ly defined representations. Trivariate Bezier representations have been discused in detail in [12], [l5].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig</head><label></label><figDesc>Fig. 8. Triquadratic volume</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig</head><label></label><figDesc>Fig. loa. Idea o f t h e algorithm</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>n o n -p l a n a r s e c t i o n s a r e t h e c r e a t i o n of b o r e h o l e s , of g r o o v e s o r boolean operations on t w o free form volumes.Now, both t h e boundary surfaces and the parameter surfaces of a volume in Bezier representation are Bezier surfaces again. Consequently, the subroutine t o calculate t h e intersection of two parametrically defined arbitrarily curved surfaces can be formulated specially for surfaces in Bezier representation[l2]. A short summarizaton of the algorithm will be given in the following (for a more detailed description see[12],[131):</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>AFig. 11 .</head><label>11</label><figDesc>disadvantage of the subdivision, and even of the more advanced divide-and-conquer algorithms compared bilk are the BCzier points of the BBzier volume bpq BCzier points of intersecting BBzier surface N number of parameter surfaces being checked for being intersected by the Bezier surface check boundary surfaces U = 0, 1 for intersection for i = 0 and for i I d o begin for r = j = 0 to m do for s = k = 0 to n d o set brs = bijk end call INTSEC(brs, bpq) end check boundary surfaces v = 0.1 for intersection for j = 0 and for j m d o begin for r = i = 0 to I d o for s = k = 0 to n d for k = O ' a n d for k = n d o begin for r = i = 0 to I d o for s = I = 0 to m do begin s e t brs = bijk end call INTSEC(brs, bpq) end check parameter surfaces U = uI for intersection for I = 1 to N -1 d o begin set U = I/N for r = j = 0 to m d o for s = k = 0 to n do Pseudo code of t h e intersection algorithm</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 12 .</head><label>12</label><figDesc>The BBzier matrix of a biquadratic segment and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>a plan view of the script called interference index. By this a list of pairs cross sectioned volume of Figure 9 is given. Figure 14 of segments of different surfaces which might interfere shows a longitudinal section and Figure 15 a series of is created. In t h e following, Bezier points, i.e. segments the possible resuits after having done one more s t e p o f the divide-and-conquer loop each time i s illustrated for further operations, 4. Examples longitudinal sections of the same volume.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig</head><label></label><figDesc>Fig. 13a. Cross section (3D-view) Fig. 13b. Cross section (plan view)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 1 4</head><label>1</label><figDesc>. Longitudinal sectionThis current paper gives an algorithm t o perform an</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 15 .</head><label>15</label><figDesc>Series of longitudinal sections Fig. 16. Bore hole alternative graphic representation of free form volumes by computing sections. This is by the way quite an old idea, which has been put into practice in the medical field f o r a considerable period of time. The formulation of the algorithm also allows the calculation of arbitrarily curved sections of a free form volume. This might be of interest in connection with boolean intersection operations on free form volumes. Trivarlate function valued npnsentatlons define hypersurfaces of R4 and exceed our direct imagination, view and a r t of representation. Alternatives of presentation are, first, visualization by drawing some surfaces of constant parameter values (Isoparameter surfaces, briefly parameter surfaces), and second, drawing of contour surfaces, i.e. surfaces of a certain and fixed function value. The former corresponds t o drawing curves of constant parameter values, i.e. parameter lines, and the latter corresponds t o contouring known from cartography, in case of a surface of R3. Surfaces of constant parameter value have been used in [9] and contour maps have been used in c11, C21, [31 f o r the visualiza-</figDesc></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
