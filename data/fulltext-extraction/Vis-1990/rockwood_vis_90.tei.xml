<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Accurate Display of Tensor Product Isosurfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alyn</forename><surname>Rockwood</surname></persName>
						</author>
						<title level="a" type="main">Accurate Display of Tensor Product Isosurfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A general method for rendering isosurfaces of multivariate rational and polynomial tensor products is described. The method is robust up to degree 15, handling singularities without introducing spurious rendering artifacts. It is based on finding real roots of a polynomial in Bernstein form. This makes it particularly suitable for parallel and pipelined processing. It is envisioned that the tensor products will be used as approximants or interpolants for empirical data or scalar fields. An interpolation scheme is given as an example.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>We consider the problem of accurately depicting the isosurface of rational or polynomial tensor products f:</p><p>Rn + R (especially for n = 3). For smooth functionals such as these, the Implicit Function Theorem <ref type="bibr" target="#b14">[16]</ref> will guarantee that the isosurface f -' ( T ) , T constant, is a smooth manifold of dimension n-1, except at points where the derivative off is zero. Where the gradient is singular the isosurface may fail to be dimension n-1 or it may kink. These are typically the points where traditional rendering methods ( 111, U], <ref type="bibr">[31,</ref><ref type="bibr">[81,</ref><ref type="bibr">[111,</ref><ref type="bibr">[HI,</ref><ref type="bibr">E191</ref> 1 are vulnerable to inaccuracies and prone to generate unwanted artifacts. For efficiency these methods usually depict a surface by linearly interpolating between relatively few evaluated points, producing polygons which can be easily displayed using graphics hardware. The polygonalization itself may be misleading, however. Topological features may be incorrectly depicted: disconnected branches may be c o~e~t e d , connected surfaces may be separate, holes may be missed, creases in the surface may appear smooth etc. Unfortunately, these singular points and topological features usually constitute the areas of greatest interest to the investigator.</p><p>To minimize false cues, we develop a general rendering method which depends only on points evaluated directly on the isosurface. Evaluation of the points must, therefore, be robust and efficient. In the case of rational or polynomial functions, parallel and pipeline processing techniques and hardware should enable the direct evalution of the surface at sufficiently many points to achieve dynamic display of the surface without the danger of false rendering cues. We investigate a method to accomplish this for functions in tensor product form.</p><p>Such functions can be used to approximate or interpolate other functions or empirical data sets. Our approach does not to solve the problem of singularities in general, but it removes the problem from the rendering domain to the interpolation/approximation domain. We believe that this is appropriate. When the problem occurs in the display, the user may not have any indication of i t existance.</p><p>After giving preliminaries in Section 2, the basic rendering methods are described in Section 3. A discussion follows in Section 4. An implementation that includes an interpolation scheme is related in Section 5 and Section 6 is the conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Preliminaries</head><p>The explicit Be'zier curve of degree n is the set of points defined by f: R+R , i== where Bn,i(t) is the ith Bemstein polynomial of degree n, and the ri are called the control points of the curve. Various display techniques can be developed that depend mainly on finding the roots of an explicit BCzier curve (1) which itself relies heavily on the de Casteljau algorithm (3). Thus, the reliability and speed of the techniques depend on the de Casteljau algorithm.</p><p>To take advantage of the root finder in the multivariate case (5) we make all but one of the variables 0 0 0 0 constant. Evaluation of the basis functions at the constants (this is also achieved by application of the de in which each element is computed by elements above it in the previous row.</p><p>which parameters vary, sets of points are generated which lie on an isosurface. Careful choice of how the parameters are allowed to vary forms the basis for different rendering styles. We give three examples for a trivariate function</p><formula xml:id="formula_0">F(u, v, 4.</formula><p>(3) from the W O Line Contours Display of the union of the set of points</p><p>The algorithm subdivides the curve at the point t into two curves which are identical to the original curve.</p><p>The control points of the first curve are the starting values of each row in the array; the control points of the second curve are the ending values of each row in the array. For example, rOn is the last point of the first curve and the first point of the second curve.</p><p>The following property [61 is useful for understanding the root finding algorithm: Let f(t) be a Btzier curve, then</p><p>In other words, the 2 dimensional BCzier curve with equally spaced control points (ri, iln) along the r axis is exactly the graph of f(r).</p><p>The BCzier curve (1) can be generalized to more dimensions by forming a tensor product from it; thus a function of m variables is given by '1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>' I</head><p>The coefficients in (1) and (5) can be generalized to vectors which generalizes both forms from scalar to vector functions. We concentrate on scalar valued functions in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Rendering Methods</head><formula xml:id="formula_1">V E { ( U * , v., w ) I ui = ui-1 + cstep, v, = vi -1 + and Wm ( (ui, v, w . ) I ui = ui-1 + cstep, w, = w, -1 +</formula><p>results in a set of contour lines of the isosurface F~(T). T is called the threshold The contour lines are separated in the U direction by a distance cstep. The value pstep is chosen so that the points are typically close enough together to appear as a solid line. In particular, points in W with tangents to the contour that are within 45" of parallel to the w axis are guaranteed to appear solid.</p><p>Similarly, points in V with tangents to the contour that are within 45" of parallel to the v axis are guaranteed to appear solid. Figures 1 shows a stereo pair of a contoured isosurface. The contours are color coded based on U.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">J</head><formula xml:id="formula_2">psrep and F (ui, v, , w ) -T = 0 ) J pstep and F (ui, v, w.) -T = 0 ) J Weave Surface W1 = ( (u.. v., w ) I ui = ui-l + pstep, vi =vi -1 + pstep and F (u., v., w ) -T = 0 ), 1 J W2 = ( (ui, v, w -) I ui = ui-1 + pstep, w, = wj -1 + pstep andF (ui, v, w,) -T = 0 ), V 1 m ( ( U , vi, wj ) I vi = vi-1 + pstep, w, = w, -1 + psrep and F ( U , vi , wj ) -T = 0 ) and V2 = ( (U, , v, w . ) I ui = ui-1 + psrep, w, = w, -1 + pstepandF(ui, v</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>, w , ) -T = O )</head><p>The union of the set of points  saturates the surface to a resolution pstep and can be used to generate solid images of the isosurface. (Notice that pstep has been substituted for csrep in the previous method.) In <ref type="figure">Figure 2</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Smooth Shading</head><p>Using the same set of points as in the weave technique above, except that pstcp is smaller in order to saturate the z buffer to the pixel level, we can create smooth shaded images of the isosurface by coincidently generating the gradients of the points. The three partial derivatives that form the components of the gradient are themselves given by BCzier volumes and they can also be detefinined by application of the de Casteljau algorithm to the gradient functions. The unit normalized gradient vector is the isosurface normal at the point. It can be used in any standard lighting routine to illuminate the function, although singular gradients must be handled exceptionally. Hidden surf= elimination is accomplished by z buffering. <ref type="figure" target="#fig_7">Figure 3</ref> shows a stereo pair of a smoothly rendered isosurface.</p><p>The saturation density is chosen to avoid gaps in the surface using a simple extension of the view-based stepsize formulas in <ref type="bibr" target="#b11">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Root Finder</head><p>Finding the roots of a univariate Bkzier curve is the critical process in all of the display techniques. We have therefore developed a method for finding all roots of a polynomial in Bernstein form; a method which is robust up to a moderate degree and amenable to distributed processing for speed. One part of the method employs the If i=O or i=n-1, then the estimate is exactly the same as in Newton's method. This follows since the BQier control polygon is tangent to the curve at t=O and el [61.</p><p>In the other cases, the polygon is typically closer to the curve than the tangent and is usually a better estimate of the root. If all control points are above or below the axis, i.e. there is no sign change in adjacent pairs, then there are no roots of the polynomial in the interval [0,11.</p><p>The Root Finder Algorithm iterates by subdividing the curve at the estimate, using the de Casteljau formula (3) to generate two new sets of control points for the left and right curves, denoted below by Li's and Ri's respectively. The left curve is investigated for roots by checking the signs of adjacent pairs of values. If the= is no root, the right curve is investigated. Convergence is assumed when the function is less in absolute value than a given resolution. RES. To track the root in the original parameter space it is necessary to compute an actual mot, ActRoot, and a current root, CurRoot. The latter is relative to the current subdivision. Scale is the scale factor which relates the current subdivision to the original curve.</p><p>We perform a special subdivision whenever the estimate approaches a given tolerance E. The special guess avoids a precision problem when CurRoot (6) is smaU and it usually results in a subdivision which significantly contracts the curve, improving convergence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Root Finder Algorithm:</head><p>Finds the smallest r in [0,1] such thatf(r) = 0 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Initialize:</head><formula xml:id="formula_3">Li = ri , Ri =1 for i = 0.1 ,..., n. ActRoot = CurRoot = Scale= OldCRoot = 1 .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Test convergence:</head><p>If IRd &lt; RES, then output ActRoot and End.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Find crossing:</head><p>Find k such that LA Lk+l&lt;o fork = O,l,..,n-l. If no such k is found then go to step 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Guess:</head><p>CurRoot = k/n + Lk/(n( LA -Lk+1 )).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Special guess:</head><p>If Lk/("( Lk -Lk+1)) &lt; E. then CurRoot = k/n+ E.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">de Casteljau:</head><p>Evaluate Lk's with (3) at CurRoot; new Lk's and Rk's are generated. Scale = Scale*OldCRoot,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Find crossing:</head><p>Find k such that RA RA+~&lt;O for A = O,l,..,n-1. If no such A is f d then output "no roots" and End a. Guess: CurRmt = A/n + RA/("( RA -Rk+l)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9.</head><p>Specialguess: If R&amp;(Rh-Rk+1)) &lt; e, then CUrRoot = k/n+ E.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">de Casteljaw</head><p>Evaluate RA's with (3) at CurRooc new LA'S and RA's are generated. Scale = Scale*( l-OldCRoot), ActRoot = ActRoot +Scale* CurRoot. Go to step 2.</p><p>Befare giving the algorithm that finds all real mots we prove a critical deflation formula Lemma 1. Let P(r) = r at) where then n j = 0, ..., n -1 .</p><formula xml:id="formula_4">- Qj --j + 1 Pj+l '</formula><p>Proof. Note that P(0) = 0, implying po = 0, which means that the indexing of the summation of P(t) can startati=l. Leti=j+linQ(t),then =rQ@.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Equating Coefficients yields</head><p>The conclusion is derived by solving for qi-1 and substituting j+l back fori.   behavior has been confirmed by experience on curves up to degree fifteen; iteration to 32 bits usually occurs in six to seven steps. The occasional special subdivision does not change the overall rate of convergence. The only case experienced in which convergence is less than quadratic is when the root is highly multiple. The time-critical computation is the evaluation of the function and the subdivision of the curve using the de Casteljau algorithm algorithm by computing each row of the array in parallel. One such implementation is described by DeRose [5], for instance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>/Ill</head><p>With regard to Farouki's second criticism, the quadratic convergence of the routine minimizes the impact of successive subdivisions "slipping" coefficients. Finally, after convergence, the original curve can be evaluated at ActRoot before deflation to test for any slippage and "purified," if needed, by another call to the Root Finder Algorithm for the appropriate part of the subdivided curve. We have not found it necessary to implement this feature.</p><p>Quadratic convergence of the All Roots Algorithm is guaranteed by the quadratic convergence of the Root Finder Algorithm. Convergence is actually superquadratic because the deflation successively lowers the polynomial order. Tests conducted by Spencer and <ref type="bibr">Sederberg [17]</ref> indicate that the All Roots Algorithm is as fast or faster than other "Bemstein" Root Finders up to degree 7, except for the resultant method of Sederberg which is faster up to Spencer's implementation evaluated the decasteljau Algorithm in serial. With parallel implementations the algorithm should be competitive to a much higher degree, although degree 7 is more than satisfactory for most interpolations (see Section 5).</p><p>The most ill-conditioned part of the algorithm is due to the deflation formula. Thej* coefficient is multiplied by n!/((j+l)!(nj -l)!) where the degree is n. If the Root Finder Algorithm yields coefficients with the maximum accuracy of double precision bits, then theoretically the illconditioning of the deflation formula will not present an accuracy concem for graphics until n = 13. Spencer tested the algorithm on numerous pathological cases, including Wilkensen's polynomial, and found reliability in double precision up to degree 15. The method first begins to exhibit the effects of truncation errors with degree 15 and higher order polynomials that have clusters of multiple or near roots.</p><p>4. An Implementation.</p><p>We can interpolate to a regular, ie cuboidal, lattice of points with a generalized tricubic Hermite scheme. It quires function values at each point along with certain partial derivatives. If g is the function to be approximated, gxyz. If only sampled data are available, then the partials can be approximated by central differences, resulting in an 8 to 1 data compression. The Hermite interpolation guarantees differentiability between different cuboids.</p><p>There are eight pieces of information at each vertex point; thus there are 64 degrees of freedom for a cuboid. By solving the simultaneous equations which arise from setting the Hermite form of the cuboid equal to the B6zier form, we obtain the following formulae for converting from Hermite to B6zier form on the unit cube, that is we solve for Bbier coefficients bijk, 0 I? i j , k I 3 for all combinations of x, y and z equal to 0 or 1: the necessary Pare gx. gy, g,. gxy, gxz. gyz and Formulae for other cuboids are easily derived by translations.</p><p>If we want to =fine the interpolation, we apply the de Casteljau algorithm recursively, in each variable, on the B&amp;er form of the cuboid subdividing it into eight. The 64 values about their common (interior) vertex can be replaced by a new function value and derivatives in Hemite form and then converted to &amp;ier fonn using the appropriate part and translation of (7).</p><p>In the univariate case, convergence of Hermite interpolation involving one derivative is excellentorder O(P) (see <ref type="bibr">1441, p.67)</ref>. This is the case along the edge of one of the cuboids when it is subdivided. We have not yet worked out the convergence in the interior, but note that higher order derivatives are utilized there than along the</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>edge.</head><p>The entire process above should be thought of as a preprocess to the rendering algorithm which nxeives only independent B&amp;er cuboids to display. It is one approach to the general problem of interploation. Many others exist. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusion and Future Work</head><p>The methods given assume an acceptable tensor product approxjmation of either sampled data or of scalar fields too complicated to compute everywhere. If the component degree of the tensor product is less than 15. we guarantee a cofzect rendering of the isosurface at any given threshold. Many mdering styles can be derived from the basic method. The method depends heavily on the de Casteljau algorithm at all levels; an algorithm easily accelerated by -el techniques or hardware. There are many directions to deepen and extend this work. We have not yet mentioned rational functions, for instance. The B6zier curve (1) and its tensor product generalization (5) can be further generalized to the rational case [6]. Since the methods described in this paper depend on fmding roots, it is straightforward to extend them to the rational case by finding the roots of the numerator of a rational function. This supposes, of course, that any poles of the rational function are avoided. It is possible to bracket the poles on a rational Bhier curve by subdivision and then to find the roots of the numerator on the subsequent subintervals.</p><p>A straightforward application of the these techniques can be made to the algebraic surfaces such as described by Sedexberg in <ref type="bibr" target="#b12">[14]</ref>, although our approach would be limited in accuracy to surfaces of degree less than 15.</p><p>Antialiasing seems to be addressed best by jittered sampling at a subpixel level and then fdtering to the pixel level. If this works then we can envision a reasonable method to create transparent surfaces with an Accumulation Buffer <ref type="bibr" target="#b7">[9]</ref>. Vector valued functions may be depicted by superposition of the components as scalar functions using eithex contouring ar transparency.</p><p>The approximation problem is the classical one. A large body of literam and experience is available for use.</p><p>Of special interest to the visualization problem are techniques that depict the confidence of the approxidon in juxtaposition with the rendering.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>point t is given recursively by The de Casteljau algorithm [6] for evaluating ( 1 ) at a CH2913-2/90/0000/0353/$01 .OO -1990 IEEE ' 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1 1 0 whereri = r. ( 3 )</head><label>103</label><figDesc>Casteljau algorithm) and multiplication of the coefficients results in new coefficients for a B6zier curve. By changing ro (= (l-t)F+t(il fori = 1 ,... ,nandi=l,... p j , The value '0" is f(t). The algorithm is modelled by the systolic array, ro r1 .... . . . ... ' n -1 'n n-1 . . . . . . . . . . . .r .. . . . . . . . .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 .Figure 2 .Figure 3 .</head><label>123</label><figDesc>Contour display of isosurface of a triquadratic function (stereo pair). (Color Plate 175, page 489) "Berber weave" rendering of an isosurface of a tricubic function (stereo pair). (Color Plate 176, page 489) A smooth shaded isosurface (stereo pair).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .Figure 5 .Figure 6 .</head><label>456</label><figDesc>Test case for rendering isosurfaces. Disconnected surface of equipotential. Connected surface of equipotential (Color Plate 180, page 489)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Root Finder Algorithm described in [13] to find the smallest root in r of f(r) in the interval [0,11. Because of its importance within the display method, a description is leproducedhere.A reasonable estimate of the smallest root of f(r) h m (1) is the value of t where the control polygon first crosses the t axis. If i is the smallest value such that riri+l&lt; 0, them the estimate of the root is</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>All</head><label></label><figDesc>Roots Algorithm: Finds all real mots of f(r) in [0,1]. 1. Use the Root Finder Algorithm to find the smallest root in [OJI. 2. Subdivide curve at root using the de Casteljau algorithm (3).3. Deflaterighthandcm (t = 0) using Lemma 1:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4</head><label>4</label><figDesc>shows the null threshold of a tricubic polynomial. In B&amp;ier form, adjacent coefficients, ie those which differ by one in only one index, alternate between 1 and -1.Any Szier curve obtained by setting two of the parameters to constants possesses exactly one inflection point or is trivial. At the axial planes at least one of the partial derivatives is zero, at the axes at least two of the partials are zero and at the origin all derivatives to all arders are zem. It is a very unstable surface in the sense that a small perturbation in any of the coefficients . Traditional produces a radically Merent null i s m d k e methods for r e d i n g isosurfaces are unable to determine the correct topology of this surface and often generate points that are far from the surface. With regard to speed, the contouring method of Figure 1 requires from 2 to 5 seconds on an IRIS 4D/70GT for completion. This is a 10 mips RISC processor. The woven surface pictures of Figures 2 and 3 needed one to two minutes for completion. About half the time was used to compute the points and the other half was a consequence of the numerous polygons displayed. The smooth shaded pictures tend to be in the 10 to 20 minute range. Distributing the computations is possible at several levels.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>( 3 )</head><label>3</label><figDesc>. It is an o(n2) algorithm. It can be adapted as an ~( n )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>degree 3 .</head><label>3</label><figDesc>These methods include Lane and Riesenfeld [ 101, "Fat Arcs" and the convex hull methods of [15] and Rajan's method [ 121.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 5</head><label>5</label><figDesc>and 6 shows an approximation to the equipotential surface of two equal point charges at two threshold values. The surface is a composite of many polynomial cubes, since a single cube cannot adequately approximate the surface. The two threshold values are chosen on either side of a bifurcation point, an especially difficult region to depict.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>The hidden surface is resolved by t buffering. Because the spheres are actually faceted approximations (16 per hemisphere) with fixed orientations in space, the mild curvature on the surface induces Moire patterns. Recent graphics workstation include high quality spherical rendering primitives that should ameliorate this problem without loss of efficiency. Note that this surface exhibits several non-manifold points where the d a c e creases and tears.</figDesc><table /><note>each point is the center of a small sphere. Rendering the spheres induces a "Berber weave" texture on the surfhce.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>independently and in parallel. Finally, at the coarsest granularity, each Ekbier cuboid can be computed in parallel. Real time display of the iwsurfam is achievable with current processing power utilized in parallel.Because of its importance to the method, the All Roots Algorithm deserves a somewhat detailed discusSion. It is better to compute roots with a procedure that refers only to the original specification of the polynomial.As noted before, the Root Finder converges quadratically as with Newton's method, i.e. O(log24. This</figDesc><table><row><cell>polynomials.</cell></row><row><cell>computed with cost O(n2) operations for convergence to d binary</cell></row><row><cell>digits; and second, successive subdivision compounds</cell></row><row><cell>errors in the coefficients of the successively generated</cell></row></table><note>The de Casteljau algorithm, as mentioned before, can be distributed as a systolic array. Each W e r curve derived by making different variables constant can beFarouki [7] notes two deficiencies with this type of algorithm: fmt, it requires O(4 subdivision stages, each</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Silicon Graphics Inc. support for this project is appreciated. Several colleagues have also offered assistance: Paul Haeberli lent some code for rendering spheres and Rosemary Chang was the first to prove the deflation lemma. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Conversion of Complex Contour Line Definitions into Polygonal Element Mosaics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sederberg</forename><forename type="middle">H N T W</forename><surname>Christiansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Compurer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="187" to="192" />
			<date type="published" when="1978-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Three-dimensional Display System for Diagnostic Imaging Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Conqwer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="13" to="19" />
			<date type="published" when="1983-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Publications</forename><surname>Inc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">Y</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The Triangle: A Mulitprocessor Architecture for Fast Curve and Surface Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Si Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Holman</surname></persName>
		</author>
		<idno>TR-87-08-07 Univ</idno>
		<imprint>
			<date type="published" when="1987-08" />
			<publisher>Dover</publisher>
			<pubPlace>Washington, Seattle, WA</pubPlace>
		</imprint>
	</monogr>
	<note>Interpolation and Approximation</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Curves and Surfaces in Computer Aided Geometric Design: A Practical Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">G</forename><surname>Farin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>Academic Press, Inc</publisher>
			<pubPlace>Boston</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Concise Piecewise-Linear Approximation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Farouki</surname></persName>
		</author>
		<imprint>
			<pubPlace>Watson Research Center, Yorktown Heights, NY</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Tech Report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Optimal Surface Reconstruction from Planar Contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Kedem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Uselton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="693" to="702" />
			<date type="published" when="1977-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Haeberli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Akeley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Accumulation *Buffer: Hardware Support for High Quality Rendering</title>
		<imprint>
			<date type="published" when="1990-07" />
			<biblScope unit="volume">24</biblScope>
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Bounds on Polynomials</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Riesenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BIT</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="112" to="117" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Root Isolation and Root Approximation for Polynomials in Bemstein Form</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">V</forename><surname>Rajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Klinkner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Farouki</surname></persName>
		</author>
		<editor>IBM Watson Research Center, R.C. No. 14224</editor>
		<imprint>
			<date type="published" when="1988" />
			<pubPlace>Yorktown Heights, NY</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Tech Report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Real Time Rendering of Trimmed Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rockwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Heaton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Gruphks</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Scan Line Display of Algebraic Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sederberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zundel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Root Approximation of Bemstein Polynomials</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sederberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Spencer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>De Boor</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>in preparation</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Calculus on Manjfolds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Spiv&amp;</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1965" />
			<pubPlace>Benjamin, NY</pubPlace>
		</imprint>
	</monogr>
	<note>171 Private communication with Me1 Spencer</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Isosurf -An Algorithm for Plotting Iso-valued Surfaces of a Function of Three Variables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Humbrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="182" to="189" />
			<date type="published" when="1979-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Data Structures for Soft Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mcpheeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="227" to="234" />
			<date type="published" when="1986-08" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
