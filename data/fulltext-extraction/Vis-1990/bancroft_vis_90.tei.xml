<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FAST*: A Multi-Processed Environment for Visualization of Computational Fluid Dynamics</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><forename type="middle">V</forename><surname>Bancroft</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">A1 Globus Sterling Federal Systems Inc</orgName>
								<address>
									<addrLine>1121 San Antonio Road Palo Alto</addrLine>
									<postCode>94303</postCode>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fergus</forename><forename type="middle">J</forename><surname>Merritt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">A1 Globus Sterling Federal Systems Inc</orgName>
								<address>
									<addrLine>1121 San Antonio Road Palo Alto</addrLine>
									<postCode>94303</postCode>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Todd</forename><forename type="middle">C</forename><surname>Plessel</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">A1 Globus Sterling Federal Systems Inc</orgName>
								<address>
									<addrLine>1121 San Antonio Road Palo Alto</addrLine>
									<postCode>94303</postCode>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">G</forename><surname>Kelaita</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">A1 Globus Sterling Federal Systems Inc</orgName>
								<address>
									<addrLine>1121 San Antonio Road Palo Alto</addrLine>
									<postCode>94303</postCode>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Kevin</forename><surname>Mccabe</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">A1 Globus Sterling Federal Systems Inc</orgName>
								<address>
									<addrLine>1121 San Antonio Road Palo Alto</addrLine>
									<postCode>94303</postCode>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">FAST*: A Multi-Processed Environment for Visualization of Computational Fluid Dynamics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Three-dimensional, unsteady, multi-zoned fluid dynamics simulations over full scale aircraft is typical of problems being computed at NASA Ames&apos; Numerical Aerodynamic Simulation (NAS) facility on CRAY2 and CRAY-YMP supercomputers. With multiple processor workstations available in the 10-30 Mflop range, we feel that these new developments in scientific computing warrant a new approach to the design and implementation of analysis tools. These larger, more complex problems create a need for new visualization techniques not possible with the existing software or systems available as of this writing and these visualization techniques will change as the supercomputing environment, and hence the scientific methods employed, evolve even further. Visualization of computational aerodynamics requires flexible, extensible, and, adaptable software tools for performing analysis tasks. Flexible means the ability to handle a diverse range of problems. Extensible means the ability to interact at all levels of the software hierarchy, either through existing built-in functionality or through the implementation of custom &quot;plug-in&quot; modules. Adaptable means the ability to adapt to new software and hardware configurations through the use of modular structured programming methods, a graphics library standard, and the use of common network communication protocols (like UNIX sockets) for the distribution of processing. * FAST (Flow Analysis Software Toolkit) Developed by Sterling Federal Systems Inc. under contract to NASA Ames Research Center NASA Contract #NAS2-11555. This paper discusses FAST (Flow Analysis Software Toolkit), an implementation of a software system for fluid mechanics analysis that is based on this approach.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Background</head><p>Computational Fluid Dynamics (CFD), involves the use of high speed computers to simulate the characteristics of flow physics. Computational aerodynamicists use CFD methods and solvers to study subsonic, supersonic, transonic and hypersonic (compressible) regimes of flight, in addition to studying incompressible problems within particular systems. Examples of ongoing studies on fullscale aircraft configurations at NASA Ames include the Space Shuttle, F16, and the Aerospace Plane. Specialized areas of research include jet-engine turbine flow, VSTOL and ground effect research, and even flow through an artificial heart. Basic CFD research involves unsteady flow phenomena like vortex shedding and turbulence modelling.</p><p>A flow solver running on a supercomputer must handle input files (finite difference grids, ref. <ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b16">15,</ref><ref type="bibr" target="#b17">16)</ref> that are typically very large. For example, the number of xyz triplets (each represented by three eight-byte floating point numbers) in a 100 x 100 x 100 grid yields a 24 Mbyte file. If complexity is added, or the grid resolution (density of points) must be raised for flow solving to yield acceptable results, the files grow proportionally in size. Once the solver has been run, there are from five to eight variables for each grid node, again, each represented by an eight-byte floating point number. For the 24 Mbyte example, five variables for each grid point yields a 40 Mbyte raw data file. This is a total of 64 Mbytes (grid plus the solution) for this example. The F16 mentioned CH2913-2/90/0000/0014/$01.00 -1990 IEEE previously, which consists of 29 grid zones, is over 108 Mbytes worth of data! (Note: On the workstations these become four-byte IEEE format floating point numbers making the files about half this size)</p><p>Two examples of grid generation programs are: Programs available for visualization of CFD data sets are:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PLOT3D</head><p>A command line driven Fortran program that computes CFD quantities (Buning</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>[7J)</head><p>Allows for the rendering of smooth, wireframe, and function mapped surfaces w i t h a more interactive interface <ref type="bibr">(Plessel[81)</ref> PLOT3D and SURF and allows animations to be created and recorded (h4emtt <ref type="bibr" target="#b8">[9]</ref>) A program for interactive particle tracing (Rogers[l9])</p><p>S U R F</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GAS</head><p>Combines graphics generated from</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RIP</head><p>The software cycle for the creation and and analysis of computational fluids results could be reduced to the following conceptual model:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data generation (Flow solving) Data manipulation (The original data may need to be filtered or t r w e r e d )</head><p>Data abstraction (A graphical object is defined using the h)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data rendering (Viewing on a workstation)</head><p>9 Data interpretation (analysis) Feedback (Perhaps go back to previous phases)</p><p>A problem with the existing CFD software is that it takes a non integrated approach to dealing with the different steps of the CFD process. The grid generation and flow solver programs are involved in the data generation phase. The visualization software is part of the abstraction, rendering and analysis phases. The various programs present the user with different interfaces, and there is little attention paid to the data manipulation and feedback steps. In the current system, large data sets flow from one step to another from disk to ram and back to disk (perhaps from one computer to another), taking on different file formats along the way.</p><p>The design criteria for FAST were:</p><p>Minimize the data path in the CFD process Provide a consistent user interface Allow for quick user feedback Provide an extensible software architecture Provide a quick path through the CFD process Provide libraries and tools so that application modules could be added easily -To isolate 3D viewing tasks from the application Programmer In order to achieve these design goals FAST has evolved into collection of programs that communicate via Unix sockets with a central hub process that manages a pool a shared memory. A fundamental data type is loaded or generated and stored into shared memory (data generation and manipulation), a collection of programs (modules) operate on data and produce additional data (objects) that are also placed into shared memory (data abstraction) .</p><p>The objects are rendered using the fast viewing system (data rendering). Data is analyzed by additional modules or visual inspection (data analysis). Depending on the results of the analysis the user changes input to any of the previous modules (feedback). In addition there is a collection of libraries and utilities that are used to build the application modules.</p><p>The use of shared memory reduces the flow of data in the system. The use of a viewing process relieves the burden of three dimensional interactive viewing from the application programmer. The fact that the fundamental data type(s) reside in shared memory makes it easy to make changes based on the feedback obtained from the analysis phase. Finally the use of FAST libraries and utilities makes it easy to add new modules.</p><p>We are aware of other scientific visualization packages and visualization capabilities in existence and/or under development. These include Visual programming examples like CONMAN (Silicon Graphics <ref type="bibr" target="#b2">[3]</ref>) and AVS (Application Visualization System, S tardent Computer <ref type="bibr" target="#b13">[4]</ref>), and other scientific visualization environments like MPGS (Multi-Purpose Graphics System, Cray Research), and the Personal Visualizer (Wavefront), as well as 'scripting' languages like PVWAVE (Precision Visuals), IVIEW (Intelligent Light), and VISAGE (Visual Edge) to name a few. While FAST is built specifically around the research tasks involved in CFD analysis, these other environments and packages typically take a much more generalized approach towards visualization, for the obvious reason that CFD research is a relatively small part of their intended audience. These systems and environments often require a certain level (a 'power' user, visual programmer, or animation /rendering expert) of skill with computer graphics above and beyond the level of the typical CFD scientist. In researching these other more general approaches, we have discovered that the results (data) get handed off at some point to the 'power' user (or perhaps even computer graphics group or expert) and this person (or group) creates the animations, films or videos. FAST is built around a model where the scientist is the first and last person in the data chain and FAST is a toolset for his environment. This is not meant as a criticism of these other approaches, as the need for generalization dictates the need for this other level of user. It is our belief, though, that the techniques used in FAST presented in this paper would also apply and be very useful in the more general environments.</p><p>Graphics, CPU, and memory handling performance were key considerations in the FAST design and development process. For graphics, a base-line level of what is commonly termed (but undefined) as "real-time" had to be established and agreed upon as acceptable. This was determined to be a minimum of 3 frames/sec for a typical 10-20 Mbyte problem (techniques used for rendering would determine the problem size in this range). This base line frame rate was determined to be essential in visualization of fluid mechanics for understanding the dynamics of the simulations. For the development platform, the Silicon Graphics 4D220/GTX (16 Mbytes memory) this goal was reached and we are very pleased with the current performance level. The targeted platform, the Silicon Graphics 4D320/VGX, is expected to have even higher levels of cpu and graphics performance[ 181.</p><p>We have implemented in FAST new techniques and capabilities non-existent in the previous tools and expanded on others. For example, the colormap editing capabilities were enhanced to include banded, spectrum, dynamic, contour, striped, and two-tone function mapping. Surface rendering includes the ability to 'sweep' planes through the data either grid oriented, arbitrarily oriented, or a contour surface (isosurface). Enhanced titling and labelling features include the use of postscript type fonts and symbols, where typeface, font point size, and style can be specified. The animation capability is substantially enhanced beyond what was available in GAS (Graphics Animation System <ref type="bibr" target="#b8">[9]</ref>). These enhancements include greater control by allowing the ability to edit scenes, views, and objects. Another capability allows for separate scenes to be rendered in separate windows giving the scientisther even more flexibility and animation control.</p><p>At the time of this writing, the software is in Beta testing at NASA Ames Research Center. The typical workstation environment is a Silicon Graphics 4D/GTX Power Series class machine. The Beta release users currently include approximately a dozen CFD research scientists and application programmers. FAST release 1 .O is tentatively scheduled for late 1990. Since this software was developed for the govemment, it is in the public domain, and is available for no charge or a minimal handling fee.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FAST Architecture</head><p>Each separate process communicates through the FAST Hub while managing shared memory and communicating using standard Berkeley UNIX Interprocess Communication (IPC[113).</p><p>The central process of the FAST environment is the Hub module. The Hub module invokes and shuts down the FAST modules yet its main function is to process requests sent by the modules. These requests might be to allocate a segment of shared memory and return the shared memory id, or to delete a shared memory segment. Since the Hub process is always running as long as FAST is active, the data allocated through the Hub remains accessible even when the original process which requested it is terminated. The Hub module is essentially transparent to the user, in that it has no panels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FAST Central</head><p>This is the central module for processing, from the users perspective (Fast Central, <ref type="figure">figure 3</ref>). This is where the graphical data pool generated by other modules is managed and interactively viewed. FAST Central, unlike other FAST modules, runs continuously while FAST is up and running. Other modules can be spawned or shut down as they are needed from the FAST Central module. In addition FAST Central allows object attributes to be set (e.g. transparency, mirroring, line width), scene attributes to be set (e.g. lighting, color map editing, background color), viewing preferences to be set(e.g. toggle axis, mouse axis modes) as well containing the animation control panels. Animator is used to create and record smooth (spline interpolated) keyframe animation sequences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>NAS File InDut</head><p>The </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CFD Calculator</head><p>The CFD Calculator (figure 5) module allows the scientist to attach to the grid and solution data that has been loaded and to calculate a variety of scalar and vector functions for analyzing the computed solution. The Calculator has the appearance and functionality of a real programmable calculator but instead of operating on numbers it operates onfields of numbers (scalars) andfields of vectors.</p><p>Its basic operations (e.g.. +, -, MAG, CURL), are applied to entire fieldseither component-wise or vector-wise.</p><p>For example, + applied to two scalar fields will produce a new scalar field of values that are the sums of the corresponding values of the two operand scalar fields. And LOG applied to a vector field will generate a new vector field by taking the logarithm of each component of the corresponding operand vector. In addition to component, scalar and vector binary operators there are also special operations such as GRADIENT, DIVERGENCE, DOT, and CROSS that apply to entire fields and produce new scalar or vector fields.</p><p>The scientist can select a range of active solution zones on which to operate and use the CFD Calculator to compute about 100 different built-in CFD scalar and vector functions such as Pressure, Enthalpy, Normalized Helicity, Velocity. and Vorticity <ref type="bibr" target="#b17">[16]</ref>. These fields are stored in one of the Calculator's scalar or vector registers. The Calculator can then be programmed with formulas that operate on these fields and produce new ones using the basic operations already mentioned. The CFD Data Panel is used to copy, move, delete, and display information fields (such as min-max) stored in the Calculator's registers. These features, and others, help make the CFD Calculator an interactive, powerful tool that the CFD scientist can use to compute important quantities for analyzing computed solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SURFER</head><p>The SURFace Extractor and Renderer module (figure 6) attaches to grids (loaded by the NAS File Input Module) and scalar and vector fields (generated by the CFD Calculator) and renders grid surfaces as points, lines, vectors, or polygons. These grid surface objects are also stored in shared memory so they can be rendered in the grid coarsening is available to improve interactivity. The user may also set up sweeps, where isolev automatically sweeps the isovalue (or cutting plane location) through all possible values, or within a user specified range. This can be used to get a feel for the entire volume. The marching cubes algorithm [Kerlick,13] is used to generate polygons. Level scalar fields are created to generate cutting planes function mapped by the scalar field of interest. Edge crossings, a faster algorithm, is used to generate points.</p><p>A user selected vector field may be used to draw vectors originating at the crossing points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BZB</head><p>The tracer module (figure 9) is used to compute particle traces and render them as vectors through the flow field. Tracer attaches to a grid and solution and allows the user to interactively select the point of release or rake <ref type="bibr" target="#b6">[7]</ref> from which the traces are computed. The traces can either be computed forward or backward in time as well as allowing the user to selectively save traces. Once traces are saved, a delta time factor may be interactively adjusted through the panel to allow particle trace "cycling". This does the following: 1) create a socket from which to read 2) determine a local port and listen on it 3) create a writeable socket and establish a connection to the hub (using the hub's hosmame and port number which came in as arguments) 4) now send the port number to the hub and 5 ) accept a connection from the hub At the same time, the hub process executes this statement socket-accept-and-establish( sock, module-host,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interactive Visualization Control</head><formula xml:id="formula_0">&amp;wsock );</formula><p>which does the following: 1) create one socket from which to read from all modules 2) accept a connection from the next module 3) read in the module's port number 4) create a writable socket and connect this socket to the module After a two-way connection has been established, both the hub and the module are left with two socket descriptors each. These are used exactly as a fie descriptor is used, one for writing (wsock) and the other for reading (rsock).</p><p>The hub actually stores these descriptors along with other pertinent information, such as module status, in an array of structuresone structure for each module.</p><p>The modules specified for inclusion in the FAST environment are specifically listed in a "run command" file called $HOME/.fastrc. Also included within this file is information about initial placement of a module's main panels, the name of the host where the module resides, and the complete path name of the particular module.</p><p>Once a module has been executed by the FAST hub using the Information sent between a module and the hub (and viceversa) is always preceded by a standard sized structure which contains, the command and four information fields. The necessary information, if any, is then written back to the module, and the flow control takes the hub back up to the point where it can again wait for a request.</p><p>One example of a request that a module might make would be the allocation of memory which may eventually be used by another module. It must fist send a request to the hub to do this. The hub then allocates the memory as a shared memory segment and retrieves the shared memory identifier associated with this segment. This identifier is then stored by the hub in a data structure possibly to be accessed by another module at a later time. Finally this identifier is sent back to the module so that it may attach the shared data to it's virtual memory address space. The code for this example would look as follows: Once the node has been found and attached to, the data in its substructure may be accessed. </p><formula xml:id="formula_1">/* FAST MODULE *</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>NASData;</head><p>The following routine is used to attach to the shared memory id of the vector field and return a "pointer array" that can be indexed like a 4D array on the actual x, y, and z components of the vector field. 1;</p><p>typedef struct grid-surface-struct Grid-Surface;</p><p>Note that part of this structure references the shared memory ids of the grid, scalar and other data needed to draw a grid surface object. The routine drawMd-surfaceO accepts this structure and draws it. This routine is part of the viewing library which is linked to every FAST graphical module so they can all include grid surface objects in their scenes.</p><p>Using shared memory and sockets, FAST is able to quickly and easily share all the data used within the environment. Even though shared memory can not yet be shared over different machines as it is on a single host, FAST has been designed with that feature in mind. When indeed we can accomplish this, the ultimate power of FAST can be realized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Discussion</head><p>For an existing SGI visualization application to be converted into a FAST module: Command line arguments must be used to establish window location and Hub communicationand nothing else.</p><p>Periodically, each module must check for exit command IPC from the Hub. This is usually done once each time through the main event loop. Standard input should not be used. Standard output should be used sparingly for status and error messages. The colormap must be used according to FAST conventions. FAST library functions must be used to get color indexes for drawing. A few indexes are reserved for modules to create their own colors, but most of the colormap is only modified via the FAST COLORMAP module.</p><p>accessed via FAST shared memory.</p><p>buttons, sliders, etc.</p><p>Grid, vector and scalar field data must be</p><p>The panel library should be used for menus,</p><p>The panel library's nap time or blocking should be turned on when waiting for user input to avoid excessive context switching.</p><p>integrated into the viewing library so that it's visualizations can appear in all modules. The data needed to draw must be placed in shared memory and made available to the viewing mode</p><p>The application's drawing code must be There are several advantages to integrating applications into FAST as modules. These advantages include:</p><p>Shared memory speeds which allow users to interactively view their data from several modules without long disk IO delays. Access to CFD Calculator generated vector and scalar fields. Precalculated min and max for grids, vector and scalar fields. This reduces the time needed to access data in many cases. Sophisticated colormap manipulation using the FAST COLORMAP module.</p><p>Integration of visualizations created by several modules into a single scene. Trivial integration of visualizations into animations.</p><p>Interactive access to most of the generic capabilities of the SGI graphics hardware, e.g. rot-van-scale, using the viewing library panels.</p><p>Other synergistic effects of multiple modules accessing the same data. New applications can be built quickly since many functions are be made available by existing FAST modules and libraries.</p><p>There are also some disadvantages, of course. These include: Time to learn to use the FAST libraries and inter-module communications as well as to keep up with future changes. * Performance overhead due to multiple processes busy waiting.</p><p>Future plans for FAST include the capability for use across high speed LANs for 'smart' distribution of processing. Compute intensive modules could be distributed or broken up into components that communicate over these networks, or perhaps memory could be shared across systems.</p><p>As flow solvers become fully integrated, and interactive 3D grid generation becomes a reality, </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>NAS file input module (NAS File I/O, figure 4) loads pre-computed PLOT3D type grid, solution, and function files as well as ARCGraph[20] files into FAST'S shared memory. It consists of three control panels. The file input panel is used to list file names and information and to load data into shared memory. The data sub-panel displays pertinent information about the previously loaded grids and solutions. The ARCGraph panel is used for handling this type of file input.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>FAST environment. The grid surfaces can show the grid geometry, for example, a lighted, Gouraud<ref type="bibr" target="#b1">[2]</ref> shaded polygon surface of the Space Shuttle, or they can display the scalar data as function colored lines or polygons, or vector data as line vectors, vector heads, or polygon vector deformation surfaces (vector heads connected in a surface). Grid surface objects can represent grid geometries, scalar fields. and vector fields.In addition to changing data types, surface rendering and other atmbutes, SURFER can sweep through all surfaces in a given grid direction.This creates a dynamic image showing even more features of the flow field.The Titler module (figure 7) is used to create high quality Postscript text suitable as titles for images in videos, slides, and movies. Title attributes include font, point size, position, color, drop shadows, and a snap-to-grid feature to make alignment easier. Like other graphical objects, title objects are stored in shared memory so they can be added to other scenes. Postscript fonts from other sources may be imported and created titles may be saved for later use. Isolev (figure 8) performs three functions using a single algorithm. One, it draws surfaces of constant value in 3D scalar fields, i.e. isosurfaces. Two, it draws cutting planes function mapped by the scalar field of interest. Cutting planes may be at any angle, and are consistently oriented throughout a multi-zoned grid. Three, it draws vector field deformation surfaces originating at cutting planes or isosurfaces. Is0 and deformation surfaces are lighted and smooth shaded. Both isosurfaces and cutting planes may be rendered as dots for improved performance. Interactive</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :Figure 8 :Figure 9 :</head><label>689</label><figDesc>FAST will continue to offer more effective visualizations of computational aerodynamics in all aspects of fluid flow simulations. Surface Extractor and Renderer module (&amp;/or mare 10, page 461) lsolev lsosurface and Cutting Plane module (Color Plate 12, page 461) Interactive Particle Tracer module (Color Plate 73, page 462)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>as Spectrum, Contour, Striped, Twotone, or Banded. Interactive Viwaluabon Contrpl . .</head><label></label><figDesc></figDesc><table><row><cell cols="3">or selecting a different colormap types such Mu Iti-Droces sed : In figure 3, several modules worked Ipc and Shared Memorv Implementation</cell></row><row><cell cols="2">together to generate the scene: Surfer generated the grid</cell><cell></cell></row><row><cell cols="2">surface objects, CFD Calculator computed the scalar and</cell><cell cols="2">It was decided that an interprocess communication (E)</cell></row><row><cell cols="2">vector fields, Titler was used to generate the text, and</cell><cell>package must be implemented to allow FAST to operate</cell></row><row><cell cols="2">FAST Central was used for image handling and color map</cell><cell>as a modular environment where resources could be shared</cell></row><row><cell cols="2">editing. When modules are not needed they can be</cell><cell>among different machines as well as a single host.</cell></row><row><cell cols="2">iconified so they occupy less screen space and CPU</cell><cell>Specifically, Unix System V shared memory facilities are</cell></row><row><cell cols="2">resources. Because of this, the FAST environment can be</cell><cell>used to allow each process (module) to access the</cell></row><row><cell cols="2">running while other applications are also being used.</cell><cell>environment's data, while the Berkeley IPC package's</cell></row><row><cell cols="2">Alternatively, FAST modules can be terminated without exiting the FAST environment -and this has no effect on</cell><cell>implementation of Intemet domain stream sockets allows for the coordination of this data.</cell></row><row><cell cols="2">their data since it is already in shared memory. Unlike</cell><cell></cell></row><row><cell cols="2">standard dynamic memory, shared memory remains</cell><cell>As each module is executed by the FAST hub, it must</cell></row><row><cell cols="2">CFD scalar and vector functions custum calculator formulas, isosurfaces, particle tracing available even after the allocating process is killed. All shared memory segments are removed when FAST is sxited via the Quit selection of the FAST Central module.</cell><cell>immediately establish a two-way communication channel Rendering between it and the hub. Because an Internet domain points, lines, vectors, address consists of a machine network address and a port vector deformation surfaces, number, these two values are used in establishing this shaded surfaces, connection. The following command is therefore executed function mapped surfaces, interactive lighting at the beginning of a module's main routine:</cell></row><row><cell></cell><cell></cell><cell>socket-establish-and-accept (hub-host, h u b p r t ,</cell></row><row><cell></cell><cell></cell><cell>&amp;rsock, Lkwsock);</cell></row><row><cell>Data Types</cell><cell></cell><cell>AnimatiodRecording</cell></row><row><cell>Grid, Solution, Scalar, Vector, ARCGraph, Particle, Plot vector field.</cell><cell>and a velocity</cell><cell>keyftame construction non-linear spline interpolation stereomording</cell></row><row><cell cols="2">Flexible. Storing data and graphical objects in shared</cell><cell></cell></row><row><cell cols="3">Object Types Titles, Traces, Rakes, Ribbons UK Surfaces, XYZ Cutting Planes, memory has enabled the complex scenes in figure 3 to be constructed by mixing and matching shared data from any module that is currently plugged into the FAST environment. The figure shows how grid, scalar, and vector data has been combined to generate grid surfaces rendered as grid lines, scalar colored smooth polygon Contour Surfaces I Colormaps Function colormap: Spectrum, Contour, Banded, Striped, Twotone Dynamic Contours surfaces, and vectors. I Interactive. Surfer provides the ability to interactively alter I scene attributes such as coloring the data by a different Object Attributes scalar field, displaying a different vector field, adjusting Mirroring, Transparency, ViewIScene Control 3D transformation modes spaceball controller scene construction sweeping I the legend, normalization, and clipping ranges, or Interactive Lighting 1 changing rendering and data types. For example, the vector I field can be rendered as a Gouraud shaded, lighted, vector</cell><cell>I</cell></row><row><cell cols="2">Shading Colormaps deformation surface. With the looping option turned on</cell><cell></cell></row><row><cell cols="2">Surfer will sweep through all data in the current grid direction -providing a dynamic visualization ability. And</cell><cell></cell></row><row><cell cols="2">while this is happening the scientist (from FAST Central)</cell><cell></cell></row><row><cell cols="3">Figure 1, "FAST Interactive Visualization Control" can transform (e.g., rotate, or zoom) all or part of the</cell></row><row><cell cols="2">scene or use the color map editor to adjust the function</cell><cell></cell></row><row><cell cols="2">color mapping by inserting, deleting, and changing colors,</cell><cell></cell></row></table><note>Powerful. The FAST environment contains sophisticated tools such as the CFD Calculator that enable the scientist to analyze computed solutions by examining many relevant "CFD quantities", such as normalized helicity, shock, perturbation velocity, and vorticity . And if these "built-in" functions are not adequate the scientist can program the Calculator to compute customized functions using the rich set of component, scalar, and vector operators. In figure 3, the CFD Calculator was used to compute entropy and pressure scalar fields</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>for accessingfields of the substructure data *I #define GET-DATA-FIELD(node-ptr, field</head><label></label><figDesc>/ info-struct . command =</figDesc><table><row><cell></cell><cell cols="2">typedef NASData</cell><cell>*NASDataPtr;</cell></row><row><cell>I* macro )</cell><cell></cell><cell></cell></row><row><cell>(((nodeqtr) -&gt; dara).field)</cell><cell cols="3">REQUESTS HARED-MEMORY;</cell></row><row><cell>The FAST environment contains several lists of this</cell><cell cols="3">info-struct . info-field-1 = number-of-bytes;</cell></row><row><cell>form: a list of grids, a list of solutions, a set of scalar and</cell><cell></cell><cell></cell></row><row><cell>vector lists (one for each register of the CFD Calculator),</cell><cell cols="2">write to hub (info-struct)</cell></row><row><cell>and a list of graphical objects. A typical request that a</cell><cell></cell><cell></cell></row><row><cell>module would make of the Hub is to gain access to a</cell><cell cols="3">read a shared memory id by reading from hub as soon as</cell></row><row><cell>particular list node, for example, a node from one of the</cell><cell cols="3">hub sends a 'done message'</cell></row><row><cell>CFD Calculator's vector register lists. This would involve</cell><cell></cell><cell></cell></row><row><cell>setting up the fast-infobuf with the appropriate</cell><cell cols="3">get a local address by attaching to this shared memory id</cell></row><row><cell>information about the request, writing it to the Hub,</cell><cell></cell><cell></cell></row><row><cell>reading the node's shared memory id from the Hub, and</cell><cell></cell><cell></cell></row><row><cell>attaching to generate a virtual address for the requesting</cell><cell cols="2">/* FAST Hub */</cell></row><row><cell>module process. The Hub process detects the socket write</cell><cell></cell><cell></cell></row><row><cell>in its main event loop and executes a socket read and calls</cell><cell cols="2">read up the command</cell></row><row><cell>the function process-request() to handle the module's</cell><cell></cell><cell></cell></row><row><cell>request:</cell><cell cols="3">if command is request to allocate shared memory then</cell></row><row><cell></cell><cell></cell><cell cols="2">read up the number of bytes to allocate</cell></row><row><cell></cell><cell cols="3">allocate shared memory using number of bytes</cell></row><row><cell></cell><cell></cell><cell cols="2">write to socket the shared memory identifier</cell></row><row><cell></cell><cell cols="3">At any time that a different module would like to access</cell></row><row><cell></cell><cell cols="3">this data, a request is similarly sent to the hub to retrieve</cell></row><row><cell></cell><cell cols="3">the shared memory identifiers so that it too may attach to</cell></row><row><cell></cell><cell>the data.</cell><cell></cell></row><row><cell></cell><cell cols="3">A consequence of using shared memory instead of standard</cell></row><row><cell></cell><cell cols="3">dynamic memory is that dynamic data structures such as</cell></row><row><cell></cell><cell cols="3">linked list nodes no longer have a pointer to the next node</cell></row><row><cell></cell><cell cols="3">but rather the shared memory id of the next (and current)</cell></row><row><cell></cell><cell cols="3">node. And this shared memory id must be explicitly</cell></row><row><cell></cell><cell cols="3">attached to and defached from whenever the structure is</cell></row><row><cell></cell><cell cols="3">traversed. An example of this is the following code</cell></row><row><cell></cell><cell cols="3">segment which defines the list nodes used for all NAS</cell></row><row><cell></cell><cell>data:</cell><cell></cell></row><row><cell></cell><cell cols="3">I* general linked list node *I</cell></row><row><cell></cell><cell cols="2">struct node</cell></row><row><cell></cell><cell>(</cell><cell>int key;</cell><cell>/* search key field */</cell></row><row><cell></cell><cell></cell><cell>int id;</cell><cell>/* shared memory id */</cell></row><row><cell></cell><cell></cell><cell>int nextjd;</cell><cell>/* id of next node */</cell></row><row><cell></cell><cell></cell><cell>NASData data,</cell><cell>/* extemally defined struct */ ) ;</cell></row><row><cell></cell><cell cols="2">typedef structnode</cell><cell>Node;</cell></row><row><cell></cell><cell cols="2">typedef Node</cell><cell>*Node&amp;,</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="19.">S . Rogers, "Distributed Interactive Graphics</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Flow Visualization of CFD Using Graphics Workstations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIAA 87-1 180, Proc. 8th Computational Fluid Dynamics Conf</title>
		<imprint>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
		<title level="m">Fundamentals of Interactive Computer Graphics</title>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">ConMan: A Visual Programming Language for Interactive Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Haeberli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGGRAPH Proceedings</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="1988-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Computational Environment for Scientific Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>System</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<date type="published" when="1989-07" />
			<publisher>AVS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Representation andDisplay of Vector Field Topology in Fluid Flow Data Sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Computational Aerodynamics at NASA Ames Research Center</title>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Walatka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Buning</surname></persName>
		</author>
		<title level="m">PLOT3D Users Manual Version 3.6 NASA TM101067</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">SURF Users Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Plessel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>NASA Ames Research Center, Code RFW</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">GAS Users Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Plessel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>NASA Ames Research Center,Code RFW</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">The Design and Implementationof the 4.3 BSD UNIX Operating System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Leffler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">UNIX System Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">.</forename><forename type="middle">K</forename><surname>Haviland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Salama</surname></persName>
		</author>
		<imprint>
			<publisher>Addison-WesIey</publisher>
			<biblScope unit="page">981</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Stellix Programmers Guide</title>
		<imprint>
			<biblScope unit="page" from="15" to="17" />
			<date type="published" when="1988" />
			<publisher>Stellar Computer Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Marching Cubes: a High Resolution 30 Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">The Application Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Upson</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Scientific Visualization in</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bancroft</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Panel Library Programmers Manual, Version 9</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tristram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Walatka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Raible</surname></persName>
		</author>
		<idno>RNR-90-006</idno>
		<imprint/>
	</monogr>
	<note type="report_type">NASA Ames Report</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Fluid Mechanics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>White</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979" />
			<publisher>McGraw-Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Second Generation Graphics Heat Transfer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Anderson ; L</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Milne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973" />
			<publisher>Mcgraw-Hill</publisher>
		</imprint>
	</monogr>
	<note>Compuational Fluid Mechanics and 17</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Workstations. Request For Proposals</title>
		<imprint>
			<biblScope unit="page" from="2" to="3349" />
			<date type="published" when="1989-01" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
