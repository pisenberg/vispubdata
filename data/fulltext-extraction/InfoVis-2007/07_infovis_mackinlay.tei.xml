<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Show Me: Automatic Presentation for Visual Analysis</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2007-09-14">14 September 2007.</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jock</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
							<email>jmackinlay@tableausoftware.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
							<email>hanrahan@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Stolte</surname></persName>
							<email>cstolte@tableausoftware.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Show Me: Automatic Presentation for Visual Analysis</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2007-09-14">14 September 2007.</date>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2007; accepted 1 August 2007</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:54+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Automatic presentation</term>
					<term>visual analysis</term>
					<term>graphic design</term>
					<term>best practices</term>
					<term>data visualization</term>
					<term>small multiples</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper describes Show Me, an integrated set of user interface commands and defaults that incorporate automatic presentation into a commercial visual analysis system called Tableau. A key aspect of Tableau is VizQL, a language for specifying views, which is used by Show Me to extend automatic presentation to the generation of tables of views (commonly called small multiple displays). A key research issue for the commercial application of automatic presentation is the user experience, which must support the flow of visual analysis. User experience has not been the focus of previous research on automatic presentation. The Show Me user experience includes the automatic selection of mark types, a command to add a single field to a view, and a pair of commands to build views for multiple fields. Although the use of these defaults and commands is optional, user interface logs indicate that Show Me is used by commercial users.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Visual analysis is a powerful method for analyzing data. A major stumbling block to widespread adoption is that most people are not trained in the graphical design principles needed to construct graphical presentations that support their reasoning process or communicate their analytical results to others. All analysts have knowledge of their problem domain, most have an understanding of the data that can help them with their problem, some have experience with data analysis tools, but few have the skills to design effective graphical presentations of information. Analysts would rather work on their tasks than become skilled at graphic design. The resulting status quo is that most people use spreadsheets such as Excel to analyze their data. They struggle with tables of numbers that are slow to read and do not show patterns or trends. When they want to present their data visually in reports or presentations, they also struggle with visual design issues. What people need are visual analysis systems that automatically present data using the best practices of graphic design.</p><p>The Holy Grail for research on automatic presentation is an artificial assistant that uses graphic design knowledge to create graphical encodings of data that present appropriate information effectively. However, the design of effective graphical presentations also requires knowledge of the task, which is almost always inaccessible inside the user's head. Users typically start visual analysis with vague tasks in mind, which are refined and transformed as they see graphical views of data. Unfortunately, inferring such tasks is a difficult open problem.</p><p>Deferring this open problem, we explore the use of automatic presentation in a visual analysis system where users search for graphical presentations that address their tasks, and the system supports their search with user interface commands and defaults that are based on automatic presentation functionality. The key research issue is the user experience, which has not been the focus of previous research on automatic presentation. Users will avoid user interface commands that they do not understand, and will change defaults that are poor choices. Consider new users. They typically have little experience with visual analysis. To get started, new users require automatic presentation functionality that is intuitive and predictable.</p><p>Skilled users have related requirements. They require a system that attends to the graphic details so that they can stay in the flow of visual analysis.</p><p>In this paper, we describe Show Me, an integrated set of user interface commands and defaults that incorporate automatic presentation into a commercial visual analysis system called Tableau. A key aspect of Tableau is an algebraic specification language called VizQL, which describes both the structure of a view and the queries used to populate that structure with data <ref type="bibr" target="#b8">[9]</ref>. The Show Me functionality takes advantage of VizQL to automatically present data as a table of views (commonly called small multiple displays).</p><p>The Show Me user experience has been designed to be used by both new and skilled users. The Automatic Marks default uses the row and column structure of a VizQL expression to default the mark type of a view. The Add to Sheet command uses the properties of fields and the VizQL specification of views to add a single field to a view using best practices of graphic design. Finally, the Show Me and Show Me Alternatives commands use VizQL to build views "from scratch" for a set of fields, including small multiple displays. User interface logs from commercial users indicate that they use these user interface commands and defaults. We also describe how the Show Me functionality supported additional Tableau improvements. We close with a discussion of research directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">VizQL</head><p>The VizQL specification language was originally used to develop a research system called Polaris <ref type="bibr" target="#b8">[9]</ref>, which has been commercialized as Tableau. VizQL is based upon Bertin <ref type="bibr" target="#b0">[1]</ref> and the algebra that was used in APT <ref type="bibr" target="#b6">[7]</ref> with improvements to the algebra and the ability to compile into database queries. Wilkinson also uses an algebraic approach in The Grammar of Graphics to specify a wide range of view types <ref type="bibr" target="#b10">[11]</ref>. In principle, the Show Me user experience could be developed with almost any of these methods for specifying graphs and charts. However, the key technical benefit of the VizQL algebra is that it clearly describes the row and column structure of small multiple views of data.</p><p>An informal feel for VizQL can be gleaned from the Tableau user interface shown in <ref type="figure" target="#fig_0">Fig. 1</ref>. Tableau users specify VizQL expressions by dragging field instances from the data window on the left to regions called shelves on the right. The data window organizes the fields into dimensions, which are typically categorical fields, and measures, which are typically quantitative fields. The interface uses blue and green to identify dimensions and measures. Measures are typically aggregated at some level of detail. The fields on the shelves collectively specify a VizQL expression. In particular, the basic structure of a view is specified by the order of fields on the Row and Column shelves, which appear above the view in <ref type="figure" target="#fig_0">Fig. 1</ref>. For example, the order of categorical fields on the <ref type="table">Column shelves  specifies the nesting of a small multiples table. The cells of the table  are called panes because they can hold graphical views. The Show  Me functionality focuses on the specific fields on the Row and  Column shelves that specify the axes and headers of the table panes.</ref> After the Row and Column shelves, the key shelves for Show Me are the ones that specify how data can be encoded with the graphical properties of marks. For example, in <ref type="figure" target="#fig_0">Fig. 1</ref>, the field Market is on the Color shelf. It specifies the assignment of color to markets. It also specifies that the measures should be aggregated at the market level of detail. The Level of Detail shelf also specifies aggregations even though it does not specify a graphical encoding. Collectively, we refer to these shelves as Encoding Shelves. Different mark types can handle different encodings. <ref type="figure" target="#fig_0">Fig. 1</ref> shows the encodings for line marks. Point marks have a Shape shelf instead of the Path shelf. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2</head><p>Automatic Presentation Mackinlay's APT system is the foundational work on the automatic design of graphical presentations of relational information <ref type="bibr" target="#b6">[7]</ref>. He codified Bertin's semiology of graphics as algebraic operators that were used to search for effective presentations of information <ref type="bibr" target="#b0">[1]</ref>. APT's architecture focused on how to communicate graphically rather than what to say. Feiner's thesis from the same period as APT is the foundational work on extending computational linguistics into the area of graphical presentation <ref type="bibr" target="#b2">[3]</ref>. His work has been extended by Zhou <ref type="bibr" target="#b11">[12]</ref>. Computational linguistics research can decide what to say by modelling the communication with the user, which is important for developing an effective artificial assistant.</p><p>Visual data mining uses statistical algorithms to decide what to show <ref type="bibr" target="#b5">[6]</ref>.</p><p>However, effective data mining often requires considerable expertise in statistics, which is beyond the skill set of most visual analysis users.</p><p>This paper makes two key contributions to the research on automatic presentation: the generation of small multiple views and the design of a user experience for automatic presentation functionality.</p><p>Small multiple views are quite useful for presenting data that has many dimensions and measures. However, previous work on automatic presentation focused primarily on single views of data or a sequence of views. The work described here includes novel heuristics that support the automatic presentation of small multiple views.</p><p>By deferring the artificial assistant goal implicit in the research on computational linguistics and visual data mining, the work described here explores new ground in the user experience for automatic presentation, particularly in supporting the flow of visual analysis. The closest work is probably that of Roth et. al. <ref type="bibr" target="#b4">[5]</ref> <ref type="bibr" target="#b7">[8]</ref>. However, their publications do not discuss the user experience aspects of their automatic presentation work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.3</head><p>Chart Type Menus A common user interface technique for helping users present their data graphically is a menu of chart types. For example, Excel supports the following workflow:</p><p>1. Select the data to be presented 2. Invoke a menu of chart types 3. Select a chart type Since there are many different ways to organize charts, a menu of chart types can grow large. For example, the Excel 2003 chart menu has over 70 individual items. Selecting items from a long list can interrupt the flow of visual analysis. Furthermore, this user experience focuses on the chart type. Users typically know their task. They often know their data. However, they may not know the chart type that will address their task.</p><p>This paper addresses these issues by using automatic presentation techniques to focus on the selected data rather than the list of chart types. In particular, the Show Me Alternatives menu described below contains only 14 items, which automatically build charts that have appropriate organization for the selected data. Furthermore, items are only active when they can build appropriate charts, which supports the flow of visual analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.4</head><p>Graphic Design Knowledge We recommend three sources for knowledge of graphic design for effective presentation of data. Bertin's Semiology of Graphics is an essential resource for the systematic design of graphical presentations <ref type="bibr" target="#b0">[1]</ref>. Tufte has many excellent books that teach graphic design with a wide range of examples, including his latest book Beautiful Evidence <ref type="bibr" target="#b9">[10]</ref>. Finally, Few's book Show Me the Numbers is specifically targeted to business users <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">AUTOMATIC MARKS</head><p>Defaults are an excellent way to incorporate automatic presentation into a visual analysis system because they are easily used by both new and skilled users. For example, Tableau includes an Automatic Marks default mode that selects a mark type given the data fields used to specify a pane. For example, <ref type="figure" target="#fig_0">Fig. 1</ref> shows Tableau automatically selecting a line mark for a pane because it is based on a temporal field. Line charts are best practice for temporal data. Automatic Marks helps new users follow this convention. Skilled users have the option of changing the mark type with a dropdown menu when that is appropriate.</p><p>Automatic Marks rules are based on the properties of the data fields that specify the axes and headers of the table panes. Tableau fields currently support three data properties:</p><p>Data type: text, date, date&amp;time, numeric, or boolean Data role: measure or dimension Data interpretation: discrete or continuous Of particular interest is the classification of Q fields as independent or dependent. A dependent variable is intended to be a function of an independent variable. By convention in datacubes used in data warehouses, independent variables are called dimensions and dependent variables are called measures. Measures. e.g. Sum(Sales), are typically aggregated before display (and thus calculated) and are hence dependent on the choice of fields used as a dimension. This is an important and novel aspect of Tableau's data model.</p><p>Automatic Marks uses the rightmost fields in the Row and Column shelves to determine the pane types and mark types as shown in <ref type="table" target="#tab_0">Table 1</ref>, which omits specific cases that have the same mapping as more general cases.</p><p>These rules result in view types that would typically be chosen for these types of fields by someone who is trained in the best ways of producing charts and graphs. Automatic Marks can also evolve as Tableau is extended to have richer data properties. For example, Tableau supports a polygon mark type that can be added to the Automatic Marks by adding data types that represent space, such as longitude and latitude. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ADDING A SINGLE FIELD TO A VIEW</head><p>This section describes Add to Sheet, the Show Me command that adds a single field to a view. Add to Sheet is invoked from the data window via a context menu:</p><p>We placed this command at the top of the menu so that it will be easily found by new users. New users often explore context menus to learn an application. The bold font is a Microsoft convention indicating that the command can be invoked with double-clicks, which supports rapid view creation by skilled users.</p><p>Add to Sheet is based on various heuristics, as described in the remainder of this section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1</head><p>Affinity Tableau and VizQL support the generation of small multiple displays, which can be very effective for data sets that have many fields. The affinity heuristic supports the generation of effective small multiple displays by adding fields next to related fields. For example, the following images describe Add to Sheet behavior starting from a bar view (Qd, C) and adding either a C field or Qd field:</p><formula xml:id="formula_0">Pane type (Qd, C) Add C Add Qd</formula><p>The added field has an affinity for a field of the same type. Categorical fields are added on the right to create a "break-down" experience. When the Type field is added to the bar chart, it breaks the SUM(Coffee) into Decaf and Regular.</p><p>The affinity heuristic also applies when adding a hierarchical categorical (C) to small multiple views that have categorical fields on both row and column (C, C). For example, a data warehouse may support a hierarchical dimension that combines states into market regions. Starting with the cross-tab of Regions by Quarter, the affinity heuristic adds State next to Region rather than next to Quarter:</p><p>Adding State next to Quarter would have created a breakdown that is much less effective because each State belongs to a specific Region, thus creating wasted empty space in the view:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2</head><p>Encoding Requirements Encodings such as Color, Size, and Shape are also targets for the Add to Sheet command.</p><p>However, using these encodings effectively is difficult. Add to Sheet uses best practices when it adds fields. For example, Tableau has a palette of 20 distinguishable colors for categorical fields. It also has a set of 10 shapes that are designed to overlap effectively. Which shelf is used depends on the number of categories in the data. For example, a categorical field with 15 members can be placed on the Color shelf but not the Shape shelf. Other complications include the priorities of the encodings (whether to use color or shape if they are both possible), which encodings are preferred for quantitative vs. categorical variables, and the number of simultaneous encodings to use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3</head><p>Multiple Fields Users will not use automatic presentation commands like Add to Sheet unless they work effectively most of the time. In particular, Add to Sheet must work for small multiple displays that have many fields on the shelves. The affinity heuristic meets this multiple field requirement for (C, Q) pane types such as bar and line views because the Row and Column shelves can accept multiple fields and still produce effective presentations. However, cross-tabs (C, C) and scatter plots (Q, Q) require additional heuristics to handle multiple fields, particularly when a Q field is being added. The multiple field heuristics differ for categorical and quantitative fields.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3.1</head><p>Categorical: Level of detail The heuristic for adding categorical fields to views that have multiple fields is to consider the following shelves in order: Shape, Color, and Level of Detail. Although Shape and Color only accept single fields, Level of Detail accepts multiple fields. This heuristic is particularly effective for scatter plots when combined with the encoding requirements. For example, one of Tableau's sample datasets has a State field with 20 states. Since Tableau only supports a shape encoding with 10 shapes it cannot go on the Shape shelf. However, State can go on the Color shelf because Tableau supports 20 distinct colors for categorical fields:</p><p>The data set also contains a Market field with 4 members. Add to Sheet adds Market to the Shape shelf:</p><p>Any additional fields will be added to the Level of Detail shelf.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3.2</head><p>Quantitative: Measure Values The Level of Detail shelf is not a solution for multiple quantitative fields because the quantitative fields on this shelf do not appear in the view. (They only show up in tooltip text.) In this case, we use special fields in Tableau called Measure Names and Measure Values, which are similar to Wilkinson's "blend" operator in that they combine measures together <ref type="bibr" target="#b10">[11]</ref>. This heuristic is particularly effective for cross-tab views where the color and size of text is a poor choice for encoding quantitative fields. For example, adding SUM(Sales) to a cross-tab that breaks down SUM(Profit) by Product Type and Market, combines the measures on the text shelf:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.4</head><p>Starting from an Empty View The Add to Sheet heuristics described above handle adding multiple fields in many arrangements including small multiple displays, allowing Add to Sheet to generate views that are typically welldesigned. The final issue is how the skilled user can start from an empty sheet and use Add to Sheet to generate a broad range of different types of views. The solution is to use the order of addition of the first view fields onto the sheet to specify a wide range of view types:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Add Order</head><p>View Type Categorical Cross-tab (C, C) Quantitative, Date</p><p>Line view (Q, C) Quantitative, Categorical</p><p>Bar view (Q, C) Quantitative, Quantitative</p><p>Scatter view (Q, C)</p><p>The next section describes automatic presentation commands that can be used to generate additional view types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">BUILDING VIEWS FROM SCRATCH FOR MULTIPLE FIELDS</head><p>In contrast to Add to Sheet, the automatic presentation commands described in this section accept multiple fields as input, which greatly increases the space of possible designs, particularly when the views are built from scratch. The user experience was carefully designed to go on the Tableau toolbar to help new users when they begin with an empty sheet. Although the design space is complex, the user interface had to be simple. The commands are called Show Me Alternatives and Show Me, which are respectively a dialog of commands that automatically build views from scratch and a button that is a shortcut to the default choice for the dialog. The Show Me Alternatives dialog is a stable grid of choices with tooltips that describe the conditions for a choice to be active. The icons have saturated colors when the command is active:</p><p>The stable grid allows users who have learned the grid to invoke commands by position, which supports the flow of visual analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.1</head><p>The Show Me Default Ranking Each Show Me Alternatives command builds a particular type of view. Each command has an associated condition and some of the commands have a ranking. The Show Me Alternatives dialog defaults to the highest ranked command whose condition is met (1 is the lowest rank). The Show Me command is a shortcut to this default. The rankings have been crafted to default Show Me to designs that embody best practices <ref type="bibr" target="#b0">[1]</ref>[4] <ref type="bibr" target="#b9">[10]</ref> and are familiar to most people. In general, the ranking prefers views that encode data graphically, which is why text tables have the lowest rank. Higher ranked commands typically have more specialized conditions that must be met for that particular view type to be effective. This section describes the commands that are ranked. The remaining commands are described in the next section.</p><p>Some of the ranked commands have a condition for the rank in addition to a condition for the command. The command condition determines whether the user can explicitly select the command. The rank condition is only used for the default computation. The command does not have a rank when the rank condition is not satisfied.</p><p>Text <ref type="table" target="#tab_0">Tables: at least 1 field,</ref> rank 1 Text tables have the lowest rank because their primary utility is to look up specific values. The higher ranked commands present views that encode data graphically, which support other tasks such as comparison. Although text tables have a low rank, their condition is easily met. The text table command can handle a large number of fields and will always be available as a default for Show Me Alternatives. Heat maps are a related command that is not ranked. Discrete Lines: at least 1 Cdate, at least 1 Q, rank 4 A line view is a better default than a bar view when the input includes a date field because it is more effective for showing trends. This command treats the date field discretely. There is an unranked line command that treats the date field continuously. The primary difference is how the axes are drawn. We judged that the discrete version was more appropriate for the typical Tableau user.</p><p>Scatter Plots: between 2 and 4 Q, rank 5 for 2 Q Scatter plots are very effective for comparing two values, particularly with categorical fields on the shape shelf. However, they grow less effective when the input has more than two quantitative fields. Lower ranked commands will be used as the default when the input has more than four quantitative fields.</p><p>Gantt Charts: at least 1 C, at least 1 Qi, 1 to 2 Q, rank 6 Although specialized, Gantts are effective for showing duration with respect to a quantitative independent. In Tableau, Gantts are also an effective way to show the distribution of a measure. Although highly ranked, the conditions for this command are rarely satisfied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.2</head><p>Additional Alternatives The Show Me Alternatives dialog includes commands that do not have a ranking, which means they will never be the default. Skilled users can use these commands to build views in one step. When new users invoke a Show Me Alternatives command, they see how the fields are placed on shelves to specify that type of view, which can help them learn how to use Tableau.</p><p>Heat Map: at least 1 C, between 1 to 2 Q, no rank Heat maps are effective for large tables that do not have room for text marks. However, they can only handle two quantitative fields. We could have assigned a rank to this command, but it would have required an expensive query to the database to identify when the data would generate a large table. See the implementation section below for a discussion of this performance issue. Scatter Matrix: between 3 and 6 Q, no rank Scatter matrix is a powerful technique used by the statistics community. It is too specialized to be ranked for the typical commercial user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Histogram: single 1 Q that supports a binning calculation, no rank</head><p>Histograms are another powerful technique used by the statistics community. It is too specialized to be ranked for the typical commercial user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.3</head><p>The Show Me User Interface Flow A major design goal for Show Me and Show Me Alternatives was to develop a user interface that new users could understand and skilled users could fit into their workflow, which is why we worked hard to codify best practices of graphic design into a small set of alternatives and to include the default ranking in the user experience. However, our design goal was challenged by the fact that Tableau has two places where the input to commands is naturally specified: 1) the list of fields associated with a data source window and 2) the list of fields that are currently on the sheet: Two sets of commands for these two inputs would have been confusing to both new and skilled users.</p><p>Our solution was to have one set of commands that prefer the input from the data window. The key innovation was to clear the selection from the data window when the input is processed. The result is a natural user interface flow from the data to the view. For example, a new user can use Show Me defaults to build a view for a set of fields selected in the data window and then use Show Me Alternatives to look at other views of the same data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">IMPLEMENTATION</head><p>Show Me Alternatives is implemented on top of Automatic Marks and Add to Sheet, including their codification of graphic design best practices. Show Me Alternatives, however, can embody additional best practices because it deals with multiple fields at the same time. For example, Automatic Marks and Add to Sheet will always build a line chart when the view includes a date field. However, line charts suggest that the data is changing continuously. When the data does not vary continuously, the user can select a bar choice from Show Me Alternatives to automatically build a view that shows the discrete nature of the data. As the Tableau type system expands, we will be able to add such views to the Show Me defaults. Show Me Alternatives can also set formatting parameters when it builds views. For example, the Heatmap alternative sets the crosstab to square cells and uses square marks that almost fill the cells. The result maximizes the variation in size encodings and creates a regular grid that is easy to read. Skilled users appreciate the automation of formatting best practices.</p><p>Finally, performance is a key implementation issue when automatic presentation is added to a visual analysis system that works with databases. Tableau has users with very large databases who are willing to wait minutes for database queries to run so that they can see a graphical view of their valuable data. However, users do not want interactive experiences that include such pauses.</p><p>Our solution to the performance issue is to only query the database when the user asks the automatic presentation system to build views. For example, Automatic Marks can query the database because the user is asking it to add a field to a view. Show Me Alternatives, however, should not query the database when it is calculating the Show Me default because that calculation is used to enable the Show Me toolbar button in Tableau's basic user interface loop. On the other hand, queries can be tolerated after a user chooses a Show Me Alternative because they expect a view to be built and will be willing to wait for the query to complete. Show Me Alternatives also takes advantage of a result cache in Tableau to reduce the number of queries that it generates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">EVALUATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7.1</head><p>Informal Feedback The Show Me functionality has stood the test of time. It was introduced into Tableau v1.5 in October 2005. During the last year and a half, we have gotten generally positive feedback about Show Me from Tableau employees, new users, and skilled users. Tableau has thousands of users who generate a steady stream of email about Tableau, particularly when they have something negative to report. Because the feedback on Show Me has been primarily positive, the functionality has not changed significantly since it was introduced, even though many new features have been added to the application (we are now at Tableau v3.0). In particular, Show Me and Show Me Alternatives have remained on the toolbar, a scarce resource, despite competition from new features.</p><p>Tableau employees report two uses of Show Me: testing and training new users.</p><p>For testing, they use Show Me to build views during random testing where speed and variation is more important than precise control of the view. The Add to Sheet double-clicks, in particular, can be used to build views quickly. However, during visual analysis when control is more important, these skilled users find Show Me to be less useful because it is hard to predict what view will be built by the automatic presentation functionality. Predictability is likely to be a general problem for the usability of automatic presentation functionality.</p><p>For training, Tableau employees use Show Me and Show Me Alternatives to show new users the range of views that can be specified in Tableau. However, showing the result does not teach users the steps to build views. Training quickly moves on to the more direct ways to build views in Tableau.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7.2</head><p>User Interface Logs Tableau is working to develop formal measures of usability to augment and validate the informal user feedback that we already collect. We are particularly interested in real visual analysis activity rather than activity involving sample tasks or feature testing. However, the Tableau user community is typically working with operational data when they do real visual analysis with Tableau, which makes them protective about their user interface activity. Nevertheless, such data could be very useful because it describes real visual analysis activity in a commercial setting.</p><p>As a first step to developing such metrics, a user interface logging mechanism was added to Tableau v2.0. This mechanism collects logs about Tableau user interface activity and stores them on the user's machine. The goal is to develop trusted relationships with users and ask them to send us these logs. Given this goal, the UI logs have been carefully designed to be anonymous so that users will be willing to send them to us. In fact, they are much more anonymous than the data that is typically used in a research paper. For example, we can't even tell how many users have contributed logs because the mechanism for generating anonymous user ids can change the id generated for a specific person as the setup on a machine changes.</p><p>To date, Tableau UI logs have been solicited from two groups: v3.0 beta testers and 17 customers who were judged to be very active Tableau users by their sales contacts. Both groups are generally skilled Tableau users. We estimate that we have received logs from approximately 10 users with 17 user ids. The typical Tableau user is a professional adult working with corporate data. The ~10 users are probably fairly typical except for their willingness to share their UI logs.</p><p>Although the number of users is modest, the amount of data collected is considerable: The following diagram describes these 1062 log files organized by user id:</p><p>The diagram is sorted by the number of logs for each user id. The left section shows the number of logs with id A at top having 218 logs. The middle section plots the logs against a time axis. The right section describes the delta in days between the first and last log file for each user id. The data for the user ids at the top of this diagram are probably from skilled users given the number and delta of the logs for each user id. The user ids at the bottom of the diagram may or may not be data from skilled users. They might be from new users who tried Tableau on the machine of a skilled user or logs from skilled users who had their user id change during this period.</p><p>An interesting finding from this diagram is the pattern of visual analysis activity, which is uneven. Visual analysis appears to be episodic, with clear gaps in the middle history section. Furthermore, episodes of visual analysis can be intense. For example, C has a relatively large number of log files in a small delta of days.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7.3</head><p>Show Me Activity for Skilled Users Although the user interface log data described in the last section is limited in what it can tell us about the visual analysis activity of users, it can shed light on a key question about the Show Me functionality described in this paper: Is Show Me used by skilled users? After all, the lack of negative feedback discussed above could be caused by the lack of Show Me use.</p><p>We can address this question by counting the log entries associated with the Show Me functionality and comparing the counts to some standard. A reasonable standard to use for the Automatic Marks default is the count of shelf activity, because Tableau builds a new view every time the shelf contents changes, which represents an opportunity for users to set the mark type explicitly when they don't like the automatic default. On the other hand, a reasonable standard for the commands Add to Sheet, Show Me, and Show Me Alternatives is the count of the direct addition of fields to Shelves because these commands also add fields to shelves. These counts are shown in the following diagram:</p><p>One weakness with this diagram is that the log files do not differentiate between Show Me and Show Me Alternatives. These commands are implemented with the same code and the log entry is generated when the command is successfully executed.</p><p>We draw three conclusions from this diagram. First, the Automatic Marks default is generally correct with 8,248 shelf changes but only 560 mark changes for a 6.8% error rate. Second, the Add to Sheet command is not being used by skilled users (43 automatic adds for 3,921 direct adds 1.1%). This finding supports the informal feedback from Tableau employees about their behavior during testing and visual analysis. Third, Show Me and Show Me Alternatives are being used modestly by skilled users (220 commands for 3,921 shelf adds 5.6%). Since these commands are typically used to add multiple fields to the shelves, their actual impact on the visual analysis may be higher than this percentage would suggest.</p><p>There is additional data that supports the third conclusion. The following diagram colors the Show Me logs for the history of log file creation for the user ids with a large number of log files:</p><p>Users ids B, C, and E did not use the Show Me and Show Me Alternatives commands.</p><p>The reason for this is impossible to determine given this log data. However, the other user ids did use this command, which means they used these commands more frequently that the percentage calculated above. Furthermore, the use was spread out over time, which suggests that the Show Me commands are a regular part of the visual analysis activity of some skilled users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">USING SHOW ME TO DEVELOP NEW FEATURES</head><p>Show Me was developed to help users build effective views. After the successful introduction of Show Me, we discovered that we could use Show Me to develop two new Tableau features: 1) <ref type="table">Table  Calculations</ref> and 2) sending data from another application to Tableau.</p><p>Table Calculations allow users to specify running totals and other common analysis calculations. A <ref type="table">Table Calculation</ref> is done locally rather than in the database. Since the calculation is done locally, the fields must be included in the view specification. We used the Show Me functionality to smooth the user experience when specifying <ref type="table">Table Calculations</ref> by automatically adding fields to the view that were used in the specification of the calculation.</p><p>The second feature developed using Show Me involved Hyperion, a company that sells a popular data warehouse product. Tableau communicates with the Hyperion data warehouse, which includes an Excel-based user interface. The original connection between Tableau and this user interface involved sending data from Tableau to Excel, which is relatively easy since the data ends up as a table of values. However, sending data from Excel to Tableau involves many more design choices. We used the Show Me Alternatives to smooth the user experience by offering a choice of view type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">CONCLUSIONS AND FUTURE WORK</head><p>The Show Me functionality described in this paper embodies best practices of graphic design so that users can concentrate on their visual analysis. Good defaulting creates a smooth user experience where users can concentrate on their task rather than the user interface to set the properties of their view. The Show Me functionality has been well received by Tableau's large user community.</p><p>Show Me can be extended by expanding the type system. For example, Tableau supports thematic map visualizations with marks over background map images. Show Me Alternatives could be extended to include maps by extending the type system to include longitude and latitude. The object-oriented architecture of Show Me Alternatives supports the addition of such rules.</p><p>Another direction to take Show Me is to incorporate best practices for transforming one view type into another. The Show Me Alternatives commands described in this paper build views "from scratch," which means that they will build the same view for the same set of fields without considering the current placement of fields on shelves. Building the same view creates a predictable user experience that makes the commands easier to understand. However, the automatic presentation system cannot know the placement of fields that is most appropriate for a given task. Given an existing view, a "transforming" command would move fields to generate the requested view type with minimal disruption to the existing field placement. This would be an expert version of Show Me.</p><p>In conclusion, this paper describes automatic presentation functionality that has been incorporated into a commercial visual analysis system. The key research issues were the automatic presentation of small multiple views, which are effective for multidimensional data, and the user experience for automatic presentation. Feedback clearly indicates that the Show Me user experience does not disrupt the flow of visual analysis. In fact, it might enhance it. However, the Show Me commands are used much less frequently by skilled users than more direct ways to build views of data. Our experience suggests that before you add automatic presentation, you should focus on making the user experience effective.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 :</head><label>1</label><figDesc>The Tableau User Interface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Casner extended this work by comparing design alternatives via a measure of the work required to read presentations depending on the task [2]. Roth et. al. added additional types of presentations and made the resulting presentations interactive [5] [8].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Automatic</head><label></label><figDesc>Marks takes advantage of the Tableau data model, which includes the following classifications: C = Categorical (discrete and dimension) Cdate = Categorical date (date or date&amp;time) Q = Quantitative (continuous) Qd = Quantitative dependent (measure) Qi = Quantitative independent or Qdate (dimension)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Aligned Bars: at least 1 Q, rank 2</head><label>2</label><figDesc>Bars are effective for comparing values because the human visual system is good at comparing bar lengths, particularly when they are aligned. Aligned Bars are a common default when the input includes a quantitative field unless the input also includes a date field or two quantitative fields. However, aligned bars can involve a lot of scrolling when multiple categorical fields are shown. The next command handles this case.Stacked Bars: at least 2 C, at least 1 Q, rank 3 with at least 3 C Stacked bars require less scrolling than aligned bars when there are multiple categorical fields in the view. There are two additional bar commands that are not ranked.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Automatic marks rules</figDesc><table><row><cell>Pane Type</cell><cell></cell><cell>Mark Type</cell><cell>View Type</cell></row><row><cell>Field</cell><cell>Field</cell><cell></cell><cell></cell></row><row><cell>C</cell><cell>C</cell><cell>Text</cell><cell>Cross-tab</cell></row><row><cell>Qd</cell><cell>C</cell><cell>Bar</cell><cell>Bar view</cell></row><row><cell>Qd</cell><cell>Cdate</cell><cell>Line</cell><cell>Line view</cell></row><row><cell>Qd</cell><cell>Qd</cell><cell>Shape</cell><cell>Scatter plot</cell></row><row><cell>Qi</cell><cell>C</cell><cell>Gantt</cell><cell>Gantt view</cell></row><row><cell>Qi</cell><cell>Qd</cell><cell>Line</cell><cell>Line view</cell></row><row><cell>Qi</cell><cell>Qi</cell><cell>Shape</cell><cell>Scatter plot</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>-by-side Bars: at</head><label></label><figDesc>HighlightTable:at least 1 C, at least 1 Q, no rank Highlight tables are a text table with a color encoding that fills the table cell. They don't have a rank because the fill can make it hard to read the text. least 1 C, at least 1 Q, no rank Side-by-side bars are useful for comparing similar measures. Aligned bars are the better default because aligned bars are easier to compare visually. Line views are very useful for trending questions. This version treats the date field as continuous. The discrete case is a better default for the typical Tableau user.</figDesc><table><row><cell>SideMeasure Bars: at least 1 C, at least 2 Q,</cell><cell>no rank</cell></row><row><cell cols="2">Measure bars put a quantitative field on color. Aligned</cell></row><row><cell cols="2">bars are the better default because they are more common</cell></row><row><cell>and easier to interpret.</cell><cell></cell></row><row><cell>Continuous Lines: at least 1 Qi, at least 1 Q,</cell><cell>no rank</cell></row><row><cell>Circle Charts: at least 1 C, at least 1 Q,</cell><cell>no rank</cell></row><row><cell cols="2">Similar to a bar view except circle marks are plotted.</cell></row><row><cell cols="2">Unlike bar marks, circle marks do not suggest that the</cell></row><row><cell cols="2">axis has an origin. They are useful for comparing the</cell></row><row><cell cols="2">relative positions of marks. They don't have a rank because they are</cell></row><row><cell>more specialized than bar views.</cell><cell></cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We acknowledge the great team at Tableau Software and thank Polle Zellweger and the anonymous reviewers for their helpful suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Semiology of Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bertin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983" />
			<publisher>Wisconsin Press</publisher>
		</imprint>
	</monogr>
	<note>The University of</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A task-analytic approach to the automated design of graphic presentations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Casner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="111" to="151" />
			<date type="published" when="1991-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">APEX: An experiment in the automated creation of pictorial explanations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1985-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Show Me the Numbers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Few</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Analytics Press</publisher>
			<pubPlace>Oakland, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A framework for knowledge-based interactive data exploration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goldstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">F</forename><surname>Roth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kolojejchick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mattis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="339" to="363" />
			<date type="published" when="1994-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Information visualization and visual data mining</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Keim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2002-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automating the design of graphical presentations of relational information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="110" to="141" />
			<date type="published" when="1986-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Interactive graphic design using automatic presentation knowledge</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Roth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kolojejchick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mattis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goldstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI</title>
		<meeting>the SIGCHI<address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="112" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Polaris: A system for query, analysis, and visualization of multidimensional relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="65" />
			<date type="published" when="2002-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Beautiful Evidence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tufte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Graphics Press LLC</publisher>
			<pubPlace>Cheshire, Connecticut</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">The Grammar of Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wilkinson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Automated Generation of Visual Discourse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">X</forename><surname>Zhou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
		<respStmt>
			<orgName>Columbia University, S. Feiner advisor</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph. D Thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
