<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">EWA Volume Splatting</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">ETH Zürich</orgName>
								<address>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanspeter</forename><surname>Pfister</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">MERL</orgName>
								<address>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeroen</forename><surname>Van Baar</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">MERL</orgName>
								<address>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Gross</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">ETH Zürich</orgName>
								<address>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<address>
									<addrLine>San Diego</addrLine>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">EWA Volume Splatting</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation-Viewing Algorithms; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism Volume Rendering</term>
					<term>Splatting</term>
					<term>Antialiasing</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In this paper we present a novel framework for direct volume rendering using a splatting approach based on elliptical Gaussian kernels. To avoid aliasing artifacts, we introduce the concept of a resampling filter combining a reconstruction with a low-pass kernel. Because of the similarity to Heckbert&apos;s EWA (elliptical weighted average) filter for texture mapping we call our technique EWA volume splatting. It provides high image quality without aliasing artifacts or excessive blurring even with non-spherical kernels. Hence it is suitable for regular, rectilinear, and irregular volume data sets. Moreover, our framework introduces a novel approach to compute the footprint function. It facilitates efficient perspective projection of arbitrary elliptical kernels at very little additional cost. Finally, we show that EWA volume reconstruction kernels can be reduced to surface reconstruction kernels. This makes our splat primitive universal in reconstructing surface and volume data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Volume rendering is an important technique in visualizing acquired and simulated data sets in scientific and engineering applications. The ideal volume rendering algorithm reconstructs a continuous function in 3D, transforms this 3D function into screen space, and then evaluates opacity integrals along line-of-sights. In 1989, Westover <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19]</ref> introduced splatting for interactive volume rendering, which approximates this procedure. Splatting algorithms interpret volume data as a set of particles that are absorbing and emitting light. Line integrals are precomputed across each particle separately, resulting in footprint functions. Each footprint spreads its contribution in the image plane. These contributions are composited back to front into the final image.</p><p>We introduce a new footprint function for volume splatting algorithms integrating an elliptical Gaussian reconstruction kernel and a low-pass filter. Our derivation proceeds along similar lines as Heckbert's elliptical weighted average (EWA) texture filter <ref type="bibr" target="#b3">[4]</ref>, therefore we call our algorithm EWA volume splatting.</p><p>EWA volume rendering is attractive because it prevents aliasing artifacts in the output image while avoiding excessive blurring. Moreover, it works with arbitrary elliptical Gaussian reconstruction kernels and efficiently supports perspective projection. Our method is based on a novel framework to compute the footprint function, which relies on the transformation of the volume data to so-called ray space. This transformation is equivalent to perspective projection. By using its local affine approximation at each voxel, we derive an analytic expression for the EWA footprint in screen space. The rasterization of the footprint is performed using forward differ-encing requiring only one 1D footprint table for all reconstruction kernels and any viewing direction.</p><p>Our splat primitive can be integrated easily into conventional splatting algorithms. Because of its flexibility, it can be utilized to render rectilinear, curvilinear, or unstructured volume data sets. By flattening the 3D Gaussian kernel along the volume gradient we will show that EWA volume splats reduce to surface splats that are suitable for high quality iso-surface rendering.</p><p>The paper is organized as follows: We discuss previous work in Section 2. Next, we review a typical volume rendering pipeline and the volume rendering equation in Section 3. Specifically, we elaborate how the volume rendering equation is computed by typical splatting algorithms. In Section 4, we present our EWA volume rendering framework. We start by analyzing the aliasing problem due to improper sampling of the output function resulting from volume rendering. In a next step, we introduce the EWA resampling filter, which integrates an arbitrary elliptical Gaussian reconstruction kernel and a Gaussian low-pass filter. Our derivation is based on the local affine transformation of the volume data such that the reconstruction kernels can be integrated analytically. Furthermore, we show how the EWA reconstruction kernels can be continuously adapted from volumes to surfaces in Section 5. Finally, Sections 6 and 7 discuss our implementation and results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Previous Work</head><p>The original work on splatting was presented by Westover <ref type="bibr" target="#b17">[18]</ref>. Basic splatting algorithms suffer from inaccurate visibility determination when compositing the splats from back to front. This leads to visible artifacts such as color bleeding. Later, Westover <ref type="bibr" target="#b18">[19]</ref> solved the problem using an axis-aligned sheet buffer. However, this technique is plagued by disturbing popping artifacts in animations. Recently, Mueller and Crawfis <ref type="bibr" target="#b13">[14]</ref> proposed to align the sheet buffers parallel to the image plane instead of parallel to an axis of the volume data. Additionally, they splat several slices of each reconstruction kernel separately. This technique is similar to slice-based volume rendering <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b0">1]</ref> and does not suffer from popping artifacts. Mueller and Yagel <ref type="bibr" target="#b14">[15]</ref> combine splatting with ray casting techniques to accelerate rendering with perspective projection. Laur and Hanrahan <ref type="bibr" target="#b6">[7]</ref> describe a hierarchical splatting algorithm enabling progressive refinement during rendering. Furthermore, Lippert <ref type="bibr" target="#b8">[9]</ref> introduced a splatting algorithm that directly uses a wavelet representation of the volume data.</p><p>Westover's original framework does not deal with sampling rate changes due to perspective projections. Aliasing artifacts may occur in areas of the volume where the sampling rate of diverging rays falls below the volume grid sampling rate. Swan et al. <ref type="bibr" target="#b16">[17]</ref> use a distance-dependent stretch of the footprints to make them act as low-pass filters. This antialiasing method is closely related to EWA volume splatting, and we will discuss it further in Section 7.</p><p>Additional care has to be taken if the 3D kernels are not radially symmetric, as is the case for rectilinear, curvilinear, or irregular grids. In addition, for an arbitrary position in 3D, the contributions from all kernels must sum up to one. Otherwise, artifacts such as splotches occur in the image. For rectilinear grids, Westover <ref type="bibr" target="#b18">[19]</ref> proposes using elliptical footprints that are warped back to a circular footprint. To render curvilinear grids, Mao et al. <ref type="bibr" target="#b9">[10]</ref> use stochastic Poisson resampling to generate a set of new points whose kernels are spheres or ellipsoids. They compute the elliptical footprints very similar to Westover <ref type="bibr" target="#b18">[19]</ref>. As pointed out in Section 4, our technique can be used with irregular grids to efficiently and accurately project and rasterize the elliptical splat kernels.</p><p>We develop EWA volume splatting along similar lines to the seminal work of Heckbert <ref type="bibr" target="#b3">[4]</ref>, who introduced EWA filtering to avoid aliasing of surface textures. We recently extended his framework to represent and render texture functions on irregularly pointsampled surfaces <ref type="bibr" target="#b20">[21]</ref>. Section 5 will show the connection between EWA volume and surface splatting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Preliminaries</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Volume Rendering Pipeline</head><p>We distinguish two fundamental approaches to volume rendering: backward mapping algorithms that shoot rays through pixels on the image plane into the volume data, and forward mapping algorithms that map the data onto the image plane. In the following discussion, we will describe a forward mapping technique. Mapping the data onto the image plane involves a sequence of intermediate steps where the data is transformed to different coordinate systems, as in conventional rendering pipelines. We introduce our terminology in <ref type="figure" target="#fig_1">Figure 1</ref>. Note that the terms space and coordinate system are synonymous. The figure summarizes a forward mapping volume rendering pipeline, where the data flows from the left to the right.  As an overview, we briefly describe the coordinate systems and transformations that are relevant for our technique. The volume data is initially given in object coordinates. To render the data from an arbitrary viewpoint, it is first mapped to camera space using the viewing transformation. We deal with the effect of this transformation in Section 4.3. The camera coordinate system is defined such that its origin is at the center of projection.</p><p>We further transform the data to ray space, which is introduced in Section 3.2. Ray space is a non-cartesian coordinate system that enables an easy formulation of the volume rendering equation. In ray space, the viewing rays are parallel to a coordinate axis, facilitating analytical integration of the volume function. We present the transformation from camera to ray space in Section 4.4; it is a key element of our technique. Since its purpose is similar to the projective transform used in rendering pipelines such as OpenGL, it is also called the projective mapping.</p><p>Evaluating the volume rendering equation results in a 2D image in screen space. In a final step, this image is transformed to viewport coordinates. Focusing on the essential aspects of our technique, we are not covering the viewport transformation in the following explanations. However, it can be easily incorporated in an implementation. Moreover, we do not discuss volume classification and shading in a forward mapping pipeline, but refer to <ref type="bibr" target="#b12">[13]</ref> or <ref type="bibr" target="#b19">[20]</ref> for a thorough discussion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Splatting Algorithms</head><p>We review the low albedo approximation of the volume rendering equation <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">12]</ref> as used for fast, direct volume rendering <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b7">8]</ref>. The left part of <ref type="figure" target="#fig_2">Figure 2</ref> illustrates the corresponding situation in 2D. Starting from this form of the rendering equation, we discuss several simplifying assumptions leading to the well known splatting formulation. Because of their efficiency, splatting algorithms <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b12">13]</ref> belong to the most popular forward mapping volume rendering techniques.</p><p>We slightly modify the conventional notation, introducing our concept of ray space. We denote a point in ray space by a column vector of three coordinates x = (x0, x1, x2) T . Given a center of projection and a projection plane, these three coordinates are interpreted geometrically as follows: The coordinates x0 and x1 specify a point on the projection plane. The ray intersecting the center of projection and the point (x0, x1) on the projection plane is called a viewing ray. Using the abbreviationx = (x0, x1) T , we refer to the viewing ray passing through (x0, x1) asx. The third coordinate x2 specifies the Euclidean distance from the center of projection to a point on the viewing ray. To simplify the notation, we will use any of the synonyms The volume rendering equation describes the light intensity I λ (x) at wavelength λ that reaches the center of projection along the rayx with length L:</p><formula xml:id="formula_0">x, (x, x2) T , or (x0, x1, x2) T to denote a point in ray space. λ x ξ , ξ ξ 1 g j q j x ( ) - k 1</formula><formula xml:id="formula_1">I λ (x) = L 0 c λ (x, ξ)g(x, ξ)e − Ê ξ 0 g(x,µ) dµ dξ,<label>(1)</label></formula><p>where g(x) is the extinction function that defines the rate of light occlusion, and c λ (x) is an emission coefficient. The exponential term can be interpreted as an attenuation factor. Finally, the product c λ (x)g(x) is also called the source term <ref type="bibr" target="#b11">[12]</ref>, describing the light intensity scattered in the direction of the rayx at the point x2. Now we assume that the extinction function is given as a weighted sum of coefficients g k and reconstruction kernels r k (x). This corresponds to a physical model where the volume consists of individual particles that absorb and emit light. Hence the extinction function is:</p><formula xml:id="formula_2">g(x) = k g k r k (x).<label>(2)</label></formula><p>In this mathematical model, the reconstruction kernels r k (x) reflect position and shape of individual particles. The particles can be irregularly spaced and may differ in shape, hence the representation in (2) is not restricted to regular data sets. We substitute (2) into (1), yielding:</p><formula xml:id="formula_3">I λ (x) = k L 0 c λ (x, ξ)g k r k (x, ξ) j e −g j Ê ξ 0 r j (x,µ) dµ dξ .<label>(3)</label></formula><p>To compute this function numerically, splatting algorithms make several simplifying assumptions, illustrated in the right part of <ref type="figure">Figure</ref> 2. Usually the reconstruction kernels r k (x) have local support. The splatting approach assumes that these local support areas do not overlap along a rayx, and the reconstruction kernels are ordered front to back. We also assume that the emission coefficient is constant in the support of each reconstruction kernel along a ray, hence we use the notation c λk (x) = c λ (x, x2), where (x, x2) is in the support of r k . Moreover, we approximate the exponential function with the first two terms of its Taylor expansion, thus e x ≈ 1−x. Finally, we ignore self-occlusion. Exploiting these assumptions, we rewrite (3), yielding:</p><formula xml:id="formula_4">I λ (x) = k c λk (x)g k q k (x) k−1 j=0 (1 − gjqj (x)) ,<label>(4)</label></formula><p>where q k (x) denotes an integrated reconstruction kernel, hence:</p><formula xml:id="formula_5">q k (x) = Ê r k (x, x2) dx2.<label>(5)</label></formula><p>Equation <ref type="formula" target="#formula_4">4</ref>is the basis for all splatting algorithms. Westover <ref type="bibr" target="#b18">[19]</ref> introduced the term footprint function for the integrated reconstruction kernels q k . The footprint function is a 2D function that specifies the contribution of a 3D kernel to each point on the image plane.</p><p>Integrating a volume along a viewing ray is analogous to projecting a point on a surface onto the image plane, hence the coordinateŝ x = (x0, x1) T are also called screen coordinates, and we say that I λ (x) and q k (x) are defined in screen space.</p><p>Splatting is attractive because of its efficiency, which it derives from the use of pre-integrated reconstruction kernels. Therefore, during volume integration each sample point along a viewing ray is computed using a 2D convolution. In contrast, ray-casting methods require a 3D convolution for each sample point. This provides splatting algorithms with an inherent advantage in rendering efficiency. Moreover, splatting facilitates the use of higher quality kernels with a larger extent than the trilinear kernels typically employed by ray-casting. On the other hand, basic splatting methods are plagued by artifacts because of incorrect visibility determination. This problem is unavoidably introduced by the assumption that the reconstruction kernels do not overlap and are ordered back to front. It has been successfully addressed by several authors as mentioned in Section 2. In contrast, our main contribution is a novel splat primitive that provides high quality antialiasing and efficiently supports elliptical kernels. We believe that our novel primitive is compatible with all state-of-the-art algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The EWA Volume Resampling Filter</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Aliasing in Volume Splatting</head><p>Aliasing is a fundamental problem of any rendering algorithm, arising whenever a rendered image or a part of it is sampled to a discrete raster grid, i.e., the pixel grid. Aliasing leads to visual artifacts such as jagged silhouette edges and Moiré patterns in textures. Typically, these problems become most disturbing during animations. From a signal processing point of view, aliasing is well understood: before a continuous function is sampled to a regular sampling grid, it has to be band-limited to respect the Nyquist frequency of the grid. This guarantees that there are no aliasing artifacts in the sampled image. In this section we provide a systematic analysis on how to band-limit the splatting equation.</p><p>The splatting equation <ref type="formula" target="#formula_4">4</ref>represents the output image as a continuous function I λ (x) in screen space. In order to properly sample this function to a discrete output image without aliasing artifacts, it has to be band-limited to match the Nyquist frequency of the discrete image. In theory, we achieve this band-limitation by convolving I λ (x) with an appropriate low-pass filter h(x), yielding the antialiased splatting equation</p><formula xml:id="formula_6">(I λ ⊗ h)(x) = Ê 2 k c λk (η)g k q k (η) k−1 j=0 (1 − gjqj (η)) h(x − η) dη.<label>(6)</label></formula><p>Although I λ (x) is formulated as a continuous function in <ref type="bibr" target="#b3">(4)</ref>, in practice this function is evaluated only at discrete positions, i.e., the pixel centers. Therefore we cannot evaluate <ref type="bibr" target="#b5">(6)</ref>, which requires that I λ (x) is available as a continuous function. However, we make two simplifying assumptions to rearrange the integral in <ref type="bibr" target="#b5">(6)</ref>. This leads to an approximation that can be evaluated efficiently. First, we assume that the emission coefficient is approximately constant in the support of each footprint function q k , hence c λk (x) ≈ c λk for allx in the support area. Together with the assumption that the emission coefficient is constant in the support of each reconstruction kernel along a viewing ray, this means that the emission coefficient is constant in the complete 3D support of each reconstruction kernel. In other words, we ignore the effect of shading for antialiasing. Note that this is the common approach for antialiasing surface textures as well.</p><p>Additionally, we assume that the attenuation factor has an approximately constant value o k in the support of each footprint function. Hence:</p><formula xml:id="formula_7">k−1 j=0 (1 − gjqj(x)) ≈ o k<label>(7)</label></formula><p>for allx in the support area. A variation of the attenuation factor indicates that the footprint function is partially covered by a more opaque region in the volume data. Therefore this variation can be interpreted as a "soft" edge. Ignoring such situations means that we cannot prevent edge aliasing. Again, this is similar to rendering surfaces, where edge and texture aliasing are handled by different algorithms as well. Exploiting these simplifications, we can rewrite (6) to:</p><formula xml:id="formula_8">(I λ ⊗ h)(x) ≈ k c λk o k g k Ê 2 q k (η)h(x − η) dη = k c λk o k g k (q k ⊗ h)(x).</formula><p>Following Heckbert's terminology <ref type="bibr" target="#b3">[4]</ref>, we call:</p><formula xml:id="formula_9">ρ k (x) = (q k ⊗ h)(x)<label>(8)</label></formula><p>an ideal resampling filter, combining a footprint function q k and a low-pass kernel h. Hence, we can approximate the antialiased splatting equation <ref type="formula" target="#formula_6">6</ref>by replacing the footprint function q k in the original splatting equation <ref type="formula" target="#formula_4">4</ref>with the resampling filter ρ k . This means that instead of band-limiting the output function I λ (x) directly, we band-limit each footprint function separately. Under the assumptions described above, we get a splatting algorithm that produces a band-limited output function respecting the Nyquist frequency of the raster image, therefore avoiding aliasing artifacts. Remember that the reconstruction kernels are integrated in ray space, resulting in footprint functions that vary significantly in size and shape across the volume. Hence the resampling filter in (8) is strongly space variant. Swan et al. presented an antialiasing technique for splatting <ref type="bibr" target="#b16">[17]</ref> that is based on a uniform scaling of the reconstruction kernels to band-limit the extinction function. Their technique produces similar results as our method for radially symmetric kernels. However, for more general kernels, e.g., elliptical kernels, uniform scaling is a poor approximation of ideal low-pass filtering. Aliasing artifacts cannot be avoided without introducing additional blurriness. On the other hand, our method provides non-uniform scaling in these cases, leading to superior image quality as illustrated in Section 7. Moreover, our analysis above shows that band-limiting the extinction function does not guarantee aliasing free images. Because of shading and edges, frequencies above the Nyquist limit persist. However, these effects are not discussed in <ref type="bibr" target="#b16">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Elliptical Gaussian Kernels</head><p>We choose elliptical Gaussians as reconstruction kernels and lowpass filters, since they provide certain features that are crucial for our technique: Gaussians are closed under affine mappings and convolution, and integrating a 3D Gaussian along one coordinate axis results in a 2D Gaussian. These properties enable us to analytically compute the resampling filter in (8) as a single 2D Gaussian, as will be shown below. In this section, we summarize the mathematical features of the Gaussians that are exploited in our derivation in the following sections. More details on Gaussians can be found in Heckbert's master's thesis <ref type="bibr" target="#b3">[4]</ref>.</p><p>We define an elliptical Gaussian GV(x − p) centered at a point p with a variance matrix V as:</p><formula xml:id="formula_10">GV(x − p) = 1 2π|V| 1 2 e − 1 2 (x−p) T V −1 (x−p) ,<label>(9)</label></formula><p>where |V| is the determinant of V. In this form, the Gaussian is normalized to a unit integral. In the case of volume reconstruction kernels, GV is a 3D function, hence V is a symmetric 3 × 3 matrix and x and p are column vectors (x0, x1, x2) T and (p0, p1, p2) T , respectively. We can easily apply an arbitrary affine mapping u = Φ(x) to this Gaussian. Let us define the affine mapping as Φ(x) = Mx + c, where M is a 3 × 3 matrix and c is a vector (c0, c1, c2) T . We substitute x = Φ −1 (u) in (9), yielding:</p><formula xml:id="formula_11">GV(Φ −1 (u) − p) = 1 |M −1 | G MVM T (u − Φ(p)).<label>(10)</label></formula><p>Moreover, convolving two Gaussians with variance matrices V and Y results in another Gaussian with variance matrix V + Y:</p><formula xml:id="formula_12">(GV ⊗ GY)(x − p) = GV+Y(x − p).<label>(11)</label></formula><p>Finally, integrating a 3D Gaussian GV along one coordinate axis yields a 2D Gaussian GV, hence: </p><formula xml:id="formula_13">Ê GV(x − p) dx2 = GV(x −p),<label>(12)</label></formula><p>In the following sections, we describe how to map arbitrary elliptical Gaussian reconstruction kernels from object to ray space. Our derivation results in an analytic expression for the kernels in ray space r k (x) as in Equation (2). We will then be able to analytically integrate the kernels according to Equation <ref type="bibr" target="#b4">(5)</ref> and to convolve the footprint function q k with a Gaussian low-pass filter h as in Equation <ref type="bibr" target="#b7">(8)</ref>, yielding an elliptical Gaussian resampling filter ρ k .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">The Viewing Transformation</head><p>The reconstruction kernels are initially given in object space, which has coordinates t = (t0, t1, t2) T . Let us denote the Gaussian reconstruction kernels in object space by r k (t) = G V k (t − t k ), where t k are the voxel positions in object space. For regular volume data sets, the variance matrices V k are usually identity matrices. For rectilinear data sets, they are diagonal matrices where the matrix elements contain the squared distances between voxels along each coordinate axis. Curvilinear and irregular grids have to be resampled to a more regular structure in general. For example, Mao et al. <ref type="bibr" target="#b10">[11]</ref> describe a stochastic sampling approach with a method to compute the variance matrices for curvilinear volumes.</p><p>We denote camera coordinates by a vector u = (u0, u1, u2) T . Object coordinates are transformed to camera coordinates using an affine mapping u = ϕ(t), called viewing transformation. It is defined by a matrix W and a translation vector d as ϕ(t) = Wt + d. We transform the reconstruction kernels G V k (t − t k ) to camera space by substituting t = ϕ −1 (u) and using Equation <ref type="formula" target="#formula_11">10</ref>:</p><formula xml:id="formula_15">G V k (ϕ −1 (u) − t k ) = 1 |W −1 | G V k (u − u k ) = r k (u),<label>(14)</label></formula><p>where u k = ϕ(t k ) is the center of the Gaussian in camera coordinates and r k (u) denotes the reconstruction kernel in camera space. According to <ref type="bibr" target="#b9">(10)</ref>, the variance matrix in camera coordinates V k is given by V k = WV k W T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">The Projective Transformation</head><p>The projective transformation converts camera coordinates to ray coordinates as illustrated in <ref type="figure" target="#fig_4">Figure 3</ref>. Camera space is defined such that the origin of the camera coordinate system is at the center of projection and the projection plane is the plane u2 = 1. Camera space and ray space are related by the mapping x = m(u). Using the definition of ray space from Section 3, m(u) and its inverse m −1 (x) are therefore given by:</p><formula xml:id="formula_16">¼ x0 x1 x2 ½ = m(u) = ¼ u0/u2 u1/u2 (u0, u1, u2) T ½ (15) ¼ u0 u1 u2 ½ = m −1 (x) = ¼ x0/l • x2 x1/l • x2 1/l • x2 ½ ,<label>(16)</label></formula><p>where</p><formula xml:id="formula_17">l = (x0, x1, 1) T .</formula><p>Unfortunately, these mappings are not affine, so we cannot apply Equation (10) directly to transform the reconstruction kernels from camera to ray space. To solve this problem, we introduce the local affine approximation mu k of the projective transformation. It is defined by the first two terms of the Taylor expansion of m at the point u k :</p><formula xml:id="formula_18">mu k (u) = x k + Ju k • (u − u k ),<label>(17)</label></formula><p>where x k = m(u k ) is the center of a Gaussian in ray space. The Jacobian Ju k is given by the partial derivatives of m at the point u k :</p><formula xml:id="formula_19">Ju k = ∂m ∂u (u k ).<label>(18)</label></formula><p>In the following discussion, we are omitting the subscript u k , hence m(u) denotes the local affine approximation <ref type="bibr" target="#b16">(17)</ref>. We substitute u = m −1 (x) in <ref type="bibr" target="#b13">(14)</ref> and apply Equation (10) to map the reconstruction kernels to ray space, yielding the desired expression for r k (x): where V k is the variance matrix in ray coordinates. According to <ref type="bibr" target="#b9">(10)</ref>, V k is given by:</p><formula xml:id="formula_20">r k (x) = 1 |W −1 | G V k (m −1 (x) − u k ) = 1 |W −1 ||J −1 | GV k (x − x k ),<label>(19)</label></formula><formula xml:id="formula_21">V k = JV k J T = JWV k W T J T .<label>(20)</label></formula><p>Note that for uniform or rectilinear data sets, V k has to be computed only once per frame, since V k is the same for all voxels and W changes only from frame to frame. However, since the Jacobian is different for each voxel position, V k has to be recalculated for each voxel. In the case of curvilinear or irregular volumes, each reconstruction kernel has an individual variance matrix V k . Our method efficiently handles this situation, requiring only one additional 3 × 3 matrix multiplication. In contrast, previous techniques <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b10">11]</ref> cope with elliptical kernels by computing their projected extents in screen space and then establishing a mapping to a circular footprint table. However, this procedure is computationally expensive. It leads to a bad approximation of the integral of the reconstruction kernel as pointed out in <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b16">17]</ref>.</p><p>As illustrated in <ref type="figure" target="#fig_5">Figure 4</ref>, the local affine mapping is exact only for the ray passing through u k or x k , respectively. The figure is exaggerated to show the non-linear effects in the exact mapping. The affine mapping essentially approximates the perspective projection with an oblique orthographic projection. Therefore, parallel lines are preserved, and approximation errors grow with increasing ray divergence. However, the errors do not lead to visual artifacts in general <ref type="bibr" target="#b14">[15]</ref>, since the fan of rays intersecting a reconstruction kernel has a small opening angle due to the local support of the reconstruction kernels.</p><p>A common approach of performing splatting with perspective projection is to map the footprint function onto a footprint polygon in camera space in a first step. In the next step, the footprint polygon is projected to screen space and rasterized, resulting in the so-called footprint image. As mentioned in <ref type="bibr" target="#b14">[15]</ref>, however, this requires significant computational effort. In contrast, our framework efficiently performs perspective projection by mapping the volume to ray space, which requires only the computation of the Jacobian and two 3 × 3 matrix multiplications. For spherical reconstruction kernels, these matrix operations can be further optimized as shown in Section 6. </p><formula xml:id="formula_22">u 2 r' k (u) r k (x) û u u u k k k x k x k x k x k x k2 x k2</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Integration and Band-Limiting</head><p>We integrate the Gaussian reconstruction kernel of (19) according to <ref type="bibr" target="#b4">(5)</ref>, resulting in a Gaussian footprint function q k :</p><formula xml:id="formula_23">q k (x) = Ê 1 |J −1 ||W −1 | GV k (x −x k , x2 − x k2 ) dx2 = 1 |J −1 ||W −1 | GV k (x −x k ),<label>(21)</label></formula><p>where the 2 × 2 variance matrixV k of the footprint function is obtained from V k by skipping the last row and column, as shown in <ref type="bibr" target="#b12">(13)</ref>.</p><p>Finally, we choose a Gaussian low-pass filter h =</p><formula xml:id="formula_24">G V h (x),</formula><p>where the variance matrix V h ∈ Ê 2×2 is typically the identity matrix. With (11), we compute the convolution in <ref type="bibr" target="#b7">(8)</ref>, yielding the EWA volume resampling filter:</p><formula xml:id="formula_25">ρ k (x) = (q k ⊗ h)(x) = 1 |J −1 ||W −1 | (GV k ⊗ G V h )(x −x k ) = 1 |J −1 ||W −1 | GV k +V h (x −x k ).<label>(22)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Reduction from Volume to Surface Reconstruction Kernels</head><p>Since our EWA volume resampling filter can handle arbitrary Gaussian reconstruction kernels, we can represent the structure of a volume data set more accurately by choosing the shape of the reconstruction kernels appropriately. For example, we can improve the precision of isosurface rendering by flattening the reconstruction kernels in the direction of the surface normal. We will show below that an infinitesimally flat Gaussian volume kernel is equivalent to a Gaussian surface texture reconstruction kernel <ref type="bibr" target="#b20">[21]</ref>. In other words, we can extract and render a surface representation from a volume data set directly by flattening volume reconstruction kernels into surface reconstruction kernels. Our derivation is illustrated in <ref type="figure" target="#fig_6">Figure 5</ref>.</p><formula xml:id="formula_26">(u 0, u 1 ) u 2 x 2 (x 0, x 1 ) 3D viewing transformation integration 1 1/s s ∞ (u 0, u 1 ) u 2 x 2 (x 0, x 1 )</formula><p>2D to 3D parameterization 3D to 2D projection 1 2D to 2D compound mapping object space camera space screen space We construct a flattened Gaussian reconstruction kernel in object space by scaling a spherical Gaussian in one direction by a factor 1/s, hence its variance matrix is:</p><formula xml:id="formula_27">V = ¼ 1 0 0 0 1 0 0 0 1 s 2 ½ .</formula><p>A scaling factor s = 1 corresponds to a spherical 3D kernel. In the limit, if s = ∞, we get a circular 2D kernel.</p><p>To render this reconstruction kernel, we first apply a 3D transformation matrix W, which may contain arbitrary modeling transformations concatenated with the viewing transformation. Then we use the local affine approximation of Equation <ref type="bibr" target="#b16">(17)</ref> to map the kernel to ray space. The variance matrix V of the reconstruction kernel in ray space is computed as in <ref type="bibr" target="#b19">(20)</ref>. We introduce the matrix T 3D to denote the concatenated 3D mapping matrix T 3D = JW and write V as:</p><formula xml:id="formula_28">V = JWV W T J T = T 3D V T 3D T .</formula><p>Hence, the elements vij of V are given by:</p><formula xml:id="formula_29">v00 = t 2 00 + t 2 01 + t 2 02 s 2 v01 = v10 = t00t10 + t01t11 + t02t12 s 2 v02 = v20 = t00t20 + t01t21 + t02t22 s 2 v11 = t 2 10 + t 2 11 + t 2 12 s 2 v12 = v21 = t10t20 + t11t21 + t12t22 s 2 v22 = t 2 20 + t 2 21 + t 2 22 s 2 ,</formula><p>where we denote an element of T 3D by tij. We compute the 2D Gaussian footprint function by integrating the reconstruction kernel. According to <ref type="bibr" target="#b12">(13)</ref>, its 2D variance matrix is obtained by skipping the third row and column in V. As s approaches infinity, we therefore get the following 2D variance matrixV:V = t 2 00 + t 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>01</head><p>t00t10 + t01t11 t00t10 + t01t11 t 2 10 + t 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>11</head><p>.</p><p>Conveniently, the 2D variance matrix can be factored into a 2D mapping T 2D , which is obtained from the 3D mapping matrix by skipping the third row and column:</p><formula xml:id="formula_31">V = T 2D T 2D T = t00 t01 t10 t11 t00 t10 t01 t11 .<label>(24)</label></formula><p>Let us now analyze the 2D mapping matrix T 2D . First, we need an explicit expression for the Jacobian J of the projective mapping. Using <ref type="bibr" target="#b14">(15)</ref> and <ref type="formula" target="#formula_19">18</ref>, it is given by:</p><formula xml:id="formula_32">J = ¼ 1/u2 0 −u0/u 2 2 0 1/u2 −u1/u 2 2 u0/l u1/l u2/l ½ ,<label>(25)</label></formula><p>where l = (u0, u1, u2) T . With T 3D = JW, we use the first two rows of J and the first two columns of W to factor T 2D into:</p><formula xml:id="formula_33">T 2D = 1/u2 0 −u0/u 2 2 0 1/u2 −u1/u 2 2 ¼ w00 w01 w10 w11 w20 w21 ½ ,</formula><p>where wij denotes an element of W. This can be interpreted as a concatenation of a 2D to 3D with a 3D to 2D mapping, resulting in a compound 2D to 2D mapping similar as in conventional texture mapping <ref type="bibr" target="#b2">[3]</ref>. We illustrate this process schematically in <ref type="figure" target="#fig_6">Figure 5</ref> and more intuitively in <ref type="figure" target="#fig_8">Figure 6</ref>. The first stage is a parameterization of a 3D plane. It maps a circular 2D texture kernel onto a plane defined by the two vectors (w00, w10, w20) T and (w01, w11, w21) T in 3D camera space, resulting in an ellipse. The second stage is an oblique parallel projection with an additional scaling factor 1/u2, which is the local affine approximation of the perspective projection. Finally, combining the projected ellipse with a low-pass filter as in Equation (8) yields a texture filter that is equivalent to Heckbert's EWA filter <ref type="bibr" target="#b3">[4]</ref>. This is the same result as we derive in <ref type="bibr" target="#b20">[21]</ref>. We compare splatting with volumetric kernels and splatting with surface kernels in Section 7.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Implementation</head><p>We implemented a volume rendering algorithm based on the EWA splatting equation. Our implementation is embedded in the VTK (visualization toolkit) framework <ref type="bibr" target="#b15">[16]</ref>. We did not optimize our code for rendering speed. We use a sheet buffer to first accumulate splats from planes in the volume that are most parallel to the projection plane <ref type="bibr" target="#b18">[19]</ref>. In a second step, the final image is computed by compositing the sheets back to front. Shading is performed using the gradient estimation functionality provided by VTK and the Phong illumination model. We summarize the main steps which are required to compute the EWA splat for each voxel: First, we compute the camera coordinates u k of the current voxel k by applying the viewing transformation to the voxel center. Using u k , we then evaluate the Jacobian J as given in Equation (25). In line 4, we transform the Gaussian reconstruction kernel from object to ray space. This transformation is implemented by Equation <ref type="formula" target="#formula_21">20</ref>, and it results in the 3 × 3 variance matrix V k of the Gaussian in ray space. Remember that W is the rotational part of the viewing transformation, hence it is typically orthonormal. Moreover, for spherical kernels, V k is the identity matrix. In this case, evaluation of Equation <ref type="formula" target="#formula_21">20</ref>can be simplified significantly. Next, we project the voxel center from camera space to the screen by performing a perspective division on u k . This yields the 2D screen coordinateŝ x k . Now we are ready to setup the resampling filter ρ k according to Equation (22). Its variance matrix is derived from V k by omitting the third row and column, and adding a 2 × 2 identity matrix for the low-pass filter. Moreover, we compute the determinants 1/|J −1 | and 1/|W| −1 that are used as normalization factors.</p><p>Finally, we rasterize the resampling filter in line 7. As can be seen from the definition of the elliptical Gaussian (9), we also need the inverse of the variance matrix, which is called the conic matrix. Let us denote the 2 × 2 conic matrix of the resampling filter by Q. Furthermore, we define the radial index function</p><formula xml:id="formula_34">r(x) =x T Qx wherex = (x0,x1) T =x −x k .</formula><p>Note that the contours of the radial index, i.e., r = const. are concentric ellipses. For circular kernels, r is the squared distance to the circle center. The exponential function in (9) can now be written as e − 1 2 r . We store this function in a 1D lookup table. To evaluate the radial index efficiently, we use finite differencing. Since r is biquadratic inx, we need only two additions to update r for each pixel. We rasterize r in a rectangular, axis aligned bounding box centered aroundx k as illustrated in <ref type="figure" target="#fig_9">Figure 7</ref>. Typically, we use a threshold c = 4 and evaluate the Gaussian only if r(x) &lt; c. Heckbert provides pseudo-code of the rasterization algorithm in <ref type="bibr" target="#b3">[4]</ref>.</p><p>x - </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Results</head><p>The EWA resampling filter has a number of useful properties, as illustrated in <ref type="figure" target="#fig_10">Figure 8</ref>. When the mapping from camera to ray space minifies the volume, size and shape of the resampling filter are dominated by the low-pass filter, as in the left column of <ref type="figure" target="#fig_10">Figure 8</ref>. In the middle column, the volume is magnified and the resampling filter is dominated by the reconstruction kernel. Since the resampling filter unifies a reconstruction kernel and a low-pass filter, it provides a smooth transition between magnification and minification. Moreover, the reconstruction kernel is scaled anisotropically in situations where the volume is stretched in one direction and shrinked in the other, as shown in the right column. In the bottom row, we show the filter shapes resulting from uniformly scaling the reconstruction kernel to avoid aliasing, as proposed by Swan et al. <ref type="bibr" target="#b16">[17]</ref>. Essentially, the reconstruction kernel is enlarged such that its minor radius is at least as long as the minor radius of the lowpass filter. For spherical reconstruction kernels, or circular footprint functions, this is basically equivalent to the EWA resampling filter. However, for elliptical footprint functions, uniform scaling leads to overly blurred images in the direction of the major axis of the ellipse. We compare our method to Swan's method in <ref type="figure" target="#fig_10">Figure 8</ref> (see colorplate). The images on the left were rendered with EWA volume splats, those on the right with Swan's uniformly scaled kernels. We used a square zebra texture with x and y dimensions of 1024 × 512 in the first row, and 1024 × 256 in the second row. This leads to elliptical reconstruction kernels with a ratio between the length of the major and minor radii of 2 to 1 and 4 to 1, respectively. Clearly, the EWA filter produces a crisper image and at the same time does not exhibit aliasing artifacts. As the ratio between the major and minor radii of the reconstruction kernels increases, the difference to Swan's method becomes more pronounced. For strongly anisotropic kernels, Swan's uniform scaling produces excessively blurred images, as shown on the right in <ref type="figure" target="#fig_10">Figure 8</ref> . Each frame took approximately 6 seconds to render on an 866 MHz PIII processor.</p><p>In <ref type="figure">Figure 9</ref> (see colorplate), we compare EWA splatting using volume kernels on the left to surface reconstruction kernels on the right. The texture size is 512 × 512 in x and y direction. Typically, the perspective projection of a spherical kernel is almost a circle. Therefore, rendering with volume kernels does not exhibit anisotropic texture filtering and produces textures that are slightly too blurry, similar to isotropic texture filters such as trilinear mipmapping. On the other hand, splatting surface kernels is equivalent to EWA texture filtering. Circular surface kernels are mapped to ellipses, which results in high image quality because of anisotropic filtering.</p><p>In <ref type="figure" target="#fig_1">Figure 10</ref> (see colorplate), we show a series of volume renderings of the UNC CT scan of a human head (256 × 256 × 225), the UNC engine (256 × 256 × 110), and the foot of the visible woman dataset (152 × 261 × 220). The texture in the last example is rendered using EWA surface splatting, too. The images illustrate that our algorithm correctly renders semitransparent objects as well. The skull of the UNC head, the bone of the foot, and the iso-surface of the engine were rendered with flattened surface splats oriented perpendicular to the volume gradient. All other voxels were rendered with EWA volume splats. Each frame took approximately 11 seconds to render on an 866 MHz PIII processor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion and Future Work</head><p>We present a new splat primitive for volume rendering, called the EWA volume resampling filter. Our primitive provides high quality antialiasing for splatting algorithms, combining an elliptical Gaussian reconstruction kernel with a Gaussian low-pass filter. We use a novel approach of computing the footprint function. Exploiting the mathematical features of 2D and 3D Gaussians, our framework efficiently handles arbitrary elliptical reconstruction kernels and perspective projection. Therefore, our primitive is suitable to render regular, rectilinear, curvilinear, and irregular volume data sets. Finally, we derive a formulation of the EWA surface reconstruction kernel, which is equivalent to Heckbert's EWA texture filter. Hence we call our primitive universal, facilitating the reconstruction of surface and volume data.</p><p>We have not yet investigated whether other kernels besides elliptical Gaussians may be used with this framework. In principle, a resampling filter could be derived from any function that allows the analytic evaluation of the operations described in Section 4.2 and that is a good approximation of an ideal low-pass filter.</p><p>To achieve interactive frame rates, we are currently investigating the use of graphics hardware to rasterize EWA splats as texture mapped polygons. We also plan to use sheet-buffers that are parallel to the image plane to eliminate popping artifacts. To render non-rectilinear datasets we are investigating fast back-to-front sorting algorithms. Furthermore, we want to experiment with our splat primitive in a post-shaded volume rendering pipeline. The derivative of the EWA resampling filter could be used as a bandlimited gradient kernel, hence avoiding aliasing caused by shading for noisy volume data. Finally, we want to exploit the ability of our framework to render surface splats. In conjunction with voxel culling algorithms we believe it is useful for real-time iso-surface rendering.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>The forward mapping volume rendering pipeline.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Volume rendering. Left: Illustrating the volume rendering equation in 2D. Right: Approximations in typical splatting algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>wherex = (x0, x1) T andp = (p0, p1) T . The 2 × 2 variance matrixV is easily obtained from the 3 × 3 matrix V by skipping the third row and column:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Transforming the volume from camera to ray space. Top: camera space. Bottom: ray space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Mapping a reconstruction kernel from camera to ray space. Top: camera space. Bottom: ray space. Left: local affine mapping. Right: exact mapping.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Reducing a volume reconstruction kernel to a surface reconstruction kernel by flattening the kernel in one dimension. Top: rendering a volume kernel. Bottom: rendering a surface kernel.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>compound mapping(u 0 ,u 1 ,u 2 ) T camera space (w 00 ,w 10 ,w 20 ) T (w 01 ,w 11 ,w 21 ) T2D texture kernels</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 6 :</head><label>6</label><figDesc>Rendering surface kernels.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 7 :</head><label>7</label><figDesc>Rasterizing the resampling filter.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Properties of the EWA resampling filter</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgments</head><p>Many thanks to Lisa Sobierajski Avila for her help with our implementation of EWA volume splatting in vtk. We would also like to thank Paul Heckbert for his encouragement and helpful comments. Thanks to Chris Wren for his supporting role in feeding us, and to Jennifer Roderick and Martin Roth for proofreading the paper.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EWA Volume Splatting</head><p>Swan et al. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EWA Volume Splatting</head><p>EWA Surface Splatting <ref type="figure">Figure 9</ref>: EWA volume splatting versus EWA surface splatting; 512 × 512 × 3 volume texture. The image resolution is 500 × 342 pixels. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Accelerated Volume Rendering and Tomographic Reconstruction Using Texture Mapping Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Cam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Volume Visualization</title>
		<meeting><address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-10" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Direct Volume Rendering with Shading via Three-Dimensional Textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM/IEEE Symposium on Volume Visualization</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Survey of Texture Mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="56" to="67" />
			<date type="published" when="1986-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Fundamentals of Texture Mapping and Image Warping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989-06-17" />
		</imprint>
		<respStmt>
			<orgName>University of California at Berkeley, Department of Electrical Engineering and Computer Science</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Ray Tracing Volume Densities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>James</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><forename type="middle">P</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Von Herzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proceedings of SIGGRAPH 84)</title>
		<meeting><address><addrLine>Minneapolis, Minnesota</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1984-07" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast Volume Rendering Using a Shear-Warp factorization of the Viewing Transform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics, Proceedings of SIGGRAPH 94</title>
		<imprint>
			<date type="published" when="1994-07" />
			<biblScope unit="page" from="451" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Hierarchical Splatting: A Progressive Refinement Algorithm for Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics, SIGGRAPH &apos;91 Proceedings</title>
		<meeting><address><addrLine>Las Vegas, NV</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-08" />
			<biblScope unit="page" from="285" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Display of Surfaces From Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Fast Wavelet Based Volume Rendering by Accumulation of Transparent Texture Maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lippert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
		<idno>1067-7055</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="431" to="444" />
			<date type="published" when="1995-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Splatting of Non Rectilinear Volumes Through Stochastic Resampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="156" to="170" />
			<date type="published" when="1996-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Splatting of Curvilinear Volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;95 Proc</title>
		<imprint>
			<date type="published" when="1995-10" />
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Optical Models for Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="99" to="108" />
			<date type="published" when="1995-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Splatting Without the Blur</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moeller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1999 IEEE Visualization Conference</title>
		<meeting>the 1999 IEEE Visualization Conference<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-10" />
			<biblScope unit="page" from="363" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Eliminating Popping Artifacts in Sheet Buffer-Based Splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;98</title>
		<imprint>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="239" to="246" />
		</imprint>
	</monogr>
	<note>ISBN 0-8186-9176-X</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fast Perspective Volume Rendering with Splatting by Utilizing a Ray-Driven Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roni</forename><surname>Yagel</surname></persName>
		</author>
		<idno>0-89791-864-9</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;96</title>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="65" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The Visualization Toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lorensen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">An Anti-Aliasing Technique for Splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1997 IEEE Visualization Conference</title>
		<meeting>the 1997 IEEE Visualization Conference<address><addrLine>Phoenix, AZ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="197" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Interactive Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Chapel Hill Workshop on Volume Visualization</title>
		<editor>C. Upson</editor>
		<meeting>the Chapel Hill Workshop on Volume Visualization<address><addrLine>Chapel Hill, NC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-05" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
		<respStmt>
			<orgName>University of North Carolina at Chapel Hill</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Footprint Evaluation for Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 90</title>
		<meeting>SIGGRAPH 90</meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Opacity-Weighted Color Interpolation For Volume Sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wittenbrink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Malzbender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goss</surname></persName>
		</author>
		<idno>ISBN 0-8186-9180-8</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Symposium on</title>
		<imprint>
			<biblScope unit="volume">Visualization</biblScope>
			<biblScope unit="page" from="431" to="444" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Surface Splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 2001 Proceedings</title>
		<meeting><address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-07" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
