<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Case Study: An Environment for Understanding Protein Simulations Using Game Graphics</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donna</forename><surname>Gresh</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">San Diego Paradise Point Resort</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Suits</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">San Diego Paradise Point Resort</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuk</forename><forename type="middle">Yin</forename><surname>Sham</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">San Diego Paradise Point Resort</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ibm</forename><forename type="middle">T J</forename><surname>Watson</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">San Diego Paradise Point Resort</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Research</forename><surname>Center</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">San Diego Paradise Point Resort</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Case Study: An Environment for Understanding Protein Simulations Using Game Graphics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.6 [Computer Graphics]: Methodology and Techniques-Interaction techniques visualization</term>
					<term>proteins</term>
					<term>computational biology</term>
					<term>molecular modeling</term>
					<term>molecular dynamics</term>
					<term>game graphics</term>
					<term>DirectX</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We describe a visualization system designed for interactive study of proteins in the field of computational biology. Our system incorporates multiple, custom, three-dimensional and two-dimensional linked views of the proteins. We take advantage of modern commodity graphics cards, which are typically designed for games rather than scientific visualization applications, to provide instantaneous linking between views and three-dimensional interactivity on standard personal computers. Furthermore, we anticipate the usefulness of game techniques such as bump maps and skinning for scientific applications.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Proteins are the machinery of life. They are, in the simplest terms, a linear sequence of amino acids. Proteins have the interesting property of self-organization, on a very short time scale, into a particular "native," or folded configuration. In fact, a protein's function depends ultimately on its 3-dimensional structure in space with particularly defined motifs and regions.</p><p>To date, most protein configurations have been determined by experimental measurements, such as x-ray crystallography, electron crystallography, or NMR techniques. However, these processes require that the protein first be synthesized and isolated in measurable quantities. The visualization environment we have developed is intended to facilitate the study of proteins for researchers in the field of computational biology, where the motion and behavior of proteins and other molecules are studied in the computer rather than in the test tube. As computational power and algorithmic sophistication increases, molecular dynamic simulations of biological systems such as proteins have become an increasingly active area of research. The goal of our system is to provide an environment where the results of these simulations can be interactively studied using a variety of two-dimensional and three-dimensional views. Key to the value of the visualization environment is fast, interactive linking of views enabled by our use of modern commodity graphics technology. Though the computational demands of these simulations are often extreme, the visualization requirements are relatively modest, and the system we have developed runs at interactive speed on standard desktop and laptop personal computers. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Current Trends in Molecular Dynamics Visualization</head><p>Molecular visualization has been a focus of the graphics community for many years, and now a large number of high performance viewing environments are available commercially or freely downloadable from the web <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b9">10]</ref>. These environments comprise two main types, each with its own design requirements: standalone viewers of fixed molecular structures, and visualization front-ends integrated with a molecular dynamics simulation program. In addition, many viewers allow output of the molecular structure in a format compatible with ray-tracing packages such as POV-Ray <ref type="bibr" target="#b10">[11]</ref>, allowing non-interactive but photorealistic renderings suitable for publication. Since each viewer has its own requirements for appearance and speed, it must strike a balance between rendering quality and interaction performance based on the needs of the application. Another factor that drives the design of a molecular visualization system is the intended viewing platform, which may range from a high-end graphics workstation to a web browser running on a laptop. Commercial packages intended for the high-end platforms can assume interactive performance with large amounts of geometry, while simple viewers intended for web browsers must be lightweight and able to create compelling results without too much computation or geometry. Furthermore, each platform may have a variety of application programming interfaces (API's) for three-dimensional programming, such as OpenGL ¢ , Java3D</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¢</head><p>, and Direct3D</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¢</head><p>. The key factors that determine the API choice are portability among the target platforms and the ability to make optimal use of the graphics capabilities on the target platforms. Viewers intended for the web make additional demands based on functionality within a number of different browsers, and the need for a plug-in.</p><p>The standard three-and two-dimensional views of molecules map well to the functionality provided by graphics API's since the geometry consists of well-structured triangle strips (for ribbons), repeated glyphs (for ball and stick), or triangle manifolds (for molecular surfaces). However, there are many new features available on graphics cards that are either not supported in OpenGL, or are available only as vendor-specific hardware extensions. As a result, molecular visualization software tends to use only a subset of the capabilities of the graphics hardware; otherwise it would need specific code to deal with a variety of hardware possibilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Molecular Visualization System</head><p>Our system provides a variety of both two-dimensional and threedimensional views of proteins, all linked dynamically and instantaneously. It is programmed in C++, and uses DirectX ¢ to gain direct access to the graphics hardware without the need to write hardwaredependent code. We use splitter windows to build the application from its individual views to maximize screen use and to allow the user to easily expand a view at the expense of other views to focus on a particular area of interest. The application was built using the Microsoft Visual C++ At IEEE Visualization 2000 <ref type="bibr" target="#b6">[7]</ref>, there was a growing consensus that games are driving graphics card features, and the way to access those features is via DirectX. We were interested in experimenting with novel ways to use these game features in a scientific visualization application. The rationale and some of the implications of this design decision are discussed in Section 3.4. While our visualization application was developed specifically to study proteins, the viewing infrastructure is generic, and could be easily applied to a variety of visualization applications. <ref type="figure" target="#fig_3">Figure 1</ref> shows the application with a particular protein, green fluorescent protein, 1eme from the Protein Data Bank <ref type="bibr" target="#b1">[2]</ref>, loaded. Below we will discuss the various views our system provides; however first it is helpful to define a few of the terms common in protein studies. A protein is, fundamentally, a large molecule, consisting of on the order of a few thousand to many thousand atoms, and a few hundred to a few thousand amino acid residues, joined by peptide bonds. While there are approximately 20 different amino acids, each has in common a central carbon atom (C£ ), to which is attached a hydrogen atom, an amino group (NH¤ ), and a carboxyl group (COOH). Each peptide in the chain is essentially a planar unit, that has two degrees of rotational freedom about the backbone of the protein, defined by the sequence of C£ atoms. These two degrees of freedom are described by the angles ¥ and ¦ . A protein is also often described in terms of its primary, secondary and tertiary structure. The primary structure is simply the sequence of amino acid residues. The secondary structure is the description of particular motifs into which the protein locally arranges itself. Examples of secondary structure are § -helices and¨-sheets, which are coils and aligned runs of the backbone, respectively. Tertiary structure is the folding of distant parts of the sequence into associated structures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Three-Dimensional Views</head><p>A protein is a three-dimensional object, and its shape is critical to its functional behavior. Accordingly, an interactive three-dimensional view of the protein is critical to any visualization environment. Since a protein is, in simple terms, just a large molecule, one might expect a ball-and-stick representation to be typical. While we provide such a view as an option, it is more common to display proteins as ribbons <ref type="bibr" target="#b5">[6]</ref>. § -helices and¨-sheets are usually shown as coiled and flat ribbons, respectively, which follow the backbone of the protein. We use a variation on an algorithm described by <ref type="bibr" target="#b2">[3]</ref> to create the three-dimensional geometry of the ribbon model from the atom positions. This algorithm computes the backbone of the protein, following C£ atoms, and orients the ribbon such that the ribbon normal is always perpendicular to the plane of the peptides. We represent the ribbon as either a flat sheet or as a thickened slab. In addition, we add arrows indicating the ends of the structures with respect to the beginning of the protein chain.</p><p>We can color the ribbon using a variety of color maps, including a structure-based map, in which helices, loops, and sheets are each colored differently, and a residue-based map in which each residue is assigned a color using the Shapely scheme (see <ref type="figure" target="#fig_4">Figure 2</ref>). The left portion of <ref type="figure" target="#fig_3">Figure 1</ref> shows our ribbon view, colored by secondary structure type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Two-Dimensional Views</head><p>In addition to the three-dimensional views of the protein described above, we also present three complementary two-dimensional views.</p><p>The first such view is a distance matrix showing the distance between the C£ atoms for all pairs of residues. Points near the diagonal thus represent distances between adjacent residues along the protein backbone. We color the distance matrix using a gray scale color map, which is particularly suited to seeing both the overall distance pattern and high frequency fluctuations in distance. High frequency patterns are often associated with § -helices due to their coiled shape. We use the upper portion of the matrix to show, additionally, information on "backbone contacts" of the protein; that is, pairs of residues for which the backbone nitrogen to oxygen distance is less than 4Å. Pairs of § -helices are marked by blue points and pairs of¨-sheets by reddish brown points (these colors match those of the secondary structure colors of the three-dimensional plot). Pairs of mixed § -helices and¨-sheets are shown by green points, while pairs that include at least one residue that is part of neither a helix nor a sheet are colored dark gray.</p><p>The contact points indicate secondary and tertiary structure. A line of blue points close to the diagonal represents an § -helix, while a line of red points parallel to the diagonal represents a parallel¨sheet (in which the strands of the¨sheet are pointing in the same direction). A line of red points orthogonal to the diagonal represents an antiparallel¨-sheet (in which the strands are pointing in opposite directions). Colored points further away from the diagonal point to tertiary structure (regions of the protein separated in sequence but close in distance). In the case of proteins for which the secondary structure is not well characterized, one can use the contact plot to directly infer the secondary structure.</p><p>We chose the colors in the matrix view to be, first, natural, in the sense of matching the use of color in the three-dimensional plot, and second, easily discriminable. Gray is used for the pairs that include at least one non-helix or non-sheet residue, to downplay their prominence, since most tertiary structure arises from helices and sheets. We present a larger version of this matrix view in <ref type="figure" target="#fig_5">Figure 3</ref> so that the colors, patterns, and high frequency behavior can be seen more easily.</p><p>We use the lower diagonal of the distance matrix view to show "sidechain contacts," or residues for which the distance between sidechain atoms is less than 4.5Å. We encode the number of sidechain contacts using color; for example, residue pairs with more than five atom contacts are colored red. This allows the user to see residues which have significant sidechain interaction. <ref type="figure" target="#fig_5">Figure 3</ref> illustrates that the sidechain contacts can differ significantly from the backbone contacts. The user has the option to turn off either or both of the contact plot overlays.</p><p>The second two-dimensional view is a Ramachandran plot <ref type="bibr" target="#b4">[5]</ref>, which displays a two-dimensional histogram of the ¥ and ¦ angles of the protein. It is standard to plot the angles from -180 to 180© in each dimension, with the result that regions of the two-dimensional Ramachandran plot are associated with particular types of secondary structure: the upper left region with¨-sheets, and the central left region with § -helices. We use a blue to yellow color map to indicate the number of residues whose ¥ ¦ values fall within each bin of the histogram. Black represents bins into which no residues fall. This view can be seen in the central right portion of <ref type="figure" target="#fig_3">Figure 1</ref>.</p><p>The third two-dimensional view is a plot of  <ref type="figure" target="#fig_3">Figure 1</ref> start at 0© , continue to 180© , then continue from -180© to 0© . Colors are consistent with the secondary structure colors of the three-dimensional view.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Interaction and Linkage</head><p>The three-dimensional view of the protein is completely interactive, with mouse-driven rotation, panning, and zooming. In addition, the plot of ¥ and ¦ vs. residue allows a magnifying "lens" to be dragged over the plot to highlight any desired region. Most importantly, all of the views of the protein are linked, so that when- (above), with a "lens" expanding the view of a particular stretch of residues. This figure captures a pick of a in the distance correlation plot, which has selected two residues in each view.   <ref type="figure" target="#fig_3">Figure 1</ref>. We use a gray scale color map throughout to highlight high-frequency differences in distances, typically indicating § -helical areas. Above the diagonal we additionally encode the secondary structure type whenever two residues have a backbone to backbone distance of less than 4Å. Blue indicates a pair of § -helices, reddish-brown a pair of¨-sheets, and green a pair of mixed § -helix and¨-sheet. Dark gray is used to mark a pair that includes at least one residue which is part of neither a helix nor a sheet. Below the diagonal, marks indicate residues with sidechain to sidechain contacts of less than 4.5Å; red indicates more than 5 contacts, yellow between 2 and 4 contacts, and gray 1 contact. A yellow sidechain contact pair has been picked (left side). ever the mouse simply pauses at a particular point in the frame, all views are updated, with no mouse clicks required. The linkage is contextually appropriate, depending on the plot the mouse is residing in and its location in the plot. Thus, for example, if one dwells in the three-dimensional ribbon view, an indication of the residue name and number is drawn at the cursor position, and at the same time, the residue is indicated by a vertical line at the appropriate residue in the ¥ and ¦ line plot, by a square around the appropriate histogram bin in the Ramachandran plot, and by an indicator along the diagonal in the distance matrix. Similar behavior results from a dwell in the line plot, or a dwell on the diagonal of the distance matrix. However, since selecting an off-diagonal point in the distance matrix is equivalent to selecting two residues, two vertical lines are drawn in the ¥ and ¦ plot, the bin locations of both residues are shown in the Ramachandran plot, and both residues are indicated in the three-dimensional plot, along with a line connecting them and a display of the length of the line, representing the distance between the residues. The user also has the option of "snapping" to a nearby contact. This mitigates the problem of distance plots which may have fewer pixels than residues, allowing picking at subpixel resolution. A dwell in the two-dimensional histogram selects all residues within the selected bin and each residue selected is shown in each of the other plots. <ref type="figure" target="#fig_3">Figure 1</ref> shows the state after a dwell in a region indicating a pair of residues with a significant number of sidechain contacts (a yellow mark in the lower diagonal region). The user has also elected to show the actual sidechains of the picked pair in the threedimensional view. This picked pair is also indicated in the Ramachandran and the ¥ and ¦ plots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Use of Game Technology</head><p>We chose to use DirectX for our three-dimensional views to explore the capabilities of modern commodity graphics cards and their applicability to scientific visualization. There is much debate on the merits of DirectX vs. OpenGL, and our choice in this application was motivated by a combination of research and utilitarian interests rather than superior performance or preferred API design. The immediate users of this application are scientists who tend to use Windows laptops and desktops (even though their simulations are running on large parallel computers), and writing in DirectX allowed one code-base to work on all their personal computers and take advantage of the available hardware without, for example, having to code to vendor-specific OpenGL extensions required for different graphics cards. While DirectX has the advantage of a common API and feature set across multiple game card platforms under the Windows operating system, we note that DirectX is not available on Linux or Unix systems. For our application, this was not an issue, as the laptop platform was able to deliver acceptable interactivity and performance.</p><p>Protein simulations are ideally suited to commodity graphics cards due to the relatively small amount of geometry required and the well-defined structure of the triangles and glyphs. For balland-stick views we can store single instances of the needed glyphs (a sphere and a cylinder) in memory and use transforms to create the full molecule; we assign colors on the glyphs with small, onedimensional texture maps corresponding to the possible atom pairs in each bond. For protein ribbons with under 1000 residues we can use compact one-dimensional textures to color the geometry based on residue-dependent values. For both visualization modes, we create vertex buffers corresponding to the ribbons and glyphs with fixed texture coordinates corresponding to the atom or residue of the ball-and-stick or ribbon geometry, respectively. We can thus create the geometry and dynamically change color maps without rewriting to the vertex buffers; we write the geometry and textures into memory once, and apply different color maps by changing the applied texture, not the texture coordinates. Even when the geometry does change, for example during a ribbon view of a trajectory run (sequence of steps in a simulation), the number of vertices remains constant. Thus the vertex buffer does not need to be recreated; the new vertex positions simply need to be loaded into it. Di-rectX not only allows us to create these texture maps and vertex buffers, but we can assign their location in memory based on size and access needs: Since many of the textures are small and do not have to be read by the CPU after creation, we can place them directly into local video memory on the graphics card.</p><p>One technique common to games is vertex blending or "skinning," which we have used to create a visualization of the molecular surface, shown in <ref type="figure" target="#fig_6">Figure 4</ref>. Computation of a molecular surface <ref type="bibr" target="#b7">[8]</ref> is relatively expensive, and one efficient visual approximation is to draw large spheres around each atom based on its van der Waals radius. This technique is easy to implement but loses much of the surface shape due to the sphere approximation and lack of coupling between separated atoms (see <ref type="figure" target="#fig_7">Figure 5</ref>). We have created the first, to our knowledge, approximation of a molecular surface based on hardware vertex blending, a technique commonly used in games to create realistic motion of a smooth surface covering multiple articulated segments. In our implementation, we first find all atom pairs that are near each other (within six Angstroms) and we use 2or 3-matrix vertex blending of a single sphere to create a stretched surface corresponding to the molecular surface of that pair. (Threematrix blending allows the surface to have a closer approximation to the characteristic curved shape between the atoms.) <ref type="figure" target="#fig_6">Figure 4</ref> shows all such pair surfaces rendered together, and the resulting molecular surface is evident. Although we never calculate the actual surface geometry, the image is a good visual compromise between a spacefilling spheres and a full surface calculation.  The interactive linkage so crucial to our merged 3D and 2D visualization environment requires fast queries of the geometry under the mouse pointer, and since the protein is already colored using a texture map, we are able to do the query by rendering to a background buffer using a sequentially colored texture that encodes the residue number along the protein. With lighting and shading disabled, the pixel color at the pointer location on the unseen background buffer uniquely identifies the residue without any geometric hit-detection. This relies on direct readback of the unadulterated RGB value from memory, which is provided by DirectX since it allows direct reads from buffers in video memory. Although the bandwidth of such reads may not be optimized for reading large areas, the readback expense is minimal for the one pixel, and we experience no noticeable latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusions and Future Directions</head><p>Simple animations of moving ball-and-stick or ribbon representations are limited in being able to provide insight and intuition about proteins. We have developed an environment where multiple, linked views of the protein allow a user to interactively probe and query the protein to see patterns and relationships. Key to the value of the system we have developed is the ability to generate immediate results to queries that result simply from letting the mouse dwell for a fraction of a second, even in the three-dimensional views. The results of these picks can then be further investigated by zooming or rotating to obtain a more convenient viewpoint. This leads to a very natural environment for investigating relationships.</p><p>This case study has two classes of users: The designers of the application, who learned DirectX and wrote code to take advantage of its features, and the end-users of the application who experimented with the viewer to gain insight into proteins involved in their molecular dynamics simulations. We found the DirectX API to be somewhat cumbersome to learn, partly because the viewer is a multi-windowed MFC application and most of the DirectX examples are game-oriented, non-MFC, and written at a much lower level. Once the framework of the application was in place, however, new features were straightforward to implement. Part of the programming difficulty was due to our use of DirectX version 7, rather than version 8, which was released during the application development. Although version 8 addresses some of the programming complexity issues, particularly for people new to the API, the fact that the API is changing significantly with each release may be an issue more palatable to game programmers than those writing scientific visualization systems. Writing to version 8 also would have forced users to download the latest version of DirectX, which would have reduced the portability and ease-of-use of the application.</p><p>The end-users of the application, who provided feedback and feature requests during its development, were pleased with the linked multiple representations of the proteins and high performance achieved on a wide range of platforms, particularly their laptops (typical configuration: Pentium III, 733 MHz, 128MB, S3 Savage/IX graphics adapter). Having the high degree of interactivity conveneniently on a laptop was particularly important when loading and animating long trajectories containing multiple time steps. The end-users also appreciated the consistent color scheme and use of mouse hovers rather than mouse clicks. The negative aspects of the application were related to features not yet implemented rather than graphical limitations involving the use of DirectX: Inability to export data such as contact maps, inability to load multiple pdb files, etc. These features, and other graphical extensions using more DirectX capabilities, are expected as the application evolves.</p><p>In conclusion, while commodity graphics hardware cards are designed for game applications, rather than for scientific visualization, this doesn't mean that the features of the technology can not be useful for scientific applications. While we have taken advantage of a number of the features of the DirectX API in our application, such as vertex buffers and vertex blending, there are a number of features for which we can see potential value. For example, bump maps or procedural textures on generated geometry can indicate other information; as a simple example, the many local properties calculated during a molecular dynamics simulation could be indicated by a bump map whose frequency profile depended on the value of the property. As another example, a large system of atoms could be represented by point sprites, which are implemented in DirectX to simulate particle systems but also might work well for molecular dynamics simulations. The value of interaction in developing intuition and understanding has long been appreciated by the visualization community; the advent of a market for fast graphics has brought the capability of such interactive applications into reach on standard desktop and laptop machines.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>¡</head><label></label><figDesc>gresh, suits, shamy@us.ibm.com, IBM T.J. Watson Research Center, P.O. Box 704 Yorktown Heights, NY 10598</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>¢</head><label></label><figDesc>development environment and the Microsoft Foundation Class (MFC) library.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>of particular secondary structure motifs. This view is shown on the bottom of Figure 1. We use a special presentation of the ¥ and ¦ angles to avoid breaking the¨-sheet region across the angle ¦ =180© to -180© [1]. Thus the plots on the bottom of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1 :</head><label>1</label><figDesc>The protein visualization application we have developed. The three-dimensional view displays the protein 1eme from the Protein Data Bank<ref type="bibr" target="#b1">[2]</ref> as a ribbon model, colored by secondary structure type. Top right view shows a distance matrix (described more fully in the caption ofFigure 3). The bottom right view shows a two-dimensional histogram of¥ and ¦ , while the plot along the bottom displays ¥ (below) and ¦</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Ribbon diagram ofFigure 1, coloring residues individually using the Shapely color scheme. This (as well as the structure-based coloring) is implemented using a one-dimensional texture map.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>An enlarged view of the distance matrix plot shown in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Approximate solvent-accessible surface for protein shown inFigure 1, using DirectX three-matrix vertex blending.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Solvent accessible surface of a small (5 atom) molecule using: (top left) SURF algorithm[8]; (top right) spheres of the van der Waals radius; (bottom left) two matrix vertex blending; (bottom right) three matrix vertex blending.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank James Klosowski for his suggestion of the threedimensional picking technique and Bruce D'Amora for discussion of DirectX issues. We thank the entire IBM Blue Gene team for their input and advice. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Representing protein and peptide structures with parallel-coordinates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">M</forename><surname>Becker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Chemistry</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="1893" to="1902" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The protein data bank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Westbrook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gilliland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bhat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Weissig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shindyalov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bourne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Research</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="235" to="242" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Algorithm for ribbon models of proteins</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Carson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Bugg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mol. Graphics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="121" to="122" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kinemage</surname></persName>
		</author>
		<ptr target="http://kinemage.biochem.duke.edu" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Conformation of polypeptides and proteins</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">N</forename><surname>Ramachandran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Sasisekharan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Protein Chem</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="283" to="438" />
			<date type="published" when="1968" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The anatomy and taxonomy of protein structure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Richardson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Protein Chem</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page">167</biblScope>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The impact of computer games on scientific and information visualization: If you can&apos;t beat them, join them. Panel at IEEE Visualization</title>
		<imprint>
			<date type="published" when="2000" />
			<pubPlace>Theresa-Marie Rhyne, Chair</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Defining, computing, and visualizing molecular interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Frederick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Brooks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">V</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="36" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vmd</surname></persName>
		</author>
		<ptr target="www.ks.uiuc.edu/Research/vmd" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chime</surname></persName>
		</author>
		<ptr target="www.mdlchime.com/chime" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Www</forename><surname>Povray</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Protein explorer</title>
		<ptr target="www.proteinexplorer.org" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
