<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Texture Hardware Assisted Rendering of Time-Varying Volume Data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">B</forename><surname>Lum</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwan-Liu</forename><surname>Ma</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Clyne</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Davis National Center for Atmospheric Research</orgName>
								<orgName type="institution">University of California</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Texture Hardware Assisted Rendering of Time-Varying Volume Data</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Compression</term>
					<term>high performance computing</term>
					<term>outof-core processing</term>
					<term>PC</term>
					<term>scientific visualization</term>
					<term>texture hardware</term>
					<term>time-varying data</term>
					<term>transform encoding</term>
					<term>volume rendering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In this paper we present a hardware-assisted rendering technique coupled with a compression scheme for the interactive visual exploration of time-varying scalar volume data. A palette-based decoding technique and an adaptive bit allocation scheme are developed to fully utilize the texturing capability of a commodity 3-D graphics card. Using a single PC equipped with a modest amount of memory, a texture capable graphics card, and an inexpensive disk array, we are able to render hundreds of time steps of regularly gridded volume data (up to 45 millions voxels each time step) at interactive rates, permitting the visual exploration of large scientific data sets in both the temporal and spatial domain.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>High-resolution, four-dimensional data sets are typical of problems in many areas of science and engineering. Specific examples include data from the study of neuron excitation, material crack propagation, thunderstorm evolution, unsteady flow surrounding an aircraft, seismic reflections from geological strata, and even galaxy merger. These data sets, rich with detailed information of complex physical or chemical processes, may be generated either by numerical simulation or collected through instrumentation. Regardless of how they are derived, the ability to quickly detect and explore the complex, dynamic phenomena contained within is essential to their analysis.</p><p>A typical time-varying data set from a computational fluid dynamics simulation can contain hundreds or even thousands of time steps and each time step may have millions of grid points, each potentially containing multiple variables. As a result, a single data set can easily occupy hundreds of gigabytes of storage, creating a formidable challenge for subse-£ CIPIC &amp; Department of Computer Science, University of California, One Shields Avenue, Davis 95616, {lume,ma}@cs.ucdavis.edu Ý National Center for Atmospheric Research, 1850 <ref type="table">Table Mesa</ref> Dr., Boulder, CO 80303, clyne@ncar.ucar.edu quent analysis. Traditional statistical methods of analysis, though relatively easy to compute, tend to filter out information, computed at great expense, by reducing data to a relative few numbers. Visual data exploration techniques, such as direct volume rendering, have arisen as powerful aids to researchers in the analysis of these vast data sets. Scientific visualization can greatly facilitate and expedite the exploration of these data sets by exploiting the brain's ability to process enormous amounts of visual information.</p><p>However, for visualization techniques to be most effective for enhancing the qualitative understanding of complex behavior, or for detection of features of importance, they must be interactive in every aspect. The ability to change classification functions and color mappings quickly and easily, animate forward and backward in time, change viewpoints, and zoom in and out on features of interest, all at interactive rates, is essential for maximizing scientific productivity <ref type="bibr" target="#b2">[3]</ref>.</p><p>In this paper, we discuss how time-varying volume data sets can be efficiently rendered by utilizing a PC, low cost graphics hardware, and an inexpensive disk array. Transform encoding of the volume data, followed by compression, not only reduces storage but also bandwidth requirements. We also exploit the 2-D texture features of a commodity graphics card to speed up the rendering as much as possible. The result is a rendering capability in which all essential aspects of the visualization process are completely interactive.</p><p>We have evaluated an implementation of our design using a number of time-varying data sets including the quasigeostrophic (QG) turbulence data sets provided by scientists at the National Center for Atmospheric Research (NCAR) and the University of Colorado. The highly interactive rendering rates achieved by our PC-based system were previously available to NCAR scientists only through the use of costly parallel supercomputers or high-end multiprocessor graphics workstations, thereby greatly limiting their access. In the following sections, a survey of time-varying data visualization research is followed by a detailed description of our design. The performance and explorability of the prototype system we have built are demonstrated with timing results, images, and a video using three data sets with sufficiently different characteristics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Previous Work</head><p>Time-varying data visualization has been an active research area. Various approaches have been proposed to reduce the storage, corresponding I/O, and rendering demands for visualizing time-varying data in a more efficient way.</p><p>Using proper encoding and exploiting temporal coherence or spatial coherence or both, the storage requirements and rendering cost of the data may be significantly reduced. Shen and Johnson <ref type="bibr" target="#b18">[19]</ref> take advantage of temporal coherence, using difference encoding to significantly diminish storage and rendering requirements. Westermann <ref type="bibr" target="#b21">[21]</ref> performs wavelet encoding of each time step separately to generate a compressed multiscale tree structure. Further compression can be obtained by examining the resulting tree structures and wavelet coefficients. Ma and Shen <ref type="bibr" target="#b10">[11]</ref> discuss how nonuniform quantization along with octree and difference encoding can be employed to speed up rendering of timevarying volume data. They show that the octrees for consecutive time steps can be merged to share subtrees. Consequently, during rendering, partial images built from subtrees that have not changed over time may be reused in later time steps.</p><p>Wilhelms and Van Gelder <ref type="bibr" target="#b23">[23]</ref> design hierarchical data structures for controlled compression and volume rendering. They extend octrees and a branch-on-need (BON) subdivision strategy <ref type="bibr" target="#b22">[22]</ref> to handle multi-dimensional data. Sutton and Hansen <ref type="bibr" target="#b20">[20]</ref> propose a temporal branch-on-need tree (T-BON) as an extension to the 3-D BON tree for time-varying isosurface extraction. Shen, Chiang, and Ma <ref type="bibr" target="#b17">[18]</ref> introduce a hierarchical data structure, called a Time-Space Partitioning (TSP) tree, for better utilization of both spatial and temporal coherence. In essence, the skeleton of a TSP tree is a standard complete octree, which recursively subdivides the volume spatially until all subvolumes reach a predefined minimum size. To store the temporal information, each TSP tree node itself is a binary tree. Every node in the binary time tree represents a different time span for the same subvolume in the spatial domain. Most importantly, TSP trees allow the renderer to use data from subvolumes of different spatial and temporal resolutions, which is not possible for 4-d octrees. The TSP tree data structure has been also used to facilitate large scale volume rendering using 3-D texture hardware <ref type="bibr" target="#b5">[6]</ref>.</p><p>Further speedup of rendering may be made by utilizing parallel computers or graphics hardware. However, even though a parallel computer can render images at multiple frames per second, without high-speed network and parallel I/O support, two bottlenecks can still make it impossible to achieve interactive viewing. One bottleneck is the need to stream large volume files throughout the course of the visualization process. The other is the delay due to transferring the resulting images over a potentially non-dedicated network. Ma and Camp <ref type="bibr" target="#b9">[10]</ref> developed a post-processing parallel visualization strategy based on pipelined rendering. They demonstrate remote visualization of time-varying volume data on a PC cluster over a wide-area network. Pipelin-ing and careful grouping of processors are used to hide I/O time and to maximize processor utilization. Visually lossless compression is used to significantly cut down the cost of transferring output images from the PC cluster to a display device through a wide-area network. Clyne and Dennis <ref type="bibr" target="#b3">[4]</ref> employ similar techniques, using double buffering to help mask both the costs of volume data I/O over a highbandwidth channel as well as image transmission over a TCP/IP network.</p><p>The methods introduced in this paper can work equally well as, and by many metrics better than, most of the aforementioned techniques. Furthermore our methods have the added advantage running on low-cost, commodity hardware making them far more accessible to a broad range of researchers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Hardware-Assisted Rendering</head><p>Commodity PC graphics cards are capable of performing rendering that only a few years ago required a high-end graphics workstation. In particular, the 2-D texture hardware that helps generate impressive graphics for video games can also be applied to make effective visualizations. For example, commodity PC graphics cards have been used for volume rendering of static volumetric data <ref type="bibr" target="#b14">[15]</ref>. Volume rendering requires the loading of the volumetric data into the texture memory of the video card prior to rendering. The size of the volume that can be rendered is often limited by the amount of video memory the card contains, since the access and transfer of data from main memory across the graphics bus is relatively slow compared to the direct access of graphics memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Compression</head><p>The interactive rendering of time-varying volumetric data sets offers a number of challenges because of the sheer size of the data being visualized. These data sets can be reduced in size and therefore made more manageable through the use of compression. The advantages of compressing volumetric data are two-fold. First, it reduces the storage requirements needed for the data. This could allow a data set to fit in main memory that might not fit otherwise, eliminating the need for transferring data from disk. The reduction in storage can also be used to fit relatively small compressed data sets entirely into texture memory, thus eliminating the need for transferring data across the graphics bus. The other benefit of compression is a reduction in I/O. If a compressed volume fits entirely into main memory, the cost of transferring compressed data to the graphics card is much lower than the cost of transferring uncompressed data. If a data set does not fit into main memory, the transferring of compressed data from disk can be substantially faster than with uncompressed data, allowing for interactive visualization from disk.</p><p>Video and main memory can be thought of as a two-level cache for volume rendering. The compression of volumetric data not only increases the amount of data that can fit in each level, but also decreases the I/O costs of transfers between these levels. Through the use of compression, and careful management of the time costs associated with the transfers between levels, it is possible to load texture maps representing volume data into video memory at rates suitable for interactivity on a commodity PC.</p><p>If a compressed volume is to be rendered directly from video memory, it must also be uncompressed using the graphics hardware. This is a significant constraint since the operations supported in graphics hardware are limited compared to those found on a general purpose CPU. Another constraint is imposed by the desire to encode the scalar voxel values in terms of their scalar value rather than as a red, green, blue, alpha (opacity) set. Using scalar values and color indexed textures allows a scientist to manipulate the color palette to interactively change the opacity and color maps, leading to more intuitive visualization of the data. Storing voxels in terms of RGBA would require recompressing the entire data set when the transfer function is changed, which can be impractical for very large data sets. In addition, storing a single scalar value, rather than four color scalars reduces the amount of data by a factor of four.</p><p>Unfortunately, using indexed values puts a number of limitations on how graphics hardware can be used to decode data. Most screen and texture combining operations supported in hardware, such as Register Combiners, work in terms of the manipulation of RGBA values and not the manipulation of scalar map index values. In particular, one might consider a compression method that deals with difference images or volumes. These differences, however, would need to be combined in terms of RGBA and not indexed scalars. This would make the difference images color map and opacity map dependent, since the difference between two volumes, in terms of RGBA, depends extensively on the transfer function being used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Palette based decoding</head><p>With these limitations in mind, we present a method for the temporal encoding of indexed volumetric data that can quickly be decoded in hardware. The method makes extensive use of hardware support for the changing of color palettes without the reloading of textures. The cycling of color palettes can be used to create simple animations from static images. In our work we use color palette manipulation to allow a single scalar index to represent grid points at several times steps.</p><p>With paletted textures, a single scalar index is used to represent an RGB or RGBA color. The palette consists of a limited set of colors that sample the RGBA color space. Each of these colors is encoded in a single value, often a single byte. In our approach we encode a sequence of temporally changing scalar values into a single index. In this way, the value stored in each texel represents an approximation of a sequence of scalar values. Each index is therefore a sample in the space of possible time varying scalar values. The scalar values that an indexed texel represents is decoded to its temporally changing values through the frame to frame manipulation of the palette. For each frame, the color for each palette entry is set to the color found in the transfer function for the scalar encoded by that index value during that frame, as shown in the following pseudocode which renders N time steps using a single indexed texture. The textures are rasterized to the screen using linear interpolation. Linear interpolation occurs in terms of RGBA values after they have been looked up from the palette. If interpolation occurred in terms of palette indices, the resulting images would show severe artifacts, since the mapping between palette indices and decoded scalar values is far from linear.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Temporal encoding</head><p>The encoding process consists of mapping sequences of scalars into single scalar indices. This operation can be approached as a vector quantization problem. We perform this process using transform encoding, specifically using the Discrete Cosine Transform (DCT) <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b16">17]</ref>. Transform encoding is a compression method that transforms data into a set of coefficients that are then quantized to create a more compact representation. The transform by itself is reversible, and does not compress the data. Rather, a transform is selected that puts more energy into fewer coefficients, thus allowing the less important, lower energy coefficients to be quantized more coarsely, thus requiring less storage.</p><p>The DCT is defined by: </p><formula xml:id="formula_0">C´uµ α´uµ N 1 ∑ x 0 f´xµcos ´2x • 1µuπ 2N</formula><formula xml:id="formula_1">Õ 1 N for u 0 Õ 2 N for u 1 2 N 1</formula><p>where C´uµ are the transformed coefficients, N is the number of input samples, and f´xµ are the input samples. We use the DCT since it is known to have good information packing qualities and tends to have less error at the boundaries of a sequence <ref type="bibr" target="#b6">[7]</ref>. Boundary performance is important in order to avoid discontinuities during the transition between blocks. Since our application compresses temporally, discontinuities would appear in the form of flashes between compressed sequences.</p><p>The encoding process is shown in <ref type="figure" target="#fig_0">Figure 1</ref>. First a window size is selected, which will be the length of the time sequence that will be encoded into a single value. The longer the window size, the greater the compression that can be achieved, at the expense of temporal accuracy. For each window of time-evolving scalars the DCT is applied. The result is a set of coefficients equal in number to the size of the window used. The first coefficient stores the average value over the window, and tends to be largest in value. The remaining coefficients store increasingly higher frequency components contained in the windowed sequence. These coefficients tend to represent decreasing amounts of signal as the frequency gets higher.</p><p>These coefficients are then quantized and combined into a single scalar value. Bits are adaptively allocated for each coefficient based on the variance of each coefficient <ref type="bibr" target="#b16">[17]</ref>. Those coefficients with the highest variance are allocated more bits than those coefficients with low variance. Using this technique, bits are allocated based on the temporal characteristics of the windowed sequence of the data set. For example, a data set with minimal amounts of movement would use fewer bits to store the temporal changes in the data, allowing more bits to be used to more precisely represent the stationary values in the sequence. On the other hand, a sequence with high speed motion (low temporal coherence) would use more bits to encode this motion at the expense of precision for the static values.</p><p>Once bit allocation for the transformed coefficients is determined, the coefficients are quantized to their respective precision. Uniform quantization is not well suited for quantizing these coefficients since they often have fairly nonuniform distributions. Instead, quantization is performed using Lloyd-Max quantization <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b11">12]</ref>, which adaptively selects quantization levels that minimize mean square error. The quantized coefficients are then combined into a single scalar which is stored as an index in a paletted texture. Each encoded value represents a sequence of time-varying scalars that can be determined using the inverse DCT. Rather than using the inverse DCT, however, each palette entry is mapped to the average scalar value that the index represents for each time step. The encoding process is repeated for every window in time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">2-D texture &amp; sub-volume optimizations</head><p>As described in the previous section, the quantization step is adapted based on the characteristics of the transformed coefficients. Since the temporal properties of a data set can vary widely across a volume, it is advantageous to adaptively quantize small sections of the volume at a time. Our volume rendering implementation uses axis aligned 2-D textures. To minimize the amount of error introduced in the quantization step, we encode each texture slice independently. This allows bit allocation to vary based on the temporal characteristics of each slice, as well as allowing for the quantization levels to vary based on the characteristics of the coefficients for each slice. We have found per-slice encoding shows noticeably fewer compression artifacts for a given bit rate. One negative effect of this process is that an uncompressed scalar value can be encoded into different compressed values depending on the slice in the volume. In practice, however, we have found this effect to be minimal, in part because quantization occurs in slices that are nearly perpendicular to the viewing direction, thus variations from slice to slice of a scalar value are softened by the volume rendering integral.</p><p>Usually, when bit allocation occurs, most bits are used for storing the average value over a windowed sequence. As a result, when the transition occurs between two compressed sequences, the shift in average value can cause a perceived jump in the animation. We therefore interleave the starting times of the windows for each slice. <ref type="figure" target="#fig_1">Figure 2</ref> shows such an interleaving scheme. This decorrelates temporal transitions so the jump occurs during every frame but for interleaved slices in the volume, rather than the whole volume. This is analogous to interlaced video, except rather than being interlaced vertically, the textures are interleaved along the viewing direction. As with per slice quantization, the volume rendering integral helps to soften the interleaving effect.</p><p>For a transform window of length N, without interleaving an entire new compressed volume must be loaded every N frames. Since the loading of data across the graphics bus  N of the volume can be flushed from texture memory and replaced with a new texture. Thus by amortizing data movement costs, interleaving allows for a more consistent frame rate without the expense of needing the texture memory to store a second compressed volume.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Test Results</head><p>Using our compression method we are able to render large, time-varying volumetric data sets at interactive rates. Table 1 lists the three data sets that have been used for our study. Color Plate 1 shows one frame from each data set. An animation of the turbulent vortex jets data displays a fairly random pattern over time as the vortices spread through the whole domain. In the QG turbulent flow data, we witness the formation of coherent turbulent structures akin to Jupiter's red spot. The shock-bubble flow data exhibits a slowly developing structure starting from one end of the domain and eventually reaching the other end of the domain. <ref type="table" target="#tab_2">Tables 2 and 3</ref> show frame rates for different compression cases using the NCAR's quasi-geostrophic data set and the LBL's shock-bubble data set, respectively. We obtained these results with an AMD 1.2 GHz Athlon with 768 megabytes of   <ref type="figure" target="#fig_2">Figure 3</ref> displays the storage configuration of our current testbed. Compressing each time step of a 256 3 data set takes between 5 and 15 seconds depending on the level of compression. Our implementation uses eight-bit paletted textures, although our technique could be applied to hardware that supports higher precision textures for encoding strategies that allocate more bits to each transformed coefficient. The results were obtained when rendering the volume to a 512¢512 window with the volume occupying approximately <ref type="bibr" target="#b0">1</ref> 3 of the window area. If a compressed data set fits entirely in main memory, then the bottleneck in the rendering process is the transfer of textures from main memory to the graphics card. Compression helps with both of these limitations, increasing not only the number of time steps that fit in main memory, but also decreasing the amount of time necessary for transferring data across the graphics bus. If only one set of axis aligned textures is stored in main memory, then the number of time steps that can be stored in memory increases by a factor of three at the expense of the user not being able to view the data set from an arbitrary angle without swapping from disk.</p><p>One example of a large volumetric data set that we can render at interactive rates is the QG turbulent flow data set.  The QG calculations simulate large-scale motions in the Earth's atmosphere and oceans and are representative in size and complexity of many Eart Sciences turbulent fluid flow simulations. We can render 140 time steps of a 256 3 volumetric data set compressed by a factor of four at approximately 25.8 frames per second using 256 axis aligned textured polygons. If 128 axis aligned textured polygons are used, which requires transferring and drawing only half the data, the frame rate doubles and we can render 280 time steps. Without compression, the same 140 time steps no longer fit in into main memory and would need to be swapped into main memory in an out-of-core manner. A subset of this uncompressed data that does fit in into main memory can be rendered at about 11.5 frames per second, compared to the 25.8 frames per second with compression. Although the amount of data transferred with compression is one fourth of that without, the frame rate does not scale linearly. This is caused by the time required to rasterize the textured polygons to the screen. The performance would scale more linearly if a graphics card with a higher fill-rate were used, or if the rendered volume were displayed at lower screen resolution.</p><p>Often a data set is too large to fit the desired number of time steps into main memory even with compression. In this case it is necessary to load and render the volume from disk. Compression can substantially decrease the amount of data that must be loaded for each frame, resulting in a noticeably higher frame rate, as shown in <ref type="table" target="#tab_2">Table 2</ref>. For example, all 1492 time steps of the 256 3 QG data set can be rendered at 13.4 fps when compressed by a factor of 8 versus only 2.0 frames per second when rendered uncompressed from disc. Once the user finds a shorter temporal region of interest, that data can then be loaded into main memory and rendered at a faster frame rate, or higher image fidelity. Color Plate 3 shows visualizations of the QG data set for the same time step using different transfer functions defined through interactive exploration. By changing the window size used in the encoding step, the compression ratio and quality can be varied. <ref type="table" target="#tab_5">Tables 5, 6</ref>, and 7 show the minimum, maximum, and average mean square error for each data set where scalar values have been normalized to be between 0 and 1. Color Plate 2 shows volumes that have been rendered using varying degrees of compression. As the amount of compression increases, some of the more subtle features as well as the faster moving features can become blurred. Thus, there is a distinct trade off between the compression ratio and rendering performance versus the quality of the compressed volume. This gives users a degree of flexibility in choosing compression ratios that best meet their needs. For example, if a scientist is interested in viewing a short time sequence at high quality, a lower compression ratio can be used. On the other hand, to view a very long sequence of data at high speeds, a higher compression rate can be selected. The scientist can combine compression ratios to preview a data set at a coarser temporal resolution and then view a specific time sequence of interest with less compression.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Discussion</head><p>Although our implementation does not use volumetric textures, our temporal encoding method does apply to 3-D volumetric textures. In particular we expect our method would work well with hardware that supports volumetric indexed textures with more than 256 entries. The use of 2-D textures has the limitation that for a volume to be viewable from an arbitrary angle, three copies of the textures must be stored for each of the principle viewing directions. However, this limitation is tempered by the fact compression can reduce the amount of texture storage required by beyond a factor of 3. When a volume is viewed out-of-core, storing extra compressed copies of the data set becomes much less of an issue since these copies are stored on disk. In addition, the use of 2-D textures provides a natural way to decompose a volume for adaptive quantization.</p><p>Since our system can render volumes from disk at interactive rates we feel it is very scalable with respect to the size of a data set temporally. With regards to size of the data set in the spatial domain, the amount of texture memory can be a limiting factor. Since our work compresses temporally, it does not reduce the amount of texture memory utilized to below what would be required to render a single static volume. With next generation graphics cards having increasingly larger amounts of texture memory, this limitation should become diminished. For out-of-core rendering, the cost of swapping textures from the graphics card to main memory is much lower than the cost of reading from disk, thus texture memory capacity restraints become less of a concern.</p><p>The use of compression by our methods presents two potential shortcomings that are worth addressing. First, since our compression scheme is lossy there is the potential for modest, but noticeable, image quality degradation that increases with the degree of compression. However, a moderate loss of image fidelity due to compression or other optimization strategies is an acceptable tradeoff for enabling interactive exploration of many temporal data sets, provided that the gross features of evolving structures is preserved as it is in our test cases <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b1">2]</ref>. It is worth noting that many NCAR researchers commonly perform crude data reduction using simple zero-order subsampling in order to accommodate interactive exploration with the tools presently available to them. In essence, they have already demonstrated a willingness to sacrifice image quality to gain interactive exploration capabilities that are essential to maximizing scientific productivity <ref type="bibr" target="#b2">[3]</ref>. Once a feature of importance is detected in the reduced data set, the full resolution data may be further analyzed if necessary. Second, compression requires additional storage (for maintaining both the raw and compressed versions of the data), and it takes time to perform the encoding. Similarly to loss of image fidelity, researchers are already bearing these costs by their use of subsampled data to achieve interactive rendering.</p><p>TSP Tree based methods reduce the amount of texture memory utilized by exploiting temporal and spatial coherence to reuse textures <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b5">6]</ref>. They represent several similar textures as a single static texture. Our DCT based encoding method stores several time slices in terms of lower precision averages and differences stored in a single texel. Through palette manipulation, these texels dynamically represent several time slices. This compressed encoding comes at the expense of the numerical precision used to store these averages and differences. The method exploits temporal coherence by using more bits to represent the average value over a set of slices, but also reserves bits for storing the change over a set of slices. Our method could be combined with TSP based techniques to store textures at varying degrees of both spatial and temporal resolution.</p><p>Our method differs from compression methods supported in hardware like those supported with DXTC or S3TC <ref type="bibr" target="#b4">[5]</ref> in that those methods compress 32-bit RGBA data, not 8-bit index data. Since these methods do not apply to paletted textures, it would be necessary to recompress the volume when changes to the color or opacity map are made. This stands in contrast to the use of paletted textures that allow for the interactive changing of the opacity and color map with no effect on frame rate. In addition, these methods compress RGBA texels by up to a factor of eight using four-bits per texel, while our method starts with eight-bit paletted textures and compresses them into four, two or one bits per texel, per frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>We have presented a hardware texture assisted technique for rendering time-varying volume data, and demonstrated it with experimental results. This technique is very attractive to the scientists with whom we are working because of its low cost and interactive rendering rates. It is now feasible to put such a PC-based system on every scientist's desktop, making interactive data exploration accessible to a far broader group of scientists and engineers. Researchers can browse through data in a highly interactive manner, efficiently filtering unimportant from important features, to obtain valuable qualitative information about their data content. The compression scheme used is controllable and results in visualizations suitable for interactive data exploration.</p><p>We plan to improve our hardware-assisted technique in many ways. One important goal is to make it possible for the scientists to conduct interactive exploration of data obtained from even larger data sets than those discussed, such as the 512 <ref type="bibr" target="#b2">3</ref> Earth Sciences turbulence calculations many of our researchers are beginning to investigate. Furthermore, 1024 <ref type="bibr" target="#b2">3</ref> problem domain calculations are on the horizon. To address these extremely large data sets we plan to investigate an extension of our hardware-assisted rendering technique with a PC cluster, develop more intuitive data interaction mechanisms in both the spatial and temporal domains, and design effective hardware-assisted shading techniques.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>DCT-based encoding. In this example, the window size is 4 and only the first 3 coefficients are stored into an 8-bit value. and α´uµ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>When 2-D texture interleaving is utilized, for every time step, every Nth 2-D texture is replaced starting with the t modulo Nth texture slice, where t is the time step and N is the compression ratio. In this example, N is four. The numbers on each slice indicate which time steps the texture stores. The shaded slice is the slice that is updated at time t.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Storage configuration for a PC-based system for rendering large-scale time-varying data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Three Test Data sets.</figDesc><table><row><cell>data set</cell><cell cols="2">time steps spatial resolution</cell></row><row><cell cols="2">Turbulent vortex flow 100</cell><cell>128 3</cell></row><row><cell>Quasi-geostrophic</cell><cell>1492</cell><cell>256 3</cell></row><row><cell>turbulent flow</cell><cell></cell><cell></cell></row><row><cell>Shock-bubble flow</cell><cell>265</cell><cell>640¢256¢256</cell></row><row><cell cols="3">is relatively slow, this can cause a substantial drop in frame</cell></row><row><cell cols="3">rate every N frames. This problem can be solved by loading</cell></row><row><cell cols="3">1 N of the next compressed volume every frame, but requires</cell></row><row><cell cols="3">storing a copy of the next volume in texture memory. This,</cell></row><row><cell cols="3">however, is not necessary if the textures are interleaved, since</cell></row><row><cell>for every frame 1</cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Frame rates for rendering the QG data with different compression levels.</figDesc><table><row><cell cols="3">fps (time steps rendered) compression ratio in-core out-of-core</cell></row><row><cell>8¢</cell><cell cols="2">31.6 (280) 13.4 (1492)</cell></row><row><cell>4¢</cell><cell cols="2">25.8 (140) 6.8 (1492)</cell></row><row><cell>2¢</cell><cell>17.3 (70)</cell><cell>3.5 (1492)</cell></row><row><cell>1¢</cell><cell>11.5 (35)</cell><cell>2.0 (1492)</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table><row><cell></cell><cell cols="2">Frame rates for rendering the Shock-Bubble data</cell></row><row><cell cols="2">with different compression levels.</cell><cell></cell></row><row><cell cols="3">fps (time steps rendered) compression ratio in-core out-of-core</cell></row><row><cell>8¢</cell><cell cols="2">11.7 (112) 5.8 (265)</cell></row><row><cell>4¢</cell><cell>9.3 (56)</cell><cell>3.1 (265)</cell></row><row><cell>2¢</cell><cell>6.3 (28)</cell><cell>1.6 (265)</cell></row><row><cell>1¢</cell><cell>4.4 (14)</cell><cell>0.9 (265)</cell></row><row><cell cols="3">main memory and a NVIDIA GeForce3 based graphics card</cell></row><row><cell cols="3">with 64 megabytes of texture memory.</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 :</head><label>4</label><figDesc>Frame rates for rendering the 100 time steps of the</figDesc><table><row><cell cols="2">Turbulent vortex flow data in-core with different compres-</cell></row><row><cell>sion levels.</cell><cell></cell></row><row><cell cols="2">compression ratio fps</cell></row><row><cell>8¢</cell><cell>76.1</cell></row><row><cell>4¢</cell><cell>70.7</cell></row><row><cell>2¢</cell><cell>51.6</cell></row><row><cell>1¢</cell><cell>28.7</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table><row><cell></cell><cell cols="3">NCAR quasi-geostrophic data set error</cell></row><row><cell cols="2">compression ratio MAX</cell><cell>MIN</cell><cell>AVG</cell></row><row><cell>2x</cell><cell cols="3">0.000109 0.000005 0.000015</cell></row><row><cell>4x</cell><cell cols="3">0.000369 0.000009 0.000037</cell></row><row><cell>8x</cell><cell cols="3">0.000875 0.000012 0.000075</cell></row><row><cell></cell><cell cols="2">Table 6: Vortex data set error</cell></row><row><cell cols="2">compression ratio MAX</cell><cell>MIN</cell><cell>AVG</cell></row><row><cell>2x</cell><cell cols="3">0.000199 0.000061 0.000136</cell></row><row><cell>4x</cell><cell cols="3">0.000423 0.000169 0.000304</cell></row><row><cell>8x</cell><cell cols="3">0.001147 0.000510 0.000856</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 7 :</head><label>7</label><figDesc></figDesc><table><row><cell></cell><cell cols="3">LBL shock bubble data set error</cell></row><row><cell cols="2">compression ratio MAX</cell><cell>MIN</cell><cell>AVG</cell></row><row><cell>2x</cell><cell cols="3">0.000017 0.000009 0.000013</cell></row><row><cell>4x</cell><cell cols="3">0.000040 0.000023 0.000032</cell></row><row><cell>8x</cell><cell cols="3">0.000082 0.000046 0.000065</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work has been sponsored by the National Science Foundation under contracts ACI 9983641 (PECASE Award) and ACI 9982251 (LSSDSV). The quasi-geostrophic turbulent flow data set were generated by Jeffrey Weiss and Clive Bail-lie at University of Colorado at Boulder, James McWilliams at University of California at Los Angeles, along with Irad Yavneh at Technion. The shock-bubble flow data set was provided by scientists at the Lawrence Berkeley National Laboratory. We obtained the turbulent vortex flow data set through the VIZLAB of CAIP at Rutgers University. The authors are grateful to them for providing data sets for our study.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">OpenGL Extension Registry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ext_Shared_Texture_Palette</surname></persName>
		</author>
		<ptr target="http://oss.sgi.com/projects/ogl-sample/registry/EXT/shared_texture_palette.txt" />
		<imprint>
			<date type="published" when="1997-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Senior Research Associate at the University of Colorado, Personal Communication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Brummell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clyne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Scheitlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weiss</surname></persName>
		</author>
		<title level="m">ume Visualizing High-Resolution Turbulence Computations. Theoretical and Computational Fluid Dynamics</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="195" to="211" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interactive direct volume rendering of time-varying data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clyne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dennis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Data Visualization &apos;99</title>
		<meeting>Data Visualization &apos;99</meeting>
		<imprint>
			<date type="published" when="1999-05" />
			<biblScope unit="page" from="109" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Using texture compression in OpenGL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Domine</surname></persName>
		</author>
		<ptr target="http://www.nvidia.com" />
		<imprint>
			<date type="published" when="2000-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Accelerating time-varying hardware volume rendering using tsp trees and color-based error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ellsworth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2000 Symposium on Volume Visualization</title>
		<meeting>2000 Symposium on Volume Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
	<note>ACM SIGGRAPH</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Digital Image Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Woods</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Unsteady visualization of grand challenge size cfd problems: Traditional post-processing vs. coprocessing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ICASE/LaRC Symposium on Visualizing Time-Varying Data</title>
		<meeting>the ICASE/LaRC Symposium on Visualizing Time-Varying Data</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page">3321</biblScope>
		</imprint>
	</monogr>
	<note>NASA Conference Publication</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Least squares quantization in PCM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Lloyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Theory IT</title>
		<imprint>
			<biblScope unit="issue">28</biblScope>
			<biblScope unit="page" from="129" to="137" />
			<date type="published" when="1982-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">High performance visualization of time-varying volume data over a wide-area network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Camp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Supercomputing 2000 Conference</title>
		<meeting>Supercomputing 2000 Conference</meeting>
		<imprint>
			<date type="published" when="2000-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Compression and accelerated rendering of time-varying volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2000 International Computer Symposium -Workshop on Computer Graphics and Virtual Reality</title>
		<meeting>the 2000 International Computer Symposium -Workshop on Computer Graphics and Virtual Reality</meeting>
		<imprint>
			<date type="published" when="2000-12" />
			<biblScope unit="page" from="82" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Quantizing for minimum distortion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IRE Transactions on Information Theory IT</title>
		<imprint>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="7" to="12" />
			<date type="published" when="1960-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A Scientific Programming Environment for Computational Steering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scirun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1995 Supercomputing Conference</title>
		<meeting>the 1995 Supercomputing Conference</meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Scientist at the National Center for Atmospheric</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rast</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Personal Communication</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interactive volume rendering on standard pc graphics hardware using multitextures and multi-stage rasterization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rezk-Salama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH/Eurographics Graphics Hardware Workshop</title>
		<meeting>SIGGRAPH/Eurographics Graphics Hardware Workshop</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A distributed, parallel, interactive volume rendering package</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rowlan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gokhale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brad-Shaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Visualization &apos;94 Conference</title>
		<meeting>the Visualization &apos;94 Conference</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="21" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Introduction to Data Compression, second ed</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sayood</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Morgan Kaufmann Publishers, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A fast volume rendering algorithm for time-varying field using a time-space partitioning (tsp) tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;99</title>
		<meeting>Visualization &apos;99<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="371" to="377" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Differential volume rendering: A fast volume visualization technique for flow animation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Visualization &apos;94</title>
		<meeting>the Visualization &apos;94</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Conference</title>
		<imprint>
			<biblScope unit="page" from="180" to="187" />
			<date type="published" when="1994-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Isosurface extraction in time-varying fields using a temporal branch-onneed tree (T-BON)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;99 Conference</title>
		<meeting>IEEE Visualization &apos;99 Conference</meeting>
		<imprint>
			<date type="published" when="1999-10" />
			<biblScope unit="page" from="147" to="153" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Compression domain rendering of time-resolved volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Visualization &apos;95 Conference</title>
		<meeting>the Visualization &apos;95 Conference</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="168" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Octrees for faster isosurface generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="57" to="62" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Multidimensional trees for controlled volume rendering and compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1994 Symposium on Volume Visualization</title>
		<meeting>the 1994 Symposium on Volume Visualization</meeting>
		<imprint>
			<date type="published" when="1994-10" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Color Plate 1: One selected frame for each data set</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Color Plate 2: Visualizations of the quasi-geostrophic data set at difference compression levels. As the level of compression increases, some of the finer features become blurred</title>
	</analytic>
	<monogr>
		<title level="m">Top row: time step 980. Bottom row: time step 210. Left to right: 1x 2x 4x 8x compression Color Plate 3: Selected visualizations of the quasi-geostrophic data set produced by varying transfer functions</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
