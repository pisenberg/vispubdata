<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Connectivity Shapes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Isenburg</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Gumhold</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Gotsman</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Tübingen</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Institute of Technology</orgName>
								<address>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Connectivity Shapes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Natural embedding</term>
					<term>mesh connectivity</term>
					<term>implicit geometry</term>
					<term>polygon meshes</term>
					<term>shape compression Connectivity Shapes</term>
					<term>Isenburg</term>
					<term>Gumhold</term>
					<term>Gotsman</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: (a) Original polygonal mesh of a cow. (b) The connectivity of (a) embedded on the sphere. (c) The connectivity shape corresponding to the connectivities of (a) and (b). (d) Connectivity shape after remeshing the cow of (a).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The most widely used representation for three-dimensional geometric surfaces are polygonal meshes. These consist of mesh geometry and mesh connectivity, the first describing the location of each ver-£ isenburg@cs.unc.edu http://www.cs.unc.edu/˜isenburg/cs Ý stefan@gumhold.de Þ gotsman@cs.technion.ac.il tex in 3D space and the latter describing how to connect the vertices together to form polygons that describe a surface.</p><p>At first glance, these two components of the mesh seem to be independent, namely that many different mesh connectivities could co-exist with a given geometry, and vice versa. While this is theoretically true, it also seems that, in typical real-world meshes, some correlation between the two exists. For example, "nice" triangulations of mesh geometries, such as the Delaunay-type triangulations, are traditionally preferred over "ugly" triangulations containing long and skinny triangles.</p><p>This form of the correlation imposes a "natural" connectivity on a given geometry, and has been investigated in the context of mesh generation from 3D point clouds in 3D scanning applications (e.g. <ref type="bibr" target="#b0">[1]</ref>) and optimal triangulations of point sets (e.g. <ref type="bibr" target="#b1">[2]</ref>). The reverse, imposing a "natural" geometry on a given connectivity, has been treated less. This paper explores mainly that direction.</p><p>We introduce a shape representation that is based solely on connectivity. In <ref type="figure">Figure 1</ref>(a) we see a well-known polygonal model of a cow. Ignoring the geometry, we have mapped the cow's connectivity onto the unit sphere (b), where the different densities hint to the features of the cow. In (c) the corresponding connectivity shape is shown. It is a smooth embedding with uniform edge lengths of the connectivity graph of (a) and (b) in three dimensional space.</p><p>Imagine all edges of the cow being springs of the same equilibrium length. In the embedding (b) we forced the spring system into a high energy state. In (c) we released all vertices and the spring system relaxed into a low energy state, with more or less uniform edge lengths. This can be thought of as the connectivity's natural shape. More poetically, the sphere embedding in (b) has the body of a sphere, but the soul of an animal. The embedding in (c) reveals the geometric soul of the cow's connectivity.</p><p>Connectivity shapes are closest in spirit to the embedding techniques used in the graph drawing community. The focus of most of their attention has been on 2D embedding methods, and only recently have embeddings in 3D <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b6">7]</ref> become popular for visualization purposes. These graph drawing approaches use re- pelling force techniques that allow to embed graphs of arbitrary topology. However, for graphs that have the topology of a surface (e.g. that are 2-manifold), the connectivity shape technique will produce more aesthetically pleasing results, especially when the graph's surface characteristics are an important feature of the visualization.</p><p>We can also generate connectivities whose natural shape resembles that of a given shape. This is done by (re)meshing the given shape with uniform edge lengths. For example, the connectivity shape in <ref type="figure">Figure 1</ref>(d) bears a striking resemblance to the original (a). The only information in this mesh is its connectivity, in the sense that it induces the mesh geometry.</p><p>In the following section we define a connectivity shape as the natural geometry associated with a connectivity and describe a method to compute it. In Section 3 we show how to create connectivities whose connectivity shape approximates a desired shape. Hierarchical methods for faster computation of connectivity shapes are the topic of Section 4. Finally we summarize our work, describe some open theoretical problems and discuss potential applications of connectivity shapes, such as modeling and mesh coding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">SHAPE FROM CONNECTIVITY</head><p>Any polygon mesh can be thought of as an embedding of a connectivity graph in three dimensions. The location of each vertex of the mesh is carefully chosen since the surface is meant to represent a geometric shape. However, our thesis is that for most meshes there is a substantial amount of information about the shape present in its connectivity. To illustrate, consider <ref type="figure">Figure 1</ref>. In (b) the vertices of the connectivity graph of the cow mesh in (a) have been embedded on the unit sphere such that each vertex is approximately at the center of its neighbors. This embedding is computed from the connectivity alone without any knowledge about the geometry. However, the geometric features of the cow are reflected in the vertex densities of the embedding. The regions of the connectivity graph covering the body of the cow map uniformly onto the sphere, whereas prominent extremities such as the legs or the tail map to dense concentrations, suggesting that they would rather "pop" out of the sphere and must be forced together by the mapping.</p><p>We now define a preferred geometric shape based on the connectivity alone. Given a connectivity graph ´Î µ, consisting of an indexed set of Ò vertices Î Ú ½ Ò and a set of Ñ undirected edges ´ ½´ µ ¾´ µµ ½ Ñ , the connectivity shape Ë´ µ corresponding to is a list of Ò vectors Ü Ǘ ¾ ÁÊ ¿ µ ½ Ò associated with the graph vertices that best satisfy some natural property. We have chosen the property that all edges have unit length. This choice corresponds to the intuition that the connectivity shape can be interpreted as the equilibrium state of a system of springs with identical equilibrium length joined together according to the connectivity graph. Alternatively, the con-nectivity shape can be thought of as an isometric embedding of the connectivity graph in ÁÊ ¿ , which is a solution to the following set of quadratic equations in the ¿Ò unknowns:</p><formula xml:id="formula_0">Ü Ü ¾ ½ ´ µ ¾<label>(1)</label></formula><p>The number of equations, Ñ, is the number of edges in and determined by the Euler-Poincar formula for a shell of genus with Ò vertices and faces:</p><formula xml:id="formula_1">Ñ Ò • • ¾ ¾.</formula><p>On one hand the quadratic nature of the equations (1) introduces ambiguity into the solution. This can be seen by considering a vertex with a circular symmetric neighborhood forming a cap protruding out of the shape. Then the same shape with the vertex protruding into the shape is an equivalent solution to the system; it cannot distinguish between the two. On the other hand the quadratic nature might not admit a solution at all. Hence, we seek a solution in the least squares sense by minimizing the following spring energy:</p><formula xml:id="formula_2">Ë Ü ¾ ÁÊ Ò¢¿ ¡ ´ µ¾ ´ Ü Ü ½µ ¾<label>(2)</label></formula><p>Furthermore, the problem of an isometric embedding of a two dimensional manifold in three dimensions has no smooth solution in general. The geometry minimizing (2) typically does not have a "nice" shape, rather it will be a rough surface with extremely high local curvatures. In order to bound the curvatures of the solution and also eliminate unwanted local minima resulting from the in/out cap protrusion problem, it is necessary to regularize the solution by adding a roughness term to the cost function. This term Ê is defined using the discrete Laplacian operator  where the sum is over all edges incident on node and is the degree of node . Minimization of the roughness energy term</p><formula xml:id="formula_3">Ä´Ü µ ½ ´ µ¾ Ü Ü<label>(3)</label></formula><formula xml:id="formula_4">Ê Ü ¾ ÁÊ Ò¢¿ ¡ Ò ½ Ä´Ü µ ¾ (4)</formula><p>also minimizes the second derivatives and thus the curvature of the shape. Using the two energy terms Ë and Ê we define a family of connectivity shapes</p><formula xml:id="formula_5">Ë µ Ö Ñ Ò Ü¾Á Ê Ò¢¿ ´½ µ Ë´Üµ • Ê´Üµ ßÞ ´Üµ (5)</formula><p>The tradeoff between unit edge length and smoothness is controlled by the positive real parameter . <ref type="figure" target="#fig_0">Figure 2</ref> illustrates the influence of this parameter on the resulting connectivity shapes. Large values of result in very skinny and smooth meshes. Small values of cause the mesh to inflate to its natural shape until it becomes bumpy and looses its appeal. The obvious question is how to choose the optimal value ÓÔØ. It should be as small as possible without introducing bumpiness. A human observer can easily find the optimal smoothing parameter by visual inspection, but an automatic method is more elusive. We have found that the volume of the mesh is useful in this context:</p><formula xml:id="formula_6">ÓÔØ´ µ Ö Ñ Ü ¾ ¼ ½ ÎÓÐÙÑ ´ Ë µµ<label>(6)</label></formula><p>namely, the optimal smoothing parameter ÓÔØ corresponds to the value at which the connectivity shape has maximal volume. <ref type="figure" target="#fig_1">Figure 3</ref> plots the volume of the connectivity shapes of <ref type="figure" target="#fig_0">Figure 2</ref> as a function of . The volume is small for large values of and increases for smaller values until it reaches the maximum volume at ÓÔØ. When the shape starts to become bumpy the volume decreases again. This happens because the total surface area of the mesh is fixed by the unit edge lengths and volume decreases with increasing fractality of the surface. <ref type="figure" target="#fig_2">Figure 4</ref> shows various examples of connectivity shapes generated with optimal smoothing parameters for the connectivities of some popular polygonal meshes. Remember, that these shapes do not use any of the original geometric information, but are computed from the connectivities of the meshes alone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Embedding with an Iterative Solver</head><p>Generating a connectivity shape implies a numerical solution to the optimization problem <ref type="bibr" target="#b4">(5)</ref>. Since the input is just a connectivity graph, and we use an iterative method, we have to compute an initial location for each vertex. For polygon meshes with genus zero we use an embedding of the mesh on the unit sphere. While a pure 3D approach to this is difficult, an easy way out is to reduce it to two 2D problems. This is achieved by finding a vertex separator that partitions the connectivity graph into two components with approximately the same number of vertices in each component and a common boundary. Each component may be mapped to the unit disk by the Tutte procedure <ref type="bibr" target="#b20">[21]</ref>, which positions the boundary vertices at fixed locations on a circle, and each interior vertex at the centroid of its neighbors. We use a variant of the Tutte procedure which computes positions on half a sphere, rather than in the plane. Thanks to the common boundary, the two components fit together perfectly along the sphere equator.</p><p>The iterative solver then proceeds to solve (5) using the conjugate gradient method. A fast conjugate gradient solver relies on two major components. Firstly, a method to compute the gradient of the energy Ö ´Üµ ¾ ÁÊ Ò¢¿ , where Ö consists of all the partial</p><formula xml:id="formula_7">derivatives Ü ½ ½ Ü½ ¾ Ü½ ¿ Ü¾ ½ Ü Ò ¿.</formula><p>The second component of the solver computes for a given displacement vector ¾ ÁÊ Ò¢¿ , added to the current solution Ü, the real</p><formula xml:id="formula_8">parameter «ÓÔØ, such that «ÓÔØ Ö Ñ Ò « ¼ ´Ü • « ¡ µ</formula><p>In the steepest descent method just the negative energy gradient is used as the displacement vector . In the conjugate gradient method is incrementally calculated from the negative gradients in a way that avoids unnecessary iterations in directions previously explored.</p><p>The calculation of the step size «ÓÔØ can accelerate the convergence of the conjugate gradient method significantly. In our case «ÓÔØ cannot be expressed analytically, since Ë is not polynomial in Ü.</p><p>To overcome this, we use a modified version of the spring energy</p><formula xml:id="formula_9">¼ Ë Ü ¾ ÁÊ Ò¢¿ ¡ ´ µ¾ Ü Ü ¾ ½ ¡ ¾<label>(7)</label></formula><p>where the edge lengths have been squared. ¼ Ë has the same global minimum as Ë in the case there exists a smooth unit edge length embedding. The energy ¼ ¼ Ë • Ê is a quartic polynomial in Ü, so «ÓÔØ can be computed analytically. After minimization of ¼ the solver continues to minimize with only a few iterations. A second method of accelerating convergence, which also avoids most local minima, is to cool down the smoothing. The initial spherical embedding is very smooth and corresponds to ½ (under the constraint that all vertices are on the sphere). From there we continue with ¼ . After convergence we halve and continue again. This terminates when the target smoothing parameter is reached. The discrete halving is preferred over a continuous decrease of because it reduces the number of restarts of the conjugate gradient solver. Excessive restarting would cause our solver to degenerate into the slower steepest descent solver. The convergence of various connectivity shapes is illustrated in the accompanying video. For large meshes the convergence is quite slow. Hierarchical methods (see Section 4) can speed it up.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CONNECTIVITY FROM SHAPE</head><p>So far we have created the natural geometry for a given connectivity. In this section we describe how to do the opposite, namely how to generate a connectivity graph whose corresponding connectivity shape approximates the geometry of a given mesh.</p><p>Connectivity shapes aim, by definition, at achieving unit edge length for the entire mesh. This is the main reason that the connec-tivity shapes of the giraffe (a) and the triceratops (b) in <ref type="figure" target="#fig_2">Figure 4</ref> look quite different from the original polygon meshes. These meshes were created with a modeling package and their edge lengths are non-uniform. On the other hand, the connectivity shapes of the Stanford bunny (c) and the horse (d) better resemble the original meshes. These meshes were created by surface reconstruction from the point cloud produced by a 3D scanner. Due to the regular spacing of the sample points, they have fairly uniform edge lengths.</p><p>Had we used the original edge lengths instead of a unit edge length of ½ in Eq. <ref type="formula" target="#formula_9">7</ref>, the resulting shapes would always closely resemble the original. But we aim at a shape whose geometry is a function of connectivity only. To generate a connectivity whose natural shape matches a given shape, we need to create a triangle mesh with edges of equal length that describes this shape. <ref type="figure">Figure 6</ref> shows examples of connectivity shapes approximating some popular polygon meshes. We generated these connectivities using the method described in the next subsection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Meshing and Remeshing</head><p>The process of creating a polygonal mesh from a geometric shape is called meshing. If the geometric shape is already in a polygonal form, generating another polygonal mesh is also called remeshing. Our objective is a (re)meshing method that results in a faithful approximation of a given shape while using only edges of unit length. In the ideal case the resulting geometry will then be a solution of (5) given the resulting connectivity.</p><p>Mesh generation techniques used in the finite-element community have a similar objective. For fast convergence and high accuracy of numerical computations they require meshes with optimal element shapes, which usually means equilateral triangles. For the 2D case, a wealth of meshing methods exist (e.g. see survey in <ref type="bibr" target="#b1">[2]</ref>). The 3D surface case has been treated less, but some notable methods are those of Turk <ref type="bibr" target="#b19">[20]</ref> and Frey <ref type="bibr" target="#b5">[6]</ref>.</p><p>It seems quite difficult to optimize both the geometry and the connectivity of the mesh such that on the one hand unit edge lengths are achieved, and on the other hand we remain faithful to the original shape. Instead of attempting this, we customized Turk's retiling procedure <ref type="bibr" target="#b19">[20]</ref>, which was well suited for our purposes.</p><p>Turk's method distributes Ò points as uniformly as possible over the mesh and triangulates them into a surface. The variation in edge length is then further minimized with local edge flips. Uniform distribution of the points is achieved by applying a relaxation method to initially randomly placed points on the mesh. This method associates with each point a force that repels neighboring points within a radius Ö. This radius reflects the target edge length in the vicinity of the point. For uniform edge length this is a constant that only depends on the total surface area and the number of points Ò.</p><p>Our variation alternates between two stages: One relaxes the positions of the points with Turk's method and the other displaces them by Laplacian smoothing. The connectivity between the points used for the Laplacian smoothing is constantly re-computed, aiming at uniform edge length. While these two stages alternate, we slowly decrease the amount of of relaxation and smoothing until the points are frozen. Remeshed versions of the Stanford bunny using 500, 2000, and 5000 vertices and the connectivity shapes computed from their connectivities are shown in <ref type="figure" target="#fig_3">Figure 5</ref>.</p><p>Remeshing with a larger number of vertices not only results in a more accurate approximation of the original shape, but also reduces the spring energy (2), as the relative deviation (the ratio between the standard deviation and average) in edge length decreases-both factors bring the connectivity shape closer to the desired shape. Increasing the number of vertices, however, increases the complexity of the generated connectivity, which makes the computation of its connectivity shape more expensive.</p><p>From the relative deviation in edge length of the remeshed shape we can determine a smoothing parameter Ú for which the con- <ref type="figure">Figure 6</ref>: Connectivities generated such that their corresponding connectivity shapes resemble a given mesh: The original polygon meshes (first row), the remeshed versions (second row), the connectivity shapes corresponding to the remeshed connectivities (third row). The number of vertices (n) and the relative deviation (dev) of the edge length are reported for each mesh. The bumpy horse at the bottom left is a connectivity shape generated using a very small value of the smoothing parameter . It achieves almost unit edge length (i.e. dev is very small). nectivity shape will be a good match. Connectivity shapes try to realize unit edge length for the entire mesh (i.e. relative deviation of zero). In general the edges of the remeshed shape will not have unit length, so we can choose the smoothing parameter at which the connectivity shape has the same relative deviation in edge length as the shape it is trying to match. Experimentally this Ú turns out to be close to the optimal ÓÔØ, as defined in (6).</p><p>Our remeshing solution runs anywhere between a few minutes to generate meshes containing thousands of vertices and a few hours for meshes containing hundreds of thousands of vertices. As the specific remeshing method is not the main focus of this work, and in fact, other surface remeshers could be adapted to our purposes, we have made no real effort to optimize the software.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Adaptive Remeshing</head><p>The disadvantage of meshing a geometric shape solely with unit edge length is that the smallest feature dictates the edge length for the entire mesh. This may increase the number of vertices to unrea-sonable numbers, especially for meshes with fine detail. A possible solution would be to deviate from the pure concept of a connectivity shape and attach sparse information about feature size to the connectivity. Instead of specifying this for every edge, we would provide explicit edge length information only at the finest and the coarsest regions of the mesh. Locally, edges would still have equal lengths, but smoothly vary across the mesh, interpolating the explicit information. The challenge remains to (re)mesh in a manner such that the resulting edge lengths are close to those we would get from interpolating the sparse data on the connectivity graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Limitations</head><p>While <ref type="figure">Figure 6</ref> demonstrates that it is possible to approximate given meshes by connectivity shapes surprisingly well -remember that these shapes contain no explicit geometric information whatsoever -it also exposes the limitations of the method: Without supplementary information, it will not be possible to generate a connectivity whose shape is identical to a target shape. This is especially noticeable in the teapot and the fine features of the dinosaur and horse. The limitations follow both from the definition of a connectivity shape, which is not unique, and the unit edge length objective of the remeshing method. The first might invert convexities and concavities and the second makes fine details expensive to capture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">HIERARCHICAL EMBEDDING</head><p>The iterative solver generating the connectivity shape, as described in Section 2.1, started with an initial embedding on the sphere, which is typically quite distant from the final solution. This results in a very slow procedure to generate the connectivity shapes of large meshes. To improve this, we adopt a hierarchical approach. In this setting the initial geometry for the solver at some level is taken as the result from a coarser level, which is a much better approximation of the final shape than a spherical embedding. Hence only the coarsest level uses a spherical embedding as the initial geometry.</p><p>The hierarchical method proceeds as follows: Starting from the given connectivity, we build from the connectivity alone a hierarchy of coarser and coarser connectivities. For each coarse level we compute new target edge lengths, not necessarily unit, which are derived from the finer level. The finest level, of course, has unit target edge lengths. When solving, we start with the coarsest level and embed its connectivity on the sphere. To accommodate nonunit edge lengths Ð the spring energy term of (7) is refined to ¼¼</p><formula xml:id="formula_10">Ë Ü ¾ ÁÊ Ò¢¿ ¡ ´ µ¾ Ü Ü ¾ Ð ¾ ¡ ¾<label>(8)</label></formula><p>After convergence at a coarse level, the initial geometry of the next (finer) level is generated from the coarse geometry. At each level we do not iterate through all the smoothing parameter values, but distribute the smoothing parameter interval over the levels. For example, for the hierarchical embedding of the horse as shown in the accompanying video with an optimal of ¼ ¼¼¼¾ we varied on the coarsest level between ¼ and ¼ ¼ , in the middle level between ¼ ¼¾ and ¼ ¼¼½ and on the finest level between ¼ ¼¼¼ and ¼ ¼¼¼¾.</p><p>Since the hierarchy must be built from the connectivity alone, we chose to build the hierarchy levels by partitioning the mesh faces into patches as illustrated in <ref type="figure" target="#fig_4">Figure 7</ref>. This was done with the general purpose MeTis graph partitioning library <ref type="bibr" target="#b13">[14]</ref>. MeTis partitions a connected graph into equal sized connected subgraphs. To group the faces and not the vertices into patches we feed the partitioning algorithm with the dual of the connectivity graph. This results in vertex separators, as opposed to the standard edge separators. MeTis minimizes the number of vertices on the patch boundaries, which results in nicely formed (small diameter) patches. From this we construct a coarser polygonal connectivity. The vertices of the new connectivity are the vertices of the original connectivity where more than two patches meet (large vertices in <ref type="figure" target="#fig_4">Figure 7(a)</ref>). In order to minimize the number of vertices in the coarse level, we merge vertices of degree three of the coarse level, which are adjacent also in the fine level, by local patch growing operations. The faces of the new connectivity are the patches, as shown in <ref type="figure" target="#fig_4">Figure 7 (b)</ref>.</p><p>The target edge lengths of the finest level are unit. The target length of an edge in the next coarser level is taken to be the length of the corresponding edge path in the finer connectivity. In <ref type="figure" target="#fig_4">Figure 7</ref>(b) the edges are labeled with their target lengths calculated from the finer level.</p><p>Finally, we have to specify how to map the geometry of a coarse level back to the next finer level. <ref type="figure" target="#fig_4">Figure 7</ref>(c) illustrates this process. The locations of the vertices in the fine connectivity (fine vertices), which are preserved on the coarse level, are kept. Fine vertices on a coarse edge are distributed along the geometry of the coarse edge according to the target edge lengths on the finer level. All the remaining fine vertices are mapped into the interior of the coarse faces, corresponding to the patches they reside in. To find good initial locations for the latter fine vertices, we fix the fine vertices on coarse vertices or edges and perform a few "shape-preserving" iterations <ref type="bibr" target="#b4">[5]</ref> based on the target edge lengths. The resulting locations are shown in <ref type="figure" target="#fig_4">Figure 7(d)</ref>.</p><p>We varied the patch size for building the hierarchy between ¿ and ½¼. It turned out that the hierarchical solver converged faster with small patch size. A patch size of ¿ outperformed the patch size of ½¼ by about twenty percent. We compared the hierarchical embedding times of various meshes with that of the standard solver. Small meshes like the cow, giraffe and triceratops, required only two coarser levels and the hierarchical solver was four times faster. The cow's connectivity shape was computed hierarchically in ¾ seconds and the other two in ¼ seconds each on a Pentium III 600 MHz. For the dino and the horse meshes, the speedups with five hierarchy levels were eight and eleven, respectively, resulting in ½¿ minutes for the dino and ¼ minutes for the horse. Fifty percent of the embedding time for the horse was consumed on the finest level.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION</head><p>This paper has capitalized on the fact that a natural geometry may be associated with a given connectivity. This connectivity shape is defined as the geometry that minimizes some natural cost function of both the connectivity and the geometry. While showing how to work with these concepts in practice, there are still two open questions about the uniqueness of connectivity shapes, which we elaborate on here: (a) Is the definition unique ? (b) Does the iterative solver always find the desired solution ?</p><p>The definition of a connectivity shape is not unique. First of all the minimization problem (5) is, as expected, invariant under rigid body transformations and therefore adds six degrees of freedom to the solution. Furthermore, in the case of a non-triangular connectivity or a connectivity with border edges, the number of equations in (1) is less than the number of unknowns. Only in case of a triangular connectivity with genus zero does the number of equations equal the ¿Ò degrees of freedom. The quadratic nature of (2) causes the in/out cap protrusion problem, which is not limited to caps of the size of a vertex neighborhood. Entire legs of the animal meshes can invert into the body of the mesh. Our regularization of the solution avoids some of this, but even if (5) has a unique minimum, it could be by accident a shape with the legs inside the body, and the desired shape (with the legs outside the body) could be a local minimum with slightly more energy. A topic of future work is to find this desirable "almost-global" minimum that maximizes the volume of the shape. This would automatically force extremities to protrude from the shape and avoid most self intersections.</p><p>A possible solution to the cap protrusion problem would be to augment the connectivity shape concept with another bit per vertex, denoting whether the surface at that point is concave or convex (the so-called "bump-bit"). Although we have not yet investigated this enough, we have some experimental evidence that this could solve the uniqueness problem.</p><p>There is a connection between connectivity shapes and the branch of combinatorial geometry called "Rigidity Theory" ( <ref type="bibr" target="#b3">[4]</ref>, Chap. 6). A classical result of Cauchy implies that every triangulated convex polyhedron is uniquely determined by its edge lengths. For many years it was believed that non-convex triangulated polyhedra, while not uniquely determined by their edge lengths, are "rigid", namely, that there is no continuous transformation between the solutions which preserves the prescribed edge lengths. However, Connelly <ref type="bibr" target="#b2">[3]</ref> and others showed that there are some pathological constructions where this does not hold (the so-called "flexible" polyhedra). In these few cases, however, the volume of the solution is fixed during the transition between solutions. Given a set of edge lengths of a graph, finding an embedding in Ê ¿ which satisfies the edge length constraints, if one exists, is known to be NPcomplete <ref type="bibr" target="#b16">[17]</ref>. Determining whether there exists a unique solution may be done in polynomial time <ref type="bibr" target="#b10">[11]</ref>.</p><p>Since we incorporate a roughness term into our cost function, hence do not force precise edge lengths, none of this theory is really applicable. While this roughness term eliminates some of the solutions that minimize only the edge length component, it is still not clear whether the global minimizer of the complete cost function is unique.</p><p>The second aspect of uniqueness is whether the solver finds the desired solution, and does not get stuck in a local minimum far away from the global one. We normally achieve this by a good initial guess and cooling of the smoothing parameter. The spherical embedding as an initial guess has the advantage that we do not have any self intersections nor surface inversions to start off with. As the edge lengths are far from uniform in this initial mesh, we start with heavy smoothing to avoid minima with inverted surfaces.</p><p>For connectivities of genus greater than zero, the spherical embedding as initial geometry is suboptimal, since it will contain selfintersections. For the teapot shape of <ref type="figure">Figure 6</ref> the spherical embedding worked well, but in general a more adapted approach is needed. Currently, we investigate how to map a connectivity graph with higher genus to a standard shape of the same genus.</p><p>An interesting connection between mesh connectivity and geometry may be made through the mesh Laplacian operator, as defined in <ref type="bibr" target="#b2">(3)</ref>. It has been observed in the past <ref type="bibr" target="#b8">[9]</ref> that the eigenvectors of the corresponding Laplacian matrix that have the smallest non-zero eigenvalues may be used as coordinate vectors, forming a natural embedding of the connectivity graph in Ê . Hence a natural "spectral" embedding in 3D would be obtained using three such eigenvectors. It is easy to prove that this embedding minimizes the total squared Euclidean edge length in Ê ¿ , subject to the constraint that the norm of the three coordinate vectors is unit. Our experiments with this "spectral" embedding have resulted in pleasing 2D embeddings for meshes of disk topology (using two eigenvectors), but often distorted 3D embeddings for meshes of sphere topology (using three eigenvectors). This is probably because our connectivity graphs just describe a two dimensional surface in a three dimensional space. Interestingly enough, the eigenvectors of the Laplacian matrix have also been used for mesh geometry coding <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">OTHER APPLICATIONS</head><p>Connectivity shapes proved very useful for the visualization of connectivity graphs describing a two manifold. In this section we mention some other potential applications of connectivity shapes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Shape Modeling</head><p>The notion of a connectivity shape suggests using it as a modeling tool. Envision an interactive modeling system, in which the modeling primitives are connectivity operations only, e.g. spray on some vertices, change the connectivity by edge flips, collapse edges. It remains to be seen whether such a tool would be intuitive to use with enough expressive power to generate a rich variety of shapes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Connectivity Creatures</head><p>It is entertaining to generate the connectivity shapes of existing mesh connectivities, as we did in <ref type="figure">Figures 1(c)</ref>, 4(a,b), and 8 and see how they turn out. These connectivity creatures will not have the shape of the meshes whose connectivity was used, but some distortion of it, usually with exaggerated features as commonly seen in caricatures. Connectivity creatures certainly have some entertainment value and there exists a large volume of 3D content that can be manipulated this way without any extra modeling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Mesh Coding</head><p>Another possible application for connectivity shapes is 3D mesh coding. For storage and transmission purposes it is important to represent a mesh as compactly as possible. This problem has received a lot of attention recently, and much of the effort has focused on coding the connectivity component efficiently <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b11">12]</ref>. While this has resulted in codes requiring less than 4 bits per vertex (bpv) on the average, the geometric information now dominates the coding cost, and, assuming 10 bpv pre-quantization, even efficient predictive coding <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19]</ref> is not able to reduce these 30 bpv to much less than 15 bpv on the average. It would be very beneficial to reduce the geometric component of a mesh further. A possible way to achieve this are connectivity shapes.</p><p>Using connectivity shapes (with or without "bump bits") for coding means that the code will be lossy, in the sense that the recovered (decoded) mesh will not be identical to the original, both in connectivity and geometry. While loss is undesirable for some applications, and the first mesh coding algorithms made an effort to avoid this, it is becoming more and more acceptable to code meshes in a lossy manner, as long as the decoded version is sufficiently close to the original. In the context of connectivity shapes, this means that the coding algorithm is the remeshing procedure, the code is some efficient coding of only the connectivity information, and the decoding algorithm is the connectivity shape generation procedure. A remeshed shape often has a much larger number of vertices than the original mesh. While this increases the amount of connectivity information that needs to be encoded, preliminary experiments suggest that overall this method is still cost effective. This is especially true since connectivity coding algorithms favor highly regular meshes like those produced by our remeshing procedure. An approach using adaptive remeshing, as envisioned in Section 3.2, which reduces the number of vertices, but retains sparse geometric information, would combine the best of both worlds.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Family of connectivity shapes computed from the cow's connectivity with different smoothing parameters .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Finding the optimal smoothing parameter : The volume of the connectivity shapes fromFigure 2as a function of .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Connectivity shapes computed from the connectivity of (a) giraffe, (b) triceratops, (c) Stanford bunny, and (d) horse.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Three bunnies remeshed with 500, 2000, and 5000 vertices (left) and their corresponding connectivity shapes (right). Reported are the relative deviation in edge length Ú after remeshing and the smoothing parameter Ú .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Stages of the hierarchical solver: (a) Partitioning of fine connectivity. Large vertices will be inherited by the coarse level. (b) Coarse level connectivity and target edge lengths. (c) Mapping back the solved coarse geometry on the fine connectivity. (d) The initial locations of the patch interior vertices</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 :</head><label>8</label><figDesc>Connectivity creatures: tuna fish, stegoratops, penguin, gila monster, dragon, and elephant.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Connectivity Shapes, Isenburg, Gumhold, Gotsman</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">appeared in Visualization '2001</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Thanks to Greg Turk for supplying us with his retiling software and to Zachi Karni for technical support. This work was funded by the European MINGLE project HPRN-CT-1999-00117.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A new Voronoi-based surface reconstruction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Amenta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kamvysselis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;98 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="415" to="421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Mesh generation and optimal triangulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Eppstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computing in Euclidean Geometry</title>
		<imprint>
			<publisher>World Scientific</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="71" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A counterexample to the rigidity conjecture for polyhedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Connelly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Inst. des HautesÉtudes Scientifiques Publications Mathematiques</title>
		<imprint>
			<date type="published" when="1977" />
			<biblScope unit="page" from="333" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename><surname>Cromwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Polyhedra</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Parameterization and smooth approximation of surface triangulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Floater</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="231" to="250" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">About surface remeshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Frey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th International Meshing Roundtable</title>
		<meeting>the 9th International Meshing Roundtable</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="123" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A fast multi-dimensional algorithm for drawing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gajer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing&apos;00 Conference Proceedings</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="211" to="221" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Real time compression of triangle mesh connectivity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gumhold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;98 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="133" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An r-dimensional quadratic placement algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Hall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="issue">17</biblScope>
			<biblScope unit="page" from="219" to="229" />
			<date type="published" when="1970" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A fast multi-scale method for drawing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing&apos;00 Conference Proceedings</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="183" to="196" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Conditions for unique graph realizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hendrickson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal of Computing</title>
		<imprint>
			<biblScope unit="issue">21</biblScope>
			<biblScope unit="page" from="65" to="84" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Face Fixer: Compressing polygon meshes with properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isenburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;00 Conference Proceedings</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Spectral compression of mesh geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Karni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gotsman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH&apos;00 Conference Proceedings</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="279" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">METIS -a software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices. Version 4, University of Minnesota</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kumar</surname></persName>
		</author>
		<ptr target="AvailableonWWWatURLhttp://www-users.cs.umn.edu/karypis/metis/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Efficient coding of non-triangular meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kronrod</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gotsman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Pacific Graphics</title>
		<meeting>Pacific Graphics</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="235" to="242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Edgebreaker: Connectivity compression for triangle meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Embedding of weighted graphs in k-space is strongly NP-hard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Saxe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 17th Allert. Conf. in Commun. Control and Comput</title>
		<meeting>17th Allert. Conf. in Commun. Control and Comput</meeting>
		<imprint>
			<date type="published" when="1979" />
			<biblScope unit="page" from="480" to="489" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Geometric compression through topological surgery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="84" to="115" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Triangle mesh compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Touma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gotsman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Interface&apos;98 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="26" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Re-tiling polygonal surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;92 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="55" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">How to draw a graph</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Tutte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1963" />
			<publisher>London Mathematical Society</publisher>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="743" to="768" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A multilevel algorithm for force-directed graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Walshaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing&apos;00 Conference Proceedings</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="171" to="182" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
