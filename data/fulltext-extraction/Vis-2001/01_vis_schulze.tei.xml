<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Perspective Shear-Warp Algorithm In A Virtual Environment</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jürgen</forename><forename type="middle">P</forename><surname>Schulze</surname></persName>
							<email>schulze|lang@hlrs.de</email>
							<affiliation key="aff0">
								<orgName type="department">High Performance Computing Center Stuttgart</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roland</forename><surname>Niemeier</surname></persName>
							<email>roland@science-computing.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ulrich</forename><surname>Lang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">High Performance Computing Center Stuttgart</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<addrLine>Allmandring 30</addrLine>
									<postCode>70550</postCode>
									<settlement>Stuttgart</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<address>
									<addrLine>Hagellocher Weg 73</addrLine>
									<postCode>72070</postCode>
									<settlement>Tübingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">The Perspective Shear-Warp Algorithm In A Virtual Environment</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation-Display Algorithms; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism-Virtual Reality Volume Rendering</term>
					<term>Perspective Shear-Warp</term>
					<term>Virtual Environments</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Since the original paper of Lacroute and Levoy [9], where the shearwarp factorization was also shown for perspective projections, a lot of work has been carried out using the shear-warp factorization with parallel projections. However, none of it has proved or improved the algorithm for the perspective projection. Also in Lacroute&apos;s Volpack library, the perspective shear-warp volume rendering algorithm is missing. This paper reports on an implementation of the perspective shear-warp algorithm, which includes enhancements for its application in immersive virtual environments. Furthermore, a mathematical proof for the correctness of the permutation of projection and warp is provided, so far a basic assumption of the shear-warp perspective projection.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The algorithms based on the shear-warp factorization, especially the one developed by Lacroute <ref type="bibr" target="#b8">[9]</ref>, are among the fastest volume rendering algorithms. They have often been compared to hardware accelerated volume rendering techniques, such as general purpose graphics boards with texturing acceleration <ref type="bibr" target="#b0">[1]</ref>, or specialized volume rendering hardware <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b9">10]</ref>.</p><p>Although on single processor machines the shear-warp algorithm is usually slower than hardware supported solutions, the shearwarp's good scalability allows it to be competitive on multiprocessor machines <ref type="bibr" target="#b7">[8]</ref>. So far, volume rendering in virtual environments (VE) with multiple screens is dominated by texturing hardware approaches. Due to the necessary high resolution of about 1000 2 pixels per stereo screen, the image quality is limited by the pixel fill rate. Thus, it degrades considerably when the volume object fills a significant part of the screens, because subsampling algorithms need to be applied to maintain an interactive frame rate. In contrast, shear-warp rendering speed does not depend on the output image size. At comparable output image quality in a 1000 2 window, our PC system (see section 4) renders a 64 3 data set at 2.2 frames per second (fps) using the shear-warp algorithm, compared to 1.3 fps with texture hardware acceleration.</p><p>Many extensions, like stereo rendering <ref type="bibr" target="#b4">[5]</ref>, parallel algorithms <ref type="bibr" target="#b7">[8]</ref>, clipping planes <ref type="bibr" target="#b15">[16]</ref>, and performance improvements <ref type="bibr" target="#b3">[4]</ref> have been added to the shear-warp algorithm for parallel projections. However, only a few implementations or enhancements of the shear-warp algorithm for perspective projections were reported, e.g., an improvement of the warp <ref type="bibr" target="#b1">[2]</ref>, and none of them address the compositing.</p><p>Perspective volume rendering has well known advantages. Depth information perceived by perspective projection is important, e.g., for radiation therapy planning. Also for immersive virtual environments a restriction to parallel projection algorithms generates depth ambiguities. For CAVE-like environments <ref type="bibr" target="#b2">[3]</ref>, or for any other non-flat multi-projection environments, perspective projection is a requirement.</p><p>The shear-warp algorithm processes volume data arranged on cartesian grids. It is based on the idea of factorizing the viewing matrix into a shear and a 2D warp component, with the projection done in between. After applying the shear matrix, the volume slices are projected and composited to a 2D sheared image. The shear step enables the algorithm to operate in object space with high memory locality, which optimizes the usage of RAM caching mechanisms. The warp being performed in 2D space by generating the final image from the intermediate image, decreases the computational complexity considerably, compared to a 3D operation.</p><p>Lacroute's shear-warp thesis <ref type="bibr" target="#b6">[7]</ref> adds some ideas to further increase rendering speed. Both the volume data and the intermediate image data are run-length encoded (RLE) to minimize the number of memory accesses, to save storage space, and to further increase memory locality. The RLE encoded volume data are stored in memory three times, once for each principal coordinate axis. Shading is performed by precomputing a normal vector for each volume element (voxel) and assigning colors using a look-up table. A fast classification can be done by using an octree based algorithm instead of RLE encoding.</p><p>This paper introduces the first application of the perspective shear-warp algorithm in a VE. The mathematical foundation of the factorization is proved and an implementation is presented. The implementation features some developments which were necessary for the algorithm to be used in a VE, such as a clipping plane, adjustable rendering quality, usage of texturing hardware for the warp, and limited concurrent display of polygons. The implementation was integrated into the VIRVO system <ref type="bibr" target="#b12">[13]</ref>, which allows its direct comparison to texture based algorithms. VIRVO provides both a system independent Java GUI for work on the desktop and a plugin for COVER, which is the virtual reality rendering subsystem of the visualization software COVISE <ref type="bibr" target="#b11">[12]</ref>. The virtual environment development was done in the CUBE, the University of Stuttgart's 4-sided CAVE-like device, located at the High Performance Com-puting Center (HLRS).</p><p>In section 2, we describe the mathematical background of the shear-warp algorithm. Section 3 addresses specific implementation requirements for the algorithm when used in VEs. Section 4 provides performance numbers and a comparison of the shear-warp algorithm to texture hardware based techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">THE PERSPECTIVE SHEAR-WARP</head><p>In this section, the factorization for the perspective viewing transformation is reviewed in brief. It basically follows Lacroute's derivation <ref type="bibr" target="#b6">[7]</ref>. Furthermore, the permutation of projection and warp is proved. Finally, warp performance of the parallel and the perspective algorithm is compared.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Conventions</head><p>Lacroute uses four different coordinate systems in his derivation. We think that for an easier understanding of the algorithm, six coordinate systems are to be distinguished. These are listed in table 1, which also assigns a unique single character identifier to each of them. Additionally, the coordinate systems are illustrated in figure 1. In the following, transition matrices between coordinate systems carry the names of the corresponding source and destination coordinate systems, e.g., the transition from coordinate system o to w would be named M ow . The inverse matrix (M ow ) −1 would be M wo . Vector elements are named x, y, z, w.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Prerequisites</head><p>The goal of the factorization is to obtain the shear matrix M oi and the warp matrix M iv so that the viewing matrix is:</p><formula xml:id="formula_0">M ov = M iv * M oi</formula><p>The camera parameters define the projection from world coordinates to viewport space M wv , so the transformation from object space to world coordinates is:</p><formula xml:id="formula_1">M ow = M vw * M ov</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Factorization</head><p>This section briefly explains the required computation steps for the factorization of the perspective viewing matrix.</p><p>First of all, the object space eye position e o has to be found: </p><formula xml:id="formula_2">e o = M wo *    0 0 −1 0   <label>(1)</label></formula><p>Then the slice order and the main principal viewing axis can be determined. The main principal viewing axis determines the permutation matrix M os , which is needed for the adaptation of the coordinate system to the three principal viewing axis aligned data sets. Slice order and permutation matrix allow the compositing step to always process the slices front-to-back with memory-aligned voxel data.</p><p>The standard object space eye position is:</p><formula xml:id="formula_3">e s = M os * e o</formula><p>Now we can compute the shear to deformed space:</p><formula xml:id="formula_4">M sd =      1 0 − e s x e s z 0 0 1 − e s y e s z 0 0 0 1 0 0 0 − e s w e s z 1     </formula><p>The sheared object is scaled to the size of the intermediate image by the scaling matrix M scale . The scaling factor depends on the object-and voxel-space volume dimensions, and on the slice order. Section 3.1 will show how to modify this matrix to control compositing speed.</p><p>The deformed and scaled object is projected to the intermediate image by:</p><formula xml:id="formula_5">M di =    1 0 0 width 2 0 1 0 height 2 0 0 0 0 0 0 0 1   </formula><p>W idth and height are the dimensions of the intermediate image in pixels. The object is always projected to the middle of the intermediate image. The size of the image is set large enough to suit a reasonable viewing range. If this range is exceeded, the scaling matrix is adjusted so that the object fits.</p><p>The above adds up to the overall shear matrix:</p><formula xml:id="formula_6">M oi = M di * M scale * M sd * M os</formula><p>The warp matrix follows from the goal of M ov = M iv * M oi , incorporating the above equations or their inverses, respectively:</p><formula xml:id="formula_7">M iv = M wv * M ow * M so * M ds * (M scale ) −1 * M id</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Permutation Of Projection And Warp</head><p>Although the permutation of the projection and the warp step is a basic premise for the perspective projection shear-warp algorithm, it has not been proved before. Our proof computes the two viewing matrices and then compares their components.</p><p>Let P be the projection matrix:</p><formula xml:id="formula_8">P =    1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1   </formula><p>Assume W is a general warp matrix:</p><formula xml:id="formula_9">W =   </formula><p>w00 w01 w02 w03 w10 w11 w12 w13 w20 w21 w22 w23 w30 w31 w32 w33</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>  </head><p>S is the shear matrix: The viewing matrix is:</p><formula xml:id="formula_10">S =    1 0 ex,z 0 0 1 ey,z 0 0 0 1 0 0 0 ew,z 1   </formula><formula xml:id="formula_11">M ov = P * W * S<label>(2)</label></formula><p>For the shear-warp algorithm, the following matrix is used as the viewing matrix, with the projection applied before the warp:</p><formula xml:id="formula_12">V = W * P * S</formula><p>Comparing the substantial elements of the matrices M ov and V results in potential differences only in the first and second row of the third column:</p><p>M ov 02 = w00 * ex,z + w01 * ey,z + w02 + w03 * ew,z M ov 12 = w10 * ex,z + w11 * ey,z + w12 + w13 * ew,z and V02 = w00 * ex,z + w01 * ey,z + w03 * ew,z V12 = w10 * ex,z + w11 * ey,z + w13 * ew,z</p><p>For leading to identical results, it is sufficient that</p><formula xml:id="formula_13">w02 = 0 (3) w12 = 0<label>(4)</label></formula><p>where from <ref type="formula" target="#formula_11">2</ref>:  <ref type="formula">3</ref>and <ref type="bibr" target="#b3">(4)</ref>. Therefore, the projection and the warp matrices can be permuted.</p><formula xml:id="formula_14">w02 = M ov 00 * ex,z + M ov 01 * ey,z + M ov 02 + M ov 03 * ew,z<label>(5</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Warp Complexity Comparison</head><p>Both the perspective and the parallel projection shear-warp algorithms spend most of their time in the compositing and the warp. The slightly greater number of matrix computations for the factorization in the perspective algorithm can be neglected.</p><p>In the case of parallel projection, the warp is an affine operation compared to the perspective projection warp, which is non-affine.</p><p>Let Wpar describe the general parallel projection warp matrix. Constant elements are listed as their values, arc represents variable elements:</p><formula xml:id="formula_15">Wpar = a00 a01 a02 a10 a11 a12 0 0 1</formula><p>Multiplying Wpar by a vector (x, y, 1) T requires 4 multiplications and 4 additions, adding up to 8 floating point operations.</p><p>Wper describes the general perspective projection warp matrix:</p><p>Wper = a00 a01 a02 a10 a11 a12 a20 a21 a22</p><p>In this case a multiplication with a vector (x, y, 1) T requires 6 multiplications, 6 additions, and 2 divisions, which add up to 14 floating point operations.</p><p>From this it follows that the perspective warp takes almost twice as long as the parallel warp on a system which has equal execution times for the mentioned operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ALGORITHMIC ISSUES</head><p>The application of the perspective shear-warp in virtual environments raises several issues which had to be solved. They are addressed in the following sub-sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Compositing</head><p>Keeping the frame rate close to constant is one of the requirements to establish and to sustain immersion in a VE. For the same reasons, it is crucial for the frame rate not to drop below a certain value, which is usually in the range of 5 to 10 frames per second, depending on the application. For the shear-warp algorithm, one way to increase rendering speed is to reduce the sampling rate.</p><p>When using texture hardware accelerated volume rendering techniques, a constant frame rate can be accomplished, e.g., by reducing the number of textures drawn <ref type="bibr" target="#b13">[14]</ref>, which leads to a reduction of the sampling rate in one dimension. Care has to be taken for the opacity correction of the remaining volume slices.</p><p>Using the shear-warp algorithm, the following approaches can be applied to increase rendering speed by a reduced sampling rate:</p><p>• Reduction of the number of slices drawn: In the compositing step, a certain number of slices are skipped, just as in the above described texture based approach. Also, the opacity values need to be corrected, which does not even slow down the rendering process, since the shear-warp algorithm already uses a look-up table for the mapping of RGBA to scalar values. The disadvantage is that the voxels of the skipped slices do not contribute to the final image. Furthermore, stepwise changes in the number of slices drawn are irritating to the user, which was shown in <ref type="bibr" target="#b12">[13]</ref>.</p><p>• Due to its smooth variability in the range of image pixels, we implemented the second solution for runtime frame rate adaption. Using this technique, there are no abrupt changes in image quality which could disturb the effect of immersion. Furthermore, if rendering hardware permits, rendering quality can arbitrarily be increased by enlarging the intermediate image. <ref type="figure" target="#fig_2">Figure 2</ref> shows the effect of different intermediate image sizes on a 128x128x55 engine data set (for data source see section 6). Algorithmically, the adaption was implemented by modifying the parameters of matrix M scale (see section 2.3), thus directly affecting the size of the intermediate image. The fact that also a magnification of the intermediate image is allowed requires the compositing to provide not only footprint based resampling, but also bilinear resampling for the case that there are multiple pixels to be drawn for each voxel in a slice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Warp</head><p>Section 2.5 derived the higher complexity of the perspective warp compared to the parallel warp. Since the warp matrix is not affine anymore in the case of perspective projection, the warp accounts for a more substantial part of the total rendering time, compared to the parallel warp.</p><p>Considering that the warp applies a transformation matrix to 2D data, it can be performed by 2D texturing hardware, just as the parallel projection warp is performed by Pfister's VolumePro board <ref type="bibr" target="#b9">[10]</ref>: The OpenGL model/view matrix is set to the warp matrix, the OpenGL projection matrix is set to the identity matrix. In this case the warp matrix is not inverted, while the software warp uses its inverse to get pixel values from the intermediate image. The texturing hardware can perform the warp very fast, bilinear interpolation is added at no cost, and the final image size practically does not affect rendering speed. Furthermore, only the intermediate image has to be transferred to the graphics hardware, instead of the final image, which usually is the larger one for VE applications. On a typical SGI Onyx2 system the rendering time share of the warp is less than 2% using this method (see section 4), so that the warp time can be neglected when determining overall rendering speed.</p><p>Using texture mapping hardware for the warp does not break with our idea of a software based rendering algorithm. The advantages of the shear-warp algorithm, like easy parallelization and limitation of the volume size to fit to main memory instead of graphics hardware memory, still persist.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Clipping Plane</head><p>For users working with volume rendering, it is nice to have one or more arbitrarily located clipping planes to look inside of objects, if adjusting the opacity transfer function does not suffice. Texturing hardware based volume rendering makes use of the hardware accelerated clipping planes provided by OpenGL.</p><p>Shear-warp based algorithms cannot make use of the OpenGL clipping planes because they composite a 2D image with no depth information. Thus, the clipping planes have to be introduced in the compositing step. Yen et al. <ref type="bibr" target="#b15">[16]</ref> extract thin slabs out of the volume, but the core of their approach can be applied to arbitrarily oriented clipping planes similarly: The compositing loops have to be limited to the intersections of the clipping plane. This technique can be applied similarly to both the parallel and the perspective projection algorithm. For an example see figure 3. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Viewing Angle</head><p>Lacroute describes that if there is more than one principal viewing axis, the volume has to be subdivided into up to six separately rendered pyramidal sub-volumes. This would impose a major performance degradation on the implementation, because several subvolumes would have to be rendered and assembled seamlessly.</p><p>We examined this issue for the special case of a CAVE-like environment. Due to the specific geometry of the setup, all viewing rays deviate less than 90 degrees from the corresponding projection axis (see <ref type="figure" target="#fig_4">figure 4)</ref>. The case of approaching 90 degrees, when image distortion would become a problem, is the case of being very close to a wall. That is not the case in typical VE situations with a tracked presenter surrounded by a non-tracked audience. Coming close to a wall is typically correlated with a viewing direction nearly perpendicular to a wall. As also discussed in the region of interest related literature (e.g., <ref type="bibr" target="#b14">[15]</ref>), the edges of the field of view outside the region of interest can be displayed rather coarsely. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Viewpoint</head><p>In a VE, the user needs to be free in choosing his position to look at the scene, and he can always only see things which are located within the viewing frustum. For the volume location, three cases may occur:</p><p>1. The volume is located entirely in front of the viewer.</p><p>2. The volume is located entirely behind the viewer.</p><p>3. A part of the volume is located in front of and another part is behind the viewer.</p><p>In order to find the appropriate case, a bounding box check needs to be done on the volume boundaries. In the first case, no further action is necessary, because the viewing frustum clipping is performed by the 2D warp. In the second case, the volume simply is not drawn at all. For dealing with the third case, we set a clipping plane directly in front of the user's eye point, at the location of the viewing frustum near plane, with its normal facing to the user. Thus, the user can see the data set from inside.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Concurrent Display Of Polygons</head><p>The current implementation of the perspective projection algorithm provides two techniques to warp the intermediate image to the screen:</p><p>• Computing the final 2D image using a pure software algorithm and pasting it to the viewport.</p><p>• Having the 2D texturing hardware perform the warp.</p><p>The first alternative does not allow for automatic object ordering; the programmer can only choose to draw the final image at a certain point of time during rendering of the scene. Since depth sorting the polygons is usually prohibitive due to their large number, the programmer's only choice is to draw the volume before or after the polygons.</p><p>The second alternative automatically provides a reasonable solution because the warp matrix transforms the intermediate image into 3D space, which corresponds roughly with the correct volume position. Thus, due to the Z buffer, the hardware draws the scene's polygons to the correct depth, relative to the volume. Only for polygons intersecting the volume, the result is not correct. Section 5 mentions an approach to overcome this drawback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>For the measurements of computation times, the following two systems were used:</p><p>• PC: A single processor PC with a 1.4 GHz Pentium 4, running</p><p>Windows 2000, and equipped with a 3Dlabs Wildcat II 5110 graphics board.</p><p>• Onyx2: An SGI Onyx2 with 4 IR2 pipes and 14 R10000/195 MHz processors running IRIX 6.5. The tests used only one processor and were done on the monitor in mono mode.</p><p>In all tests, bilinear interpolation was used. It was rendered in RGB colors, the alpha values were defined by a linearly increasing opacity ramp. <ref type="figure" target="#fig_5">Figure 5</ref> shows the rendering times (compositing and warp) for different intermediate image sizes using the adaptive perspective projection algorithm, which was described in section 3.1. This test was done on the PC with an output image size of 300 2 pixels and a 64x64x27 voxels engine data set. Jumps occur at intermediate image edge lengths of 512 and 1024 pixels because the texturing hardware, which is used for the warp, requires image sizes which are powers of two.  <ref type="table" target="#tab_3">Table 2</ref> shows the ratio between the computation times of the perspective and the parallel projection algorithm. The output window size was 300 2 pixels, and the texture based warp was used. Again, the engine data set was rendered. It can be seen that, in this example, the perspective projection is about 45% slower than the parallel projection.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Rendering Time</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Perspective Vs. Parallel Projection</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Compositing Vs. Warp</head><p>In table 4 the computation time ratio between compositing and warp of the perspective algorithm is shown for both the software based and the texture based warp algorithm. The Brainsmall data set was used (see section 6), the intermediate image size was 1024 2 . The table demonstrates that using texturing hardware the warp only accounts for 2 to 5% of the total rendering time, and that it is independent of the window size. In contrast, the computation time of the software based warp may get into the range of compositing time for large output image sizes. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Application To An Immersive VE</head><p>Our immersive VE, the CUBE (see <ref type="figure" target="#fig_6">figure 6</ref>) at the University of Stuttgart, is driven by the above mentioned Onyx2. Our parallelized implementation of the algorithm renders the 64x64x27 voxels engine data set at about 10 frames per second.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSIONS AND FUTURE WORK</head><p>We have presented the application of the perspective projection shear-warp algorithm to virtual environments. We have mathematically proved an important basis for the algorithm, and we have discussed implementation issues. A further improvement of our perspective projection algorithm would first of all mean to implement all of the features described by Lacroute: a look-up table based shading technique, shadows, and a min-max octree. In order to increase rendering speed, the compositing step needs to be parallelized for multi-processor machines.</p><p>An interesting approach to improve stereo rendering speed is given in <ref type="bibr" target="#b4">[5]</ref>, where similarities are utilized to render the stereo images. This could be adapted to the perspective projection shearwarp algorithm.</p><p>An important development would be to integrate the shear-warp algorithm with polygon-based techniques. In order to achieve a correct concurrent display for opaque polygons, the polygons would have to be rendered first. Then an inversely warped Z buffer could be used to limit the viewing rays in the shear-warp's compositing step.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Coordinate systems illustrated.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Intermediate image size: 2000 2 (left) and 250 2 (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Engine data set: complete (left) and clipped (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Multiple principal viewing axes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Rendering speed relative to intermediate image size.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Shear-warp rendering in the CUBE.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell cols="2">Coordinate systems.</cell></row><row><cell cols="2">o object space</cell><cell>actual coordinate system of the</cell></row><row><cell></cell><cell></cell><cell>volume data set</cell></row><row><cell cols="2">s standard object</cell><cell>coordinate system after permu-</cell></row><row><cell></cell><cell>space</cell><cell>tation of object space coordi-</cell></row><row><cell></cell><cell></cell><cell>nate axes</cell></row><row><cell cols="2">d deformed space</cell><cell>3D coordinates after shear</cell></row><row><cell>i</cell><cell>intermediate image</cell><cell>2D coordinates within interme-</cell></row><row><cell></cell><cell>space</cell><cell>diate image</cell></row><row><cell cols="2">w world coordinate</cell><cell>3D world coordinates</cell></row><row><cell></cell><cell>space</cell><cell></cell></row><row><cell cols="2">v viewport space</cell><cell>2D output window coordinates</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :Software Vs. Texture Based Warp</head><label>2</label><figDesc>Perspective vs. parallel projection. table 3 the computation times of the two warp implementations for the perspective algorithm are given for different output image sizes and a 1024 2 intermediate image. On both systems, the software warp is faster than the texture based warp for small images due to texturing hardware overhead.</figDesc><table><row><cell>PC</cell><cell>Onyx2</cell></row><row><cell>Perspective : parallel projection 1.43</cell><cell>1.46</cell></row><row><cell>4.3 In</cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Software vs. texture based warp.</figDesc><table><row><cell cols="4">Warp type Output image size PC [ms] Onyx2 [ms]</cell></row><row><cell>Software</cell><cell>256 2</cell><cell>20</cell><cell>32</cell></row><row><cell>Texture</cell><cell>256 2</cell><cell>30</cell><cell>68</cell></row><row><cell>Software</cell><cell>512 2</cell><cell>60</cell><cell>108</cell></row><row><cell>Texture</cell><cell>512 2</cell><cell>30</cell><cell>68</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 4 :</head><label>4</label><figDesc>Compositing vs. warp.</figDesc><table><row><cell cols="2">Warp type Output image size</cell><cell>PC</cell><cell>Onyx2</cell></row><row><cell>Software</cell><cell>256 2</cell><cell>92.1</cell><cell>9.71</cell></row><row><cell>Texture</cell><cell>256 2</cell><cell>17.5</cell><cell>50.1</cell></row><row><cell>Software</cell><cell>512 2</cell><cell>36.8</cell><cell>2.40</cell></row><row><cell>Texture</cell><cell>512 2</cell><cell>17.5</cell><cell>50.1</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ACKNOWLEDGMENTS</head><p>This work has been supported by the Deutsche Forschungsgemeinschaft within the SFB 382. The integration of the shearwarp algorithm into COVER was developed in collaboration with Uwe Wössner of the HLRS. The engine data set can be found at http://wwwvis.informatik.uni-stuttgart.de/˜engel/index3.html. The Stanford Brainsmall data set is part of the VolPack volume rendering library at http://www-graphics.stanford.edu/software/volpack/.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Akeley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;93 Proceedings)</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="109" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Forward Image Warping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dachille</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99 Proceedings</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="89" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Surround-Screen Projection-Based Virtual Reality: The Design and Implementation of the CAVE</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cruz-Neira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Sandin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Defanti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics(SIGGRAPH &apos;93 Proceedings)</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="135" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Fast Volume Rotation using Binary Shear-Warp Factorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Csebfalvi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics Data Visualization &apos;99 Proceedings</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="145" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast Stereo Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;96 Proceedings</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Vizard -Visualization Accelerator for Real-Time Display</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Knittel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIG-GRAPH/Eurographics Workshop on Graphics Hardware</title>
		<meeting>SIG-GRAPH/Eurographics Workshop on Graphics Hardware</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="139" to="147" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Fast Volume Rendering Using a Shear-Warp Factorization of the Viewing Transformation. Doctoral Dissertation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Real-Time Volume Rendering on Shared Memory Multiprocessors Using the Shear-Warp Factorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Parallel Rendering Symposium &apos;95 Proceedings</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="15" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Fast Volume Rendering Using a Shear-Warp Factorization of the Viewing Transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;94 Proceedings)</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="451" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The VolumePro Real-Time Ray-Casting System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hardenbergh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Knittel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Seiler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;99 Proceedings)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Cube-4 -A Scalable Architecture for Real-Time Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM/IEEE Symposium on Volume Visualization &apos;96</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="47" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">COVISE in the CUBE: An Environment for Analyzing Large and Complex Simulation Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rantzau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rainer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Woessner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd Workshop on Immersive Projection Technology (IPTW)</title>
		<meeting>2nd Workshop on Immersive Projection Technology (IPTW)</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Volume Rendering in a Virtual Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schulze-Doebold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Woessner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Walz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th IPTW and Eurographics Virtual Environments</title>
		<meeting>5th IPTW and Eurographics Virtual Environments</meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Level-Of-Detail Volume Rendering via 3D Textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zimmermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Real-time Exploration of Regular Volume Data by Adaptive Reconstruction of Iso-Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="100" to="111" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Fast Sliding Thin Slab Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">Y</forename><surname>Yen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Napel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Rubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Volume Visualization &apos;96 Proceedings</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
