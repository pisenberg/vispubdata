<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Accelerated Volume Ray-Casting using Texture Mapping</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rüdiger</forename><surname>Westermann</surname></persName>
							<email>westermann@sc.rwth-aachen.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Sevenich</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Scientific Visualization &amp; Imaging Group</orgName>
								<orgName type="institution">University of Technology</orgName>
								<address>
									<settlement>Aachen</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Technology</orgName>
								<address>
									<addrLine>Seffenter Weg 23</addrLine>
									<postCode>52056</postCode>
									<settlement>Aachen, Aachen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Accelerated Volume Ray-Casting using Texture Mapping</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism -color</term>
					<term>shading and texture; I.3.8 [Computer Graphics]: Applications Volume Rendering</term>
					<term>Ray-Casting</term>
					<term>Texture Mapping</term>
					<term>Visualization</term>
					<term>Graphics Hardware</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Acceleration techniques for volume ray-casting are primarily based on pre-computed data structures that allow one to efficiently traverse empty or homogeneous regions. In order to display volume data that successively undergoes color lookups, however, the data structures have to be rebuilt continuously. In this paper we propose a technique that circumvents this drawback using hardware accelerated texture mapping. In a first rendering pass we employ graphics hardware to interactively determine for each ray where the material is hit. In a second pass ray-casting is performed, but ray traversal starts right in front of the previously determined regions. The algorithm enables interactive classification and it considerably accelerates the view dependent display of selected materials and surfaces from volume data. In contrast to other techniques that are solely based on texture mapping our approach requires less memory and accurately performs the composition of material contributions along the ray.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction and related work</head><p>The efficient generation of a visual representation of volumetric data sets has been studied extensively during the last decades. Once the fundamental equation describing the physics of light transport in participating media was identified as the key to volume rendering many practical solutions based on simplified models neglecting scattering and frequency effects or assuming homogeneous material were developed <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b30">31]</ref>. However, due to the huge number of volume elements to be processed and the numerical complexity of the operations to be performed interactive volume rendering is still a challenge to the computer graphics community.</p><p>Considerable effort has been spent on the development of acceleration techniques for indirect and direct volume rendering, and on the design and exploitation of dedicated hardware to achieve interactive frame rates. The majority of optimization strategies for direct volume rendering takes advantage of pyramidal data structures to directly encode empty or homogeneous regions and to effectively reduce the number of sample points based on some global error metric <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b28">29]</ref>. Alternative techniques rely on fast cell traversal algorithms <ref type="bibr" target="#b10">[11]</ref> and exploit optimized data layout strategies <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b22">23]</ref> as well as auxiliary data structures to spatially localize the relevant features. In particular, the effectiveness of flat pyramids and proximity clouds to skip empty and homogeneous regions were demonstrated in <ref type="bibr" target="#b34">[35,</ref><ref type="bibr" target="#b7">8]</ref>, bounding cells and geometries were used in <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref> to efficiently determine the first appearance of the structures to be displayed along the view rays, and in <ref type="bibr" target="#b15">[16]</ref> the rendering process was accelerated considerably by run-length encoding of empty space.</p><p>Although these approaches differ significantly in terms of the underlying methodology and in the kind of structures they are able to display, they all rely on the classification of features in the data by means of any suitable algorithm to be performed in a pre-processing step. Then the pyramidal or auxiliary representation is built that allows for the efficient assembly of the material contribution along the rays of sight. Among others, popular classification schemes used in volume rendering applications include zero (iso-values) <ref type="bibr" target="#b19">[20]</ref>, first (gradients) <ref type="bibr" target="#b17">[18]</ref> or higher order <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b12">13]</ref> statistics of the scalar field.</p><p>The algorithm proposed in <ref type="bibr" target="#b17">[18]</ref>, for example, assigns color and opacity values to each voxel so as to enhance selected materials and boundary regions around them. The volumetric structures can now be encoded using any appropriate data structure that enables the rendering algorithm to efficiently skip non-classified material. In <ref type="bibr" target="#b26">[27]</ref> the classification process was accompanied by a surface fitting step generating polygonal models that entirely enclose the classified structures. Prior to volume rendering an initial starting point for ray traversal can then be determined by intersecting the geometric representation.</p><p>Pyramidal or intermediate data structures as described, however, impose certain limitations on the volume rendering algorithm. In particular the data structures have to be re-built if the classification is going to be changed. On the other hand, interactive classification based on color lookup tables has been proven to be a very powerful mechanism to explore large-scale volumetric data sets. By means of continuous modifications of the assignment of scalar values to material characteristics arbitrary structures within the data can be enhanced, suppressed or shaded in a particular way. Unfortunately, interactivity can no longer be achieved if auxiliary data structures are used. In general this is due to the computational complexity of the process used to re-build the data structures whenever the classification is changed.</p><p>A potential alternative that overcomes the mentioned drawback is hardware accelerated volume rendering. Just recently, different approaches have been proposed that allow for interactive direct volume rendering by taking advantage of hardware assisted 2D and 3D texture mapping as well as dedicated volume graphics architectures <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>Although impressive frame rates can be achieved, the most serious limitation imposed by texture based techniques is the additional amount of memory necessary to store gradient information if lighting calculations ¢ have to be performed. Furthermore, OpenGL compositing as it is used on current graphics accelerators introduces artifacts due to separate interpolation of color and opacity and it generates less accurate results due to the limited precision of the internal pixel and texture formats. Dedicated volume graphics architectures, on the other hand, are not yet ready to enter the consumer market. This is due to the price that still makes these systems not affordable for the mass market, and due to the fact that an interface to standard graphics APIs like OpenGL is not yet available.</p><p>In this paper we outline a new approach for the direct volume rendering of high-resolution data that enables interactive classification on graphics units suitable for the consumer market. Rather than proposing a particular software or hardware solution we outline a hybrid approach that exploits the rasterization capability of graphics hardware but also takes advantage of CPU performance. The goal of our approach is twofold: to emphasize the impact of affordable state-of-the-art graphics hardware on current volume visualization techniques and to demonstrate how it can be used to accelerate volume ray-casting. In particular we will show that texture based volume rendering can be used to interactively classify scalar volume data by means of texture color tables, and we will demonstrate that the rendered image can be re-used to accelerate volume ray-casting which is implemented in software. Because in our work we are targeting the consumer market we restrict our attention to graphics units that are affordable and let us allow to exploit hardware features through standard APIs like OpenGL. In this respect we decided to implement our algorithm on the nVidia GeForce family GPU, which provides the functionality we need and which supports a set of additional features we are effectively taking advantage of.</p><p>The reminder of this paper is organized as follows. First, we review texture based volume rendering techniques and we demonstrate that 2D textures can be effectively used to interactively classify the sampled scalar field and to accurately resample the result. Next, we present our technique for accelerated volume ray-casting in which hardware supported graphics operations are paramount. We finally discuss implementation details and further improvements. We conclude the paper with a detailed discussion, and we show results and timings of our approach applied to reasonably sized data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Texture based volume rendering</head><p>During the last couple of years volume rendering techniques that exploit hardware support for texture mapping have become a powerful tool to interactively display and thus analyze 3D scalar fields.</p><p>In <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b3">4]</ref> the general idea to interpret volume rendering as the resampling of a discrete 3D texture map on appropriately oriented geometries was first introduced. Using this approach the visual impression conveyed by semi-transparent media can be efficiently simulated on any graphics system supporting 3D texture interpolation and per-pixel blending operations.</p><p>Recently an alternative technique was proposed that solely relies on 2D texture mapping, and which exploits advanced per-fragment operations provided by the nVidia GeForce family GPUs for speedup and lighting effects <ref type="bibr" target="#b24">[25]</ref>. The voxel data is decomposed into three stacks of 2D textures as illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>. For the current view, the object space axis that is most parallel to the viewing axis now determines the appropriate stack to be rendered.</p><p>Although today hardware support for 3D texture mapping is effectively available on a couple of low-cost graphics systems, e.g. Wildcat 4120, ATI Radeon and GeForce3, we will exclusively focus on 2D texture based techniques in this paper. We do so because of two reasons. First, a considerable loss in performance can be noticed when 3D texture mapping is employed. Compared to 2D texture mapping our experiments have shown a decrease in fill rate of up to 60 £ , which is mainly due to the highly irregular memory access pattern that can't be realized as efficient as random 2D texture access. Second, by using 2D texture maps our approach can be run without a considerable decrease in performance on any current graphics board. The design of our algorithm, on the other hand, allows for the integration of any texture based volume rendering technique as long as the view dependent resampling of the scalar field can be guaranteed. At the core of our approach we are independent of a particular texture representation, and thus we can use the algorithm without any modifications if this representation is changed.</p><p>Let us now outline some extensions to 2D texture based volume rendering by which an accurate resampling of the sampled scalar field can be achieved. The technique we propose won't be used to display the volumetric scalar field but to generate an intermediate image of the data in a first rendering pass. From the depth values of each pixel in this image the accurate position in object space of the structures to be displayed can be computed. This information is used further on to accelerate the final rendering pass. The intermediate image thus serves as a 3D stencil which drives the rendering process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">View independent 2D texture resampling</head><p>In contrast to volume ray-casting where the sample distance along the ray is independent of the current view this no longer holds for volume rendering via 2D textures (see <ref type="figure" target="#fig_1">Figure 2</ref>). For a certain pixel the distance between successive samples increases with respect to the angle between the most parallel object space axis and the viewing direction. As a consequence small features in the data might be missed during the texture based rendering pass, which is only performed to appropriately resample the scalar field but not to display the data. Thus it is not sufficient to simply correct the opacity of each slice with respect to varying sample distance, which obviously doesn't give us any additional information about the material distribution between successive sample points.</p><p>View independent sampling intervals can be realized by adding new texture slices appropriately positioned between the original ones as shown in the rightmost image of  In <ref type="bibr" target="#b24">[25]</ref> a technique was proposed to linearly interpolate between two textures in a single rendering pass. At the core of this algorithm multitextures and the nVidia texture combiners were employed to combine texture samples on a per-fragment basis. The results of two independent texturing operations that are performed in two separate texture units can be modulated and finally blended to get the fragments color.</p><p>In our implementation the interpolation factors needed to generate a new slice by linear interpolation between two original textures are issued as separate colors to be used in each texture unit. These colors modulate the multitexture samples before blending is performed. <ref type="figure" target="#fig_3">Figure 3</ref> exemplifies the principal setup and the perfragment operations which are employed. Using this approach a constant sampling distance can be ensured for parallel projections and arbitrary views. For perspective projections, however, the sampling distance increases towards the outer regions of the field of view. On the other hand, because the interslice distance can be decreased arbitrarily, it can be chosen so that an upper bound for the sampling intervals as they occur under the current view is never going to be exceeded. As a matter of fact the proposed technique is also suitable for the resampling of scalar fields that are displayed under perspective projections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Material culling</head><p>One of the key features provided by many graphics architectures are texture color tables that allow for the direct manipulation of transfer functions used to perform the mapping from scalar values to RGB values. Texture samples might be mapped to color and opacity values before or after texture interpolation. On the nVidia chip, for example, texture elements are first looked up in the table before they are going to be interpolated on a per-fragment basis during the texture operation.</p><p>By means of color tables meaningful mappings of material values to visual quantities can be found interactively by the user without that the texture has to be reloaded. Arbitrary assignments can be realized which allow one to color structures differently or to discard particular ranges of values. Although this classification scheme only takes into account the distribution of the scalar values and the visual representation of the displayed structures it has been proven to be a very effective and efficient mechanism to interactively explore large volumetric data sets. In particular this holds if direct visual feedback to the color table modification is possible, e.g. in volume rendering via texture maps and on dedicated volume graphics architectures.</p><p>As proposed in <ref type="bibr" target="#b29">[30]</ref> texture color tables can effectively be utilized in texture based volume rendering to cull materials which should not be visualized. Therefore the color lookup is performed in such a way as to make these materials transparent, i.e. scalar values outside the selected range get assigned an alpha component equal to zero during the mapping. Now the generated fragments can be discarded by means of the OpenGL alpha test before they are going to be drawn into the color buffer. By enabling the appropriate comparison function only non-transparent fragments with an alpha value greater than zero will be accepted and rendered.</p><p>In <ref type="figure">Figure 4</ref> some examples demonstrate the effects that can be achieved. The original data set was rendered using different texture color tables, which were properly initialized in order to cull certain ranges of values. <ref type="figure">Figure 4</ref>: The data set on the left was rendered using different texture color tables.</p><p>In the next section we will demonstrate how to use the intermediate image generated via 2D texture maps to accelerate volume raycasting which we implemented in software. Although our hybrid approach cannot be as efficient as the texture based volume rendering approach it introduces two major improvements which are of particular interest in practical applications. First, considerably less memory is needed for the rendering of illuminated structures. Second, image quality doesn't suffer from insufficient internal texture and pixel resolution and separate interpolation of color and opacity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Hybrid volume rendering</head><p>In the approach proposed so far we employ hardware supported 2D texture mapping and OpenGL per-fragment operations to interactively classify arbitrary materials by means of texture color tables. Although this approach allows for quite impressive frame rates, the use of textures for direct volume rendering introduces severe drawbacks with regard to memory requirement and image quality.</p><p>Gradient maps as introduced in <ref type="bibr" target="#b29">[30]</ref> for the display of nonpolygonal illuminated iso-surfaces lead to a significant increase in memory usage. In addition to the original data set an RGB texture storing gradient components and sampled scalar values has to be generated. This overhead becomes even worse if 2D textures are employed and for each stack of textures an additional stack of gradient maps has to be created.</p><p>On current low-cost graphics units the internal texture resolution is restricted to 8 bits per voxel. As a consequence scalar data samples are usually quantized and differences between structures showing similar scalar values might be lost. The same argument holds for the internal resolution of the color buffer.</p><p>For the direct rendering of semi-transparent objects separate interpolation of pre-shaded color and opacity samples during the texturing operation introduces color bleeding artifacts as demonstrated in <ref type="bibr" target="#b33">[34]</ref>. Although on our current target architecture this drawback can be circumvented by means of dependent textures <ref type="bibr" target="#b6">[7]</ref>, this implementation requires both an additional texture unit and a texture fetch operation.</p><p>It is still rather cumbersome and often impossible to implement advanced lighting models, i.e. the Phong lighting model, by means of the extended OpenGL functionality available on the nVidia chip set. Quite often texture units have to be wasted for computing approximate solutions although preferably they should be kept free for other tasks. The use of vendor specific functionality like texture shaders, on the other hand, makes the code dependent on the current platform and prohibits portability.</p><p>In order to avoid the mentioned limitations we propose a hybrid volume rendering approach that combines hardware supported texture mapping and volume ray-casting. In the outlined scenario texture rendering is only used to determine the classified regions. From this point on ray-casting is performed in software on the original data set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Space leaping</head><p>We proceed our description with a short summary of some of the core features of OpenGL that will be exploited to skip those regions that have been culled by means of texture color tables as proposed.</p><p>Upon passing the alpha test but before a fragment is going to be rendered into the color buffer the OpenGL depth test is applied. The depth buffer usually stores for each pixel the distance from the viewpoint to the closest object covering that pixel. The distance of incoming fragments is first compared to the current depth value, and based on the outcome of the comparison the fragment is discarded or rendered.</p><p>Since in volume rendering we are not only interested in those structures that are closest to the viewpoint the data is usually displayed with disabled depth test or in back-to-front order. Using the latter approach the depth buffer keeps track of the distance to the textured slice that was rendered last.</p><p>However, because the alpha test already discards fragments before the depth test is applied, values in the depth buffer now correspond to the closest structures that got assigned an opacity value greater than zero during texture lookup.</p><p>Hence for each pixel the object space coordinate of the closest structure can be obtained by retrieving the depth value and by transforming the screen space coordinate back into world space. From world space coordinates we can easily map into local object coordinates from which the parametric ray equation in object coordinates can be computed as well. In particular the following transformation is applied to each ! " ! " #  Finally, after screen space coordinates have been transformed, for each ray we obtain the position on that ray where nontransparent media is hit for the first time. All material along the ray that has been culled using the alpha test can be skipped effectively by letting the ray start at that position.</p><note type="other">$ &amp;</note><p>The proposed technique can also be utilized to determine up to which position along each ray the traversal has to be performed. So far, if a ray enters material exhibiting low opacity and early-ray termination cannot be applied, this ray is always going to be traversed until it leaves the volume. However, by just slightly modifying the current procedure the position of the last sample point along the ray that is inside non-transparent material can be determined as well. Therefore the texture stack is rendered again in front-to-back order but the depth comparison function is reversed. Now those fragments farest away from the view point are retained and stored in the depth buffer. Although in this case the object has to be rendered twice via 2D textures and also the depth buffer has to be read for a second time, we can effectively save a considerable amount of time because the number of samples along each ray that need to be evaluated is significantly reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Ray traversal</head><p>Once the first hit along each ray has been determined ray traversal starts right in front of that position. For each ray we also compute the distance from that position to the entry point of that ray into the volume. The first sample is then positioned at location f P § p q c $ c $ %</p><p>, where c specifies the unique sampling distance used during ray-traversal (see <ref type="figure" target="#fig_5">Figure 5</ref>) and is the normalized ray direction. In this way we considerably reduce sampling patterns that arise if the first sample position is always located in one of the axis-aligned slices. For each sample along the ray the material value is reconstructed from the values at adjacent grid points by tri-linear interpolation. At this point it is important to employ the same procedure for the interpolation of alpha values as it is performed by the graphics hardware during texture lookup. As a matter of fact we interpolate preshaded scalar values during ray-casting in the current implementation. We also approximate the gradient with a tri-linear interpolation between discrete grid points. Therefore central differences are computed first to approximate the gradients at each grid point. The entire procedure is performed at each sample along the ray, which obviously increases the numerical complexity of our algorithm but allows us to avoid the storage of the gradient map.</p><p>To prevent color interpolation artifacts, opacity-weighted color samples are composited along the ray in front-to-back order as follows:</p><formula xml:id="formula_0">t " d f e S g y h s i k j ! l F m F P n p o r q s A t &amp; u v x w y q j P l F m p P n i z t S { D e | g h h i z j P l F m p P n p o i k s A t &amp; u | v v w } i k j ! l F m F P n</formula><p>According to the notation used in <ref type="bibr" target="#b33">[34]</ref>, q specifies opacityweighted colors that are generated by first multiplying sample colors with their opacities before interpolation is performed. Ray traversal finally stops once an opacity threshold is reached and further contributions along the ray become negligible.</p><p>We should mention here that in general the step size used during ray traversal doesn't have to be equal to the distance between consecutive texture slices rendered in the first pass. Whereas the latter one determines the accuracy by which the first hit with nontransparent material will be detected, according to the sampling theorem the former one is chosen to be equal to half of the voxel size in our examples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>A pleasant feature of the presented approach is that the intermediate image generated by the texture based rendering pass already provides an overall impression of the volumetric object. We take this observation into account in that we exclusively display the result of the first rendering pass during motion and whenever the texture color table is modified. In both situations the ray-casting module is simply skipped (see <ref type="figure">Figure 6</ref>), which allows for interactive classification and navigation before the final rendering pass is initiated. <ref type="figure">Figure 6</ref>: Both images show the same data set; once as it is displayed during updates and once as it is finally rendered.</p><p>The appropriate choice of the transfer function has a very particular importance in our approach. In the first rendering pass the transfer function is used for interactive classification that allows one to efficiently discard particular regions in the data. On the other hand, the transfer function is also used to shade the material, but now it is applied during ray-casting. For example, steep edges in the transfer function yield opaque, MC-like iso-surfaces, whereas slowly rising transitions result in smooth silhouettes exhibiting a certain thickness. As a consequence we need two separate transfer functions in general: one that only affects the mapping of 8 bit texture values to alpha values during texture lookup, and one that specifies the final mapping of the original scalar values to color values during ray-casting. For example, if the original data is represented with more than 8 Bits per voxel we can only perform a less accurate classification on the quantized data. The accurate result is then generated in the second pass where we can deal with arbitrary resolutions. In all our current examples, however, the data was given at 8 bits per sample and the same transfer function was used for culling and shading.</p><p>All our results were computed on a Pentium III processor running at 733 MHz and a GeForce2 graphics unit with 32 MB local memory. Our experiments were run on three data sets: (a) a human head CT-scan ( g q q t</p><p>), (b) the well known engine block (~t q i</p><p>x g q q ) and (c) an aneurysm MRI-scan (~t q i</p><p>). Below we will give exact timings for the relevant parts of our algorithm. In particular we measured the time required to render the data sets via 2D textures (TexRnd), to read the depth values necessary to compute screen space coordinates for each pixel (ZbOps) and to perform ray-casting (RayCast) until an opacity cutoff of 95 was reached. In the first column of <ref type="table" target="#tab_1">Table 1</ref> we also give the average number of samples per ray ( Smp) for which the interpolation of color and/or gradients between discrete grid points was performed. In all our experiments the image size was 512x512. Each data set was rendered using two different rendering modes. In the first image column a transfer function was issued so as to discard all fragments with an alpha value less than a specific threshold. Each ray was then traversed until it hit a cell in which the data range was containing the threshold. Only then the intersection of the ray with the corresponding iso-surface passing through that cell was calculated as proposed in <ref type="bibr" target="#b22">[23]</ref>. The sample was finally shaded using the approximated gradient at the intersection point and ray traversal was stopped.</p><p>Smooth transitions from transparent to opaque material are shown in the second image column. In all images shading was performed and performance speed-up was mainly achieved due to early-ray termination. In the last row the benefits the proposed algorithm can be clearly recognized. Although the data set includes rather fuzzy structures which would make the construction of a pyramidal data structure a rather cumbersome task, the complexity of the vascular structures doesn't affect the performance of our approach. Even if the vessels had low transparency and early ray termination could not be applied, for most of the rays only a small number of samples would have to be computed because the method described in section 3.1 would give us the exact position of the first and the last intersection point with any of the tube like structures.</p><p>Because the time needed to access the depth buffer and to read the depth values into main memory only depends on the image resolution it remains constant throughout all of our experiments. Although non-optimized depth buffer access on our current target architecture results in rather poor performance we can still achieve multiple frames per second for the first rendering pass via 2D textures. In particular this allows for interactive classification by means of texture color tables without the need to re-built any auxiliary data structures. This is a considerable improvement over other techniques, for example the one proposed in <ref type="bibr" target="#b27">[28]</ref>, where it took roughly 10 seconds to prepare the data structure necessary to render a t q t</p><p>x q P data set. Concerning the performance of our ray-casting module we should mention here that gradients are always approximated onthe-fly by central differences and tri-linear interpolation. Opacityweighted color samples are computed from pre-shaded texture samples, but no further optimization strategies are used. The time required to transform screen space coordinates into local object coordinates is included in RayCast.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper we have emphasized a novel approach to accelerate the display of 3D scalar fields sampled on Cartesian grids. The major contribution here is that we effectively take advantage of hardware assisted volume rendering to generate an intermediate image that is used as a basis for volume ray-casting to be performed in software. Interpreting the intermediate image allows us to immediately determine those positions where the rays of sight enter non-transparent material for the first time. In this way empty space between the observer and the material can be skipped efficiently.</p><p>In particular we have shown that our approach enables interactive classification via texture color tables without the need to modify or to re-built any auxiliary data structures. This makes the method superior to others in case that the classification is going to be changed frequently.</p><p>However, even if no such changes occur and auxiliary data structures could be employed to accelerate the ray-casting procedure we still expect our method to be at least as efficient as any alternative as long as only a few samples per ray have to be computed until early ray termination applies. This is due to the fact that the overhead that is introduced by our method for determining the first intersection points is extremely small and can hardly be beaten by any other approach. On the other hand, if expansive homogeneous structures with high transparency are contained in the data our method fails and a pyramidal approach will give much better results.</p><p>In contrast to other techniques we can select any desired accuracy by which the data is going to be resampled and consequently by which the first hits are going to be determined without that the internal texture representation has to be changed. But even more importantly, the complexity of the first rendering pass does not depend on the complexity of the structures contained in the data. Thus rendering time and memory requirement remain constant independent of the current classification.</p><p>Our method is easy to implement and can be put on top of any texture based volume rendering technique without that the core implementation needs to be modified. However, a drawback compared to common acceleration techniques is the additional amount of memory we need to generate the texture representation. On the other hand, because we entirely avoid the use of gradient maps considerably less texture memory is needed in contrast to texture based volume rendering techniques. Furthermore we can take advantage of all the benefits that are inherent to a software based ray-caster, i.e. opacity-weighted color interpolation, arbitrary lighting models, early-ray termination and accurate data resampling.</p><p>We are currently trying to further improve our approach with respect to the following issues. On the GeForce3 we will take advantage of hardware accelerated 3D texture mapping and we will investigate the speed-up due to optimized memory transfer of compressed depth values. In addition we will accelerate the ray-casting module in two stages. First, we will exploit memory coherences by re-organizing the data into smaller tiles that entirely fit into cache lines (see <ref type="bibr" target="#b22">[23]</ref>). Second, we will use the SSE instruction set to optimize numerical computations that have to be performed during ray traversal, i.e. tri-linear interpolation. Overall we expect an increase in performance of about a factor of 3 to 4 by means of these extensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Acknowledgement</head><p>In particular, the authors would like to thank C. Reszk-Salama for providing the volume rendering tool in which our approach was integrated, and for the generous use of <ref type="figure" target="#fig_3">Figure 3</ref> and the Teddybear data set. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Three different stacks of textures need to be generated in order to perform volume rendering via 2D textures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>For each new view ¤ the offset ¥ § ¦ is computed and new slices at positions© ¥ § ¦ are generated and rendered.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>View dependent and view independent data resampling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Texture combiner setup for 2D texture interpolation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>to half the length of the volume and half the length of a voxel in the e</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>This image illustrates the shift towards the viewpoint of the first sample point.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Volume rendering of example data sets using using different transfer functions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Vspecifies the viewport transformation and W captures the final transformation that appropriately maps world space coordinates to local object coordinates. Here we assume that the object is axis aligned and centered around the origin.</figDesc><table><row><cell>%</cell><cell cols="4">screen space coordinate:</cell></row><row><cell cols="2">' ( 0 2 4 3</cell><cell>' (</cell><cell>0</cell><cell>2 4 3</cell></row><row><cell cols="2">) # 1 5 7 6 9 8 A @ C B D % F E H G P I</cell><cell>)</cell><cell># Q</cell><cell>5</cell></row><row><cell cols="5">In this equation coordinates, T R 0 S #  § and are the projection matrix and the modelview 1 specify homogeneous world space % U matrix, respectively,</cell></row><row><cell cols="2">V are queried using OpenGL calls, and</cell><cell cols="3">T X Y U and is initialized as W</cell></row><row><cell cols="5">a b c $ d f e h g i d i % " p q c $ d r r c $ d f e s g r c $ u v e s g t u t % " p q c q u r c $ u v e s g r r c $ w e h g t w ! % S p q c $ w x c $ w y e s g r r r Q t w t u t d $</cell></row><row><cell>The components of</cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 : Timings (seconds) for different parts of our algorithm. The corresponding images are shown in the color plate below (see Figure 7).</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell cols="3">Smp TexRnd ZbOps</cell><cell>RayCast</cell><cell>Total</cell></row><row><cell>(a)</cell><cell>1/6.5</cell><cell>0.05</cell><cell>0.11</cell><cell cols="2">0.67/3.90 0.83/4.06</cell></row><row><cell>(b)</cell><cell>1/10.2</cell><cell>0.08</cell><cell>0.11</cell><cell cols="2">0.52/5.41 0.71/5.60</cell></row><row><cell>(c)</cell><cell>1/7.2</cell><cell>0.26</cell><cell>0.11</cell><cell cols="2">0.47/3.21 0.84/3.58</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Light reflection functions for simulation of clouds and dusty surfaces. Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &apos;82</title>
		<meeting>SIGGRAPH &apos;82</meeting>
		<imprint>
			<date type="published" when="1982-07" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="21" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Accelerated volume rendering and tomographic reconstruction using texture mapping hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Cam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ACM Symposium on Volume Visualization 94</title>
		<meeting>ACM Symposium on Volume Visualization 94</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Application-controlled demand paging for out-of-core visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ellsworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="235" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Accelerating volume reconstruction with 3d texture hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Cullip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Neumann</surname></persName>
		</author>
		<idno>TR93-027</idno>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
		<respStmt>
			<orgName>University of North Carolina</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast algorithms for volume ray tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Danskin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Workshop on Volume Visualization &apos;92</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="65" to="74" />
			<date type="published" when="1988-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">High-quality pre-integrated volume rendering using hardware-accelerated pixel shading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics/Siggraph Workshop on Graphics Hardware</title>
		<meeting>Eurographics/Siggraph Workshop on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Accelerated volume rendering using homogeneous region encoding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="191" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A new method to approximate the volume rendering equation using wavelets and piecewise polynomials</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lippert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dreger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Koch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Virim: A massively parallel processor for real-time volume visualization in medicine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Günther</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Poliwoda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Reinhart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hesser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Männer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename><surname>Meinzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Baur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics/Siggraph Workshop on Graphics Hardware</title>
		<meeting>Eurographics/Siggraph Workshop on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="705" to="710" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A fast voxel traversal algorithm for ray tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Amanatides</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Woo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROGRAPHICS &apos;87</title>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page" from="202" to="210" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ray tracing volume densities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Von Herzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1984-07" />
			<biblScope unit="volume">84</biblScope>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Semi-automatic generation of transfer functions for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlemann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Durkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ACM Symposium on Volume Visualization &apos;98</title>
		<meeting>ACM Symposium on Volume Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="79" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Vizard-visualization accelerator for realtime display</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Knittel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics/Siggraph Workshop on Graphics Hardware</title>
		<meeting>Eurographics/Siggraph Workshop on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="139" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The application of transport theory to the visualization of 3-d scalar data fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Krüger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;90</title>
		<meeting>IEEE Visualization &apos;90</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="273" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Fast volume rendering using a shear-warp factorization of the viewing transform. Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &apos;94</title>
		<meeting>SIGGRAPH &apos;94</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="451" to="458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hierarchical splatting: A progressive refinement algorithm for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &apos;93</title>
		<meeting>SIGGRAPH &apos;93</meeting>
		<imprint>
			<date type="published" when="1991-07" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="285" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Efficient ray tracing of volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="245" to="261" />
			<date type="published" when="1990-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 87 Proceedings)</title>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Area and volume coherence for efficient visualization of 3d scalar functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ACM Workshop on Volume Visualization 91</title>
		<meeting>ACM Workshop on Volume Visualization 91</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">VIZARD II, A PCI-Card for Real-Time Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meißner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Kanus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Straßer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics/Siggraph Workshop on Graphics Hardware</title>
		<meeting>Eurographics/Siggraph Workshop on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Interactive ray tracing for isosurface rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="233" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The volume-pro realtime ray-casting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hardenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Knittel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Seiler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 99 Proceedings)</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Interactive volume rendering on standard pc graphics hardware using multi-textures and multi-stage rasterization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rezk-Salama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ertl</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurographics/Siggraph Workshop on Graphics Hardware</title>
		<meeting>Eurographics/Siggraph Workshop on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="109" to="119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A rendering algorithm for visualizing 3d scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Sabella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="51" to="58" />
			<date type="published" when="1988-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Hardware acceleration for volumetric ray tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Sobierajski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Avila</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;95</title>
		<meeting>IEEE Visualization &apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">High-performance presence-accelerated ray casting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bryson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;99</title>
		<meeting>IEEE Visualization &apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="379" to="389" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A multiscale approach to integrated volume segmentation and rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computers Graphics Forum (EUROGRAPHICS &apos;97)</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="96" to="107" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Efficiently using graphics hardware in volume rendering applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 98 Proceedings)</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="291" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Footprint evaluation for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="367" to="376" />
			<date type="published" when="1990-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A volume density optical model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ACM Workshop on Volume Visualization 92</title>
		<meeting>ACM Workshop on Volume Visualization 92</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="61" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Direct volume rendering via 3d textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Geldern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<idno>UCSC-CRL-94-19</idno>
		<imprint>
			<date type="published" when="1994" />
			<pubPlace>Santa Cruz</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of California</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Opacity-weighted color interpolation for volume sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wittenbrink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Malzbender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Symposium on Volume Visualization &apos;98</title>
		<meeting>ACM Symposium on Volume Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="135" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Shell accelerated volume rendering of transparent regions. The Visual Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="53" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Accelerated Volume Animation by Space-Leaping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;93</title>
		<meeting>IEEE Visualization &apos;93</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="62" to="69" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
