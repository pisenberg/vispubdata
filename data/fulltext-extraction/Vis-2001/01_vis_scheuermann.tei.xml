<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A tetrahedra-based stream surface algorithm</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Bobach</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karim</forename><surname>Mahrous</surname></persName>
							<email>¥mahrous@cs.ucdavis.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
							<email>hamann@cs.ucdavis.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
							<email>kijoy¦@cs.ucdavis.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Kollmann</surname></persName>
							<email>wkollmann¦@ucdavis.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">University of Kaiserlautern</orgName>
								<address>
									<postBox>PO Box 30 49</postBox>
									<postCode>67653</postCode>
									<settlement>Kaiserslautern</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Center for Image Processing and Integrated Computing (CIPIC)</orgName>
								<orgName type="department" key="dep2">partment of Computer Science</orgName>
								<orgName type="department" key="dep3">Davis</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<addrLine>De</addrLine>
									<postCode>95616</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">Department of Mechanical and Aeronautical Engineering</orgName>
								<orgName type="department" key="dep2">Davis</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95616</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<addrLine>San Diego</addrLine>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A tetrahedra-based stream surface algorithm</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>vector field visualization</term>
					<term>flow visualization</term>
					<term>tetrahedral grid</term>
					<term>unstructured grid</term>
					<term>flow surface</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper presents a new algorithm for the calculation of stream surfaces for tetrahedral grids. It propagates the surface through the tetrahedra, one at a time, calculating the intersections with the tetrahedral faces. The method allows us to incorporate topological information from the cells, e.g., critical points. The calculations are based on barycentric coordinates, since this simplifies theory and algorithm. The stream surfaces are ruled surfaces inside each cell, and their construction is started with line segments on the faces. Our method supports the analysis of velocity fields resulting from computational fluid dynamics (CFD) simulations.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>We are interested in the structure of 3D vector fields, especially the velocity fields of fluid flows. Most visualizations use streamlines to look for flow field structures. More sophisticated methods analyze the field by searching for line-type features <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b9">10]</ref>. One can obtain substantial information from these visualizations, but many unsolved questions remain. We strongly believe that these problems stem partly from the concentration on streamlines. Stream surfaces provide much more information if one uses a precise algorithm for their calculation. A former algorithm from Hultquist <ref type="bibr" target="#b5">[6]</ref> yields good results if the stream surface does not enter regions with strong twist or related problems that result in folding of the surface. Unfortunately, these complicated regions are typically of major interest in fluid dynamics. This paper presents a new algorithm for stream surfaces in tetrahedral grids. Our algorithm assumes piecewise linear interpolation over the tetrahedral grid. This assumption allows us to precisely describe the surface in each cell, since there is a cellwise analytic description for the whole stream surface. Therefore, we can also control the local error of stream surfaces and incorporate information about the flow structure in the cells. This yields more precise calculations than previous approaches, which is especially important for the calculation of stream surfaces approaching vortices. <ref type="figure" target="#fig_0">Figure 1</ref> illustrates the basic idea for the stream surface construction inside a single tetrahedron. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Stream Surfaces of Piecewise Linear Vector Fields in 3D Space</head><p>Not many papers exist concerning the construction of stream surfaces. At least this is true for the visualization research community. Hultquist <ref type="bibr" target="#b5">[6]</ref> traces multiple streamlines and connects calculated points on the lines by triangles. Since converging and diverging flow presents a major difficulty for this procedure, he introduces additional points in case of diverging neighboring streamlines and removes traces in converging flow. Van Wijk <ref type="bibr" target="#b12">[13]</ref> creates implicit stream surfaces by calculating streamlines starting at all grid points.</p><p>He assigns values to the stream lines in a region of interest defining a scalar function that is constant on the stream lines so that one can obtain stream surfaces as isosurfaces of this function. He presents a second construction in the same paper based on the convection equation. This requires a large number of calculations and setting the right values in a region of interest. Our approach is more related to Hultquist's algorithm: We are also using a parametric approach to define the stream surface.</p><p>In the following, we shall denote vector fields, vectors, and points using 3D Cartesian coordinate notation. For example, §¨ © denotes a vector in 3D space. Thus, we can distinguish these quantities from their corresponding barycentric coordinate tupels that we view as elements in 4D space. For example,¨ © denotes the 4D barycentric parameter tuple associated with the vector §¨ ©</p><p>. Scalar parameters are written as greek symbols, e.g., denotes time, denotes the 1D barycentric parameter along a line segment, and</p><formula xml:id="formula_0">! # " ¢ $ % ! ' &amp; and !</formula><p>represent the eigenvalues of the Jacobian of a vector field. We review some necessary definitions and theorems. Let (1) § 4 5 3 §¨ ' 6 § 4 8 7 % 9</p><p>Physicists and engineers are mainly interested in the stream lines and surfaces of a vector field. A stream line passing through a point § 4 @ © (</p><formula xml:id="formula_1">of §¨ i s a continuous map § A C B D 1 C E 3 $ (2)</formula><p>where</p><formula xml:id="formula_2">F © G E )</formula><p>is an interval and § A B D 6 F 7 I H § 4</p><p>and</p><formula xml:id="formula_3">P § A B D 6 7 Q H §¨ S R § A B D 6 7 U T W V © X E Y 9<label>(3)</label></formula><p>A stream surface is defined as the union of all streamlines through the points of a generating curve §` X 1 3 a </p><p>Existence and uniqueness can be proved provided that §¨ i s Lipschitz-continuous. We consider only piecewise linear vector fields. One reason for this restriction is the existence of exact analytic solutions for the stream lines for linear elements. This fact has been used before <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b10">11]</ref>. Since each linear tetrahedral element of the field is defined by four values §¨</p><formula xml:id="formula_5">¢ u $ 9 ¢ 9 ¢ 9 $ v § © at the four vertices § w u $ 9 v 9 x 9 $ c § w ©</formula><p>, we can use barycentric coordinates as was done by Nielson et al. <ref type="bibr" target="#b8">[9]</ref>. A linear vector field is defined on the hyperplane</p><formula xml:id="formula_6">y H a 4 @ © Y g 4 H )<label>(7)</label></formula><p>by the four values</p><formula xml:id="formula_7">' 6 U $ s F C $ p F $ s F 7 b Ḧ u H 6 u u $ 9 x 9 ¢ 9 $ u 7 $ (8) ' 6 F $ $ p F $ s F 7 b Ḧ " H 6 u " $ 9 x 9 ¢ 9 $ " 7 $ (9) ' 6 F $ s F C $ $ s F 7 b Ḧ &amp; H 6 u &amp; $ 9 x 9 ¢ 9 $ &amp; 7</formula><p>, and (10)  having a zero eigenvalue or two equal eigenvalues. We give the formulae for the two common cases. The remaining formulae can be easily derived from the formulae below and Nielson's paper <ref type="bibr" target="#b8">[9]</ref>. The first case C1 is characterized by three different eigenvalues</p><formula xml:id="formula_8">' 6 F $ s F C $ p F $ v 7 b Ḧ H 6 u $ 9 x 9 ¢ 9 $ 7 ' 9<label>(11)</label></formula><formula xml:id="formula_9">! 8 " ¢ $ % ! ' &amp;</formula><p>, and ! and can be solved by the following formulae:  The second case is characterized by a complex-conjugate pair of eigenvalues and one real eigenvalue. Complex eigenvalues indicate rotations, as shown in <ref type="figure" target="#fig_6">Figure 3</ref>. The corresponding formulae for case C2 are:</p><formula xml:id="formula_10">6 } | t 7 m H F ! " ! &amp; ! % " $ w y x p z H w y c z w y z w y z % " $ d e 6 # $ g 7 t H w z ¢ o w " 6 w z d v 7 U w &amp; w z ¢ o w c 6 7 $ w " H m ! " m n ! &amp; ! " ! ' &amp; ! m ! ! " g c 6 7 $ w &amp; H m ! &amp; m n ! ! &amp; ! ! " m ! " ! &amp; c 6 7 $ and w H m ! m n ! " ! ! " Q ! &amp; m ! ' &amp; ! c 6 7 8 9 H R @ w " w &amp; w T denotes</formula><formula xml:id="formula_11">6 } | o c 7 m H F ! " ! a ! " $ w y x p z H w z w y z Q x c 6 ¡ 7 ¢ £ w y z S g ¤ ¦ ¥ 6 ¡ 7 w z g ¤ ¦ ¥ 6 ¡ 7 w z ¢ c 6 ¡ 7 % " d e 6 # $ s 7 v H ¢ w z ¢ o w " v w z x c 6 ¡ 7 p d x o w &amp; w z g ¤ ¦ ¥ 6 ¡ 7 U w 6 7 $ w " H m ! " m &amp; ! m 6 ! &amp; &amp; 7 ! &amp; " § ! ' ! " 6 ! &amp; &amp; 7 6 7 $ w &amp; H m © 6 } ! ! " 7 g m &amp; 6 ! &amp; " ª ! &amp; &amp; 7 g m 6 ! &amp; &amp; 7 R « ! ' ! " ! &amp; " ¬ 6 ! &amp; &amp; 7 U T ! " 6 ª ! &amp; &amp; ! ' ! " 7 6 ! &amp; &amp; 7 R ! ' ! " ! &amp; " d 6 ! &amp; &amp; 7 T 8 ® c 6 7 $ w H m 6 ! ' ! " ! &amp; &amp; 7 g m &amp; 6 ! ā ! &amp; ! ' ! &amp; " 7 g 6 ! &amp; &amp; 7 R « ! ' ! " ! &amp; " d 6 ! &amp; &amp; 7 U T 6 ! &amp; " 6 ! &amp; &amp; 7 h ! " 6 ! § ª ! &amp; 7 g 7 g 6 ! &amp; &amp; 7 R « ! ' ! " ! &amp; " ¬ 6 ! &amp; &amp; 7 U T # ® c 6 7 ' 9 H R w " w &amp; w T Similarly to case C1, w "</formula><p>is an eigenvector associated with the real eigenvalue -axis by drawing streamlines. We are concerned with stream surfaces in a tetrahedral grid. Such a stream surface is defined by a curve</p><formula xml:id="formula_12">3 µ c ¶• ¶ º ¹ ¶• » ¼ (22) ½ ¾ ¹ 3 c ¿ ½ p À % Á</formula><p>Since we have an analytic formula for a stream surface in each single tetrahedron ³ Â</p><p>, we intersect the curve 3 with the tetrahedron: </p><formula xml:id="formula_13">3 Ã Ä µ ¶ j ¶ Ä ¹ ³ Â ¼ (23) ½ ¾ ¹ 3 c ¿ ½ p À % Á Then,</formula><formula xml:id="formula_14">Â Ð Ï Ñ v Ò G Ó ¶Å AE » Ô Ò C Õ AE Ö d × ¼ « Ø Ï i × ¼ x Ù c ¼ % Ú C ¼ g Û Ý Ü<label>(26)</label></formula><p>and for the faces</p><formula xml:id="formula_15">Þ i ß , à Ï á × ¼ ¢ Ù c ¼ % Ú Ý ¼ s Û , Þ ß Ï n Ñ v Ò @ Ó ¶Å AE » Ý Ô Ò ß Ï á × ¼ Ò C Õ f Ö d × ¼ « Ø G â Ï à Ü Á<label>(27)</label></formula><p>Therefore, we have to choose describes the starting curve for the continuation of the surface through ï . In this way, we can propagate the surface through the whole mesh. The propagation ends if the surface reaches the boundary of the mesh or a critical point. If the critical point is a sink, at least part of the stream surface will end there. It is possible that the surface is split here in two parts that are propagated further and a third part in the middle that ends at the sink. The next section describes the necessary approximation of all curves by polylines and resulting simplifications in the algorithm.</p><formula xml:id="formula_16">Ê ß such that Ç Ä ¿ Ê Ä À i ã Ñ v Ò ä Ó ¶Å » Ô Ò C Õ AE Ö d × ¼ Ø Ï i × ¼ v Ù ¼ p Ú C ¼ p Û Ü .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Linear Stream Surface Calculation</head><p>We assume that the generating curve §` c onsists of connected line segments which is quite typical for a visualization application. Since the calculation treats each tetrahedral cell separately, we have to intersect the generating line segments with the tetrahedra. For the calculation, we focus our description now on a single line segment in a single tetrahedron. Let (31) which can be checked by directly using equations (3). Formula (30) describes a ruled surface, i.e. a surface that is generated by two parametric curves blended by line segments. This can be seen easily, since for fixed , we get a line segment with parameter . We compute the stream lines (traces) through points is outside the tetrahedron, we clip the line segment against the faces yielding line segments on the stream surface inside the tetrahedron. Since the faces ø of the tetrahedron are defined by a zero in the i-th coordinate (see previous section), we only need to check for zero crossings to obtain the line segment inside a tetrahedron. Since we need the intersections of the stream surface with the edges as end points of the exit curves, we have to find these split points, see <ref type="figure">Figure 5</ref>. The whole process is illustrated in <ref type="figure" target="#fig_9">Figure 6</ref>.</p><formula xml:id="formula_17">1 û F $ % ü 3 y $<label>(29)</label></formula><p>But there is an exception to this rule: We are not allowed to define points on an inflow part of a face. Obviously, no part of the stream surface can leave the tetrahedron here. The problem arises if on a boundary face, a line (switch line) with flow vectors tangent to the face can be found, see <ref type="figure" target="#fig_20">Figure 7</ref>. Therefore, we define points on the outflow part as described above, but once we cross the switch line, we compute the intersection of the stream surface with this line and call the intersection switch point, see <ref type="figure">Figure 8</ref>. For larger than the parameter for the switch point, we have to replace u resp. r with the switch point. (In the unlikely case of parts of the switch line being part of the stream surface, we take the point where we leave the switch line as switch point.) The exit curves consist of all the segments generated on the faces of the tetrahedra. We will see in the next section that one has to remove too small segments to avoid a fast growing number of segments.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Algorithm</head><p>Our algorithm requires the propagation of stream surfaces through a tetrahedral grid. In contrast to very general methods like the method from Stämpfle <ref type="bibr" target="#b11">[12]</ref>, it is advantageous to use the grid structure and its influence on the vector field directly to control error. Previous visualization methods, see for example <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b5">[6]</ref>, demonstrate the problems arising from "folding", "turning", "widening", and "stretching" of stream surfaces. Our method overcomes these difficulties naturally by using the understanding of the affine linear flow in our tetrahedral cells. We now describe our data structure and algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Representation of the Surface</head><p>Our representation of the surface is based on a two-step construction. First, we keep an advancing front of line segments and parts of stream lines, called traces. This approach models the boundary of the surface to be constructed at every moment and is used to extend the surface to its final form. Second, we define a triangulation of the surface for the OpenGL rendering pipeline. This triangulation is the approximation of the constructed part of the surface. Similar ideas have been introduced by Hultquist <ref type="bibr" target="#b5">[6]</ref>. The basic difference is that our algorithm uses the grid and the topological information about the structure of linear vector fields to solve the problems of folding, converging, diverging, and winding in an accurate manner. Triangles are generated and passed to the OpenGL rendering pipeline. We focus our description on the advancing front. The front is implemented as a double-linked list of points, where the connections are marked as "line segment," "forward trace," or "backward trace" with respect to the point that carries the label. We store, for each connection, the tetrahedron the front is about to penetrate (either in flow direction or reverse flow direction, depending on the direction of surface integration). We describe in the next sub-section how the links provide all the information necessary for surface propagation and updating the front. For practical purposes, we store only the segments that will be advanced through the field and the traces between these segments. Thus, when a segment ap-proaches the boundary, we remove the corresponding connection from the list. At first glance, it might appear strange that we allow the traces to be part of the front, since the flow will usually be transversal to the generating polyline´, and we will not have any traces. We discuss in the following sub-section that traces are created naturally by our algorithm, and we need to keep them to determine when one can remove a point from the front. We attempt to minimize the number of segments, considering the fact that we might be dealing with massive data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Segment Propagation</head><p>The basic step of our algorithm advances a line segment </p><formula xml:id="formula_18">Ô¨ © Ô Ï n Ñ ¿ U Ù ½ S À ½ © Ô½ Ó × ¼ ¢ Ù ¡ Ü<label>(32)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>©</head><p>, each point has to be clipped against the terahedron. Besides, we have to find exit points, split points, switch points and figure out that the whole segment has left the tetrahedron. The following pseudo-code describes this process in detail. from the exit curve. Of course, we can never remove exit points, switch points and split points, since they are end points of exit curves on faces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>We have tested our algorithm on a simple grid and random vector field to detect problems by creating strong twists in the surface. The grid contains tetrahedra. A stream surface is shown in <ref type="figure" target="#fig_21">Figure 9</ref>. The surface shows twists and exhibits convergent regions. This type of vector field causes no problems for the algorithm since it concentrates on one tetrahedron at a time and we can obtain all information about the surface in this tetrahedron. We have included two streamlines calculated with an adaptive Runge-Kutta-Fehlberg method to illustrate the expected relationship between surface and streamlines.</p><p>Our second test used the well known bluntfin data set, courtesy of NASA. The stream surfaces shown in <ref type="figure" target="#fig_0">Figures 10 and 11</ref> are all started at the boundary of the grid by performing integration against the flow direction into the interesting region around the fin. One can clearly see the flat, uninteresting area in the back as well as the winding and twisting close to the fin. We hope to analyze the surfaces A further in the future to obtain structural information. It is not difficult to see that our algorithm is slower than Hultquist's method if precision is not much of an issue. Hultquist's method can give nice looking surfaces using only about one single point evaluation per cell. Since we need the exit, switch and split points, we have to calculate more points. In our experiments, we have had reasonable results with about 5 points per trace per tetrahedron. For a comparison of the precision of the two algorithms, we use a second small data set with random vector data. The data set does not contain critical points which are especially difficult for the Hultquist algorithm to deal with. The idea of the test is to calculate a stream surface generated by a single line segment, reverse the direction of flow and use the end of the first stream surface as starting segments for the second stream surface. In theory, one should get the original single line segment back. In <ref type="figure" target="#fig_0">Figure 12</ref>, we show the first surface for our algorithm. Then, the direction of flow is reversed and a second stream surface using the intersection of the shown surface with the boundary is used as start segment. For a better comparison, we presented only the final intersection of this second stream surface with the boundary and the original line segment in <ref type="figure" target="#fig_0">Figure 14</ref>. There are some numerical errors visible, especially around the center of the line segment. Now, we look at Hultquist's method. <ref type="figure" target="#fig_0">Figure 13</ref> shows the surface generated by our single line segment. Again, we reverse the flow and use the intersection of the presented surface as input. In <ref type="figure" target="#fig_0">Figure 15</ref>, we show the result of the test in this case. It is clearly visible that the error is much larger. For an evaluation, it is important to note that we used a very small error bound for the adaptive integration, so that the Hultquist algorithm took four times longer than our algorithm to produce this result. <ref type="figure" target="#fig_21">Figure 9</ref>: Stream surface calculated in random vector field. Random data creates a maximum on twisting, folding, and parts with converging and diverging flow. Example data set used for testing and debugging purposes. <ref type="figure" target="#fig_0">Figure 10</ref>: This stream surface in the bluntfin data set (courtesy of NASA) starts along a grid line at the rear. This surface exhibits "simple behavior" in the back, but it starts to wind and climb up the wall near the fin, indicating more complicated behavior.           </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Stream surface construction inside tetrahedron. The endpoints are traced as streamlines. Each intermediate point is connected to its counterpart by a line on the surface. Clipping against the tetrahedron's faces yields the surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>be the domain. A vector field on (</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>eigenvalues as q , and an additional eigenvalue that is zero. When a vector field has a critical point in 3D space, the position vector of this critical point in y { is an eigenvector associated with the additional zero eigenvalue. The normal form of m allows a direct computation of w x p z , and 21 cases are possible. The first two cases are common. All other cases are exceptional cases characterized by q</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>the critical point. The dependence of the vectors the magnitude, since the vectors w are eigenvectors of the corresponding eigenvalues. Figure 2 illustrates</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Vector field for case C1 with different signs of eigenvalues; the critical point outside the tetrahedron is shown to simplify interpretation.the vector field in this case by drawing streamlines. If all eigenvalues have the same sign, all stream lines start or end at the critical point.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 3 :</head><label>3</label><figDesc>Vector field for case C2 exhibiting spiraling behavior around axis given by eigenspace of real eigenvalue. Critical point and rotation axis are stream lines themselves.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>,</head><label></label><figDesc>we obtain line segments lying on the actual stream surface. If the trace through u or r leaves the tetrahedron, we call this an exit point, see Figure 4. An exit point marks the begin of an exit curve. If the trace through u or r</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>An exit point is a point where a trace leaves a tetrahedron. split point A split point is a point where a stream surface intersects an edge of a tetrahedron.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 6 :</head><label>6</label><figDesc>Stream surface defined by a line segment (ruled surface) inside a tetrahedron. We advect end points of the segment through the flow and connect them by lines. After clipping the lines against the faces of the tetrahedron, we triangulate the stream surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 7 :Figure 8 :</head><label>78</label><figDesc>A switch line is defined as border between inflow and outflow on a tetrahedron face. As a result of linear interpolation, there can be only one switch line per face. At a switch point a surface intersects a switch line. The trace must be continued from the switch point.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>/</head><label></label><figDesc>/ The following variables need valid values bool trace_a_was_outside_tet; bool trace_b_was_outside_tet; int a_was_on_face; int b_was_on_face; // Calculate the next segment a = M * a; b = M * b; // Clip against the tetrahedron k = 0; l = 1; FOR (i=0; i &lt; 4; i++) IF (a[i] &lt; 0) trace_a_outside_tet = TRUE; IF (b[i] &lt; 0) line_outside_tet = TRUE; ELSE temp = a[i] / (a[i] -b[i]); IF (temp &gt; k) k = temp; a_on_face = i;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 11 :</head><label>11</label><figDesc>Stream surface in the bluntfin data set with a view on the whole grid.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 12 :</head><label>12</label><figDesc>Stream surface from our algorithm in the precision test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 13 :</head><label>13</label><figDesc>Stream surface from Hultquist's method in the precision test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 14 :</head><label>14</label><figDesc>Our result in the precision test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 15 :</head><label>15</label><figDesc>Hultquist's method in the precision test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 1 :</head><label>1</label><figDesc>Stream surface construction inside tetrahedron. The endpoints are traced as streamlines. Each intermediate point is connected to its counterpart by a line on the surface. Clipping against the tetrahedron's faces yields the surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Figure 3 :</head><label>3</label><figDesc>Vector field for case C2 exhibiting spiraling behavior around axis given by eigenspace of real eigenvalue. Critical point and rotation axis are stream lines themselves.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 7 :</head><label>7</label><figDesc>A switch line is defined as border between inflow and outflow on a tetrahedron face. As a result of linear interpolation, there can be only one switch line per face.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 9 :</head><label>9</label><figDesc>Stream surface calculated in random vector field. Random data creates a maximum on twisting, folding, and parts with converging and diverging flow. Example data set used for testing and debugging purposes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Figure 10 :</head><label>10</label><figDesc>This stream surface in the bluntfin data set (courtesy of NASA) starts along a grid line at the rear. This surface exhibits "simple behavior" in the back, but it starts to wind and climb up the wall near the fin, indicating more complicated behavior.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure 12 :</head><label>12</label><figDesc>Stream surface from our algorithm in the precision test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>Since we are interested in the whole stream surface in the grid, we have to calculate the exit curves where the stream surface leaves the tetrahedron. These curves are the starting curves for the surface in the neighboring tetrahedra. For the exit curves, we have</figDesc><table><row><cell>¢ è hedron, is the smallest value such that the trace for leaves the tetra-é i.e. è 1H ë ê ¤ ¦ ¥ 8 ì S í d î 6 # $ g 7  § © e ï $ p ð Y ñ ò ó F V F ô ô ñ 1 d î 6 # $ g ¬ 7 @ õ © ï ö . î ÷ is the set of subintervals of where the trace leaves the tetrahedron through face ø , so î ÷ 1H ì © î í d î 6 # $ s è 7 d © ö . From the formula for the stream surface ø above we see that we have only an implicit definition of which U è we will solve only approximately in the algorithm. If ï is the neighboring tetrahedron along face ø of ï , ù î 8 ú</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>å Ä 8 ae ß µ  ¶</cell><cell>Ä</cell><cell>¶ Ä 8 ae ß ½</cell><cell>¹ ¾ ¹</cell><cell>Þ Ç ã ß Ä ¿  ¶Å AE » c ¼ ½ ¼ g Ë ¢ ç À % Á</cell><cell>(28)</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The work was supported by the Deutsche Forschungsgemeinschaft (DFG) under the program "Visualisierung nichtlinearer Vektorfeldtopologie," awarded to the University of Kaiserslautern, Germany. We thank all members of the Computer Graphics Group at the University of Kaiserslautern for many fruitful discussions.</p><p>This work was also supported by the National Science Foundation under contracts ACI 9624034 (CAREER Awards), through the Large Scientific and Software Data Set Visualization (LSSDSV) program under contract ACI 9982251, and through the National Partnership for Advanced Computational Infrastructure (NPACI); the Office of Naval Research under contract N00014-97-1-0222; the Army Research Office under contract ARO 36598-MA-RIP; the NASA Ames Research Center through an NRA award under contract NAG2-1216; the Lawrence Livermore National Laboratory under ASCI ASAP Level-2 Memorandum Agreement B347878 and under Memorandum Agreement B503159; and the North Atlantic Treaty Organization (NATO) under contract CRG.971628 awarded to the University of California, Davis. We also acknowledge the support of ALSTOM Schilling Robotics, and Silicon Graphics. We thank the members of the Visualization and Graphics Research Group at the Center for Image Processing and Integrated Computing (CIPIC) at the University of California, Davis.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The split points define new segments in the front since they define the line segment that has to be propagated through a neighboring tetrahedron. The switch points are also defining new segments. We have to follow the two traces until the connecting line segment between two points of the same time is completely outside the tetrahedron. Then we create the triangles for the OpenGL rendering pipeline. We start with u u and r u , add</p><p>, exit points, split points, and switch points from both traces in the order of their creation into a triangle strip (for reduction of points, see sub-section 4.5).</p><p>Finally, we have to update the surface front representation. We have to add all the exit points, split points, and switch points together with the connecting traces and new segments. Traces are created by integrating inside a tetrahedron (either at the beginning or after a switch point). Segments are created by integrating outside a tetrahedron between the exit points, split points, and switch points. If u had a forward trace inside the current tetrahedron before we started propagation, this trace and u will be removed from the list. (We can do this after we have re-calculated this trace and replaced the new exit point by the one already in the front.) r is handled in the same manner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Special Case Treatment</head><p>In the previous sub-section, we have made three assumptions: (A1) Each stream line leaves the tetrahedron. (A2) The stream surface can be triangulated by the end points, exit points, and split points.</p><p>(A3) The front does not split into isolated pieces in the tetrahedron.</p><p>The presence of critical points inside a tetrahedron can make any of these assumptions invalid. For example, a sink attracts stream lines; thus, part of the segment may end in the tetrahedron. We calculate the part of the segment that enters the critical point and propagate the remaining parts. This causes the front to split into two parts. The same observation holds for a saddle point, where a finite number of stream lines (often one) in the surface enters the critical point. In the absence of critical points, a stream line leaves the tetrahedron, as does the whole stream surface defined by a line segment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Termination Conditions</head><p>We have discussed situations where parts of a segment or a whole segment end at a critical point. The typical case is that a segment ends at a boundary face. In our representation, we remove the segment from the front and split the front into two lists. A list is removed when no segment is left. Unfortunately, stopping only at critical points and the boundary may lead to infinite loops of propagating segments. It is possible that a stream surface "rolls" around a closed stream line or torus forever, see <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b2">[3]</ref>. Besides, it is desirable to provide an upper bound on run time. We accomplish this by limiting the number of intersections of a stream surface with any triangular face to one in each direction. Other conditions are possible, and reducing the number of resulting triangles is an obvious topic for further research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Merging</head><p>Sub-section 4.2 implies that each split increases the number of segments, so do the switch points. Also, the exit lines consist of several segments resulting in an incrase of the number of segments. There is no step so far that removes segments (only traces) except the termination conditions. Therefore, the number of segments increases except when reaching the boundary or a critical point. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Dynamics, the Geometry of Behavior I-IV</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Shaw</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1982" />
			<publisher>Aerial Press</publisher>
			<pubPlace>Santa Cruz, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">I</forename><surname>Arnold</surname></persName>
		</author>
		<title level="m">Ordinary Differential Equations</title>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Dynamical Systems and Bifurcation of Vector Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Guckenheimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Holmes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Visualizing Vector Field Topology in Fluid Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="1991-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Differential Equations, Dynamical Systems and Linear Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Hirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Smale</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974" />
			<publisher>Academic Press</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Constructing Stream Surfaces in Steady 3D Vector Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P M</forename><surname>Hultquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;92</title>
		<editor>A. E. Kaufman and G. M. Nielson</editor>
		<meeting>IEEE Visualization &apos;92<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Vortex Identification -Applications in Aerodynamics: A Case Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>Kenwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;97</title>
		<editor>R. Yagel and H. Hagen</editor>
		<meeting>IEEE Visualization &apos;97<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="413" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Optimization of Time-Dependent Particle Tracing Using Tetrahedral Decomposition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>Kenwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Lane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;95</title>
		<editor>G. M. Nielson and D. Silver</editor>
		<meeting>IEEE Visualization &apos;95<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="321" to="328" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Tools for Computing Tangent Curves for Linearly Varying Vector Fields over Tetrahedral Domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I.-H</forename><surname>Jung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions for Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="360" to="372" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Operator-a Vector Field Visualization Primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;99</title>
		<meeting>IEEE Visualization &apos;99<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
	<note>The &quot;Parallel Vectors</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Visualizing Local Vector Field Topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kollmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Electronic Imaging</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="356" to="367" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stämpfle</surname></persName>
		</author>
		<title level="m">Dynamical Systems Flow Computation by Adaptive Triangulation Methods. Computing and Visualization in Science</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="15" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Implicit Stream Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;93</title>
		<meeting>IEEE Visualization &apos;93<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="254" to="252" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
