<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Variational Classification for Visualization of 3D Ultrasound Data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raanan</forename><surname>Fattal</surname></persName>
							<email>raananf@cs.huji.ac.il</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dani</forename><surname>Lischinski</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yduldwlrqdo</forename><surname>Fodvvlilfdwlrq</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Engineering</orgName>
								<orgName type="institution">The Hebrew University of Jerusalem</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Variational Classification for Visualization of 3D Ultrasound Data</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/image generation-display algorithms</term>
					<term>viewing algorithms; I.4.3 [Image Processing and Computer Vision]: Enhancement-filtering</term>
					<term>sharpening and deblurring</term>
					<term>smoothing 3D ultrasound</term>
					<term>classification</term>
					<term>isosurface extraction</term>
					<term>opacity function</term>
					<term>splatting</term>
					<term>the variational principle</term>
					<term>volume rendering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a new technique for visualizing surfaces from 3D ultrasound data. 3D ultrasound datasets are typically fuzzy, contain a substantial amount of noise and speckle, and suffer from several other problems that make extraction of continuous and smooth surfaces extremely difficult. We propose a novel opacity classification algorithm for 3D ultrasound datasets, based on the variational principle. More specifically, we compute a volumetric opacity function that optimally satisfies a set of simultaneous requirements. One requirement makes the function attain nonzero values only in the vicinity of a user-specified value, resulting in soft shells of finite, approximately constant thickness around isosurfaces in the volume. Other requirements are designed to make the function smoother and less sensitive to noise and speckle. The computed opacity function lends itself well to explicit geometric surface extraction, as well as to direct volume rendering at interactive rates. We also describe a new splatting algorithm that is particularly well suited for displaying soft opacity shells. Several examples and comparisons are included to illustrate our approach and demonstrate its effectiveness on real 3D ultrasound datasets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Three-dimensional ultrasound (3DUS) is a relatively new technology for imaging the distribution of ultrasonic echo information throughout a 3D volume of interest inside a patient. Over the past decade 3DUS has become advanced enough to be used in clinical practice. It is used mostly in obstetrics and gynecology <ref type="bibr" target="#b0">[1]</ref>, as well as for visualization of vessels and tumors in soft tissue, and cardiac imaging. The main advantages of 3DUS over other imaging technologies is that the acquisition procedure is fast, non-invasive, non-radiative, and relatively inexpensive, enabling acquisition to be performed in the clinicians' offices.</p><p>Unfortunately, compared to other volumetric medical imaging technologies, such as CT and MRI, high quality visualization of 3DUS datasets is an extremely challenging task, since such datasets typically suffer from considerable noise and speckle, low dynamic range, fuzzy boundaries, and several other problems, which will be described in more detail later. These properties make extraction of smooth, or even continuous, surfaces extremely difficult. For example, the leftmost image in <ref type="figure">Figure 1</ref> shows a surface that was extracted using Marching Cubes <ref type="bibr" target="#b9">[10]</ref> from a 3DUS dataset of a fetus' head. Even though the input dataset was relatively clean in this case, the extracted surface is quite rough, contains holes, and the view of the face is partially occluded by spurious erroneously extracted surface fragments.</p><p>Levoy's pioneering work <ref type="bibr" target="#b8">[9]</ref> demonstrated that assigning the voxels of a volumetric dataset with non-binary, continuous opacity values is essential for displaying smooth and anti-aliased surfaces from volumetric data. We refer to this process as opacity classification.</p><p>In this paper, we present a new approach for opacity classification of 3DUS datasets, based on the Variational Principle, a mathematical framework for optimization over function spaces. More specifically, we design a functional that effectively imposes several simultaneous requirements on the opacity function. One requirement makes the function attain nonzero values only in the vicinity of a user-specified value, resulting in soft shells of finite, approximately constant thickness around isosurfaces in the volume. Other requirements are designed to make the function smoother and less sensitive to noise and speckle. An optimal opacity function that minimizes the integral of the functional over the entire volume is computed by solving a large but sparse system of linear equations.</p><p>Once the opacity function has been computed, it becomes possible to visualize the corresponding surfaces at interactive rates, using existing techniques, such as Marching Cubes surface extraction <ref type="bibr" target="#b9">[10]</ref> or shear-warp volume rendering <ref type="bibr" target="#b6">[7]</ref>. We also present oriented splatting, a new splatting variant that uses the computed opacity values and opacity gradients to associate an oriented splat polygon with each voxel. The rasterization and texture mapping hardware is then used to compute the corresponding footprints on the image plane. The rightmost image in <ref type="figure">Figure 1</ref> shows a rendering produced from a classified 3DUS volume using this technique. Such renderings are generated at interactive rates on today's commodity 3D graphics accelerators.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background and Previous Work</head><p>2D ultrasound imaging operates by emitting high-frequency sound waves into the body of a patient from a linear array of sources. Sound waves propagating inside the body are partially reflected when they encounter a transition between two different types of tissue (with different sound impedances). Such reflections are recorded by sensors located next to the sound sources, and imaged on the plane using brightness modulation. 3D ultrasound data is acquired from a large number of consecutive 2D slices, obtained by moving a linear array ultrasonic probe or by using a 2D array probe. For further details on the principles of 2D and 3D ultrasound and its uses the reader is referred to <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b16">17]</ref>.</p><p>Many different approaches exist for the visualization of 3D structures present in a volumetric dataset. Some techniques, such as the Marching Cubes algorithm <ref type="bibr" target="#b9">[10]</ref> extract explicit geometric surfaces (triangle meshes) from volumetric data. Other techniques display surfaces or semi-transparent volumetric 3D structures by tracing rays through the volume <ref type="bibr" target="#b8">[9]</ref>, or by traversing the volumetric data in object order and splatting each voxel onto the image plane <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b7">8]</ref>. Most volume rendering techniques require each voxel to have an associated opacity value.</p><p>Unfortunately, standard volumetric visualization techniques fail to produce satisfactory results when applied to raw 3DUS data. The main reasons for the failure were reported by Sakas <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b15">16]</ref>, and are quoted here:</p><p>1. significant amount of noise and speckle 2. much lower dynamic range compared to CT or MR 3. high variations in the intensity of neighboring voxels, even within homogeneous tissue areas 4. boundaries with varying grey level caused by the variation of surface curvature and orientation to the sound source 5. partially or completely shadowed surfaces by objects closer to the source 6. the regions representing boundaries are not sharp, but show a width of several pixels 7. poor alignment between subsequent images (parallel scan devices only)</p><p>8. pixels representing varying geometric resolutions depending on the distance from the sound source (fan-scanning devices only)</p><p>These problems make the tasks of volume classification and surface extraction very challenging. For example, larger speckles in the datasets might be detected as opaque blobs occluding the "real" organ surfaces, while finer grain noise makes visualized surfaces appear rougher than they should. High variations in intensity and fuzzy boundaries with varying grey level make it difficult to select the proper parameters for iso-value surface extraction. The goal of our research was to develop a new classification technique that is more robust and designed specifically to address some of the problems typical to 3DUS data.</p><p>The best results in visualization of surfaces from 3DUS data to date are presented in the pioneering work of Sakas and Walter <ref type="bibr" target="#b16">[17]</ref>. They describe a multistage visualization pipeline. The first stage uses the BLTP (binarize, low-pass, threshold, propagate) filter and a multi-resolution volume pyramid to identify and mask out noisy areas that are believed to contain no useful information, while leaving the data in the remaining areas unaltered. Next, Levoy's opacity classifier <ref type="bibr" target="#b8">[9]</ref> is used to indicate surfaces in the unmasked regions of the volume. Finally, the classified unmasked regions are volumerendered. To achieve smoother rendering, the normals used for shading are obtained from a low-passed version of the volume.</p><p>The variational opacity classification algorithm presented in this paper could be viewed as an improved alternative to the first two stages of Sakas' pipeline, achieving noise removal and opacity classification simultaneously using the variational framework. More specifically, the advantages of our approach are:</p><p>1. Noise attenuation and smooth surface detection are performed simultaneously, with mutual reinforcement between the two processes. Thus, in addition to attenuation of noise and speckle away from the boundaries, explicit measures are also taken to reduce the noise on or around the boundaries, resulting in smoother surfaces.</p><p>2. All of the voxels in the dataset are treated in a uniform fashion. For example, the opacity value of a voxel does not depend on its location with respect to an arbitrary octree subdivision of the space, nor is it subject to binary classification decisions, which may have been erroneously taken at a coarser resolution.</p><p>3. The opacity function we compute contains all of the information needed for the subsequent rendering step, including the normals that are needed for shading calculations.</p><p>It should be noted that both the BLTP filter and our approach can only remove unwanted noise, but user-assisted segmentation may still be required to remove occluding organs, such as a wall of the uterus in fetal ultrasound.</p><p>It should also be pointed out that there have been several recent works dealing with automatic iso-value determination and volume classification (e.g., <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b5">6]</ref>). However, none of these methods, as far as we know, addressed the specific problems of 3D ultrasound data that were listed earlier.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Splatting</head><p>Splatting is a technique originally developed by Westover <ref type="bibr" target="#b18">[19]</ref> in order to efficiently render volume data using forward mapping. The main idea is to perform the reconstruction of the projected volume samples in the screen space of the desired view, by spreading the contribution of each volume sample onto every pixel that lies within the screen space footprint of the projected volume sample. Laur and Hanrahan <ref type="bibr" target="#b7">[8]</ref> use graphics hardware to render each splat as a collection of polygons with linearly interpolated alpha values. On platforms with hardware support for texture mapping each splat can be rendered as a single polygon, using a texture map to modulate its alpha channel <ref type="bibr" target="#b2">[3]</ref>.</p><p>To our knowledge, all of the splatting-based volume rendering approaches treat the opacity of a voxel as isotropic; in other words, the shape of the opacity reconstruction kernel is the same for all voxels and all directions. In the case of a parallel projection the image space footprint is also identical for all voxels. In contrast, the splatting approach presented in this paper uses the gradients of the computed opacity function to define, for each voxel, a 2D reconstruction kernel on a plane perpendicular to the opacity gradient. Thus, we treat each voxel as a sample on a fuzzy, partially transparent surface, resulting in a splatting approach that is closer in spirit to those used in recent point-based rendering techniques <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b20">21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Variational Principle</head><p>In this work we make use of the Variational Principle, a mathematical framework for solving a certain class of maximum-minimum problems over function spaces. In the context of computer graphics and geometric modeling the variational framework has mostly been used for surface design and fairing, see e.g. <ref type="bibr" target="#b3">[4]</ref>. It has also been used for medical image analysis (see the excellent survey by McInerney and Terzopoulos <ref type="bibr" target="#b10">[11]</ref>). In particular, parametric deformable contour models (snakes) <ref type="bibr" target="#b4">[5]</ref> have been used to track contours in medical images and volumes. Our approach differs from these previous works in that we are not attempting to fit a parameterizeable surface to the volumetric data, but rather a soft implicit 3D opacity function. Thus, in our approach, we don't have to deal with complicated surface topologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Variational Opacity Fitting</head><p>Interpreting the input volume as a discretized version of some continuous function v : V IR, where V is the subset of IR 3 corresponding to the input volume, we seek another function defined over the same domain u : V IR, which clearly indicates the features that are of interest to us (organ boundary surfaces), while getting rid of speckle and several of the other problems mentioned earlier. The search for u is formulated as an optimization problem over the space of all twice differentiable functions from V to IR. More specifically, our goal is to find a function u that minimizes the integral</p><formula xml:id="formula_0">V F(u, Öu, x) dx,<label>( 1 )</label></formula><p>subject to the condition that u 0 on the boundary of V, where F is a suitably defined functional, and Öu = (ux, uy, uz) T is the gradient of u.</p><p>According to the Variational Principle, a function u that minimizes equation (1) must satisfy the Euler-Lagrange equation</p><formula xml:id="formula_1">F u d dx F ux d dy F uy d dz F uz = 0,<label>(2)</label></formula><p>which is a partial differential equation (PDE) in u (with the same boundary condition u 0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The functional F</head><p>Our next step is to design an appropriate functional F. The functional should satisfy the following two general requirements:</p><p>1. The integral of F in equation (1) must be bounded from below, otherwise a solution might not exist;</p><p>2. The resulting PDE (eq. (2)) should be easy to solve. In practice, we would like to limit ourselves to solving linear equations, so the PDE should be linear in u and in its derivatives.</p><p>Both of these requirements are easily satisfied by designing F as a sum of positive terms, where in each term either u or one of its derivatives appears squared.</p><p>In this work, we define F as a weighted sum of three terms:</p><formula xml:id="formula_2">F = «F iso + ¬Ftan + F ind .<label>( 3 )</label></formula><p>The isovalue term F iso allows u to have a high value in areas of V where the original input function v has values near a user-specified isovalue, and pulls it to zero elsewhere. The tangential term Ftan forces the gradients of u to point in the same directions as the gradients of a smoothed version of the volume v. The F ind term requires u to have a user-specified non-zero value u ind whenever it can. In particular, it pulls u towards u ind in areas of the volume where v has a high gradient. Each of these terms is defined and described in more detail below.</p><p>Note that in contrast to methods that preprocess a volume by sequential application of various filters (e.g., smoothing filter, followed by median filter, followed by thresholding), the variational fitting of u attempts to find a function that satisfies several requirements simultaneously in an optimal manner. The requirements are represented by the different terms in F and their relative importance depends on the weights «, ¬, and .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The isovalue term F iso</head><p>The isovalue term is designed to pull u to zero everywhere, except at locations where v is close to a user-specified value v iso . A simple definition for such a term could be</p><formula xml:id="formula_3">F iso = u 2 (v v iso ) 2 1 Öv 2 + .</formula><p>Note that u, v, and Öv are all functions of the location x, which is omitted for clarity.</p><p>Since u 2 is multiplied by a term that rapidly increases as v gets farther away from v iso , a solution that minimizes the integral in equation (1) must be as close to zero as possible in such regions. On the other hand, in locations where v equals v iso , the solution u can take any value without increasing the integral. As a result, u is mostly zero, but it has a non-zero "shells" of finite thickness around the isovalue surfaces. The multiplier Öv 2 + ¡ 1 is there to ensure a uniform width of these non-zero shells. The is a small number that prevents division by zero and also pulls u to zero in constant areas with value v iso . This term could be viewed as our framework's analog to Levoy's opacity function <ref type="bibr" target="#b8">[9]</ref>, which linearly depends on</p><formula xml:id="formula_4">v v iso Öv .</formula><p>However, we use a somewhat more sophisticated term. Since 3DUS data suffers from noise and speckles, blindly following isovalue contours might result in very rough surfaces and in spurious blobs disconnected from the "true" surface. We found that these effects can be significantly reduced by replacing (v v iso ) 2 with the term</p><formula xml:id="formula_5">(v v iso ) 2 + (1 )(ṽ v iso ) 2 ,</formula><p>whereṽ is a smoothed version of v (e.g., the result of convolving v with a Gaussian filter). In other words, we blend between the isovalue contour in the original volume and the contour in the lowpassed volume. Thus, the definition of F iso becomes</p><formula xml:id="formula_6">F iso = u 2 v v iso 2 + (1 ) ṽ v iso 2 ¡ 1 Öv 2 + .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The tangential term F tan</head><p>So far, we have not introduced any explicit constraints to make u smooth. Such constraints are needed because of the high level of noise in 3DUS data. However, we must be careful not to oversmooth, eliminating important fine features. We chose to use a term that forces the gradient of u to point, as much as possible, in the direction of the gradient ofṽ, a lowpassed version of v, by minimizing the cross product between the two gradients:</p><formula xml:id="formula_7">Ftan = Öu ¢ Öv 2</formula><p>In other words, we would like to make iso-surfaces in u to be locally tangent to iso-surfaces inṽ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">The indication term F ind</head><p>In order to prevent the existence of a trivial minimum u 0 we introduce another term into the functional. This term penalizes u for deviating from a user-specified non-zero value u ind . This effect could be very simply achieved by setting</p><formula xml:id="formula_8">F ind = (u u ind ) 2</formula><p>The two previous terms prevent the solution u u ind , and in practice the solution u achieves the value u ind only in regions where the constraints imposed by F iso and Ftan are satisfied.</p><p>Better results are achieved when we modify this term such that it also pulls u towards the value u ind in regions where the volume v has a high gradient. In this manner, we effectively combine in our functional two different ways of detecting a surface: tracing an isovalue and detecting high gradients. Thus, the term actually used in our implementation is defined as</p><formula xml:id="formula_9">F ind = AE + (1 AE) Öv ¡ (u u ind ) 2</formula><p>The parameter AE allows us to control the effect of Öv on u. AE must be greater than zero to prevent the vanishing of the F ind terms whenever Öv = 0, which in turn causes the resulting linear system to become singular.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Example</head><p>We illustrate the effect of the different terms in our functional using <ref type="figure" target="#fig_0">Figure 2</ref>. Image (a) in the figure is a slice from a 3DUS dataset of a fetus' head. Image (b) shows the results obtained by running Levoy's opacity classifier <ref type="bibr" target="#b8">[9]</ref> on this dataset. This is also the classifier that Sakas and Walter <ref type="bibr" target="#b16">[17]</ref> use to detect surfaces in their system. It can be seen that the surfaces have indeed been detected, but the contour is noisy, and there are also several blobs caused by speckles in the data.</p><p>Image (c) shows the result we obtained without the tangential term (¬ = 0) and without making use of a lowpassed version of v ( = 1).</p><p>As mentioned earlier, in this case the F iso term resembles Levoy's classifier, and the resulting image (c) appears qualitatively similar to (b). Setting = 0. 6 causes the lowpassed volumeṽ to be taken into account as well, causing a significant reduction in the noise in image (d). Note that the main contour remains largely unchanged with respect to (c). Image (e) shows the effect of the tangential term</p><p>Ftan (using ¬ = 0. 03). Here = 1 again, so the noise has not been removed, but the contour is noticeably smoother than in (c). Finally, image (f) was generated using = 0. 6 and ¬ = 0. 03, resulting in an image that is both cleaner and has a smoother contour than (c).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">System solver</head><p>Substituting the functional F described above into the Euler-Lagrange equation <ref type="formula" target="#formula_1">2</ref>, for each point x ¾ V we obtain a linear equation in u, ux, uy, uz,</p><formula xml:id="formula_10">« u v v iso 2 + (1 ) ṽ v iso 2 ¡ 1 Öv 2 + + ¬ (Ö ¢ Öv) ¡ (Öu ¢ Öv) + AE + (1 AE) Öv ¡ (u u ind ) = 0,</formula><p>where Ö is the vector of differentiation operators</p><formula xml:id="formula_11">Ö = d dx , d dy , d dz T .</formula><p>Additionally, we have the boundary conditions that u 0 on the boundary of the volume. Thus, we are faced with a boundary value problem. We solve the problem on the same discrete sampling grid of the input volume using finite differences and relaxation on a multigrid <ref type="bibr" target="#b13">[14]</ref>.</p><p>More specifically, let x = (i, j, k) on the sampling grid. In the equation corresponding to x we approximate the partial derivative ux as</p><formula xml:id="formula_12">ux = u(i + 1, j, k) u(i 1, j, k) 2hx ,</formula><p>where hx is the grid spacing along the x axis. A similar formula is used for uy and uz. The finite differences approximation produces a diagonally dominant linear system of equations where the unknowns are the values of u on the grid points (i, j, k). This system is sparse, as each equation couples each grid point only with its twenty-six neighbors.</p><p>To solve the resulting diagonally dominant linear system we use Gauss-Seidel relaxation, accelerated using a two-level grid. The equations are first solved on a half-resolution grid. The result of the coarse solution is interpolated to the finer grid and used as an initial guess for another round of relaxation.</p><p>In our experiments, we used 2 to 4 Gauss-Seidel iterations on the coarse grid, followed by 5 to 10 iterations on the fine grid. The number of iterations depends mostly on the weight ¬ of the tangential term. Solution times for datasets with size ranging from 400,000 to 1,150,000 voxels were between 4 and 11 seconds (measured on a 600 MHz Pentium III PC running Linux) including the pre-computation of Öv,ṽ, and Öṽ, setting up the equations, and solving them. Detailed statistics are provided in <ref type="table" target="#tab_0">Table 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Surface Visualization</head><p>The result of the variational opacity classification stage described in the previous section could be thought of as a fuzzy surface of roughly fixed thickness, indicated by continuously varying nonzero opacities. Our goal is to visualize this surface. Since the values in the original ultrasound data only indicate transitions between regions with different sound impedances, once the surfaces have been identified, the original data is of no further use to us in the visualization process. Therefore, in the rendering stage we only make use of the computed opacity function. As we shall demonstrate in Section 5 the opacity function is quite sparse; typically over 80 percent of the voxels are either zero, or have a negligibly small value. This sparsity supports rapid visualization of the indicated surfaces.</p><p>The fuzzy surfaces are typically quite thin. Thus, it is possible to apply Marching Cubes, or a similar geometric surface extraction algorithm to the opacity function. This results in sharp opaque surfaces, but fails to properly convey their fuzzy nature. Alternatively, a direct volume rendering algorithm based on ray casting, shearwarp factorization, or splatting can be used. In principle, such algorithms are able to better account for partial opacities.</p><p>In this section, we present oriented splatting, a new modified splatting algorithm that is particularly well-suited for visualizing opacity functions computed with our variational classification procedure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Oriented splatting</head><p>Our splatting approach operates as follows. Each voxel x whose computed opacity u(x) exceeds some user-specified threshold¯is assigned a single splat triangle, centered at x and oriented perpendicular to Öu. The splat triangle alpha value is set to u(x), which is modulated by means of a texture map that creates a Gaussian decay in the alpha channel away from the triangle's center. Once created, the resulting collection of texture-mapped triangles is rendered from any desired viewpoint in back-to-front order. The rendering is done at interactive rates with today's commodity 3D graphics accelerator cards, which provide support for texture mapping and alpha blending in hardware.</p><p>Note that in contrast to classical splatting algorithms that treat the opacity of each voxel as isotropic and use the same reconstruction kernel for all voxels and in all directions, we use a 2D reconstruction kernel defined on the plane of each splat triangle, which is oriented perpendicularly to the opacity gradient. The correct footprint on the image plane is computed by the rasterizing hardware, provided that it supports perspective-corrected texture mapping. Since reconstruction kernels are oriented perpendicularly to opacity gradients, they result in sharper reconstruction than the usual isotropic splats, and avoid incorrect thickening around surface silhouettes, as demonstrated in <ref type="figure">Figure 3</ref>.</p><p>Now it remains to explain how to define an appropriate 2D Gaussian texture function, establish the appropriate texture coordinates for the vertices of the splat triangle, and set an appropriate size for the splat triangles. Our goal is to find values for these parameters such that the overlap between the footprints of adjacent and identically oriented splat triangles creates the appearance of a constant Our construction is illustrated in <ref type="figure">Figure 4</ref>. We define a windowed Gaussian opacity modulation texture function over the 2D texture space [ 1, 1] 2 . Specifically, the texture function is defined as the Gaussian G(x, y) = e (x 2 +y 2 )</p><p>inside the circle x 2 +y 2 = 0. 5 2 , and zero outside that circle. Next, we construct an equilateral triangle, in texture space, that circumscribes this circle. The texture coordinates at the vertices of such a triangle are indicated in <ref type="figure">Figure 4</ref>.</p><p>The Gaussian parameter is chosen such that G(x, y) = on the boundary of the inscribed circle, where is the desired cutoff value (in our implementation = 0. 2 was empirically determined to work well). It is easily verified that this condition is satisfied by setting = 0. 25 ln .</p><p>The world coordinates of the splat triangle's vertices are determined as follows. We start by constructing two perpendicular unit vectors s and t, which lie in the plane perpendicular to Öu, the gradient of our opacity function. The vertices of the splat triangle are then computed as</p><formula xml:id="formula_13">x1 = x + a s x2 = x a 2 s + Ô 3t ¡ x3 = x a 2 s Ô 3t ¡</formula><p>The size of the splat triangle is controlled by the parameter a. We use a = Ô 1 , resulting in roughly constant reconstructed opacity when two adjacent splat triangles parallel to the image plane are projected and alpha-composited onto it. More precisely, the recon-structed opacity midway between the centers of the splats is roughly 0.95. Splat triangles are shaded using OpenGL's standard Phong-like shading model <ref type="bibr" target="#b19">[20]</ref>. We have experimented with two different methods for computing the normals necessary for OpenGL's lighting computations.</p><p>The first method uses the normalized opacity gradient Öu Öu , computed at the center of the voxel x (which, by our construction, is also the center of the splat triangle). This single normal is specified for each splat triangle vertex, resulting in essentially flat shading for the triangle, which is smoothed to some degree by the Gaussian opacity function. This works well in relatively flat areas, but can still create somewhat facetted appearance in regions of high curvature.</p><p>Smoother results are obtained by assigning a different normal to each splat triangle vertex. Rather than computing the normal at the center of the triangle, we compute three normals, at locations midway between the center and each of the three vertices. As a result, three different color values are computed at the vertices of the triangle, which are then linearly interpolated across the triangle.</p><p>Since the splat triangles are rendered with alpha blending turned on, the rendering must be performed in a back-to-front order. In our current implementation we create six OpenGL display lists, each containing the splat triangles sorted along the positive or the negative direction of one of the three coordinate axes. During interactive display the renderer selects and calls the display list that corresponds to the direction closest to the look-at vector. It should be noted that this strategy is not guaranteed to produce the correct back-to-front ordering because the splat triangles are larger than the voxels, and they overlap and intersect each other. However, we have not observed any artifacts caused by these occasional sorting errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>The techniques described in this paper were implemented in C++ and tested on a 600 MHz Pentium III PC with 256 MB of RAM, under the Linux operating system. Hardware-accelerated OpenGL rendering was performed on an NVIDIA GeForce2 GTS graphics board.</p><p>We have experimented with several different 3D ultrasound datasets. The variational opacity classification times for these datasets were between 4.0 and 10.5 seconds. The time includes low-pass filtering of the input volume, the computation of gradients, setting up the system of equation, and solving it. The classification parameters «, ¬, and v iso were user-specified. Additional statistics pertaining to all four datasets are summarized in <ref type="table" target="#tab_0">Table 1</ref>. <ref type="figure" target="#fig_2">Figure 5</ref> demonstrates the effect of variational classification on two different datasets: each dataset was rendered using ray casting before and after variational classification. It can be seen that variational classification is quite effective at removing noise and revealing the surfaces of interest. <ref type="figure" target="#fig_3">Figure 6</ref> shows the the same two datasets, as well as two other examples. In this figure all of the images were generated after performing variational classification, and it compares between different visualization techniques of the same classified volumes. The leftmost column shows the dataset rendered using ray casting, the next column shows a rendering of a polygon mesh extracted from the volumetric opacity function using Marching Cubes. The third column shows a software rendering of our opacity function using Lacroute and Levoy's shear-warp factorization algorithm <ref type="bibr" target="#b6">[7]</ref> (we used Stanford's VolPack volume rendering library <ref type="bibr" target="#b17">[18]</ref>). The right column rendered the opacity function using the oriented splatting technique described in Section 4.1. With each rendering technique except ray casting the rendering time is fast enough to allow interactive, or near-interactive changes in viewpoint 1 .</p><p>As expected, explicitly extracted surfaces give the sharpest results, however they also exhibit the most roughness, as a result of having to make a binary decision for each voxel whether or not a surface passes through it. The oriented splatting technique appears to give the smoothest reconstruction without loosing any essential details. This is not surprising, since it was explicitly designed to visualize the soft, fuzzy surfaces represented by our opacity function. Shearwarp renderings are slightly inferior in quality to those produced using the other two techniques, but overall it seems a reasonable alternative if hardware-accelerated rendering is not available. While we believe that the smooth renderings produced by oriented splatting are the most aesthetically pleasing, in a clinical application it might be beneficial to present doctors with several different visualizations, alongside with the ability to examine the original unprocessed data.  results reported in the literature <ref type="bibr" target="#b16">[17]</ref>, as the datasets were not available to us. Our images appear to be somewhat cleaner and smoother, and the processing and rendering times are shorter (although this can be partially attributed to faster hardware).</p><p>In summary, variational classification and oriented splatting appear to work rather well, particularly on datasets where the object of interest is large and bounded by a continuous surface, which is frequently the case in fetal ultrasound. The spine dataset shown in the two bottom rows of <ref type="figure" target="#fig_3">Figure 6</ref> is an example where these conditions are not satisfied. The object of interest here consists of many small components, so it is more difficult to distinguish between small parts of the spine and nearby speckles if they are close to the selected isovalue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>We have presented a new approach for opacity classification of 3DUS datasets using the variational principle. Our approach attempts to fit a continuous opacity function to the volume by optimally balancing between several simultaneous requirements. The approach is robust in the presence of noise and speckle, and results in fuzzy, soft surfaces indicated by continuously varying non-zero opacities. We have also described oriented splatting, a new variant of splatting, which is particularly well suited for interactive visualization of such surfaces using fast texture mapping and compositing hardware. Using our approach we have been able to produce some of the cleanest and smoothest 3DUS visualizations to date.</p><p>There are several directions for future work:</p><p>Automatic determination of the various weights used in our functional for obtaining optimal results with minimal user intervention.</p><p>Enabling users to interactively experiment with different classification parameters by performing fast incremental updates to the solution.</p><p>Experimenting with additional or alternative terms for further improvements in the quality of the extracted surfaces. For example, we would like to allow the target isovalue to vary across the volume, for improved adaptation to the intensities present in the data.</p><p>Exploring usage of non-linear terms in the functional instead of or in addition to the current linear terms for added flexibility and control.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>An example. (a) input slice; (b) Levoy's opacity classifier; (c) = 1, ¬ = 0; (d) = 0. 6, ¬ = 0; (e) = 1, ¬ = 0. 03; (f) = 0. 6, ¬ = 0. 03.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Oriented splats (left) vs. isotropic splats (right). Splat triangle transparency surface on the image plane.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>The top two images show a visualization of a fetal 3D ultrasound visualization using ray casting before (left) and after (right) variational classification. The two images below show a similar comparison for a dataset of a spine (top image before, bottom image after variational classification.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Rendering examples. The top row shows a fetal face rendered using ray-casting (left), Marching Cubes, shear-warp, and oriented splats (right). The second row shows another fetal face rendered using the same four methods. The third row shows a view of an entire fetus. The bottom row shows a spine rendered using Marching Cubes (left) and oriented splats (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Dataset statistics. All times are in seconds on a 600 MHz Pentium III PC equipped with a GeForce2 GTS graphics board. Rendering times refer to 400 ¢ 400 images. At this resolution our unoptimized ray caster takes between 10 to 20 seconds per image.</figDesc><table><row><cell>We were unable to perform an exact comparison with previous</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Movies in MPEG and QuickTime formats can be found under http://www.cs.huji.ac.il/˜danix/3dus.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work was supported in part by the Izmel Consortium on Image-Guided Therapy, and by the Israel Science Foundation founded by the Israel Academy of Sciences and Humanities. The authors would also like to thank Biomedicom for their assistance.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Baba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jurkovic</surname></persName>
		</author>
		<title level="m">Three-Dimensional Ultrasound in Obstetrics and Gynecology. Progress in Obstetric and Gynecological Sonography Series. The Parthenon Publishing Group</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The contour spectrum</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97<address><addrLine>Phoenix, AZ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="167" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Textured splats for 3D scalar and vector field visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;93</title>
		<editor>Nielson and Bergeron</editor>
		<meeting>Visualization &apos;93</meeting>
		<imprint>
			<date type="published" when="1993-10" />
			<biblScope unit="page" from="261" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Variational design and fairing of spline surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Proc. Eurographics &apos;94)</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="143" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Witkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Terzopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Snakes: Active contour models. International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="321" to="331" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Semi-automatic generation of transfer functions for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Durkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Symposium on Volume Visualization</title>
		<meeting>IEEE Symposium on Volume Visualization<address><addrLine>Research Triangle, NC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Fast volume rendering using a shear-warp factorization of the viewing transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lacroute</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings, Annual Conference Series (Proc. SIGGRAPH &apos;94)</title>
		<imprint>
			<date type="published" when="1994-07" />
			<biblScope unit="page" from="451" to="458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Hierarchical splatting: A progressive refinement algorithm for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;91 Proceedings)</title>
		<editor>T. W. Sederberg</editor>
		<imprint>
			<date type="published" when="1991-07" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="285" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3D surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;87 Proceedings)</title>
		<editor>M. C. Stone</editor>
		<imprint>
			<date type="published" when="1987-07" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Deformable models in medical image analysis: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mcinerney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Terzopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Medical Image Analysis</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="91" to="108" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Visualization of 3D ultrasound data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">R</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">T</forename><surname>Elvins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="50" to="57" />
			<date type="published" when="1993-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Surfels: Surface elements as rendering primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 2000</title>
		<meeting>SIGGRAPH 2000</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="335" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Numerical Recipes in C: The Art of Scientific Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Teukolsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Vetterling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Flannery</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Qsplat: A multiresolution point rendering system for large meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 2000</title>
		<meeting>SIGGRAPH 2000</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="343" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Preprocessing and volume rendering of 3D ultrasonic data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sakas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-A</forename><surname>Schreyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grimm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="47" to="54" />
			<date type="published" when="1995-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Extracting surfaces from fuzzy 3D-Ultrasound data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sakas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Walter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;95 Proceedings, Annual Conference Series</title>
		<editor>R. Cook</editor>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="465" to="474" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<ptr target="http://www.graphics.stanford.edu/software/volpack" />
		<title level="m">The VolPack volume rendering library</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Footprint evaluation for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;90 Proceedings)</title>
		<editor>F. Baskett</editor>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">OpengGL Programming Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Neider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Davis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Addison Wesley Developers Press</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Surface splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
