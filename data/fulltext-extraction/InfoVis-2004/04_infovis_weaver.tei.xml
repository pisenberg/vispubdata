<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Building Highly-Coordinated Visualizations in Improvise</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Weaver</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Madison</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Building Highly-Coordinated Visualizations in Improvise</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: D.2.2 [Software Engineering]: Design Tools and Techniques-User Interfaces</term>
					<term>H.2.3 [Information Systems]: Database Management-Languages</term>
					<term>H.5.2 [Information Systems]: Information Interfaces and Presentation-User Interfaces coordinated queries, coordination, exploratory visualization, multiple views, visual abstraction language</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Improvise is a fully-implemented system in which users build and browse multiview visualizations interactively using a simple shared-object coordination mechanism coupled with a flexible, expression-based visual abstraction language. By coupling visual abstraction with coordination, users gain precise control over how navigation and selection in a visualization affects the appearance of data in individual views. As a result, it is practical to build visualizations with more views and richer coordination in Improvise than in other visualization systems. Building and browsing activities are integrated in a single, live user interface that lets users alter visualizations quickly and incrementally during data exploration.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Visualization systems have matured into full-featured development environments that enable users to build visualizations with multiple coordinated views rapidly. In these systems, users coordinate views either by using a small set of pre-defined coordinations or by writing scripts. The choice between these two approaches is a tradeoff between simplicity and flexibility.</p><p>Improvise is an environment for building and browsing visualizations of relational data. Like other visualization systems, Improvise enables users to load data, create views, specify visual abstractions, and establish coordinations interactively. Unlike other systems, Improvise provides a rich visual abstraction language that can be coupled with a shared-object coordination mechanism, thereby increasing the expressive power of both.</p><p>The primary goal of Improvise is to enhance data exploration by offering users fine-grain control over the appearance of visualized data while preserving their ability to work quickly and easily. Improvise combines a simple, direct coordination mechanism called live properties with a more powerful, indirect coordination mechanism called coordinated queries. The combination is a significant improvement over existing coordination approaches because it enables users to define complex interactive dependencies between the appearance and behavior of views.</p><p>Live properties coordinates views using a symmetric update and notification mechanism to link views and other controls through shared objects. Controls interpret the shared objects as basic formatting information (colors, fonts, etc.), limits to abstract spatial extent (ranges, angles, etc.), data, and data querying operations * e-mail: weaver@cs.wisc.edu (projections, filters, etc.) Visual abstractions are created by projecting and filtering data using expressions that can themselves be defined in terms of shared objects. By editing the expressions used by views to project and filter data, users are able to customize the visual and spatial abstractions that specify what data to draw, how to draw it, and where to draw it in a visualization.</p><p>Improvise is written in Java. Visualizations are saved to and loaded from disk as serialized XML documents. Improvise and the documents it produces are platform-independent.</p><p>This paper proceeds as follows. Section 2 reviews coordination approaches in several visualization systems similar to Improvise. Section 3 describes live properties and coordinated queries. Section 4 describes construction of visual abstractions and coordinations in two Improvise visualizations. Section 5 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED SYSTEMS</head><p>Improvise is similar to DEVise <ref type="bibr" target="#b11">[12]</ref>, Snap-Together Visualization <ref type="bibr" target="#b14">[15]</ref>, and other visualization systems based on the relational data model. These systems follow a recent trend toward interactive construction approaches that employ simple combinations of well-known coordination and view types. Although building small visualizations in these systems is very easy, the number of views and the degree of coordination that can be practically incorporated during data exploration is limited.</p><p>LinkWinds <ref type="bibr" target="#b9">[10]</ref> uses non-view controls to append clauses to queries for filtering purposes. The ability to reference shared objects in coordinated queries has a similar flavor. Whereas LinkWinds has a "track" mode in which mouse drags continuously update coordinated views, views in Improvise are always tightly coupled over all coordinations, including all coordinated queries.</p><p>Given an input table, IVEE <ref type="bibr" target="#b1">[2]</ref> automatically selects appropriate controls (such as range sliders or checkboxes) for each data attribute. Users can create one or more views (scatterplots, geographic maps, or cluster views) and specify projections that map attributes into view parameters. The conjunction of slider selections is used to filter the contents of all views (as well as the contents of the sliders themselves). In Improvise, views can be filtered independently using filter expressions that depend on navigation or selection in any combination of sliders or views.</p><p>Tioga-2 <ref type="bibr" target="#b22">[23]</ref> uses a data flow model to support advanced navigation features such as tunneling (wormhole-like hyperlinks), view cloning, and nested views. DataSplash <ref type="bibr" target="#b16">[17]</ref> adds end-user visualization construction in the form of tuple painting and a zoom layer manager for editing how tuples appear at different levels of magnification. VIQING <ref type="bibr" target="#b15">[16]</ref> is an extension of DataSplash that allows users to express queries by conjoining views into the visual equivalent of projections, selections, and joins. The elements of Improvise visualizations are declarative rather than procedural; users can generate nested views and semantic zoom, but approaches like tunneling and layer management have to be built into views as fixed features that allow little or no customization by the user.</p><p>Polaris <ref type="bibr" target="#b20">[21]</ref> automatically generates multiscale visualizations and the queries needed to draw them using a formal specification language. Zooming in Polaris is conceptually equivalent to traversing an edge of a zoom graph <ref type="bibr" target="#b19">[20]</ref> in which each node corresponds October 10-12, Austin, Texas, USA 0-7803-8779-1/04/$20.00 Â©2004 IEEE IEEE Symposium on Information Visualization 2004 to a particular visual representation in a data cube. Nodes are drawn in a graphical notation that describes the visual query at that point in the graph. Because Improvise users build coordinated queries using custom-defined expressions, complex or unusual visual representations are possible, but simple or common ones cannot be manipulated as quickly or as easily as in Polaris.</p><p>In the coordination model prototyped in CViews <ref type="bibr" target="#b4">[5]</ref>, explicit coordination objects in a coordination space manage visual parameters and access data using a dataflow model to define a particular type of coordination, such as brushing. Views connect to coordination objects through translation functions. The equivalent space in Improvise consists of coordinated query graphs that connect views through navigational parameters, selections, data, and expressions. In this space, coordinations exist implicitly as recognizable patterns of interactive dependence between views, rather than as explicit objects. Translation (spatial transformation, rendering, and so on) is an inherent function of views and is not user-customizable.</p><p>Snap-Together Visualization uses a relational data model that coordinates views using primary key actions. When two views are coordinated, invoking an action in one view causes the other view to perform its corresponding action. Actions are extensible and include loading (of a relation), selection (of tuples), and scrolling (over a list of tuples). Coordinated queries create similar interactive dependencies between views, but allow fine-grain user customization of dependencies between visual encodings as well as data.</p><p>DEVise uses a relational data model to coordinate multiple views of large datasets. Users can create, destroy, coordinate, and specify the contents of views interactively. Its only view-the scatterplotand few coordination types-cursor, visual link, record link, and set link-are quite powerful. However, reproducing common visualization constructions in DEVise frequently involves convoluted chains of linked scatterplots (many of which are undesirable artifacts that must be intentionally hidden offscreen). Coordination graphs of DEVise visualizations reveal that all four coordination types can be reproduced by treating the X and Y ranges of scatterplots as shared objects or as dynamic parameters in simple query expressions. This discovery motivated the design of live properties and coordinated queries in Improvise.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">IMPROVISE</head><p>This section presents the two major parts of the architecture and implementation of user-definable coordination in Improvise. The first, live properties, is a direct coordination mechanism that uses a simple shared object model to create interactive dependencies between views. The second, coordinated queries, is an indirect coordination mechanism in which the data and visual encodings that determine each view's appearance are calculated from user-definable expressions that can depend on interaction in other views.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Live Properties</head><p>Live properties is a user interface architecture for directly coordinating controls-including views, sliders, and other widgetsthrough shared objects called variables. Each control defines one or more live properties, each of which can bind to at most one variable. Live properties may be either active (access and modify variables) or passive (access only). Changes to variables are propagated to controls via their live properties, as shown in figure 1.</p><p>Live properties serve two purposes. First, they are value slots that a control uses to determine its appearance and behavior. For instance, a scatterplot has two range properties that specify which region of the cartesian plane to show, and a color property that specifies the color used to fill its background. Second, live properties act as ports through which controls communicate with each other as a result of interaction. Variables and live properties are strongly typed, and binding is type-matched. Each live property also has a default value which is used by the control when the live property is not bound to any variable.</p><p>Live properties may be thought of as an instance of the Model-View-Controller architecture <ref type="bibr" target="#b10">[11]</ref> with many small models. Similarly, the Abstraction-Link-View paradigm (ALV) <ref type="bibr" target="#b7">[8]</ref> employs an encapsulated communications mechanism between views and data to link views shared by one or more users. However, live properties is not a constraint model (as in ThingLab <ref type="bibr" target="#b3">[4]</ref>). By implementing controls so as to change their live properties only in response to user interaction, potential cycles and deadlocks are avoided.</p><p>Athena MUSE <ref type="bibr" target="#b8">[9]</ref> defines integer values in bounded ranges as global parameters on views ("multidimensional information") and uses bidirectional equality constraints to link parameters to view attributes through reversible linear functions ("declarative constraints"). Variables are like these parameters, but are neither bounded nor limited to integers. Bindings between variables and live properties are like declarative constraints limited to the identity function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Coordinated Queries</head><p>Coordinated queries is a visual abstraction language based on the relational database model. An expression is a tree of operators that calculates the value of an output field using the fields of a input record. Expressions make up query operations that views use to visually encode data records into graphical attributes (as in <ref type="bibr" target="#b12">[13]</ref>):</p><p>â¢ Filters use a single expression to calculate a boolean value for each input record. Views draw records for which this value is true.</p><p>â¢ Projections use one or more expressions to calculate successive fields of an output record for each input record. Views draw records using graphical information (such as position and color) contained in the fields of the output record. This information is often encapsulated in view-specific glyphs.</p><p>Projections and filters are constructed in a tree-based expression editor (figure 2). The user builds each expression top-down, by choosing an operator for each position in the tree. Subexpressions are automatically appended whenever the chosen operator takes arguments. Editing this way takes a little getting used to, but has the advantage of being syntactically constrained. Editing is live; the visualization reflects changes immediately.</p><p>Expressions are composed of eight different kinds of operators. Function operators perform a variety of duties including object construction, type casting, member access, arithmetic, and statistics. Value operators evaluate to a user-edited value of a particular type. Attribute operators evaluate to the value of an input record field. In addition to these three basic kinds of operators, aggregate operators allow the calculation of simple aggregates on tables, constant operators provide easy access to frequently used fixed values  (e.g. pi), and conversion operators perform common numeric conversions between units (e.g. feet to meters). Index operators provide indexed data lookups, by mapping a primary key value of an attribute to a foreign key value of an attribute in a different dataset.</p><p>Indirect coordinations are created using variable operators. Whenever an expression is evaluated, variable operators take on the current value of their corresponding variable. When a control depends directly on a variable that contains a projection or filter, it also depends indirectly on any variables referenced by the expressions of the projection or filter. Through variable operators, expressions can depend not only on the navigation and selection parameters of a visualization, but also on its projections, filters, and datasets. This multi-stage dependence is used for aggregation, grouping, indexing, nested views, and other kinds of queries. <ref type="figure" target="#fig_2">Figure 3</ref> shows how interaction propagates through one level of dependence in an indirect coordination. A shortcoming of the current implementation is that it does not detect or handle cycles in coordinated query graphs. Each Improvise visualization stores schemas, data, and query operations in a central respository called the lexicon. To access these objects, views define live properties that bind to variables of the desired lexical type. The user assigns the value of a lexical variable by choosing from available objects of the same type in the lexicon. To specify the visual abstraction of a view, the user binds lexical variables to the view's data, projection, and filter properties.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">BUILDING COORDINATED QUERIES</head><p>The combination of live properties and coordinated queries enables Improvise users to build highly-coordinated visualizations with complex visual encodings. This section describes how a variety of well-known coordination types are reproduced in the construction of two typical Improvise visualizations, shown in figures 4 and 11. Proceeding from navigation coordinations through selection coordinations to semantic zooming, each coordination is introduced in terms of related research. <ref type="figure" target="#fig_0">Figures 5-10</ref> and 12-16 capture the corresponding coordinated query graphs used in Improvise to help users visualize coordination structure as they work.</p><p>Sliders and other controls are often useful for manipulating individual parameters of a visualization. In Dynamic Queries <ref type="bibr" target="#b0">[1]</ref>, non-spatial data attributes can be manipulated using range sliders. LinkWinds provides controls that can be coordinated with views for dynamic filtering. Users browse Improvise visualizations by interacting with views and non-data controls such as checkboxes, textfields, and sliders. Improvise axis controls are independent of scatterplots, but perform the usual roles of marking, labeling, and handling interaction in one dimension. <ref type="figure" target="#fig_3">Figure 5</ref> shows how horizontal and vertical axes can be coordinated with a scatterplot.  <ref type="figure" target="#fig_4">figure 4A</ref>). Panning or zooming in the T (or X) axis changes the value of the T (or X) range variable, which causes the plot to translate or stretch horizontally (or vertically). Manipulating the plot changes both variables, causing both axes to update appropriately.</p><p>Views can also be coordinated with each other. Synchronized scrolling is a common form of coordination in which two views are constrained to show the same data items or the same region of a coordinate space. For instance, scatterplots in DEVise can be coordinated with visual links to show the same range of X and/or Y. In Snap-Together Visualization, synchronous scrolling between lists of items is achieved by coordinating their scroll actions.</p><p>Plots can be coordinated with each other in the same way that they coordinate with axis controls: through their range properties. <ref type="figure">Figure 6</ref> shows three plots in which scrolling is synchronized horizontally. This is done by binding the same range variable to the X range property of all three views. The flexibility of propertyvariable binding makes it simple to construct numerous variations of synchronized scrolling, including two-dimensional (sharing X and Y ranges), horizontal (sharing only the X range), vertical (sharing only the Y), and crossed (one view shows XY, the other YX).</p><p>Scatterplot matrices <ref type="bibr" target="#b2">[3]</ref> show an N-dimensional space as a stairstep arrangement of 2-D scatterplots. Synchronized scrolling in this case is complicated by the need to invert the coordinates of some plots in order to produce the expected navigation behavior. <ref type="figure" target="#fig_5">Figure 7</ref> shows how inverting the coordinates of a plot is a simple matter of swapping the range variables bound to its live properties. (Building plot matrices is straightforward but tedious; Improvise provides shortcuts for creating common multiview constructions.)</p><p>Coordination using the overview+detail <ref type="bibr" target="#b18">[19]</ref> technique differs from synchronized scrolling in that the entire area shown in a detail view is synchronized with a subarea of an overview. Cursors in <ref type="figure">Figure 6</ref>: Three scatterplots with synchronized horizontal scrolling but independent vertical scrolling (see <ref type="figure" target="#fig_4">figure 4B)</ref>. All three plots update in unison whenever the value of T changes.</p><p>DEVise are an example of this technique in which a selection box in a scatterplot has the same X and Y ranges as some other scatterplot.</p><p>In Improvise, portals (not to be confused with portals in DataSplash) are draggable controls for selecting a rectangular region. (Portals can also draw data, acting as lenses above the plots that contain them.) <ref type="figure" target="#fig_6">Figure 8</ref> shows how the X and Y ranges of a detail plot are coordinated with the ranges of a portal inside an overview plot. This construction can be chained to create multiple levels of detail (as in <ref type="bibr" target="#b17">[18]</ref>). Omitting the two X (or two Y) range variables produces vertical (or horizontal) versions of overview+detail.</p><p>Another use of one-dimensional portals is in a perceptual sliders,   <ref type="figure" target="#fig_4">figure 4D)</ref>.</p><p>The portal covers the region in the overview (its context) that corresponds to the full region visible in the detail view.</p><p>which allow users to select data by thinking visually while acting spatially. <ref type="figure">Figure 9</ref> shows how a plot is coordinated with a portal in a gradient view to create a perceptual slider based on color. The projection expression used by the plot visually encodes points along an ion trajectory by mapping (normalized) time into the same color gradient shown in the gradient view. The filter expression used by the plot elides points that would fall outside the range of color selected by the portal. Although the user perceives the position of the portal as a selection on color, the selection is actually on a range of time values. (Perceptual sliders are similar to visualization sliders <ref type="bibr" target="#b6">[7]</ref>, but present a set of possible perceptual values instead of a distribution of values that actually occur in the data.) Nested views enable exploration of a group of related datasets by displaying each dataset in its own view, all of which are contained in a larger view. In DataSplash, portals are clickable hyperlink windows into other data spaces. In Improvise, nested views are special glyphs in which the value being visually encoded is an entire dataset. Because all Improvise views use projection expressions to generate glyphs, they all can contain nested views. In <ref type="figure" target="#fig_0">figure 10</ref>, a list visually encodes data files as a filename next to an icon which shows the data as 3-D points. The projection expression that draws each list item generates a nested 3-D view glyph by applying a second projection to the data from the corresponding file.</p><p>North and Shneiderman <ref type="bibr" target="#b13">[14]</ref> have described a taxonomy of strategies for coordinating multiple views in terms of selecting items and navigating views. In Improvise, a selection is a bitstring that indicates selected records by the integer identifiers assigned to them when data is accessed during visualization. Decoupling selections from data in this way separates coordination of views on data from coordination of views on selections. This approach makes it possible to coordinate multiple views using multiple independent selections of the same dataset in a single visualization.</p><p>Shared selection is a form of brushing that allows the user to select an item in a view, and see the corresponding item in other views. In XGobi <ref type="bibr" target="#b5">[6]</ref>, users can brush items in multiple scatterplots <ref type="figure">Figure 9</ref>: Coordination between a scatterplot and a gradient slider (see <ref type="figure" target="#fig_4">figure 4E)</ref>. The scatterplot draws ovals colored by mapping time into a color gradient, relative to minimum and maximum values, but only for relative times in the range selected by the slider portal. of high-dimensional data. Brushing-and-linking in Snap-Together Visualization uses select actions to coordinate selections in two views of the same data. <ref type="figure" target="#fig_0">Figure 12</ref> shows how two Improvise views are coordinated to share a selection over data that describes the 83 counties in Michigan. The scatterplot draws counties as polygons read from shapefiles; the table view draws each county as a row of text with a nested bar plot. Selecting items in either view (by click-  ing shapes or rows) changes the selection variable, causing both views to redraw with the selected items highlighted.</p><p>Users often want to select from multiple related datasets (or subsets of one large dataset) in a single visualization, such as during analysis of a sequence of experiments. Selecting a dataset in one view to show in another view is a form of drill-down. For instance, Snap-Together Visualization supports drill-down by coordinating a select action in one view with a load action in another view.</p><p>Selection-dependent loading of data in Improvise is performed using an expression that is defined in terms of (1) data that lists the names of (or otherwise identifies) loadable datasets, and (2) a selection on that data. In <ref type="figure" target="#fig_0">figure 13</ref>, the election results for each office are stored in separate files. The expression constructs the name of a file to load using the name of the selected office. Whenever the user selects an office, the visualization loads data from the corresponding file. Using expressions, the user can specify a file, URL, or database as the source of data to visualize.</p><p>Selection-dependent filtering is an asymmetric version of shared selection in which the filtered view differentiates between selected <ref type="figure" target="#fig_0">Figure 13</ref>: Coordinated query graph for selection-dependent loading of data (see <ref type="figure" target="#fig_0">figure 11B</ref>). An index on the races dataset maps the record identifier of the first selected race into a filename. The "Results" view displays an info (an expression that calculates a dataset) that reads data from the corresponding file of voting results.</p><p>and unselected items by not drawing unselected items instead of highlighting selected ones. DEVise uses this technique in the form of record links that cause a "destination" view to render only those tuples that are visible in a "source" view.</p><p>Whereas selection-dependent filtering determines the visibility of items, selection-dependent projection determines the appearance <ref type="figure" target="#fig_0">Figure 14</ref>: Views can be indirectly coordinated through filters or projections that depend on selection variables (see <ref type="figure" target="#fig_0">figure 11C, 11D)</ref>. The filter expression states that "for each candidate, draw it only if it is selected." The projection expression states that "for each county, draw a rectangle if it is selected, a triangle otherwise." The height of each rectangle is an aggregate of the dataset created by grouping the overall election results by the corresponding county.</p><p>of items. Most visualization systems can coordinate two views so as to highlight the items in one view that correspond with items selected in the other view. Highlighting is usually a fixed function of the type of view, typically implemented as a special background color. In XGobi, points and lines in scatterplots can be brushed using glyphs as well as color.</p><p>By using expression-based projections to determine the entire visual encoding of items in views, highlighting in Improvise is a user-customizable visual differentiation of selected and unselected items. Highlighting of items can therefore appear as a special background color, reverse video, a special font, or just about any variation on color or other visual attributes the user can dream up. Customizable highlighting can also be used to avoid conflict with normal visual encoding of items. In figure 14, the "Candidate Shares" pie chart shows vote shares for candidates selected in the "Candidates" table view. Although both views display the same data, the filtered view elides unselected candidates using an expression defined in terms of the selection. The result is a kind of multi-item details-on-demand that allows comparison of details for selected subsets of items. The "Votes v. County" scatterplot highlights counties based on whether they are selected in the "Counties" table view. Although the filter and projection expressions in this example depend on independent selections (one of candidates, one of counties), it is easy to extend them to depend on conjunctions or disjunctions of selections. The effect would be similar to additive encoding of selection highlighting in interactive externalizations <ref type="bibr" target="#b21">[22]</ref>. Layered plots (such as piles in DEVise) enable users to visualize multiple datasets using different visual encodings in a single plot. A common use of layering is to visualize a single dataset using a layer to highlight selected items in a lower layer. In Improvise, scatterplots have multiple layers each defined by its own data, projection, and filter properties. <ref type="figure" target="#fig_0">Figure 15</ref> shows how a four layer scatterplot draws a map using four different projections of two data sets. The bottom layer draws all counties. The top three layers fill, highlight, and label only the counties which are involved in the selected election. Drawing labels in the highest layer keeps them from being obscured by shapes in underlying layers. The combination of layering and compound glyphs provides extensive control over the z-order of items drawn in plots.</p><p>Semantic zoom is a form of details on demand that lets the user see different amounts of detail in a view by zooming in and out. For instance, the layer manager in DataSplash allows the user to select the amount of detail by changing a view's "altitude". The view draws data using the visual encodings visible at the chosen altitude. Semantic zoom in Improvise uses expressions that calculate glyphs as a function of a plot's own X and Y ranges. <ref type="figure" target="#fig_0">Figure 16</ref> shows how the county map plot depends on two ranges both directly and indirectly. Although this example demonstrates synchronized zoom between plot layers, the expressions could be edited to make the layers change detail at different zoom levels. One-dimensional zooming and multiple levels of detail are also straightforward.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>In Improvise, users interactively build and browse multiview visualizations using a simple shared-object coordination mechanism coupled with a flexible, expression-oriented visual abstraction language. Improvise is a fully-implemented, self-contained Java application that has been used to create complex visualizations of election results, particle trajectories, network loads, county maps, music collections, the chemical elements, and even the dynamic coordination structure of its own visualizations during construction <ref type="figure" target="#fig_0">Figure 16</ref>: Semantic zoom in the county map (see <ref type="figure" target="#fig_0">figure 11F)</ref>. At sufficient zoom, the top layer draws a centered label and a scaled, nested bar plot for all counties. To make the top layer easier to read, the fill layer reduces the saturation of the winning candidate's party color at the same zoom level.</p><p>and data exploration.</p><p>Highly-coordinated visualizations appear to be much easier to build in Improvise than other visualization systems because views are connected indirectly through a coordination model in which navigational parameters, selections, data, and visual encodings are shared objects that can be edited on-the-fly. Unlike other visualization systems, there is no need to link views pairwise or in sequence to achieve complex coordination semantics. By way of example, the bottom half of the visualization in figure 4 contains ten scatterplots, four portals, and 13 axes but uses only eight numeric ranges for navigational coordination.</p><p>A major goal for Improvise has been to increase coordination flexibility substantially without significantly decreasing ease-ofuse, as compared to similar systems like DEVise and Snap; to make simple coordinations (like synchronized scrolling) easy, and complex coordinations (like semantic zoom) possible. Although comparative user studies will be needed to determine if this goal has been achieved, the possibilities for highly-coordinated visualization in Improvise appear to be limited only by user creativity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ACKNOWLEDGMENTS</head><p>Thanks to Miron Livny and Raghu Ramakrishnan for support and advice, and Kevin Beyer and Kent Wenger for many discussions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Direct coordination. (1) A control modifies the value of one of its (active) live properties in response to interaction. (2) The live property assigns the new value to its bound variable. (3) The variable sends a change notification to all live properties bound to it. (4) The live properties notify their respective parent controls of the change. The controls update themselves appropriately.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>The lexicon editor, showing a projection that generates rectangle scatterplot glyphs. Users can select individual operators in an expression for modification (A), or copy-and-paste/drag-and-drop entire subexpressions. Cloning whole objects (B) allows users to experiment with variations of expressions quickly and reversibly. Large libraries can be built up for reuse or rapid switching during data exploration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Indirect coordination. (1) An upstream object propagates a value change to a variable. (2) The variable notifies all lexical values that contain expressions which reference the variable. (3) Each expression notifies variables to which it is assigned as a value. (4) The variable sends a change notification to all downstream objects. Upstream and downstream objects can be live properties (as in figure 1), or other lexical values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Coordination graph for a scatterplot with axis controls (see</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Visualization of a simulated ion trajectory in a cubic ion trap. (A) Axis controls label a plot and provide a way to change X and time independently. (B) Horizontal synchronized scrolling coordinates three time series plots showing the X, Y, and Z positions of ions over time. (C) A scatterplot matrix shows the trajectory as seen from three orthogonal sides of the ion trap. (D) An overview uses a portal (circled) to select the extent of a detail view. (E) A perceptual slider enables users to select a visible range of time using a color gradient instead of numeric values. (F) The names of the available trajectory datasets are accompanied by nested views that project each trajectory into a 3-D view.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Coordination graph for a 3-D scatterplot matrix (see figure 4C). The shared Z variable synchronizes vertical navigation in the XZ plot with horizontal navigation in the ZY plot.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Coordination graph for overview+detail (see</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 :</head><label>10</label><figDesc>Coordinated query graph for a list of available datasets (seefigure 4F). Each item in the list consist of a formatted file name and a nested 3-D plot. These plots are navigationally coordinated with the main 3-D stereogram through variable operators (A).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 11 :</head><label>11</label><figDesc>Visualization of election results in Michigan from 1998 to 2002. (A) Shared selection of counties between a table view and a map. (B) Selecting a race causes the election results for that race to be loaded (from a file) and shown throughout the visualization. (C) A pie chart uses a filter to compare results for selected candidates only. (D) A scatterplot highlights selected counties with gray bars. (E) A four-layer scatterplot colors counties by winning candidate party. (F) Semantic zoom labels counties with nested bar plots at sufficient zoom.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 12 :</head><label>12</label><figDesc>Coordination graph for shared selection between a table view and a scatterplot (seefigure 11A). Selection of items in either view causes both views to redraw their shared data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 15 :</head><label>15</label><figDesc>Coordinated query graph for a four layer plot (see figure 11E). The top three layers draw different projections of the same data. All four layers invoke user-defined expressions (not shown) to load county shapefiles for drawing.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Visual information seeking: Tight coupling of dynamic query filters with starfield displays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Ahlberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;94 Conference: Human Factors in Computing Systems</title>
		<meeting>CHI &apos;94 Conference: Human Factors in Computing Systems<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1994-04" />
			<biblScope unit="page" from="479" to="480" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">IVEE: An environment for automatic creation of dynamic queries applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Ahlberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Wistrand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;95</title>
		<meeting>CHI &apos;95<address><addrLine>Denver, CO</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995-05" />
			<biblScope unit="page" from="15" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dynamic graphics for data analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Huber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">S</forename><surname>Cleveland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Wilks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Stat. Science</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The programming language aspects of ThingLab, a constraint-oriented simulation laboratory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Borning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="353" to="367" />
			<date type="published" when="1981-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A model and software system for coordinated and multiple views in exploratory visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadia</forename><surname>Boukhelifa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Rodgers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Visualization</title>
		<imprint>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="258" to="269" />
			<date type="published" when="2003-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interactive high-dimensional data visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Buja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dianne</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deborah</forename><forename type="middle">F</forename><surname>Swayne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational and Graphical Statistics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="78" to="99" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Data visualization sliders</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stephen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Eick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST &apos;94</title>
		<meeting>UIST &apos;94<address><addrLine>Monterey, CA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994-11" />
			<biblScope unit="page" from="119" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The abstraction-link-view paradigm: Using constraints to connect user interfaces to applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralph</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;92</title>
		<meeting>CHI &apos;92<address><addrLine>Monterey, CA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1992-05" />
			<biblScope unit="page" from="335" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A construction set for multimedia applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">E</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><forename type="middle">M</forename><surname>Sasnett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><forename type="middle">S</forename><surname>Ackerman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="37" to="43" />
			<date type="published" when="1989-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">LinkWinds: Interactive scientific data analysis and visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allan</forename><forename type="middle">S</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">L</forename><surname>Berkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">N</forename><surname>Orton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="43" to="52" />
			<date type="published" when="1994-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A cookbook for using the model-viewcontroller user interface paradigm in Smalltalk-80</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename><surname>Krasner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>Pope</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Object-Oriented Programming</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="26" to="49" />
			<date type="published" when="1988-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">DEVise: Integrated querying and visualization of large datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miron</forename><surname>Livny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raghu</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Beyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donko</forename><surname>Donjerkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shilpa</forename><surname>Lawande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jussi</forename><surname>Myllymaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kent</forename><surname>Wenger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGMOD &apos;97</title>
		<meeting>SIGMOD &apos;97<address><addrLine>Tucson, AZ</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="301" to="312" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Automating the design of graphical presentations of relational information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jock</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="110" to="141" />
			<date type="published" when="1991-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">A taxonomy of multiple window coordinations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
		<idno>CS-TR-3854</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
		<respStmt>
			<orgName>University of Maryland Department of Computer Science</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">A User Interface for Coordinating Visualization Based On Relational Schemata: Snap-Together Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher Loy</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">VIQING: Visual Interactive QueryING</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Olston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Stonebraker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th IEEE Symposium on Visual Languages</title>
		<meeting>the 14th IEEE Symposium on Visual Languages<address><addrLine>Halifax, Nova Scotia, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1998-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Olston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allison</forename><surname>Woodruff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vuk</forename><surname>Ercegovac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mybrid</forename><surname>Spalding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Stonebraker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Datasplash</surname></persName>
		</author>
		<title level="m">Proceedings of SIGMOD &apos;98</title>
		<meeting>SIGMOD &apos;98<address><addrLine>Seattle, WA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1998-06" />
			<biblScope unit="page" from="550" to="552" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Image browser taxonomy and guidelines for designers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Catherine</forename><surname>Plaisant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="21" to="32" />
			<date type="published" when="1995-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The eyes have it: A task by data type taxonomy for information visualizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Visual Languages &apos;96</title>
		<meeting>IEEE Symposium on Visual Languages &apos;96<address><addrLine>Boulder, CO</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996-09" />
			<biblScope unit="page" from="336" to="343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Multiscale visualization using data cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diang</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Infovis 2002</title>
		<meeting>Infovis 2002<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002-10" />
			<biblScope unit="page" from="7" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Polaris: A system for query, analysis, and visualization of multi-dimensional relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diang</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="65" />
			<date type="published" when="2002-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Characterizing interactive externalizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lisa</forename><surname>Tweedie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;97</title>
		<meeting>CHI &apos;97<address><addrLine>Atlanta, GA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997-03" />
			<biblScope unit="page" from="375" to="382" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Navigation and coordination primitives for multidimensional visual browsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allison</forename><surname>Woodruff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Stonebraker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Caroline</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jolly</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Wisnovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cimarron</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd IFIP 2.6 Working Conference on Visual Database Systems</title>
		<editor>S. Spaccapietra and R. Jain</editor>
		<meeting>the 3rd IFIP 2.6 Working Conference on Visual Database Systems<address><addrLine>Lausanne, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>Chapman &amp; Hall</publisher>
			<date type="published" when="1995-03" />
			<biblScope unit="page" from="360" to="371" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
