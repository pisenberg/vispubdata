<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Non-Euclidean Spring Embedders *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
							<email>kobourov@cs.arizona.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Wampler</surname></persName>
							<email>wamplerk@cs.arizona.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Non-Euclidean Spring Embedders *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>G.2.2 [Discrete Mathematics]: Graph Theory-Graph Algorithms; H.5.0 [Information Systems]: Information Interfaces and Presentation-General I.3.6 [Computing Methodologies]: Computer Graphics-Methodology and Techniques force-directed algorithms</term>
					<term>spring embedders</term>
					<term>non-Euclidean geometry</term>
					<term>hyperbolic space</term>
					<term>spherical space</term>
					<term>graph drawing</term>
					<term>information visualization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a method by which force-directed algorithms for graph layouts can be generalized to calculate the layout of a graph in an arbitrary Riemannian geometry. The method relies on extending the Euclidean notions of distance, angle, and force-interactions to smooth non-Euclidean geometries via projections to and from appropriately chosen tangent spaces. In particular, we formally describe the calculations needed to extend such algorithms to hyperbolic and spherical geometries.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Some of the most flexible algorithms for calculating layouts of simple undirected graphs belong to a class known as forcedirected algorithms. Also known as spring embedders, such algorithms calculate the layout of a graph using only information contained within the structure of the graph itself, rather than relying on domain-specific knowledge. Graphs drawn with these algorithms tend to be aesthetically pleasing, exhibit symmetries, and tend to produce crossing-free layouts for planar graphs.</p><p>However, existing force-directed algorithms are restricted to calculating a graph layout in Euclidean geometry, typically R 2 , R 3 , and more recently R n for larger values of n. There are, however, cases where Euclidean geometry may not be the best option: certain graphs may be known to have a structure which would be best realized in a different geometry, such as on the surface of a sphere or on a torus. Furthermore, it has also been noted that certain non-Euclidean geometries, specifically hyperbolic geometry, have properties which are particularly well suited to the layout and visualization of large classes of graphs <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>.</p><p>We present a method by which a force-directed algorithm can be generalized so that it can compute a graph layout in any of a large class of geometries (known as Riemannian geometries), so long as the mathematics describing how the geometries behave are well described. Because of the partic-ular usefulness of hyperbolic geometry and spherical geometry, with respect to graph drawing, we also present these mathematical properties for the case of H 2 , two dimensional hyperbolic space and S 2 , spherical space. Our method relies on extending the Euclidean notions of distances and angles to Riemannian geometries via projections to and from appropriately chosen tangent spaces.</p><p>From a practical point of view, the hyperbolic and spherical cases are fairly straightforward and we have implemented both of them. Thus, we are able to compare layouts obtained with the traditional Euclidean force-directed methods and those obtained with the generalized force-directed methods in hyperbolic space and in spherical space, such as those in <ref type="figure" target="#fig_0">Fig. 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Force-Directed Layouts</head><p>Force-directed algorithms are a well-known and powerful tool for laying out arbitrary graphs <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b7">8]</ref>. Such methods define an objective function which maps each graph layout into a number in R + representing the energy of the layout. Generally, this energy function is defined in such a way that low energies correspond to layouts in which adjacent nodes are near some pre-specified distance from each other, but in which non-adjacent nodes are well-spaced. A layout for a graph is then calculated by finding a (often local) minimum of this objective function.</p><p>One particularly useful way to find such a local minimum is through a gradient descent method. In this model we calculate forces (often via the negative gradient of the energy function) which result from the interaction between the nodes in the graph. Generally, there are repulsive forces between all nodes, but also attractive forces between nodes which are adjacent <ref type="bibr" target="#b3">[4]</ref>. Alternatively, forces between the nodes can be computed based on their graph distance, as determined by the lengths of shortest paths between them <ref type="bibr" target="#b7">[8]</ref>. The nodes are then moved according to the net force acting upon them, and the process is repeated until a steady state is reached or a maximum number of iterations is exceeded.</p><p>While early force-directed algorithms work well for small graphs, recently such algorithms have been extended to deal with graphs with hundreds of thousands of vertices using multi-scale and spectral techniques <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b8">9]</ref>.</p><p>With few exceptions, spring embedders thus far have been restricted to n-dimensional Euclidean space. This restriction is due in part to the simplicity of the algorithms when formulated in Euclidean space, and in part to a reliance on the convenient structure of Euclidean space with well-defined notions of distances and angles. Some work, however, has been done on constraining force-directed algorithms to the surface of three-dimensional objects <ref type="bibr" target="#b14">[15]</ref>. This work is based on a differential equation formulation of the motion of the nodes in the graph, and is flexible in that it allows a layout on almost any object, even multiple objects. Since the force calculations are made in Euclidean space, however, this October 10-12, Austin, Texas, USA 0-7803-8779-1/04/$20.00 Â©2004 IEEE IEEE Symposium on Information Visualization 2004 method is inapplicable to certain geometries (e.g., hyperbolic geometry).</p><p>Another example of graph embedding within a non-Euclidean geometry is described in the context of generating spherical parameterizations of 3D meshes <ref type="bibr" target="#b5">[6]</ref>. This method produces such an embedding using a generalization to spherical space of planar methods for expressing convex combinations of points. This results in a non-linear system of equations in three dimensions which when solved yields an embedding on the unit sphere. Although no specific way of solving this system of equations is described, it is likely that certain ways of doing so would operate in a manner similar to the method described in this paper, though the former is not readily generalizable to non-spherical geometries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Hyperbolic Graph Drawing</head><p>Much of the work on non-Euclidean graph drawing has been done in hyperbolic space <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b12">13]</ref> which offers certain advantages over Euclidean space. For example, in hyperbolic space it is possible to compute a layout for a complete tree with both uniform edge lengths and uniform distribution of nodes. Furthermore, some of the embeddings of hyperbolic space into Euclidean space naturally provide a fish-eye view of the space, which is useful for "focus+context" visualization <ref type="bibr" target="#b9">[10]</ref>. Previous algorithms for calculating the layouts of graphs in hyperbolic space, however, are either restricted by their nature to the layout of trees and tree-like graphs, or to layouts on a lattice.</p><p>The hyperbolic tree layout algorithms function on the principle of hyperbolic sphere packing, and operate by making each node of a tree, starting with the root, the center of a sphere in hyperbolic space. The children of this node are then given positions on the surface of this sphere and the process recurses on these children. By carefully computing the radii of these spheres it is possible to create aesthetically pleasing layouts for the given tree. Although some applications calculate the layout of a general graph using this method, the layout is calculated using a spanning tree of the graph and the extra edges are then added in without altering the layout <ref type="bibr" target="#b11">[12]</ref>. This method works well for tree-like and quasi-hierarchical graphs, or for graphs where domainspecific knowledge provides a way to create a meaningful spanning tree. However, for general graphs (e.g., bipartite or densely connected graphs) and without relying on domain specific knowledge, the tree-based approach may result in poor layouts.</p><p>Methods for generalizing Euclidean geometric algorithms to hyperbolic space, although not directly related to graph drawing, have also been studied <ref type="bibr" target="#b1">[2]</ref>. It is shown that many algorithms which operate in Euclidean space can be extended to hyperbolic space by exploiting the properties of a Euclidean model of the space (such as the Beltrami-Klein or PoincarÃ©). Our work follows a similar vein in that we use the PoincarÃ© model to implement the hyperbolic case of out technique, though it differs in that this mapping alone is not sufficient, as the notions of distance and linearity in the PoincarÃ© model do not match their Euclidean counterparts.</p><p>Hyperbolic and spherical space have also been used to display self-organizing maps in the context of data visualization <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b15">16]</ref>. These methods extend the traditional use of a regular (Euclidean) grid, on which the self-organizing map is created, with a tessellation in spherical or hyperbolic space. An iterative process is then used to adjust which elements in the data-set are represented by the intersections. Although the hyperbolic space method seems a promising way to display high-dimensional data-sets, the restriction to a lattice is often undesirable for graph visualization.</p><p>3 Non-Euclidean Spring Embedding</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basics of Riemannian Geometry</head><p>Current implementations of force-directed algorithms perform their calculations in R n , the standard Euclidean space. Euclidean geometry has properties which afford many conveniences for calculating a graph layout with a force-directed method. In particular, Euclidean space has a very convenient structure; it is easy to define distances and angles, and the relationship between the vector representing the net force on an object and the appropriate motion of that object is quite straightforward.</p><p>A non-Euclidean geometry does not afford all of the conveniences above, so it is more difficult to define how the forces acting upon a graph should be calculated, and how those forces should affect the layout of the graph. There is, however, a straightforward way to do this, provided we restrict ourselves to geometries which are smooth.</p><p>Such geometries are known as Riemannian geometries, and while they have less convenient structure than Euclidean geometry, they retain many of the characteristics which are useful for force-directed graph layouts. A Riemannian manifold M has the property that for every point x â M , the tangent space TxM is an inner product space; see <ref type="figure" target="#fig_1">Fig. 2</ref>. This means that for every point on the manifold, it is possible to define local notions of length and angle.</p><p>Using the local notions of length we can define the length of a continuous curve Î³ :</p><formula xml:id="formula_0">[a, b] â M by length(Î³) = b a ||Î³ (t)||dt.</formula><p>This leads to a natural generalization of the concept of a straight line to that of a geodesic, where the geodesic between two points u, v â M is defined as a continuously differentiable curve of minimal length between them. These geodesics in Euclidean geometry are straight lines, and in spherical geometry they are arcs of great circles. We can similarly define the distance between two points, d(x, y) as the length of a geodesic between them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Application to Spring Embedders</head><p>As mentioned above, one of the convenient properties of Riemannian manifolds is that at every point there exists a wellstructured tangent space. We utilize these tangent spaces to generalize spring embedders to arbitrary Riemannian geometries.</p><p>In Euclidean space the relationship between a pair of nodes is defined along lines: the distance between the two nodes is the length of the line segment between them and forces between the two nodes act along the line through them. These notions of distance and forces can be extended to a Riemannian geometry by having these same relationships be defined in terms of the geodesics of the geometry, rather than in terms of Euclidean lines.</p><p>The tangent space is also useful in dealing with the interaction between one point and several other points in non-Euclidean geometries. Consider three points x, y, and z in a Riemannian manifold M where there is an attractive force from x to y and z; see <ref type="figure" target="#fig_2">Fig. 3</ref>.</p><p>As can be easily seen in the Euclidean case (but also true in general) the net force on x is not necessarily in the direction of y or z, and thus the natural motion of x is along neither the geodesic toward y, nor that toward z. Determining the direction x will move requires the notion of angle. Since the tangent space at x, being an inner product space, has enough structure to define lengths and angles, we do the computations for calculating the forces on x in TxM . In order to do this, we define two functions for every point x â M as follows:</p><formula xml:id="formula_1">Ïx : M â TxM Ï â1 x : TxM â M.</formula><p>These two functions map points in M to and from the tangent space of M at x, respectively. We require that Ïx and Ï â1</p><p>x satisfy the following constraints:</p><formula xml:id="formula_2">1. Ï â1 x (Ïx(y)) = y for all y â M 2. ||Ïx(y)|| = d(x, y)</formula><p>3. Ïx preserves angles about the origin Using these functions it is now easy to define the way in which the nodes of a given graph G = (V, E) interact with each other through forces. In the general framework for this algorithm we consider each node individually, and calculate its new position based on the relative locations of the other nodes in the graph (repulsive forces) and on its adjacent edges (attractive forces). Given a node n â V (G) with position x we use Ïx to map the positions of the relevant nodes of G into TxM (nodes that are used in computing x's new location). A standard force equation can then be used to calculate the force, f upon n as a vector in TxM . Given the vector in TxM , the new position, x of n in TxM is calculated using standard techniques, typically by multiplying f by a scalar. The desired position of n in M is then given by Ï <ref type="bibr">â1</ref> x (x). Pseudo-code for this process is summarized in <ref type="figure" target="#fig_4">Fig. 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Hyperbolic Geometry</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Motivation</head><p>One of the most useful applications for our non-Euclidean force-directed method is that it allows the layout of a general graph to be calculated in hyperbolic space (space of constant negative curvature). This provides a functionality beyond current hyperbolic graph layout techniques. Such functionality is desirable because of both the geometric properties of hyperbolic space and of the properties of some of the more common ways of mapping hyperbolic geometry into Euclidean space.</p><p>Hyperbolic geometry is particularly well suited to graph layout because it has "more space" than Euclidean geometry -in the same sense that spherical geometry has "less generic initial layout(G) while not done do foreach n â G do  space". To illustrate this, consider the relationship between the radius and circumference of a circle in a two-dimensional geometry. In Euclidean geometry the relationship is linear with a factor of 2Ï. In spherical geometry, however, the circumference is bounded above by a constant (the circumference of a great circle on the sphere). With hyperbolic geometry the opposite is the case; the circumference of a circle increases exponentially with its radius.</p><p>The applicability of this geometric property to graph layout is well illustrated with the example of a tree. The number of nodes at a certain depth in the tree typically increases exponentially with the depth. Thus, layouts in Euclidean space result in characteristic long edges near the root and short edges near the leaves. In hyperbolic space, however, it is possible to layout the tree with a uniform distribution of the nodes and with uniform edge lengths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Hyperbolic Projections</head><p>In order to display a layout in hyperbolic geometry, it is necessary to map the figure into the (two-dimensional) Euclidean geometry of a computer monitor. There are numerous ways of doing this, two of the most common being the PoincarÃ© disk and Beltrami-Klein projections. In both of these cases the hyperbolic space is mapped onto the open unit disk {z â R 2 : |z| &lt; 1}. To obtain such projections it is necessary to distort the space, which in these cases takes the form of compressing the space near the boundary of the unit disk, giving the impression of a fish-eye view. This naturally provides a useful focus+context technique for visualizing the layouts of the graph; see <ref type="figure" target="#fig_5">Fig. 5</ref> and <ref type="figure" target="#fig_6">Fig. 6</ref>.</p><p>In the Beltrami-Klein projection straight lines are mapped to straight lines, but angles are not necessarily preserved. Thus, each line in hyperbolic space is mapped to a chord of the unit disk, and two lines are non-intersecting if their associated chords are non-intersecting. Furthermore, the distance between two points, (x, y) and (u, v), in the Beltrami-Klein model is not given by their Euclidean distance, but rather by</p><formula xml:id="formula_3">arccos 1 â xu â yv (1 â x 2 â y 2 )(1 â u 2 â v 2 )</formula><p>.</p><p>The PoincarÃ© disk model preserves angles, but distorts lines. A line in hyperbolic space is mapped to a circular arc  which intersects the unit circle at right angles (chords passing through the origin are considered to be such arcs). As with the Beltrami-Klein model, distances in the projection are not equal to the the hyperbolic distances between the points. The PoincarÃ© disk model also compresses the space slightly less at the edges, which in some cases can have the advantage of allowing a better view of the context around the center of projection. In this paper we focus on an implementation which uses the PoincarÃ© disk model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Tangent Space Mapping</head><p>There are many possible ways to compute the mapping to and from the tangent space. Here we present the details about one such mapping, which we also implemented. As illustrated in <ref type="figure" target="#fig_4">Fig. 4</ref>, the problem reduces to defining the mappings Ïx and Ï <ref type="bibr">â1</ref> x so that they meet the three criteria from Section 3.1.</p><p>Internally, each node in the graph is assigned a position z = (x, y) within the unit disk, representing the PoincarÃ© coordinates of that node. Using the PoincarÃ© coordinates for the positions of points allows us to take advantage of the property that in a PoincarÃ© projection angles are preserved and circles and lines are mapped to circles and lines. Since hyperbolic space is uniform, we can 'recenter' the projection about any point, z0, by applying a conformal (angle preserving) mapping which maps z0 to the origin, the boundary of the unit circle to itself, and which maps circles and lines to circles and lines. By treating the position of the node as a complex number, we can define such a mapping as the linear fractional transformation:</p><formula xml:id="formula_4">fz 0 (z) = z â z0 1 âz0z .</formula><p>It is also easy to compute the inverse of this function:</p><formula xml:id="formula_5">f â1 z 0 (z) = âz â z0 âz0z â 1 .</formula><p>By using f to recenter the projection about z0 we force all geodesics passing through z0 to be projected as line segments passing through the origin. Furthermore, the Euclidean angle formed between two such lines is equal to the angle by which the two corresponding geodesics intersect. This satisfies criteria 1, and 3 for the function Ïz, but the norm of the points (their distances from the origin) after the mapping f is not equal to their distances from z0 in the hyperbolic space (as a consequence the range of the inverse function is also only the unit disk). To remedy this, we rescale the points such that their distances from the origin is indeed equal to their hyperbolic distance from z0. Note that this does not alter angles at the origin. This is accomplished with another mapping, denoted by g as follows:</p><formula xml:id="formula_6">gz 0 (z) = z ||z|| log 1 + ||z|| 1 â ||z|| .</formula><p>It is also possible to find the inverse of this mapping:</p><formula xml:id="formula_7">g â1 z 0 (z) = z ||z|| 1 â e ||z|| 1 + e ||z|| .</formula><p>Now we can define Ïz 0 by composing these two mappings:</p><formula xml:id="formula_8">Ïz 0 = g â¢ f.</formula><p>Similarly, we can define Ï â1 z 0 as:</p><formula xml:id="formula_9">Ï â1 z 0 = f â1 â¢ g â1 .</formula><p>It can be verified that Ïz 0 and Ï â1 z 0 as defined above, indeed satisfy the three criteria for functions mapping to and from the tangent space, and thus these two functions are sufficient to implement a spring embedder in hyperbolic geometry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Spherical Geometry</head><p>As a further example for generalizing spring embedders to non-Euclidean geometry we also consider spherical geometry. As with hyperbolic geometry, spherical geometry has a constant curvature and the equations for mapping to and from the tangent space can be calculated analytically.</p><p>Each point in a spherical geometry is defined by its coordinates, Î¸ â [0, 2Ï) and Ï â [0, Ï), representing the longitude and latitude of the point, respectively. This spherical geometry can then be embedded as a sphere in three-dimensional Euclidean space by the parametrization (cos Î¸ sin Ï, cos Ï, sin Î¸ sin Ï). We can calculate the tangent plane at any point on the sphere by taking the space spanned by the two partial derivative vectors: u = (â sin Î¸ sin Ï, 0, cos Î¸ sin Ï) v = (cos Î¸ cos Ï, â sin Ï, sin Î¸ cos Ï).</p><p>Note that if applied at either of the poles, these equations fail to yield a valid space, so in these cases the u and v vectors can be hard-coded to, for example, (1, 0, 0) and (0, 0, 1).</p><p>We can now compute Ïx(y) for any points x and y in the spherical geometry by projecting the embedding of y, emb(y) onto the tangent plane at x with (emb(y) â¢ ux, emb(y) â¢ uy).</p><p>To complete the mapping we have only to set the length of this vector equal to the length of the geodesic between x and y:</p><formula xml:id="formula_10">r â¢ arccos [sin Ïx sin Ïy cos Î¸y â Î¸x + cos Ïx cos Ïy],</formula><p>where r is the radius of curvature of the geometry. An illustration of this mapping can be seen in <ref type="figure">Fig. 7</ref>.</p><p>x y <ref type="figure">Figure 7</ref>: Mapping to the tangent space via mapping to the tangent plane, followed by a renormalization for the length of the vector in the tangent space.</p><p>The inverse of this mapping Ï <ref type="bibr">â1</ref> x (y), illustrated in <ref type="figure">Fig. 8</ref>, can also be computed in a similar geometric manner. First, we compute a vector, p, perpendicular to that from Ïx(y) in the tangent space. The vector p is then mapped to the corresponding vector in three dimensional space by upx + vpy. This vector is perpendicular to the plane containing the origin, Ï <ref type="bibr">â1</ref> x (x) and Ï â1 x (y). Thus the desired point Ï â1 x (y) can be obtained by rotating Ï <ref type="bibr">â1</ref> x (x) about this axis so that the arc length traveled by Ï <ref type="bibr">â1</ref> x (x) is equal to the norm of Ï â1 x (y). In radians, this angle is |y| r . Since this rotated vector is in Euclidean space, the calculation can be completed by projecting it back onto the sphere by calculating Î¸ = arctan z</p><p>x , Ï = arccos y.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Example Layouts in H 2 and S 2</head><p>In <ref type="figure" target="#fig_0">Figures 9-11</ref> we consider a title-word graph obtained from the graph drawing literature <ref type="bibr" target="#b2">[3]</ref>. This graph has 27 nodes and 50 edges. The graph nodes correspond to title-words from papers in the Proceedings of the 1999 Symposium on Graph Drawing. The size of a node is determined by the frequency of the corresponding word and an edge is placed between two nodes if they co-occur in at least one paper.</p><p>The images in the <ref type="figure" target="#fig_0">Figures 9-11</ref> were obtained using our implementation of the algorithms described in this paper.</p><p>x y <ref type="figure">Figure 8</ref>: Mapping from the tangent space via a rotation. <ref type="figure" target="#fig_7">Fig. 9</ref> shows three views of the graph using different centers of attention, and nicely illustrates the focus+context properties of hyperbolic space. <ref type="figure" target="#fig_0">Fig. 10</ref> shows three views of the same graph in spherical space, again using different centers of attention. Finally, <ref type="figure" target="#fig_0">Fig. 11</ref> contains layouts of the same graph obtained in R 2 , H 2 and S 2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>We presented a simple algorithm for generalizing a spring embedder to an arbitrary Riemannian geometry. This method relies on only very general features of spring embedders, and thus can be applied in principle to most forcedirected layout methods. We also presented the details for the specific cases of hyperbolic and spherical geometries as well as some layouts obtained with our implementation.</p><p>Although the methods presented here are sufficient to generalize a spring embedder into any Riemannian geometry, there are still many practical concerns that need to addressed. While the mathematics needed to determine Ïx and Ï â1 x are relatively simple for the cases of hyperbolic and spherical geometries, this is not always the case. It is not even possible, in general, to analytically calculate the geodesic between two points in an arbitrary geometry. It is likely the case that for more complex geometries approximate methods will have to be used to determine Ïx and Ï <ref type="bibr">â1</ref> x .</p><p>Perhaps most importantly with regard to information visualization, we would like to make our method scalable. As with traditional force-directed algorithms, our method does not work well for very large graphs. Finding low energy states becomes increasingly difficult as the input graphs get larger. Multi-scale methods and high dimensional embedding have been successfully used to extend Euclidean spring embedders. Generalizing the non-Euclidean spring embedders along the lines of <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b6">7]</ref> should be possible. This would allow us to experiment with the layouts of very large graphs in these geometries, and thus to fully exploit their properties to better visualize large data-sets.   </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Drawings of the same simple, undirected graph obtained in Euclidean R 2 space, hyperbolic H 2 space and spherical S 2 space. The graph has 121 nodes and 140 edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>A curve and its derivative in the tangent space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Net force on x by two other points, y and z.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>position[n] := force directed placement(n, G) end end non Euclidean initial layout(G) while not done do foreach n â G do x := position[n] G := Ïx(G) x := force directed placement(n, G ) position[n] := Ï â1 x (x ) end end</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>A generic Euclidean spring embedder and its non-Euclidean counterpart.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>A 5Ã5 mesh laid out in a hyperbolic geometry and projected onto the PoincarÃ© disk.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>The same mesh as inFig. 5, but projected with a different center of attention.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Layouts of the title-word graph with different centers of attention in hyperbolic space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Layouts of the title-word graph with different centers of attention in spherical space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 11 :</head><label>11</label><figDesc>Layouts of the title-word graph, obtained in R 2 , H 2 and S 2 . The graph has 27 nodes and 50 edges.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgments</head><p>We would like to thank the anonymous referees for pointing out two publications, relevant to our work <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b5">6]</ref>.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A heuristic for graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Congressus Numerantium</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="149" to="160" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hyperbolic geometry, MÃ¶bius transformations, and geometric optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Eppstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MSRI Introductory Workshop on Discrete and Computational Geometry</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">GraphAEL: Graph animations with evolving layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Erten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Harding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wampler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Yee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="98" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Graph drawing by force-directed placement. Software -Practice and Experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M J</forename><surname>Fruchterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Reingold</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1129" to="1164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A multi-dimensional approach to force-directed layouts of large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gajer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry: Theory and Applications</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="18" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fundamentals of spherical parameterization for 3D meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gotsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sheffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="358" to="363" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A fast multi-scale method for drawing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of graph algorithms and applications</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="179" to="202" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An algorithm for drawing general undirected graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kawai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="7" to="15" />
			<date type="published" when="1989-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">ACE: A fast multiscale eigenvector computation for drawing huge graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carmel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Information Visualization</title>
		<meeting>IEEE Symposium on Information Visualization</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="123" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A focus+context technique based on hyperbolic geometry for visualizing large hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lamping</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pirolli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Computer Human Interaction</title>
		<meeting>Computer Human Interaction</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="401" to="408" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">H3: Laying out large directed graphs in 3D hyperbolic space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Information Visualization</title>
		<editor>L. Lavagno and W. Reisig</editor>
		<meeting>IEEE Symposium on Information Visualization</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="2" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Drawing large graphs with h3viewer and site manager</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="384" to="393" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Visualizing the structure of the World Wide Web in 3D hyperbolic space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Burchard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on the Virtual Reality Modeling Language</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="33" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Hyperbolic self-organizing maps for semantic navigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ontrup</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ritter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="1417" to="1424" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Some three-dimensional graph drawing algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">I</forename><surname>Ostry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<pubPlace>Australia</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Newcastle</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Self-organizing maps on non-euclidean spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ritter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Kohonen Maps</title>
		<editor>S. Oja, E. &amp; Kaski</editor>
		<meeting><address><addrLine>Amsterdam</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="97" to="110" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
