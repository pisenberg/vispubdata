<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">EZEL: a Visual Tool for Performance Assessment of Peer-to-Peer File-Sharing Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lucian</forename><surname>Voinea</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Telea</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarke</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">EZEL: a Visual Tool for Performance Assessment of Peer-to-Peer File-Sharing Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>H.5.2[User Interfaces]: Evaluation/methodology</term>
					<term>I.3.2 [Graphic Systems]: Stand-alone systems</term>
					<term>J.7 [Computers in Other Systems]: Command and control process visualization, distributed file systems visualization, P2P file-sharing networks visualization, small displays</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In this paper we present EZEL, a visual tool we developed for the performance assessment of peer-to-peer file-sharing networks. We start by identifying the relevant data transferred in this kind of networks and the main performance assessment questions. Then we describe the visualization of data from two different points of view. First we take servers as focal points and we introduce a new technique, faded cushioning, which allows visualizing the same data from different perspectives. Secondly, we present the viewpoint of files, and we expose the correlations with the server stance via a special scatter plot. Finally, we discuss how our tool, based on the described techniques, is effective in the performance assessment of peer-to-peer file-sharing networks.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Process visualization is one of the oldest forms of information visualization. It appeared once with the need of gaining insight in the behavior of a system, and it dates back in time to the ancient builders of the Stonehenge, which used the temple as a 'visualization instrument' for the succession of seasons. The appearance of the graphic display computer marked the birth of a plethora of process visualization techniques <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b6">7]</ref>. These techniques address different domains, from the visualization of application behavior <ref type="bibr" target="#b3">[4]</ref> to the visualization of web site accesses <ref type="bibr" target="#b4">[5]</ref>. Visualization of distributed systems' performance is, however, one of the less explored domains. Most work in this area is related to the visualization of the structure of such systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>We propose a new approach to the visualization of performance of Peer-to-Peer (P2P) file-sharing networks, a branch of distributed processing that has recently gained enormous popularity. We illustrate the proposed visualization techniques by a prototype tool, called EZEL, which we developed for the assessment of performance in the ED2K P2P file-sharing network <ref type="bibr" target="#b9">[11]</ref>. We first present the issues that are relevant for the assessment of performance in distributed processing systems, with a focus on P2P file-sharing networks (Section 2). In Section 3, we describe the data that is transferred in this kind of systems, and we identify the transactions that are important for performance evaluation. * e-mail: lvoinea@win.tue.nl † e-mail: alext@win.tue.nl ‡ e-mail: vanwijk@win.tue.nl Next, we detail the challenges that arise when supporting the assessment with visual tools, and we present our approach to address them.</p><p>In Section 4, we describe the visualization of data taking servers as focal points. We show how, via the use of shading and color, multiple aspects can be shown simultaneously in a compact way. We elaborate on the space partitioning power of cushions, and we introduce a novel technique: fading cushions. We demonstrate how this technique allows visualizing the same data from different perspectives. In Section 5, we add the viewpoint of the file, and in Section 6 we expose the correlation between file and servers via a special scatter plot.</p><p>Finally, we discuss in Section 7 the suitability of our approach for the assessment of P2P file-sharing networks, and we conclude by outlining future research directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">PROBLEM DESCRIPTION</head><p>A distributed processing system is a collection of entities whose purpose is to reduce the overall processing time for a given task by dividing the processing load among its constituent parts. We outline the most important concepts in such a system, with an eye on their implementation in a P2P file-sharing system (see <ref type="figure">Figure 1</ref> for a conceptual model).</p><p>Clients generate requests (e.g., file read requests) and assign them to proxy entities. A proxy divides requests in smaller parts (i.e., segments) that are uniquely identifiable and can be independently fulfilled by server entities. Every proxy has an internal dispatcher algorithm that decides to what servers the requested segments will be sent for processing. Every server has limited processing resources to handle request segments from proxies, and uses a priority based scheduling to manage them. The priorities are internally maintained by the server for each client request.</p><p>October 10-12, Austin, Texas, USA 0-7803-8779-1/04/$20.00 ©2004 IEEE</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Symposium on Information Visualization 2004</head><p>Visualization of a distributed system's performance aims at helping the user to understand such a system, based on information obtained from transactions between its constituent parts. Both snapshots and history recordings are therefore important <ref type="bibr" target="#b0">[1]</ref>.</p><p>The user can employ this understanding to navigate the transaction data and answer a number of performance related questions. In the case of our distributed file-sharing systems, one is mainly interested in two issues, as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dispatcher algorithm assessment</head><p>When the network of processing servers is large and dynamic (e.g., P2P networks), the segment dispatching algorithm has a strong influence on the request servicing time. The performance visualization should help users to easily assess the dispatcher algorithm, and reveal the factors and the circumstances that might influence it. For example, users should be able to identify the reasons for which a slower server is selected at a certain moment instead of a faster one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Server assessment</head><p>When the dispatcher algorithm on the proxy allows direct selection of the servers, performance visualization should help to determine which server delivers the best value. The interesting case appears when the selection is based on a number of independent performance figures. The most important questions and quantities relevant to P2P networks are:</p><p>-download speed: how long does it take till one gets a requested file? -server popularity: how long do clients wait in the server-side queue, and how frequently do other clients with higher priority enter that queue? -server specialization: what kind of requests can a server satisfy?</p><p>When assessing the performance of a P2P file-sharing network, one has to investigate the evolution of a number of independent parameters. An effective assessment should consider the loosely coupled parameters together, and should be based on tradeoffs that depend on the purpose of the assessment. The very nature of tradeoff making requires the user to divide its focus over more assessment criteria at once. This turns out to be rather difficult when the number of criteria becomes higher than two. A typical download session for a 700 MB movie file contains around 200,000 transactions. If one uses just standard time graphs to visualize the above three quantities, the overall image is quickly lost, and the dispatcher algorithm and server assessment questions remain unanswered. The challenge is to build a unified visualization, in which the user can focus on a particular quantity of interest without losing overview.</p><p>For P2P file sharing networks, we use four main criteria to assess a server: -download speed (higher is better) -size of segments (larger is better) -queue evolution (fast advance and less re-queuing after admittance is better) -segment position (depending on the download purpose, some segments may be more important than others)</p><p>The ideal server should be fast, able to provide large contiguous segments, and should have a small waiting time. Additionally, it should not be very popular, to reduce the chance that other clients with a higher priority interrupt the download by acquiring the server. However, such servers usually do not exist. Moreover, the assessment depends on several characteristics of the downloaded file, as explained next. For the fast download of a small file, such as a 3 MB MP3 music file, selecting the fastest server may not be the most appropriate decision. When the waiting time in the queue of the fast server exceeds the time that another slower server requires to perform the task, we prefer the slower server. Another example is the download of an archive, (e.g., a ZIP file). Such a download should not be attempted from a server providing fragmented segments, even if it is fast. A slower server that provides contiguous segments is preferred, as it makes archive recovery simpler when the download cannot be completed.</p><p>In the following sections, we walk through the challenges of building a visualization tool for P2P file-sharing networks. We illustrate our solutions with snapshots from EZEL, a visualization tool that we developed for the performance assessment of the popular ED2K P2P network. A copy of the tool and example datasets may be downloaded from http://www.win.tue.nl/~lvoinea/Ezel.htm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DATA MODELING</head><p>The first issue we have to consider when building a visualization tool is which data to visualize. P2P file-sharing networks are characterized by a large number of terminals connected via the Internet. Each terminal connected to such a network can act both as a server and as a client in the same time. Clients generate file read requests that proxies break down into segment requests. A segment request is fulfilled by a single server, which provides the client with the related file segment. A file segment consists of file blocks and has a variable size (expressed in blocks). All terminals in the network exchange transactions based on a specific protocol. These transactions may contain either file blocks, or control information (e.g., download requests, file availability info, queue evolution info). In the case of the ED2K network, the exact protocol in use is not disclosed, which makes our assessment task considerably more difficult.</p><p>As mentioned in the previous section, server and dispatcher algorithm assessment are central issues for performance evaluation of P2P file-sharing networks. We address these issues by analyzing the transaction data that a client exchanges with the rest of the network.</p><p>To study the dynamic behavior of servers, we record two types of transaction events: file block arrivals and queue position reports. With this information, we build three functional descriptions for a server, from the point of view of a given client. In the following, we consider that a client is serviced by NS servers S 1 ,...,S NS , every server S i being identified by an integer server id. The download time t runs from 0 to the download completion moment T C . The three server descriptions are:</p><formula xml:id="formula_0">Queue position: ( ) N R N t S Q i → × : ,</formula><p>Gives the position of the client segment request in the queue of server S i at time t. If Q(S i ,t) is zero, the client can start downloading from S i .</p><formula xml:id="formula_1">Download Speed: ( ) R R N t S V i → × : ,</formula><p>Gives the speed with which the client receives data from the server S i at time t.</p><formula xml:id="formula_2">Contribution: ( ) N R N t S C i → × : ,</formula><p>Gives the data downloaded from a server S i from the beginning till a given time t. In other words:</p><formula xml:id="formula_3">( ) ( ) ∫ = t i i d S V t S C 0 τ τ , ,</formula><p>The total amount of downloaded data is thus:</p><formula xml:id="formula_4">∑ = = NS i C i T S C D 1 ) , (</formula><p>To assess the performance of the dispatcher algorithm, one has to consider both the server assessment and the evolution of the downloaded file itself. For that, we record the block arrival events and correlate them with the file segment requests. With this information, we construct three functional descriptions of a download:</p><formula xml:id="formula_5">Provider: ( ) N N p P → :</formula><p>Gives the server that provided the block at a position p, for all positions p in a downloaded file</p><formula xml:id="formula_6">Time of Arrival: ( ) R N p T → :</formula><p>Gives the moment when the client received the block at position p, for all positions p in a downloaded file.</p><formula xml:id="formula_7">Segment: ( ) N N p S → :</formula><p>Gives the file segment to which the block at position p belongs to, for all positions p in a downloaded file.</p><p>The quantities mentioned above are discrete. For example, a typical movie download consists of around 200,000 time moments t, NS=150 servers, and a total downloaded value of D=700 MB.</p><p>All above functional descriptions are equally important for the performance evaluation of our P2P file-sharing network. Consequently, the challenge we face is to build a visualization that facilitates access to all of them and shows how they relate to each other.</p><p>We want to assess the dynamic behavior of individual servers, view how a file is downloaded, and see the relation between these processes. Since the functional descriptions to be visualized have several implicit, non-trivial dependencies, we find a straightforward visualization (for instance using separate graphs) not a good solution.</p><p>Given that our set of functional descriptions has three main axes (Servers S i , Time t, block Position p), a visual representation using a 3D scatter plot may appear to be a direct solution. <ref type="figure" target="#fig_1">Figure 2</ref> depicts such an approach. Every dot represents the transmission of a block from a server at a certain moment. However, this visualization would be very hard to interpret, given the large amount of time samples (hundreds of thousands), the inherent 3D occlusion problems, and the data scattering. Therefore, we split the visualization in two parts (one focusing on servers, the other on the downloaded file) and we correlate them using a scatter plot. The server visualization is described next. The downloaded file visualization is described in Section 5. Finally, Section 6 presents the custom made scatter plot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">SERVER VISUALIZATION</head><p>To support the assessment of servers with a visual representation, we use a horizontal sequence of small diagrams, one per server. This allows the user to easily compare the functional descriptions of different servers (i.e., Q, V and C). Additionally, the representation of each server should offer enough provisions to relate it to the visualization of the downloaded file (Section 5). There are several alternatives for an individual server representation. The obvious choice is to use the horizontal axis for Time, the vertical axis for Queue (Q) and Contribution (C) and to display their variation as graphs <ref type="figure" target="#fig_2">(Figure 3</ref>.a). The Download Speed (V) can be estimated in this setup from the slope of C. However this first alternative is quite noisy for real world cases. Due to the mutual exclusion in time of downloading and queuing, the evolution of Queue position and Contribution are not continuous, but interleaved. To remove the noise from the visualization, we replace the spatial encoding of Queue position with a luminance encoding. We use rectangular strips whose gray shade indicates queue position (darker shades indicate lower positions). Although graphs are more precise, grayscale encoding of the queue position is sufficient for our purposes. After all, the user needs only to identify the overall position and to spot general queue trends such as advance or high / low position alternations.</p><p>Additionally, we use solid color filling for the area under the C graph to enhance the feeling of quantity that Contribution has. <ref type="figure" target="#fig_2">Figure 3</ref>.b depicts the result of the second approach. Both C and Q variations appear now continuous, which makes interpretation easier. Moreover, while their representations do no interfere, they still allow users to easily make correlations. The horizontal parts in the variation of C, for example, indicate periods in which the Contribution stagnated. The user can easily verify if queuing was the cause of idleness, and can also check the queue evolution of the segment request in that period. Similarly to the first approach, the Download Speed evolution can be estimated from the slope of C.</p><p>The next visualization design step is to arrange the server images such that they allow easy comparative assessment. For this, we need a way to easily distinguish and identify the diagrams. We use color encoding for that, and in each image we fill the area below the Contribution graph with a server dependent color. Color allows one to easily distinguish the different diagrams and also preserves server identity over changes in the diagram arrangement.</p><p>To allow easy comparison of the server diagrams, we need to arrange (sort) them along one of the spatially encoded axes, i.e., the Time axis or the Contribution axis. Using the Time axis for arranging the server images ( <ref type="figure" target="#fig_3">Figure 4</ref>) proves to have two major drawbacks. First, it is hard to compare server quantities (queue position, contribution) at the same given time instant. For example, one could hardly decide if the contribution of a source exceeds that of another, at a given time t 0 <ref type="figure" target="#fig_3">(Figure 4</ref>).</p><p>T im e C o n trib u tio n t 0</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A B C</head><p>S e rv e rs Secondly, the time interval (width of server diagrams in <ref type="figure" target="#fig_3">Figure  4</ref>) is identical for all servers, so no meaningful comparison could be made along the Time axis itself.</p><p>The second alternative (i.e., arrange on Contribution axis) is better, as it allows easy comparison of servers based on their total contribution ( <ref type="figure" target="#fig_4">Figure 5</ref>). Additionally, for a given time t, this allows comparing the queue position and the cumulated contribution to that moment t. <ref type="figure" target="#fig_5">Figure 6</ref> presents a typical visualization obtained with the method presented so far: a file download served using five servers. We see that the first server (purple) is the most productive one: It gives about 50% of the total amount (half of the horizontal axis), has a stable throughput (constant slope), we are promptly getting on the first queue position, and we maintain this position for the total download duration (purple image slope has no steplike jumps, and its queue area has a constant light shade after we get on the first position). We can also identify in this image the less productive servers, i.e., the slow one (orange) and those exhibiting frequent falls in the queue position (yellow and cyan). However, this visualization is still limited. First, using only color to encode server identity is not a good solution when the server arrangement (horizontal axis sorting) can change. It may happen that two servers with the same, or perceptually similar, colors are arranged one next to the other <ref type="figure" target="#fig_6">(Figure 7.a)</ref>. Indeed, we wish to use only a few (10..16) perceptually different colors, whereas we typically have over 150 servers. Using only luminance (gray value) to encode the queue position causes similar problems. On the other hand, color encoding of server identity keeps visual coherence when rearrangement occurs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Spatial partition with bi-level cushions</head><p>We solve the above problem using the space partitioning properties of cushions. For a detailed description of cushions, see <ref type="bibr" target="#b5">[6]</ref>. As depicted in <ref type="figure" target="#fig_6">Figure 7</ref>, cushioning makes separation clear between different severs encoded with the same or similar colors, without using extra screen space. It also delineates the borders where the difference in luminance makes distinction hard. In the above server diagrams, the total contribution of a server consists of a set of segments. As the size of the segments varies, we would like to visualize it. That would be also useful later on for making correlations with the download visualization.</p><p>With the server visualization presented so far, it is hard to figure out the individual segments, as they are encoded using the same color (i.e., the color of the server). To emphasize the segment partitioning inside the diagram of a server, while maintaining clear separation between servers, we use the bi-level cushioning technique described by van Wijk and van de Wetering in <ref type="bibr" target="#b5">[6]</ref>. <ref type="figure" target="#fig_7">Figure 8</ref>.a depicts the main idea behind this approach. By each server diagram we visualize the illumination of a heightmodulated surface. The height assigned to a point in a server diagram is the sum of two parabolas (i.e., cushions), one that describes the server, and one that describes the segment to which the point belongs. The surface is illuminated using a spot light that forms an incidence angle α with the normal on the base plane. Each server diagram depicts the image projected by light reflection on a plane parallel with the base. <ref type="figure" target="#fig_7">Figure 8</ref>.b depicts the result of this technique. By using OpenGL texturing, we obtain a much higher performance than the similar software-only implementation of van Wijk and van de Wetering <ref type="bibr" target="#b5">[6]</ref>. In detail, we blend the server rectangle image and each of its segment rectangle images, as in <ref type="figure" target="#fig_6">Figure 7</ref>.(top), with a 1D texture containing the respective server or segment luminance profile in the alpha channel. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Focus migration with faded cushions</head><p>Using the bi-level cushioning is very effective for delimiting servers and segments within servers. However, the above method draws cushioned segment information also over the area that displays queue information (gray area in <ref type="figure" target="#fig_8">Figure 9</ref>) . Segment partitioning is not relevant for that area, and this makes server comparison based on queue evolution, i.e., following horizontal correlations, difficult. In order to maintain the desired segment and source partitioning effect, and, in the same time, remove the undesired influence on the queue evolution visualization, we extend our bi-level cushioning. We change the perceived shape of the segment cushions in the vertical direction from constant curvature to a gradually flattening profile. To achieve this, we introduce a height variation in the vertical direction using a decreasing profile as sketched in <ref type="figure" target="#fig_9">Figure 10</ref>.a. For this profile, we use an asymptotic function (e.g., the root of order n). The segment cushions are now efficiently implemented as 2D alpha textures and blended atop of the original 1D server cushions.</p><p>Eventually, we obtain a visualization that emphasizes both segment and server segregation at the top of the image, and then progressively focuses only on the partition in servers, as the user's focus moves to the bottom of the image. The gradual transition makes focus migration smooth while preserving the server context <ref type="figure" target="#fig_9">(Figure 10.b)</ref>. In other words, the visualization exhibits vertical coherence at the top (segment-server area), which smoothly changes into horizontal coherence at the bottom (queue area). The overall visual effect resembles the draping of a curtain, and nicely scales up for visualizations containing over 100 servers and 1000 segments. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DOWNLOAD VISUALIZATION</head><p>In this section, we address the visualization of the download itself and the creation of correlations with the server visualization described in Section 4. The only alternative in this part is to use the block Position as one of the main axes in the representation, and report the functional descriptions to it. The challenges are, however, in choosing the right visual encoding for the Provider (P), Time of Arrival (T) and Segment (S) descriptions. To make correlation with the server visualization easy, we use color to encode P, and we choose the same color assignment as for the server visualization.</p><p>For Segment encoding (i.e., S), we use a similar approach with the one from the server visualization: we build one-level cushions on top of fixed-width rectangles arranged along the Position axis ( <ref type="figure" target="#fig_10">Figure 11)</ref>. We don't need bi-level cushions, as the emphasis is only on segment segregation, and has to be visible along the entire width of the rectangles. For Time encoding, we may consider a graph-like representation. Neighboring segments on the Position axis, however, may arrive at non-adjacent time intervals which immediately leads to a very noisy visualization. Therefore, we chose to use a rainbow colormap (t=0 is blue, t=T is red) to encode the time on a per segment basis <ref type="figure" target="#fig_10">(Figure 11</ref>). While this alternative is visually less accurate for identifying the arrival time of a block, it consumes little space and attenuates the visual noise caused by neighboring segments that arrive at different moments in time. Moreover, the above color scheme highlights discontinuities, i.e., segments that arrive at moments distant in time with respect to their neighbors. To improve the image generation speed, we don't report the time to every single block in a segment, as the T description specifies. Instead, we use for all the blocks in a segment the same time description as for the first block, and we try to implement a more accurate representation through server correlations, which we describe next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CORRELATION VISUALIZATION</head><p>In this section we present the visualization component that allows making correlations between the server and download visualizations. In the design of the visualization so far, we have already a color-based correlation between the Provider description (i.e., P) and the server diagrams. This allows to identify and compare servers that provide some particular blocks in a downloaded file. Next to this, we also need a correlation that would make the T description more accurate. Since the server visualization has a good mapping from Time to Contribution (i.e., C), we extend this mapping to the download visualization through a correlation along the block axes (i.e., the Contribution and the Position axes). However, given that the two axes are spatially encoded, a relation at block level would be too fine-grained and hard to visualize. For that reason, we choose to visualize the connections at the (higher abstraction) segment level.</p><p>The discrete nature of the block axes favors using a scatter plot representation to visualize the correlation. A simple scatter plot, however, makes visual associations difficult, once the number of segments is greater than 10 ( <ref type="figure" target="#fig_1">Figure 12.a)</ref>. A possible workaround is to add lines that make connections explicit. However, this alternative proves to be ineffective too, as it clutters the image, and suffers from aliasing once the distance between lines becomes too small (e.g., the black line in <ref type="figure" target="#fig_1">Figure 12</ref>.b). These problems are only aggravated by the large number of correlations (hundreds) that must be displayed for a standard download dataset.</p><p>In order to make the connections more explicit while keeping the image uncluttered, we replace the solid lines with shades that start from the points of the scatter plot and fade away as they approach the axes <ref type="figure" target="#fig_1">(Figure 12.c)</ref>. This alternative reduces the confusion created by crossing lines, and offers still enough visual clues for recognizing connections. Additionally, it introduces no artifacts and scales very well with the image size. When the distance between the points of the scatter plot becomes to small to observe differences, the shades merge naturally, as if they were addressing the same element. To accomplish this, we draw the shades using OpenGL's GL_MIN blending function, which always keeps the darkest shade element at intersections, regardless of the shade drawing order.</p><p>The complete visualization, obtained after linking the server and download visualizations using the correlation methods described in this section, is depicted in <ref type="figure" target="#fig_2">Figure 13</ref>. For easy navigation, we added interactive selection facilities to allow restricting the download visualization part and the corresponding correlations to:</p><p>specific parts of a file (by individual segment selection on Position axis) -specific time intervals (using a time cursor on the Time axis). -specific servers (by individual server selection on Contribution axis) These selection mechanisms easily allow one to answer questions such as "which are the servers active at a given time moment", "which are the file blocks provided by a given server", and "which are the servers a given file part came from". </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Server visualization</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">DISCUSSION</head><p>In this section, we discuss how our P2P visualization tool EZEL can be used to answer the main performance related questions in distributed file-sharing networks. In order to experiment with the tool, one needs real-life information about transactions in P2P file-sharing networks. We obtained such datasets by instrumenting eMule <ref type="bibr">[10]</ref>, an open source download client for the ED2K network. The instrumented client provides us with a log file from which the functions Q,P,C,V,T, and S discussed in Section 3 may be computed. <ref type="figure" target="#fig_2">Figure 13</ref> shows a visualization of the download of a large movie file (702,4MB). The complete download took several hours and contained 201,261 transactions. In this image, the servers are sorted in the decreasing order of their total contribution. The upper half of the image shows the segment fragmentation on a per server basis. We see that the most suitable download sources for archive files are A, B, E and H, as they provide large sets of contiguous segments, which makes archive recovery simpler in case of incomplete download. The least preferred in this sense are sources D, F and G, which provide tiny segments scattered along the entire length of the file. Analyzing the slopes in the image (i.e., the server speed) we see that I is one of the fastest sources. Unfortunately, it is also a very popular one, as most of the time our request waited in the server queue. A better alternative, especially for the download of a small file, is using servers B,C, F or G. Although F and G are slow and provide fragmented segments, they are unpopular, and thus start satisfying our requests very fast. Finally, if one were asked to single out an overall 'good' download source, A would qualify, as it gives us many data, with constant throughput, and little waiting time. <ref type="figure" target="#fig_3">Figure 14</ref> depicts a situation where we spotted a "weakness" of the dispatcher algorithm. For a downloaded file (350MB) we arranged the servers in decreasing speed order. In <ref type="figure" target="#fig_3">Figure 14</ref>.b, we switched off the display of segment evolution in time. Using a time cursor, we selected those segments that were downloaded at a certain moment t 0 close to the end of the download.  <ref type="figure" target="#fig_3">Figure 14</ref>.a shows that at t 0 the downloaded segment came from server A, while <ref type="figure" target="#fig_3">Figure 14</ref>.b shows that at the same time, the faster source B was also available (i.e., we were not in queue but ready to be served). That means the dispatching algorithm in the eMule client is not optimized for the minimization of waiting time.</p><p>Finally, <ref type="figure" target="#fig_4">Figure 15</ref> illustrates the possibilities that the techniques we described in this paper have for the field of visualization on small displays. The good scaling behavior for the server visualization combined with the efficiency of shading in scatter plots, and the partitioning qualities of cushions create uncluttered images that allow performance assessment of P2P file-sharing networks even on lowresolution displays. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">CONCLUSIONS AND FUTURE WORK</head><p>In this paper we presented a new approach for the visual assessment of performance in P2P file-sharing networks, and we validated it using EZEL, a prototype assessment tool for the ED2K network. We started by identifying the data transferred in P2P filesharing networks, and then we tried to find relevant performance descriptions based on it. Subsequently, we built a custom visualization made of two correlated parts: a server and a download visualization. For each part we visually encoded a number of descriptions and we proposed a number of enhancements and combinations of existing visualization techniques. Notably, we used shaded cushions for virtually all data elements (servers, segments, queue positions, and correlation plot elements). Overall, our visualization gives a compact and scalable way to present a download consisting of thousands of transactions, from over 100 sources, on a single screen. To our knowledge, this is the first attempt to visually explore the data transfer dynamics in the rapidly growing world of P2P file-sharing networks. The other work we are aware of in this field addresses a different task, namely visualizing the topology of a P2P network of a different type <ref type="bibr" target="#b8">[9]</ref>.</p><p>The examples presented in this paper address the visualization of data obtained at the end of a download. However, using the same approach for building a dynamic, "real-time" visualization of the acquired data is in theory possible. The only issue in this case would be the frame rate at which images are produced. In the worst case, more than 200.000 transactions have to be considered for the generation of each frame. This would require an impressive processing power in order to update the image at the arrival of each new transaction (on average every 100 ms). The current implementation of EZEL generates images at 0.5 -1.0 fps on a Pentium 4 processor running at 2.6 GHz. A scenario inbetween would be to generate on demand images with the partial information available during the download. While differences between consecutively generated images could be too large to make meaningful correlations, the individual images may be used to interact with the download process based on intermediate assessments.</p><p>In the future, we would like to generalize our visualization and extend it to the larger domain of distributed processing in general. The challenges we foresee there relate to the process visualization of the dispatching and scheduling entities.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>2 Figure 1 :</head><label>21</label><figDesc>Distributed processing system (conceptual model)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>3D visualization for P2P performance assessment</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Server diagram, with graphs only a) with graph and luminance strips b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Server diagram arrangement along the Time axis</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Arranging server diagrams along the Contribution axis</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Basic server visualization</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Server arrangement : without cushioning (top) with one level cushioning (down)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Bi-level cushioning for segment and source partitioning: a) principle; b) result</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Basic bi-level cushion visualization</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Enhanced bi-level cushioning for smooth focus migration: a) principle b) results</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Visual encoding of functional description for a file download</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 :Figure 13 :</head><label>1213</label><figDesc>Correlation visualization alternatives a) basic scatter plot; b) adding connecting lines; c) adding shading Visual tool for the assessment of performance in P2P file-sharing networks (EZEL snapshot)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 14 :</head><label>14</label><figDesc>Dispatcher algorithm assessment</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 15 :</head><label>15</label><figDesc>Download visualization of a MP3 song on a Nokia 7650 display using EZEL</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This research was part of the ITEA project Space4U, whose aim is to define a component based software framework for the middleware layer of high volume embedded appliances (http://www.win.tue.nl/space4u).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Matkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sainitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Gröller</surname></persName>
		</author>
		<title level="m">Process Visualization with Levels of Detail, Proc. Info Vis &apos;02</title>
		<meeting>ess Visualization with Levels of Detail, . Info Vis &apos;02</meeting>
		<imprint>
			<biblScope unit="page" from="67" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Visualizing Network Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Eick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Wilks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="16" to="28" />
			<date type="published" when="1995-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Aspects of Network Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>Eick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comp. Graph. &amp; Appl</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="69" to="72" />
			<date type="published" when="1996-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bosch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<title level="m">Visualizing Application Behavior on Superscalar Processors, Proc. Info Vis &apos;99</title>
		<imprint>
			<biblScope unit="page">141</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Sensemaking of Evolving Web Sites Using Visualization Spreadsheets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">H</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Info Vis &apos;99</title>
		<meeting>Info Vis &apos;99</meeting>
		<imprint>
			<biblScope unit="page">142</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Cushion Treemaps: Visualization of Hierarchical Information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Van De Wetering</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Info Vis</title>
		<meeting>Info Vis</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="73" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Information Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Spence</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dynamic Hierarchy Specification and Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Bergeron</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Info Vis &apos;99</title>
		<meeting>Info Vis &apos;99</meeting>
		<imprint>
			<biblScope unit="page" from="65" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Animated Exploration of Dynamic Graphs with Radial Layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-P</forename><surname>Yee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Dhamija</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hearst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Info Vis &apos;01</title>
		<meeting>Info Vis &apos;01</meeting>
		<imprint>
			<biblScope unit="page" from="43" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="http://www.edonkey2000.com/" />
		<title level="m">ED2K</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
