<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualizing Flow Over Curvilinear Grid Surfaces Using Line Integral Convolution</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lisa</forename><forename type="middle">K</forename><surname>Forssell</surname></persName>
							<email>lisaf@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Computer Sciences Corporation</orgName>
								<orgName type="institution" key="instit2">NASA Ames Research Center</orgName>
								<orgName type="institution" key="instit3">Stanford University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Visualizing Flow Over Curvilinear Grid Surfaces Using Line Integral Convolution</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Line Integral Convolution (LIC), introduced by Cabral and Leedom in Siggraph &apos;93, is a powerful technique for imaging and animating vectorfields. We extend the LIC paradigm in three ways: 1. The existing technique is limited to vectorfields over a regular Cartesian grid. We extend it to vectorfields over parametric surfaces, specifically those found in curvilinear grids, used in computational fluid dynamics simulations. 2. Periodic motion filters can be used to animate the flow visualization. When the flow lies on a parametric surface, however, the motion appears misleading. We explain why this problem arises and show how to adjust the LIC algorithm to handle it. 3. We introduce a technique to visualize vector magnitude as well as vector direction. Cabral and Leedom have suggested a method for variable-speed animation, which is based on varying the frequency of the filter function. We develop a different technique based on kemel phase ships which we have found to show substantially better results. Our implementation of these algorithms utilizes texturemapping hardware to run in real time, which allows them to be included in interactive applications.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Providing an effective visualization of a vector field is a challenging problem. Large vector fields, vector fields with wide dynamic ranges in magnitude, and vector fields representing turbulent flows can be difficult to visualize effectively using common techniques such as drawing arrows or other icons at each data point, or drawing streamlines <ref type="bibr" target="#b1">[2]</ref>. Drawing arrows of length proportional to vector magnitude at every data point can produce cluttered and confusing images. In areas of turbulence, arrows and streamlines can be difficult to interpret.</p><p>Various techniques have been developed which attempt to address some of these problems. <ref type="bibr">Max</ref> In this paper we discuss a new technique for visualizing vector fields which provides an attractive altemative to existing techniques. Our technique makes use of Line Integral Convolution (LIC) <ref type="bibr" target="#b4">[5]</ref>, which is a powerful technique for imaging and animating vector fields. The image of a vector field produced with LIC is a dense display of information, and flow features on the surface are clearly evident.</p><p>The LIC algorithm as presented by Cabral and Leedom in <ref type="bibr" target="#b4">[5]</ref> is applicable only to vector fields over regular 2dimensional Cartesian grids. However, the grids used in computational fluid dynamics simulations are often curvilinear. In this paper we show how to extend the LIC algorithm to visualize vector fields over parametric surfaces. Thus, for example, our extended algorithm allows us to visualize the flow over the surface of an aircraft or turbine.</p><p>In the original work on LIC, a technique for animation of vector field visualizations is presented. Our work extends this animation technique to apply to the parametric surfaces found in curvilinear grids as well.</p><p>Lastly, we present a new technique for displaying vector magnitude which can be applied to both 2dimensional regular grids and parametric surfaces. Our method varies the speed of the flow animation to give an intuitive representation of vector magnitude.</p><p>In the next section we discuss the basic LIC algorithm. In section 3 we describe our extension to curvilinear surfaces. In section 4, we discuss the implementation of animation for curvilinear grid surfaces. In section 5, we introduce our technique for displaying vector magnitude. In section 6, we describe our implementation of all the algorithms in the paper. We conclude with a brief discussion of directions for further applications of the LIC algorithm in vector field visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head><p>The Line Integral Convolution (LIC) algorithm takes as input a vector field lying on a Cartesian grid and a texture bitmap of the same dimensions as the grid, and outputs an image wherein the texture has been "locally blurred" according to the vector field. There is a one-to-one correspondence between grid cells in the vector field, and pixels in the input and output image. Each pixel in the output image is determined by the one-dimensional convolution of a filter kemel and the texture pixels along the local streamline indicated by the vector field, according to the following formula:  Thus each pixel of the output image is a weighted average of all the pixels corresponding to grid cells along the streamline which passes through that pixel's cell. Section 4 of <ref type="bibr" target="#b4">[5]</ref> provides the complete details of the algorithm. When this algorithm is applied at every pixel, the resulting image appears as if the texture were "smeared" in the direction of the vector field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Curvilinear Grid Surfaces</head><p>Because of the one-to-one correspondence between grid cells and pixels in the input/output images, the algorithm described above requires that the vector field lie on a regular, Cartesian grid. Here we show how to use the algorithm on 2-dimensional slices of structured curvilinear grids, which describe parametric surfaces.</p><p>We denote the curvilinear space coordinates of a point as $ = (6, q, 6) and the physical space coordinates as</p><formula xml:id="formula_0">x = (x, y, z ) .</formula><p>The vector which describes the velocity of the flow at each point is</p><p>We transform the vector field to the coordinate system of the curvilinear grid, hereafter called "computational space." The transformation from physical space to computational space is performed by multiplying the physical-space velocity vectors by the inverse Jacobian matrix s.t.</p><p>The computational-space vectors give velocity in gridcells per unit time. Because the data points are given for integer coordinates in computational space, this constitutes a regular Cartesian grid.</p><p>We can compute a LIC-image of any 2-dimensional slice of the grid by projecting the vector field onto it. For example, if we want to examine the k=l plane of the computational grid, which in many CFD data formats usually lies on the surface of the object about which the flow is being simulated, we drop the (ar/&amp;) term and use the 2dimensional vector [dE/ar, &amp;lla?IT in the LIC algorithm.</p><p>The resulting image, which is a visualization of the vector field in computational space (see <ref type="figure" target="#fig_3">Figure 3)</ref> is then mapped onto the surface in physical space using a standard inverse mapping algorithm, such as that described in <ref type="bibr" target="#b8">[9]</ref>. The inverse mapping converts the vector field representation back into physical space ( <ref type="figure" target="#fig_3">Figure 3</ref>). The final result is a visualization of the flow which is dense, easily interpreted, and effectively handles the complicated areas of the flow. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Animation</head><p>While the image described above and shown in <ref type="figure" target="#fig_3">Figure  3</ref> correctly shows the streamline direction of the vector field, the visualization is ambiguous in regards to whether the flow is moving forward or backward along the lines indicated. To disambiguate the direction of flow, animation is useful. Also, animating a flow visualization is physically meaningful.</p><p>As Cabral and Leedom discuss in <ref type="bibr" target="#b4">[5]</ref>, periodic motion filters <ref type="bibr" target="#b5">[6]</ref> can be used together with LIC to create the impression of motion, such that a flow appears to be moving in the direction of the vector field. A small number n of LIC images are computed, where in frame i the filter kemel is phase shifted by ish, where s is the period of the filter function. When played back, these images cause the appearance of ripples moving in the direction of the vector field. Because the filter kemel is periodic, the n frames can be cycled through continually for smooth motion.</p><p>On a parametric surface, the images are 'played' by texture mapping each in turn onto the surface. However, additional steps must be taken to ensure that the animation does not introduce misleading information into the visualization. The conversion from computational space to physical space maps square grid cells into quadrilaterals of varying dimensions. Therefore, the length of the convolution filter, which is measured in computational space units, is mapped to varying lengths in physical space. The length of the periodic filter determines the size and speed of the "ripples" in the animation. The speed is given by the amount of phase shift in physical space per unit time. Thus, if the period of one filter function is longer in physical space than another, that ripple appears to move faster than a shorter filter.</p><p>As a result of the warping that occurs in the mapping from computational to physical space, the animation appears uneven and erratic. In areas where the grid is sparse, the flow appears as little ripples moving fast, because the convolution kemel has been compressed, and in areas where the grid is dense, the flow appears as large ripples moving slowly. Since there is no correlation between apparent speed and actual speed of the flow, this motion is highly misleading.</p><p>The situation can be corrected by varying the length of the convolution filter while computing the LIC image. The length of the convolution filter must vary inversely with the grid density in the direction of the flow. Where the grid is sparse in physical space, we want to use a narrow convolution filter in computational space, as it will be stretched out when mapped. Likewise, where the grid is dense in physical space, we want to use a wide filter in computational space, as it will be compressed when mapped. See figure 4, next page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dense</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Area of Grid Physical Space</head><p>Computational Space <ref type="figure">Figure 4</ref>. A convolution filter function in physical space and zomputational space. The goal is for the filter to be of uniform length in physical space, regardless of grid density. Therefore we stretch the filter in -0mputational space in areas where the grid is dense, and compress the filter in computational space in areas where the grid is sparse.</p><p>We compute frames where the length of the convolution kernel used in the LIC algorithm at each grid cell p is given by a must greater than 1; if the length of the filter is 1 or less, the LIC algorithm simply returns the input texture pixel, unaffected by the vector field. b must be set to a finite length which will vary with the particular grid. 2) Convert to computational space using the inverse Jacobian as described in section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>vectors.</head><p>3) Take the magnitude of the computational-space <ref type="figure">Figure 5</ref> shows a single texture frame of an animation sequence computed in this way. When the 10 texture frames are played back, the flow appears smooth and even everywhere on the surface, rather than uneven and erratic. Thus we are able to use periodic motion filters even on parametric surfaces from curvilinear grids. <ref type="figure">Figure 5a</ref>. A single texture frame from an animated sequence com uted using the LIC algorithm with a raised cosine filter. The length oft&amp; filter varies inversely with the grid density in the direction of the Row. Therefore the ripples appear stretched in some areas and compressed in others.</p><p>5b. Close-up of the texture frame from above mapped onto the curvilinear grid, used to simulate Row around a ost The bttom edge of the texture maps around the post. When mappefonio the gnd, the npples are of uniform size. When animated, the npples give the impression of smooth Row</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Variable Speed</head><p>The next step in flow animation, whether on a regular grid or on a parametric surface, is to give a visualization of vector magnitude as well as vector direction. Thus, in a CFD flow visualization, the periodic motion should be slow where the flow has low velocity and quick where the flow has high velocity. Cabral and Leedom <ref type="bibr" target="#b4">[5]</ref> suggest achieving this effect by varying the frequency of the filter function, while keeping its length constant. However, the limited dynamic range (experimentation shows only between 2 and 4 ripples per kernel are interpretable) and the artifacts caused by changing the shape of the filter make it difficult to use this approach for meaningful results. We have found that a better solution is to vary the amount of filter function phase shift at each grid cell in proportion to the physical-space vector magnitude.</p><p>The amount of phase shift is what determines the apparent speed, given a uniform-length filter kernel. An infinitesimally small phase shift will appear not to move at all. Likewise, a 90-degree phase shift in every frame will produce a full cycle in four frames, which appears to move very quickly. (At anything greater than 180 degrees, temporal aliasing occurs.) Phase shifts ranging from 0 to 90 degrees can be mapped to the actual range of physical vector magnitude for a convincing variable-speed animation.</p><p>In a frame from a variable-speed animation sequence, each pixel will be computed with a convolution kernel that has a phase shift proportional to the corresponding grid cell's physical vector magnitude. Therefore the period of the filter function is different at each pixel, and there is no fixed number of frames that can be used in a cyclic animation. Therefore, we adopt the following strategy of sampling the "real" solution and interpolating to find the pixel values which we will display.</p><p>In practice, the texture frames are computed as follows:</p><p>1) First compute N LIC images, such that in image i,</p><p>where €Ii is the amount of filter phase shift, e,= ism.</p><p>As in section 4 s is the period of the filter function. The larger N, the more accurate the visualization. The intensity of pixel p in image i is defined as T(i, p).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ymin ( Y )</head><p>2) For each grid cell p , let</p><formula xml:id="formula_1">max ( y ) -min (y) 4 =</formula><p>where y denotes physical vector magnitude at grid cell p. q is a real number in [O, 11 that gives the vector magnitude in cell p relative to the magnitudes in the whole grid.</p><p>3) The intensity of pixel p in frame j of the displayed image, <ref type="figure">I(j,p)</ref>, is found by interpolating linearly between the two LIC images from step (1) closest to it: <ref type="figure">+aT( 4 -j modN,p)</ref> i Y. 1</p><formula xml:id="formula_2">Let CL = q-JmodN-q -j modN 1' L Y.1 at cell p. Then</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Implementation</head><p>We use the texture-mapping capabilities of a high-end workstation <ref type="bibr" target="#b7">[8]</ref> to display surfaces with LIC-images mapped onto them in an interactive program. All LIC images are computed prior to running the interactive program, since the LIC algorithm is fairly computeintensive (images take on the order of several seconds to minutes to compute). The hardware is capable of switching between pre-loaded textures quickly enough that we are able to run animation in real time, while the user manipulates the surface.</p><p>For single-speed periodic motion, we find that 5 -12 texture frames is sufficient for smooth animation.</p><p>For variable-speed animation, we are no longer able to precompute a finite number of frames and cycle through them, because the amount of phase shift varies at every grid cell. However, steps 2 and 3 of the algorithm described in section 5 are not compute intensive, once the N LIC-images of step 1 have been precomputed. This implies that a real time implementation of variable-speed animation should be possible. Unfortunately, we have not been able to achieve this with our hardware, an SGI Reality Engine, because the time required to load a new texture into the texture cache is too long to permit good frame rates. However, we expect that within the foreseeable future texture-mapping hardware will allow fast texture definition and this feature will be possible.</p><p>In the meantime, we have experimented with two alternative solutions.</p><p>(1) Calculate and store a large number of texture frames using a real phase shift at every grid cell which is a linear function of the physical vector magnitude in that grid cell. The number of frames required for anything more than a few seconds of animation using this solution is so large that storage requirements quickly exceed the memory capabilities of a workstation. Therefore either (a) the short sequence of animation must be continually restarted, which causes the flow to appear to "jump" every few seconds, or (b) the animation must be stored on video or another digital playback device, and the real time interactivity possible with all other techniques described in this paper are forfeited. We show an implementation of (a). The animation is smooth in spurts of 5 seconds, and the speed of the flow is clearly varying across the surface (see video).</p><p>(2) Approximate the continuous solution by choosing a minimum phase shift, @, and quantizing all phase shifts as integer multiples of @. In this solution, only M = d@ frames need to be precomputed, because the M frames will form a complete cycle. The drawback of this solution is that it is susceptible to aliasing and rasterization caused by the sampling and quantization of phase shifts. The advantage is that it can be played continually in real time on a workstation, without the jumps of solution (1).</p><p>To compute the frames for this discretized solution, we follow the same steps as described for the continuous solution in section 5, but round q to the nearest multiple of 1IM. In this case there is no interpolation and M frames suffice to form a cycle of animation.</p><p>In our implementation of solution (2), we see that while the speed of the flow is clearly varying, aliasing and rasterization artifacts do appear.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Future Work</head><p>There are several promising directions for future work. First, in order for this technique to become useful for practical applications, a number of extensions must be implemented. Foremost among these are multigrid solutions, unsteady flows, and unstructured grids.</p><p>Also, we hope to extend this technique to the visualization of 3-dimensional vector fields. While the LIC algorithm in itself extends easily to a 3-dimensional Cartesian grid, the output image data requires additional processing before a useful image is produced. Cutting planes, isosurfaces, or volume rendering techniques will be necessary for this extension. Experimentation with input textures and convolution filters will be needed to achieve effective images. Furthermore, new algorithms will be required to handle curvilinear grids in this situation as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Summary</head><p>We have presented several extensions to Line Integral Convolution. First, we have described how to use the LIC algorithm on curvilinear grid surfaces. We have shown how to solve the problems that arise when using periodic motion filters in LIC on a curvilinear surface. Lastly, we have introduced a method of incorporating visualization of vector magnitude into the LIC algorithm, by showing the animation at variable speeds. All algorithms are designed such that with modem graphics hardware the surfaces can be displayed, animated, and manipulated in real time.</p><p>Our visualization technique provides intuitive and accurate information about the vector field, and thus is a useful complement to other visualization techniques.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>, Becker, and Crawfis[l3], Ma and Smith[l2], and Max, Crawfis, and Williams[ 141 have implemented systems which advect clouds, smoke, and flow volumes. These techniques show the flow on a coarse level but do not highlight finer details. Hin and Post[ 111 and van Wijk[ 161 have visualized flows with particle-based techniques, which show local aspects of the flow. Bryson and Levit [4] have used an immersive virtual environment for the exploration of flows. Helman and Hesselink[ 101 have generated representations of the vector field topology, which use glyphs to show critical points in the flow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>set of grid cells along the streamline within a set distance 0.5 1 from the point (i, j), shown as the shaded cells in Figure 1. 1 = the length of the convolution kemel C&amp;) = input texture pixel at grid cell p P h (PI = J k (w)dw a where a = the arclength of the streamline from the point (i, j) to where p = the arclength of the streamline from the point (ij) to where k(w) = the convolution filter function the streamline enters cell p the streamline exits cell p</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure l .</head><label>l</label><figDesc>A vector field where the streamline through point (ij) is shaded.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fi re 3 .</head><label>3</label><figDesc>Top: a LIC ima e of the com utational space velocity fie% over the surface of tte spaceshutfle. The input texture is white noise, and the convoluhon kemel IS a simple box filter. Below: the LIC image above texture mapped over the space shuttle in physical space. Note the separation apparent on the fuselage and the vortices at the wingtip.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>a</head><label></label><figDesc>is the minimum length of the kernel, measured in grid b controls the range of possible kernel lengths, and r is the grid density at grid cell p in the direction of the cells flow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>r(p) for each grid cell is given by I Tax ax ax]-' I r(p) for the entire grid is computed by the following steps: 1) Normalize the vector field to unity in physical space.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The author wishes to thank David Yip, who provided support of many forms throughout this research, the Applied Research Branch staff of NASA Ames, who offered helpful discussions, Marc Levoy, who gave advice on the research and on the writing of this paper, and Brian Cabral and Casey Leedom, who made their LIC code publicly available.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Notes on the Topology of Vector Fields and Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Asimov</surname></persName>
		</author>
		<idno>RNR- 93-003</idno>
		<imprint>
			<date type="published" when="1993-02" />
		</imprint>
	</monogr>
	<note type="report_type">NASA Ames Research Center Report</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Introduction to Scientijic Visualization Tools and Techniques</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">FAST A Multi-Processing Environment for Visualization of CFD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bancroft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Memtt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Plessel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kelaita</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mc-Cabe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Globus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;90</title>
		<meeting>Visualization &apos;90<address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The Virtual Windtunnel: An Environment for the Exploration of Three-Dimensional Unsteady Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bryson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Levit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;91</title>
		<meeting>Visualization &apos;91<address><addrLine>San Diego</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Imaging Vector Fields Using Line Integral Convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings &apos;93, ACM SIGGRAPH</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Motion Without Movement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Freeman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">H</forename><surname>Adelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Heeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings &apos;91, ACM SIGGRAPH</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Tool for Visualizing the Topology of Three-Dimensional Vector Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Globus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Levit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lasinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;91</title>
		<meeting>Visualization &apos;91<address><addrLine>San Diego</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Graphics Library Programming Guide</title>
		<imprint>
			<biblScope unit="volume">II</biblScope>
			<date type="published" when="1992" />
			<publisher>Silicon Graphics, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Essential Ray Tracing Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Haines</surname></persName>
		</author>
		<editor>A. Glassner</editor>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
	<note>An Introduction to Ray Tracing</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Surface Representation of Two-and Three-Dimensional Fluid Flow Topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesselink</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;90</title>
		<meeting>Visualization &apos;90<address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Visualization of Turbulent Flow with Particles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;93</title>
		<meeting>Visualization &apos;93<address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Virtual Smoke: An Interactive 3D Flow Visualization Technique</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K-L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;92</title>
		<meeting>Visualization &apos;92<address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Flow Volumes for Interactive Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;93</title>
		<meeting>Visualization &apos;93<address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Visualizing Wind Velocities by Advecting Cloud Textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;92</title>
		<meeting>Visualization &apos;92<address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
