<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Discretized Marching Cubes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montanit</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scateni</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Centro di Ricerca</orgName>
								<address>
									<country>Sviluppo</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopignot</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I. -Consiglio</forename><surname>Nazionale Delle Ricerche</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Via</forename><forename type="middle">S</forename><surname>Maria</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>ITALY</roleName><surname>Pisa</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cnuce -Consiglio</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nazionale</forename><surname>Delle Ricerche</surname></persName>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Studi Superiori Sardegna (CRSI)</orgName>
								<address>
									<settlement>Cagliari</settlement>
									<country key="IT">ITALY</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Discretized Marching Cubes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Since the introduction of standard techniques for isosurface extraction from volumetric datasets, one of the hardest problems has been to reduce the number of triangles (or polygons) generated. This paper presents an algorithm that considerably reduces the number of polygons generated by a Marching Cubes-like scheme without excessively increasing the overall computational complexity. The algorithm assumes discretization of the dataset space and replaces cell edge interpolation by midpoint selection. Under these assumptions, the extracted surfaces are composed of polygons lying within a finite number of incidences, thus allowing simple merging of the output facets into large coplanar polygons. An experimental evaluation of the proposed approach on datasets related to biomedical imaging and chemical modelling is reported.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The use of the Marching Cubes (MC) technique, originally proposed by W. Lorensen and H. Cline 171, is considered to be a standard approach to the problem of extracting isosurfaces from a volumetric dataset. Marching Cubes is a very practical and simple algorithm and many implementations are available both as part of commercial systems or as public domain software. Despite its extensive use in many applications, it does have some particular shortcomings: topological inconsistency <ref type="bibr">[ 11,</ref> algorithm computational eficiency and excessive output data fragmentation. Standard MC produces no consistent notion of object connectivity; the local surface reconstruction criterion used give rise to a number of topological ambiguities, and therefore MC may output surfaces which are not necessarily coherent. These shortcomings have been extensively studied [ll] and solutions have been proposed [12, 15, 81. MC computational efficiency can be increased by exploiting implicit parallelism (each cell can be independently processed) <ref type="bibr" target="#b3">[4]</ref> and by avoiding the visiting and testing of empty 1070-2385194 $04.00 0 1994 IEEE cells or regions of the volume [14]. Excessive fragmentation of the output data can prevent interactive rendering when high resolution datasets are processed. What has changed since the technique was introduced seven years ago, has been the amount of data to be processed while extracting such surfaces. Equipments that can generate volumetric datasets as large as 512*512*[&lt; 5121 are now generally available, and we are on the way to achieving machines capable of producing 1024 * 1024 * <ref type="bibr">[&lt; 10241</ref> datasets or, in other words, 1 Gigavoxel per dataset. Although an isosurface does not usually cross all the voxels, we can understand how easy it is to generate more than one million triangles per surface. State-of-the-art hardware is not yet fast enough to manipulate such masses of data in real time. These obstacles gave rise to substantial research aimed at reducing the number of triangles generated by MC. The solutions proposed can be classified into adaptive techniques, where the cell size is locally adapted to the shape of the surface [lo] or the dataset is organized into high and low interest areas and more primitives are produced in selected areas only; and filtering techniques, where facet meshes returned by a surface fitting algorithm are filtered in order to merge or eliminate part of them. Filtering-based approaches can be classified as: a) coplanar facets merging, in which facets are filtered by searching for and merging coplanar and adjacent facets [6]; b) elimination of tiny facets, where the irregularity of the surface produced is reduced by eliminating the tiny triangles produced when the iso-surface passes near a vertex or an edge of a cubic cell; this is accomplished by bending the mesh so that a number of selected mesh nodes will lie on the iso-surface and the tiny triangles will degenerate into single vertices. The solution is based on a modified iso-surface fitting algorithm and a filtering phase; 40% reductions in the number of triangles are reported [9]; c) approximated surface fitting, based on trading off data reduction for a reduction in the precision of the representation generated, using error criteria to measure the suitability of the approximated surfaces. <ref type="bibr">Schroeder et al. [13]</ref> proposed an algorithm based on multiple filtering passes, that by analysing locally the geometry and topology of a triangle mesh removes vertices that pass a minimal distance or curvature angle criterion. The advantage of this approach is that any level of reduction can be obtained, on the condition that a sufficiently coarse approx- imation threshold is set; reductions up to 90% have been obtained with an approximation error lower than the voxel size. In another approach, by <ref type="bibr">Hoppe et al. [5]</ref>, mesh optimization is achieved by evaluating an energy function over the mesh, and then minimizing this function by either removing/moving vertices or collapsing/swapping edges. Both approaches require a topological representation of the mesh to be decimated.</p><p>In this work we propose Discretized Marching Cubes (DiscMC), an algorithm situated half-way between the cuberille method, which assumes constant value voxels and directly returns the voxels faces (orthogonal to the volume axes) [3], and the cell interpolation approach of MC. On the basis of two simple considerations, which both relate to data characteristics and visualization requirements, our solution leads to interesting reductions in output fragmentation by applying a very simple filtering approach. Moreover, the use of an unambiguous triangulation scheme [8] allows isosurfaces without topological anomalies to be obtained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2</head><p>Given a binary dataset, linear interpolation is not needed to extract isosurfaces. When a cell edge in a binary dataset has both on and off corners, the midpoint of the edge is the intersection being looked for. In a number of applications where approximated isosurfaces might be acceptable, the former assumption can be reasonably extended to n-value high resolution datasets. The maximal approximation error involved by adopting midpoint interpolation is 1/2 of the cell size, and in some applications the resolution of the dataset justifies such a lack of precision. Considering a 512 * 512 * [&lt; 5121 resolution, rendering the isosurface generated produces approximately the same images whether linear interpolation or midpoint selection is used.</p><p>Discretized Marching Cubes (DiscMC) is here proposed as an evolution of MC based on midpoint selection. The set of vertices that can be generated by DiscMC are shown in <ref type="figure">Figure 1</ref>: there are only 13 different spatial locations on which new vertices can be created (12 cell-edge midpoints plus the cell centroid). Moreover, applying midpoint selection in MC allows for a finite set of planes where the generated facets lie. We have only 13 different plane incidences onto which a facet can lie, and these are described by the following equations:</p><formula xml:id="formula_0">The Discretized Marching Cubes Algorithm ..... .... ! . . . . . :</formula><p>. :</p><formula xml:id="formula_1">: .. j . : . . . . &gt; .............. i .......................... 1. x=c 2. y=c I . 3. F C 4. x+y=c 5 . x-y=c 6. X+FC 8. y+z=c 10. x+y+z=c 7. x-FC /p, 9. y-z=c P @ $ 2 3</formula><p>11. x-y+z=c</p><p>12.</p><p>x+y-z=c 13. x-y-z=c As shown in <ref type="figure">Figure 2</ref>, for each incidence the algorithm generates a limited number of different facets.</p><p>The following considerations are the basis of our DiscMC algorithm: a) each facet can be simply classified in terms of its shape and plane incidence; b) the limited number of different plane incidences increases the percentage of coplanar adjacent facets and therefore drastically reduces the number of polygons returned while preserving small, but possibly significant, roughnesses; c) the algorithm does not require interpolation of the surface intersections along the edges of the cells; this implies that it works in integer arithmetic (except for the computation of normals) at a higher speed than standard methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">A new lookup table</head><p>For each on-off combination of the cell vertices (there are 256 different combinations), the standard MC lookup table (lut) codes the number of triangles produced and the cell edges on which these vertices lie. DiscMC requires a simple reorganization of the standard MC lut. Midpoint selection means that the number of different facets returned by DiscMC is k e d , and we only have a constant number of different output primitives for each plane Under these assumptions, the resulting facet set returned by DiscMC for each of the canonical MC configurations is reported in <ref type="figure">Figure 3</ref>. With respect to the original proposal by Lorensen and Cline we omit configuration 14 (this can be obtained by reflection from configuration 11, i.e. configuration k in <ref type="figure">Figure 3.</ref>). Furthermore, three more configurations have to be managed in order to prevent topological ambiguity (configurations n, o and p in <ref type="figure">Figure 3 [8]</ref>). Each facet is coded in the DiscMC lut by using a shape code, which codifies the shape and position of the facet (1..4 for right triangles, 1..2 for rectangles and 1..8 for equilateral triangles), and an incidence code, i.e. the plane on which the facet lies. Geometrical information on the facet vertices is not explicitly stored in the DiscMC lut. For each cell vertex configuration, DiscMC lut stores from zero up to seven facets, each represented by a shape code (1.3) and an incidence code (-13..13). We use signed incidences to store separately facets which lie on the same plane and have opposite normals direction (both in order to give an implicit representation of facet orientation and to fast facet search in the postprocessing merging phase). Some cell configurations are graphically represented in <ref type="figure" target="#fig_2">Figure 4,</ref> together with the corresponding DiscMC lut entries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">lsosurface extraction</head><p>The isosurface reconstruction process returns intermediate results using a set of indexed data structures. The volume dataset is processed slice by slice. For each cell traversed by an isosurface, the DiscMC produces a set of facets by means of the DiscMC lut. Each facet is coded by its shape, incidence and the index of the cell in which it lies (i.e. its geometical position). In order to optimize the merging phase the facets produced are stored in a number of hash tables, one for each different incidence of the facets. Thus, 26 hash tables are used, and hash indexes are computed in terms of shape code and cell index.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Post-processing merging phase</head><p>The merging phase begins when the isosurfaces have been fitted. Each hash table is analyzed in order to search for adjacent faces, which by construction of the hash tables will also be iso-oriented and mergeable. Hash coding is chosen to allow a rapid search for adjacent facets (a nearly constant mean access time has been measured in a number of algcrithm runs). The merging algorithm does not work with the vertex coordinates of each merging polygon, but adopts Freeman's chains <ref type="bibr" target="#b1">[2]</ref> as an intermediate representation scheme. In this scheme, a polygonal line is represented by the coordinates of the starting point of the chain and a set of directed links, that is, a set of relative displacements. This solution allows the unnecessary vertices to be rapidly eliminated.</p><p>The merging algorithm is simple and efficient. Due to the limited number of facet shapes and orientations, for each facet f and for each edge e off the facet f' which might be adjacent on e to f is univocally determined. The algorithm is outlined in <ref type="figure" target="#fig_4">Figure 5</ref> (an example is shown in <ref type="figure">Figure 6)</ref>. PUSH* verifies, for each edge pushed onto the edgestack, if an opposite edge exists on the stack, i.e. an edge with the same geometrical position but moving in the opposite direction. If this edge exists, mark both the edges as connecting edges. Marked edges will produce either connecting links (i.e. links which connect the starting point of the chain to the boundary of the region, or the boundary of the region to the boundary of the holes; see links 2 and 7 in the 15th tiles triple of <ref type="figure">Figure 6</ref>), or consecutive opposite links that have to be eliminated due to the reconstruction algorithm adopted.</p><p>The Merge algorithm main loop iterates until hash tables are empty. For each iteration of the first while loop, Merge produces the boundary of a region (anticlockwise in our implementation) and the boundaries of the holes (clockwise), if any. At the end of each iteration the boundaries of regions and holes are reconstructed by eliminating the marked links and, if necessary, by splitting the chain. Chains are then converted in the usual vertex-based representation.</p><p>The Merge algorithm uses a set of simple lookup tables which permit a general procedure to be designed irrespective of the type of the facets and the plane they belong to. These lookup tables store: 0 the edges to be pushed onto the edgestack (depending 0 the edges to be pushed onto the edgestack when an adjacent facet has been found, or otherwise the link to be added to the Freeman's chain;</p><p>on the starting point chosen); 0 the position (with respect to the current cell) of the In addition, through lookup tables we convert the chain links into relative displacements depending on the incidence plane we are examining. cells to be inspected for adjacent facets. As previously introduced, with Freeman's chain representation scheme ( <ref type="figure" target="#fig_3">Figure 7</ref> shows the links used for three types of elementary primitives) unnecessary vertices can be removed by simply converting equal consecutive links into a single segment.</p><p>The worst case computational complexity of the merging phase is linear to the number of facets returned by the isosurface reconstructor. For each edge, the merger computes the potential adjacent facet and searches for such a facet in the hash table (a nearly constant time operation). In the worst case, when no mergeable facet pairs exist, the test is repeated e times for each facet f , with e the number of edges of facet f.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Vertex normals computation</head><p>Normals on the vertices of the isosurfaces extracted are needed in order to compute Gouraud or Phong shading. Normals can be computed during isosurface extraction (in terms of gradients [16], as in standard MC) or after the merging phase. In the current DiscMC implementation we computed vertex normals at the end of the merging process in order to avoid computing and storing a lot of unnecessary vertex normals. However, further processing of the volume data is thus needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluation of results and conclusions</head><p>We tested DiscMC on a series of different datasets and compared results with a classic MC implementation. 0 add a link to the chain which is directed according to the current edge er; 0 if the edge is a connecting edge, add a marked link to the current chain (e.g. the link with a white arrow head in the 16th tile triple in <ref type="figure">Figure 6)</ref>; 0 insert the current Freeman chain into F; end algorithm.  <ref type="table" target="#tab_0">Table 1</ref>. Time comparison needs to be split into three steps: facet extraction, merging and generation of normals. The percentage of time spent in each stage of the computation varies from dataset to dataset; on average, it takes about 10% of the total time to extract facets, 85% to merge polygons, and about 5% to generate normals. The buckyball dataset and the head dataset, which are comparable in terms of voxel number, took around 2-3 minutes and 6-7 minutes, respectively, on an IBM lUSC6000/550 workstation.</p><p>It is difficult to make a time comparison with other filtering approaches, because most of them do not report the running times but only the simplification percentages obtained. The mesh optimization approach by Hoppe et al. <ref type="bibr" target="#b4">[5]</ref> is the only alternative technique which reports running times; the simplification of meshes (8000-18000 facets) with this method, which produces very good results indeed, took tens of minutes on a DEC Alpha workstation. In the proposal by <ref type="bibr">Schroeder et al. [13]</ref> running times are not reported, but the decimation phase is a much more complex task than the simple merging phase of DiscMC. In fact, the simplification of the mesh is obtained by multiple passes over the mesh. At each pass a vertex is selected for removal, all triangles that are incident on that vertex are removed, and the resulting hole is patched by computing a new local triangulation. On the other hand, in the worst case, DiscMC has a complexity linear to the number of edges: for each edge of each facet, it searches for the adjacent facet on a hash list (a constant time and cheap operation), and makes an insertion/removal onto/from the edge stack. The reduction in time complexity is significant, because the design goal of DiscMC was to give simplified meshes with high efficiency, to be used, for example, while searching for the correct threshold. Once this threshold has been selected, a more sophisticated method such as [13] can be used to obtain the best approximated mesh.</p><p>Another characteristic which differentiates DiscMC from other simplification approaches is that it does not entail managing a geo-topological representation of the triangle mesh. The topological relations are implicitly stored in the coding scheme used (facets shape and incidence) and this simplifies the implementation at the cost of single constanttime search into hash lists.</p><p>The results obtained and the good quality of the output images (the colour plates in <ref type="figure">Figures 9 and 11</ref> were obtained with our algorithm, while the ones on Figures 8 and 10 were obtained with classic MC without mesh simplification) support our claim that Discretized Marching Cubes represents a valid tool for the rapid reconstruction and visualization of isosurfaces from medium and high resolution 3D datasets. One of the most salient characteristics of the algorithm is that integer arithmetic is sufficient, and restricts the use of floating point computations to normals only. This is an important factor which enhances the overall performance. Discretized Marching Cubes is both a valid solution for applications where the precision of the result is not critical or also as an intermediate solution to speed up the time needed to tune parameters, relegating to the final stage alone the use of techniques that are more precise in terms of visual results or geometrical approximation, such as ray tracing or standard MC. : Steps required to merge a number of adjacent facets: for each iteration, the figure represents the facets remaining in the facet list (left tile), the edges present on the edge stack (centre tile) and the current Freeman chain (right tile). In the edge stack tiles, the label associated with the edges represents the order of insertion in the stack (1 is the top edge); edges which have a circled label represent connecting edges. In the chain tiles, arrows with a white end represent connecting links.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F a c e t L k t</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DiscMC</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>7 1Figure 1 :</head><label>71</label><figDesc>The set of different vertex locations produced by DiscMC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>The facets returned by DiscMC for each different plane incidence." ................ ........ ................ .. ..... The sets of facets returned by DiscMC for each cell vertex configuration. x = c , y = c , z = c , z f y = c , x f z = c , y f z = c , x f y f z = c .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Some cell configurations and related DiscMC lookup table entries. incidence: only right triangles are generated on planes x = c, y = c and z = c (Figures 2.1,2.2 and 2.3); only rectangles on planes z f y = c, z f z = c and y f z = c (Figures 2.4, 2.5, 2.6, 2.7, 2.8 and 2.9); only equilateral triangles on planesx f y f z = c(Figures 2.10, 2.11, 2.12 and 2.13). Moreover, using midpoint interpolation means that the geometrical location of facet vertices depends solely on the vertices configuration and the position of the cell in the dataset mesh.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 7 :</head><label>7</label><figDesc>. . . . . . . . . . . . . . . . . . . . . . -, . . . . . . ... . .......... .... , . The links of Freeman's chains for (a) right triangles belonging to plane 3, (b) rectangles of plane 9, and (c) equilateral triangles of plane 12.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Pseudocode of the Merge algorithm (nfacets); the respective numbers are in the rightmost three columns in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Figure 9: dataset using DiscMC. Isosurface reconstruction from the Buckyball</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>extract a facet f from hash table HTi; 0 select one of the vertices o f f as the starting point of the current Freeman chain; 0 push the edges of the facet onto the edgestack (LIFO); {each edge is coded in the edgestack by the shape code of the current facet and the shape code and the cell coordinates of the potential adjacent facet.</figDesc><table><row><cell>re-</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>The number of facets returned by the Discretized Marching Cubes and classic Marching Cubes algorithms on three different datasets. R. Yagel, D. Cohen, and A. Kaufman. Normal estimation in 3D discrete space. The Visual Computer,</figDesc><table><row><cell>tions in isosurface generation. ACM Computer Graph-</cell></row><row><cell>ics, 24(5):79-86, Nov 1990.</cell></row><row><cell>[16]</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">(See color plates, page CP-32.)</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Acknowledgements</head><p>This work has been partially carried out with the financial contribution of the Sardinia Regional Authorities.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Letters: Additional reference to &quot;Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Durst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="72" to="73" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Computer processing of linedrawing images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Freeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="57" to="97" />
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Fast surface tracking in 3D binary images. Computer Vision, Graphics and Image Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gordon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Udupa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="196" to="214" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Massively parallel isosurface extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hinker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization &apos;92 Proceedings</title>
		<editor>A.E. Kaufman and G.M. Nielson</editor>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="77" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
		<title level="m">Mesh optimization. ACM Computer Graphics (SIGGRAPH &apos;99 Conj. Proc.)</title>
		<imprint>
			<biblScope unit="page" from="19" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D C B</forename><surname>Kalvin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">B</forename><surname>Cutting</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Haddad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Noz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Constructing topologically connected surfaces for the comprehensive analysis of 3D medical structures</title>
	</analytic>
	<monogr>
		<title level="m">Figure 8: dataset using standard MC</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="247" to="259" />
		</imprint>
	</monogr>
	<note>1445 Image Processing. no mesh simplification</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Isosurface reconstruction from the Buckyball</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Marching cubes: a high resolution 3D surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="163" to="170" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A modified 1 u look-up tabie for implicit disambiguation of Marching Cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scateni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scodinno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Compact isocontours from sampled data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Gems III</title>
		<editor>D. Kirk</editor>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="23" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Adaptive generation of surfaces in volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="182" to="199" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An Evaluation of Implicit Surface Tilers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="33" to="41" />
			<date type="published" when="1993-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Surface mapping brain functions on 3D models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Payne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Toga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics €4 Applications</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="41" to="53" />
			<date type="published" when="1990-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Decimation of triangle mesh</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Zarge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics, J. Wilhelms and A. Van Gelder. Octrees for faster isosurface generation. ACM Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="57" to="62" />
			<date type="published" when="1990-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ToDoioeical considera</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="65" to="70" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
