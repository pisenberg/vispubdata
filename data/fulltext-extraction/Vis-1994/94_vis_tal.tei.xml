<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">GASP -A System for Visualizing Geometric Algorithms *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ayellet</forename><surname>Tal</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Princeton University</orgName>
								<address>
									<postCode>08544</postCode>
									<settlement>Princeton</settlement>
									<region>NJ</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Dobkin</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Princeton University</orgName>
								<address>
									<postCode>08544</postCode>
									<settlement>Princeton</settlement>
									<region>NJ</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">GASP -A System for Visualizing Geometric Algorithms *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper describes a system, GASP, that facilitates the visualization of geometric algorithms. The user need not have any knowledge of computer graphics in order to quickly generate a visualization. The system is also intended to facilitate the task of implementing and debugging geometric algorithms. The viewer is provided with a comfortable user i n t e~a c e enhancing the exploration of an algorithm&apos;s functionality. We describe the underlying concepts of the system as well as a variety of examples which illustrate its use.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The visualization of mathematical concepts goes back to the early days of graphics hardware <ref type="bibr">[ 191, [2]</ref>, and continues to the present 1161, <ref type="bibr">[14, 131, [17]</ref>. These videos use graphics and motion to explain geometric ideas in three dimensions and higher. They have been widely accepted as the necessary companions to the traditional medium of journal publication [U], <ref type="bibr" target="#b26">[28]</ref>. Similar gains in exposition are found in the algorithm animation work that has become popular in recent years <ref type="bibr">[ll, [71, [4, 51, [23, 241, [6]</ref>, <ref type="bibr" target="#b19">[21]</ref>, <ref type="bibr" target="#b18">[20]</ref>. The limiting force has been the difficulty of generating the graphics for such animations.</p><p>We have chosen a restricted domain, that of computational geometry, to build a system that greatly facilitates the visualization of algorithms regardless of their complexity. The visual nature of geometry makes it one of the areas of computer science that can benefit greatly from visualization. Even the simple task of imagining in the mind a three-dimensional geometric construction can be hard. In many cases the dynamics of the algorithm must be understood to grasp the algorithm, and even a simple animation can assist the geometer.</p><p>The main principle guiding our work is that algorithm designers want to visualize their algorithms but are limited by current tools. In particular, visualizations would be less rare if the effort to create them was little. In the past, visualizations have been produced by developing sophisticated software for a particular situation but there has been little movement towards more widely usable systems. By limiting our domain, we are able to create such a system that enables others to easily use it. Indeed, two colleagues have already published visualizations built with our system <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b8">[9]</ref>.</p><p>We describe in this paper our system, GASP, (Geometric Animation System, Princeton). We present the basic ideas that underlie the development and implementation of our system, and we demonstrate its utility in the accompanying video. Our system differs from its predecessors (e.g., Balsa <ref type="bibr" target="#b6">[7]</ref>, Balsa-I1 14, 51, Tango <ref type="bibr" target="#b21">[23,</ref><ref type="bibr">241 and Zeus [6]</ref>) in several ways. In particular, the development of GASP was driven by three major goals, which we feel represent a radical departure from previous work.</p><p>GASP allows the very quick creation of three dimensional algorithm visualizations. A typical animation can be produced in a matter of days or even hours. In particular, GASP allows the fast prototyping of algorithm animations.</p><p>Even highly complex geometric algorithms can be animated with ease. This is an important point, because it is our view that complicated algorithms are those that gain the most from visualization. To create an animation, it is sufficient to write a few dozen lines of code.</p><p>Providing a visual debugging facility for geometric computing is one of the major goals of the GASP project. Geometric algorithms can be very complex and hard to implement. Typical geometric code is often heavily pointer-based and thus standard debuggers are notoriously inadequate for it. In addition, running geometric code is plagued by problems of robustness and degeneracies.</p><p>There are many ways in which the system can be used. First, it can be used simply as an illustration tool for geometric constructions. Second, stand-alone videotapes to accompany talks and classes can be created by GASP. Third, GASP can ease the task of debugging. Fourth, GASP can significantly enhance the study of algorithms by allowing students to interact and experiment with the animations. Fifth, GASP enables users to create animations to attach to their documents.</p><p>Computational geometers describe configurations of geometric objects either through ASCII text as generated by symbolic computing tools (e.g., Mathematica <ref type="bibr" target="#b27">[29]</ref>) or through hand drawn figures created with a graphics editor. Our system offers an alternative to this by allowing the geometer to feed ASCII data into a simple program and get a three-dimensional dynamic (as well as static) visualization of objects.</p><p>1070-2385/94 $04.00 0 1994 IEEE Often, the dynamics of the algorithm must be understood. Animations can assist the geometer and be a powerful adjunct to a technical paper. With GASP, generating an animation requires no knowledge of computer graphics. The interaction with the system is tuned to the user's area of expertise, i.e., geometry.</p><p>Until recently, most researchers have been reluctant to implement, let alone visualize, their algorithms. In large part, this has been due to the difficulty in using graphics systems combined with that of implementing geometric algorithms. This combination made it a major effort to animate even the simplest geometric algorithm. Our system can ease some of the unique hardships of coding and debugging geometric algorithms. The inherent difficulty in checking a geometric object (e.g., listing vertices, edges and faces of a polyhedron) in a debugger, can be eliminated once it becomes possible to view the object. In practice, a simple feature such as being able to visualize a geometric object right before a bug causes the program to crash has been an invaluable debugging tool.</p><p>Visualization can have a great impact in education. Watching and interacting with an algorithm can enhance the understanding, give insight into geometry and explain the intuition behind the algorithm. The environment in which the animation runs is designed to be simple and effective. The viewer is able to observe, interact and experiment with the animation.</p><p>An important consideration in the design of GASP is the support of enclosures of animations in online documents. GASP movies can be converted into MPEG movies which can be included in a Mosaic document. A user is able to include animations in document. The reader of the document is presented with an icon in the document and clicking on the icon causes the animation to play. This way, researchers are able to pass around documents with animations replacing figures.</p><p>In the next section we describe the specification of the system. We focus on the ways the system meets the needs of both the geometer and the viewer. In Section 3 we describe, through examples, how our system has been used in various scenarios. This section is accompanied with a videotape that demonstrates the various cases. Section 4 discusses some implementation issues. We conclude in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The System</head><p>The scenes of interest to us are built out of geometric objects and displays of data structures. Typical geometric objects are lines, points, polygons, spheres, cylinders and polyhedra. Typical data structures include lists and trees of various forms. The operations applied to these objects depend upon their types. A standard animation in the domain of computational geometry is built out of these building blocks.</p><p>A geometer creating an animation cares about the structure of the animation (which building blocks are included), and the structure of each scene. The geometer is less concerned, however, about how each building block animates, about colors, about the speed of the animation etc. To draw an analogy to UT$ [15], the creator of the document is concerned more with the text the paper includes and less with the margins, spacings and fonts. Our system allows the user to generate an animation with minimal effort by specifying only the aspects of the animation about which the user cares. There are times, however, when the creator of the animation does want to change the viewing aspects (e.g., colors) of the animation, just like the writer of a document would like to change fonts. Our system allows this also.</p><p>The end-user (the viewer) need not know how the animation was produced. By analogy, the reader of a document does not care how it was created. The viewer would like to be able to play the animation at low or high speed, to pause and alter the objects being considered and to run the animation on an input of the user's choosing among other things. Our system provides an environment that enables this.</p><p>In this section we discuss the design of the system which comes to answer the above needs. We consider two interfaces: the programmer interface and the viewer interface. For the first of these, making the animation creation a quick and easy task is the aim of our system. The viewer interface is designed to be simple and effective, and to allow the user to experiment with the animation.</p><p>Programmer Interface: To generate an animation, the programmer needs to write C code which includes calls to GASP'S functions. Making the snippets of C code which generate the animation short and powerful is our goal. To do this, we follow two principles: First, the programmer does not need to have any knowledge of computer graphics. Second, we distinguish between what is being animated and how it is animated. The application specifies what happens and need not be concerned with how to make it happen on the screen. For example, the creation of a polyhedron (The What) is different from the way it is made to appear through the animation (The How). It can be created by fading into the scene, by traveling into its location etc. The code includes only manipulations of objects and modifications of data structures. Style files can be used by the programmer to change from default aspects of the animation to other options. In other words, the interface we provide allows the programmer to write brief snippets of C code to define the structure of an animation and ASCII style files to control any single viewing of the animation.</p><p>The programmer interface contains three classes of operationsgeometric operations, operations on datastructures and motion.</p><p>Geometric objects, such as polyhedra, spheres, cylinders, lines and points, can be created, removed and modified. The way each such operation is visualized depends on the type of object. For instance, by default, Create-polyhedron fades in the given polyhedron and Create-point causes a point to blink. Removal of an object is executed in a reverse fashion. Modification of an object is constrained by its type. We can add faces to a polyhedron by calling Add-faces, but naturally there is no equivalent operation for atomic objects such as spheres.</p><p>A second class of operations deals with data structures. GASP has a knowledge of combinatorial objects such as trees, and allows the user to visualize their manipulation. For example, Create-tree fades in a tree in three dimensions level by level, starting from the root (as shown in the accompanying videotape). Add-subtree is visualized similarly. Removesubtree fades out the appropriate subtree, level by level, starting from the leaves.</p><p>A third class of operations involves the motion of objects and the scene. GASP can rotate, translate, scale, float (i.e., on a Btzier curve) and linearly-float an object, a group of objects, or the whole scene. Typical functions are Rotate-object, Translate-world, Floatabject, and Linear-f loat-world. For the latter two, GASP is given a number of positions, rotations and scales and it moves the object smoothly (similarly, linearly) through these specifications.</p><p>In addition, GASP supports an undo function which plays the animation backwards. Every primitive has a way to reverse itself visually.</p><p>The snippets of C code containing these operations are grouped into logical phases, called atomic units. Atomic units allow the programmer to isolate phases of the algorithm. The user encloses the operations which belong to the same unit within an atomic unit phrase and GASP executes their animation as a single unit. For example, if adding a new face to a polyhedron, creating a new plane and rotating a third object constitute one logical unit, these operations are animated concurrently. The code to do it is:</p><p>Begin-atomic("Examplen); Add-faces("Poly", face-no, faces); Createglane("Plane", pointl, point2,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rotate_object(\\ThirdObj"); End-atomic ( ) ;</head><p>The parameter data for the various functions is part of the algorithm being animated.</p><p>The programmer need not specify how the animation appears. The user does not state in the code how each of the above operations is visualized, what colors to assign to objects in the scene, how long each atomic unit should take, what line width to choose, what fonts to use for the titles etc. Instead, GASP automatically generates the animation, trying to create a visually pleasing one.</p><p>Each operation generates a piece of animation which demonstrates the specific operation in a suitable way. For instance, the operation Split2olyhedron which removes vertices from the given polyhedron, is animated by creating new polyhedraa cone for every removed vertex. The new cones travel away from the initial polyhedron, creating black holes in it. Each cone travels in the direction of the vector which is the difference between the vertex (which created the cone) and the center of the split polyhedron.</p><p>To get a uniform appearance for the overall animation, objects of similar types are created in the same way, and removed in the reverse way. An object which is created by, say, fading in is removed by fading out.</p><p>Special attention is given to the issue of colors. "Color is the most sophisticated and complex of the visible language components" [ 181. Most users, especially inexperienced ones, do not know how to select colors. Choosing colors becomes harder when a video of a computer animation needs to be produced because colors come out very different from the way they appear on the screen. Therefore, pre-selected colors are useful. GASP maintains point3, pointl); palettes of pre-selected colors, and picks colors which are appropriate for the device they are presented on.</p><p>Colors are assigned to objects (or other features such as faces of a polyhedron) on the basis of their creation time. All the objects created during a single logical phase of the algorithm get the same color, which was not used before. This way we group related elements and make it clear to the observer what happened at which phase of the algorithm.</p><p>If a programmer wants freedom to accommodate personal taste, the parameters of the animation can be modified by editing a "Style File". The animation is still generated automatically by the system but a different animation will be generated if the style file is modified. The style file affects the animation, not the implementation. This allows the programmer to experiment with various animations of an algorithm without ever modifying or compiling the code.</p><p>Many parameters can be changed in the style file. They include, among others, the way each primitive is visualized, the color of the objects, the speed of each atomic unit and the number of frames it takes, the kind of colors for the animation (for videotapes or for the screen), the width of lines, the radius of points, the font of text etc. For instance, Remove-object when the object is a tree, fades out the tree level after level by default. However, a parameter can be set in the style file, to fade out the whole tree at once.</p><p>For example, the following is part of the style file for an animation which will be discussed in the next section. The style file determines the following aspects of the animation. The background color is light gray. The colors to be chosen by GASP are colors which fit the creation of a video (rather than the screen). Each atomic unit spans 30 frames, that is, the operations within an atomic unit are divided into 30 increments of change. If the scene needs to be scaled, the objects will become 0.82 of their original size. Rotation of the world is done 20 degrees around the Y axis. The atomic unit pluck is executed over 100 frames, instead of over 30. The colors of the faces to be added in the atomic unit add-faces are green. Windows, along with a Text Window which explains the algorithm.</p><p>The Control Panel, which uses the VCR metaphor, helps viewers to explore the animation at their own pace. A viewer (typically a student or a programmer who debugs the code) might want to stop the animation at various points of its execution. Sometimes it is desirable to fastforward through the easy parts and single-step through the hard ones to facilitate understanding. The viewer may want to "rewind" the algorithm in order to observe the confusing parts of the algorithm multiple times. GASP'S environment allows this. The panel allows running the algorithm at varying speeds: fast(&gt;&gt;), slow(&gt;), or unit by unit (&gt; I). The analogous &lt;, &lt;&lt;, and I &lt; push buttons run the algorithm "backwards". The viewer can PAUSE at any time to suspend the execution of the algorithm or can EJECT the movie.</p><p>The viewer observes the algorithm in the Algorithm Windows. Algorithm windows use Inventor's Examiner Viewer <ref type="bibr" target="#b23">[25]</ref> and thus are decorated with thumbwheels and push buttons. With the thumbwheels, the viewer can rotate or scale the scene. The push buttons allow the user to reset the camera to a "home" position, or reposition it. This allows the user to perceive a more complete structure of the scene, to observe the objects "behind", to view the object of interest from a different angle, or to check the relations of objects.</p><p>In addition, the user can get information by pressing the push buttons in the Algorithm Window. It is possible to list the atomic units, to list the objects in the scene, print description of a chosen object (for example, when a polyhedron is picked, its vertices and faces are printed out), print the current transformation, and create a postscript file of the screen.</p><p>A Text Window, supported by GASP, adds the ability to accompany the animation running on the screen with verbal explanations. Text can elucidate the events and direct the student's attention to specific details. Every atomic unit is associated with a piece of text which explains the events occurring during this unit. When the current atomic unit changes, the text in the window changes accordingly. Voice is also supported by GASP. The viewer can listen to the explanations that appear in the Text Window.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">GASP in Action</head><p>In this section we describe different scenarios for which we produced animations to accompany geometric papers. Excerpts from the animations are given in the accompanying video. For each case we present the problem of study, the goal in creating the animation and the animation itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Building and Using Polyhedral Hierarchies:</head><p>This algorithm, which is based on [ 10, l l], builds an advanced data structure for a polyhedron and uses it for intersecting a polyhedron and a plane. The main component of the algorithm is a preprocessing method for convex polyhedra in 3D which creates a linear-size data structure for the polyhedron called its Hierarchical Representation. Using hierarchical representations, polyhedra can be searched (i.e., tested for intersection with planes) and merged (i.e., tested for pairwise intersection) in logarithmic fashion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(See color plai</head><p>The basic geometric primitive used in constructing the hierarchical representation is called the Pluck: Given a polyhedron, PO, we build a polyhedron PI by removing vertices in V(P0) -V(P1). The cones of faces attached to the vertices are also removed. This leaves holes in the polyhedron PO. These holes are retriangulated in a convex fashion. Repetition of plucking on the polyhedron Pi creates a new polyhedron P2, The sequence PO Pi P2 ... P, forms the hierarchical representation.</p><p>There were two goals for creating the animation. First, we wanted to create a video that explains the data structure and the algorithm for educational reasons. Second, since the algorithm for detecting plane-polyhedral intersection had not been implemented before, we wanted the animation as an aid in debugging the implementation.</p><p>The animation explains how the hierarchy is constructed and then how it is used. In the accompanying video, however, we show only the construction process. For the first of these we explain a single pluck and then show how the hierarchy progresses from level to level.</p><p>First, we show a single pluck. The animation begins by rotating the polyhedron to identify it to the user. Next we highlight a vertex and lift its cone of faces by moving them away from the polyhedron (Plate 2). Then, we add the new triangulation to the hole created (Plate 3). Finally, we remove the triangulation and reattach the cone. This is done in our system by the following piece of C code, which is up to the creator of the animation to write. new faces. undo removes the triangulation and brings the cone back to the polyhedron.</p><p>Notice that the code does not include the graphics: Coloring, fading, traveling, speed etc. are not mentioned in the code. In the related style file, these operations are controlled. This allows the user to experiment with the animation without modifying and recompiling the code.</p><p>After explaining a single pluck, the next step is to show the pluck of an independent set of vertices. This is no more difficult than a single pluck and is achieved by the following code. Here again we use the style file to choose speeds at which cones move out, faces fade in, the scene spins etc. We also use the style file to choose a next color that contrasts the new faces with those that are preserved.</p><p>We found GASP to be very helpful in implementing the algorithm for detecting plane-polyhedron intersections. Bugs we were not aware of showed up in the animation (e.g., we got non-convex polyhedra as part of the hierarchical representation). We also found GASP'S environment to be very useful. When debugging the algorithm, it is necessary to watch earlier stages of the animation (the construction process) which set state variables that are needed by later stages. The control panel of GASP allows us to fast-forward over these initial fragments to get to the section of interest. Single-stepping through the section under consideration and rewinding are also highly valuable tools.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Objects that cannot be Taken Apart with Two Hands:</head><p>This animation is based on <ref type="bibr" target="#b20">[22]</ref>. This paper shows a configuration of six tetrahedra that cannot be taken apart by translation with two hands (Plate 4). Then, it presents a configuration of thirty objects that cannot be taken apart by applying an isometry to any proper subset (Plate 5).</p><p>The ASCII data of the configurations was produced by using Mathematica.</p><p>The purpose of the animation is to illustrate the use of GASP as an illustration tool for geometric configurations.</p><p>It took us far less than a day to generate that animation. The animation has two parts. Each one of them shows one of the configurations described above. Each part begins by fading each object which belong to the configuration, in turn, into the scene. The colors of the objects vary. After all the objects appear in the scene, the scene rotates so that the configuration as a whole can be examined.</p><p>The animation is produced by the following brief C function.</p><p>In the code below, except for get polyhedron, the other functions belong to GASP. The function getpolyhedron reads the ASCII data for each object from a file. Creataaolyhadron is responsible for fading in a single object. Rotate-world causes the scene to spin. Line Segment Intersections: This example, which is based on [8], is a short clip from an animation which shows a line segment intersection algorithm in action and illustrates its most important features. The goal is to use the animation as an aid in explaining a highly complex algorithm. The viewer of the animation can not only control the execution of the animation but can also choose the input by editing an ASCII file containing the initial line segments. This example also illustrates the use of GASP in creating two-dimensional animations. In a matter of days we generated the animation.</p><p>The animation runs in three phases. The first phase presents the initial line segments and the visibility map that needs to be built. The second phase demonstrates that the visibility map is being constructed by operating in a sweepline fashion, scanning the segments from left to right, and maintaining the visibility map of the region swept along the way. Finally, a third pass through the algorithm is made, demonstrating that the cross section <ref type="figure">(See color plates, page CP-16.)</ref> along the sweepline is maintained in a lazy fashion, meaning that the nodes of the tree representing the cross section might correspond to segments stranded past the sweepline.</p><p>In the first pass of the animation, red line segments fade into the scene. While they fade out, a green visibility map fades in on top of them, to illustrate the correlation between the segments and the map. Yellow points, representing the "interesting" events of the algorithm, then blink. At that point, the scene is cleared and the second pass through the algorithm begins. The viewer can watch as the sweep-line advances by rolling to its new position (the gray line in Plate 6). The animation also demonstrates how the map is builtnew subsegments fade in in blue, and then change their color to green to become a part of the already-built visibility map. The third pass adds more information about the process of constructing the map by showing how the the red-black tree which is maintained by the algorithm changes. The animation also presents the "walks" on the map (marked in yellow in Plate 6).</p><p>There are only eleven GASP's calls necessary for the creation of this animation and they are: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>GASP is written in C and runs under UNIX on a Silicon Graphics Iris. It is built on top of Inventor <ref type="bibr" target="#b23">[25]</ref> and MotifKt <ref type="bibr">[ 121.</ref> GASP consists of two processes which communicate with each other through messages, as shown in The user's code initiates calls to procedures which belong to Process l . Process l prepares one or more messages containing the type of the operation required and the relevant information for that operation and sends it to Process 2. Upon receiving the message, Process 2 updates its internal data structure or executes the animation, and sends an acknowledgement to Process l. The acknowledgement includes internal IDS of the objects (if necessary). Process 1, which is waiting for that message, updates the hash table of objects and returns to the user's code.</p><p>This hand-shaking approach has a few advantages. First, it enables the user to visualize the scene at the time when the calls to the system's functions occur and thus facilitates debugging. Since rendering is done within an event mainloop, it is otherwise difficult to return to the application after each call. Second, compilation becomes very quick since the 'heavy' code is in the process the application does not link to. Finally, the user's code cannot corrupt GASP's code. This is an important point, because one of the major goals of GASP is to ease debugging. During debugging, it is always a problem to figure out whose bug is itthe application's or the system's.</p><p>Process 2, which is responsible for the graphics, works in an event mainloop. We use Inventor's Timer-Sensor to update the graphics. This sensor goes off at regular intervals. Every time it goes off, Process 2 checks which direction the animation i6 running. If it is running backwards, it updates the animation according to the phase it is in. If it is running forwards, it checks whether there is still work to do updating the animation (if yes, it does it) or it is at the point when further instructions from Process 1 are needed. In the latter case, it checks to see whether there is a message sent by Process 1. It keeps accepting messages, updating its internal data structure, and confirming the acceptance of messages until it gets an ENDATOMIC message. At that point, Process 2 starts executing all the commands specified for the atomic unit. It informs the first process upon termination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>This paper has described a system GASP for automatically generating visualizations for geometric algorithms. The main benefits of the GASP are:</p><p>0 We have defined a hierarchy of users. The programmer need not have any knowledge of computer graphics. The code includes only manipulations of objects and modifications of data structures. GASP makes heuristic guesses for the way the animation should appear. The advanced programmer experiments with the animation by editing an ASCII style file, without ever modifying or compiling the code. The end-user explores the algorithm and controls the execution of the algorithm in an easy way. The GASP environment is very useful for education and debugging.</p><p>Ease of use has been a main consideration in developing GASP. A typical animation can be generated in a very short time. This is true even for highly complex geometric algorithms.</p><p>We have shown several animations of geometric algorithms. The system is now at the stage where other people are starting to use it. Three Third Annual Video Review of Computational Geometry were created by GASP. Two of them were created by the geometers who wrote the papers. They took less than a week to produce.</p><p>In the future, we intend to extend GASP to support four-dimensional space. This can be an invaluable tool for research and education. We would like to experiment with GASP in an actual classroom. We believe that animations can be used as a central part of teaching computational geometry, both for demonstrating algorithms, and for accompanying programming assignments. Finally, many intriguing possibilities exist in making an electronic book out of GASP. A user will then be able to sit on the network, capture an animation, and experiment with the algorithm.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>*</head><label></label><figDesc>This work supported in part by the National Science Foundation under Grant Number CCR93-01254 and by The Geometry Center, University of Minnesota, an STC funded by NSF, DOE, and Minnesota Technology, Inc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>begin-global-style background = light-gray; color = VIDEO; frames = 30; scale-world = 0.82 0.82 0.82; rotation-world = Y 20.0; end-global-style begin-unit-style pluck frames = 100; end-unit-style begin-unit-style add-faces end-unit-style ple. color = green;Note that the syntax of the style file is eminently sim-Viewer Interface: The GASP environment, illustrated in Plate 1, consists of a Control Panel through which the student controls the execution of the animation, several windows where the algorithm runs, called the Algorithm(See color plates, page CP-16.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>explaingluck(int poly-vert-no, float (*poly-vertices) 131, int poly-face-no, long *poly-faces, char *poly-names [ 1 , int vert-no, int *vertices, int face-no, long *faces) / * create and rotate the polyhedron * / Begin-atomic ( "poly" ) ; Creategolyhedron("POn, poly-vert-no, poly-face-no, poly-vertices, poly-faces); Rotate-world(); End-atomic ( ) ; / * remove vertices and cones * / Begin-atomic("pluck"); Splitgolyhedron(po1y-names, "PO", End-atomic ( ) ; vert-no. vertices); / * add new faces * / Begin-atomic("add-faces"); Add-faces(poly-names[O], face-no, faces); End-atomic ( ) ; / * undo plucking * / Undo(2); 1Each of the operations described above is a single GASP primitive. Create-polyhedron fades in the given polyhedron. Rotate-world makes the scene spin. Split-polyhedron highlights the vertex and splits the polyhedron as described above. Add-f aces fades in the ks, page CP-16.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>, vert-no, vertices); End-atomic ( ) ; ~egin-atomic(atomic2-name); Add-faces( new-~olysgames[O], facego, Finish-early(0.5); for (i = 1; i &lt;= vert-no; i++)(</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>hands(int object-no) float (*points) [3] ; long *indices; int nmax, fmax, i; char *atomic-name, *object-name;for ( i = 0; i &lt; object-no; i++)(</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Begin-a t omi c , E n L a t omi c , Rota t e-worl d ,Scale-world, Create-point , Create-line, Create-Sweepline, Modify-Sweegline, Create-tree, Addnode-to-tree, Remove-object .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 1 .Figure 1 :</head><label>11</label><figDesc>Process 1 includes the collection of procedures which make up the programmer interface. Process 2 is responsible for executing the animation and handling the viewer'GASP's Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>[ 3 ]</head><label>3</label><figDesc><ref type="bibr" target="#b8">[9]</ref> <ref type="bibr" target="#b24">[26]</ref> out of the eight segments of animations which appeared in the(See color plates, page CP-16.)</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>useful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Sorting out sorting (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Baecker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
	<note>In Siggraph Video Review 7</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Complex Function Graphs, Dupin Cylinders, Gauss Map, and Veronese Surface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Banchoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Strauss</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1977" />
		</imprint>
		<respStmt>
			<orgName>Computer Geometry Films. Brown University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">In Third Annual Video Review of Computational Geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bronnimann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-06" />
		</imprint>
	</monogr>
	<note>Almost optimal polyhedral separators (video)</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Algorithm Animation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Exploring algorithms using Balsa-11</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="14" to="36" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Zeus: A system for algorithm animation and multi-view editing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="177" to="186" />
			<date type="published" when="1992-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Techniques for algorithm animation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sedgewick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="28" to="39" />
			<date type="published" when="1985-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An optimal algorithm for intersecting line segments in the plane</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chazelle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="54" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">In Third Annual Video Review of Computational Geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gunopulos</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-06" />
		</imprint>
	</monogr>
	<note>Computing the rectangle discrepancy (video)</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fast detection of polyhedral intersections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirkpatrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="page" from="61381" to="392" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Determining the separation of preprocessed polyhedra -a unified approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirkpatrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICALP</title>
		<imprint>
			<biblScope unit="page" from="400" to="413" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Discrete groups and visualization of three-dimensional manifolds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gunn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Open Software Foundation</title>
		<imprint>
			<publisher>Prentice Hall, Inc</publisher>
			<date type="published" when="1993-08" />
			<biblScope unit="page" from="255" to="262" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Not Knot (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maxell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>Jones and Bartlett</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">A Document Preparation System UT+ User&apos;s Guide and Reference Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lamport</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The Sudanese mobius band (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lerner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Asimov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH Video Review</title>
		<imprint>
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Outside in (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maxell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH Video Review</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Graphics Design for Electronic Documents and user Interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Marcus</surname></persName>
		</author>
		<imprint>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Turning a Sphere Inside Out (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1977" />
		</imprint>
	</monogr>
	<note>International Film Bureau</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A principles taxonomy of software visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Price</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Baecker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">S</forename><surname>Small</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="211" to="266" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Robust Algorithms in a Program Library for Geometric Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schorn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
		<respStmt>
			<orgName>Informatikdissertationen eth Zurich</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Objects that cannot be taken apart with two hands</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stolfi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Ninth Annual ACM Symposium on Computational Geometry</title>
		<imprint>
			<date type="published" when="1993-05" />
			<biblScope unit="page" from="247" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The path-transition paradigm: a practical methodology for adding animation to program interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="13" to="236" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Tango: A framework and system for algorithm animation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<date type="published" when="1990-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">An object-oriented 3D graphics toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Strauss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Carey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics</title>
		<imprint>
			<date type="published" when="1992-07" />
			<biblScope unit="page" from="341" to="349" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Gasp -a system to facilitate animating geometric algorithms (video)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dobkin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-06" />
		</imprint>
	</monogr>
	<note>In Third Annual Video Review of Computational Geometry</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Optimal Geometries. Selected Lectures in Mathematics</title>
		<imprint>
			<date type="published" when="1991" />
			<publisher>American Mathematical Society</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Computational Crystal Growers Workshop</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mathematica -A System for Doing Mathematics by Computer</title>
		<imprint>
			<publisher>Addison-Wesley Publishing Company</publisher>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wolfram</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
