<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Volume Rendering Met hods for Computational Fluid Dynamics Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">S</forename><surname>Ebertt</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roni</forename><surname>Yagelt</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Scott</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yair</forename><surname>Kurziont</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">tComputer Science Department</orgName>
								<orgName type="institution">University of Maryland Baltimore County</orgName>
								<address>
									<postCode>21228</postCode>
									<settlement>Baltimore</settlement>
									<region>MD</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer and Information Science</orgName>
								<orgName type="institution">The Ohio State University</orgName>
								<address>
									<postCode>43210</postCode>
									<settlement>Columbus</settlement>
									<region>Ohio</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Department of Aeronautical and Astronautical Engineering</orgName>
								<orgName type="institution">The Ohio State University</orgName>
								<address>
									<postCode>43210</postCode>
									<settlement>Columbus</settlement>
									<region>Ohio</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Volume Rendering Met hods for Computational Fluid Dynamics Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper describes three alternative volume rendering approaches to visualizing computational fluid dynamics (CFD) data. One new approach uses realistic volumetric gas rendering techniques to produce photo-realistic images and animations from scalar CFD data. The second uses ray casting that is based on a simpler illumination model and is mainly centered around a versatile new tool for the design of transfer functions. The third method employs a simple illumination model and rapid rendering mechanisms to provide efficient preview capabilities. These tools provide a large range of volume rendering capabilities to be used by the CFD explorer to render rapidly for navigation through the data, t o emphasize data features (e.g., shock waves) with a specific transfer function, or to present a realistic rendition of the model.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This paper describes three alternative approaches for volumetric visualization of CFD data. One new approach uses a realistic surface and volumetric rendering and animation system which will allow scientists to obtain accurate photo-realistic images and animations of their simulations, containing more information in a more comprehensible format than current tools available to the researchers. The second approach is based on ray casting without the modeling of self shadows. It is mainly intended to support the interactive design of transfer function. Currently this tool supports transfer function mapping voxel value (density) and gradient to opacity and mapping of voxel values to colors. The third approach is mainly intended for interactive preview of the data. It is based on an extended 'e-mail: ebertQcs.umbc.edu implementation of the template based ray casting <ref type="bibr">[l]</ref> that supports screen and volume supersampling. To support interactivity, this renderer is based on a very simple illumination model. Combined, these tools are shown to provide effective visualization of scalar CFD data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Background and the state of CFD visualization</head><p>Computational fluid dynamics is an active research area. CFD research involves large three-dimensional volumes of data. The data from CFD simulations often contains many data values per three-dimensional location (e.g., velocity, pressure, density, energy, temperature). Recently, scientific visualization systems have been developed to aid CFD researchers in the interpretation of these computational data sets, including commercial systems such as Data Visualizer, AVS, and Iris ExplorerTM , and non-commercial systems such as FAST by NASA Ames Research Center. Techniques used in these systems include isosurface rendering, stream-lines, contour plots, and threedimensional volume visualization.</p><p>Current visualization systems for CFD simulations are lacking in the following way:</p><p>Many current systems fail to accurately display the entirety of the three-dimensional data from the CFD simulations. CFD simulations model three-dimensional flow phenomena. Surface based rendering techniques, stream-lines, and contour plots can only capture a small fraction of the data in a three-dimensional simulation, resulting in important information being hidden or not easily discernible in the resulting images. Volume visualization is an important tool for discerning three-dimensional data, especially threedimensional scalar data.  <ref type="figure">Figure 2</ref> reveals the quantity of information that can be lost in traditional visualization systems. <ref type="figure">Figure 2</ref> uses a standard ray-marching volume rendering algorithm [2] to produce results similar to a isosurface renderer; whereas, <ref type="figure">Figure 1</ref> uses our gaseous CFD visualization system and <ref type="figure">Figure 3</ref> is rendered by our ray caster which employs a specially designed opacity transfer function.</p><p>There has been some recent work on addressing some of these shortcomings. However, these systems only overcome some of the shortcomings of current CFD visualization systems. Surface particles <ref type="bibr" target="#b2">[3]</ref>, and a combination of volume rendering, vector fields, and texturing <ref type="bibr" target="#b3">[4]</ref> have been used to capture the dynamics and massive information content in a CFD simulation.</p><p>While visualization systems for CFD have concentrated on simple illumination and shading models, recent advances in computer graphics for realistic rendering of gases and fluids have produced dramatic and near photo-realistic images of water, steam, fog, and smoke</p><p>, 91. These techniques use physicallybased rendering techniques to display these natural phenomena realistically. These photo-realistic rendering techniques can be incorporated into volume visualization to provide important perceptual cues for comprehending complex three-dimensional data.</p><p>Our systems for CFD visualization combine several volume rendering techniques which provide the scientist with the option to trade time for image quality. One technique employs a sophisticated illumination model to render our test data in approximately 83 seconds. The second technique simplifies illumination and emphasizes material modeling (via transfer functions) to render the data in approximately 64 seconds. The third technique is mainly intended for speedy rendering based on a basic illumination model and material modeling which produce an image in approximately 27 seconds. All reported times in this paper where taken on a HP 9000 Series Workstation model 735.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Turbo-jet compressor visualization</head><p>The development of advanced aerospace propulsion systems relies heavily upon the management of critical flow features which influence performance and operating characteristics. In order to understand the critical flow behavior, numerical simulation techniques must be used to complement experimental studies. Among the propulsion system components in which some of the most complex flow behavior is encountered are the turbomachinery components. In the compressor, the flow may be entering a stage at a supersonic velocity in which case a complex system of shocks and expansion waves form through the blade passage. This system of shocks and expansions not only produce losses themselves, but also contribute to other flow features which degrade performance. In order to control such flow features in a manner to optimize performance and minimize losses, numerical solution of the timedependent Navier-Stokes equations is necessary. Such solutions provide the velocity field, along with pressure, density and temperature variation in time and space through the compressor rotor blade passages. To understand the nature of these phenomena and their influence on performance, it is desirable to be able to have a visual representation of the computed flow data which can be compared directly with experimental flow visualization. This type of data is particularly valuable in the analysis of shock waves for which the temporal and spatial variation can have a significant impact on the mass flow rate of air passing through the compressor. The use of interactive visualization will provide the engineer a means of analyzing the behavior of such critical flow features as he controls the flow entering the compressor stage under investigation. Specifically, this represents control of the operating condition through interactive variation of the flow pressure, velocity, or temperature, all of which influence performance characteristics. Other flow features which are of specific interest and play crucial roles in the overall performance and operation of turbomachinery devices include: vortices which form around the blade leading edges and along the corners at the bladehub junction, and boundary layer growth and separation. The analysis of these features and their influence is also significantly enhanced through the use of interactive flow visualization of the type demonstrated here.</p><p>We have applied the three visualization techniques of our system to this problem of visualizing the flow between two blades of the compressor of a turbo-jet engine <ref type="bibr">[lo]</ref>. The computational mesh for the simulation is a three-dimensional curvilinear grid with dimensions of 64 x 46 x 18. For visualization purposes, the computational grid was resampled to a rectilinear grid with dimensions of 64 x 64 x 32.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2</head><p>The gas visualization system Our gaseous visualization system demonstrates the benefits of realistic volumetric rendering techniques for flow visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(See color plates, page CP-26.)</head><p>A more complete description of the system can be found in <ref type="bibr">[5, 111.</ref> The system has the following features:</p><p>0 Fast combination of surface-based objects and volume data.</p><p>0 Fast, accurate, physically-based atmospheric attenuation and illumination models for low-albedo gases.</p><p>0 Fast volumetric shadowing algorithm.</p><p>The system is a hybrid surface and volume rendering system, which uses a fast scanline a-buffer rendering algorithm for the surface-defined objects in the scene, while volume modeled objects are volume rendered. The algorithm first creates the a-buffer for a scanline containing a list for each pixel of all the fragments that partially or fully cover the pixel. Then, if a volume is active for a pixel, the extent of volume rendering needed is determined. The volume rendering is performed next, creating a-buffer fragments for the separate sections of the volumes. Volume rendering ceases once full coverage of the pixel by volume or surfaced-defined elements is achieved. Finally, these volume a-buffer fragments are sorted into the a-buffer fragment list based on their average 2-depth values and the a-buffer fragment list is rendered to produce the final color of the Dixel. In sampling along the ray, a Monte Carlo method is used to choose the sample point to reduce aliasing artifacts. In the gaseous model, we are approximating an integral to calculate the opacity along the ray <ref type="bibr" target="#b11">[12]</ref>. Therefore, the opacity is the density obtained from evaluating a volume density function multiplied by the step-size. The approximation used is </p><formula xml:id="formula_0">opacity = 1 -e</formula><p>where T is the optical depth of the material, p ( ) is the density of the material, t,,,, is the starting point for the volume tracing, and tfar is the ending point. The final increment along the ray may be smaller, so its opacity is scaled proportionally <ref type="bibr" target="#b12">[13]</ref>.</p><p>The volume density functions interpolate the values stored in the CFD grid and allow density scalars and power functions to be applied to enhance the vi-The system supports volume rendering of both pro-sualization By a density more information can be seen. Applying a power cedural and scientific data-defined volumes. The renfunction to the density allows the contrast in change of the densities to be increased. The following function is used to achieve these results:</p><p>dering techniques currently available in this system for volumes include gas-based rendering methods and traditional density-based volumetric rendering 121.</p><formula xml:id="formula_1">-_ _ density = (density * density_scalar)POWer-ezPonent</formula><p>The volume rendering technique used for gases in this system is similar to the one discussed in <ref type="bibr" target="#b1">[2]</ref>. The ray from the eye through the pixel is traced through the defining geometry of the volume. For each increment through the volume sections, the density is determined from the CFD data. The color, density, opacity, shadowing, and illumination of each sample is then calculated. The illumination and densities are accumulated based on a low-albedo illumination model for gases and atmospheric attenuation. The following algorithm is the basic gas rendering algorithm:</p><p>For the gaseous rendering, the following low-albedo illumination model is used, where the phase-function is based on the summation of Henyey-Greenstein functions as described in i Phase(0) is the phase function, the function characterizing the total brightness of a particle as a function of the angle between the light and the eye <ref type="bibr" target="#b13">[14]</ref>. l,(t(t),y(t),z(t)) is the amount of light from light source i reflected from this element.</p><p>The system also features a fast, accurate tablebased volume shadowing technique <ref type="bibr" target="#b4">[5]</ref> to increase the visual realism of the resulting images. The system can, therefore, accurately display three-dimensional gases and the shadows they cast.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Results for gaseous rendering</head><p>A comparison of the results achievable through the three-dimensional gas rendering of our system and more traditional volumetric rendering techniques can be seen in <ref type="figure">Figures 1 and 2</ref>. Both figures show the visualization of the static pressure for the computation, illuminated with two light sources. <ref type="figure">Figure 1</ref> shows the data visualized using the gaseous volumetric rendering techniques. <ref type="figure">Figure 2</ref> shows the results achievable using more traditional volumetric rendering techniques, where the gradient of the change in the data is used to imply surfaces and a traditional Phong surface illumination model is used. <ref type="figure">Figure 2</ref> is lacking in several respects. First, the lack of shadowing makes the understanding of the image more difficult. Second, the implied surfaces obscure the details of the flow data within. Third, additional flow detail is lost because of the small degree of change in the values in the data. In contrast, notice the details in the changes in the pressure that can be seen in <ref type="figure">Figure 1</ref>. Also notice the depth of information that can be discerned in this image. The image uses self-shadowing of the volume data, as well as shadowing of the volume onto the walls to increase the understandability of the data. As you can see, much more of the three-dimensional flow can be seen using our gas visualization technique.</p><p>The advantages of the gas visualization prototype system can be clearly seen from comparing these two images. These images were computed at a resolution of 512x341 and took 83 seconds each to compute. Lower resolution images can be combined with rendering optimizations and more powerful graphics workstations to achieve interactivity of the visualizations. <ref type="figure">Figure 5</ref> shows the flexibility of the system for visualization. This figure contains 9 images with varying density scaling and power exponent values used in the visualization. The following table has the parameter values for each image in the figure (image 1 is the topleft image, image 9 is the bottom-right image). From left to right in the image, the power exponent is decreased, increasing the density of the data. From top to bottom, the density scaling factor is decreased, increasing the transparency of the flow.</p><p>This sequence of images demonstrates how the variation of transparency/opacity can be used to investigate the spatial gradients of a particular flow quantity. In this case, the static pressure varies significantly throughout the flowfield and among the critical flow features. The most critical flow features, which arise as gradients in the static pressure, are shock and expansion waves. These waves appear as abrupt changes or nearly discontinuous changes in the static pressure. In the sequence of renderings shown here, the shock can be seen as the abrupt change from blue to white along the vertical part of what appears as a cutout region on the left hand side of the image. Once again, the shock is caused by the turning of the flow as it enters the blade passage. It is readily apparent that the strength of the shock varies significantly across the flowfield or along the blade leading edge (the blade's geometry-angle thickness and twist vary in the radial direction from hub to tip). This sequence allows the viewer to look into the flowfield and see where the most intense or sharpest gradients exist and what their influence is on the subsequent (downstream) flow. In this figure, the greatest pressure gradient exists at the region which appears as the cutout in the upper left hand region of the flowfield just after the flow enters the blade passage. This is indicative of the greatest shock strength. Examination of the successive images across and down the figure reveals that the shock strength decreases as it approaches the adjacent blade surface. This sequence also gives an indication of the three-dimensionality of the shock geometry and shock strength which can have a significant influence on the operating characteristics of the compressor. Such analysis is especially valuable when it is incorporated into animations which will provide a means of analyzing the time variation as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The ray caster</head><p>This renderer is a ray caster that is equipped with a versatile new mechanism for the design of color and opacity transfer functions. These are interactively defined by the user prior to rendering.</p><p>Processing commences with some initialization computations. We start by computing the normal vector at each voxel. Unlike traditional 6-neighborhood central difference based gradient calculation, our computation considers all 26 neighbors, attenuating by fi the 18-neighbors and by 4 the 26-neighbors. The normal vector <ref type="figure">( N z , N Y , N , )</ref> is used in shading and its magnitude V = J N S 2 + Nz2 + N z 2 , is utilized to index our 2D opacity transfer function. We calculate the magnitude of the gradient at each voxel location and store them in a 3D byte array of the same size as the original data set.</p><p>Given a data set and light source information, we duplicate the original data set and shade the newly generated one. We apply diffuse lighting on the data set using the computed normal at each voxel <ref type="figure">( N z , IVY, N,)</ref> and the raw densities as intensity values p. Given m light sources located at direction voxel intensity S to: <ref type="figure">Izi, lyi, I%,)</ref>, i = 1, . . . ,112, we set the shaded</p><formula xml:id="formula_2">Li = (</formula><formula xml:id="formula_3">m s = p * (Izi * N , + lyj * N~ + Izi * N , + 1)/2</formula><p>i=l which is simply the intensity times cosine the angle between Li and N (normalized to the range [0, l]). Note that we assume that all light sources have intensity 1.</p><p>These preliminary calculations require two additional memory banks the size of the original data set for storing the shaded data set and the gradient information. Alternatively, these computations can be performed on-the-fly, which will save the need for the extra storage and allow view-dependent light effects such as specular light. Once this initialization is completed, the data is ready for rendering.</p><p>For each sub-sample a ray is shot. Along the ray, at user controlled distances At, a trilinearily interpolated sample is taken in each of the three datasets at the sample points z ( t ) , y ( t ) , z ( t ) . These sampled values participate in the illumination calculation to produce the final intensity for that sample point, as described in the next section. After all the samples along a ray are collected and composited, the compositing buffer contains a floating point number representing the intensity at the corresponding image sub-sample. When all image rays are shot, the final image is derived by The ray caster traverses image space. averaging all sub-samples in a pixel and transforming the floating point intensities into the integer range <ref type="bibr">[0,</ref><ref type="bibr">255]</ref>.</p><p>The ray caster is equipped with an interactive tool, as well as an interpreter that can be used to build 1D and 2D transfer functions. The language supported by this simple modeler contains various boolean operators (min, m a , add, subtract, etc.) between several 1D and 2D linear and exponential primitives. Using this tool, the user can define such transfer functions as threshold rendering, iso-value rendering, gradient emphasis by opacity and so on. The user defined transfer functions are evaluated and converted into 1D and 2D tables that are used by the renderer as color and opacity lookup tables. These tables are indexed by raw voxel value, gradient magnitude, and the like, as we describe in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Illumination algorithm</head><p>Our illumination procedure takes as input a dataset consisting of one byte per voxel intensity and is capable of generating one or three band images. Each band in the image has a pair of transfer functions associated with it:</p><p>1. Voxel value io intensity transfer function which maps original intensities to desired ones (implemented as a 1D lookup table).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Voxel value and gradient t o opacity</head><p>which sets the transparency of each voxel during the ray casting process (implemented as a 2D lookup table).</p><p>Given a sample triple (p, S, V), where p is the raw intensity, S is the shaded intensity, and V is the gradient, all sampled at z ( t ) , y ( t ) , z ( t ) , we calculate two new values for each color band A: ax, the transparency value and FA, the intensity value:</p><formula xml:id="formula_4">CY^ = TF2D(V,p) = T F l D ( S )</formula><p>where T F are 1D and 2D transfer functions designed by the user. Although we currently use the above 1D and 2D functions, the same mechanism we developed can be used to functionally bind reflectivity to gradient, for example, and to develop transfer function of higher dimensionality.</p><p>The compositing scratchpad consists of a pair </p><formula xml:id="formula_5">Ix = Ix + Ix *ax *ox ox = O x * ( l -a x )</formula><p>After we composite a ray, Ix contains the final pixel intensity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Results for the ray caster</head><p>The dataset was shaded in 5 seconds and gradient calculation took 5 additional seconds. Rendering time for all images (25@ resolution) is 35 seconds when one ray is traced from each pixel. The transfer function used for rendering <ref type="figure">Figure 3</ref> was</p><formula xml:id="formula_6">T F l D ( S ) = sfi TFPD(V,p) = ( V . p ) "</formula><p>In <ref type="figure">Figure 3a</ref> we assigned p = 0.3 and v = 1.1. In <ref type="figure">Figure 3b</ref> we assigned p = 0.3 and v = 0.5. <ref type="figure">Figure 3</ref> shows a typical rendering of the flowfield static pressure generated using the computed Navier-Stokes flowfield data between two adjacent compressor rotor blades. In this figure, the flowfield is oriented such that the flow is entering the blade passage from the left and proceeds to the right and out the back of the page as it exits the blade passage. It should be noted that the data set used in this rendering has been truncated in the vicinity of the blade trailing edge or in the region where the flow leaves the blade passage. The specific transfer function used in this rendering reveals various regions in the flow in which large gradients exist. These are the regions in which abrupt changes are present. Specifically, the rapid change from dark to light near the left hand boundary appears to capture the general shape of the shock wave produced as the supersonic flow is turned when it enters the blade passage. As the flow proceeds toward the exit, the variation in the shading along the boundaries bounded by solid surfaces might be associated with the presence of the boundary layer along the solid surfaces. However, there are other flow quantities, such as velocity, which will reveal much more of the detail of the boundary layer behavior, including its growth and separation.</p><p>In the vicinity of the blade trailing edge, there appears to be a region of separated flow which may well be associated with the important phenomena of vortex shedding and interaction. These flow features have been subjected to a preliminary examination using an interactive animation procedure to look at the threedimensional nature of their behavior at a single instant in time. The extension of the three-dimensional rendering procedure to include the temporal variation will provide even greater detail which will be of value in understanding these flow features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Template-based rendering</head><p>In parallel viewing, where the observer is placed at infinity, all rays have exactly the same form. Therefore, there is no need to reactivate a line algorithm for each ray. Instead, we compute the form of the ray once and store it in a data structure called a ray-template. All rays can then be generated by following the ray template. This approach has great advantages both in terms of performance and in terms of accuracy, as we show later.</p><p>The rays, however, differ in the appropriate portion of the template that should be repeated. We choose a plane, parallel to one of the volume faces, to serve as a base-plane for the template placement. The image is computed by sliding the template along that plane, emitting a ray at each of its pixels. This placement guarantees a complete and uniform tessellation of the volume by 26-rays.</p><p>The proposed algorithm is composed of three phases: initialization, ray casting, and 2D mapping. In the first phase, the base-plane is computed and a template in the viewing direction is constructed. In the second phase, a ray is traversed from each pixel inside the image extent by repeating the sequence of steps stored in the ray template. In the last phase, the projected image is mapped from the base-plane onto the screen-plane by employing a 2D image transformation. The proposed algorithm guarantees uniform sampling and is based on simple arithmetics that form the basis for an extremely efficient implementation. We now turn to describe, in more detail, each of the algorithm's three phases.</p><p>The basic algorithm can be slightly modified to support multiple rays emitted from the same pixel, but from different sub-pixel addresses <ref type="bibr" target="#b14">[15]</ref>. Instead of having one type of ray (Le., one template), we now have several templates, one for each relative position of the ray-origin in a pixel. For example, if we want a supersampling rate of four rays per pixel, for the pixel at coordinate (i, j), these four rays will originate from (i f 1 / 4 , j f 1/4). We observe that for all ( i , j ) the rays (i + 1/4, j + 1/4) have the same form. Therefore we need only four different templatesone for each relative displacement from the pixel origin.</p><p>The template-based algorithm can also be modified to efficiently support multiple samples per voxel <ref type="bibr" target="#b14">[15]</ref>. If we assume that rays are emitted from the centers of the pixels in a plane that is parallel to one of the volume faces (such as the base-plane), then all these sample points are in the same relative position inside the voxel; that is, they have exactly the same set of distances to the eight corners of the voxel. Therefore, we can employ a continuous line algorithm to generate a template of floating point steps. For each sample point, we can pre-compute the weight to be assigned to each of the voxel values participating in the sampling operation. This will save the need to compute, for each sample, the weights of all eight voxel values participating in the trilinear interpolation. This template based ray casting algorithm uses very few (eight, on the average) integer additions per sample, instead of the naive implementation which requires tens of floating-point additions and multiplications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Illumination algorithm</head><p>To benefit from the template algorithm, illumination capabilities were kept to a minimum. Illumination is based on the Phong illumination model with one light source. Samples are shaded on-the-fly and all samples along a ray are incrementally composited. The ray stops when a user defined opacity threshold is reached. Transfer function for color assignment to raw voxel value is a simple linear palette of grey (i.e.,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PA = p). Transfer function for opacity assignment</head><p>is also a simple linear palette assigning (YA = p/6 so that the rays would accumulate less opacity and will not stop in one or two steps. Normal is calculated by central difference in a 6-neighborhood. Shading includes ambient, diffuse, and specular shading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results for the template-based rendering</head><p>The gas images shown in <ref type="figure">Figure 4</ref> were generated by an adaptive variation of the ray template algorithm. This approach renders the empty space using one template (discrete) and another template at the region of the data values. In this area, samples are taken at At = 0.7. The generation of this 1402 resolution image, took 3.01 seconds for one ray per-pixel, which is approximately 3 times faster than the previous algorithm. Supersampling increases rendering time linearly (e.g., 4-rays per pixel takes 12.1 seconds).</p><p>At At = 0.3, the image is rendered in 4.11 seconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Future extensions</head><p>There are several extensions that can be made to the current system. First of all, further optimizations of the rendering algorithms are being explored by the authors to increase the performance of the system. Second, we are developing techniques to support the visualization of unstructured, multi-level, and adaptive grid data <ref type="bibr" target="#b15">[16]</ref>. The current system will only allow the display of structured (rectilinear) grid data. Note that illumination models and transfer function design are the same for all types of grids, only stepping along the ray and sampling methods change. Techniques have been developed to resample structured and unstructured grid data to a rectilinear grid for visualization; however, this step may introduce aliasing artifacts into the resulting images. Resampling unstructured or multi-resolution data is also too time consuming to be done in an interactive system. For instance, resampling the curvilinear grid data used in <ref type="figure">Figures 1 and 2</ref> took several minutes. Direct support for unstructured grids and multi-level solution of adaptive grids is needed. The use of adaptive, multi-dimensional, and unstructured grids has increased greatly in the recent past <ref type="bibr">[17,</ref> 181. These grid structures allow for better utilization of computational power during the CFD simulations and need to be supported in an interactive visualization system. We plan to explore incorporating and enhancing these recent algorithms for unstructured grids into our visualization system. We will also develop algorithms for the direct support of multi-level grids and multi-level solution of adaptive grids.</p><p>Finally, a graphical user-interface for the visualization system needs to be developed to increase the usability and interactivity of the system. A significant part of this task involves the development of the interface between the computational model and the visualization system to allow direct interaction with the computations to aid debugging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have described and compared three new efficient volume rendering techniques for flow visualization and demonstrated their value for visualizing the flow between two blades of a turbo-jet compressor. As can be seen from the resulting images in this paper, these techniques provide higher quality images than most CFD visualization systems. Combining these techniques in a single system can provide CFD researchers with a powerful visualization system. With <ref type="figure">(See color plates, page CP-26.)</ref> these tools, researchers can see photo-realistic images of their flows for detailed analysis and also produce high-quality images at interactive rates for testing and debugging of the computational model.</p><p>While the renderings we generated of the static pressure provide a good representation of flow features caused by pressure gradients, numerous other flow quantities will provide even better representations of other significant flow features. Thus, these renderings represent a significant step in the development of an important, enabling technology for the analysis of complex flow phenomena encountered in advanced aerospace propulsion systems as well as a wide range of other CFD visualization applications.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>A comparison of Fig-ures 1, 3 and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>- 7</head><label>7</label><figDesc>c:'ar P(4t)&gt;Y(t),.(t))At</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>x:near ~( x ( u )~y ( u )~z ( u ) ) A u 1 t n e u P ( 4 t ) , Y(t), 4 t ) ) x At, where I is Iii(x(t), ~( t ) , t(t))~hase(d).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>(</head><label></label><figDesc>Ix,Ox) of float numbers, where Ix stands for intensity and Ox for opacity (in each color band A). Compositing of (ax, b~) onto the compositing scratchpad is performed as follows :</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>(</head><label></label><figDesc>See color plates, page CP-26.)</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">(See color plates, page CP-26.)</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Template-Based Volume Viewing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaufman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="153" to="157" />
			<date type="published" when="1992-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hypertexture. Proceedings of SIGGRAPH&apos;89</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hoffert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="253" to="262" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Flow visualization with surface particles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">I E E E Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="18" to="24" />
			<date type="published" when="1993-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Visualization for climate modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">I E E E Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="18" to="24" />
			<date type="published" when="1993-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Rendering and animation of gaseous phenomena by combining fast volume and scanline A-buffer techniques. Proceedings of SIGGRAPH&apos;SO</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Parent</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="357" to="366" />
			<date type="published" when="1990-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Solid spaces and inverse particle systems for controlling the animation of gases and fluids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Carlson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Parent</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="179" to="190" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Rapid, stable fluid dynamics for computer graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;SO</title>
		<meeting>SIGGRAPH&apos;SO</meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="49" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Forest fire simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gardner ; S I G G R A P H</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">C o mputer Graphics</title>
		<editor>F. Baskett</editor>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page">430</biblScope>
		</imprint>
	</monogr>
	<note>90 Proceedings</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The zonal method for calculating light intensities in the presence of a participating medium</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rushmeier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Torrance</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;87</title>
		<meeting>SIGGRAPH&apos;87</meeting>
		<imprint>
			<date type="published" when="1987-07" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="293" to="302" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Navier-stokes solutions of unsteady flow in a compressor rotor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">L</forename><surname>Hankey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">A S M E Jozlrnal of Turbo Machinery</title>
		<imprint>
			<biblScope unit="volume">108</biblScope>
			<biblScope unit="page" from="206" to="215" />
			<date type="published" when="1986-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Solid Spaces: A Unified Approach to Describing Object Attributes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Ebert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
		<respStmt>
			<orgName>The Ohio State University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ray tracing volume densities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Von Herzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;84</title>
		<meeting>SIGGRAPH&apos;84</meeting>
		<imprint>
			<date type="published" when="1984-07" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Rendering fur with three dimensional textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;89</title>
		<meeting>SIGGRAPH&apos;89</meeting>
		<imprint>
			<date type="published" when="1989-07" />
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="271" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Light reflection functions for simulation of clouds and dusty surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;82</title>
		<meeting>SIGGRAPH&apos;82</meeting>
		<imprint>
			<date type="published" when="1982-07" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="21" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">High quality template-based volume viewing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<idno>OSU-CISRC-10/92-TR28</idno>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="43210" to="1277" />
			<pubPlace>Neil Ave, Columbus, Ohio</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer and Information Science, The Ohio State University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Volume rendering polyhedral grids by incremental slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<idno>OSU-CISRC- 10/93-TR35</idno>
		<imprint>
			<biblScope unit="page">2036</biblScope>
		</imprint>
		<respStmt>
			<orgName>Department of Computer and Information Science, The Ohio State University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neil</forename><surname>Ave</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993-10" />
			<biblScope unit="page" from="43210" to="1277" />
			<pubPlace>Columbus, Ohio</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A decomposition algorithm for visualizing irregular grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Neeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (San Diego Workshop on Volume Visualization)</title>
		<meeting><address><addrLine>NOV</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="49" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Raytracing irregular volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Garrity</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics</title>
		<meeting><address><addrLine>San Diego Work</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-11" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="35" to="40" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
