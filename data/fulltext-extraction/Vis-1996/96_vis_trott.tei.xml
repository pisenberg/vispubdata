<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Wavelets Applied to Lossless Compression and Progressive Transmission of Floating Point Data in 3-D Curvilinear Grids</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Trott</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">NSF Engineering Research Center for CFS Mississippi State University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Moorhead</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">NSF Engineering Research Center for CFS Mississippi State University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Mcginley</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">NSF Engineering Research Center for CFS Mississippi State University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Wavelets Applied to Lossless Compression and Progressive Transmission of Floating Point Data in 3-D Curvilinear Grids</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A method of lossless compression using wavelets is presented that enables progressive transmission of Computational Fluid Dynamics (CFD) data in PLOT3D format. The floating point data is first converted to double-precision floating point format to maintain adequate precision throughout the transform process. It is then transformed using Haar wavelets-four times in two spatial dimensions, twice in the third spatial dimension, and twice in time for a total compression factor of 64 times. The double precision format will maintain enough precision during the transform to keep the process lossless. Next, the transformed data is compressed using Huffman coding and transmitted progressively using spectral selection. This allows most of the information to be transmitted in the first pass. Details are transmitted in later passes which ultimately provide for lossless reconstruction of the original data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Problem and Underlying Principles 1.Introduction</head><p>Many times in Computational Fluid Dynamics (CFD) work very large datasets are produced on remote machines. This vast amount of data must often be moved to a local machine for post processing and visualization. However, this can take large amounts of time because of the large quantity of data that must be transmitted. Compressing the data can speed up the transmission and save several hours of the researchers' time. Progressive transmission can further increase efficiency of the visualization process by giving researchers an approximation of the data very quickly. They can then make a decision based on this approximation about whether to continue the transmission or, if the data is determined to be undesirable, to abort it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Haar Wavelets</head><p>This application currently uses Haar Wavelets. These are very simple functions with the scaling and detail filters defined in Eq. <ref type="bibr" target="#b0">(1)</ref> and Eq. <ref type="formula">2</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">The PLOT3D File Format</head><p>The PLOT3D file format has become a standard for dealing with curvilinear grids. <ref type="figure" target="#fig_0">Fig. 1</ref> shows an example of a multi-zone curvilinear grid for the hull of a submarine. The hemisphere displayed in the figure is divided into four zones running the length of the hull and radiating outward as indicated by the extended sections of the grid. The three PLOT3D file types are grid, solution, and function files. All of these file types support multi-zone grids <ref type="bibr">[?]</ref>. Grid files contain the location of each point in a grid as shown in <ref type="figure" target="#fig_1">Fig.  2</ref>. Solution files contain information global to each zone as well as the value of five parameters at each grid point. The global values are the free stream mach number, the angle of attack, the Reynolds number, and the time <ref type="figure">(Fig. 3)</ref>. The five parameters are density, three components of momentum, and energy. Function files can be user defined and are not dealt with in this discussion. ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 3: Format for Plot-3D Solution Files</head><p>Solution files are more complex than grid files, but they can contain redundancy that aids in compression. In the data sets discussed here the global attributes for all of the zones are the same. This allows the elimination of all but the first set of global attributes. Also, the density of the fluid (water) remains a constant of 1.0 for all of the current work. Since the density values make up 20 percent of each solution file, it gives a significant boost to compression. However, there are four other floating point values at each point, so there is much more data to compress.</p><p>The data explored in this paper are contained in multiple zones. Each zone can contain either part of the structure being simulated or a time step in the simulation. Since we use the zones for separate time steps our compression tool only needs to deal with one file at a time. This greatly simplifies the I/O procedure. However, if the zones are used for different parts of the structure that have equal dimensions, the zones can be compressed pairwise spatially instead of in time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Floating Point Numbers and Lossless Compression</head><p>Floating point numbers are more difficult to compress than integers because their structure is more complicated. For example, single precision floating point numbers are composed of a sign bit, an eight bit biased exponent, and a 23 bit mantissa <ref type="figure">(Fig. 4)</ref>. Double precision floating point numbers have a sign bit, an 11 bit biased exponent, and a 52 bit mantissa. The different parts of these numbers are not on byte boundaries in memory, so breaking them into pieces requires bit manipulations. Another problem in lossless compression is that the number of significant digits increases as a result of the transform process <ref type="bibr">[?]</ref>. When numbers are added, extra bits are needed to keep track of the significant digits. Let Pmax and Pmin be the maximum and minimum exponents in a series of floating point additions. Then the total number of extra bits needed is calculated in Eq. <ref type="bibr" target="#b2">(3)</ref>. Note that this is the worst case. For example, the addition of five numbers requires Pmax Pmin + 3 extra bits of precision because 2 3 is the smallest power of two that is greater than or equal to five. A mechanism must be developed to retain these extra bits. One way to do this is to convert the single precision floating point data to double precision. As long as the additions in the wavelet transform do not increase the precision by more than 52 23 = 29 bits, there will not be any lost information. This should not be a problem in this implementation because there will only be 64 numbers added per data point. These additions will require only n = 6 extra bits of precision as calculated in Eq. (3). The remaining 23 bits gained from the conversion to double precision can be used for shifting the mantissa to equalize exponents. An appropriate data set will not require more than 23 extra mantissa bits in each 4x4x2 spatial footprint over two time steps so this is a reasonable constraint.</p><p>After the data is transformed, it can be encoded in a variety of ways to ensure that the correct number of significant digits is retained as well as provide for maximum compression.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Solution</head><p>By taking advantage of the principles discussed above as well as the characteristics of the data we are using, we can implement a reasonable solution that meets both of our goals-lossless compression and progressive transmission.</p><p>After reading the data from a PLOT3D file into memory, it can be transformed block by block. The data is first transformed in two spatial dimensions dividing the data into slices. The block size for this set of transformations is four by four. The results of these transforms are placed into a double precision floating point array to maintain the correct number of significant digits as discussed previously. The data is next transformed in the third spatial dimension using pairs of slices. Finally, it is transformed in time <ref type="figure" target="#fig_2">(Fig. 5</ref>). This gives a combined compression factor of 64 to 1 if only the scaling terms are retained.</p><p>After transforming the data, it is Huffman encoded based on a statistics file that is generated beforehand. The statistics file can be  On the receiving end the encoded data is decoded, inverse transformed, and reassembled into its original form. Basically, the process described above is reversed and repeated once for each spectrum of data that is received.</p><p>Currently, a very simple Huffman coding scheme is used to perform the actual compression. The value of each byte of the transformed data is used without regard to its position in a double precision floating point number. These statistics are used to compress the data byte wise instead of per double precision floating point value. Although this is not the most efficient means of compressing the data, it reduces the number of entries in the statistics table from over 2 64 to 2 8 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Results</head><p>The initial results from this scheme are very encouraging. <ref type="table">Table  1</ref> shows the compression ratios achieved in test cases for both grid files and solution files. Although the compression ratios for solution files are not very high, actual compression is only part of the goal. The progressive nature of the scheme also aids in transmitting the most important data quickly. There is great potential to improve these compression ratios in the future as will be discussed in the next section. <ref type="table" target="#tab_3">Table 2</ref> shows the percentage of the coefficients used to reconstruct the data set for each pass through the reconstruction algorithm. It also shows the relative size of the accumulated data compared to the size of the original file for one of the test cases.</p><p>The reconstruction of the first pass is too coarse in many cases to show the researchers much <ref type="figure" target="#fig_3">(Fig. 6)</ref>. The first pass can be combined with the second pass to save CPU time. The second pass <ref type="figure" target="#fig_4">(Fig. 7)</ref> provides enough resolution to enable researchers to decide if a solution is acceptable or not. If it is unacceptable, transmission of the data can be terminated. The third pass <ref type="figure" target="#fig_5">(Fig. 8)</ref> gives a very good reconstruction and is accurate enough to begin analysis of many aspects of a solution. Finally, pass 4 ( <ref type="figure" target="#fig_6">Fig. 9)</ref> perfectly reconstructs the original data to give researchers full confidence in their analysis. Note that the multiresolutional representation of the original data is smaller than the original (PLOT3D) representation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusions and Future Work</head><p>The compression technique discussed here holds much promise for compressing three dimensional floating point data. There are currently few or no alternatives, so any work in this area provides valuable insight into nature of this problem. Also, since this technique transmits the most important data first, it provides even more compression to its users than is indicated by file size alone. PLOT3D files are a good format with which to work because they are very flexible and are widely used throughout the CFD community.</p><p>There are still many aspects of this technique that need improvement. The current code can be streamlined to speed up the compression process. It could also work much faster if it was implemented on parallel machines. Another improvement could be made by examining the relationship between compression time and transmission time to help determine the optimal compression ratio. Much work can also be done to generalize the method for use with many different file structures.</p><p>Two other areas that need to be addressed are the wavelets used and the Huffman coding scheme. Haar wavelets are most likely not the best choice for this compression scheme, so comparisons can be made with other wavelets to find one better suited to both this method and the type of data being compressed. Another promising improvement is to increase the number of Huffman statistics tables so that different parts of the double floating point data are treated separately. For example, the bytes near the end of the mantissa will in most cases always be zero. If run length coding were employed here, it could have a great impact on the compression ratio. This compression and transmission scheme attempts to move data compression toward time-varying three dimensional scientific data instead of text and image compression, which have already been addressed extensively. It will hopefully impact the scientific community by speeding up analysis of the vast amounts of data produced by researchers.    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Example of a Multi-Zone Grid (zone 1) i_dim j_dim k_dim (zone n) i_dim j_dim k_dim (zone 2) i_dim j_dim k_dim Number of zones in file (if multi-zone format)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Format for Plot-3D Grid Files</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>digits = Pmax Pmin + n Structure of 4-Dimensional Data min2 n number of coefficients added</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Reconstruction Using 1:56 of Coefficients.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Reconstruction Using 6:25 of Coefficients.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 :</head><label>8</label><figDesc>Reconstruction Using 50 of Coefficients.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 9 :</head><label>9</label><figDesc>Lossless Reconstruction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>respectively.</figDesc><table><row><cell cols="2">Haart =</cell><cell cols="2">1 if 0 t &lt; 1 0 otherwise</cell><cell>(1)</cell></row><row><cell>Haart =</cell><cell cols="3">( 1if 0 t &lt; 1 = 2 1 if 1=2 t &lt; 1 0otherwise</cell><cell>(2)</cell></row><row><cell cols="3">Engineering Research Center,</cell><cell>P.O. Box 9627,</cell><cell>Missis-</cell></row><row><cell cols="4">sippi State University, Mississippi State, MS, 39762.</cell><cell>Email:</cell></row><row><cell cols="2">fatrott,rjm,jamg@erc.msstate.edu</cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2</head><label>2</label><figDesc></figDesc><table><row><cell>: Reconstruction Coefficients</cell></row><row><cell>specific to a particular data file or general for a class of files. There</cell></row><row><cell>is a variety of ways in which to encode the transformed data. Utiliz-</cell></row><row><cell>ing spectral selection [?], bands of coefficients in each block can be</cell></row><row><cell>coded separately. For example, all of the scaling coefficients can be</cell></row><row><cell>encoded first then the coefficients corresponding to finer resolutions</cell></row><row><cell>(detail) follow.</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Progressive transmission of scientific data using biorthogonal wavelet transform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Moorhead</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;94</title>
		<meeting>Visualization &apos;94</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="93" to="99" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Plot3D User&apos;s Manual, volume version 3.5, chapter 8. NASA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Walatka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Buning</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The JPEG still picture compression standard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wallace</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="39" to="41" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
