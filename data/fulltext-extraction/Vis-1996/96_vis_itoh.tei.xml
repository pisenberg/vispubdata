<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Volume Thinning for Automatic Isosurface Propagation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takayuki</forename><surname>Itoh</surname></persName>
							<email>itot@trl.ibm.co.jp</email>
							<affiliation key="aff0">
								<orgName type="department">School of Arts and Sciences</orgName>
								<orgName type="laboratory">Tokyo Research Laboratory</orgName>
								<orgName type="institution" key="instit1">IBM Japan Graduate</orgName>
								<orgName type="institution" key="instit2">The University of Tokyo IBM Japan</orgName>
								<address>
									<postCode>1623-14, 242</postCode>
									<settlement>Shimotsuruma, Yamato</settlement>
									<region>Kanagawa</region>
									<country key="JP">JAPAN</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yasushi</forename><surname>Yamaguchi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Arts and Sciences</orgName>
								<orgName type="laboratory">Tokyo Research Laboratory</orgName>
								<orgName type="institution" key="instit1">IBM Japan Graduate</orgName>
								<orgName type="institution" key="instit2">The University of Tokyo IBM Japan</orgName>
								<address>
									<postCode>1623-14, 242</postCode>
									<settlement>Shimotsuruma, Yamato</settlement>
									<region>Kanagawa</region>
									<country key="JP">JAPAN</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koji</forename><surname>Koyamada</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Arts and Sciences</orgName>
								<orgName type="laboratory">Tokyo Research Laboratory</orgName>
								<orgName type="institution" key="instit1">IBM Japan Graduate</orgName>
								<orgName type="institution" key="instit2">The University of Tokyo IBM Japan</orgName>
								<address>
									<postCode>1623-14, 242</postCode>
									<settlement>Shimotsuruma, Yamato</settlement>
									<region>Kanagawa</region>
									<country key="JP">JAPAN</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Volume Thinning for Automatic Isosurface Propagation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>An isosurface can be efficiently generated by visiting adjacent intersected cells in order, as if the isosurface were propagating itself. We previously proposed an extrema graph method, which generates a graph connecting extremum points. The isosurface propagation starts from some of the intersected cells that are found both by visiting the cells through which arcs of the graph pass and by visiting the cells on the boundary of a volume. In this paper, we propose an efficient method of searching for cells intersected by an isosurface. This method generates a volumetric skeleton consisting of cells, like an extrema graph, by applying a thinning algorithm used in the image recognition area. Since it preserves the topological features of the volume and the connectivity of the extremum points, it necessarily intersects every isosurface. The method is more efficient than the extrema graph method, since it does not require that cells on the boundary be visited.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In the area of numerical simulation, visualization tools that support a function for the continuous display of isosurfaces with changing scalar values are used to understand the distribution of scalar fields.</p><p>Elimination of non-intersected cells outside the process is one of the most effective approaches to developing fast algorithms for generating isosurfaces, since the number of cells intersected by an isosurface is regarded as On 2=3 .</p><p>Efficient algorithms that classify or sort cells according to their scalar values <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>, or space-subdivide cells <ref type="bibr" target="#b2">[3]</ref>, have been proposed. They do not visit many non-intersected cells, since the cells to be visited are grouped in a preprocess. However, the number of cells visited in these algorithms is still estimated as On.</p><p>Livnat, Shen, and Johnson have reported a span-spacedecomposition algorithm <ref type="bibr" target="#b3">[4]</ref>, in which cells are categorized by using a Kd-tree. This algorithm is more efficient than the abovementioned methods, since the number of cells visited in the algorithm is estimated as On 1=2 + k. In the worst case, however, it requires On 2 computational time for the construction of the Kd-tree.</p><p>Polygonization algorithms of implicit functions <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref> visit adjacent cells intersected by an implicit surface in order, and a surface is generated as if it were propagating itself. Here, an adjacent cell means a cell that shares a face with the visited cell. These propagation algorithms are used to generate an isosurface in a volume dataset <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. The algorithm is efficient, sice it visits only intersected cells, however, it requires that the starting cells for propagation are specified. When an isosurface consists of multiple disjoint parts, starting cells in all the parts must be specified. Silver and Zabusky have reported a space-subdivision algorithm <ref type="bibr" target="#b8">[9]</ref> in which extremum points are first extracted and cells around them are then divided into subgroups by using a spatial structure such as an octree. All starting cells are efficiently found by visiting cells in such the structure. The cost of the searching process is regarded as On, and may be higher than that of the propagation process.</p><p>Two of the present authors, Itoh and Koyamada, reported a more efficient algorithm for detecting starting cells by reducing the number of visited cells in a pre-process <ref type="bibr" target="#b9">[10]</ref>. In the pre-process, extremum points are first extracted and then connected as a graph. Cells through which arcs of the graph pass, as well as cells touching the boundary of the volume, are registered in a list. The cells in the list are visited to find the starting cells for propagation. Here, the number of cells on the arcs of the graph is regarded as On 1=3 , and the number of cells on the boundary is regarded as On 2=3 .</p><p>In this paper we propose a method for generating a volumetric skeleton consisting of cells, like an extrema graph. The thinning method for image recognition is used to generate a skeleton. A skeleton is generated in On computational time, because the thinning method visits most cells once. Since the skeleton preserves the topological features of the volume and the connectivity of the extremum points, it necessarily intersects every isosurface. The method is more efficient than the extrema graph method, since it does not visit cells on the boundary of a volume, and the cost of searching for intersected cells is therefore regarded as On 1=3 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Isosurface propagation</head><p>In an isosurface propagation algorithm, the IDs of adjacent intersected cells are put into a FIFO queue when an intersected cell is visited. Enqueued cells are marked so that they are not enqueued twice. The cells are visited in that order by dequeuing from the FIFO queue. A set of patches is efficiently generated by repeating this process until the FIFO queue becomes empty. The propagation algorithm has a great advantage in efficiency, since it does not visit any non-intersected cells. However, it has the problem that the starting cells must be specified in advance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Extrema graph method</head><p>The extrema graph method <ref type="bibr" target="#b9">[10]</ref> can detect all starting cells for the isosurface propagation. It uses the following rules governing the relationship between an isosurface and a volume:</p><p>Rule: If there is a closed isosurface, then there exist extremum points both inside and outside of the isosurface. If there is an open isosurface, then the isosurface intersects the boundary of of the volume.</p><p>According to the above rules, cells intersected by a closed isosurface are found around an inner extremum point, and cells intersected by an open isosurface are found on the boundary.</p><p>In the pre-process, extremum points are first extracted. Extremum points are defined as nodes whose scalar values are higher or lower than the values of all adjacent nodes. In our implementation, the scalar values of all nodes for each cell are compared. All nodes except the maximum-valued ones are marked as "not maximum." Similarly, all nodes except the minimum-valued ones are marked as "not minimum." After the values in all cells have been compared, only nodes that have either a "not maximum" or "not minimum" mark are extracted as extremum points.</p><p>The closest unselected pair of extremum points is then selected, and adjacent cells are traversed in order, starting from one of the selected extremum points. The traverse continues until it arrives at the other selected extremum point, and visited cells are registered in a list. This process is repeated until all extremum points are connected to form a graph. At the same time, boundary cells are registered in a list and sorted according to the minimum and maximum values of their nodes (see <ref type="figure" target="#fig_1">Figure 1)</ref>.</p><p>When a scalar value is specified, cells in the extrema graph and the sorted boundary cell list are visited. At least one intersected cell is necessarily found, and every isosurface having the specified scalar value is generated by the propagation algorithm. This method necessarily extracts intersected cells in all disjoint parts of an isosurface.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Cost of the extrema graph method</head><p>The pre-process of the extrema graph method consists of the following three parts: sorting cells on the boundary, extracting extremum points, and connecting extremum points. The cost of sorting cells on the boundary is regarded as On 2=3 log n 2=3 , since the surfaces of boundaries are nearly planar and the number of cells on a boundary is therefore regarded as On 2=3 . The cost of extracting extremum points is regarded as On, since all cells are visited once. In the part of the process in which extremum points are connected, closest pairs of extremum points are selected and cells between the two extremum points are then traversed in order. The cost of traversing cells is regarded as On 1=3 . The cost of selecting a close extremum point is regarded as Om log m, where m denotes the number of extremum points. This process is repeated m times, and therefore the total cost is regarded as Om 2 log m. In many cases this is not expensive, since m is much smaller than n. <ref type="table" target="#tab_6">Table 4</ref> in Itoh and Koyamada <ref type="bibr" target="#b9">[10]</ref> shows that this part is not costly in any of the four datasets. However, it may be very expensive if m is large, especially in unconverged or noisy volumes.</p><p>The main process of the extrema graph method consists of three parts: searching for intersected cells in the extrema graph, searching for intersected cells on the boundary, and propagating an isosurface. The number of cells in a set of arcs is regarded as On 1=3 if all of the arcs are nearly straight. The number of boundary cells is regarded as On 2=3 if the entire boundary is nearly planar. The number of visited cells in isosurface propagation is regarded as On 2=3 . The extrema graph method is especially efficient for large volumes, since the cost of generating an isosurface is smaller than On. <ref type="table" target="#tab_7">Table 5</ref> in Itoh and Koyamada <ref type="bibr" target="#b9">[10]</ref> shows that the extrema graph method is faster than other methods, especially for large volumes. This result is also shown in <ref type="table" target="#tab_5">Table 3</ref> of the present paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Topology of an extrema graph and an isosurface</head><p>In the extrema graph method, the cost of searching for intersected cells is governed by the number of cells on the boundary, which is regarded as On 2=3 . Here we consider of the necessity of sorted boundary cell lists.  Unstructured volumes may have through-holes or voids. In this paper, a through-hole is defined as a topological feature that causes a genus of a boundary. A void is defined as an empty space enclosed by a discontinuous part of the boundary of a volume. Though an isosurface is not separated by a void, it may be separated by a through-hole. <ref type="figure" target="#fig_3">Figure 2</ref> shows an example of a volume which has a through-hole. An isosurface may be separated into multiple discontinuous parts when a volume has through-holes. In such volumes, an extrema graph does not necessarily have intersections with all parts of the separated isosurface. Therefore, cells on the boundary are visited, and consequently cells intersected by an open isosurface are necessarily found (see <ref type="figure" target="#fig_3">Figure 2</ref> (b)).</p><p>If an extrema graph contains such topological features, i.e., cycles corresponding to through-holes of a volume, it necessarily intersects all parts of an isosurface (see <ref type="figure" target="#fig_3">Figure  2</ref> (c)). Sorted boundary cell lists will not be necessary, and the cost of searching for intersected cells by using such an extrema graph will be On 1=3 .</p><p>We applied the thinning method, which is used in the image recognition area, to generate a skeleton of a volume that consists of cells containing topological features of volumes. In the next section, we describe how we apply the thinning method to unstructured volumes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Volume Thinning for Isosurface Generation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Thinning Method</head><p>Thinning <ref type="bibr" target="#b10">[11]</ref> is a technique for generating a skeleton features of an image. Essentially, it is a technique for analyzing and recognizing the features of figures in the imageprocessing area. It generates a skeleton of a one-pixel-wide painted area by eliminating pixels that touch the boundary of the area if they are determined to be unnecessary. This process is repeated until all unnecessary pixels have been eliminated and all the remaining pixels touch the boundary of the area. Various conditions for determining a visited pixel's necessity have been proposed, for example, If all the adjacent painted pixels (8 pixels at maximum) that share a vertex or an edge with the visited pixel cannot be visited by traversing adjacent pixels in order, the visited pixel should not be eliminated, because doing so many create a blank spare in the printed area.</p><p>If the visited pixel has only one adjacent painted pixel that shares an edge, the visited pixel cannot be eliminated, because the visited pixel is the edge of the line of the painted area.</p><p>As shown in <ref type="figure" target="#fig_5">Figure 3</ref>  shows an example of a skeleton generated by the thinning method, using the image shown in <ref type="figure" target="#fig_5">Figure  3</ref> (f). The skeleton contains topological features such as genus of the painted area, and the thinning method is therefore used to understand the geometry of the images. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Volume Thinning</head><p>In this section we describe how to use the thinning method to generate a skeleton that connects all extremum points and contains the topological features of a volume. Cells that touch the boundary are visited, and unnecessary cells are eliminated outside the process in our method, in the same way that unnecessary boundary pixels were eliminated in the existing thinning method. The process is repeated until all cells in a volume have been visited at least once and a one-cell-wide skeleton has been generated.</p><p>In our method, each cell that touches an extremum point is marked "KEEP", and will never be eliminated during the thinning process. Though many unmarked cells are then eliminated, the connectivity of the marked cells is retained. When all unmarked cells have been visited by the thinning method, a skeleton consisting of cells is generated. The skeleton contains the topological features of the volume, such as through-holes or voids <ref type="bibr" target="#b11">[12]</ref>. Cycles of cells are generated around through-holes, since the skeleton contains the cycle of through-holes. Layers of cells like bubbles are generated around voids, since the skeleton retains any discontinuities of boundary faces around voids. See <ref type="figure" target="#fig_7">Figure 4</ref> (b). The number of bubble-like layers of cells is regarded as On 2=3 . In our method, these layers of cells around voids are eliminated, because isosurfaces cannot be separated by voids, while cycles of cells around through-holes are preserved. A layer of cells has two discontinuous groups of boundary faces, namely, inner boundary faces originating to the void and outer boundary faces. These faces are connected by eliminating some cells in the layer. This process looks like pricking a hole in a layer of cells. The thinning process is then restarted by visiting cells adjacent to the eliminated cells, and many cells in the layer are finally eliminated. By pricking all the layers of cells around voids, a smaller skeleton is generated in which the number of cells is regarded as On 1=3 . See <ref type="figure" target="#fig_7">Figure 4</ref> (c).  Though our method can be applied to both structured and unstructured volumes, in this paper we describe its application only to volumes consisting of unstructured tetrahedral or hexahedral cells.</p><p>The conditions for determining the necessity of a vis-ited cell are defined similarly to those of existing thinning methods, described in Section 3.1. A cell is determined to be necessary if not all of its adjacent cells can be traversed along shared edges or nodes. However, this condition is not sufficient for minimizing the skeleton. <ref type="figure">Figure 5</ref> shows an example of the accidental generation of a loop in the skele- Accidentally generated loop <ref type="figure">Figure 5</ref>: An Accidentally generated loop in a skeleton.</p><p>The number of cells in a skeleton obtained by the thinning method is regarded as On 1=3 , and it is usually smaller than the number of cells on the boundary. This method is therefore more efficient than the extrema graph method, since the number of visited cells for detecting intersected cells is smaller. This method has other advantages. The cost of generating a skeleton is regarded as On and does not strongly depend on the number of extremum points. When a volume has many extremum points, the thinning method is therefore more efficient and stable than the cost of the extrema graph method. It is also easy to implement, since it does not include geometric operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>In this section, we discuss an implementation of our method. The pseudo-code of the volume thinning method for tetrahedral cells is also shown in <ref type="figure" target="#fig_8">Figure 6</ref>. The method consists of three processes: setup, thinning and pricking, and registration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Setup of the thinning method</head><p>Our study assumes that a volume has the following data structures. It also assumes that all nodes are located at ver-  tices of cells, and that a scalar value at an arbitrary position is calculated by linear interpolation.</p><p>Cell: A cell has pointers to its nodes, pointers to its adjacent cells, and a flag for its classification.</p><p>Node: A node has a position value, a scalar value, and a flag showing which void (or the boundary) it touches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Boundary face:</head><p>A boundary face is defined as a face of a cell that is not shared by another cell. It has a pointer to its cell, and a flag showing which void (or the boundary) it touches.</p><p>Extremum point: An extremum point has a pointer to its node, and a pointer to one of cells that touch the extremum point. All extremum points are extracted by an algorithm described in Itoh and Koyamada <ref type="bibr" target="#b9">[10]</ref>.</p><p>First, cells are classified by the number of their adjacent cells, and the classifications are described as C n (n = 0 ; 1 ; 2 ; 3 ; 4 , for tetrahedral cells, n = 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 , for hexahedral cells). At the same time, FIFO queues for C n (n = 1 ; 2 ; 3 ; 4 , for tetrahedral cells, and n = 1 ; 2 ; 3 ; 4 ; 5 ; 6 , for hexahedral cells) are allocated. Cells that touch extremum points are first marked "KEEP". Other cells on the boundary are enqueued in the FIFO queue in order. In the main loop of volume thinning, a cell is visited by dequeuing it from a FIFO queue, and its classification is altered to C 0 if it is determined to be unnecessary. The classifications of all adjacent cells of the visited cell are also altered from C n to C n 1 , and they are enqueued into the C n 1 FIFO queue, unless they are marked "KEEP". The classifications denote the number of adjacent non-C 0 cells during and after the main loop process. The C 0 cells will be eliminated so that it does not belong to the skeleton when the thinning is finished. At the same time, all boundaries, i.e., voids and an outer boundary, are numbered, and boundary faces that form a boundary are then marked with the number of the boundary. All nodes that are adjacent to the boundary face are also marked with the number of that boundary. All the other nodes are marked with another number indicating that they lie inside the volume. When a visited cell is altered to C 0 , all its nodes numbered as inside are re-marked with the number of the boundary that the other nodes have touched.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Main loop of the thinning process</head><p>After the setup process, cells are dequeued from the FIFO queues. Many of them are determined to be unnecessary, and altered to C 0 , i.e., eliminated from the volume. In our implementation, all C 1 cells are dequeued first, since the topology of the skeleton is not changed by the elimination of C 1 cells. C 2 cells are visited when the C 1 FIFO queue is empty. If any C 2 cell is altered to a C 1 cell and put into the C 1 FIFO queue caused by the elimination of an adjacent C 2 cell, it is dequeued before the remaining C 2 cells. C 3 cells are visited when both the C 1 and C 2 FIFO queues are empty. If any C 3 cell is altered to a C 2 cell and put into the C 2 FIFO queue caused by the elimination of an adjacent C 3 cell, it is dequeued before the remaining C 3 cells. C 4 and C 5 cells are similarly dequeued when all of the FIFO queues up to C 3 and C 4 , respectively, are empty, in the case of hexahedral cells.</p><p>All dequeued C 1 cells are altered to C 0 cells, since the topology of the skeleton is not changed by their elimination. In the case of C 2 , C 3 , C 4 , C 5 , and C 6 cells, only cells that satisfy the following conditions are altered to C 0 cells. Some cells turn out to be necessary and remain after the thinning process is completed. These cells form cycles around through-holes, or layers around voids, preserving the topological features of the original volume.</p><p>In the case of volumes consisting of tetrahedral cells, cells are processed according to the following conditions:</p><p>Condition for C 1 cells: All dequeued C 1 cells are altered to C 0 . Condition for C 2 cells: A C 2 cell has an edge shared by its two adjacent cells, C a and C b . Adjacent cells sharing the edge are traversed in order, starting from C a .</p><p>If the edge is inside the volume, the traverse arrives at C b and the dequeued C 2 cell will altered to a C 0 cell. See <ref type="figure" target="#fig_10">Figure 7</ref> (a).   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Condition for C 3 cells:</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Elimination of cells in layers around voids</head><p>Layers of cells around voids have discontinuous boundary faces, some facing outside the volume and others facing the voids. Both parts of faces can be connected by eliminating some cells, like pricking a hole through the layer. In the case of tetrahedral cells, a cell in which two nodes are marked with the outer boundary's number and others are marked with some void's number is extracted first. Since the cells form a thin layer, the cell should have two kinds of adjacent cells. One has a face on the outer boundary, the other has a face on the void boundary. Our algorithm extracts a set of those three cells and alters to C 0 cells. According to this elimination, the classifications of their adjacent cells are also altered, and they are enqueued into the FIFO queues.</p><p>The above process is executed when all FIFO queues are empty, and is repeated until all layers have been pricked.</p><p>In the case of hexahedral cells, layers of cells around voids can be eliminated by similarly pricking the layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Registration of cells</head><p>When the thinning and pricking processes are completed, non-C 0 cells are extracted to form a skeleton. In our implementation, cells are registered in several arrays, each of which has a range of scalar values. A cell is registered in an array if at least one node of the cell has a scalar value that lies within the range of the array. When a scalar value is specified by a user or automatically, cells registered in one of the arrays whose specified value is within the range are visited and intersected cells are found.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Benchmark tests</head><p>This section gives the result of some benchmark tests of our thinning method in comparison with the results of other methods <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b9">10]</ref>. The tests were carried out on an IBM PowerStation RS/6000 (Model 560). Five datasets for unstructured volumes consisting of tetrahedral cells, which contain the result of numerical simulations, were used for the tests.</p><p>The skeleton of a volume, Dataset no. 1, is shown in <ref type="figure">Figure 8</ref>. The color of a cell is given by the number of its adjacent cells registered in the skeleton. A yellow cell has only one adjacent registered cell, and is located at the end of a line. It coincides to an extremum point. A blue cell has two adjacent registered cells and a red cell has more than three adjacent registered cells. <ref type="figure" target="#fig_1">Figure 10</ref> shows an example of isosurface generation. Starting cells in all discontinuous isosurfaces having the same scalar value are detected and the isosurfaces are then propagated.</p><p>The skeleton of another volume, Dataset no. 2, is shown in <ref type="figure">Figure 9</ref>, where the color of a cell represents not its adjacency but its scalar value. The volume represents a human as a through-hole and a box as a void. The through-hole starts from one foot, goes through both of the legs, and ends up in the other foot. In the skeleton, the cycle of a throughhole is contained by a line of cells passing between the legs. <ref type="figure" target="#fig_1">Figure 11</ref> shows an example of generated isosurfaces.</p><p>The volume thinning method and the extrema graph method <ref type="bibr" target="#b9">[10]</ref> were compared in terms of the number of cells and the performance of each process in generating cell lists.</p><p>In <ref type="table" target="#tab_3">Table 1</ref>,</p><p>Nc is the number of tetrahedral cells (including boundary cells).</p><p>Ngpis the number of grid points.</p><p>Nep is the number of extremum points.</p><p>Nc1 is the number of registered cells in the extrema graph method, i.e., the total numbers of cells in an extrema graph and on the boundary.</p><p>Nc2 is the number of registered cells in the volume thinning method. Tst is the cost of generating cell lists in the sorting method <ref type="bibr" target="#b1">[2]</ref>.</p><p>Teg is the cost of generating cell lists in the extrema graph method <ref type="bibr" target="#b9">[10]</ref>.</p><p>Tvtis the cost of generating cell lists in the volume thinning method.</p><p>These processes for generating cell lists can be treated as pre-processes of isosurface generation. The cost of preprocessing in our two methods is smaller than in Giles's method but larger than in Gallagher's method in many cases.</p><p>The results show that the number of registered cells obtained by volume thinning is much smaller than in the extrema graph method. They also show that the cost of generating the skeleton in volume thinning is approximately proportional to the number of cells in a volume.</p><p>Here we note that the cost of the extrema graph method is not directly proportional to the number of cells. The cost for Dataset no. 5 is very much higher than for the other datasets, although there are fewer cells than in Dataset no. 4. This result is caused by the enormous number of extremum points. It is inconvenient for users, since it makes impossible for them to know the number of extrema points without counting them. The volume thinning method generally gives better results than the unstably performing extrema graph method.</p><p>Next, the connectivity of cells in the skeletons is analyzed. The results in <ref type="table" target="#tab_4">Table 2</ref> show that the number of C 1 cells is almost equal to the number of extremum points, and that most cells are classified as C 2 cells. This indicates that skeletons radiate from the centers of volumes and that there are extremum points at the ends of the skeletons. Finally, the performance of methods for generating isosurfaces is discussed. In the benchmark tests, a series of 20 isosurfaces were generated for each volume, with various scalar values. In <ref type="table" target="#tab_5">Table 3</ref>,</p><p>Nt is the number of patches in 20 isosurfaces.</p><p>Nv is the number of vertices in 20 isosurfaces. T f t is the total time in the filtering method <ref type="bibr" target="#b0">[1]</ref>.</p><p>Tst is the total time in the sorting method <ref type="bibr" target="#b1">[2]</ref>.</p><p>Teg is the total time in the extrema graph method <ref type="bibr" target="#b9">[10]</ref>.</p><p>Tvtis the total time in the volume thinning method.</p><p>These results show that our two methods are more efficient than other methods in most cases. They also show that the volume thinning method is more efficient than the extrema graph method. The reason for this is that the number of registered cells in the volume thinning method is smaller that in the extrema graph method, as shown in <ref type="table" target="#tab_3">Table 1</ref>. <ref type="table" target="#tab_6">Table 4</ref> shows the cost of searching for intersected cells by visiting the registered cells. In <ref type="table" target="#tab_6">Table 4</ref>, Teg is the time spent searching for intersected cells in an extrema graph and boundary cell lists, and traversing adjacent intersected cells, in the extrema graph method.</p><formula xml:id="formula_0">T</formula><p>Tvt is the time spent searching for intersected cells in a skeleton, and traversing adjacent intersected cells, in the volume thinning method. <ref type="table" target="#tab_7">Table 5</ref> shows the numbers of visited cells.</p><p>In <ref type="table" target="#tab_7">Table 5</ref>, N f t is the number of visited cells in the filtering method.</p><p>Nst is the number of visited cells in the sorting method. Neg is the number of visited cells in the extrema graph method.</p><p>Nvt is the number of visited cells in the volume thinning method.</p><p>These results show that the volume thinning method reduces the cost of searching for cells intersected by an isosurface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>This paper has proposed a volume thinning method for generating a skeleton that can be used in searching for intersected cells in isosurface propagation. It is more efficient than other methods, since the number of registered cells used in searching for intersected cells is regarded as On 1=3 . The cost of pre-processing is regarded as On.</p><p>The volume thinning method is more stable than the extrema graph method, since it is not heavily dependent on the number of extremum points. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Extrema graph and boundary cell lists.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Topology of an extrema graph and an isosurface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>(a), p is the current pixel and its adjacent pixels are numbered from 1 to 8. The black pixels in Figure 3(b)-(e) are the remaining painted pixels. In cases (b) and (c), the visited pixels can be eliminated, since all the painted pixels can be traversed in order (7, 8, 1 in Figure 3(b), and 4, 5, 6, 7, 8 in Figure 3(c)). On the other hand, the visited pixels cannot be eliminated in cases (d) and (e). Figure 3 (g)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Thinning of an image</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 4 :</head><label>4</label><figDesc>Volume thinning.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 6 :</head><label>6</label><figDesc>Algorithm of the volume thinning method for tetrahedral cells.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>A C 3</head><label>3</label><figDesc>cell has a node shared by its three adjacent cells, C a , C b , and C c . If the node is numbered as inside of the volume, the dequeued C 3 cell is altered to a C 0 cell. See Figure 7 (b). Condition for C 4 cells: All faces of a C 4 cell are adjacent to other cells. If a graph consisting of the edges and the nodes that are outside of the volume forms a simply connected tree, the dequeued C 4 cell is altered to a C 0 cell. See Figure 7 (c).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 7 :</head><label>7</label><figDesc>Conditions for tetrahedral cells.In the case of volumes consisting of hexahedral cells, C 1 , C 2 , C 3 , C 4 , and C 5 cells are processed according to similar conditions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>f t is the time spent searching for intersected cells in the classified cell lists, in the filtering method.Tst is the time spent searching for intersected cells in the sorted cell lists, in the sorting method.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 8 :Figure 9 :Figure 10 :Figure 11 :</head><label>891011</label><figDesc>Image (1) Image (2) Image (3) Image (4)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>ton. A cell C has a node (or an edge), that is shared by its adjacent cells and is on the boundary of the skeleton. If C is eliminated, a cycle is generated and may remain in the skeleton after the thinning process is completed. C should therefore not be eliminated, since the generation of a cycle increases the number of cells in the skeleton. On the other hand, if the shared edge or node is not on the boundary but inside the cells, all adjacent cells of C can be traversed. In our method, the shared edge or node of the visited cell is checked if it is on the boundary, to determine the necessity of the cell.</figDesc><table><row><cell></cell><cell>C</cell></row><row><cell></cell><cell>Thinning completed !</cell></row><row><cell></cell><cell>Shared node</cell></row><row><cell>Node shared by</cell><cell>(on the boundary)</cell></row><row><cell>3 adjacent cells</cell><cell>Extremum point</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 1 :</head><label>1</label><figDesc>Numbers of registered cells and performance in generating cell lists.</figDesc><table><row><cell>Dataset Nc Ngp Nep N c1 N c2 T f t (sec.) 0.19 0.52 1 2 20736 61680 346644 3 4002 11624 62107 21 46 135 2516 6480 20158 436 1365 3757 2.75 Tst (sec.) 1.15 4.12 47.95 52.29 63.60 4 5 557868 458664 97473 80468 540 5986 28086 121492 10967 55536 4.76 3.66 Teg (sec.) 0.58 1.53 7.46 14.51 76.78 Tvt(sec.) 1.13 3.22 16.93 26.86 23.22</cell></row><row><cell>T f t is the cost of generating cell lists in the filtering method</cell></row><row><cell>[1].</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 2 :</head><label>2</label><figDesc>Number of cells in each classification.</figDesc><table><row><cell>Dataset C1 C2 C3 C4</cell><cell>1 21 397 1259 3453 9552 20574 2 3 4 5 45 124 491 3208 17 61 178 875 15312 1 0 2 49 16436</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 3 :</head><label>3</label><figDesc>Performance in generating isosurfaces.</figDesc><table><row><cell>Dataset Nt Nv T f t (sec.) 5.78 8.36 25.51 107.89 59.31 1 2 3 4 5 67875 80995 135358 1164616 494480 34921 43158 71358 588796 251506 Tst (sec.) 5.69 6.85 15.24 100.92 53.48 Teg (sec.) 3.31 4.18 7.56 57.72 26.49 Tvt(sec.) 3.27 3.96 7.22 57.12 25.21</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 4 :</head><label>4</label><figDesc>Performance of searching for intersected cells. (sec.) 3.13 5.95 22.59 65.08 40.20 Tst (sec.) 2.24 2.86 8.65 42.65 26.86 Teg (sec.) 0.71 0.98 2.07 12.14 6.35 Tvt(sec.) 0.65 0.74 1.76 11.58 5.27</figDesc><table><row><cell>Dataset T f t</cell><cell>1</cell><cell>2</cell><cell>3</cell><cell>4</cell><cell>5</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 5 :</head><label>5</label><figDesc>Numbers of visited cells.</figDesc><table><row><cell>Dataset N f t 89548 179088 786220 1927026 1278742 1 2 3 4 5 Nst 51348 61766 101951 879735 378712 Neg 54420 66618 115639 907319 550605 Nvt 51762 63089 105762 890134 436658</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to thank K. Shimada, manager of Graphics Applications at Tokyo Research Laboratory (TRL), IBM Japan, and K. Shimizu, manager of Advanced Graphics at TRL, for their encouragement in this work.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Span Filtering: An Optimization Scheme for Volume Visualization of Large Finite Element Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Gallagher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;91</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="68" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Advanced Interactive Visualization for CFD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Giles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Systems in Engineering</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="51" to="62" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Octrees for Fast Isosurface Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Welhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gelder</forename><forename type="middle">A</forename><surname>Van</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Near Optimal Isosurface Extraction Algorithm Using the Span Space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johnson</forename><forename type="middle">C R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="73" to="84" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mcpheeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wyvill</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Structure for Soft Objects</title>
		<imprint>
			<date type="published" when="1986" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="227" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Polygonization of Implicit Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="341" to="355" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Volume Probe: Interactive Data Exploration on Arbitrary Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Speray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kennon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="5" to="12" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Mesh Propagation Algorithm for Isosurface Construction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Howie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blake</forename><forename type="middle">E H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Eurographics)</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="65" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Quantifying Visualization for Reduced Modeling in Nonlinear Science: Extracting Structures from Data Sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename><surname>Zabusky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Communication and Image Representation</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="46" to="61" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automatic Isosurface Propagation by Using an Extrema Graph and Sorted Boundary Cell Lists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Itoh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Koyamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="319" to="327" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Algorithms for Graphics and Image Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1982" />
			<publisher>Computer Science Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Topology: A First Course</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Munkres</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975" />
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
