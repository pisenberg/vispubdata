<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Interactive Visualization Of 3D-Vector Fields Using Illuminated Stream Lines</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Zöckler</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Konrad-Zuse-Zentrum für Informationstechnik</orgName>
								<address>
									<settlement>Berlin (ZIB)</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Detlev</forename><surname>Stalling</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Konrad-Zuse-Zentrum für Informationstechnik</orgName>
								<address>
									<settlement>Berlin (ZIB)</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Christian</forename><surname>Hege</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Konrad-Zuse-Zentrum für Informationstechnik</orgName>
								<address>
									<settlement>Berlin (ZIB)</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Interactive Visualization Of 3D-Vector Fields Using Illuminated Stream Lines</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A new technique for interactive vector field visualization using large numbers of properly illuminated stream lines is presented. Taking into account ambient, diffuse, and specular reflection terms as well as transparency, we employ a realistic shading model which significantly increases quality and realism of the resulting images. While many graphics workstations offer hardware support for illuminating surface primitives, usually no means for an accurate shading of line primitives are provided. However, we show that proper illumination of lines can be implemented by exploiting the texture mapping capabilities of modern graphics hardware. In this way high rendering performance with interactive frame rates can be achieved. We apply the technique to render large numbers of integral curves in a vector field. The impression of the resulting images can be further improved by making the curves partially transparent. We also describe methods for controlling the distribution of stream lines in space. These methods enable us to use illuminated stream lines within an interactive visualization environment.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The visual representation of vector fields is subject of ongoing research in scientific visualization. A number of sophisticated methods has been proposed to tackle this problem, ranging from particle tracing <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b10">11]</ref> over icon based methods <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b12">13]</ref> to texture based approaches <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b8">9]</ref>. A straightforward, popular and still very powerful method is the concept of depicting stream lines. However, when using stream lines for visualization the user is confronted with a number of problems. First, on a common graphics workstation stream lines either have to be displayed using flat-shaded line segments, impairing the spatial impression of the image, or they have to be represented by polygonal tubes, strongly limiting the number of stream lines that can be displayed in a scene. Second, it is usually not quite obvious how to distribute stream lines in space in order to get expressive pictures without missing important details of the field.</p><p>In this paper we present ideas that can help to overcome both problems. To achieve a fast and accurate illumination of line segments we exploit the texture mapping capabilities of modern graphics hardware. We apply this new shading technique to render large numbers of stream lines distributed throughout a vector field. Taking into account light reflection on stream lines is of great significance for scientific visualization because it very much increases the spatial impression of the resulting images. Image quality can be further improved by making parts of a stream line semitransparent. This allows us to get a better understanding of the inner structure of a field. It also makes it possible to distinguish between forward and backward direction. To facilitate the placement of a large number of stream lines we employ statistical methods. Given some scalar quantity that loosely describes the degree of interest in the vector field at some location, stream lines are placed automatically such that the relative degree of interest is matched qualitatively.</p><p>It is a well-known fact that quality and realism of computer generated images depend to a high degree on the accurate modeling of light interacting with the objects in a scene. Shading effects are perhaps the most important cue for spatial perception. Consequently much research has been performed to develop realistic illumination and reflection models in computer graphics. A widely used compromise between computational complexity and resulting realism is Phong's reflection model <ref type="bibr" target="#b11">[12]</ref> which assumes point light sources and approximates the most important reflection terms by simple expressions. Traditionally the model is applied to surface elements. Today many graphics workstations offer hardware support for this kind of illumination. However, the model can also be generalized to line primitives, and in this paper we will make direct use of such a generalization.</p><p>In scientific visualization the goal is not to render natural scenes in a photo-realistic way, but to generate images which provide maximal insight into numerical or experimental data. Nevertheless, shading effects are at least as important for the spatial interpretation of artificial images as in traditional computer graphics. Shading provides the observer with a minimum of realism in a world of cutting planes, isosurfaces, and symbols. Unfortunately there are a number of visualization techniques which aren't based on surface primitives, and which therefore can't make use of the hardware shading capabilities of current graphics workstations. As an example consider the various volume rendering techniques. While interactive frame rates can be achieved  for simple emission-absorption models by exploiting graphics hardware, in general this isn't yet possible if some sort of gradient dependent shading is included. Although rendering of line primitives is not as complex as volume rendering, the situation is similar. Traditionally, either flat shading has to be used or significant parts of the illumination calculation have to be computed without support by dedicated hardware.</p><p>After discussing illumination of line primitives in more detail, in section 3 we show how it can be implemented using texture mapping techniques. In section 4 we describe how to distribute stream lines in space in order to enhance interesting features within a vector field. In the final sections we present results and conclusions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Illumination of Lines</head><p>Surfaces can be characterized locally by a distinct outward normal vector N. This normal vector plays an important role when describing the interaction of light with surface elements. In the following we will shortly review the popular reflection model of Phong. Let L denote the light direction, V the viewing direction and R the unit reflection vector (the vector in the L-N-plane with the same angle to the surface normal as the incident light). Then light intensity at a particular surface point is given by</p><formula xml:id="formula_0">I = I ambient + I diffuse + I specular = k a + k d LN + k s V R n (1)</formula><p>The first term, a global one, represents the ambient light intensity due to multiple reflections in the environment. The second term describes diffuse reflection due to Lambert's law. Diffuse light intensity does not depend on the viewing vector, i.e. diffuse reflecting objects look equally bright from all directions. The last term in Eq. (1) describes specular reflections on a surface. Specular reflections or highlights are centered around the reflection vector R. The width of the highlights is controlled by the exponent n, also called shininess.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>T L L T L N</head><p>normal space <ref type="figure">Figure 2</ref>: The light vector L can be decomposed into two orthogonal components L T and L N corresponding to the projection on the line's tangent and normal space, respectively.</p><p>Let us now consider line primitives. In this case we can no longer define unique normal and reflection vectors. Instead there are two-dimensional manifolds containing infinitely many possible normal and reflection vectors. Mathematically lines in R 3 are said to have codimension 2. Fortunately common surface reflection models can be generalized to higher codimensions in a straightforward way. These generalizations have been discussed in detail by Banks <ref type="bibr" target="#b0">[1]</ref>. For lines in R 3 the results are quite obvious. From all possible normal vectors we simply have to select the one which is coplanar to the light vector L and the tangent vector T .</p><p>Taking this particular normal vector we compute the diffuse reflection term as for surfaces using Eq. (1). Likewise, from all possible reflection vectors we choose the one coplanar to L and T . Again, taking this particular reflection vector we use Eq. (1) to compute the specular reflection term. The relevant vectors for line illumination are illustrated in <ref type="figure" target="#fig_1">Fig. 1</ref>.</p><p>Instead of relying onto a specially selected normal vector we would rather like to express diffuse light intensity for line segments solely in terms of L and T . Therefore we first project the light vector into the line's normal and tangent spaces, yielding an orthogonal decomposition L = L N + L T . As illustrated in <ref type="figure">Fig. 2</ref>, by applying Pythagoras's theorem we obtain</p><formula xml:id="formula_1">LN = jL N j = p 1 j L T j 2 = p 1 L T 2 :</formula><p>(2)</p><p>Using similar arguments we can express the inner product V R responsible for specular reflection solely in terms of L, V , and T, i.e. without refering to N. First, observe that</p><formula xml:id="formula_2">R N = L N and R T = L T . We therefore have V R = V L T L N = V LT T LN N = LT V T LN V N = LT V T p 1 LT 2 p 1 V T 2 : (3)</formula><p>Here we have replaced LT by Eq. (2). A similar expression has been used to rewrite V T.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Rendering</head><p>Despite the fact that the illumination equation looks the same for lines and surfaces, use of standard hardware shading techniques is impaired because for each new view or light direction a suitable normal vector has to be computed without utilizing graphics hardware. In the following we show how Eqs. <ref type="formula">2</ref>and <ref type="formula">3</ref>can be effectively evaluated using texture mapping capabilities of modern graphics hardware, avoiding the need of explicit normal vector computation. The technique allows us to achieve high frame rates even when large numbers of line segments have to be rendered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Texture Mapping</head><p>We assume to have a graphics API available similar to OpenGL. In this graphics library at each vertex a homogeneous vector of texture coordinates can be specified. Usually the first components of this vector are taken as indices into a one-, two-, or three-dimensional texture map. A texture map may contain colors and/or transparencies which can be used to modify in various ways the original color of a fragment in the graphics pipeline. In addition it is possible to change texture coordinates using a 4 4 texture transformation matrix.</p><p>This texture transformation is the key feature which makes it possible to employ texture mapping hardware for shading calculations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Diffuse Reflection</head><p>Looking at Eq. (2) we note that the diffuse light intensity of a line segment is a function of LT only. Specifying a texture vector t 0 equal to the line's tangent vector T at each vertex, this inner product can be computed in hardware using the following texture transformation matrix:</p><formula xml:id="formula_3">M = 1 2 0 B B @ L 1 0 0 0 L 2 0 0 0 L 3 0 0 0 1 0 0 2 1 C C A</formula><p>The first component of the transformed homogeneous texture vector t = t 0 M then evaluates to</p><formula xml:id="formula_4">t 1 = 1 2 LT + 1 :</formula><p>Note, that t 1 always lies in the range 0 : : : 1 . Therefore this value can be used as an index into a one-dimensional texture map P t 1 . The value of the texture map at location t 1 is chosen such that it resembles the diffuse light intensity corresponding to LT = 2 t 1 1 , namely</p><formula xml:id="formula_5">P t 1 = I diffuse = k d p 1 2t 1 1 2 :<label>(4)</label></formula><p>Using a texture mode which takes the color of a line fragment to be equal to its texture color P t 1 we obtain an image which accurately shows line segments diffusely illuminated by a single point light source. If the light direction changes we simply have to update the texture transformation matrix. Vertices and texture coordinates of the line segments remain constant. This means that we can make use of OpenGL display lists to further increase rendering speed. Display lists allow one to specify multiple vertex and texture definitions using a single graphics library call.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Specular Reflection</head><p>The specular reflection term does not only depend on V T but also on LT, as can be seen from Eq. (3). To compute this additional inner product we initialize the second column of the texture transformation matrix with the current viewing direction:</p><formula xml:id="formula_6">M = 1 2 0 B B @ L 1 V 1 0 0 L 2 V 2 0 0 L 3 V 3 0 0 1 1 0 2 1 C C A</formula><p>While the first transformed texture component remains the same, for the second component we now get</p><formula xml:id="formula_7">t 2 = 1 2 V T + 1 :</formula><p>In order to obtain the correct light intensity corresponding to L T = 2 t 1 1 and V T = 2 t 2 1 we can use a two-dimensional texture map P t 1 ; t 2 . Adding a constant ambient term k a as well as the diffuse contribution from Eq.</p><p>(4) we can perform the whole shading calculation for a single light source in texture hardware. <ref type="figure" target="#fig_2">Fig. 3</ref> shows an example of a resulting two-dimensional texture map. One can clearly identify the highlight appearing at different angle positions on top of a diffuse background. If no highlight was present color would not depend on the viewing direction V , as stated by Lambert's law. It is worthwhile to note that there is an important special case, which allows one to use a one-dimensional texture even when specular reflection is present. This is the case of a headlight, i.e. a point light source located at the same position as the camera. In this case light vector and viewing vector are identical. Equation <ref type="formula">3</ref></p><formula xml:id="formula_8">simplifies to V R = 2 L T 2 1 :</formula><p>Headlights are quite useful because they always guarantee an adequate illumination of the scene, irrespectively of the actual viewing direction. The user has not to bother with a tedious setup of light conditions. In fact, all of the color plates in this paper were rendered using a headlight.</p><p>Of course it is also possible to use the third column of the texture transformation matrix to compute an additional inner product. This would require the use of a three-dimensional texture map. Three different inner products would allow the illumination of lines by two point light sources located at arbitrary positions including specular reflection. Alternatively one might discard specular reflection and instead introduce a third purely diffuse illuminating light source.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Color Coding</head><p>Color coding is a common method in visualization. Applying color to individual field lines would enable us to depict some scalar quantity in addition to vector field structure. Such a quantity could be field magnitude or potential strength, or something more unrelated like pressure in a fluid flow. Ideally we would like to modify the curve's ambient and diffuse color components according to a given color lookup table. However, in our case color is directly taken from a texture map. Since we use the same texture map for all field lines it is not possible to set these components locally in a straight-forward way. Nevertheless, by using an alternative texture mapping mode it is possible to modulate, i.e. multiply, texture color with the object's base color. The latter can be defined for each vertex separately. This yields the desired effect with the restriction that also the specular highlight gets colored instead of remaining constant. <ref type="figure">Fig. 7</ref> suggests that this is only a minor limitation. Despite being differently colored the highlight can be identified clearly throughout the whole image while still improving spatial perception. At the same time color accurately encodes an additional scalar variable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Excess Brightness</head><p>Banks <ref type="bibr" target="#b0">[1]</ref> pointed out that there is a general problem when illuminating objects with codimension &gt; 1. The overall in-tensity of an image increases and becomes more uniform, thus disturbing spatial perception. In case of lines in R 3 this can be understood by the following consideration: We know that the normal vector is not a constant one, but is given by the projection of the light vector into the line's normal space.</p><p>Choosing such a vector means minimizing the angle between light vector and normal. Therefore in general the angle between these two vectors is smaller compared to the case of a fixed normal. This results in a more uniform brightness than we are used to perceive in real world. As suggested by Banks, we compensate the effect qualitatively by exponentiating the diffuse intensity term:</p><formula xml:id="formula_9">I diffuse = k d LN p<label>(5)</label></formula><p>In <ref type="bibr" target="#b0">[1]</ref> a value of p = 4 : 8 was proposed. For the images in this paper we have used a value of p = 2 , which produced nicer results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Transparency</head><p>Shading of line segments as described above provides important cues for the spatial impression of stream line images.</p><p>However, image quality can be further improved by use of transparency. Let us imagine the image of a stream line is produced by a small particle traversing the vector field and leaving a veil of haze. Assuming that the haze disappears according to an exponential law, opacity or alpha value for a point s n at the curve is given by s n = 0 q n 1 :</p><p>Here the factor q controls how much of the haze disappears per unit step. A resulting semi-transparent stream line is illustrated in the following figure:</p><formula xml:id="formula_11">s 1 s 2 s 3 s n</formula><p>Use of transparency has two advantages: First, stream lines near to the camera do not completely hide those being more far away. This allows the observer to gain deeper insight into the inner structure of the vector field. Second, the sign of vector field direction becomes visible in a static image. This is not the case when stream lines are rendered symetrically in forward and backward direction.</p><p>Drawing a transparent pixel of opacity and color C causes the current color in the frame buffer to be updated according to C new = 1 C old + C: <ref type="bibr" target="#b6">(7)</ref> In general if multiple transparent objects are present the final color depends on the ordering of the individual objects. Correct results are obtained using a back to front traversal.</p><p>The situation is simplified if all objects are of equal color C.</p><p>In this case all traversal orders yield the same result. This has been exploited by Max, Crawfis, and Grant <ref type="bibr" target="#b9">[10]</ref>, who applied constant shaded line bundles for vector field visualization. However, for illuminated lines color isn't constant anymore. Therefore individual lines have to be rendered in a depth-sorted way.</p><p>In general it is impossible to achieve an exact depth ordering for extended curves in 3D, because mutual coverings may occur. Therefore we split each stream line into many small line segments, which are sorted and rendered individually. To avoid resorting line segments each time the view direction changes we use the following simplified algorithm: Three lists of pointers to stream line segments are created.</p><p>The lists are sorted in order of increasing x-, y-, and zcoordinates, respectively. During rendering the list that most closely resembles the viewing direction is traversed, either from back to front or from front to back. Although this method is not exact, it produces excellent results which can not be distinguished from the exact images visually. Experiments have shown, that only about 1% of all pixels receive somewhat incorrect color values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Stream Line Animation</head><p>Animated particles provide a very intuitive mean of visualization, especially when velocity fields are to be visualized. Following the idea of particles leaving a veil of haze, animation sequences can be obtained in the following way.</p><p>Stream lines are created at different times t i with an initial length of 0. In each time step, all stream lines are extended by one point, while opacity of all the points already drawn is modified by the factor q (compare Eq. (7)). This gives the illusion of moving particles producing a slowly disappearing veil of haze, like comets. A periodic animation sequence can be created by assuring that the period T is long enough so that points on a stream line can disappear completely within this interval (i.e. q T 0). Then a stream line that has been created at time t i can be restarted at the same location at time t i + T , since it is no longer visible then. This results in a continuous animation loop of period T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Distributing Stream Lines</head><p>When using stream lines for vector field visualization a common problem is to select proper seed points for path tracking. The fast texture based shading technique described above allows us to render images containing thousands of stream lines at interactive rates. Working with a large number of stream lines has the advantage, that the positioning of an individual line becomes less important. Instead we can apply statistical methods to distribute seed points throughout the field. In particular we would like the distribution to resemble some sort of scalar quantity p, which loosely corresponds to the degree of interest the user wants to put in some region.</p><p>For example a constant p would result in a homogenous distribution of seed points, while a value of p proportional to vector magnitude would have the effect that more seed points are placed in regions of large magintude.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Monte-Carlo Selection</head><p>To generate seed points with a density proportional to p, we subdivide to whole data volume into n uniform cells. For each cell we compute a value p i describing the local degree of interest for that cell. The accumulated degree of interest is defined by</p><formula xml:id="formula_12">! i = i X j=1 p j<label>(8)</label></formula><p>We assume all cells being arranged in a sequence based on some arbitrary numbering. We choose cells randomly with a probability proportional to p i . This is done by taking a random number r uniformly distributed in the range 0 : : : ! n . The first value ! i &gt; r determines which cell is taken.</p><formula xml:id="formula_13">0 ω i−1 ω i p i ω n</formula><p>Within a selected cell we place a new seed point at a random position. Because the values ! i are monotonely increasing, the cell lookup procedure has a complexity of Ologn and therefore can be performed quite fast.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">An Equalization Strategy</head><p>In general it is not a trivial task to find a good scalar quantity p. For example, choosing p equal to vector field magnitude may not have the desired effect when this quantity varies over multiple orders of magnitude. Instead of exactly being proportional to p, we would rather like to have a density distribution which resembles vector field magnitude qualitatively, but in general places seed points more homogenously. Such an effect can be obtained using a histogram equalization approach. This technique is well known from the image processing literature <ref type="bibr" target="#b5">[6]</ref>, but in our case may also be used to modify the degree of interest p in a suitable way. Let us define a sum histogram in the following way:</p><formula xml:id="formula_14">Sp = number of cells with p i &lt; p total number of cells<label>(9)</label></formula><p>Based on the sum histogram we can assign each cell a new equalized degree of interest, p 0 i = Sp i :</p><p>Of course other probability distributions can be used to emphasize special features of the field. We have implemented a symbolic interface which allows us to specify p i as a function of vector field magnitude and other optional scalar fields. Within this interface analytic functions like logarithm or square root as well as threshold operators can be used to modify p. Together with a three-dimensional selection box, which may be positioned interactively to spatially confine the region of interest, it is possible to explore very quickly the overall characteristics as well as the details of a vector field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Divergence Compensation</head><p>If the vector field has a divergence different from zero, the stream line density will not remain constant even if the seed points are distributed uniformily. In some areas stream lines will run together, resulting in an increased local density. In other areas they will expand, resulting in a decreased local density. In our case stream lines are computed with a fixed maximum length. Experience shows that a sufficiently uniform stream line density is obtained by placing seed points in the middle of a stream line segment, and integrating equally far in forward and backward direction. Of course, better results could be obtained by adaptively terminating existing lines or creating new ones based on local stream line density.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Streamline Computation</head><p>For numerical stream line integration we use a fourth-order Runge-Kutta method with error monitoring and adaptive step size control, as described in <ref type="bibr" target="#b13">[14]</ref>. Use of an adaptive method allows us to control the error of the solution. Such methods are also necessary to detect singularities. At these points stream line integration has to be terminated. Singularities, i.e. sinks and sources, commonly occur for example in electrostatic fields. Examples are shown in Figs. 4-7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Interaction</head><p>Due to its high rendering speed our method is dedicated to be used in an interactive visualization framework. To interactively define regions of interest we apply so-called draggers which are provided by the Open Inventor graphics toolkit. Two such box-type draggers are depicted in <ref type="figure" target="#fig_3">Fig. 4</ref>. Each dragger defines an rectangular or spherical volume in which stream lines are seeded.</p><p>We have also implemented methods to place seed points along curves. The curves may be created by intersecting an arbitrary geometry, e.g. an isosurface, and a user-defineable plane. This method is particularly suited to highlight possible symmetries within the data set.</p><p>Further refinements can be achieved by using scalar fields that define local seed point density or local degree of interest. Such fields can be obtained from numerical simulation. In addition we use a symbolic interface to define such fields in terms of vector field magnitude, cartesian coordinates and other available quantities. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Results</head><p>The algorithms presented in this paper have been implemented in C++ by subclassing the Open Inventor toolkit. Using Inventor makes it easy to display shaded stream lines in combination with other geometries. The shading itself makes use of the OpenGL graphics library.</p><p>On a SGI Indigo 2 desktop workstation with Maximum Impact graphics and a 250 MHz R4400 CPU scenes containing 3000 stream lines each consisting of 120 transparent line segments can be rendered at a rate of 10 frames per second. These results can be improved by 10%-20% if OpenGL display lists are used. However, display lists cause the rendering to be delayed when the scene is drawn the first time. Therefore, in our implementation the user can choose whether to use display lists or not. Also, the integration of our algorithm into the Open Inventor rendering scheme may be further optimized.</p><p>We have applied our methods to visualize vector fields from various disciplines like computational fluid dynamics, quantum chemistry, and medicine. In most cases the default values for seed point distribution (eventually accompanied with the histogram equalization technique) provide a good first impression of the vector field. The fast rendering speed offers the possibility to interactively rotate and zoom the geometry. This is an important feature for an improved spatial perception. <ref type="figure">Fig. 5 and 6</ref> show the electrostatic field of a benzene molecule. The field is computed using the NAO-PC method (Natural Atomic Orbitals -Point Charge). This quantum-classical method aproximates atomic orbitals by a set of discrete fractional point charges. The location of some of these point charges can be clearly identified in the images. <ref type="figure">Fig. 7</ref> also depicts parts of an electrostatic field of a molecule. In addition stream lines have been color coded as described in section 3.4. In this example color depicts the electrostatic potential. The field lines connect several positive point charges (magenta) with a single negative charge (green-orange).</p><p>An example of a velocity field from a CFD application is shown in <ref type="figure">Fig. 8</ref>. The data represents a fluid flow over a backward facing step. The turbulent region emphasized by the visualization is characterized by a very complex field structure.</p><p>Finally <ref type="figure">Fig. 9</ref> illustrates the power of accurate line shading: While only a poor three-dimensional impression is obtained from the middle and right images, the spatial structure of the field is clearly revealed in the left image.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>The visual representation of 3D vector fields is one of the current challenges in scientific visualization. Of particular interest are methods that provide an overview of the global field structure and that also depict fine details.</p><p>In this paper we have presented a fast method for visualizing 3D vector fields based on the display of stream lines, i.e. integral curves of the field. The method gives a good impression ofthe field structure and enables us to resolve visually rather fine details, like small vortices. A texture mapping technique is used to accurately illuminate the stream lines. Light reflection on stream lines improves spatial perception and thereby facilitates the understanding of the inner structure of a field.</p><p>We have shown how high quality stream line images can be generated at interactive speed using hardware supported texture mapping. This offers new opportunities for interactive visualization. Using a simple Monte-Carlo method lines are placed automatically such that the relative degree of interest, defined by some scalar field, is matched qualitatively. Additional use of of a histogram equalization approach allows us to automatically place stream line segments more homogenously.</p><p>Some interesting topics of further research are improvement of the seed point selection strategies such that characteristic features of the field are detected and enhanced automatically or the application of the shading technique to time dependent vector fields. In the latter case particle paths or streak lines should be used in favour of stream lines.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>For line primitives there are infinitely many possible reflection vectors R lying on a cone around T . For the actual lighting calculation we choose the one contained in the L-T -plane.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Two-dimensional texture map used to implement Phong's reflection model for line segments. Parameter values are k a = 0 : 1 ; k d = 0 : 3 ; k s = 0 : 6 , and n = 4 0 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Interactive definition of seed volumes using Open Inventor draggers.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Takustr. 7, D-14195 Berlin, Germany E-mail: fzoeckler,stalling,hegeg@zib-berlin.de</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Illumination in Diverse Codimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;94</title>
		<meeting>SIGGRAPH &apos;94<address><addrLine>Orlando, Florida</addrLine></address></meeting>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="327" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;93</title>
		<meeting>SIGGRAPH &apos;93<address><addrLine>Anaheim, California</addrLine></address></meeting>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1993" />
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="263" to="272" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Textured Splats for 3D Scalar and Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nelson</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;93, Nielson and Bergeron</title>
		<meeting>Visualization &apos;93, Nielson and Bergeron</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="261" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Visualizing Flow over Curvilinear Grid Surfaces unsing Line Integral Convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">K</forename><surname>Forsell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;94</title>
		<editor>, Bergeron and Kaufman</editor>
		<meeting>Visualization &apos;94</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="240" to="247" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Interactive Animated Visualization of Flow Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Van Gelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of ACM Workshop on</title>
		<imprint>
			<biblScope unit="page" from="47" to="54" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Gonzales</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wintz</surname></persName>
		</author>
		<title level="m">Digital Image Processing</title>
		<imprint>
			<publisher>Addison Wesley</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="146" to="152" />
		</imprint>
	</monogr>
	<note>Second Edition</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Andrea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frits</forename><forename type="middle">H</forename><surname>Hin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Post</surname></persName>
		</author>
		<title level="m">Visualization of turbulent flow with particles. In Visualization &apos;93</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<biblScope unit="page" from="46" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A probe for local flow field visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>De Leeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;93, Nielson and Bergeron</title>
		<meeting>Visualization &apos;93, Nielson and Bergeron</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="39" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Enhanced Spot Noise for Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>De Leeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;95</title>
		<meeting>Visualization &apos;95</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="233" to="239" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Grant</surname></persName>
		</author>
		<title level="m">Visualizing 3D Velocity Fields Near Contour Surfaces, Proceedings of Visualization &apos;94</title>
		<editor>, Bergeron and Kaufman</editor>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="248" to="255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Virtual smoke: An interactive 3d flow visualization technique</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwan-Liu</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><forename type="middle">J</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization &apos;92</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<biblScope unit="page" from="46" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Illumination for Computer Generated Pictures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-T</forename><surname>Bui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Phong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="page" from="311" to="317" />
			<date type="published" when="1975-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">J</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Van Walsum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">H</forename><surname>Post</surname></persName>
		</author>
		<title level="m">Iconic Techniques for Feature Visualization, Nielson and Silver</title>
		<imprint>
			<biblScope unit="page" from="288" to="295" />
		</imprint>
	</monogr>
	<note>Proceedings of Visualization &apos;95</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Fast and Resolution Independent Line Integral Convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Hege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Annual Conference Series</title>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="249" to="256" />
		</imprint>
	</monogr>
	<note>Proceedings of SIG-GRAPH &apos;95</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Rendering surface-particles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jarke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization &apos;92</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<biblScope unit="page" from="54" to="61" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
