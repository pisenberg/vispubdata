<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Efficient Point-Based Isosurface Exploration Using the Span-Triangle</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bartosz</forename><surname>Von Rymon-Lipinski</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Surgical Systems Laboratory</orgName>
								<address>
									<settlement>research center caesar</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nils</forename><surname>Hanssen</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Surgical Systems Laboratory</orgName>
								<address>
									<settlement>research center caesar</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Jansen</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Surgical Systems Laboratory</orgName>
								<address>
									<settlement>research center caesar</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lutz</forename><surname>Ritter</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Surgical Systems Laboratory</orgName>
								<address>
									<settlement>research center caesar</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Keeve</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Surgical Systems Laboratory</orgName>
								<address>
									<settlement>research center caesar</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Efficient Point-Based Isosurface Exploration Using the Span-Triangle</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.6 [Computer Graphics]: Methodology and Techniques-Graphics data structures and data types</term>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation-Display Algorithms</term>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modelling-Curve, surface, solid, and object representations Point-Based Visualization, Isosurfaces, Hardware Acceleration, Large Data Set Visualization, Visualization in Medicine</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: Isosurface exploration of a CT volume model, showing different anatomical structures of a human head</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Visualization plays an important role in many scientific and medical applications, facilitating the understanding of three-dimensional volume data. A crucial part is the exploration of the underlying spatial scalar field, targeting at characteristic structures inside solid bodies, like bone or soft tissue in medical data sets. One common approach is direct volume rendering, where the user gets insight vision into a representation of the complete volume. Popular techniques are ray-casting, shear-warp, texture-mapping and * e-mail:{lipinski,hanssen,jansen,ritter, keeve}@caesar.de splatting <ref type="bibr" target="#b17">[18]</ref>. These techniques can be used to display directly surfaces in the volume by utilizing appropriate ray-intersections or by applying transfer functions that correspond to a single spike in value space. On the other hand, many applications require a geometric representation of a surface model. Therefore, an alternative approach is indirect isosurface visualization. An isosurface is a surface-based representation, generated from geometric primitives that are associated with a constant scalar value. Unfortunately, achieving interactive exploration of the underlying volume data with isosurfaces is still a challenge. Many solutions are based on a separation between the generation of surface primitives and the actual rendering. Typically, the generation is performed for each new isovalue and previous geometry is discarded. Such an approach requires a complete recalculation of the model. Additionally, many approaches use triangle models to represent surfaces. In a standard triangle-based method, like Marching Cubes, volume grid cells that are intersected by the isosurface are identified, polygonized and added to the output mesh <ref type="bibr" target="#b16">[17]</ref>. The resulting model is built from a set of interconnected triangles. This may lead to high memory consumption, making the isosurface exploration and memory management a hard challenge.</p><p>To overcome the aforementioned performance and memory drawbacks we have developed a novel data structure -the span-triangle -derived from the span-space representation <ref type="bibr" target="#b15">[16]</ref>. It stores relevant cell information for all isosurface models in a user-specified scalar range. Given a specific isovalue, we can extract the corresponding model with optimal time complexity O(k), for output size k. Our incremental and progressive update scheme exploits data coherence between different models and allows smooth manipulation of the isovalue in real-time. We have chosen point primitives to represent and display geometry within the rendering pipeline. Point elements do not contain connectivity information and therefore can be managed efficiently in applications that work with dynamic data. Moreover, representing objects with points enables the possibility to sample the original data only at scalar regions that contain relevant surface information. We have implemented a point-based renderer that is accelerated with recent features of graphics hardware <ref type="bibr" target="#b1">[2]</ref>. Therefore, we are able to consider a visualization pipeline, which is distributed among three levels of memory, i.e. disk, system and graphics, supporting data sets with more than 512 3 resolution. In the following we provide the notation and technical terms, used in this paper: We consider a volume as a set of samples in three dimensional space. Each sample is associated with a scalar intensity value x ∈ ℜ in the range [r min , r max ]. Applying a reconstruction function, e.g. trilinear interpolation, results in the corresponding scalar field function V : ℜ 3 → ℜ. Therefore, having an isovalue υ ∈ ℜ we can define the corresponding isosurface as the set of points {x ∈ ℜ 3 | V (x) = υ}. Additionally, neighboring samples of the volume specify a subvolume, called cell. For example, a cell in a three-dimensional volume grid is constructed by eight corner samples with scalar values x 1 , ..., x 8 ∈ ℜ. The cell range [x min , x max ] is defined, using the minimum and maximum intensity values. A cell is called active, if it is intersected by the isosurface, i.e. υ ∈ [x min , x max ]. Finally, the span is the width of the corresponding interval, i.e. s = x max − x min .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>A lot of research is focusing on the improvement of isosurface generation performance. This is achieved mainly by reducing the number of cells visited during the extraction or by providing an efficient access to active cells. There are three different types of techniques: domain search, range search and cell propagation. Domain search techniques work in the geometric space. One example is the hierarchical partitioning of the spatial domain. Wilhelms and van Gelder use an octree with intensity extrema values to avoid the traversal of inactive cells, i.e. that do not intersect with the isosurface <ref type="bibr" target="#b25">[25]</ref>. This approach is useful for interactive visualization, but performance is dependent strongly on the data set. Other research has concentrated on processing the scalar space. Typically, data structures are defined that contain cell information, sorted by the cell-minimum and -maximum scalar values. Examples are active lists, sweeping simplices and interval trees <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b23">23,</ref><ref type="bibr" target="#b4">5]</ref>. Other range search algorithms are based on the the span-space representation. Using this approach, the isosurface generation can be reduced to a range searching problem. The acceleration is achieved by subdividing the span-space, using data structures such as the kd-tree and lattice decomposition <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b21">22]</ref>. In general, range search methods can be orders of magnitude faster than Marching Cubes, but they suffer from the common problem of excessive extra memory requirements <ref type="bibr" target="#b24">[24]</ref>. The basic idea of cell propagation techniques is to grow the isosurface from an initial set of cells. Known solutions are the extrema graph and seed sets <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b2">3]</ref>. Finally, recent methods address also the problem of isosurface exploration. The Isoslider system is based on the idea that small changes in isovalue require small changes to active cells <ref type="bibr" target="#b3">[4]</ref>. Their algorithm uses a trianglebased approach, resulting in high-quality rendering, but long preprocessing times even for moderate data sizes.</p><p>Point-based techniques have been proposed by Levoy and Whitted in their technical report from 1985 <ref type="bibr" target="#b14">[15]</ref>. New approaches of rendering point primitives have become popular, especially since the work of Grossmann and Dally, who use hierarchical z-buffers to fill holes between point primitives in screen space <ref type="bibr" target="#b8">[9]</ref>. Further approaches like QSplat and surfels use splatting techniques to represent and render surfaces by displaying point primitives as small discs or ellipsoids that are scaled as a function of the distance to the eye <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b26">26]</ref>. Alexa et al. use adaptive resampling of the point set to match the output resolution on the image plane <ref type="bibr" target="#b0">[1]</ref>. Recent algorithms incorporate also point-based techniques for isosurface rendering. Baerentzen et al. are not focusing on interactive isosurface exploration, but have shown that speed of hardware-accelerated point-rendering can be superior to triangle rendering <ref type="bibr" target="#b1">[2]</ref>. Furthermore, Iso-Splatting uses approximate projection of points on the isosurface to improve visual quality of point-based isosurface representations <ref type="bibr" target="#b5">[6]</ref>.</p><p>The development of our data structure was inspired by the work of Gallagher and by the ISSUE algorithm <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b21">22]</ref>. Our representation is based also on a regular decomposition of the span-space, whereby we use a different subdivision scheme and a different data structure for isosurface cell information. Additionally, once the data is stored in the span-triangle, we do not require any explicit searching for active cells. Our data structure establishes a tight coupling between representation and point-based rendering, leading to both fast updates of the surface model and interactive rendering rates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHODS</head><p>The main elements of our visualization pipeline are illustrated in figure 2. In the first processing step we access the input volume in disk memory. We generate the span-triangle data structure in system memory that contains all isosurface cell information for a user-specified scalar range. Then, we extract the point data for one specific isovalue and transfer it to graphics memory for rendering. During exploration we update the surface model incrementally on each change of the isovalue. At the end of the visualization pipeline, the user has the possibility to fix the isovalue, releasing unused memory resources and making them available for further application steps or the generation of a higher-quality model.</p><p>In the following subsection 3.1, we describe the span-triangle data structure and the related isosurface extraction algorithm. Subsection 3.2 deals with the generation of the data structure from the input volume. Finally, in section 3.3 we address the rendering technique, based on our data structure, as well as the corresponding update scheme during exploration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Data Structure</head><p>The design of our data structure is based on a special scalar range representation that was designed for the acceleration of isosurface extraction <ref type="bibr" target="#b15">[16]</ref>. Assuming a cell with a scalar minimum x min and maximum x max , we consider the cell as a point (x min , x max ) in ℜ 2 . The corresponding two-dimensional space with cell-minima on the x-axis and cell-maxima on the y-axis is the so-called span-space. Unlike the cell interval representation [x min , x max ], it is possible to subdivide the data domain in a simpler way and to develop an efficient searching algorithm for active cells <ref type="bibr" target="#b21">[22]</ref>. We focus on medical  volume data sets (e.g. CT, MRI) that typically contain only discrete scalar values. Consequently, we consider a discretized version of the span-space, illustrated in figure 3.</p><p>The span-triangle contains information of potentially active cells for a pre-defined range of isovalues</p><formula xml:id="formula_0">[υ min , υ max ] ⊆ [r min , r max ]</formula><p>, which we call exploration range. Our goal was to create a data structure, which allows the efficient extraction of an isosurface model for a specific isovalue as a set of active cells. We have chosen linear arrays as the major building blocks in order to achieve optimal cache utilization. Therefore, there are three types of data containers: base array, span array and cell information array.</p><p>• Each element in the base array corresponds to cells with a particular based cell minimum value b = x min −υ min and contains a span and cell information array.</p><p>• Each span array is implemented as an offset   The extraction of the isosurface is a nonhierarchical procedure, where only those cells that contribute to the current isosurface are accessed. Moreover, it is just a traversal of the base array, combined with look-ups to the cell information via the offsets from the span array, as shown in <ref type="figure" target="#fig_4">figure 4</ref>. Therefore, the extraction runs in optimal time complexity O(k), for k as the number of active cells. The inner loop of the algorithm can be replaced by a memory block operation in order to read out the cell information with highest efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Generation of the Data Structure</head><p>Before we describe the span-triangle generation, we list possible strategies for a pre-selection of the exploration range [υ min , υ max ] ⊆ [r min , r max ]. The background for the pre-selection is that only specific scalar subranges contain useful information. <ref type="figure" target="#fig_5">Figure 5</ref> illustrates a typical situation, when working with volumetric data sets: Choosing a too low or too high isovalue results in an inadequate visualization. By utilizing point primitives we have the potential to reduce memory consumption of the span-triangle and speed-up its generation. Therefore, it makes sense to choose an exploration range that is as small as possible, discarding regions that are not useful for the current application. In our implementation we employ manual trial-and-error to find a good interval. This is in fact a simple and robust solution, but not useful for real applications, especially in the medical context. Therefore, we propose three different strategies for the pre-selection:</p><p>• When working with medical computer tomography data sets, we can pre-select by using Hounsfield units <ref type="bibr" target="#b9">[10]</ref>. Specific scalar ranges can be mapped to anatomical structures of the human body, e.g. skin, soft tissue and bone.</p><p>• Another possibility is to exploit data-driven approaches from semi-automatic transfer function design for direct volume rendering. For example, Kindlmann et al. use a method to locate boundaries in the data value space to support the user during selection of the transfer function <ref type="bibr" target="#b12">[13]</ref>. The output of such an algorithm could be used for our span-triangle generation.</p><p>• Finally, a simple but effective solution is to choose the exploration range, based on a maximally allowed memory consumption. First, we compute a "reduced" span-triangle, storing only the counters of potentially active cells, instead of the cell information itself. Then, we set the largest possible exploration range, shrinking it until memory consumption is low enough.</p><p>The span-triangle is created in a two-pass approach. In the first step we generate a temporary data structure. Afterwards, we build the final span-triangle. This approach is required to achieve an efficient balance between the speed and memory overhead during the generation: First, we use a fast radix-sort-based approach with O(n) time complexity for sorting the cell information by b and s <ref type="bibr" target="#b20">[21]</ref>. This requires the availability of a cell histogram in advance. Second, having the number and type of cells, we do not need any extra allocation of the cell information arrays and we have no performance overhead due to additional copy operations during the sorting process.</p><p>The temporary data structure is a single linked list of buckets. The bucketing is required to achieve robust allocation even on systems that are prone to memory fragmentation. Moreover, it allows us to minimize the memory overhead in the second pass. Remark that each iteration needs to access only two slices of the input volume simultaneously. Therefore, it is not required to load the complete volume into system memory. No further access to the data in disk memory is necessary.</p><p>In the second pass of the generation routine, we walk through the temporary data structure and sort the cell information into the spantriangle. Thereby, we follow again the radix-sort approach and use the available offset tables. There is one special case that we have to consider during this procedure: There may be specific cell types that do not occur in the input volume. Then, we need to adapt the corresponding offset value in the span-array to point to the same cell information as the next valid cell type element. Such a situation is illustrated in the cell info array for b = 1 in figure 4. As soon as we have finished the traversal of a temporary data bucket, we release it to reduce the memory overhead. Following such an strategy we need to keep only one data set at the same time in system memory.</p><p>Note that the temporary cell information has a memory overhead, compared to the final span-triangle. However, the employed bucketing for the temporary data structure allows us to swap buckets to disk memory, before the maximally allowed memory consumption is reached.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Isosurface Visualization and Update</head><p>To visualize the isosurface model for one specific isovalue we combine the extraction process from the span-triangle data structure with point-based rendering. The main steps of this procedure are:</p><p>1. Traversal of the span-triangle and extraction of the relevant cell information.</p><p>2. Conversion of cell information to a graphics-hardware compatible format, called vertex data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Transfer of vertex data to graphics memory and display.</head><p>For isosurface rendering, each vertex consists of a position and normal vector in the floating-point format. When working with highresolution data sets we have to find a reasonable trade-off between speed and quality. One important focus in our work is interactivity, so we have decided to approximate each cell by one point, located at the cell center. This is a known technique from mesh decimation and level-of-detail rendering and is incorporated also in other surface rendering systems <ref type="bibr" target="#b1">[2]</ref>. Points are rendered by projecting them onto the image plane with a surface splatting algorithm, using the normal vector for shading <ref type="bibr" target="#b5">[6]</ref>. Remember that cell information is stored in a compact format, packed to one 32-bit cell index and two 8-bit spherical normal angles. We calculate the point positions and normals on-the-fly during isosurface extraction. Having the initial dimensions of the input volume, we obtain the point coordinates (in volume index space) using efficient integer division and modulo operations. Let the variable index be the volume array index from a cell information array. Assume constants dim.x and dim.xy as the initial volume dimensions in x-direction and for a slice, respectively:</p><formula xml:id="formula_1">  x y z   =   index DIV dim.xy index MOD dim.xy DIV dim.x index MOD dim.xy MOD dim.x  <label>(1)</label></formula><p>Moreover, we require sine and cosine functions for the calculation of the normal vector. These are precalculated in small look-uptables with only 256 entries, because spherical angles are stored in eight bits.</p><p>The most important point for achieving interactive exploration is the incremental update of the isosurface model. On any change of the isovalue, the currently extracted model is updated without discarding cells that are still active. Due to the coherence of our data structure we transfer only the absolutely necessary information between system and graphics memory: First, we free parts of the vertex data, which correspond to cells that have became inactive after the isovalue change. Afterwards, we upload the data for all activated cells, as shown in <ref type="figure" target="#fig_9">figure 6</ref>. The exploration is realized using an incremental version of the presented isosurface extraction.</p><p>The following pseudo-code shows the update algorithm for an increasing isovalue υ &gt; υ + . The update for a decreasing isovalue is analogous: One remaining challenge that has to be considered is that the vertex data upload can be quite slow for large changes of the isovalue. To handle such cases, we have incorporated a progressive update scheme to achieve smooth interaction without blocking the application: In advance, we estimate the transfer rate from system to graphics memory. During exploration, we interrupt the upload process whenever necessary to guarantee a user-defined response time. We continue with the upload of the remaining vertex data on the next frame. We have observed that choosing a response time of approximately 125 ms is enough to minimize the delay between the extraction of the model and feedback to the user.</p><formula xml:id="formula_2">FOR b FROM 0 TO υ − υ</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">IMPLEMENTATION</head><p>Our implementation is based on the Julius software development framework for medical visualization <ref type="bibr" target="#b11">[12]</ref>. All steps of the presented visualization pipeline have been realized with reusable and extendible software components.</p><p>One challenge that we had to consider during the implementation of our data structure is the problem of allocating large continuous blocks of memory. Usually, the reason is memory fragmentation, occurring on PC machines with 32-bit addressing. The solution to this problem is a bucketing technique as we have utilized for the temporary data structure during the span-triangle generation. The cell information arrays are the major part in the span-triangle regarding memory consumption. Therefore, we divide them into buckets that can be allocated safely.</p><p>We exploit the following hardware-accelerated features for point rendering that are available in the OpenGL API: We use OpenGL point primitives GL POINTS for display. This results in low-quality splats, compared to solutions that are based e.g. on Gaussian reconstruction kernel functions <ref type="bibr" target="#b18">[19]</ref>. On the other hand, we can exploit full hardware-acceleration for transformation, lighting and rasterization. To solve the hole-filling problem in point rendering we use a similar approach as Baerentzen et al. <ref type="bibr" target="#b1">[2]</ref>: The size of each point in screen space is calculated on the graphics processor unit, using the GL ARB point parameter extension. Its screen size is attenuated, based on the distance to the viewer. Finally, to allocate vertex information directly in graphics memory we take advantage of vertex buffer objects (VBO), implemented via GL ARB vertex buffer object. Therefore, data does not need  to be transferred from system memory on each frame, effecting in rendering speed-up.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>To measure the performance and memory consumption during exploration, we have chosen a current desktop PC, equipped with an Intel Pentium IV 2.8 GHz processor and 2 GB of system memory. Our graphics card has been an ATI Radeon 9800 Pro with 256 MB of memory. <ref type="table" target="#tab_2">Table 1</ref> gives an overview of the data sets, used for the evaluation. We have chosen volumes mainly from medical application areas, covering sizes from 16 MB to 588 MB. The current implementation of our renderer allows only structured grids and isotropic data. Bonsai, Head and Leg have been aquired with a CTdevice. The Skull1 and Skull2 data sets are cone-beam scans. <ref type="table" target="#tab_4">Table  2</ref> shows the span-triangle statistics, including pre-processing times for the generation of the data structure and sizes in system memory. Head and Leg reveal an increased memory consumption, showing the significance of image noise and width of the exploration range for the size of the span-triangle. We achieve an average reduction in system memory of 61 %, compared to disk memory in table 1. The reason for this result is a combination of three concepts:</p><p>• Adaption of the exploration range to current application needs, instead of using the whole scalar range.</p><p>• Utilization of point data, allowing to sample the volume only on the surface of the current model.  The dominating part considering memory allocation are the CellInfo arrays. Therefore, we have not included the consumption of the raw span-triangle structure in table 2. The span-triangle contains two pointers in each base array element and one offset value per span array element. Furthermore, there are υ max − υ min + 1 base array elements. This effects in the following raw size with ∆e = υ max − υ min :</p><formula xml:id="formula_3">size raw = (∆e + 1)( ∆e 2 + 2)<label>(2)</label></formula><p>Each pointer and offset value requires four bytes in our implementation, which results in additional 0.1 MB to 28.1 MB of memory for our test data sets. Equation 2 shows that the memory consumption of the raw data structure (i.e. without cell information) is dependent quadratically on the width of the exploration range. The resulting restriction is tolerable for medical data sets, where scalar ranges are limited typically to 12 bits. Data sets with wide scalar intervals need to be reduced during pre-processing. The generation times from table 2 include both steps: creation of the temporary data structure and the span-triangle. The resulting pre-processing times are low enough for medical use of our visualization pipeline. <ref type="table" target="#tab_5">Table 3</ref> shows the number of active cells, the time for the initial extraction of the point data from the span-triangle and the rendering speed for selected isosurface models. We have asked a medical expert to select specific isovalues by using our technique in order to reveal characteristic anatomical structures. It is hard to compare directly our extraction times to previous results, because they use other grid types, perform additional cell triangulations or do not focus on iterative updates <ref type="bibr" target="#b24">[24,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b3">4]</ref>. Nevertheless, our results show that extracting the point model from the span-triangle instead of a volume grid results in a significant increase in performance, even though the reported measurements include the transfer to graphics memory. Rendering times have been measured for random rotations and 300 frames. The average rendering rate is 35.8 mio. of points per second for Bonsai and Head, and 60.1 mio. points per second for the large data sets. These values are depending on the size of the input volume and consequently on the splat sizes in screen space. The rendering performance shows great potential even for larger data sets than presented in this paper. Note that the range of variation for the measured values in table 3 is quite large. One reason is the varying number of buckets due to our bucketing techniques that we have implemented for the cell information arrays, as mentioned in section 4. Another possible reason is the internal resource management on the GPU. In the current implementation, each vertex element consumes 24 bytes in graphics memory (due to six floating point values). There is no additional overhead per cell for the spantriangle in system memory. Note that as soon as we fix the isovalue and release non-used information we gain additional reductions of memory from 1 % to 26 %, as compared to the values in table 1.</p><p>Finally, we provide measurements concerning the exploration speed with our progressive update scheme. <ref type="table" target="#tab_7">Table 4</ref> shows the exploration times for each data set. We define it as the time, required for the   update of the isosurface model when slicing from one extrema to the other within the exploration range in one single step. All measurements include also visual feedback. The values are dependent on the user-specified response time, here 125 ms. Typically, users explore in small isovalue step-sizes. Therefore, the exploration time gives a worst-case view for the delay concerning interactivity of an exploration system. Additionally, we have measured exploration times that are two orders of magnitude slower, when using an isovalue step-size of one. Combining this result with the fullextraction times in table 3 shows clearly the advantage of the progressive system and utilization of arbitrary large step-sizes. Finally, the results show that the performance is highly dependant on the direction of the exploration. The reason is that the vertex data upload to graphics memory requires more time than freeing of the data. The balance between both operations may vary, depending on the isovalue direction during update of the isosurface model.</p><p>Figures 7 to 10 on the last page of this paper show screenshots of selected data sets for characteristic isovalues. The Head data set is shown on the first page. We have observed that for large volumes the rendering of one point per cell results in adequate quality. In practice the projected cell in screen space is typically not much larger than the size of a pixel. Therefore, we have decided not to implement the support for multi-component isosurfaces or point-on-surface projection, as described in <ref type="bibr" target="#b5">[6]</ref>. In other cases, e.g. where the quality of this approach is not sufficient or the input volume covers a too large scalar value range, our exploration system can be used for an accelerated pre-selection of the isovalue: Our fast pre-processing and extraction times make possible to create a lower-quality point model in order to determine the desired isovalue. Afterwards, we can use the corresponding cell information from the span-triangle for accelerated generation of a higher-quality model, using other point-or even triangle-based techniques.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION AND FUTURE WORK</head><p>We have presented a novel span-triangle data structure, based on the span-space representation. We have shown that it can be used for interactive isosurface exploration of high-resolution volumes. Isosurface models can be extracted without significant delay during interaction by utilizing an incremental and progressive update scheme. We assure real-time point-based rendering with typically more than 20 frames-per-second by using a tight coupling between data representation and display, as well as by taking advantage of hardware acceleration. We can process volumes with approximately 600 MB of memory with a visualization pipeline that works on all levels of memory. Pre-processing times for high-resolution volumes are about 20 seconds and are therefore suitable for actual medical applications. Furthermore, our approach has the following benefits:</p><p>• Each cell information is stored only once in the isosurfacing data structure.</p><p>• We achieve high cache efficiency due to continuous low-level data structures.</p><p>• The utilization of data coherence makes possible to minimize the transfer between system and graphics memory.</p><p>• Isovalues can be changed with arbitrary large step-sizes within the exploration range.</p><p>• Isosurface models are represented compactly, because geometric primitives are placed only within active cells.</p><p>• The isosurface extraction algorithm has linear time complexity with respect to the output size and is therefore optimal.</p><p>Currently, we are extending our point-based renderer to support anisotropic input volumes via non-circular splats. Additionally, we are implementing out-of-core processing for the span-triangle data structure. The idea is to swap parts of the cell data to disk memory, when system memory consumption gets too high. Moreover, we plan to utilize more advanced features of graphics hardware and shader programming to improve the rendering quality. Examples are point sprites and vertex programs. Another interesting topic is the utilization of our data structure in other applications than isosurface exploration, e.g. animation and surface growth techniques.    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>October 10 -</head><label>10</label><figDesc>15, Austin, Texas, USA IEEE Visualization 2004 0-7803-8788-0/04/$20.00 ©2004 IEEE</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Our visualization pipeline, supporting three levels of memory: disk, system and graphics.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 4illustrates the structure of the span-triangle. The layout of the base and span arrays forms a triangle in the span-space.The specific structure of the span-triangle enables the possibility to access active cells in a very efficient way. The isosurface extraction reduces to a set of linear traversal operations, working in the cell information arrays. Let Base, Span and CellInfo represent the data arrays of the span-triangle. Furthermore, assume that Base[b].Span[s] returns the offset value to the cell information for a based cell minimum of b and cell span of s. Let Base[b].CellInfo.Max be the maximum index for the CellInfo array, corresponding to the total number of cells for b. The following pseudo-code shows the extraction routine for an isovalue υ: Discretized span-space. The small rectangles represent cell data. The grey region marks the cells that are active for the current isovalue.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Sample span-triangle data structure for an exploration range of [υ min , υ max ] = [0, 4] and isovalue υ = 2. Active cells are marked as filled circles, inactive cells as empty circles. Only array elements that are colored grey need to be accessed. FOR b FROM 0 TO υ − υ min DO s := υ − υ min − b; FOR i FROM Base[b].Span[s] TO Base[b].CellInfo.Max DO Add cell from Base[b].CellInfo[i] to isosurface; END END</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>The left image shows a too low, the right image a too high isovalue. Information content of both visualizations is rather low.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>3 .</head><label>3</label><figDesc>Each bucket contains the same information per cell as the final span-triangle and additionally the b and s indices. The temporary data structure is built by a cell-by-cell traversal of the input volume, similar to the Marching Cubes approach: 1. Identification of potential isosurface cells, based on the predefined exploration range: A cell is considered as potentially active, if there is an overlap between the cell interval and exploration interval, i.e. [x min , x max ] ∩ [υ min , υ max ] = / 0. If this condition fails, the cell is skipped. 2. Computation of the cell information, i.e. cell index and cell normal: The normal vector is calculated with the central difference operator [14]. Then, it is normalized and converted into spherical coordinates, as mentioned in subsection 3.1. Computation of offsets b and s for the span arrays: The offsets are computed from the cell histogram. This approach is equivalent to the calculation of the counter and offset tables in the radix-sort algorithm. Note that for cases where [υ min , υ max ] ⊂ [r min , r max ], we have to crop b and s to the exploration range, before we can use them for the indexing of the span-triangle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>min DO s := υ − υ min − b; s + := υ + − υ min − b; Free vertex data from Base[b].Span[s] to Base[b].Span[s + -1]; END FOR b FROM υ − υ min + 1 TO υ + − υ min DO s + := υ + − υ min − b; Upload vertex data, starting from Base[b].Span[s + ]; END</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 6 :</head><label>6</label><figDesc>Incremental update of a sample span-triangle for an isovalue, changing from υ = 2 to υ + = 4. Empty circles represent point data that has to be freed from graphics memory or remains inactive. Filled circles indicate cells that have to be uploaded to graphics memory or are still active. Notice the grey background color in this illustration, showing elements of the span-triangle that have to be really accessed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 7 :</head><label>7</label><figDesc>Isosurface exploration of the bonsai tree data set for isovalues υ = 40, 78 and 193.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 8 :</head><label>8</label><figDesc>Human dry skull volume for isovalue υ = 1698 (left and center image) and υ = 2048 (right image).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 9 :</head><label>9</label><figDesc>Leg data set, showing the skin (υ = 2714), subcutaneous vessels (υ = 3053) and bone (υ = 3165).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 10 :</head><label>10</label><figDesc>Large model for isovalues υ = 1900 (left, center) and υ = 2230 (right). The images show the skull bone, teeth and dental roots.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>table, containing indices to the appropriate cell information. Furthermore, an item in the offset table corresponds to cells with a certain cell span s = x max − x min .</figDesc><table /><note>• During generation of the span-triangle, all potentially active cells are collected and stored in the appropriate cell informa- tion array, sorted by the cell span s. Therefore, we realize a cell sorting in the span-space by b and s. The cell information contains two items: The cell identifier is a four bytes integer value, equal to the index of the first corner sam- ple of each cell in the input volume. The cell normal is represented by a normal vector, belonging to the center of each cell. We store each normal in spherical coordinates quantized to two byte values, i.e. the azimuth and polar angles. This results in a compact rep- resentation, requiring only six bytes of memory per cell.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>•</head><label></label><figDesc>Compact cell information, requiring only six bytes.</figDesc><table><row><cell>Data set</cell><cell>Resolution</cell><cell cols="2">Scalar bits Disk memory</cell></row><row><cell>Bonsai</cell><cell>256 × 256 × 256</cell><cell>8 / 8</cell><cell>16 MB</cell></row><row><cell>Head</cell><cell>320 × 404 × 230</cell><cell>12 / 16</cell><cell>54 MB</cell></row><row><cell>Skull1</cell><cell>512 × 512 × 512</cell><cell>12 / 16</cell><cell>256 MB</cell></row><row><cell>Leg</cell><cell>599 × 599 × 500</cell><cell>12 / 16</cell><cell>342 MB</cell></row><row><cell>Skull2</cell><cell>700 × 700 × 600</cell><cell>12 / 16</cell><cell>588 MB</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table /><note>Used volume data sets. The left scalar bit values show used bits, the right values are allocated bits. Disk memory is based on allocated bits.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 2 :</head><label>2</label><figDesc>Generation times and memory sizes of the span-triangle for manually pre-selected exploration ranges. All timings include construction of the temporary and final data structure without volume import. The memory values are based only on pure cell information.</figDesc><table><row><cell cols="4">Data set Isovalue Active cells First extraction</cell><cell>FPS</cell></row><row><cell>Bonsai</cell><cell>40</cell><cell>563273</cell><cell>41 ms</cell><cell>91.6</cell></row><row><cell></cell><cell>78</cell><cell>215523</cell><cell>17 ms</cell><cell>163.7</cell></row><row><cell></cell><cell>193</cell><cell>122052</cell><cell>15 ms</cell><cell>247.1</cell></row><row><cell>Head</cell><cell>1077</cell><cell>541303</cell><cell>64 ms</cell><cell>87.5</cell></row><row><cell></cell><cell>1730</cell><cell>452676</cell><cell>104 ms</cell><cell>85.8</cell></row><row><cell></cell><cell>2814</cell><cell>77091</cell><cell>120 ms</cell><cell>148.6</cell></row><row><cell>Skull1</cell><cell>1698</cell><cell>2912153</cell><cell>220 ms</cell><cell>23.0</cell></row><row><cell></cell><cell>2048</cell><cell>1470773</cell><cell>131 ms</cell><cell>42.0</cell></row><row><cell>Leg</cell><cell>2714</cell><cell>2703212</cell><cell>201 ms</cell><cell>24.5</cell></row><row><cell></cell><cell>3053</cell><cell>4844748</cell><cell>828 ms</cell><cell>7.1</cell></row><row><cell></cell><cell>3165</cell><cell>2851516</cell><cell>238 ms</cell><cell>22.9</cell></row><row><cell>Skull2</cell><cell>1900</cell><cell>3829972</cell><cell>286 ms</cell><cell>18.0</cell></row><row><cell></cell><cell>2230</cell><cell>612395</cell><cell>66 ms</cell><cell>93.6</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 3 :</head><label>3</label><figDesc>Number of active cells, time for the initial extraction of point data including transfer to graphics memory, and rendering speed in frames-per-second (FPS). The number of active cells corresponds to the number of points during rendering.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>Data set υ min → υ max υ max → υ min</figDesc><table><row><cell>Bonsai</cell><cell>&lt; 0.1 s</cell><cell>0.1 s</cell></row><row><cell>Head</cell><cell>0.2 s</cell><cell>0.2 s</cell></row><row><cell>Skull1</cell><cell>0.3 s</cell><cell>0.9 s</cell></row><row><cell>Leg</cell><cell>1.3 s</cell><cell>0.6 s</cell></row><row><cell>Skull2</cell><cell>0.2 s</cell><cell>2.6 s</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 :</head><label>4</label><figDesc>Exploration times, using progressive update. The left column contains timings for increasing isovalues, the right column for decreasing isovalues.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0" />
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Point set surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Alexa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Behr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cohen-Or</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fleishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="page" from="21" to="28" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hardware accelerated point rendering of isosurfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Baerentzen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename><surname>Christensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of WSCG</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="41" to="48" />
			<date type="published" when="2003-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Fast isocontouring for improved interactivity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chandrajit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valerio</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VVS</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page">39</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">ISOSLIDER: A system for interactive exploration of isosurfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jatin</forename><surname>Chhugani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sudhir</forename><surname>Vishwanath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Subodh</forename><surname>Kuma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VisSym 2003 Joint Eurographics-IEEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2003-05" />
			<biblScope unit="page" from="259" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Speeding up isosurface extraction using interval trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Puppo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="158" to="170" />
			<date type="published" when="1997-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Iso-splatting: A point-based alternative to isosurface visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">S</forename><surname>Co</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th Pacific Conference on Computer Graphics and Applications (PG&apos;03)</title>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page">325</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Span filtering: An efficient scheme for volume visualization of large finite element models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Gallagher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;91</title>
		<editor>G. M. Nielson and L. Rosenblum</editor>
		<meeting>IEEE Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991-10" />
			<biblScope unit="page" from="68" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Advanced interactive visualization for CFD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Giles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Systems in Education</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="51" to="62" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Point sample rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Grossman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Dally</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics Rendering Workshop&apos;98</title>
		<imprint>
			<date type="published" when="1998-06" />
			<biblScope unit="page" from="181" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Computerized transverse axial scanning (tomography). 1. description of system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">N</forename><surname>Hounsfield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The British Journal of Radiology BJR</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">552</biblScope>
			<biblScope unit="page" from="1016" to="1022" />
			<date type="published" when="1973-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Automatic isosurface propagation using an extrema graph and sorted boundary cell lists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takayuki</forename><surname>Itoh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koji</forename><surname>Koyamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="319" to="327" />
			<date type="published" when="1995" />
			<publisher>December</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An open software framework for medical applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Keeve</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Jansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zbigniew</forename><surname>Bartosz Von Rymon-Lipinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nils</forename><surname>Burgielski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lutz</forename><surname>Hanssen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Ritter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lievin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Surgery Simulation and Soft Tissue Modeling IS4TM</title>
		<imprint>
			<date type="published" when="2003-06" />
			<biblScope unit="page" from="302" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Semi-automatic generation of transfer functions for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">W</forename><surname>Durkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">The use of points as a display primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Turner</forename><surname>Whitted</surname></persName>
		</author>
		<idno>TR 85-022</idno>
		<imprint>
			<date type="published" when="1985" />
		</imprint>
		<respStmt>
			<orgName>University of North Carolina at Chapel Hill</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A near optimal isosurface extraction algorithm using the span space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="73" to="84" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH&apos;87</title>
		<meeting>SIGGRAPH&apos;87</meeting>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A practical evaluation of popular volume rendering algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Meißner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dirk</forename><surname>Bartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2000 IEEE symposium on Volume visualization</title>
		<meeting>the 2000 IEEE symposium on Volume visualization</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="81" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Surfels: Surface elements as rendering primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanspeter</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeroen</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Proceedings</title>
		<editor>Kurt Akeley</editor>
		<imprint>
			<biblScope unit="page" from="335" to="342" />
			<date type="published" when="2000" />
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">QSplat: A multiresolution point rendering system for large meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Szymon</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Proceedings</title>
		<editor>Kurt Akeley</editor>
		<imprint>
			<biblScope unit="page" from="343" to="352" />
			<date type="published" when="2000" />
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Sedgewick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms in C++. Series in Computer Science</title>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarden</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Isosurfacing in span space with utmost efficiency (ISSUE</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m">IEEE Visualization &apos;96</title>
		<editor>Roni Yagel and Gregory M. Nielson</editor>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="287" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Sweeping simplices: A fast iso-surface extraction algorithm for unstructured grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="143" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A case study of isosurface extraction algorithm performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phil</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chuck</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd Joint Eurographics-IEEE TCCG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2000-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Octrees for faster isosurface generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Jeroen van Baar, and Markus Gross. Surface splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanspeter</forename><surname>Pfister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Proceedings</title>
		<editor>Eugene Fiume</editor>
		<imprint>
			<biblScope unit="page" from="371" to="378" />
			<date type="published" when="2001" />
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
