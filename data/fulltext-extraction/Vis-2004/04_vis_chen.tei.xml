<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Hardware-Accelerated Adaptive EWA Volume Splatting</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Chen</surname></persName>
							<email>chenwei@cad.zju.edu.cn</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liu</forename><surname>Ren</surname></persName>
							<email>liuren@cs.cmu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Zwicker</surname></persName>
							<email>matthias@graphics.lcs.mit.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>USA</roleName><forename type="first">Hanspeter</forename><surname>Mit</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">§</forename><surname>Pfister</surname></persName>
							<email>pfister@merl.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>USA</roleName><surname>Merl</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Carnegie Mellon University</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Hardware-Accelerated Adaptive EWA Volume Splatting</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.1 [Computer Graphics]: Hardware Architecture-Graphics Processor; I.3.3 [Computer Graphics]: Picture/Image Generation-Display algorithms Direct volume rendering</term>
					<term>volume splatting</term>
					<term>EWA filter</term>
					<term>hardware acceleration</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a hardware-accelerated adaptive EWA (elliptical weighted average) volume splatting algorithm. EWA splatting combines a Gaussian reconstruction kernel with a low-pass image filter for high image quality without aliasing artifacts or excessive blurring. We introduce a novel adaptive filtering scheme to reduce the computational cost of EWA splatting. We show how this algorithm can be efficiently implemented on modern graphics processing units (GPUs). Our implementation includes interactive classification and fast lighting. To accelerate the rendering we store splat geometry and 3D volume data locally in GPU memory. We present results for several rectilinear volume datasets that demonstrate the high image quality and interactive rendering speed of our method.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Splatting is a popular algorithm for direct volume rendering that was first proposed by Westover <ref type="bibr" target="#b29">[30]</ref>. The splatting process reconstructs a continuous function from the sampled scalar field using 3D reconstruction kernels associated with each scalar value. For volume rendering, the continuous function is mapped to the screen as a superposition of pre-integrated 3D kernels, which are called 2D footprints. Recently, Zwicker and colleagues <ref type="bibr" target="#b34">[35]</ref> proposed a high quality splatting algorithm called EWA volume splatting for aliasing-free splatting. However, achieving interactive high quality EWA splatting is still difficult due to the computational complexity of EWA filtering and insufficient commodity hardware support. These two issues limit the applicability of high quality EWA volume splatting.</p><p>In this paper, we present two major contributions addressing these issues: First, we introduce adaptive EWA splatting, an adaptive filtering scheme to reduce the cost of EWA computation that still achieves high quality rendering with antialiasing. The adaptive EWA splatting algorithm can be incorporated seamlessly into previous splatting systems. Second, we exploit programmable graphics hardware to achieve interactive EWA volume splatting. We present a hardware-accelerated EWA volume splatting framework that allows interactive high quality volume rendering, interactive transfer function design, and fast two-pass shading.</p><p>Our approach stores both the proxy geometry (i.e., the textured quads representing the splats) and the 3D volume data locally in graphics hardware for efficient access during interactive rendering. This leads to two advantages over previous approaches. First, parallel processing in graphics hardware can be fully exploited with retained-mode splatting. Second, the memory bandwidth bottleneck between CPU and GPU occurring in immediate-mode algorithms is completely avoided, facilitating interactive volume splatting. However, the memory requirements to store the proxy geometry can be very large due to the large number of voxels. We solve this problem by employing proxy geometry compression and a fast decompression procedure based on the regularity of regular or rectilinear volumes, which are commonly used in volume rendering.</p><p>The remainder of this paper is organized as follows: We first discuss related work in Section 2. We then briefly review the EWA volume splatting scheme and introduce adaptive EWA volume splatting in Section 3. Next, we present our hardware-accelerated adaptive EWA volume splatting framework in Section 4. In Section 5 we compare our approach with previous ones and present results for several rectilinear volume data sets that demonstrate the high image quality and interactive rendering speed of our method. Finally, we conclude our work in Section 6.</p><p>October 10-15, Austin, Texas, USA IEEE Visualization 2004 0-7803-8788-0/04/$20.00 ©2004 IEEE</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Hardware-accelerated volume rendering algorithms for rectilinear grids include ray casting <ref type="bibr" target="#b24">[25]</ref>, texture slicing <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b2">3]</ref>, shear-warp and shear-image rendering <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b30">31]</ref>, and splatting. For a detailed overview see <ref type="bibr" target="#b19">[20]</ref>. In this paper we focus on volume splatting, which offers the most flexibility in terms of volume grids (including non-rectilinear <ref type="bibr" target="#b11">[11]</ref>) and mixing with point-sampled geometry <ref type="bibr" target="#b34">[35]</ref>. Splatting is also attractive because of its efficiency, which derives from the use of pre-integrated reconstruction kernels.</p><p>Since Westover's original work <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>, most volume splatting algorithms focus on improving the image quality, including raydriven perspective splatting <ref type="bibr" target="#b16">[17]</ref>, edge preservation <ref type="bibr" target="#b6">[6]</ref>, eliminating popping and blur <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>, and image-aligned splatting <ref type="bibr" target="#b15">[16]</ref>.</p><p>The aliasing problem in volume splatting has first been addressed by Swan and colleagues <ref type="bibr" target="#b26">[27]</ref> and Mueller and colleagues <ref type="bibr" target="#b14">[15]</ref>. They used a distance-dependent stretch of the footprints to make them act as low-pass filters. Zwicker and colleagues <ref type="bibr" target="#b33">[34]</ref> developed EWA splatting along similar lines to the work of Heckbert <ref type="bibr" target="#b5">[5]</ref>, who introduced EWA filtering to avoid aliasing of surface textures. They extended his framework to represent and render texture functions on irregularly point-sampled surfaces <ref type="bibr" target="#b32">[33]</ref>, and to volume splatting <ref type="bibr" target="#b34">[35]</ref>.</p><p>Point-based geometry has been successfully rendered on the GPU <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b3">4]</ref>. Ren and colleagues <ref type="bibr" target="#b22">[23]</ref> derived an object space formulation of the EWA surface splats and described its efficient implementation on graphics hardware. For each point in objectspace, quadrilateral that is texture-mapped with a Gaussian texture is deformed to result in the correct screen-space EWA splat after projection. The work presented in this paper builds on that algorithm and extends it to volume splatting.</p><p>Other techniques were proposed to improve splatting performance, such as opacity-based culling <ref type="bibr" target="#b15">[16]</ref>, fast splat rasterization <ref type="bibr" target="#b7">[7]</ref>, hierarchical splatting <ref type="bibr" target="#b9">[9]</ref>, object and image space coherence <ref type="bibr" target="#b8">[8]</ref>, shell splatting <ref type="bibr" target="#b0">[1]</ref>, 3D adjacency data structure <ref type="bibr" target="#b18">[19]</ref> and post-convolved splatting <ref type="bibr" target="#b17">[18]</ref>. Lippert and Gross <ref type="bibr" target="#b10">[10]</ref> introduced a splatting algorithm that directly uses a wavelet representation of the volume data. Welsh and Mueller <ref type="bibr" target="#b27">[28]</ref> used a hierarchical and frequency sensitive splatting algorithm based on wavelet transformations and pre-computed splat primitives, which accomplishes viewdependent and transfer function-dependent splatting. None of these methods have been implemented completely on the GPU.</p><p>Some GPU-accelerated splatting methods <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b0">1]</ref> use texture mapping hardware for the projection and scan-conversion of footprints. In more recent work, Xue and Crawfis <ref type="bibr" target="#b31">[32]</ref> compared several hardware-accelerated splatting algorithms, including an efficient point-convolution method for X-ray projections. They did not address anti-aliasing and reported lower performance numbers than our adaptive EWA splatting implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ADAPTIVE EWA VOLUME SPLATTING</head><p>Our adaptive splatting approach is based on EWA volume splatting introduced by Zwicker and colleagues <ref type="bibr" target="#b34">[35]</ref>, hence we briefly review this technique in Section 3.1 and refer the reader to the original publication for more details. We then present adaptive EWA volume splatting in Section 3.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">EWA Volume Splatting</head><p>Volume splatting interprets volume data as a set of particles that are absorbing and emitting light. To render the data, line integrals are precomputed across each particle separately, resulting in 2D footprint functions or splats in the image plane. The splats are composited back-to-front to compute the final image. Particles are represented by 3D reconstruction kernels, and a common choice is 3D elliptical Gaussian kernels. We use the notation G V (t − p) to represent an elliptical Gaussian kernel centered at a 3D point p with a 3 × 3 variance matrix V:</p><formula xml:id="formula_0">G V (t − p) = 1 (2π) 3/2 |V| 1/2 e − 1 2 (t−p) T V −1 (t−p) (1)</formula><p>Although Gaussian kernels have infinite support in theory, they are truncated to a given cutoff radius r in practice. I.e., they are evaluated only in the range</p><formula xml:id="formula_1">(t − p) T V −1 (t − p) ≤ r 2 ,<label>(2)</label></formula><p>where usually 1 ≤ r ≤ 3. Further, the choice of Gaussians as 3D kernels guarantees a closed-form footprint function after integration along viewing rays. However, the change of sampling rate due to the perspective transformation in the splatting process usually results in aliasing artifacts. EWA volume splatting solves this problem by convolving the footprint function with a 2D low-pass filter, which yields an aliasing-free footprint function called the EWA volume resampling filter. Zwicker and colleagues <ref type="bibr" target="#b34">[35]</ref> derived a closed-form representation of the EWA volume resampling filter that is based on the following two assumptions: First, the low-pass filter takes the form of a 2D Gaussian. Second, the nonlinear perspective transformation that maps reconstruction kernels to image space is linearly approximated using its Jacobian.</p><p>To summarize the derivation of the EWA volume resampling filter we introduce some notation. The rotational part of the viewing transformation that maps object space to camera space coordinates is given by a 3 × 3 matrix W. We denote camera space coordinates by u = (u 0 , u 1 , u 2 ). The origin of camera space u = 0 is at the center of projection and the image plane is the plane u 2 = 1. Camera space coordinates of a voxel k are given by u k . Image space coordinates are denoted by x, the image space position of voxel k is x k . Further, the Jacobian of the perspective projection at a point u k in camera space to image space is a 3 × 3 matrix J u k (see <ref type="bibr" target="#b34">[35]</ref>):</p><formula xml:id="formula_2">J u k =     1 u k 2 0 − u k 0 u 2 k 2 0 1 u k 2 − u k 1 u 2 k 2 u k 0 ||(u k 0 ,u k 1 ,u k 2 )|| u k 1 ||(u k 0 ,u k 1 ,u k 2 )|| u k 2 ||(u k 0 ,u k 1 ,u k 2 )||     . (3)</formula><p>Given the 3 × 3 variance matrix V k of a reconstruction kernel k in object space, its transformation to image space is</p><formula xml:id="formula_3">V k = J u k WV k W T J u k</formula><p>T . The EWA volume resampling filter ρ k (x) is now obtained by integrating the reconstruction kernel in image space along viewing rays and convolving it with the Gaussian low-pass filter. As derived by Zwicker and colleagues <ref type="bibr" target="#b34">[35]</ref>, this yields the 2D footprint function</p><formula xml:id="formula_4">ρ k (x) = 1 2π|J −1 u k ||W −1 ||V k + V h | 1 2 e − 1 2 (x−x k ) T M k (x−x k ) ,<label>(4)</label></formula><p>where we use the notation</p><formula xml:id="formula_5">M k = (V k + V h ) −1 .<label>(5)</label></formula><p>Here, V h is the 2×2 variance matrix of the Gaussian low-pass filter, which is usually chosen to be the identity matrix. The 2×2 variance matrixV k is obtained by skipping the third row and column of V k 1 .</p><formula xml:id="formula_6">Volume EWA volume resampling filter 0 r 1 r ⊗ h V k u Convolution k x k VŴ k V''\</formula><p>Figure 2: EWA volume splatting process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Adaptive EWA Filtering</head><p>Even though the EWA volume resampling filter avoids aliasing artifacts because of its built-in low-pass filter, its evaluation is computationally quite expensive as is obvious from Equation 4. The motivation of adaptive EWA volume splatting is to simplify the evaluation in an adaptive way but still accomplish high quality, aliasingfree splatting.</p><p>Adaptive EWA volume splatting is based on the following observations: When the volume data is far away from the view point, the sampling rate of diverging viewing rays falls below the sampling rate of the volume grid. To avoid aliasing artifacts, the EWA volume resampling filter has to rely on strong prefiltering to get rid of high frequency components in the volume data. In this case, the shape and the size of the EWA resampling filter is dominated by the low-pass filter. Hence, approximating the EWA resampling filter with a low-pass filter alone will avoid the expensive EWA computation without degrading the rendering quality much. In the other extreme case when the volume data is very close to the view point, the sampling rate of diverging viewing rays is higher than that of the original volume grid. The low-pass filter, though not a dominant component in the resampling filter, can degrade the rendering quality with unnecessary blurring. Approximating the EWA resampling filter with the dominant reconstruction filter (i.e., without the convolution with the low-pass filter) not only reduces the computation cost but also yields better rendering quality. However, in the transition between the two extremes, neither approximation can avoid aliasing artifacts without time-consuming EWA computation. As a consequence, in our adaptive EWA splatting approach we classify each volume particle into one of the above three cases during rendering. This allows more efficient computation of footprint functions whereas preserving high image quality of EWA splatting ( <ref type="figure">Figure 3)</ref>.</p><p>We now present a distance-dependent classification criteria for adaptive EWA volume splatting based on a careful analysis of the EWA volume resampling filter (Equation 4). The 2 × 2 variance matrix M k (x) (Equation 5) determines the final footprint's size and shape, which can be described mathematically as an ellipse. Because W, V k and V h are the same for all voxels in one view, the footprint of each voxel depends only on the Jacobian J u k . Suppose that V k is symmetric and the cutoff radius (see Equation 2) of the reconstruction and the low-pass kernels are r k and r h respectively, thenV k is symmetric and the minor and major radius of the ellipse can be derived from Equation 4:</p><formula xml:id="formula_7">r 0 = r k 2 u 2 k 2 + r h 2 , r 1 = r k 2 (u 2 k 0 +u 2 k 1 +u 2 k 2 ) u 4 k 2 + r h 2<label>(6)</label></formula><p>Not surprisingly, the depth of a voxel in camera space u k 2 <ref type="figure">(Figure 3)</ref> largely determines the ellipse radii as can be seen in Equation 6. Remember that the distance between the viewpoint and the image plane is 1.0 (see section 3). It can be shown that u k 0 /u k 2 and u k 1 /u k 2 range from − tan( f ov/2) to tan( f ov/2) given f ov is the view angle. Hence the maximum value of (u 2</p><formula xml:id="formula_8">k 0 + u 2 k 1 + u 2 k 2 )/u 2 k 2</formula><p>is (1.0 + 2.0 × tan( f ov/2) 2 ). Therefore, a conservative distance dependent adaptive criteria can be determined by considering u k 2 only. To compute r 0 , r h can be discarded given that r k /u k 2 is much larger than r h . In this case, r h can be skipped for the computation of r 1 , too. On the other hand, if r k × (1.0 + 2.0 × tan( f ov/2) 2 )/u k 2 is much smaller than r h , r 1 can be approximated by r h and so does r 0 . From the above analysis we derive the following distancedependent adaptive EWA filtering formula 2 with two controlling parameters c min and c max :</p><formula xml:id="formula_9">   H k (x) = x T •V −1 k • x, i f u k 2 &lt; r k r h × c min H k (x) = x T • V −1 h • x, i f u k 2 &gt; r k r h × c max H k (x) = x • (V k + V h ) −1 • x, otherwise   <label>(7)</label></formula><p>Based on the above criteria, adaptive EWA volume splatting determines the appropriate resampling filter to be used for efficient interactive rendering as illustrated in <ref type="figure">Figure 3</ref>. Note that the parameters c min and c max can be adjusted to achieve the desired balance between efficiency and quality. For example, by slightly increasing c min and decreasing c max , adaptive EWA splatting becomes less conservative without affecting the image quality much.  <ref type="figure">Figure 3</ref>: The distance-dependent adaptive EWA volume splatting scheme. The low-pass filter or the reconstruction filter can be chosen to replace EWA resampling filter in the extreme cases.</p><p>Adaptive EWA volume splatting can work with regular, rectilinear and irregular volume datasets. It can also be incorporated seamlessly in previous splatting systems. However, the downside of the approach is the additional computation required for the classification criteria of each footprint function. To reduce this cost, the volume data can be organized in patches or blocks in a spatial data structure. The filter criteria (Equation 7) is then conservatively evaluated on a per block basis and the same filter is applied to all voxels in a patch or block. Heuristic and cheap metrics can be used to speedup the calculation on-the-fly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">HARDWARE-ACCELERATED FRAMEWORK</head><p>In this section we describe how we apply our adaptive EWA volume splatting approach in a hardware-accelerated splatting framework for the rendering of regular or rectilinear volume datasets. Our framework is based on an axis-aligned volume splatting scheme <ref type="bibr" target="#b29">[30]</ref> with three traversal orders along the three major axes <ref type="figure">(Figure 4</ref>). During rendering, the voxels are processed in slices perpendicular to the major axis that is most parallel to the viewing Then back-to-front or front-toback composition of each slice in an accumulation buffer yields the final results. We call this composition method slice-by-slice composition. Alternatively, composition can be done directly without using intermediate buffer as shown in <ref type="figure">Figure 4</ref>. We call this simple composition method splat-every-sample composition.</p><p>Our hardware accelerated splatting pipeline features several innovations: First, it includes a hardware implementation of the adaptive EWA scheme, which is described in Section 4.1. This provides high image quality with better rendering performance than full EWA splatting. Further, the pipeline employs a retained-mode scheme that relies on proxy geometry compression as described in Section 4.2. This avoids the memory bandwidth bottleneck between CPU and GPU, which occurs in immediate mode algorithms. Finally, our pipeline includes a technique for interactive classification of voxels, which we describe in Section 4.3, and a fast two-pass shading method introduced in Section 4.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Adaptive Splat Computation</head><p>We embed adaptive EWA volume splatting in our framework using a patch-based classification scheme. In this scheme, the quads (i.e., voxels) of each slice are grouped into uniform rectangular patches. During splatting, we compute the camera space coordinate u k2 of each of the four corner voxels of the patch on-the-fly and evaluate the criteria given in Equation 7. If all four vertices meet the magnification criterion, the reconstruction filter is used as the footprint function. If all four vertices meet the minification criterion, the low-pass filter is used as the footprint function. Otherwise, the full EWA resampling filter is applied. Following the analysis in Section 3, we choose c min and c max in Equation 7 as 0.3 and 2.0×(1.0+2.0×tan( f ov/2) 2 ) respectively for all examples shown in the paper.</p><p>Our splatting process relies on proxy geometry, i.e., textured quads, as rendering primitives that represent the footprint functions. The texture on each quad encodes a 2D unit Gaussian function. Note that the geometry of the quad has to be deformed to stretch and scale the unit Gaussian texture, such that its projection to the image plane matches the footprint function. This is achieved using programmable vertex shaders as described by Ren and colleagues <ref type="bibr" target="#b22">[23]</ref>.</p><p>In particular, they explained how to derive the geometry of the quad by analyzing the EWA resampling filter (Equation 4). In our adaptive scheme, we implemented three different vertex shaders for each of the cases in Equation 7 and chose the appropriate one based on our per-patch evaluation described above. During the rasterization of the proxy quads, the filter weight, the color and the illumination components of each pixel are computed based on voxel attributes in the volume texture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Proxy Geometry Compression</head><p>In our approach, volume data and its proxy geometry are stored locally in graphics hardware. This configuration avoids heavy bandwidth consumption between CPU and GPU and allows interactive rendering in programmable graphics hardware. However, a naive implementation has huge memory requirements. Let us take a 256 3 volume data set as an example. The scalar density value of each voxel usually takes one byte and the gradient vector takes three bytes with each of its three components quantized to 8 bits. Hence, we pack the attributes of each voxel into four bytes and save the 256 3 volume data as a volume texture of 64M bytes.</p><p>On the other hand, we use a quad (4 vertices) as proxy geometry for each voxel, so the whole volume data requires 64 million vertices. Each vertex contains its position (3 floating-point numbers, 12 bytes), volume texture coordinates (3 floating-point numbers, 12 bytes) and texture coordinates for splatting with the Gaussian texture (2 floating-point numbers, 8 bytes), resulting in a total of 32 bytes. Moreover, to specify the connectivity of a quad (i.e., 2 triangles) from 4 vertices, additional 6 vertex indices are needed. Each index is stored as a two or four byte integer, depending on the total number of vertices. With the three traversal orders for axis-aligned splatting, we store the indices for each quad three times. Using two bytes for each index, the proxy geometry of a voxel takes 164 bytes, hence the whole dataset requires as much as 2240M bytes of memory. Unfortunately, commodity graphics hardware currently provides a maximum of 256M local memory.</p><p>Facing these huge memory requirements, previous splatting approaches resorted to immediate-mode rendering, sending each quad separately to the rendering pipeline. This solves the memory problem at the cost of huge bandwidth consumption between CPU and GPU. In contrast, our approach employs a proxy geometry compression scheme that allows to store the volume data locally in graphics memory. Fast decompression is performed on-the-fly in the vertex shader.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Efficient Compression</head><p>We exploit the regularity of rectilinear or regular volumes to reduce the size of proxy geometry. First, the position of each vertex can be omitted because it can be calculated from the volume texture coordinates. Second, one slice of proxy geometry can be shared by all slices of the volume because the difference of the volume texture Interactive classification Patch <ref type="figure">Figure 6</ref>: Auxiliary data structure for interactive classification. To reduce the size of the index buffers, the size of each patch is chosen to contain no more than 65,535 vertices so that two instead of four bytes can be used as an index.</p><p>coordinates between consecutive slices is constant. This one slice of proxy geometry is called the proxy geometry template. Third, within a slice the volume texture coordinate along the traversal direction does not change. Hence, only two texture coordinates are needed. Moving from one slice to the next along the traversal direction simply requires to update the constant texture coordinate. We maintain three proxy geometry templates for the three traversal orders, hence for the 256 3 volume dataset only 768k instead of 192M vertices are needed. However, for each vertex we still need to store two components of the volume texture coordinate and the Gaussian texture coordinates, totally 16 bytes per vertex.</p><p>Efficient encoding of vertex attributes is performed as follows: The two volume texture coordinates are denoted by t x and t y . They are stored as integers of the form t x = m x × 256 + i x , where m x = t x /256 and i x = t x mod 256, and analogous for t y . Although i x and i y require 8 bits, m x and m y are stored using 7 bits only. This allows slices as large as 2 15 × 2 15 voxels. Two additional bits f x and f y per vertex are used to specify the coordinates of the 2D Gaussian texture applied to the quad. As described in detail in <ref type="bibr" target="#b22">[23]</ref>, f x and f y are either zero or one. Hence, each vertex of the proxy geometry can be packed into 32 bits ( <ref type="figure">Figure 5</ref>).</p><p>With these compression techniques, a 256 3 volume dataset requires only 12M (256 × 256 × 4 × 4 × 3) instead of 2048M memory for the vertices, which corresponds to a compression ratio of 171:1 compared to the naive approach. Further, because for most volume datasets only 5% − 20% non-transparent voxels need to be rendered, the vertex indices will not require more than 115.2M bytes in most cases. As a result, the volume texture data and the packed proxy geometry information can be pre-loaded in the local memory of graphics hardware entirely for interactive rendering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Fast Decompression</head><p>Recovering the volume texture coordinates and Gaussian texture coordinates from the packed representation is the first step in the processing of each vertex. We extract m x , m y , f x and f y from the packed representation using a small lookup table (our Direct3D implementation stores this lookup table in constant registers and accesses it through an address register in the vertex shader[12]). The decompression, the recovery of different kinds of texture coordinates, and the further calculation of voxel center positions require only a few operations that can be performed efficiently with programmable vertex shaders in graphics hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Interactive Classification</head><p>Interactive classification is critical for interactive volume exploration. Post-classification schemes, where all the voxels are rendered and classification is performed on-the-fly, are not efficient because no culling of transparent voxels can be performed. Unnecessary rendering of transparent voxels can be avoided using pre-classification. Here, only non-transparent voxels are rendered, which typically account only for 5% − 20% of all voxels. However, in our retained-mode hardware implementation preclassification requires collecting the indices of the vertices for those non-transparent voxels and loading the index buffer to the graphics hardware whenever the transfer function is changed. Because the construction of the index buffer is time-consuming and loading it to graphics memory involves a significant amount of data transfer between CPU and GPU, changes of the transfer function cannot be visualized at interactive rates.</p><p>We solve this problem by constructing an auxiliary data structure as illustrated in <ref type="figure">Figure 6</ref>. The basic idea follows the list-based splatting algorithm proposed by Mueller and colleagues <ref type="bibr" target="#b15">[16]</ref>. We first bucket sort the voxels based on their density values. In contrast to <ref type="bibr" target="#b15">[16]</ref>, who built iso-value lists for the whole volume, we compute them for each slice of each traversal order. The indices of the corresponding proxy geometry are sorted accordingly and rearranged into iso-value index buffers. The index buffers, which are pre-loaded in graphics hardware before interactive rendering, span 256 intervals of iso-value voxels. Practically, the index buffers are placed in video memory or AGP memory, depending on their sizes. Putting them in AGP memory does not affect the performance as shown in our video demonstration. Pointers to the start of each iso-value array are maintained in main memory. When the transfer function is interactively changed, appropriate pointers are collected and merged quickly to send visible voxels to the rendering pipeline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Fast Two-Pass Shading</head><p>Per-fragment lighting has to be applied for splat illumination because current graphics hardware allows volume texture access only in the fragment, but not in the vertex processing stage. However, this makes per-fragment processing expensive, since it involves volume texture access, voxel classification, and lighting computation for each pixel per splat. Each splat may cover between 2 × 2 and as many as 40 × 40 pixels, depending on the viewpoint.</p><p>We observe that pixels covered by one splat can share intermediate results, such as access to the volume texture, classification (via lookup table), and illumination computations. We propose a two-pass shading scheme to avoid redundant computation. In the first pass, voxels of a slice are projected as single-pixel points as shown in <ref type="figure">Figure 7a</ref>. The results of volume texture access, voxel classification, and illumination for each (point) splat are stored in a render target (also known as P-buffer). These intermediate results are then reused during lookup in the second pass, in which the full splat with per-fragment lighting and EWA filtering is projected (see <ref type="figure">Figure 7b</ref>). The final composition of all splats from each slice is shown in <ref type="figure">Figure 7c</ref>. In practice, this two-pass shading improves rendering performance by 5% − 10% though the additional rendering pass increases the number of context switches. a) Pass one for some slice b) Pass two for the same slice c) Final result <ref type="figure">Figure 7</ref>: Two-pass shading for a test dataset (32 3 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>We have implemented our algorithm with DirectX 9.  The adaptive EWA volume resampling filter is implemented using three different vertex shaders. The main efficiency improvement of adaptive EWA filtering over full EWA resampling arises from the simplified computation in case of minification or magnification. <ref type="table" target="#tab_3">Table 1</ref> reports the numbers of vertex shader instructions required to implement the different filters for regular and rectilinear datasets. Note that we also maintain two different implementations for regular and rectilinear datasets, respectively.</p><p>We first demonstrate the efficiency and the quality of adaptive EWA volume splatting by rendering a 512 × 512 × 3 checkerboard dataset with all voxels classified as non-transparent. In <ref type="figure" target="#fig_1">Figure 8a</ref> and <ref type="figure" target="#fig_1">Figure 8b</ref> we compare the image quality of splatting with the reconstruction filter only with that of splatting with the EWA volume resampling filter. We also compare the image quality of splatting with the low-pass filter only with that of splatting with the EWA volume resampling filter in <ref type="figure" target="#fig_1">Figure 8c</ref> and <ref type="figure" target="#fig_1">Figure 8d</ref>.</p><p>These comparisons show that splatting with improper filters, though more efficient as shown in <ref type="table" target="#tab_5">Table 2</ref>, can result in aliasing artifacts and holes. Splatting with the EWA volume resampling filter corrects those errors, however at a high computational effort. Adaptive EWA splatting yields an image quality comparable to that of full EWA filtering, as shown in <ref type="figure" target="#fig_1">Figure 8e</ref>-h, but at reduced computational cost, as reported in <ref type="table" target="#tab_5">Table 2</ref>   <ref type="figure">Figure 1</ref> shows adaptive EWA splatting of a number of volume datasets. Based on our hardware-accelerated splatting framework, we compare the performance of the adaptive EWA splatting scheme with that of the previous EWA volume splatting method in <ref type="table">Table 3</ref>. The performance improvement achieved by adaptive EWA filtering is about 10% to 20%.</p><p>We compare our retained-mode rendering approach with proxy geometry compression to a naive immediate mode implementation, where each splat is sent to the graphics pipeline separately. The results of the comparison are reported in <ref type="table" target="#tab_7">Table 4</ref> for various data sets using EWA volume splatting. The results clearly indicate that the CPU-to-GPU memory bandwidth is a bottleneck in this scenario, and our retained mode rendering approach leads to significant performance improvements.  We also compare the efficiency of pre-classification with listbased pre-classification. <ref type="table" target="#tab_9">Table 5</ref> shows the average classification time for various data sets. When the transfer function is unchanged, the rendering speed of list-based pre-classification is a little slower than pre-classification. However, our list-based pre-classification achieves much better performance during interactive transfer function changes as shown in <ref type="table" target="#tab_9">Table 5</ref>  In <ref type="figure" target="#fig_2">Figure 9</ref>, we show a series of splatting results of the UNC head dataset with different transfer functions. We compare splatevery-sample composition <ref type="figure" target="#fig_2">(Figure 9a</ref>) with our slice-by-slice (or sheet buffer) splatting <ref type="figure" target="#fig_2">(Figure 9b</ref>) <ref type="bibr" target="#b29">[30]</ref>. The images generated by splat-every-sample composition are darker than those of slice-based composition because of incorrect visibility determination. On the other hand, the splat-every-sample composition achieves better performance because it avoids per-slice additions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data</head><p>It is well known that slice-based compositing introduces popping artifacts when the slice direction suddenly changes. Mueller and Crawfis <ref type="bibr" target="#b12">[13]</ref> proposed to use an image-aligned kernel-slicing and traversal order. But their method has high computational cost and its GPU implementation needs to be investigated in the future. Note that our algorithm and almost all of the GPU implementation is independent of the compositing method that is used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>We have presented a hardware-accelerated adaptive EWA splatting approach for direct volume rendering. Adaptive EWA volume splatting yields high quality aliasing-free images at a smaller computation cost than full EWA splatting. We embedded the adaptive EWA splatting scheme in a hardware-accelerated volume splatting framework whose key features include efficient proxy geometry compression and fast decompression, support for interactive transfer function design, and fast two-pass shading.</p><p>In the future, we want to make our current hardware-accelerated framework more efficient. Several researchers demonstrate that EWA point splatting with OpenGL point primitives can significantly improve the performance by reducing the size of the proxy geometry and processing time for each splat <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>. We plan to use a similar technique for adaptive EWA volume splatting. We also want to apply our adaptive EWA splatting scheme to irregular volume datasets in a hardware-accelerated framework. Finally, we are interested in developing a hardware-accelerated adaptive EWA volume splatting framework with image-aligned traversal order to avoid popping artifacts and implement post-classification.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 8 :</head><label>8</label><figDesc>Adaptive EWA splatting for checkerboard dataset with resolution of 512 × 512 × 3.Figure (a-d)show that EWA filter is necessary.Figure (e-h) show adaptive EWA splatting leads to visually indistinguishable results. (a) Splat-every-sample compositing mode. From left to right: 0.94 fps, 3.34 fps, 4.04 fps. (b) List-based pre-classification / pre-classification modes. From left to right: 0.80 / 0.81 fps, 3.00 / 3.08 fps, 3.45 / 3.53 fps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 9 :</head><label>9</label><figDesc>Comparison among splat-every-sample compositing, list-based pre-classification and pre-classification modes. From left to right: 2905251, 702768, 585682 splats.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 1 :</head><label>1</label><figDesc>Numbers of vertex shader instructions for different filters.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 2 :</head><label>2</label><figDesc>Performance comparison in fps for checkerboard data set.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 :</head><label>4</label><figDesc>Performance comparison in fps between immediate and retained rendering modes for adaptive EWA volume splatting.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>Table 5 :</head><label>5</label><figDesc>Performance comparison in fps between list-based preclassification and traditional pre-classification modes.</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Throughout the paper, a matrix with a hat symbol denotes the result of skipping its third row and column.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">For the nonsymmetric case, similar adaptive criteria can be derived.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0" />
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Shellsplatting: Interactive rendering of anisotropic volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">P</forename><surname>Botha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">H</forename><surname>Post</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2003 Joint Eurographics -IEEE TCVG Symposium on Visualization</title>
		<meeting>2003 Joint Eurographics -IEEE TCVG Symposium on Visualization</meeting>
		<imprint>
			<date type="published" when="2003-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">High-quality point-based rendering on modern GPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 Pacific Graphics Conference</title>
		<meeting>the 2003 Pacific Graphics Conference</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="335" to="343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">High-quality pre-integrated volume rendering using hardware-accelerated pixel shading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 ACM SIGGRAPH/Eurographics Workshop on Graphics hardware</title>
		<meeting>the 2001 ACM SIGGRAPH/Eurographics Workshop on Graphics hardware</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient screen space approach for hardware accelerated surfel rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Guennebaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Paulin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the</title>
		<meeting>the</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m">Vision, Modeling and Visualization Conference</title>
		<meeting><address><addrLine>Munich, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11-21" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Fundamentals of texture mapping and image warping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989-06" />
		</imprint>
		<respStmt>
			<orgName>University of California at Berkeley, Department of Electrical Engineering and Computer Science</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Edge preservation in volume rendering using splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stredney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 IEEE symposium on Volume visualization</title>
		<meeting>the 1998 IEEE symposium on Volume visualization<address><addrLine>NC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="63" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fastsplats: Optimized splatting on rectilinear grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2000 IEEE Visualization Conference</title>
		<meeting>the 2000 IEEE Visualization Conference<address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-10" />
			<biblScope unit="page" from="219" to="227" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On enhancing the speed of splatting with indexing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Ihm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1995 IEEE Visualization Conference</title>
		<meeting>the 1995 IEEE Visualization Conference</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="69" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Hierarchical splatting: A progressive refinement algorithm for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIG-GRAPH 1991</title>
		<meeting>ACM SIG-GRAPH 1991<address><addrLine>Las Vegas, NV, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-08" />
			<biblScope unit="page" from="285" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast wavelet based volume rendering by accumulation of transparent texture maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lippert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurographics 1995</title>
		<meeting>Eurographics 1995</meeting>
		<imprint>
			<date type="published" when="1995-09" />
			<biblScope unit="page" from="431" to="443" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Splatting of non rectilinear volumes through stochastic resampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="156" to="170" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Eliminating popping artifacts in sheet buffer-based splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 IEEE Visualization Conference</title>
		<meeting>the 1998 IEEE Visualization Conference<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="239" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Splatting without the blur</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moeller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1999 IEEE Visualization Conference</title>
		<meeting>the 1999 IEEE Visualization Conference<address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-10" />
			<biblScope unit="page" from="363" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Splatting errors and antialiasing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moeller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="178" to="191" />
			<date type="published" when="1998-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">High-quality splatting on rectilinear grids with efficient culling of occluded voxels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="116" to="134" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast perspective volume rendering with splatting by utilizing a ray driven approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1996 IEEE Visualization Conference</title>
		<meeting>the 1996 IEEE Visualization Conference<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="65" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Post-convolved splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Neophytou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the symposium on Data visualisation 2003</title>
		<meeting>the symposium on Data visualisation 2003</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="223" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Accelerated splatting using a 3d adjacency data structure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Orchard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mueller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Graphics Interface</title>
		<meeting>Graphics Interface<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-09" />
			<biblScope unit="page" from="191" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">The Visualization Handbook, chapter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<editor>Rendering. Chris Johnson and Chuck Hansen</editor>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The volumepro real-time ray-casting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hardenbergh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Knittel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Seiler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIG-GRAPH 1999</title>
		<meeting>ACM SIG-GRAPH 1999</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Texture splats for 3d scalar and vector field visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1993 IEEE Visualization Conference</title>
		<meeting>the 1993 IEEE Visualization Conference</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="261" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Object-space ewa surface splatting: A hardware accelerated approach to high quality point rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurographics</title>
		<meeting>Eurographics</meeting>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="page" from="461" to="470" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Interactive volume on standard pc graphics hardware using multi-textures and multi-stage rasterization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rezk-Salama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIG-GRAPH/EUROGRAPHICS workshop on Graphics hardware</title>
		<meeting>the ACM SIG-GRAPH/EUROGRAPHICS workshop on Graphics hardware</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Smart hardware-accelerated volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Roettger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Guthe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics/IEEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Qsplat: A multiresolution point rendering system for large meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2000</title>
		<meeting>ACM SIGGRAPH 2000<address><addrLine>Phoenix, AZ, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-07" />
			<biblScope unit="page" from="343" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An anti-aliasing technique for splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shareef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1997 IEEE Visualization Conference</title>
		<meeting>the 1997 IEEE Visualization Conference<address><addrLine>Phoenix, AZ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="197" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A frequency-sensitive point hierarchy for images and volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Welsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mueller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 IEEE Visualization Conference</title>
		<meeting>the 2003 IEEE Visualization Conference<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Interactive volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Chapel Hill Workshop on Volume Visualization</title>
		<editor>C. Upson</editor>
		<meeting>the Chapel Hill Workshop on Volume Visualization<address><addrLine>Chapel Hill, NC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-05" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Footprint evaluation for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 1990</title>
		<meeting>ACM SIGGRAPH 1990</meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Shear-image order ray casting volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Bhatia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Lauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Seiler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Interactive 3D Graphics</title>
		<meeting><address><addrLine>Monterey, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-06" />
			<biblScope unit="page" from="152" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Efficient splatting using modern graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graphics Tools</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="21" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Surface splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2001</title>
		<meeting>ACM SIGGRAPH 2001<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-07" />
			<biblScope unit="page" from="371" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Ewa splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="223" to="238" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Ewa volume splatting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="page" from="29" to="36" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
