<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Centroidal Voronoi tessellation based algorithms for vector fields visualization and segmentation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qiang</forename><surname>Du</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics</orgName>
								<orgName type="institution">Pennsylvania State University</orgName>
								<address>
									<addrLine>University Park</addrLine>
									<postCode>16802</postCode>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoqiang</forename><surname>Wang</surname></persName>
							<email>wang@math.psu.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Mathematics</orgName>
								<orgName type="institution">Pennsylvania State University</orgName>
								<address>
									<addrLine>University Park</addrLine>
									<postCode>16802</postCode>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Centroidal Voronoi tessellation based algorithms for vector fields visualization and segmentation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: I.4.6 [Computing Methodologies]: Image Processing and Computer Vision-Segmentation; I.3.3 [Computing Methodologies]: Computer Graphics-Picture/Image Generation Flow Visualization</term>
					<term>Vector Field</term>
					<term>Simplification</term>
					<term>Segmentation</term>
					<term>Clustering</term>
					<term>Centroidal Voronoi tessellation</term>
				</keywords>
			</textClass>
			<abstract>
				<p>A new method for the simplification and the visualization of vector fields is presented based on the notion of Centroidal Voronoi tessellations (CVT&apos;s). A CVT is a special Voronoi tessellation for which the generators of the Voronoi regions in the tessellation are also the centers of mass (or means) with respect to a prescribed density. A distance function in both the spatial and vector spaces is introduced to measure the similarity of the spatially distributed vector fields. Based on such a distance, vector fields are naturally clustered and their simplified representations are obtained. Our method combines simple geometric intuitions with the rigorously established optimality properties of the CVTs. It is simple to describe, easy to understand and implement. Numerical examples are also provided to illustrate the effectiveness and competitiveness of the CVT-based vector simplification and visualization methodology.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Large and complex data sets are being generated at an enormously fast speed with the advent of modern computing technology. Effective strategies for data mining that include the representation, simplification, characterization and manipulation of data become increasingly important.</p><p>The clustering and segmentation of spatially distributed data are important tools for data mining and information retrieval. The format of the spatially distributed data may vary, ranging from color intensity for images to various statistics for geographical regions. In abstract terms, the spatially distributed data set may be viewed as vector fields defined in a spatial domain. It has always been a computational challenge to visualize large sets of vector fields including those collected from various scientific and engineering disciplines. The vector fields we have in mind here include not only Many vector data visualization methods have been developed in the past. They may be roughly divided into three kinds. The first kind of method uses arrows to help visualize the vector field, among which the most ubiquitous method for flow visualization uses hedgehogs. Although sub-sampling can be used to reduce the arrow count, it may not provide the best arrow distribution of the dataset. A recently proposed approach <ref type="bibr" target="#b16">[Telea and vanWijk 1999]</ref> is to cluster the dataset by a hierarchical clustering tree using a bottom-up approach. In the beginning, every single point forms a cluster, then cluster-merging takes place according to a measure of the difference of their positions and orientations. However, this kind of method requires the input of many parameters so that the results may be very sensitive to the different choices.</p><p>Another kind of method is to display vector fields by texture synthesis. Line integral convolution <ref type="bibr" target="#b0">[Cabral and Leedom 1993;</ref><ref type="bibr" target="#b13">Shen et al. 1996]</ref> and spot noise <ref type="bibr" target="#b1">[deLeeuw and vanWijk 1995]</ref> are two well designed approaches in illustrating the direction of vector fields. Line integral convolution stretches a given image along the paths directed by a given vector fields to generate textures. Spot noise creates noise like texture by distributing many replicas of a shape. Texture based algorithms are very effective ways to display vector fields. But it can not display the directions of vector fields and it is very difficult to compress the vector field in an efficient way.</p><p>The third kind of method gaining popularity in recent years is the PDE based methods. It is natural to think that streamlines, streamtubes or flow ribbons can be used to express the flow once they can be conveniently calculated. In a recent work <ref type="bibr" target="#b17">[Turk and Banks 1996]</ref>, energy minimization is used to distribute the streamlines. Another example is the work in <ref type="bibr" target="#b9">[Garcke et al. 2001]</ref> where PDE based phase field model is used to generate the continuous clustering of vector fields. The PDE based method has also been studied by many authors in the context of image segmentation and image inpainting. In general, the PDE based method has many great advantages such as the simple description of geometric quantities and the easy handling of topological events, both are important issues in the clustering of spatial statistics. Nevertheless, the good performance of the PDE based method often comes with much more time consuming computation and the results are often affected by the different scaling parameters used in the models.</p><p>Here, we propose a clustering/segmentation method for the vector fields based on the notion of Centroidal Voronoi tessellations (CVT's) <ref type="bibr" target="#b6">[Du et al. 1999]</ref>. CVTs are optimal tessellations of a given domain and they also give rise to a global approach to cluster a domain into Voronoi regions.</p><p>Roughly speaking, for the spatially distributed vector fields of interests to us here, they can be thought as some vector bundles (or fibers) defined in a spatial domain. However, it is more natural and more convenient to treat such vector bundles and the spatial domain together as elements of a higher dimensional manifold equipped with a suitably defined distance (metric). Then, one may obtain, from the higher dimensional distance, a centroidal Voronoi tessellation that defines the clusters of the spatial domain. Then a lifting operation can be applied to obtain the vector representations of the October 10-15, Austin, Texas, USA IEEE Visualization 2004 0-7803-8788-0/04/$20.00 ©2004 IEEE vector fields distributed in each spatial clusters.</p><p>Our approach belongs to the class of methods to visualize vector field by arrows. For a given number of arrows, this method gives an ideal distribution of the arrows. The optimization properties of CVT's ensures that the results of our method are superior from a global perspective. This method can be easily generalized to some sophisticate algorithms. Meanwhile, the method is very fast, and easy to implement.</p><p>In section 2, the basic concept of CVTs is described. New vector field clustering algorithms are presented in section 3. Applications and numerical examples are given in section 4, together with some discussion on the performance of the algorithms. Some conclusions are made in section 5. Some technical details concerning the algorithms for CVTs and the mathematical background are given in the appendix (section 6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Centroidal Voronoi Tessellations</head><p>Given an open set Ω ⊆ R N , the set</p><formula xml:id="formula_0">{V i } k i=1 is called a tessellation of Ω if V i ∩V j = / 0 for i = j and k i=1 V i = Ω where V i and Ω denote the closures of V i and Ω. Let d denote a distance defined on R N . Given points {z i } k i=1 belonging to Ω, the Voronoi region (or cluster) V i corresponding to the point z i is defined by V i = {x ∈ Ω|d(x, z i ) &lt; d(x, z j ) for j = 1, ..., k, j = i} . The points {z i } k i=1 are called generators. The set { V i } k i=1</formula><p>is a Voronoi tessellation or Voronoi diagram of Ω, and each V i is referred to as the Voronoi region corresponding to z i . In <ref type="bibr">[Du and Wang 2004a]</ref>, the above definitions have been generalized to allow the use of a one-sided distance function, that is, the Voronoi region</p><formula xml:id="formula_1">V i is defined by V i = {x ∈ Ω|d x (x, z i ) &lt; d x (x, z j ) for j = 1, ..., k, j = i} where d x (x, y)</formula><p>is a distance function defined according to some local Riemannian metric at the point x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Given a region</head><formula xml:id="formula_2">V ⊆ R N , a one-sided distance function d x (x, •), the mass centroid z * of V</formula><p>is a unique point in R N to minimize the energy defined by the summation of distance square:</p><formula xml:id="formula_3">E(z,V ) = V d 2 x (x, z) dx .<label>(1)</label></formula><p>The conventional mass center can be defined as the minimizer of</p><formula xml:id="formula_4">E(•,V ) with d 2 x (x, y) = d 2 (x, y)ρ(x)</formula><p>where ρ is the density function and d is the standard Euclidean distance. In case ρ = 1 is a constant density, then z * is just the mean of each cluster, i.e.</p><formula xml:id="formula_5">z * = 1 |V | V x dx .<label>(2)</label></formula><p>Thus given k points {z i } k i=1 , we have the Voronoi tessellation formed by the Voronoi regions</p><formula xml:id="formula_6">{ V i } k i=1</formula><p>, and given k regions</p><formula xml:id="formula_7">{ V i } k i=1 , we have their mass centroids {z * i } k i=1 .</formula><p>A Voronoi tessellation is a Centroidal Voronoi tessellation if the generators are themselves the mass centroids of the respective Voronoi regions.</p><p>For any set of k points {z i } k i=1 and a tessellation made of k regions {V i } k i=1 , we define the total energy by</p><formula xml:id="formula_8">E({z i } k i=1 , {V i } k i=1 ) = k ∑ i=1 E(z i ,V i ) = k ∑ i=1 V i d 2 x (x, z i ) dx .<label>(3)</label></formula><p>The CVTs enjoy an optimality property that can be rigorous proved (see <ref type="bibr">[Du and Wang 2004a]</ref>):</p><p>Theorem. The minimizer of the total energy (3) leads to a CVT.</p><p>For more detailed discussions, we refer to <ref type="bibr" target="#b6">[Du et al. 1999;</ref><ref type="bibr" target="#b2">Du and Gunzburger 2002;</ref><ref type="bibr" target="#b7">Du et al. 2003;</ref><ref type="bibr" target="#b3">Du and Wang 2002]</ref>. If the distance is truly a one-sided distance function, then the corresponding CVT should in principle be called an anisotropic CVT as defined in <ref type="bibr">[Du and Wang 2004a]</ref>.</p><p>CVTs are very special and elegant tessellations. In figure 1, a 2D example using the standard Euclidean distance and the constant density is shown. Two algorithms (Algorithms 1 and 2) for generating CVTs are discussed in the appendix along with suggestions for their improvement. Based these algorithms, new vector field clustering algorithms can be developed using a proper definition of the distance between vectors in a flow field.</p><p>3 Vector Fields Visualization</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Vector fields clustering</head><p>First some notations are given here. Let a vector field V be defined on a domain Ω ⊆ R N , such that for every point</p><formula xml:id="formula_9">x ∈ Ω, V (x) ∈ R M .</formula><p>We use | • | to denote the standard vector norm. Viewing (x,V (x)) as a point in a higher dimensional space R N+M , we can just think that the region of each cluster, a subset of Ω, is the projection of a subset defined in</p><formula xml:id="formula_10">R N+M back to R N . Let a point p, denoted as (x p , y p ) where y p = V (x p )</formula><p>, be called degenerate if y p = 0. As nearby degenerate points can be grouped into the same cluster as their closest non-degenerate points, all points may be viewed as non-degenerate without loss of generality.</p><p>Given a positive scaling constant w, define the (one-sided) distance between p = (x p , y p ) and m = (x m , y m ) as</p><formula xml:id="formula_11">d p (p, m) = |y p | 2 − |y p | y p • y m + w|y p | 2 |x p − x m | 2 .<label>(4)</label></formula><p>(For more detailed discussions of d p , see the appendix).</p><p>Then, given a set of k generators {m i } k i=1 under the constraint |y m i | = 1, the Voronoi regions { C i } corresponding to the point {m i } are defined by</p><formula xml:id="formula_12">C i = {x p ∈ Ω|d p (p, m i ) &lt; d p (p, m j ) for j = 1, ..., k, j = i} . (5) It is obvious that C i ∩ C j = / 0 if i = j. For some p that satisfying d p (p, m i ) = d p (p, m j ) for two distinct generators m i = m j , we then assign p to the Voronoi region C i if |x p − x m i | &lt; |x p − x m j |.</formula><p>Now, some discussions on the cluster centers are in order. Given a cluster C, the centroid m * is obtained as the minimizer of the energy defined in (1). Using the definition of d p , we have</p><formula xml:id="formula_13">E(m,C) = C |y p | 2 − |y p |y p • y m + w|y p | 2 |x p − x m | 2 dx p .</formula><p>By minimizing this energy, the following two algorithms come from the Algorithm 1 and Algorithm 2.</p><p>Algorithm 3: Vector field CVT clustering. Given a positive integer k, a weight w and a domain Ω, choose any k points</p><formula xml:id="formula_14">{m i = (x i , y i )} k i=1 and determine the associated Voronoi clustering {C i } k i=1 . 1. For each cluster C i , i = 1, .</formula><p>. . , k, determine the centroids by</p><formula xml:id="formula_15">x i = C i |V (x)| 2 x dx C i |V (x)| 2 dx , y i = C i |V (x)|V (x) dx p | C i |V (x)|V (x) dx| .<label>(6)</label></formula><p>2. Determine the Voronoi clusters associated with</p><formula xml:id="formula_16">{(x i , y i )} k i=1 .</formula><p>3. If the Voronoi clusters corresponding to</p><formula xml:id="formula_17">{(x i , y i )} k i=1 and {(x i , y i )} k i=1</formula><p>are the same, or some tolerance condition is met, exit the loop; otherwise, set (</p><formula xml:id="formula_18">x i , y i ) = (x i , y i ) for i = 1, . . . k,</formula><p>determine the new Voronoi clustering and return to Step 1.</p><p>Algorithm 4: Vector field CVT clustering. Given an integer k, a weight w and a domain Ω, choose any k points</p><formula xml:id="formula_19">{m i = (x i , y i )} k i=1 and determine the associated Voronoi clustering {C i } k i=1 . 1. For every point p = (x, y), (a) evaluate all the distances d p (p, m i ) for i = 1, . . . , k; (b) For the shortest distance d p (p, m t ),</formula><p>i. move the point x from old group s into group t; ii. replace the centroid m s and m t by the means of the newly modified clusters V s and V t respectively via the formula (6). 2. Exit when some tolerance is met; otherwise, go to Step 1.</p><p>The tolerance choices are similar to that in Algorithms 1 and 2 given in the appendix. A derivation of (6) is also given there.</p><p>To end this section, we note that the above clustering relies on the input of the number of clusters k. The practical choice of k will be discussed later.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Non-uniformly distributed fields clustering</head><p>Non-uniformly distributed vector field is a vector field whose vector density is non-uniformly distributed. In the real world, we can always met this kind of vector fields. For example, the flow in the atmosphere is non-uniformly distributed because the densities of the air are different at different heights. Another example is the crowd out from a cinema where every people is associated with a vector and the density of this vector field is very high at the door or inside of the cinema, and it comes to be thinner and thinner at the place further and further from the door.</p><p>Algorithms 3 and 4 can be generalized to the non-uniformly distributed vector fields clustering with a density distribution ρ(x p ). The energy for a cluster C with a centroid m is given by</p><formula xml:id="formula_20">E(m,C) = C ρ(x p )d 2 x p (x p , m) dx p = C ρ(x p )(|y p | 2 − |y p |y p • y m + w|y p | 2 |x p − x m | 2 ) dx p .</formula><p>Algorithm 5: Non-uniformly distributed vector field CVT clustering. Given a density distribution ρ, a positive integer k, a weight w and a domain Ω, choose any k points</p><formula xml:id="formula_21">{m i = (x i , y i )} k i=1</formula><p>and determine the associated Voronoi clustering {C i } k i=1 . 1. For each cluster C i , i = 1, . . . , k, determine the centroids by</p><formula xml:id="formula_22">x i = C i ρ(x)|V (x)| 2 x dx C i ρ(x)|V (x)| 2 dx , y i = C i ρ(x)|V (x)|V (x) dx p | C i ρ(x)|V (x)|V (x) dx| .<label>(7)</label></formula><p>2. Determine the Voronoi clusters associated with</p><formula xml:id="formula_23">{(x i , y i )} k i=1 .</formula><p>3. If the Voronoi clusterings corresponding to</p><formula xml:id="formula_24">{(x i , y i )} k i=1 and {(x i , y i )} k i=1</formula><p>are the same, or any tolerance condition met, exit the loop; otherwise, set (x i , y i ) = (x i , y i ) for i = 1, . . . k, find the new Voronoi clustering and return to Step 1.</p><p>Algorithm 4 can also be easily generalized to non-uniformly distributed vector fields. We omit the details.</p><p>The examples of non-uniformly distributed vector fields clustering is given in section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Visualization strategies</head><p>The algorithms for the vector field clustering are given in section 3.1 and section 3.2, with each cluster represented by a unit vector y m at point x m . Some visualization strategies can be taken into the visualization process.</p><p>First, we can set the length of the representation vector as the average of the lengths of all the vector in the same Voronoi region C i . For instance, we can take</p><formula xml:id="formula_25">L y i = 1 |C i | C i |V (x)| dx ,<label>(8)</label></formula><p>or</p><formula xml:id="formula_26">L y i = 1 |C i | ( C i |V (x)| 2 dx) 1/2 .<label>(9)</label></formula><p>And define the new representation vector</p><formula xml:id="formula_27">z i = L y i y i .</formula><p>For a non-uniformly distributed vector field, after the clustering, we can also set the length of the representation vector as</p><formula xml:id="formula_28">L y i = ( C i ρ(x)|V (x)| 2 dx) 1/2 C i ρ(x) dx ,<label>(10)</label></formula><p>which is a generalized form of (9).</p><p>Second, the color of the representation vector can be used to represent the vector variance or the energy of each cluster. The vector variance is defined as</p><formula xml:id="formula_29">Var(C i ) = C i |y p | 2 − |y p |y p • y m i dx p |C i | ,<label>(11)</label></formula><p>or, for non-uniformly distributed vector field,</p><formula xml:id="formula_30">Var(C i ) = C i (|y p | 2 − |y p |y p • y m i )ρ(x) dx p C i ρ(x) dx .<label>(12)</label></formula><p>Alternatively, to display the vector field, instead of plain arrows, curved arrows may also be used which are computed along streamlines from every cluster's center x i , with their length and the color determined in the same way as for the plain arrows.</p><p>Finally, all the above strategies may be combined for different problems. Some illustrations will be given in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Applications and Numerical Examples</head><p>This section gives some 2D and 3D vector field visualization examples. We use some 2D examples to illustrate the parameters selection, such as the cluster number k and weight w, and the performance of our algorithms. A 3D example is given in the end.</p><p>Though our theory is applicable to much more general settings, as an illustration, the two dimensional vector fields to which we apply the CVT based vector fields clustering algorithms mostly distributed in a two dimensional square Ω = [−1, 1] 2 ⊆ R 2 , and the three dimensional vector fields are distributed in a three dimensional square Ω = [−1, 1] 3 ⊆ R 3 . <ref type="figure" target="#fig_2">Figure 3</ref> shows the vector CVT for the vector field with a center vortex depicted in the <ref type="figure" target="#fig_1">Figure 2</ref> on a 300 × 300 Cartesian mesh. 6 clusters are used. The red color indicates higher variance while the blue color indicates less variance. Another example is given in <ref type="figure" target="#fig_3">figure 4</ref> where a vector field with non-uniform lengths is clustered into 15 clusters.   The performance of the algorithm in general depends on the choice of the parameters used in our algorithms, including the number of clusters k and the weight parameter w, and the initial distribution of the generators. For our numerical examples, we have found that the uniformly sampled and randomly distributed initial generators both lead to satisfactory convergent results.</p><p>As for the parameter tuning, it is obvious that the number of clusters k is very important in this process. If we further take 30 clusters for the vector field in figure 4, the result is showed in figure 5. <ref type="figure">Figure 5</ref>: Clustering of the figure in <ref type="figure" target="#fig_3">Fig.4</ref> into 30 clusters.</p><p>In general, the larger the k is, the more details the simplified graph shows, accompanied by more computations involved and smaller compression ratios. On the other hand, if the k is too small, important details of the original field may be lost. Thus, automatically choosing a good k is very important. Obviously, for a good k, the vector at the centroid should well represent the flow directions in each cluster, that is, the angle θ between each vector V (x) and its centroid vector y m should be small. We thus choose the following quantity to measure the goodness of k.</p><formula xml:id="formula_31">G(k) = 1 |Ω| Ω V (x) • y m (x) |V (x)| dx<label>(13)</label></formula><p>where y m (x) is the vector centroid of the cluster x belongs. It is obvious that |G(k)| ≤ 1, and the closer G(k) is to to 1, the more details the simplified graph gives.  Based on our experience, it is better to choose k such that G(k) is above 0.98 and the slope of G(k) is getting small. The right picture of figure 6 shows the graph of G(k) for a vector field (left picture) having vortices. <ref type="figure" target="#fig_5">Figure 7</ref> shows the visualization of this vector field with 24 clusters and 60 clusters with G(24) = 0.9667 and G(60) = 0.9861 respectively with the 60 clusters giving a clear presentation of the vortices. In practice, an adaptive estimations of k may also be developed. Relevant discussions in the context of CVT clusterings have been studied in <ref type="bibr">[Du and Wang 2004b]</ref>. We now discuss the choice of the weight w in the distance formula (note that w = 1/L 2 is sufficient for most applications, where L is the size/diameter of the domain). A smaller w decreases the weight in space, making the simplified graph much more likely to distribute the clusters along the flow directions represented by the vector field. However, for some fields, a smaller w may result in very irregular or even disconnected clusters, thus, it would then be more appropriate to choose a larger w to regularize the clusters.  For a more practical example, the result of our method applied to a fluid vector field is given in <ref type="figure" target="#fig_8">Figure 9</ref>. The field is obtained from the simulation of the deformation of two bubbles in a Newtonian fluid <ref type="bibr" target="#b8">[Du et al. 2005]</ref>. Clearly, an efficient visualization of the fluid field is obtained by our method which reveals the main characteristics of the flow field. We now turn to some non-uniformly distributed vector fields. <ref type="figure" target="#fig_0">Figure 10</ref> shows a vector fields of many ants moving through a channel of different widths with the same speed. The right graph is the simplified presentation with 36 vectors. <ref type="figure" target="#fig_0">Figure 10</ref> reveals only the vector fields, but not the distribution of the ants. As the ants move into the narrower region, they get more crowded. Assuming that they move with a constant speed, the density ρ is then inversely proportional to the width of the channel. Thus, the distribution of arrows like that in figure 10 does not provide a realistic view of the ants distribution. <ref type="figure" target="#fig_0">Figure 11</ref> gives the graph by algorithm 5 using the density ρ with the clustering showing on the right, illustrating a good balance of the vector simplification between the flow directions and the underline density distribution. We can also use 3D curved vectors for 2D and 3D visualization. <ref type="figure" target="#fig_0">Figure 12</ref> shows the result for the vector field in <ref type="figure" target="#fig_8">Figure 9</ref>. Clearly, the curved vectors reveal more details of the vector field, and they are more efficient for the vector visualization.</p><p>Finally, <ref type="figure" target="#fig_0">Figure 13</ref> shows the visualization of a 3D vector field formed by two vortices pointing to different directions.</p><p>In all of the 2D experiments, a 300×300 grid is used except figure 9 which uses a 384×384 grid. The 3D experiment uses a 60×60×60 grid. For the non-optimized algorithm 3, most of these examples can be done in less than a minute on a Pentium M 1.3GHz laptop except ones with more than 60 clusters in figures 7, 9 and 13 which take no more than 5 minutes. The most time consuming step is the step 2 in algorithm 3 and the step 1.(b) for algorithm 4. We note that the total operations needed is O(kn) for a fixed number of iterations, where k is the number of clusters, n is the number of total grid points. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have presented a new vector field clustering approach which is based on the technique of Centroidal Voronoi tessellations. After assigning a well defined distance, the vector field has a very natural Centroidal Voronoi tessellations. Based on the Centroidal Voronoi tessellation of the vector field, we can give simplified and elegant visualization of the vector field.</p><p>Comparing to other visualization methods, the merits of the new method are its global view, easy understanding and its efficient implementation and realization. It can be used for both uniformly distributed vector fields (say at lattice points) and non-uniformly scattered vector fields.</p><p>The set up of the vector field clustering considered is limited to distributed vector fields defined in a subset of the Euclidean space, however, it is obvious that our approach has a lot of potential to be generalized. One of such generalizations can be used to cluster and segment vector fields defined on complex surfaces and manifolds. In some of our earlier works <ref type="bibr" target="#b7">[Du et al. 2003</ref>], we have considered the constrained Centroidal Voronoi tessellations which are the generalizations of Centroidal Voronoi tessellations in the Euclidean space to surfaces and manifolds. In the same spirit, we can extend our CVT based clustering/segmentation to vector fields defined on a compact and continuous surface/manifold S ⊂ R N given by S = {x ∈ R N : g 0 (x) = 0 and g j (x) ≤ 0 for j = 1, . . . , m} for some continuous functions g 0 and {g j } m j=1 , and given a set of vector fields</p><formula xml:id="formula_32">{ v i } k i=1 , defined on a point set {z i } k i=1 ∈ S, one may define their corresponding Voronoi regions on S by V i = { x ∈ S : d x (x, z i ) &lt; d x (x, z j ) for j = 1, . . . , k, j = i } for i = 1, . . . , k.</formula><p>Notice that the one-sided distance is independent of the surface S, thus, V i 's are simply the restrictions of the Voronoi regions (5) defined in a subset of R N onto S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Since the mass centroids {z</head><formula xml:id="formula_33">* i } k i=1 of {V i } k i=1</formula><p>as defined by (2) do not in general belong to S, then, a constrained mass centroid z c i on the surface is defined as a solution of the following problem:</p><formula xml:id="formula_34">min z∈S E i (z) ,</formula><p>where</p><formula xml:id="formula_35">E i (z) = V i d x (x, z) 2 dx .</formula><p>The integral over {V i } is understood as standard surface integration on S. Then, we can get the constrained centroidal Voronoi tessellation (CCVT) for the vector fields defined on the surface S if and only if the points {z i } k i=1 which serve as the generators associated with the Voronoi regions {V i } k i=1 are the constrained mass centroids of those regions. Thus, we expect that the notion of constrained CVT can also lead us to new clustering and segmentation methods for vector fields defined on manifolds and surfaces. It should be noted that in <ref type="bibr" target="#b8">[Du et al. 2005]</ref>, we have also developed a theory for retrieving some useful topological information of the deformable interface based on the phase field description. As for most of applications, getting correct statistics is very important, we anticipate that such topological information retrieval tools may also be useful to vector field simplification and visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Appendix</head><p>Algorithms for CVTs. To construct the CVT's with a given positive integer k and a domain Ω, a set of points {z i } k i=1 are to be determined that are at the same time the generators of a Voronoi clustering of the regions and the mass centroids of the associated clusters. The following algorithm can be used to construct CVT's; see, e.g., <ref type="bibr" target="#b10">[Hartigan and Wong 1979;</ref><ref type="bibr" target="#b15">Späth 1985;</ref><ref type="bibr" target="#b14">Sparks 1973]</ref> for details.</p><p>Algorithm 1. Given a positive integer k and a domain Ω, choose an initial distribution of k distinct points {z i } k i=1 in Ω and determine the associated Voronoi clustering {V i } k i=1 . 1. For each cluster V i , i = 1, . . . , k, determine the centroids, or the cluster means {z i } k i=1 , in the Euclidean distance case (or for more general distances).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Determine the Voronoi clustering (or anisotropic Voronoi</head><p>clustering <ref type="bibr">[Du and Wang 2004a]</ref>) associated with {z i } k i=1 . 3. If the (possibly anisotropic) Voronoi clusterings corresponding to {z i } k i=1 and {z i } k i=1 are the same, or some tolerance condition is met, exit the loop; otherwise, set z i = z i for i = 1, . . . k, determine the new Voronoi clustering and return to Step 1.</p><p>It is easy to see that steps 1 and 2 result in a decrease in the energy defined in (1), which guarantees the convergence to a local minimizer of the energy. For a discrete data set, the algorithm terminates in a finite number of steps. However, it is often the case that a very good approximation to the final CVT configuration can be obtained in substantially fewer steps. For this reason, at each iteration, one may calculate the energy of the current configuration and terminate the construction steps when the energy is within some prescribed tolerance of the energy of the previous configuration. Since the Voronoi clusterings and their centroids are uniquely determined by each other, another tolerance in the last step is to calculate the distance between {z i } k i=1 and {z i } k i=1 instead of comparing their Voronoi regions.</p><p>Algorithm 1 does not transfer the elements from one cluster to another until the end of each iteration, i.e., it does not account for the change in the cluster means until all means are computed. The following algorithm is an accelerated version of Algorithm 1 that takes into account the changes in cluster means as soon as they are determined.</p><p>Algorithm 2. Given a positive integer k and a domain Ω, choose an initial distribution of k points {z i } k i=1 in Ω and determine the associated Voronoi clustering i. move the point x from old group s into group t; ii. replace the centroid z s and z t by the means of the newly modified clusters V s and V t , respectively. 2. Exit when some tolerance is met; otherwise, go to Step 1. Algorithms 1 and 2 both result in a k-means clustering or a CVT tessellation corresponding to the CVT-energy (1). Numerical experiments indicate that Algorithm 2 is often more reliable than Algorithm 1 even though the former is more costly per iteration since one must examine the effect of each potential transfer on the energy. The gain lies in the fact that an iteration of Algorithm 2 leads to a larger decrease in the energy than that of Algorithm 1, and thus requires a much smaller number of iterations. A hybrid approach is also possible in which one starts with the Algorithm 1 and then switches to Algorithm 2. Presumably, after several iterations of Algorithm 1, only a very few of the more expensive iterations of Algorithm 2 are needed to obtain accurate results.</p><formula xml:id="formula_36">{V i } k i=1 . 1. For every point x,<label>(a)</label></formula><p>The costs of both Algorithms 1 and 2 may be reduced at the price of increased storage <ref type="bibr" target="#b12">[Kanungo et al. 2002]</ref>. Another improvement to Algorithm 2 is possible by avoiding the comparison of reductions in the CVT-energy for possible transfers to far away clusters. We note that Algorithm 1 is easier to parallelize while Algorithm 2 is easier to be generalized to more general CVT's. There are many other algorithms for the computation of CVTs, including more recent works on the fully parallelizable probabilistic methods <ref type="bibr" target="#b11">[Ju et al. 2002]</ref>. In <ref type="bibr">[Du and Wang 2004b]</ref>, generalizations of such probabilistic approaches are made for general mixture model based clusterings. Though the algorithmic details are more involved, the near perfect speed up does give the new algorithms significant advantage in clustering large data sets. We refer to <ref type="bibr" target="#b11">[Ju et al. 2002]</ref> and <ref type="bibr">[Du and Wang 2004b]</ref> for further discussions.</p><p>Mathematical Discussions. We here present some mathematical background for the vector fields clustering algorithms discussed in the paper.</p><p>Given a positive scaling constant w, a distance between two nondegenerate points p = (x p , y p ) and q = (x q , y q ) can be defined as</p><formula xml:id="formula_37">d(p, q) = 1 − cos(θ ) + w|x p − x q | 2 (14)</formula><p>where θ is the angle between the vector y p and y q , that is, cos(θ )|y p ||y q | = y T p y q . The constant w may be chosen to be dependent on L, the size of the spatial domain, so that it can be used to provide a scaling effect of different spatial domain sizes. For example, w = 1/L 2 .</p><p>Obviously the above distance satisfies the following properties:</p><formula xml:id="formula_38">1. d(p, q) = d(q, p); 2. d(p, q) = 0 ⇔ p = q; 3. d(p, q) + d(q, r) ≥ d(p, r).</formula><p>The last inequality follows from 2(1 − cos(θ )) = |y p /|y p | − y q /|y q ||. We now give a remark here for the distance formula (14). First of all, in some sense, if we measure the closeness of two vectors in the vector field by the difference of their directions only, then d(•, •) is the most natural distance in the space R N × S M−1 where S M−1 means the unit sphere in R M . Moreover, it is also easy to see that the distance increases with a larger angle θ and a larger Euclidean distance between x 1 and x 2 .</p><p>For a cluster in Ω, motivated by the geometric intuition that most of the vectors distributed in the cluster are desired to align in the direction and that the corresponding vector representation (simplification, or generator) should first be consistent with such an orientation, we first assign a constraint |y m | = 1 to the generator m = (x m , y m ). Then by incorporating the idea that vectors in the cluster with larger magnitudes tend to affect the flow orientation more, into the consideration, we take the magnitude y p as a weighting factor, and define the (one-sided) distance between p and m as Then, given a set of k generators {m i } k i=1 , the non-overlapping Voronoi regions { C i } corresponding to the points {m i } are defined by the equation <ref type="formula">5</ref>. For some p that satisfying d p (p, m i ) = d p (p, m j ) for two distinct generators m i = m j , we then assign p to the Voronoi region C i if |x p − x m i | &lt; |x p − x m j |. Since the set of points with both d p (p, m i ) = d p (p, m j ) and |x p − x m i | = |x p − x m j | has zero measure (a set in a lower dimensional space), this tiebreaking rule guarantees that the Voronoi regions form a valid tessellation of the spatial domain Ω.</p><p>We note that the Voronoi tessellations defined above belong to the general class of anisotropic Voronoi tessellations studied in <ref type="bibr">[Du and Wang 2004a]</ref>. The particular form of the distance definition is, however, unique as it pertains to our specific application. The tessellations (clusterings) of Ω are determined through generators and distances which live more naturally in a higher dimensional space R N × S M−1 associated with both the spatial domain and the vector fields defined on Ω. Once the generators (and cluster centroids) in R N × S M−1 are specified, some lifting operations are to be conducted to find suitable representations of the clusters and the vector fields back in the space R N+M . Now, some discussions on the cluster centers are in order. Given a cluster C, the centroid m * is obtained as the minimizer of the energy defined in (1). Using the definition of d p , we have</p><formula xml:id="formula_39">E(m) = C |y p | 2 − |y p |y p • y m + w|y p | 2 |x p − x m | 2 dx p .</formula><p>To find such a minimizer m * of E(m) under the constraint |y</p><formula xml:id="formula_40">m | = 1, we need ∂ E ∂ x m | m * = 2w C |y p | 2 (x p − x m * ) dx p = 0 ,<label>(15)</label></formula><formula xml:id="formula_41">∂ E ∂ y m | m * = C −|y p |y p dx p = λ y m * ,<label>(16)</label></formula><p>where λ is the Lagrange multiplier and |y m * | = 1.</p><p>From <ref type="formula" target="#formula_40">15</ref> </p><p>In the context of spatially distributed vector fields, we have y p = V (x p ). Thus, based on the formula (17), together with (5), we have the algorithm 3 from the algorithm 1, and the algorithm 4 from the algorithm 2.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Illustration of a 2d CVT with 10 clusters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>A vector field for a degree one vortex.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>A clustering in 6 clusters (cluster boundaries are shown on the left).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>A vector field and the clustering with 15 clusters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>The original field (left) and the measure curve in k (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Visualized with 24 (left) and 60 (right) clusters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Visualized with weights w = 0.5 (left) and w = 0.1 (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>Figure 8shows two examples of 15 clusters with different values of w for the field in figure 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Top: original fluid fields (left) and 8 × 8 uniformly sampled arrows (right); bottom: clustering in 60 clusters (left) and the 60-arrows visualization (right) based on our method.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Vector field of ants going through a gate; the right graph is the simplified graph by 36 arrows .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Visualization of the non-uniformly distributed vector fields; the right one is the clustering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 :</head><label>12</label><figDesc>Visualization of the field inFigure 9: 30 (left) and 60 (right) curved arrows.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 13 :</head><label>13</label><figDesc>The 5 × 5 × 5 uniformly sampled curved arrows (top) of the original field, visualizations with 30 (second) and 60 curved arrows (the last two, with different viewing angles).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>evaluate all the distances d x (x, z i ) for i = 1, . . . , k; (b) For the shortest distance d x (x, z t ),</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>d p (p, m) = |y p | 1 − cos(θ ) + w|x p − x m |2 or simply equation (4). Of course, since the constraint |y m | = 1 is enforced, effectively we have d p (p, m) = |y p ||y m |d(p, m).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>, (16)  and |y m * | = 1. we getx m * = C |y p | 2 x p dx p C |y p | 2 dx p , y m * = C |y p |y p dx p | C |y p |y p dx p | .</figDesc><table /><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proc. SIG-GRAPH 93</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="263" to="279" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Enhanced spot noise for vector field visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Deleeuw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vanwijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization 95</title>
		<meeting>Visualization 95</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="233" to="239" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Grid generation and optimization based on centroidal voronoi tessellations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gunzburger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Math. Comp</title>
		<imprint>
			<biblScope unit="volume">133</biblScope>
			<biblScope unit="page" from="591" to="607" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Tetrahedral mesh generation and optimization based on centroidal voronoi tessellations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Numer. Meth. Eng</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="page" from="1355" to="1373" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Anisotropic centroidal voronoi tessellations and their applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Sci. Comp</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Tessellation and clustering by mixture models and their parallel implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 SIAM data mining conference</title>
		<meeting>the 2004 SIAM data mining conference<address><addrLine>Orlando, FL, SIAM</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gunzburger</surname></persName>
		</author>
		<title level="m">Centroidal voronoi tessellations: Applications and algorithms. SIAM Review 41</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="637" to="676" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Constrained centroidal voronoi tessellations for surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gunzburger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ju</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="1488" to="1506" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Retrieving topological information for phase field models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
	<note>preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A phase field model for continuous clustering on vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Preusser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rumpf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Weikard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vanwijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="230" to="241" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Algorithm as 136: A kmeans clustering algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hartigan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Stat</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="100" to="108" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Probabilistic methods for centroidal voronoi tessellations and their parallel implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gunzburger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Parallel Computing</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1477" to="1500" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An efficient k-means clustering algorithm: Analysis and implementation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kanungo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mount</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Netanyahu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Piatko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sil-Verman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Machl Intel</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="881" to="892" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Visualizing vector fields using line integral convolution and dye advection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1996 symposium on Volume visualization</title>
		<meeting>the 1996 symposium on Volume visualization<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="63" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Algorithm as 58: Euclidean cluster analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sparks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Stat</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="126" to="130" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Cluster Dissection and Analysis, Theory, FOR-TRAN Programs, Examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Späth</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985" />
			<publisher>Ellis Horwood</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Simplified representation of vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vanwijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization 99</title>
		<meeting>IEEE Visualization 99</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="35" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Image-guided streamline placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proc. SIGGRAPH 96)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
