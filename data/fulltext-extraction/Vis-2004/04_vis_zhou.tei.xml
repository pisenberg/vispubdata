<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Pixel-Exact Rendering of Spacetime Finite Element Solutions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Zhou</surname></persName>
							<email>yuanzhou@uiuc.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Dept. of Computer Science</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
							<email>garland@uiuc.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Dept. of Computer Science</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Haber</surname></persName>
							<email>r-haber@uiuc.edu</email>
							<affiliation key="aff2">
								<orgName type="department">Dept. of Theoretical and Applied Mechanics</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Center for Process Simulation and Design</orgName>
								<orgName type="institution">University of Illinois at Urbana-Champaign</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Pixel-Exact Rendering of Spacetime Finite Element Solutions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.6.7 [Computing Methodologies]: Simulation and Modeling-Simulation Support Systems; I.3.3 [Computer Graphics]: Picture/Image Generation-Display algorithms pixel-exact visualization</term>
					<term>pixel shaders</term>
					<term>spacetime finite elements</term>
					<term>discontinuous Galerkin methods</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: Shock waves propagating through a partial 2-D cross-section of a solid rocket booster.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Providing techniques for displaying time-varying data produced by computational simulation of physical phenomena is a key problem in the visualization area. Simulations across a very broad range of applications-from fluid dynamics to quantum mechanics and elastodynamics-are frequently performed via finite element methods. One particularly natural approach to visualizing the result has always been to animate a series of constant-time snapshots of the solution data.</p><p>Most visualization systems in use today render finite element solutions using piecewise linear representations; height fields and color fields are particularly common. However, the actual solutions produced by finite element methods are frequently higher or-der functions. Rendering these solutions with piecewise linear approximations can seriously misrepresent the result of the simulation.</p><p>We demonstrate that the capabilities of modern programmable GPUs can support a substantial improvement in the visual fidelity of displayed solutions. We utilize custom pixel shaders to evaluate solution polynomials on a per-pixel basis. Combining this with adaptive subdivision of the height field, we are able to provide pixel-exact renderings of the finite element solution.</p><p>We investigate these visualization issues in the context of spacetime discontinuous Galerkin (SDG) methods. Unlike traditional finite element methods, SDG methods represent the solution within each element independently. While not guaranteeing continuity between adjacent elements, this has several advantages from the standpoint of efficient local computation and parallelization. From our standpoint, this is also advantageous because it means that each element can be rendered in isolation from the others. This is a natural fit for graphics hardware, which generally disallows non-local data access, say between elements or between adjacent nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Our focus is on the visualization of spacetime finite element solutions for time-varying problems. In this paper, we concentrate specifically on problem areas involving 2-dimensional spatial domains. Our 3-dimensional spacetime is covered by a tetrahedral mesh. However, it is important to note that it is not a simplicial complex as we allow non-conforming tessellations.</p><p>There has obviously been a great deal of prior work on rendering of 3-D volume data. There have also been several methods proposed for rendering spacetime volumes. Here we discuss the most salient examples of this prior work.</p><p>Spacetime Rendering There are multiple possible fundamental approaches to visualizing spacetime volumes. For our purposes here, most standard visualization techniques can be applied to our 3-D spacetimes. The more general setting of 4-D spacetime requires somewhat more generalized techniques <ref type="bibr" target="#b23">[24]</ref>.</p><p>Arguably the most common approach to visualizing spacetime data is by time slicing. Given that one dimension of the spacetime volume is temporal, it is extremely natural to extract and animate multiple spatial cross-sections of the spacetime. Vis5D <ref type="bibr" target="#b9">[10]</ref> provides a good example of a system for time-varying visualization that makes extensive use of temporal slicing. Woodring et al. <ref type="bibr" target="#b28">[29]</ref> extend this notion of slicing for direct rendering of 4-D spacetime volumes.</p><p>October 10-15, Austin, Texas, USA IEEE Visualization 2004 0-7803-8788-0/04/$20.00 Â©2004 IEEE One natural approach to rendering both spacetime and spatial cross-sections is direct rendering via splatting. Splatting of 3-D spacetime volumes can be implemented directly with traditional splatting methods <ref type="bibr" target="#b27">[28]</ref>. It can also be nicely generalized to 4-D spacetime volumes <ref type="bibr" target="#b16">[17]</ref> and even to general n-D hypervolumes <ref type="bibr" target="#b1">[2]</ref>. Splatting also fits quite nicely within the framework of traditional texture mapping hardware.</p><p>Another common approach to spacetime rendering is via isosurfacing. The most popular method for extracting isosurfaces from regular grids is Marching Cubes <ref type="bibr" target="#b11">[12]</ref>. Similar algorithms have been developed for irregular tetrahedral grids <ref type="bibr" target="#b21">[22]</ref>. Marching methods of this sort have been generalized to higher dimensions <ref type="bibr" target="#b3">[4]</ref> although the necessary lookup tables can become quite large <ref type="bibr" target="#b2">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GPU-Assisted Rendering</head><p>One of the most important recent developments in graphics hardware is the evolution from fixedfunction pipelines to programmable GPUs. This has provided many opportunities for implementing more advanced rendering algorithms directly in hardware. Of particular importance to us is the fairly recent move to full floating point support within the graphics pipeline.</p><p>In the past, there has been substantial work on designing custom hardware for volume rendering. More recently, techniques have been developed to efficiently perform such rendering tasks on standard PC hardware <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b8">9]</ref>. Guthe et al. <ref type="bibr" target="#b7">[8]</ref> and Weiler et al. <ref type="bibr" target="#b26">[27]</ref> have both demonstrated GPU-based techniques for rendering tetrahedral volumes.</p><p>Programmable GPU features have also been used to evaluate higher-order geometry elements. Vlachos et al. <ref type="bibr" target="#b25">[26]</ref> transparently convert triangles with per-corner normal data to piecewisepolynomial patches. Losasso et al. <ref type="bibr" target="#b12">[13]</ref> evaluate bi-cubic B-splines to produce smooth surfaces that are C 2 almost everywhere, except at certain C 1 cut vertices.</p><p>There are now multiple systems that have been developed for providing higher-level language constructs for GPU programming. Both Proudfoot et al. <ref type="bibr" target="#b18">[19]</ref> and Mark et al. <ref type="bibr" target="#b14">[15]</ref> describe C-like shader languages. In contrast, McCool et al. <ref type="bibr" target="#b15">[16]</ref> use a metaprogramming paradigm to embed shader programs directly in C++ code. We rely on the Cg system <ref type="bibr" target="#b14">[15]</ref> for developing our vertex and fragment programs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">FINITE ELEMENT SIMULATION</head><p>The visualization system we describe in this paper is a part of a larger project aimed at developing new methods for simulating time varying physical processes. Before describing our rendering techniques, we first outline the finite element problem domain in which they are being used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Spacetime DG Method</head><p>The standard finite element approach to simulating physical processes over time is semi-discrete. The spatial domain is discretized with a fixed mesh, inducing a discretized set of differential equations that are solved by a time-marching integration scheme. Usually, a uniform time-step is used across the entire spatial domain, thus effectively computing a solution over a fixed mesh at several constant points in time.</p><p>Spacetime discontinuous Galerkin methods <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b17">18]</ref> are a relatively new class of finite element methods that comprise an interesting alternative to semi-discrete methods. Unlike conventional finite element models, SDG methods work with meshes covering the entire spacetime analysis domain. The SDG algorithm weakly enforces the governing equations over each spacetime element, eliminating the need for a separate time integration procedure. Another distinguishing feature of SDG methods is their use of discontinuous basis functions with support on individual elements, rather than the usual continuous bases. This approach eliminates artificial coupling between adjacent elements when the mesh satisfies certain causality constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Spacetime Meshing</head><p>The spacetime meshes used in the underlying solution system are constructed using the Tent Pitcher algorithm <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b6">7]</ref>. It is the first algorithm to build graded spacetime meshes over arbitrary simplicially meshed spatial domains. Unlike most traditional approaches, the Tent Pitcher algorithm does not impose a fixed global time step on the mesh, or even a local time step on small regions of the mesh. Rather, it produces a fully unstructured simplicial spacetime mesh, where the duration of each spacetime element depends on the local feature size and quality of the underlying space mesh.</p><p>Given a triangular mesh of some planar domain, Tent Pitcher meshes the target spacetime domain using an advancing front algorithm. Elements are added to the evolving mesh in small patches by moving a vertex of the front forward in time. The amount by which a vertex may be lifted into the future is limited by local causality constraints. The SDG solution is computed locally within each new patch as soon as it is created. The mesh can also be adaptively refined or coarsened in response to a posteriori error estimates computed by the numerical code <ref type="bibr" target="#b0">[1]</ref>. This adaptation generates non-conforming spacetime meshes; two adjacent spacetime elements may not share a common face. <ref type="figure" target="#fig_0">Figure 2</ref> shows an example of a spacetime mesh built by this system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RENDERING SYSTEM</head><p>We have developed a visualization system designed to display the results of a spacetime discontinuous Galerkin system, such as the one outlined in the previous section. From the standpoint of the renderer, these spacetime DG solutions have the following important properties:</p><p>â¢ We are presented with a (potentially nonconforming) simplicial decomposition of spacetime.  â¢ The solution within each element is given independently, and these solutions are represented with higher-order basis functions.</p><p>Currently, we are only working with problems that involve 1-D and 2-D spatial domains. Therefore, the resulting spacetimes are either 2-D triangulations or 3-D tetrahedralizations, respectively. <ref type="figure" target="#fig_0">Figure 2</ref> shows an example of the kind of spacetime mesh our visualization system is designed to process. This is a simulation of a crack-tip wave scattering problem (see Â§5 for more details). Shock waves propagating through the medium are clearly visible from the resulting mesh refinement. The algorithm used for performing this refinement (and coarsening) produces non-conforming spacetime elements whenever it adapts the mesh density.</p><p>Our goal is to visualize the simulation as a time-varying process. We do this by constructing multiple constant-time slices through the spacetime mesh. Each time-slice represents the state of the spatial domain at a constant point in time. We render each time-slice and animate the result.</p><p>We assume that the user wishes to display one or more scalar fields computed from the underlying solution. For any given visualization, we restrict the possible number of scalar fields to 2, mapping one to height and one to color. Each scalar field can be described using a polynomial on a per-element basis. We aim to produce the most accurate possible rendering of these higher-order scalar fields. To do so, we take advantage of the ability of modern GPU hardware to evaluate fairly complex functions on a per-pixel basis.</p><p>To illustrate the importance of per-pixel rendering, consider the example shown in <ref type="figure" target="#fig_2">Figure 3</ref>. This is a very simple linear elastodynamic system over a 1-D space domain-the entire triangulated spacetime is shown. This is a simulation of a displacement propagating through a rigid bar fixed at one end. The initial displacement at the center of the bar travels with constant wavespeed towards the two ends of the bar. The wavespeed is a constant depending on the material of the bar. The wave reflects out of phase from the the fixed end of the bar and travels to infinity past the free end. The difference between computing the color field on a per-vertex basis and a per-pixel basis is striking.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Slicing Spacetime</head><p>The spacetime mesh we are given consists of a set of vertices V and a set of tetrahedral elements T . Each vertex v i = (x i , y i ,t i ) is a point in the 3-D spacetime, with two spatial coordinates (x i , y i ) and a time value t i . A given tetrahedron is a quadruple of indices Ï = (i, j, k, l) referencing the vertices that are its corners. We do not assume that the spacetime mesh is a simplicial complex. Our only assumption is that each tetrahedron is non-degenerate (i.e., its volume in spacetime is non-zero).</p><p>To render the state of the simulation at some time t i , we must find the intersection of the spacetime mesh with the plane t = t i .</p><p>In particular, we want to find the set of all spacetime elements that intersect this plane. Once we have found this set of tetrahedra, we cut each one with the plane. This produces a set of polygons (either triangles or quadrilaterals) that all exist at a common instant in time. Because these polygons are produced by slicing tetrahedra, they vary considerably in size. Indeed, as the time plane moves forward in time, the mesh edges move as the plane cuts the tetrahedra at different points. This results in significant temporal aliasing artifacts when using per-vertex rendering.</p><p>Because a single dataset covers the entire spacetime extent of a simulation, the meshes that we work with can grow quite large. For example, the spacetime mesh shown in <ref type="figure" target="#fig_0">Figure 2</ref> has roughly 11 million tetrahedral elements. It is therefore necessary to organize the data so that it can be accessed efficiently. Fortunately, our access pattern makes this quite straightforward.</p><p>To create an animation of the time-varying solution, we begin with a time-slice at time t = 0. After rendering each frame, we advance the time plane into the future by some small increment ât. For each tetrahedron, we can easily compute its minimum time value-the time t of its lowest vertex. We then sort the tetrahedra based on this minimal time value. This makes it particularly easy to index the entire spacetime efficiently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Displaying Scalar Fields</head><p>Once we have constructed a time-slice mesh, we need to render the appropriate scalar fields at that point in time. As mentioned previously, we consider the case where the user wishes to draw two independent scalar fields, one which we map to height and the other which we map to color. In general, these scalar fields might be any aribitrary functions.</p><p>For the particular examples given in this paper, the underlying solution is a displacement field represented in each element by a cubic polynomial. The two scalar fields of interest to us are: (1) velocity magnitude, which we map to height, and (2) strain energy density, which we map to color using a log scale. Both are derived analytically from the underlying displacement field. We represent our polynomials using a complete cubic basis, requiring 20 coefficients per element. The finite element solver computes its solution polynomials for each element in a local coordinate system, requiring that we store an additional 6 transformation coefficients per element.</p><p>Our system is designed to move all scalar computation onto the GPU. The task of the host processor is to manage the overall spacetime dataset and to construct time-slices. What is sent to the graphics hardware is a planar mesh with per-polygon polynomials. The work in the GPU is shared between a vertex and a fragment program, which compute the height and color fields, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Elastodynamics Simulation</head><p>The examples we present are all elastodynamic problems for which the finite element solver is computing a spacetime displacement field. The solution assigns a 2-D displacement vector u to every point (x, y,t) in spacetime. Within each spacetime element, the displacement field is represented with a complete cubic polynomial basis that contains the 20 cubic monomial functions:</p><formula xml:id="formula_0">u(x, y,t) = 20 â Î±=1 c Î± m Î± (x, y,t)</formula><p>Here the 2-D coefficient vectors c Î± are the finite element solution data and m Î± ranges over the cubic monomials. For the convenience of the solver, these solutions are represented in a spacetime coordinate system local to the current element. Given a spacetime pointp described in the global coordinate system, the transformation to the local coordinate system of an element is given by</p><formula xml:id="formula_1">p = ï£® ï£° 1/w x 0 0 0 1/w y 0 0 0 1/w t ï£¹ ï£» (p âÄ)</formula><p>whereÄ is the center of the element (in the global coordinate frame) and w x , w y , w t are the extents of the element along the x, y,t axes.</p><p>The spacetime velocity field v is the time derivative of the displacement field</p><formula xml:id="formula_2">v(x, y,t) = 20 â Î±=1 c Î±á¹ Î± (x, y,t)</formula><p>Note that only 10 of the functionsá¹ Î± are non-zero, and thus only 10 of the coefficient vectors c Î± are relevant to this computation. The strain energy density U is the spacetime scalar field given by</p><formula xml:id="formula_3">U(x, y,t) = 1 2 Îµ(x, y,t) : C(x, y)Îµ(x, y,t)</formula><p>in which Îµ = 1 2 (âu + âu T ) is the strain tensor and C is the fourthorder elasticity tensor that maps the strain tensor into the stress tensor. In our system, this is mapped to the color field on a log scale.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Vertex Program: Height Field Evaluation</head><p>The time-slice mesh constructed by the application is planar; each vertex simply encodes its position in the 2-D spatial domain (x, y, 0). The task of the vertex program is to compute the magnitude of the velocity field z = v(x, y,t) at the given corner of the current polygon.</p><p>To evaluate the velocity magnitude, the vertex program requires a total of 26 scalar parameters: 6 coefficients for the global-to-local transformation and 2 scalars for each of the 10 relevant solution coefficients c Î± . As these parameters vary on a per-polygon basis, they are passed to the vertex program via texture registers. The current time t is a global constant that only changes on a per-frame basis.</p><p>Note that, by evaluating the height only at the vertices of the mesh, we are constructing a piecewise-linear approximation of the true height field. For a piecewise-cubic displacement field, the true velocity magnitude field would be piecewise-quadratic. In principle, we could compute per-pixel heights using a root finding procedure in the pixel shader. This would be similar in spirit to GPUbased ray tracing <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b4">5]</ref>. However, full per-pixel height evaluation yields a very small increment in quality versus simpler methods, and further stresses the already busy pixel shaders. Therefore, we have decided against this approach.</p><p>Rather than evaluating height on a per-pixel basis, we simply perform polygonal subdivision on the host processor. Any polygon which is deemed too large is quadrisected. This can be performed recursively if necessary. Highest fidelity results are achieved by quadrisecting based on the projected screen size of the portion of the height field represented by the polygon in question. However, except in extreme circumstances, we have found simple fixed subdivision based on an area threshold to be preferable. It avoids the substantial increase in CPU load required by the screen-space size estimates. Fixed subdivision patterns are also more amenable to hardware acceleration, using features such as render-to-vertexarray. <ref type="figure" target="#fig_4">Figure 4</ref> illustrates the effect of subdivision.</p><p>Having finished its computation of the velocity magnitude, the vertex program performs two tasks. First, it displaces the current vertex to its proper position: (x, y, 0) â (x, y, z), where z = v(x, y,t) . Second, it uses texture registers to pass its 26 parameters plus the position (x, y, z) to the fragment program. For most current GPU architectures, 8 texture registers are available for data transfer to the fragment program. We use 1 register for transferring geometry, leaving 7 for parameter transfer. Notice that this allows us to transfer 28, rather than just 26, parameters to the fragment program. We take advantage of this otherwise unused bandwidth by passing an extra 2 coeffcients through the vertex program that it would not otherwise require; this data is then passed through to the fragment program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Fragment Program: Color &amp; Lighting</head><p>The task of the fragment program is twofold: to compute a color field and to compute pixel-exact lighting of the height field. The color field is computed by evaluating the strain energy density U at each pixel. Similarly, we light the surface by evaluating the normal of the height field at each pixel, and then use a standard Phong illumination model.</p><p>The color ramp used in generating the color field is simply a 1-D texture. This is provided by the user. The pixel shader converts the strain energy density U into a texture coordinate s using a log scale mapping:</p><formula xml:id="formula_4">s = log(U + 1) log(U max + 1)</formula><p>The texture coordinate s is clamped to the range [0, 1] and used to lookup a color value in the ramp texture. The value U max can either be computed as the maximum over the field or can be provided by the user (to exercise greater control over the color distribution).</p><p>The pixel shader requires 46 coefficients: 20 each for the x and y spatial derivatives of the displacement field and 6 for the local transformation. Of these 46, 28 are known or used by the vertex program and are passed by it to the pixel shader. The remaining 18 coefficients are passed to the pixel shader by the CPU in a texture rectangle. We use the NVIDIA GL_TEXTURE_RECTANGLE_NV extension to create these textures because of two important characteristics. First, it allows texel coefficients to be arbitrary floating point scalars, rather than limiting them to the range [0, 1]. This is essential as it allows us to preserve the precision of the solution  data. Second, it provides for exact texel addressing and does not perform any interpolation of neighboring texels, which would obviously produce totally spurious results in our setting.</p><p>For each frame, we must build a texture rectangle containing the relevant coefficient data. Each element is allocated a horizontal span of 6 texels, whose rgb values are used to store the required 18 coefficients. These 6-texel spans are packed into a texture rectangle such that they are never broken across rows. The maximum defined resolution of a texture rectangle is 4096Ã4096, thus we can pack 4096/18 = 227 elements per row. Each texture rectangle can thus accommodate the data for a total of 4096Ã227 = 929, 792 elements. Extremely large datasets might therefore require more than one texture per frame. However, as typical datasets currently have on the order of 50, 000 elements per frame, this upper limit is not at all constricting. The CPU packs element coefficients into the texture rectangle in the order in which the polygons will be drawn, thus the fragment shaders will access the texture in (approximately) scanline order.</p><p>To light the surface, we use a standard Phong illumination model. The diffuse and specular reflectances are simply scalar multiples of the color computed above. The pixel shader already has access to the coefficients necessary to compute the spatial derivatives of the height field function, and thus its normal. One slight problem arises when the velocity magnitude is 0-the spatial derivatives of the height field will be undefined. However, it is clear that geometrically the height field is flat, and that its normal is simply (0, 0, 1). It is also important to note that we do not need to perform any interpolation of normals over the polygon. At each pixel, we compute an exact normal vector directly from the underlying height field polynomial.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Discontinuity Antialiasing</head><p>Recall that the solutions we are drawing are represented independently within each element. These solutions are not required to be fully continuous across element boundaries. Therefore, even for solutions with very tight convergence bounds, we can wind up computing subtly different scalar values along shared edges. Unless the solution has a fairly large error, this is generally not easily noticed in the color field. However, it can lead to very obvious artifacts in the height field. Specifically, even small height discrepancies can lead to aliasing during polygon rasterization that causes small cracks to appear in the height field (see <ref type="figure" target="#fig_4">Figure 4)</ref>.</p><p>Our solution to this problem is to overdraw all edges shared between polygons. While this obviously increases the per-frame rendering time, it removes what would otherwise be very distracting aliasing artifacts. This edge overdraw approach is similar to the antialiasing approach adopted by Sander et al. <ref type="bibr" target="#b20">[21]</ref>. However, our problem is somewhat easier. They need to blend lines smoothly with the underlying polygons to antialias discontinuity edges (e.g., silhouettes). We do not require blending, as we are only trying to fill gaps rather than blend discontinuities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>In this section, we demonstrate some visualization results from our system on selected elastodynamic problems. All rendering was performed on a standard PC with a 2.4 GHz Pentium 4 processor, 1 GB of RAM, and an NVIDIA GeForce FX 5800 Ultra graphics card. On this hardware configuration, our renderer generally achieves interactive rates of roughly 10 frames per second on spacetimes in the range of 3-5 million tetrahedra.</p><p>Our first example-as seen in <ref type="figure" target="#fig_4">Figures 4, 5</ref>, and 6-models cracktip wave scattering within an elastic solid subjected to shock loading. For the view shown in <ref type="figure" target="#fig_7">Figure 6</ref>, the crack covers the left half of the bottom boundary, with the crack tip in the center of the bottom edge. These solutions actually cover only the upper right-hand quadrant of the complete domain.  In <ref type="figure" target="#fig_6">Figure 5</ref> we see a comparison over a small portion of the solution between (a) per-vertex and (b) per-pixel computation. In both cases, we are using per-vertex height computations without subdivision. For the per-vertex color case, we compute colors only at the vertices and linearly interpolate them over the triangle. As with the much simpler example shown in <ref type="figure" target="#fig_2">Figure 3</ref>, we see that the per-pixel rendering provides a far better view of the actual solution being computed. Note in particular the substantial color distortion on the lower-left spike in the per-vertex rendering. <ref type="figure" target="#fig_7">Figure 6</ref> shows a sequence of constant time snapshots of the solution to the crack-tip scattering problem. The total spacetime mesh contains approximately 25 million tetrahedra, and there are roughly 20,000 polygons per time-slice. The initial wave enters the domain from the top, reflects off the crack-tip at the bottom, and then continues to reflect back and forth across the domain. Both the wave fronts and color field are very well-resolved by the per-pixel rendering. It is important to remember that essentially all shading artifacts in this picture are a result of the structure of the solution. This is another important practical benefit gained from pixel-exact rendering. With inexact per-vertex color computations, it would be unclear whether visual artifacts were a result of the rendering or the solution. Here, we know that we are faithfully rendering the solution. Therefore, artifacts such as shading discontinuities are indicative of actual normal discontinuities in the field being computed. This makes our per-pixel rendering approach much more useful as a diagnostic tool, for assessing the quality of the computed solution, than a per-vertex rendering system would be.</p><p>In <ref type="figure" target="#fig_8">Figure 7</ref> we examine wave scattering in a representative volume element for a fiber-reinforced composite material with stiff fibers embedded in a more flexible matrix. The fiber sections appear as circular inclusions in the model. As the shock wave passes through the medium, the inclusions begin to debond from the surrounding material. The spacetime consists of roughly 6.3 million tetrahedra. As before, our rendering system is able to resolve the complex wave and stress patterns quite well. <ref type="figure" target="#fig_9">Figure 8</ref> demonstrates the impact of our pixel-exact rendering in this example. The per-vertex rendering has many more color discontinuities than the per-pixel rendering. More importantly, we can see that the overall structure of the stress field appears substantially different. Specifically, compare the red-to-yellow transition regions around the central inclusion and the stress fields along the upper boundary. The stress patterns differ markedly in the per-vertex and per-pixel renderings. <ref type="figure">Figure 9</ref> shows our final example solution. Here we are seeing a single sector of a 2-D cross section of a solid rocket booster. Shock waves are propagating through the solid rocket fuel from the left, which points towards the center of the rocket where combustion has begun. This simulation produces a fairly complex wave pattern in the height field and an equally complex strain energy density field that is mapped to color. This complexity is quite nicely resolved-and at interactive rates-by our per-pixel rendering system. This data set contains a total of 4.7 million tetrahedra, with roughly 30,000 polygons per time-slice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>In this paper, we have outlined an approach for pixel-exact rendering of spacetime finite element solutions. The system we have described uses modern programmable GPU features to offload a sizeable portion of the visualization task onto the graphics hardware. This frees the CPU to devote all its resources to data management and user interaction. We have shown that computing lighting and color fields from higher-order polynomials is both possible and produces far greater visual fidelity than per-vertex rendering. We have also explored a fairly new application domain for visualization: spacetime discontinuous Galerkin finite element methods.</p><p>We believe that this work can be extended in a number of promising directions. One important area for future work is to address the problem of extremely large spacetimes. At the moment, our system assumes that the entire spacetime can be kept in main memory, whether through direct I/O or through memory mapping. However, long running simulations may produce far more data than can fit in a 32-bit virtual memory space. Out-of-core data management techniques will clearly become necessary. Taking advantage of near-term hardware advances, particularly the ability to render into vertex arrays, should make achieving highly accurate height fields much easier. It would also be very interesting to explore alternative spacetime rendering modalities. We have restricted our attention to time-slicing. Various direct pixel-exact renderings of spacetime might also provide useful information.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>TimeFigure 2 :</head><label>2</label><figDesc>Spacetime mesh for a crack-tip wave scattering problem. Spacetime tetrahedra are formed by repeatedly lifting vertices of a planar space mesh forward in time. Local refinement occurs along propagating shock fronts.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>A simple 1-D linear elastodynamic finite element solution over a 2-D spacetime. The solution is piecewise cubic within each spacetime triangle, and per-vertex shading (a) produces a very poor representation of the actual solution (c).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>(a) Raw polygons (b) With edge overdraw (c) And subdivision as well</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Drawing time-sliced polygons alone leads to noticeable cracks. Using edge overdraw plus polygon quadrisection eliminates these problems.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>(a) Per-vertex color (b) Per-pixel color</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Per-pixel color computation is clearly much more faithful to the underlying solution than per-vertex color computation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Time sequence showing a shock wave approaching a crack, which lies along the lower edge of the quadrant shown. The shock scatters off the crack tip located in the middle of the quadrant.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Shock passing through a medium with circular inclusions. The shock causes the inclusions to debond from the surrounding medium. (a) Per-vertex color (b) Per-pixel color</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Per-pixel vs. per-vertex comparison for the last time step shown inFigure 7.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ACKNOWLEDGEMENTS</head><p>This research was funded in part by the National Science Foundation under an ITR grant DMR-0121695. We thank the numerous people involved in the CPSD spacetime discontinuous Galerkin project for producing the simulation results visualized here. We would like to specifically thank Shuo-Heng Chung for the 3-D spacetime image <ref type="figure">(Fig. 2)</ref>, Reza Abedi and Morgan Hawker for providing us with their simulation data, and Christopher Wojtan for his work on the 2-D spacetime rendering <ref type="figure">(Fig. 3)</ref>.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Spacetime meshing with adaptive refinement and coarsening</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reza</forename><surname>Abedi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuo-Heng</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeff</forename><surname>Erickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damrong</forename><surname>Guoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Haber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">M</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shripad</forename><surname>Thite</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 20th Annual ACM Symposium on Computational Geometry</title>
		<meeting>20th Annual ACM Symposium on Computational Geometry</meeting>
		<imprint>
			<date type="published" when="2004-06" />
			<biblScope unit="page" from="300" to="309" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hypervolume visualization: A challenge in simplicity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rabbiolo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1998 Volume Visualization Symposium</title>
		<imprint>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="95" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Counting cases in Marching Cubes: Toward a generic algorithm for producing substitopes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Banks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Linton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="51" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Isosurfacing in higher dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhaniramka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wenger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2000-10" />
			<biblScope unit="page" from="267" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The ray engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathan</forename><forename type="middle">A</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jesse</forename><forename type="middle">D</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">C</forename><surname>Hart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Hardware</title>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="page" from="37" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Error estimates for finite element methods for hyperbolic conservation laws</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cockburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Gremaud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Num. Anal</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="522" to="554" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Building space-time meshes over arbitrary spatial domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeff</forename><surname>Erickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damrong</forename><surname>Guoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">M</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">AlperÃ¼ngÃ¶r</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th Int. Meshing Roundtable</title>
		<meeting>11th Int. Meshing Roundtable</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="391" to="402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">High-quality unstructured volume rendering on the pc platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Guthe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>RÃ¶ttger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Schieber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>StraÃer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Hardware</title>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="page" from="119" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Highquality two-level volume rendering of segmented data sets on consumer graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Hadwiger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helwig</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="301" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The VIS-5D system for easy interactive visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bill</forename><surname>Hibbard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Santek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Visualization</title>
		<meeting>the IEEE Conference on Visualization</meeting>
		<imprint>
			<date type="published" when="1990-10" />
			<biblScope unit="page" from="28" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Acceleration techniques for gpu-base volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>KrÃ¼ger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="287" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Lorenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harvey</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proceedings of SIGGRAPH 87)</title>
		<imprint>
			<date type="published" when="1987-07" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Smooth geometry images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Losasso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Schaefer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eurographics Symposium on Geometry Processing</title>
		<meeting>the Eurographics Symposium on Geometry Processing</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="138" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Space-time methods for hyperbolic conservation laws</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Lowrie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Roe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Van Leer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Barriers and Challenges in Computational Fluid Dynamics</title>
		<imprint>
			<publisher>Kluwer</publisher>
			<date type="published" when="1998" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="79" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Cg: A system for programming graphics hardware in a C-like language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">R</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Steven Glanville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kurt</forename><surname>Akeley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><forename type="middle">J</forename><surname>Kilgard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2003-07" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="896" to="907" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Shader metaprogramming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">D</forename><surname>Mccool</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheng</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiberiu</forename><forename type="middle">S</forename><surname>Popa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Hardware</title>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="page" from="57" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Space-time points: 4D splatting on efficient grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neophytos</forename><surname>Neophytou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Mueller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Symposium on Volume Visualization</title>
		<meeting>Symposium on Volume Visualization</meeting>
		<imprint>
			<publisher>ACM SIGGRAPH</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="97" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A spacetime discontinuous Galerkin method for scalar conservation laws</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jayandran</forename><surname>Palaniappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">B</forename><surname>Haber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">L</forename><surname>Jerrard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Methods Appl. Mechs. Engng</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>in press</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A real-time procedural shading system for programmable Figure 9: Time sequence of shock wave propagation in a solid rocket booster. Note the complexity of both the wave and color patterns. graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kekoa</forename><surname>Proudfoot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">R</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Svetoslav</forename><surname>Tzvetkov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2001, Computer Graphics Proceedings, Annual Conference Series</title>
		<meeting>ACM SIGGRAPH 2001, Computer Graphics Proceedings, Annual Conference Series</meeting>
		<imprint>
			<date type="published" when="2001-08" />
			<biblScope unit="page" from="159" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Ray tracing on programmable graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><forename type="middle">J</forename><surname>Purcell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Buck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">R</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="703" to="712" />
			<date type="published" when="2002-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Discontinuity edge overdraw</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><forename type="middle">V</forename><surname>Sander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Snyder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Gortler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2001 ACM Symposium on Interactive 3D Graphics</title>
		<imprint>
			<date type="published" when="2001-03" />
			<biblScope unit="page" from="167" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Sweeping simplices: A fast iso-surface extraction algorithm for unstructured grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1995-10" />
			<biblScope unit="page" from="143" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Design and Analysis of Space-Time and Galerkin Least-Squares Finite Element Methods for Fluid-Structure Interaction in Exterior Domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Thompson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">4D spacetime techniques: A medical imaging case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tory</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>RÃ¶ber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>MÃ¶ller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Center</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Atkins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2001-10" />
			<biblScope unit="page" from="473" to="476" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Pitching tents in space-time: Mesh generation for discontinuous Galerkin method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">AlperÃ¼ngÃ¶r</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alla</forename><surname>Sheffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Foundations of Computer Science</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="201" to="221" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Curved pn triangles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Vlachos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">JÃ¶rg</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chas</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><forename type="middle">L</forename><surname>Mitchell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2001 ACM Symposium on Interactive 3D Graphics</title>
		<imprint>
			<date type="published" when="2001-03" />
			<biblScope unit="page" from="159" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Hardware-based ray casting for tetrahedral meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manfred</forename><surname>Weiler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Merz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="333" to="340" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Footprint evaluation for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename><surname>Westover</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 90)</title>
		<meeting>SIGGRAPH 90)</meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">High dimensional direct rendering of time-varying volumetric data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Woodring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaoli</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="417" to="424" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A space-time discontinuous Galerkin method for elastodynamic analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Acharya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sobh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Haber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Tortorelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture Notes in Computational Science and Engineering</title>
		<editor>B. Cockburn, G. Karniadakis, and C. Shu</editor>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="459" to="464" />
			<date type="published" when="2000" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">A Spacetime Discontinuous Galerkin Finite-Element Method for Elastodynamic Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lin</forename><surname>Yin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>Urbana, IL</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Theoretical &amp; Applied Mechanics, University of Illinois</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph. D. thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
