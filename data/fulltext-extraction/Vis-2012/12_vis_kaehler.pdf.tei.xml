<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.1" ident="GROBID" when="2016-09-09T15:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Novel Approach to Visualizing Dark Matter Simulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Ralf</forename>
								<surname>Kaehler</surname>
							</persName>
						</author>
						<author>
							<persName>
								<forename type="first">Oliver</forename>
								<surname>Hahn</surname>
							</persName>
						</author>
						<author>
							<persName>
								<forename type="first">Tom</forename>
								<surname>Abel</surname>
							</persName>
						</author>
						<title level="a" type="main">A Novel Approach to Visualizing Dark Matter Simulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Index Terms—Astrophysics</term>
					<term>dark matter</term>
					<term>n-body simulations</term>
					<term>tetrahedral grids</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1: The density distribution rendered from a dark matter simulation using the tetrahedral tessellation approach applied in this paper. Large-scale structures like sheets (gray), filaments (yellow) and halos (white), as well as caustics on smaller scales (close-up), become clearly visible. Abstract—In the last decades cosmological N-body dark matter simulations have enabled ab initio studies of the formation of structure in the Universe. Gravity amplified small density fluctuations generated shortly after the Big Bang, leading to the formation of galaxies in the cosmic web. These calculations have led to a growing demand for methods to analyze time-dependent particle based simulations. Rendering methods for such N-body simulation data usually employ some kind of splatting approach via point based rendering primitives and approximate the spatial distributions of physical quantities using kernel interpolation techniques, common in SPH (Smoothed Particle Hydrodynamics)-codes. This paper proposes three GPU-assisted rendering approaches, based on a new, more accurate method to compute the physical densities of dark matter simulation data. It uses full phase-space information to generate a tetrahedral tessellation of the computational domain, with mesh vertices defined by the simulation&apos;s dark matter particle positions. Over time the mesh is deformed by gravitational forces, causing the tetrahedral cells to warp and overlap. The new methods are well suited to visualize the cosmic web. In particular they preserve caustics, regions of high density that emerge, when several streams of dark matter particles share the same location in space, indicating the formation of structures like sheets, filaments and halos. We demonstrate the superior image quality of the new approaches in a comparison with three standard rendering techniques for N-body simulation data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Starting with studies of the dynamics of clusters of galaxies by Zwicky in the early 30's of the last century <ref type="bibr" coords="1,156.37,570.67,13.74,8.02" target="#b33">[35]</ref>, lots of observational evidence has been gathered, suggesting that the luminous matter in the Universe, including objects like gas clouds and stars, comprises only a tiny fraction of its total mass. Most of the mass in the Universe is thought to be cold dark matter. " Cold " because it moves at non–relativistic speeds and dark because it does not interact with photons, and thus does not emit or absorb light, so that its presence can only be measured through @BULLET Ralf Kaehler is with KIPAC/SLAC, E-mail: kaehler@slac.stanford.edu. @BULLET Oliver Hahn is with Stanford/SLAC, E-mail: ohahn@stanford.edu. @BULLET Tom Abel is with KIPAC/SLAC, E-mail:tabel@slac.stanford.edu. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org. its gravitational influence on ordinary matter. Some promising candidates to explain its nature are provided by particle physics. The most popular is a light neutralino suggested by super–symmetric extensions of the standard model of particle physics. Dark matter is the key ingredient in the formation of the largescale structure in the Universe, which arise from small density fluctuations . These are thought to have originated from quantum fluctuations and were stretched to macroscopic scales during an early inflationary epoch shortly after the Big Bang. Dark matter can then be thought of as a gas in which the particles do not collide. To study its evolution, Nbody simulations, originally developed in plasma physics and for stellar dynamics, are being used <ref type="bibr" coords="1,397.67,676.65,9.71,8.02" target="#b5">[6,</ref><ref type="bibr" coords="1,409.41,676.65,10.65,8.02" target="#b25"> 26]</ref>. The outcome of such simulations allow for comparison with observational data of the large–scale distribution of galaxies, as for example the Sloan Digital Sky Survey <ref type="bibr" coords="1,518.73,696.57,9.52,8.02" target="#b0">[1]</ref> . Indeed , comparing such simulations with observational data dominates how the standard model of structure formation is being tested. The simulation codes usually treat dark matter as a collisionless gas sampled by a discrete number of tracer particles of equal mass. These are propagated over time by the aggregated gravitational forces acting on each particle. Different numerical methods predominantly differ in how they compute the overall gravitational forces in the computation domain. Most previous visualizations of such simulations projected each particle separately into screen space, using different kernel profiles and methods to scale the splat sizes, usually based on certain local interpolation schemes for the physical quantities. One method that is particularly popular is based on gathering the nearest n-neighbors for each particle and use adaptive kernel smoothing to obtain a mass density at each particle position, see e.g. Monaghan <ref type="bibr" coords="2,200.68,154.29,13.74,8.02" target="#b17">[18]</ref>. This approach necessarily introduces significant smoothing, especially in regions of low dark matter densities, so–called voids. We present a rendering approach that is based on an improved way to compute the dark matter density distribution <ref type="bibr" coords="2,193.59,195.41,9.71,8.02" target="#b1">[2,</ref><ref type="bibr" coords="2,205.63,195.41,10.65,8.02" target="#b23"> 24]</ref> . Instead of operating solely on positional information, it uses the full phase-space information available in N-body dark matter simulations. The computational domain is tessellated using tetrahedral cells that contain equal amounts of mass. The vertices of this mesh are defined by the dark matter particles evolved by the N-body code. The connectivity of the cells is generated once and is kept constant over time. Due to gravitational forces each cell will be warped and at later times many cells will overlap. However, the total mass per cell will stay constant, only its density will change, due to the change of the spatial volume of the cell. Accumulating the density contributions from all cells that fall onto a certain location in the computational domain provides an accurate density estimate for this region. The contributions of this paper can be summarized as follows @BULLET A data storage and access method that is tailored to the specific properties of the underlying tessellation derived from the tracer particles of N-body dark matter simulations. It allows to generate the complete tessellation, including all connectivity information and derived quantities, like mass density per cell, on-the-fly on the GPU during the rendering pass and thus minimizes the amount of data transferred between CPU and GPU. The method directly extends to datasets that exceed the available graphics memory. @BULLET Three GPU-based rendering methods that exploit this data storage and access scheme, namely (1) a splatting approach that optimally places the splats at the mass centroids of fluid elements and locally scales the kernel sizes based on the correct mass densities at these locations, (2) a mass conserving resampling approach , that does not suffer from problems of slice-based resampling approaches which might miss parts or complete cells that fall between slices and (3) an efficient cell-projection approach that does not require any view-dependent decomposition of the tessellation. @BULLET A comparison of the image quality of these new approaches to the standard rendering methods for N-body dark matter simulations , namely constant and adaptive kernel smoothing, as well as a Voronoi tessellation of the particle distribution. @BULLET A demonstration of the effectiveness of the new approaches to visualize important features of the so-called cosmic web, in particular voids, filaments and dark matter halos. The remainder of this paper is organized as follows. In Section 2 we will summarize related work in the field of visualization of Nbody simulations and direct volume rendering of data on unstructured meshes. Section 3 will review the physical motivation for the tessellation approach, whereas Section 4 focusses on the rendering algorithm and an efficient implementation on current graphics hardware. Section 5 compares the new approaches with standard rendering methods for N-body simulations and we end with concluding remarks and directions for future work in Section 7. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>In the last years, numerous publications have studied the visualization and analysis of point-based datasets from N-body and SPH simulations and the approaches can be divided into two major categories. The first one comprises approaches that operate directly on the points, e.g. by projecting kernel profiles centered at the point locations into the frame-buffer. A GPU-assisted hierarchical splatting of pointbased datasets via a PCA clustering procedure has been presented and applied to various N-body and SPH datasets by Hopft et al. <ref type="bibr" coords="2,518.32,137.28,13.74,8.02" target="#b11">[12]</ref>. Via compression and out-of-core techniques, this work has been extended to time-dependent N-body datasets <ref type="bibr" coords="2,443.48,157.21,13.74,8.02" target="#b12">[13]</ref> . An interactive rendering approach for very large N-body datasets has been presented by Fraedrich et al. <ref type="bibr" coords="2,357.68,177.13,9.52,8.02" target="#b8">[9]</ref> . The authors employ a continuous level-ofdetail particle representation and a hierarchical quantization scheme to compress the particle coordinates and data attributes. A high performance parallelized algorithm for large-scale astrophysical data sets from particle-based simulations for multicore CPUs and CUDAenabled GPUs has been presented <ref type="bibr" coords="2,416.36,226.95,13.74,8.02" target="#b13">[14]</ref>. Popov et al. <ref type="bibr" coords="2,490.01,226.95,14.94,8.02" target="#b20">[21] </ref>employ the Cloud-in-Cell method of PM (Particle-Mesh) schemes to resample point data onto a regular grid to analyse so-called multistream events, which characterize large-scale features like voids, halo and filaments. Haroz et al. <ref type="bibr" coords="2,379.16,266.80,14.94,8.02" target="#b9">[10] </ref>apply multidimensional visualization techniques to explore uncertainties of time-dependent cosmological particle datasets. They further present a hardware-accelerated approach for smooth temporal interpolation of the particle data in realtime . Various other point based rendering approaches have been pre- sented <ref type="bibr" coords="2,310.27,316.61,14.19,8.02">[27,</ref><ref type="bibr" coords="2,326.71,316.61,11.21,8.02" target="#b21"> 22,</ref><ref type="bibr" coords="2,340.16,316.61,10.65,8.02" target="#b31"> 33]</ref>. The splatting approach proposed in this paper differs from these in the way the positions and sizes of the splats are computed. The locations are inherently coupled to properties of the underlying physical system, i.e. the volume conservation of phase-space elements and their evolution, respectively deformation over time. The locations of the splats are defined by the centers of mass of each of these volume elements, whereas the local splat sizes are directly derived from the physically correct mass density of these elements and not from poor isotropic density estimates based on a quite arbitrary number of nearest neighbors of the tracer particles. This approach can be regarded as some kind of adaptive supersampling that determines the location of the samples by exploiting the underlying physics of the data, whereas a simple, regular supersampling that does not exploit these inherent features of the data would not reach the same image quality. Work in the second category employs some kind of proxy grid, for example by resampling the point-based data to regular grid. A GPUassisted resampling approach for unstructured point data is discussed by Fraedrich et al. <ref type="bibr" coords="2,353.29,496.63,9.52,8.02" target="#b7">[8]</ref>. It adaptively discretizes the view-volume onto a 3D texture, based on the distance to the current camera position. A GPU-assisted mapping of input particles into a volumetric density field using an adaptive density estimation technique that iteratively adapts the smoothing length for local grid cells has been presented by Cha et al. <ref type="bibr" coords="2,323.53,546.44,9.52,8.02" target="#b4">[5]</ref> . Another GPU-assisted resampling approach of pointdata is discussed in Zhu et al. <ref type="bibr" coords="2,394.65,556.40,13.74,8.02" target="#b32">[34]</ref>. A method to obtain velocity field statistics from N-body simulations by generating Voronoi and Delaunay tessellations has been presented by Bernardeau et al. <ref type="bibr" coords="2,490.80,576.33,10.45,8.02" target="#b2">[3] </ref>Our resampling approach differs from the these in the sense that it does not operate directly on the points primitives, but uses a tetrahedral mesh that is derived from them. The mesh is neither a Voronoi nor a Delaunay tessellation of the computational domain, but is rather based on the regular layout of the points that N-body simulations use as initial conditions. There has also been extensive work on the visualization of data on tetrahedral grids. Cell-projection methods usually employ the Projected Tetrahedra (PT) algorithm, that decomposes each tetrahedron into a set of triangles and assigns scalar values for the entry and exit points of the viewing rays to each vertex <ref type="bibr" coords="2,429.70,686.61,13.74,8.02" target="#b24">[25]</ref>. A GPU-assisted method for decomposing the tetrahedra into triangles using the PT algorithm was presented by Wylie et al. <ref type="bibr" coords="2,398.54,706.53,13.74,8.02" target="#b30">[32]</ref>. An artifact-free PT rendering approach using a logarithmically scaled pre-integration table was proposed by Kraus et al. <ref type="bibr" coords="2,369.04,726.46,13.74,8.02" target="#b15">[16]</ref> . Maximo et al. developed a hardwareassisted PT approach using CUDA for visibility sorting <ref type="bibr" coords="2,493.02,736.42,13.74,8.02" target="#b16">[17]</ref>. GPU-assisted raycasting methods for tetrahedral grids have, for example, been discussed by Weiler et al. <ref type="bibr" coords="3,144.08,63.35,14.94,8.02" target="#b28">[30] </ref>and Espinha et al. <ref type="bibr" coords="3,227.25,63.35,9.52,8.02" target="#b6">[7]</ref>. We could employ these cell-projection approaches to perform the rendering of the densities defined on our tetrahedral grid structure. However, due to the specific problem we are focussing on, i. e. highquality density projections of N-body dark matter simulation data, we can provide a more efficient and much easier GPU-implementation that exploits the order independency and the implicit connectivity information given in this case and does not require the generation of any view-dependent decompositions of the tetrahedra faces or any intersection computations. An alternative method to render tetrahedral grids is to resample the data to grid structures that are more directly supported by current graphic hardware architectures. Westermann et al. <ref type="bibr" coords="3,221.99,183.99,14.94,8.02" target="#b29">[31] </ref>presented a multi-pass algorithm that resamples tetrahedral meshes onto a cartesian grid by efficiently determining the intersections between planes through the centers of slabs of cells of the target grid using the ST (Shirley-Tuchman)-classification and OpenGL's alpha test to reject fragments outside the intersection regions. Weiler et al. <ref type="bibr" coords="3,231.84,233.81,14.94,8.02" target="#b27">[29] </ref>proposed a slice-based resampling technique to a multi-resolution grid. It discards fragments outside the intersection regions between the slice and the tetrahedra based on the barycentric coordinates of each fragment, which are obtained from a texture-lookup. The slice-based approach is problematic in our case, as it might miss small or degenerated tetrahedra that fall between two slices. We need to distribute conserved quantities like the total mass of the tetrahedron into the cells of the target grids. The resampling algorithm we propose, estimates the volume of the intersection between the tetrahedral elements and the cubical cells and distributes the mass based on this information. It is easy to implement and does not require the generation of view-dependent decompositions of the tetrahedra faces or additional texture-lookup tables to discard fragments outside the intersection. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MOTIVATION</head><p>In this section we discuss the theoretical background of the rendering methods proposed in this paper. For a more detailed discussion of the physics the reader might refer to <ref type="bibr" coords="3,149.98,428.73,9.71,8.02" target="#b1">[2,</ref><ref type="bibr" coords="3,161.93,428.73,10.65,8.02" target="#b23"> 24]</ref>. N-body simulations modeling the evolution of dark matter distributions usually discretize the computational domain by a constant number of point-like mass sources, so-called tracer particles. To reduce the computational complexity, each tracer particle represents large ensembles of physical dark matter particles, typically between 10 6 and 10 9 solar masses. Initial conditions are generated by distributing the tracer particles at the nodes of a cubical grid and imposing small perturbations on their positions and velocities according to the statistics of density fluctuations in the early Universe, as imprinted in the CMB (Cosmic Microwave Background) radiation. The position of each particle i is updated by computing the aggregate gravitational forces of all other particles j, j = i at the location of i, and changing i's position according to the acceleration resulting from this net force. In this process, the mass of the physical dark matter particles represented by the tracers is usually treated as if it was centered around the tracer's position. It is important to emphasize that the tracers do not have a direct physical equivalent, but are basically approximations introduced to keep the computational complexity of the simulations manageable. Even with these simplifications large-scale N-body dark matter simulations nowadays follow the motion of up to hundred billion tracer particles, see e. g. <ref type="bibr" coords="3,97.48,649.00,9.71,8.02" target="#b3">[4,</ref><ref type="bibr" coords="3,109.44,649.00,10.65,8.02" target="#b14"> 15]</ref>. Nevertheless, it is physically more accurate to regard the tracer particle's mass as being spread out over the computational domain, instead of being concentrated at a set of discrete sampling locations. The correct time-dependent evolution of an ensemble of dark matter particles is given by the collisionless Boltzmann equation, also called the Vlasov-Poisson equation <ref type="bibr" coords="3,136.22,709.33,14.94,8.02" target="#b19">[20] </ref></p><formula>∂ f ∂t = −v ∇ x f − ∇ x φ · ∇ v f , </formula><formula>(1) </formula><p>where φ is the gravitational potential of the system. The distribution function f (x, v, t) describes the phase-space density of the ensemble, and is defined such that dN = f (x, v,t) dx dv is the number of particles that at time t have positions between x and x + dx and velocities between v and v + dv. Given f , the number of dark matter particles per unit volume n(x,t) at x is n(x,t) = f (x, v,t) dv, and analogously the mass density ρ(x,t) is </p><formula>ρ(x,t) = m f (x, v,t) dv, </formula><formula>(2) </formula><p>where m is the particle mass. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Tessellation of the Computational Domain</head><p>To illustrate how this motivates a new method to estimate the phys<ref type="figure" coords="4,22.50,133.94,21.21,8.02">Fig. 3</ref>: A 2D illustration of a regular grid structure defined by the tracer particles of a N-body simulation run. Initially the particles are distributed regularly over the computational domain (left). Over time the particles are advected due to gravitational forces and the corresponding cells become deformed (middle). At later times, some cells will start to (partially) overlap with each other (dark shaded region on the right), indicating the formation of structures of the Cosmic Web. mass, that states that the mass of each co-moving volume element is constant over time. Thus, from the knowledge of the constant initial mass distribution and the time-dependent volume of each cell, derived quantities like mass densities can be computed for all times. </p><p>In principle the cubical tessellation could be employed to obtain this information, but the non-convex cells that emerge during the deformation of the grid, as shown in the right image of <ref type="figure" coords="4,215.37,298.09,29.27,8.02">Figure 3</ref>, would complicate the computation of the time-dependent volumes. A preferable domain tessellation is obtained using tetrahedral elements. The advantage of this cell type is that independently of the relative motions of the vertices, these cells will remain convex, though the cells might temporarily become degenerate, when all vertices (almost) lie in the same plane. Tetrahedra with small volumes indicate regions of high mass density, since the mass per tetrahedron is constant by construction . These high-density tetrahedra indicate caustics in the dark matter fluid.  The tessellation of the initial cubical cells should consist of tetrahedral elements that introduce no new vertices, ensure consistent faces and edges between abutting cells, and initially have identical volumes. The smallest number of elements that fulfill these constraints is six, and we chose the configuration shown in <ref type="figure" coords="4,177.14,612.96,29.90,8.02">Figure 4</ref> . This choice ensures that no holes or cracks will form in the interior region of the mesh over time, even as the grid gets vastly deformed, because the vertices and edges on shared faces match up. </p><p>The connectivity that defines the tetrahedra is kept the same for all time steps. Only the spatial positions of the vertices are updated according to the actual positions of the tracer particles, as computed by the N-body simulation. This implies that for a new time step, only the positional information of the vertices must be updated, while the connectivity information can be reused. The identification of corresponding particles for different time-steps is done with help of the unique IDs that simulation codes assign to the tracers. These can be mapped to the coordinates of the particles on the initial grid, see Equation (8). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Density Projections</head><p>According to the discussion in Section 3.1, the local mass density of a co-moving tetrahedron i at time t is given by </p><formula>ρ loc,i (t) = m V i (t) , </formula><formula>(3) </formula><p>i.e. the constant mass m divided by its time-dependent volume V i (t). Over time, the motion of the tracer particles results in large amounts of overlapping volume elements, and according to Equation (2) the total mass density ρ tot (x,t) at a position x is simply given by the sum of the densities of each cell containing x at that time. To illustrate this, consider the volume element V ∩ (x,t) that is obtained by intersecting all cells that contain x at time t. The total density is then defined by </p><formula>ρ tot (x,t) = ∑ i m i,∩ V ∩ (x,t) . </formula><formula>(4) </formula><p>where the sum runs over all cells that contain x, and m i,∩ is the amount of mass per cell i contained in subvolume V ∩ . Using constant spatial interpolation, we get m i,</p><formula>∩ = m V ∩ V i (t) </formula><p>, where m is the constant mass per cell and V i is the cell's volume. Combining this with Equation (4) we get </p><formula>ρ tot (x,t) = ∑ i ρ loc,i (t), </formula><formula>(5) </formula><p>where the sum runs over all cells i that contain x at time t. The number of dark matter streams at a certain spatial location, which as discussed above can be used to distinguish different regions of the cosmic web, corresponds to the number of overlapping tetrahedra. Relevant for many scenarios in astrophysics and cosmology are projections of certain physical quantities q along the line of sight </p><formula>q pro j = χ q x(χ) dχ, </formula><p>where x(χ) denotes the parametrization of that line for a certain pixel on the screen. For the tetrahedral mesh discussion above, it takes the form </p><formula>q pro j = ∑ i ¯ q i dl i , </formula><formula>(6) </formula><p>where the index i runs over all tetrahedra T that are intersected by the line of sight, ¯ q i is the constant quantity associated with T i and dl I denotes the length of the intersections between the line of sight and T i . Particularly important are density projections </p><formula>ρ pro j = χ g ρ(x(χ) dχ, (7) </formula><p> where g is some function of the density ρ. n = 1 for example is relevant for experiments aiming at detecting dark matter directly in underground detectors. The discussion in this section can be summarized as follows: Given a time-dependent 3D N-body dark matter simulation, a tetrahedral mesh is constructed, with a connectivity implicitly defined by the layout of the tracers on a regular grid at the initial time-step, which can be reconstructed at any time step from the tracer's unique IDs. The same amount of mass is assigned to each tetrahedral element and derived quantities, like time-dependent mass densities, are computed based on the volumes of all tetrahedral elements that overlap a certain location, see Equation (5). The mass is associated with the cells and not the vertices of the tessellation. The nodes of the mesh are updated over time, according to the tracer's actual position, changing the volumes and thus the spatial mass densities. The tessellation has consistent vertices, edges and faces for abutting cells, and in particular does not contain any dangling nodes, but at later times the tetrahedral elements will typically start to overlap. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2081"></head><p>KAEHLER ET AL: A NOVEL APPROACH TO VISUALIZING DARK MATTER SIMULATIONS <ref type="figure" coords="5,31.50,195.25,20.78,8.02">Fig. 5</ref> : A density distribution from a dark matter simulation with about 134 million particles, resulting in about 804 million tetrahedra, respectively 3.2 billion triangles. The close-up on the left was rendered via the centroid approach (0.1 fps), whereas the image on the right was generated with the cell-projection approach (0.03 fps). For the image in the middle a hybrid approach was used, rendering the tetrahedral elements inside the sphere around the camera using the cell-projection methods and elements outside a sphere with the centroid methods (0.08 fps). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RENDERING</head><p>In the following we discuss three GPU-based rendering approaches for density projections generated from this type of input mesh. We implemented them in OpenGL and the OpenGL Shading Language, and we will use OpenGL nomenclature in the following. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data Storage and Access on the GPU</head><p>The relation between a tracer's ID and its vertex (i, j, k) on the initial regular grid is given by </p><formula>id = i + d 0 ( j + d 1 k) (8) </formula><p>where d 0 , d 1 , d 2 are the number of vertices of the grid along the x, y and z direction. The implicit connectivity of the initial grid allows for a very memory efficient representation of the mesh on the GPU without the need to store and transfer any explicit connectivity information or additional attributes about the tetrahedral cells, except for the locations of the tracer particles. All connectivity and derived information, like the volumes and mass densities of the tetrahedral cells can be generated on-the-fly on the GPU. The tracer particle positions are stored in a three-dimensional floating-point RGB texture with d 0 d 1 d 2 texels, so that several particles can be accessed in the vertex shader instance. The texel coordinates (i, j, k) are derived from the particle's ID, according to Equation (8). The texture is uploaded onto the GPU and sampled in a vertex shader, which is invoked </p><formula>(d 0 − 1) * (d 1 − 1) * (d 2 − 1</formula><p> ) times via instance rendering (glDrawElementsInstanced(...)). The current invocation ID is obtained from the instance counter (gl InstanceID) in the vertex shader mapped to texel coordinate (i, j, k), see Equation (8). The coordinates v i , i = 0...7 of the eight tracers stored at (i ± 1, j ± 1, k ± 1), defining a cubical cell in the initial regular grid, are read from the 3D position texture and handed over to a geometry shader as varying attributes. In the geometry shader, the six (possibly deformed) tetrahedra depicted in <ref type="figure" coords="5,40.61,599.19,28.92,8.02">Figure 4</ref> , are constructed from the tracer's positions via the connectivity table {1, 0, 2, 4}, {3, 1, 2, 4}, {3, 5, 1, 4}, {3, 6, 5, 4}, {3, 2, 6, 4}, {3, 7, 5, 6}, and the volume of each tetrahedron is computed by </p><formula>V = (v 1 − v 0 ) · ((v 2 − v 0 ) × (v 3 − v 0 )) 6 . </formula><formula>(9) </formula><p> In order to better leverage the massive parallelism of current GPU architectures , we do not generate all six tetrahedra in the same geometry shader instance, but rather trigger six geometry shader invocations for each vertex shader instance via the " invocations " layout qualifier of the OpenGL Shading Language " layout ( points, invocations = 6 ) in; " . The built-in variable gl InvocationID is used to determine which of the six tetrahedra to be generated in a certain geometry shader in- stance. </p><p> For datasets that exceed the available graphics memory, we decompose the 3D texture that stores the positional information into separate blocks, each of them small enough to fit entirely into graphics memory. The blocks share a layer of texels at their interfaces, and are transferred and processed individually on the GPU, simply accumulating the partial rendering results for the tetrahedral elements encoded in each brick. In the following subsections, we will discuss three different GPUassisted rendering approaches that are based on this data storage and access strategy. We will focus on the rendering of density projections, see Equation (7), which are order-independent, so no sorting of the rendering primitives is required. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Centroids</head><p>In this approach, each tetrahedron T is rendered using a 2D billboard with a cubic-spline kernel, oriented perpendicular to the current viewing direction and located at T 's centroid c T = 1 4 ∑ 3 i=0 v i , where the v i denote T 's vertices. Since we are assuming constant mass (density) per cell, the centroid is identical to T 's center of mass. The kernels are scaled proportional to 3 m ρ T , where ρ T denotes the mass density of T , that is computed in the geometry shader according to Equation (9), along with the vertices and texture coordinates for the billboards. The contribution of each generated fragment is accumulated in a floatingpoint 2D texture that is bound as a render target, using an additive blending equation. The centroids and the sizes of the quadrilaterals could be computed in a preprocessing step and cached on the GPU using vertex buffer objects (VBOs). However, since we have about 6 times more centroids than tracer particles, storing the centroids along with the density-dependent scaling factors would result in a considerable increase of bandwidth and graphics memory consumption. It is thus preferable to generate this information on-the-fly on the GPU. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Resampling</head><p>The second approach we propose is to resample the tetrahedral cells to a cubical grid structure G, which allows to locally evaluate Equation (4) and to apply standard rendering methods for regular grids, e.g. to display level sets of the data. The mass of each tetrahedral element T i needs to be distributed to the cubical cells C j of G. A correct solution involves the computation of the volume of the intersections between T i and the cubical cells C j and an assignment of the mass contribution based on its volume, see Equation (3). For the hundreds of millions of tetrahedra in typical N-body simulations, this procedure is too expensive and we utilize rasterization hardware to estimate the amount of mass for each cell by A ρ i dl i . A is the area of the faces of the cubical cell, ρ i is the mass density of T i and dl i is the height of y x <ref type="figure" coords="6,22.50,164.68,34.67,8.02">Fig. 6: 2D</ref>-illustration of the resampling approach: The cubical grid is processed in slabs of cells along the x-direction. The shaded cells are affected by the projection of the tetrahedron (triangle) onto the slabs along the y-direction and thus two fragment per cell are generated. For light-red cells the contribution of the fragments for front and backfaces cancel out, for cells that intersect the tetrahedron, the resulting line-segments dl of Equation. (12) are shown. the intersection between T i and C j at C j 's center, measured along the grid's z-axis, see <ref type="figure" coords="6,84.26,265.36,29.01,8.02">Figure 6</ref>. We exploit OpenGL's render-to-texture functionality and bind a floating-point 3D texture with n 3 texels as a render target, using a viewport size of n 2 pixels. The tetrahedral cells and associated information , such as their volumes and densities, are generated in the vertex and geometry shader as described in Section 4.1. In the geometry shader we determine the interval of G's cell slabs perpendicular to the z-direction, that is partially overlapped by the tetrahedron, see <ref type="figure" coords="6,22.50,345.06,29.67,8.02">Figure 6</ref>. Using parallel projection along the z-axis, the faces of the tetrahedron are rendered to corresponding texels in the render target, which is specified by the gl Layer command. We assign the derived densities, as well as the current position of the slab of cells as varying variables to the vertices of the triangles, to access this information in the fragment shader stage. The tetrahedral cells can extend over many cell slices in the z-direction, so that the number of generated vertices per geometry shader instance could in principle exceed the limit of the graphics hardware. We therefore perform a multipass approach and process a fixed number of cell slabs in G per pass, ensuring that the maximal possible number of vertices per geometry shader invocation stays within the valid limits. In the fragment shader, the fragment's z-coordinate f z is compared to the minimal and maximal z-coordinates s min , resp. s max of the current slab of cells in the target texture. If the fragment belongs to a front-facing triangle, the value </p><formula>q f f = −q i min s max , max( f z , s min ) (10) </formula><p>is written to the corresponding target cell in G. Analogously, </p><formula>q b f = +q i max s min , min( f z , s max ) (11) </formula><p> is written for back-facing fragments. The different signs in Equation (10) and (11) guarantee that contributions of fragments that correspond to target cells outside the tetrahedron, shaded in light-red in <ref type="figure" coords="6,22.50,592.35,29.18,8.02">Figure 6</ref>, will cancel out. The resulting net value written to the cell C in G is </p><formula>q = q b f + q f f = 0 if C ∩ T = / 0, q i dl else , </formula><formula>(12) </formula><p>where dl denotes the height of the intersection between T and C at the C's center, along the z-direction. After all tetrahedra are processed, each cell stores a local approximation of Equation (7). The resulting 3D texture is kept on the GPU and can, for example, be rendered using a standard GPU-based raycasting approach. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Cell-Projection</head><p> The third rendering method evaluates Equation (6) with a cellprojection method, computing the contributions ¯ q i dl i for each tetrahedron T i . Rewriting Equation (6) as </p><formula>q pro j = ∑ i ¯ q i |b i − f i | = ∑ i ¯ q i |b i − c| − ∑ i ¯ q i |c − f i | , </formula><formula>(13) </formula><p>where f i and b i denote the entry and exit points of the line of sight for T i and c is the current camera location shows that Equation (6) can be evaluated efficiently by separately adding the contributions of the front-facing and back-facing triangles. As in the previously discussed approaches, the vertices v i of each deformed cell are obtained by sampling the position texture in the vertex shader and the six tetrahedra are constructed in the geometry shader. The faces of the tetrahedra are rendered as triangle strips. A negative value of the volume formula Equation (9) indicates that the tetrahedron is inverted, and the order of vertices in the strip has to be adjusted to ensure consistent face orientations. The mass densities are computed from the volumes and handed over to the fragment shader as varying variables. In the fragment shader, the contributions ¯ q i dl i are computed for each tetrahedron T i . Therefore, the blending equation is set to the additive blending equation C src +C dest , and the fragment shader stores the contributions for fragments of front-facing triangles ∑ i ¯ q i |f i − c| in the red channel of the frame-buffer, and the contributions for back-facing fragments ∑ i ¯ q i |b i − c| in the green channel. After the triangles for all T i are processed, a separate fragment shader computes the final sum in Equation (13) by subtracting the partial sums that are stored in the red and green channels and the result for each pixel is written into the frame-buffer. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p> The comparison was performed using a Nvidia Quadro 6000 graphics card with 6 GByte of graphics memory, that was installed on a host with a Intel Xeon E5520 CPU and 24 GByte main memory. The rendering algorithms were implemented in OpenGL and the OpenGL Shading Language. <ref type="figure" coords="6,295.08,414.62,31.02,8.02">Figure 5</ref>shows a rendering of a dark matter simulation with 134 million tracer particles using the cell-projection approach from Section 4.4. <ref type="figure" coords="6,318.14,434.55,30.29,8.02" target="#fig_2">Figure 8</ref>shows a visualization of the multi-stream field, that counts the number of dark matter streams at each location in the computational domain. The data were resampled to a 512 3 grid, setting q i = 1 in Equations (10) and (11), to count the number of tetrahedra per cell, and rendered using a GPU-assisted ray-caster. Voids, shown in blue, sheet-like structures (red) and filaments (white), can be clearly distinguished. We further compared the image quality and performance of the three rendering methods proposed in Section 4 with three conventional approaches for density projections from a dark matter N-body simulation with 17.2 million particles, see <ref type="figure" coords="6,424.56,534.17,29.65,8.02">Figure 9</ref>. The screen size was 1460x860 pixels. In <ref type="figure" coords="6,358.42,544.14,29.78,8.02" target="#fig_2">Figure 8</ref> an emission-absorption scheme was chosen as the lighting model. In all other rendering examples shown in this paper, the resulting total mass density in the framebuffer was logarithmically rescaled in a separate fragment shader and mapped to colors via a 1D-texture lookup. Close-ups of the resulting images are shown in <ref type="figure" coords="6,470.21,593.95,29.63,8.02">Figure 9</ref> . For images a) and b), the tracer particles were rendered using cubic spline kernels, accumulating the contributions in the frame-buffer. The points were cached on the GPU using vertex-buffer arrays and the geometry for the view-port aligned billboards was generated in the geometry shader. For image a), constant kernel sizes were used for all particles. For image b), adaptive kernel sizes based on local density estimates were projected. These were obtained from the smallest spheres enclosing the 32 nearest neighbors around each particle, a standard approach in SPH simulations, as for example discussed by Springel et al. <ref type="bibr" coords="6,518.32,683.61,13.74,8.02" target="#b25">[26]</ref>. The sizes of the kernels were scaled proportional to ρ <ref type="figure" coords="7,31.50,318.33,20.77,8.02">Fig. 7</ref>: A direct comparison between our tetrahedral cell-projection approach (left) and a standard SPH adaptive kernel smoothing method. Artifacts due to the poor density estimates in low-density regions are obvious for the SPH method, whereas the tetrahedral approach achieves an overall high image quality, on small and large structures. </p><p> For image c), the Voronoi tessellation of the 17.1 million dark matter tracer particles was generated using the Voro++ library <ref type="bibr" coords="7,246.56,381.10,13.74,8.02" target="#b22">[23]</ref>. The density around each particle was computed from the volume of its Voronoi cell. The resulting density projection was generated via a cell-projection approach. Therefore, the cell faces were rendered separately in the GL POLY GON mode. In the fragment shader, the fragment's distance d to the camera location was computed and d ρ was written to the red-channel for front-facing fragments, and respectively to the green-channel for back-facing fragments. After all cells were processed, the difference between the red and green channels was written to the image buffer, yielding the line integral of the density, as discussed in Section 4. We were primarily interested in the image quality and did not optimize the rendering performance for the special case of Voronoi cells. Approaches like the one discussed by Muigg et al. <ref type="bibr" coords="7,266.94,500.65,14.94,8.02" target="#b18">[19] </ref>would certainly perform much faster, though problems would arise due to the large amount of geometry and connectivity information that has to be encoded in the 3D textures for the considered Voronoi mesh. Image d) in <ref type="figure" coords="7,65.42,540.50,30.24,8.02">Figure 9</ref>shows the rendering result for the same dataset and camera position using the centroid method described in Section 4.2. To ease comparison, we have used the same cubic spline profile for the six times more numerous tetrahedron centroids. Image e) was generated by resampling the 6 * 17.1 = 102.6 million tetrahedral elements onto a regular grid with 512 3 cells using the resampling approach discussed in Section 4.3. The resulting grid was rendered using a standard GPU-raycasting approach. Finally, image f) in <ref type="figure" coords="7,199.20,610.24,29.92,8.02">Figure 9</ref>was generated via the cell-projection approach for the 102.6 million tetrahedra, as discussed in Section 4.4. <ref type="figure" coords="7,127.47,630.16,30.93,8.02">Figure 7</ref>shows another direct comparison between the tetrahedral cell-projection approach and the SPH adaptive kernel smoothing method. An overview about the preprocessing times, the memory requirements and performance numbers are summarized in <ref type="figure" coords="7,71.84,670.01,25.30,8.02">Table 1</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">DISCUSSION</head><p> The images in Figures 7 and 9 clearly demonstrate the improved image quality of the new rendering methods, as depicted in images d) to f). Especially image f) and <ref type="figure" coords="7,144.44,726.46,30.84,8.02">Figure 7</ref> show that the proposed cellprojection approach achieves very high image quality, both in areas of <ref type="figure" coords="7,294.12,368.15,27.26,8.02">Table 1</ref>: Memory requirements and rendering performance of the 6 different methods, namely constant kernel smoothing (a), adaptive kernel smoothing (b), Voronoi tessellation (c), and the three new rendering methods based on the tetrahedral phase-space tessellation proposed in this paper, centroids (d), resampling (e) and cellprojection (f). a b c d e f memory <ref type="bibr" coords="7,332.23,443.66,32.87,8.02">[GBytes] </ref>in the filaments emerging from the central halo, and at the same time reveal significantly more finescale details in the central region of the dark matter halo. Caustics, formed at the locations where orbits of the dark matter fluid turn around, become clearly visible. At the same time, the centers of filaments and their inner and outer caustics become obvious. Filamentary and sheet like structures connecting dense knots (dark matter halos) are more easily recognized. The standard methods shown in images a) to c) suffer from rendering artifacts due to poor isotropic density estimates, resulting in quite high image noise. The noise for a) and b) could be reduced by increasing the overall kernel sizes, but this would result in an increased smoothing of the fine-scale details in the central region of the halo. However, the superior image quality of the cell-projection approach comes at the cost of a lower rendering performance compared to the point-based rendering methods in a) and b). Here the centroid and the resampling approaches offer a good trade-off, achieving still much better image quality than the traditional methods, while achieving comparable rendering performance as the point-splatting methods shown in images a) and b) of <ref type="figure" coords="7,378.04,696.57,29.55,8.02">Figure 9</ref>. Because the algorithms we propose generate all connectivity information and derived fields like mass density on the GPU on-the-fly, the memory resources and amount of data that need to be transferred between CPU and GPU are considerably smaller compared the standard Voronoi tessellation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Scientific Insights</head><p>The images in <ref type="figure" coords="8,77.00,375.10,30.62,8.02">Figure 7</ref> clearly demonstrate the superior image quality of the new rendering method. Perhaps even more interestingly is that it gives a deep insight in the origin of the artificial numerical fragmentation found in N-body techniques for more than 30 years, see <ref type="bibr" coords="8,22.50,414.95,13.74,8.02" target="#b26">[28]</ref>, and references therein. As the particles evolve and one thinks of them as regions that in some spherical kernel contain their mass, filaments become artificially clumpy. In the simulation itself, this artifact leads to a potential well which further deepens as the particles attract each other and accrete more particles from their surrounding. Consequently , entire halos are found to originate purely from errors made in the gravitational forces by assuming that the particles are isotropically softened gravitational point masses. Remarkably, the approach we use here is physically accurate and shows directly where such incorrect clumps originate. Our full tetrahedral projection method has the filaments shown in <ref type="figure" coords="8,107.75,514.58,30.71,8.02">Figure 7</ref>to be perfectly smooth and bounded by the caustics formed by particles orbiting in the filament potential and shows no sign of artificial clumping. From these images the domain scientists are given the important insight, that if they can construct solvers which use our density field to compute the gravitational potential from they will very likely be able to avoid these undesired numerical artifacts which have hindered reliable studies of the halo mass function in warm and hot dark matter models as well as the understanding of how in detail the very first dark matter halos form in the standard Cold Dark Matter model. Furthermore, for the first time our method allows reliably to check for the existence of caustics in the DM density distribution for simulations already run. The domain scientists have further benefited from being able to extract two dimensional slices through the data using the proposed methods. Previously, only full or partial projections had been shown, but being able to measure the density, velocities, etc. on infinitesimally thin slices had been missing. This capability allows also for a much closer visual comparison with the hydrodynamics properties of the gaseous matter typically evolved at the same time as the dark matter in the most sophisticated computational calculations. The images generated with the new rendering methods can be directly used as input for predictions of the gravitational lensing effect (cf. e.g. <ref type="bibr" coords="8,55.14,736.42,13.44,8.02" target="#b10">[11]</ref> ). Images of the mass density directly correspond to socalled convergence maps, but also so-called shear maps can be computed in a straight-forward way once an image is at hand. The clear advantage over previous approaches is the low noise level of our images that does not come at the price of a large isotropic filtering that washes out relevant small-scale structure. We are currently working on using the rendered images for this purpose. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Scalability to Large Data</head><p>As discussed in Section 4.3, the rendering methods presented in this paper also extend to datasets that exceed the available graphics memory . In this case, the 3D texture used to store the positional information is decomposed into separate sub-bricks, each of them small enough to fit entirely into graphics memory. It would be straight-forward to apply this technique to run the algorithms on a GPU-cluster, by distributing the separate bricks to the individual cluster-nodes. Each brick could be processed in parallel and the partial density projections would be added to obtain the final rendering result. The choice between the three different methods allows for a trade-off between performance and image quality for example by choosing the high quality cell-projection methods for regions close to the camera and the faster centroid approach for regions in the far field. This decision can be made on-the-fly in the geometry shader based on the distance of the point coordinates to the camera. An example of this is shown in <ref type="figure" coords="8,451.90,273.09,29.02,8.02">Figure 5</ref>. Alternatively and/or in addition to this, a multi-resolution hierarchy , for example an octree, can be constructed from the full-resolution 3D position texture. A texel on the first coarser level would store the center of mass as well as the averaged density of all tetrahedral elements represented by the texels on the highest level of resolution. The following coarser levels could then be constructed from these using techniques like for example discussed in Fraedrich et al. <ref type="bibr" coords="8,494.08,342.83,9.52,8.02" target="#b8">[9]</ref>. Again, regions close to the camera would be rendered via the cell-projection approach using the original resolution of the texture, whereas regions in the far field would be approximated using splatting techniques for the coarser resolution textures. <ref type="figure" coords="9,31.50,720.30,20.51,8.02">Fig. 9</ref>: Comparison between the visualizations of a dark matter halo simulation using three conventional techniques, namely constant kernel smoothing (a), adaptive kernel smoothing (b), voronoi tessellation (c), and the three new rendering methods based on the tetrahedral phase-space tessellation proposed in this paper, i. e. centroids (d), resampling (e) and cell-projection (f). The subimage on the right shows a close-up of the rectangular region of the left. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="1,33.49,699.32,244.40,6.86;1,31.50,708.78,144.33,6.86"><head></head><figDesc>Manuscript received 31 March 2012; accepted 1 August 2012; posted online 14 October 2012; mailed on 5 October 2012. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="4,22.50,510.60,250.38,8.02;4,22.50,520.56,250.38,8.02;4,22.50,530.53,250.38,8.02;4,22.50,540.49,203.67,8.02"><head>Fig</head><figDesc>Fig. 4: The decomposition of a cubical cell into six non-overlapping tetrahedra of constant volume used in this paper. This configuration introduces no new vertices besides the tracer particles of the simulation and ensures consistent edges and faces for abutting cells. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2" coords="8,22.50,304.04,250.38,8.02;8,22.50,314.00,250.38,8.02;8,22.50,323.96,207.86,8.02"><head>Fig. 8: </head><figDesc>Fig. 8: A visualization of the so-called multi-stream field that shows the number of dark matter streams at each location. Voids are shown in blue, sheet-like structures in red and filaments in white. </figDesc></figure>

			<note place="foot">ical quantities associated with N-body dark matter simulations, consider the 2-dimensional phase-space diagram in Figure 2, that shows the location of the fluid elements on the horizontal axis, versus their velocities on the vertical axis. x v Fig. 2: This 2D phase-space diagram shows the positions and velocities of the dark matter fluid for three different time-steps, in the order of red, green and blue. At the latest time depicted, several fluid elements occupy the same location in space (transparently shaded region ). The dots on the lines indicate the location of the tracer particles used by N-body simulations to trace the motion of the dark matter fluid over time. At early times, the dark matter fluid is almost uniformly distributed and at rest, as depicted by the red line in Figure 2. Over time, gravity accelerates the dark matter fluid elements and they gain velocity, denoted by the green line. At later times different streams of dark matter co-exist in the same spatial regions, in this example there are three regions per spatial location for elements on the blue line inside the transparent box. These so-called multi-stream regions provide important information about the formation of structures in the dark matter distribution on large spatial scales. The number of streams can be used to identify regions of very low matter density, so-called voids, as well as sheets, filaments and halos, which together form the so-called cosmic web. Voids correspond to regions with only one stream of dark matter particles, sheet-like structures can be defined by the existence of three streams, and higher values indicate the formation of filaments and dark matter halos, the locations where galaxies form. The dots on the lines correspond to the tracer particles used by the simulation to sample the motion of the collisionless dark matter fluid over time. At the initial time step, the tracer particles are distributed uniformly in the computational domain and their positions define the vertices of a cubical grid in the 3D case, or squares as depicted for a 2D example in the left image of Figure 3. Since each cell initially has the same volume and the mass distribution is nearly homogeneous over the computational domain, it is physically reasonable to assign a constant distribution function f (x, v,t) and thus constant mass m to each cell C i . Over time the N-body code will update the tracer particles according to the gravitational forces acting in the computational domain and this will cause the initial cubical grid cells to be deformed, as depicted in the middle image of Figure 3. At later times, when gravity induced even larger inhomogeneities in the matter distribution, the motion of the tracers leads to large numbers of cells overlapping in the spatial domain, as shown in the right image of Figure 3. The crucial observation for estimating physical quantities is based on the conservation of</note>

			<note place="foot">−1/3 i , where ρ i denotes the resulting density estimation for particle i. The adaptive kernel sizes were computed on the CPU using a kd-tree search tree and cached on the GPU along with the positions using vertex-buffer arrays.</note>

			<note place="foot" n="7"> CONCLUSIONS We presented three GPU-accelerated rendering approaches for N-body dark matter simulation data, based on a tetrahedral decomposition of the computational domain that allows a physically more accurate estimation of the mass density between the tracer particles than previous methods. They use the full phase-space information of the ensemble of dark matter tracer particles and two of them minimize pre-processing time (centroids and cell-projection) as well as data transfer between the CPU and GPU, by generating all connectivity information as well as the derived quantities, like mass density of the tetrahedral mesh elements, on the GPU. Thus these approaches are particularly well suited for time-dependent data. Their performance should benefit significantly from the increased number of cores expected for future generations of graphics hardware. We compared these new methods to three standard rendering approaches for dark matter simulations: two based on constant and adaptive kernel sizes that estimate the local densities from the nearestneighbors , as well as a Voronoi tessellation generated by the simulations tracer particles. We showed that our approaches yield considerably better image quality with less pre-processing times and graphics memory requirements. The full tetrahedral cell-projection methods clearly stands apart, however. Without artificial smoothing or density estimates derived from averaging over the particle distribution, features previously washed out, become clearly visible and give new insight in the physical large-scale features of the cosmic web, including voids, filaments and halos. ACKNOWLEDGMENTS This work was supported support by the National Science Foundation through award number AST-0808398 and the LDRD program at the SLAC National Accelerator Laboratory as well as the Terman fellowship at Stanford University.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct coords="10,40.76,74.58,232.12,7.13;10,40.76,84.05,232.12,7.13;10,40.76,93.51,232.12,7.13;10,40.76,102.97,232.12,7.13;10,40.76,112.44,80.59,7.13"  xml:id="b0">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Abazajian</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Z</forename>
				<surname>Zheng</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Zehavi</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">H</forename>
				<surname>Weinberg</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">A</forename>
				<surname>Frieman</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">A</forename>
				<surname>Berlind</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">R</forename>
				<surname>Blanton</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">N</forename>
				<forename type="middle">A</forename>
				<surname>Bahcall</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Brinkmann</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">P</forename>
				<surname>Schneider</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Tegmark</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cosmology and the Halo Occupation Distribution from Small-Scale Galaxy Clustering in the Sloan Digital Sky Survey. apj</title>
		<imprint>
			<date type="published" when="2005-06" />
			<biblScope unit="page" from="613" to="620" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,121.90,232.12,7.13;10,40.76,131.37,126.42,7.13"  xml:id="b1">
	<monogr>
		<title level="m" type="main">Tracing the Dark Matter Sheet in Phase Space</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Abel</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">O</forename>
				<surname>Hahn</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Kaehler</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,140.83,232.12,7.13;10,40.76,150.30,220.28,7.13"  xml:id="b2">
	<analytic>
		<title level="a" type="main">A New Method for Accurate Estimation of Velocity Field Statistics</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Bernardeau</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Van De Weygaert</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MNRAS</title>
		<imprint>
			<biblScope unit="volume">279</biblScope>
			<biblScope unit="page">693</biblScope>
			<date type="published" when="1996-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,159.76,232.12,7.13;10,40.76,169.23,232.12,7.13;10,40.76,178.69,136.92,7.13"  xml:id="b3">
	<monogr>
		<title level="m" type="main">Resolving cosmic structure formation with the Millennium-II Simulation . mnras</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Boylan-Kolchin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Springel</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">D M</forename>
				<surname>White</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Jenkins</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Lemson</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009-09" />
			<biblScope unit="page" from="1150" to="1164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,188.16,232.12,7.13;10,40.76,197.62,171.05,7.13"  xml:id="b4">
	<analytic>
		<title level="a" type="main">GPU-Assisted High Quality Particle Rendering</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Cha</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Son</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">I</forename>
				<surname>Ihm</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1247" to="1255" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,207.08,232.12,7.13;10,40.76,216.55,232.12,7.13;10,40.76,226.01,33.55,7.13"  xml:id="b5">
	<monogr>
		<title level="m" type="main">Numerical techniques for large cosmological N-body simulations. apjs</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Efstathiou</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Davis</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">D M</forename>
				<surname>White</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">C</forename>
				<forename type="middle">S</forename>
				<surname>Frenk</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1985-02" />
			<biblScope unit="page" from="241" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,235.48,232.12,7.13;10,40.76,244.94,232.12,7.13;10,40.76,254.49,232.12,6.86;10,40.76,263.87,229.52,7.13"  xml:id="b6">
	<analytic>
		<title level="a" type="main">High-Quality Hardware-Based Ray-Casting Volume Rendering Using Partial Pre-Integration</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Espinha</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Celes</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the XVIII Brazilian Symposium on Computer Graphics and Image Processing</title>
		<meeting>the XVIII Brazilian Symposium on Computer Graphics and Image Processing<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page">273</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,273.34,232.12,7.13;10,40.76,282.80,232.12,7.13;10,40.76,292.26,170.77,7.13"  xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient High-Quality Volume Rendering of SPH Data</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Fraedrich</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Auer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Westermann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="1533" to="1540" />
			<date type="published" when="2010-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,301.73,232.12,7.13;10,40.76,311.19,232.12,7.13;10,40.76,320.66,232.12,7.13;10,40.76,330.12,73.25,7.13"  xml:id="b8">
	<analytic>
		<title level="a" type="main">Exploring the Millennium Run -Scalable Rendering of Large-Scale Cosmological Datasets</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Fraedrich</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Schneider</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Westermann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1251" to="1258" />
			<date type="published" when="2009-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,339.59,232.12,7.13;10,40.76,349.05,232.12,7.13;10,40.76,358.52,207.75,7.13"  xml:id="b9">
	<analytic>
		<title level="a" type="main">Multiple uncertainties in timevariant cosmological particle data</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Haroz</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K.-L</forename>
				<surname>Ma</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Heitmann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Visualization Symposium</title>
		<meeting>IEEE Pacific Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2008-03" />
			<biblScope unit="page" from="207" to="214" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,367.98,232.12,7.13;10,40.76,377.45,232.12,7.13;10,40.76,386.91,232.12,7.13;10,40.76,396.37,17.93,7.13"  xml:id="b10">
	<analytic>
		<title level="a" type="main">Ray-tracing through the Millennium Simulation: Born corrections and lens-lens coupling in cosmic shear and galaxy-galaxy lensing</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Hilbert</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Hartlap</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">D M</forename>
				<surname>White</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Schneider</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">A&amp;A</title>
		<imprint>
			<biblScope unit="volume">499</biblScope>
			<biblScope unit="page" from="31" to="43" />
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,405.84,232.12,7.13;10,40.76,415.30,232.12,7.13;10,40.76,424.77,191.23,7.13"  xml:id="b11">
	<analytic>
		<title level="a" type="main">Hierarchical Splatting of Scattered Data</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Hopf</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Ertl</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th IEEE Visualization 2003 (VIS&apos;03), VIS &apos;03</title>
		<meeting>the 14th IEEE Visualization 2003 (VIS&apos;03), VIS &apos;03<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page">57</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,434.23,232.12,7.13;10,40.76,443.70,193.14,7.13"  xml:id="b12">
	<analytic>
		<title level="a" type="main">Hierarchical Splatting of Scattered 4D Data</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Hopf</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Luttenberger</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Ertl</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comput. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="64" to="72" />
			<date type="published" when="2004-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,453.16,232.12,7.13;10,40.76,462.63,232.12,7.13;10,40.76,472.09,73.28,7.13"  xml:id="b13">
	<analytic>
		<title/>
		<author>
			<persName>
				<forename type="first">Z</forename>
				<surname>Jin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Krokos</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Rivi</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Gheller</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Dolag</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Reinecke</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Highperformance Astrophysical Visualization using Splotch. Procedia CS</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1775" to="1784" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,481.55,232.12,7.13;10,40.76,491.02,232.12,7.13;10,40.76,500.48,145.33,7.13"  xml:id="b14">
	<analytic>
		<title level="a" type="main">Dark matter halos in the standard cosmological model: Results from the bolshoi simulation</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<forename type="middle">A</forename>
				<surname>Klypin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Trujillo-Gomez</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Primack</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Astrophysical Journal</title>
		<imprint>
			<biblScope unit="volume">740</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">102</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,509.95,232.12,7.13;10,40.76,519.41,232.12,7.13;10,40.76,528.88,232.12,7.13"  xml:id="b15">
	<analytic>
		<title level="a" type="main">Projecting tetrahedra without rendering artifacts</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Kraus</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">W</forename>
				<surname>Qiao</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">S</forename>
				<surname>Ebert</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the conference on Visualization &apos;04, VIS &apos;04</title>
		<meeting>the conference on Visualization &apos;04, VIS &apos;04<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,538.34,232.12,7.13;10,40.76,547.81,198.37,7.13"  xml:id="b16">
	<analytic>
		<title level="a" type="main">Hardware-Assisted Projected Tetrahedra</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Maximo</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Marroquim</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Farias</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="903" to="912" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,557.27,232.12,7.13;10,40.76,566.74,93.65,7.13"  xml:id="b17">
	<analytic>
		<title level="a" type="main">An introduction to SPH</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<forename type="middle">J</forename>
				<surname>Monaghan</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Physics Communications</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="89" to="96" />
			<date type="published" when="1988-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,576.20,232.12,7.13;10,40.76,585.66,232.12,7.13;10,40.76,595.13,216.04,7.13"  xml:id="b18">
	<analytic>
		<title level="a" type="main">Interactive Volume Visualization of General Polyhedral Grids</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Muigg</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Hadwiger</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Doleisch</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<forename type="middle">E</forename>
				<surname>Gröller</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transaction on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2115" to="2124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,604.59,183.65,7.13"  xml:id="b19">
	<monogr>
		<title level="m" type="main">Principles of Physical Cosmology</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">J E</forename>
				<surname>Peebles</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,614.06,232.12,7.13;10,40.76,623.52,232.12,7.13;10,40.76,632.99,169.61,7.13"  xml:id="b20">
	<monogr>
		<title level="m" type="main">The Evolution of Multistreaming Events in the Formation of Large Scale Structures</title>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Popov</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Heitmann</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Ahrens</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Habib</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Pang</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,642.45,232.12,7.13;10,40.76,651.92,139.13,7.13"  xml:id="b21">
	<monogr>
		<title level="m" type="main">SPLASH: An Interactive Visualisation Tool for Smoothed Particle Hydrodynamics Simulations</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<forename type="middle">J</forename>
				<surname>Price</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,661.38,232.12,7.13;10,40.76,671.27,35.47,6.15"  xml:id="b22">
	<monogr>
		<title level="m" type="main">The Voro++ Software Library</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Rycroft</surname>
			</persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,680.31,232.12,7.13;10,40.76,689.77,184.75,7.13"  xml:id="b23">
	<monogr>
		<title level="m" type="main">The Cosmic Web, Multi- Stream Flows, and Tessellations</title>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Shandarin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Habib</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Heitmann</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,699.24,232.12,7.13;10,40.76,708.70,232.12,7.13;10,40.76,718.17,231.79,7.13"  xml:id="b24">
	<analytic>
		<title level="a" type="main">A Polygonal Approximation to Direct Scalar Volume Rendering</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Shirley</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Tuchman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1990 workshop on Volume visualization, VVS &apos;90</title>
		<meeting>the 1990 workshop on Volume visualization, VVS &apos;90<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="63" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,40.76,727.63,232.12,7.13;10,40.76,737.10,162.57,7.13;10,285.12,54.06,250.38,7.13;10,303.38,63.52,181.57,7.13"  xml:id="b25">
	<analytic>
		<title level="a" type="main">The Cosmological Simulation Code Gadget-2</title>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Springel</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27] T. Szalay, V. Springel, and G. Lemson. GPU-Based Interactive Visualization of Billion Point Cosmological Simulations</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,72.99,232.12,7.13;10,303.38,82.45,175.35,7.13"  xml:id="b26">
	<monogr>
		<title level="m" type="main">Discreteness effects in simulations of hot/warm dark matter. mnras</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Wang</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<forename type="middle">D M</forename>
				<surname>White</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2007-09" />
			<biblScope unit="page" from="93" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,91.92,232.12,7.13;10,303.38,101.38,232.12,7.13;10,303.38,110.85,232.12,7.13;10,303.38,120.31,118.36,7.13"  xml:id="b27">
	<analytic>
		<title level="a" type="main">Hardware-software-balanced resampling for the interactive visualization of unstructured grids</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Weiler</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Ertl</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the conference on Visualization &apos;01, VIS &apos;01</title>
		<meeting>the conference on Visualization &apos;01, VIS &apos;01<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="199" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,129.78,232.12,7.13;10,303.38,139.24,232.12,7.13;10,303.38,148.70,232.12,7.13;10,303.38,158.17,59.26,7.13"  xml:id="b28">
	<analytic>
		<title level="a" type="main">Hardware-Based Ray Casting for Tetrahedral Meshes</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Weiler</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Kraus</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Merz</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Ertl</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th IEEE Visualization 2003 (VIS&apos;03), VIS &apos;03</title>
		<meeting>the 14th IEEE Visualization 2003 (VIS&apos;03), VIS &apos;03<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page">44</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,167.63,232.12,7.13;10,303.38,177.10,208.91,7.13"  xml:id="b29">
	<analytic>
		<title level="a" type="main">The rendering of unstructured grids revisited</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Westermann</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EG/IEEE TCVG Symposium on Visualization (VisSym &apos;01)</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,186.56,232.12,7.13;10,303.38,196.03,232.12,7.13;10,303.38,205.49,232.12,7.13;10,303.38,214.96,90.76,7.13"  xml:id="b30">
	<analytic>
		<title level="a" type="main">Tetrahedral projection using vertex shaders</title>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Wylie</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Moreland</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">L</forename>
				<forename type="middle">A</forename>
				<surname>Fisk</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Crossno</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2002 IEEE symposium on Volume visualization and graphics, VVS &apos;02</title>
		<meeting>the 2002 IEEE symposium on Volume visualization and graphics, VVS &apos;02<address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,224.42,232.12,7.13;10,303.38,233.88,232.12,7.13;10,303.38,243.35,90.87,7.13"  xml:id="b31">
	<analytic>
		<title level="a" type="main">Interactive point-based rendering of higherorder tetrahedral data</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Zhou</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Garland</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page">2006</biblScope>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,252.81,232.12,7.13;10,303.38,262.28,75.28,7.13"  xml:id="b32">
	<analytic>
		<title level="a" type="main">Animating sand as a fluid</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Zhu</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Bridson</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="965" to="972" />
			<date type="published" when="2005-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="10,303.38,271.74,232.12,7.13;10,303.38,281.21,59.55,7.13"  xml:id="b33">
	<monogr>
		<title level="m" type="main">On the Masses of Nebulae and of Clusters of Nebulae. apj</title>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Zwicky</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1937-10" />
			<biblScope unit="page">217</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
