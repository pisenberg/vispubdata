<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.1" ident="GROBID" when="2016-09-09T15:03+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Generalized Topological Simplification of Scalar Fields on Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Julien</forename>
								<surname>Tierny</surname>
							</persName>
						</author>
						<author>
							<persName>
								<forename type="first">Valerio</forename>
								<surname>Pascucci</surname>
								<roleName>Member, Ieee</roleName>
							</persName>
						</author>
						<title level="a" type="main">Generalized Topological Simplification of Scalar Fields on Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Index Terms—Scalar field visualization</term>
					<term>scalar field design</term>
					<term>topological simplification</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Given an input scalar field f (left), our combinatorial algorithm generates a simplified function g that provably admits only critical points from a constrained subset of the singularities of f. Our approach is completely oblivious to the employed feature selection strategy, while guaranteeing a small distance ||f − g||∞ for data-fitting purpose. Thus it supports application-dependent simplification scenarios such as the removal of singularities based on local geometrical measures, interactive user selection or even random selection. The topology of the resulting field is summarized with the inset Reeb graphs for illustration purpose. Abstract—We present a combinatorial algorithm for the general topological simplification of scalar fields on surfaces. Given a scalar field f , our algorithm generates a simplified field g that provably admits only critical points from a constrained subset of the singularities of f , while guaranteeing a small distance ||f − g||∞ for data-fitting purpose. In contrast to previous algorithms, our approach is oblivious to the strategy used for selecting features of interest and allows critical points to be removed arbitrarily. When topological persistence is used to select the features of interest, our algorithm produces a standard-simplification. Our approach is based on a new iterative algorithm for the constrained reconstruction of sub-and sur-level sets. Extensive experiments show that the number of iterations required for our algorithm to converge is rarely greater than 2 and never greater than 5, yielding O(n log(n)) practical time performances. The algorithm handles triangulated surfaces with or without boundary and is robust to the presence of multi-saddles in the input. It is simple to implement, fast in practice and more general than previous techniques. Practically, our approach allows a user to arbitrarily simplify the topology of an input function and robustly generate the corresponding simplified function. An appealing application area of our algorithm is in scalar field design since it enables, without any threshold parameter, the robust pruning of topological noise as selected by the user. This is needed for example to get rid of inaccuracies introduced by numerical solvers, thereby providing topological guarantees needed for certified geometry processing. Experiments show this ability to eliminate numerical noise as well as validate the time efficiency and accuracy of our algorithm. We provide a lightweight C++ implementation as supplemental material that can be used for topological cleaning on surface meshes.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p> As scientific data-sets become more intricate and larger in size, advanced data analysis algorithms are needed for their efficient visualization . For scalar field visualization, topological analysis techniques have shown to be practical solutions in various contexts by enabling the concise and complete capture of the structure of the input data @BULLET Julien Tierny is with the CNRS at Telecom ParisTech, France. E-mail: tierny@telecom-paristech.fr. @BULLET Valerio Pascucci is with the SCI Institute at the University of Utah, the into high-level topological abstractions such as contour trees <ref type="bibr" coords="1,523.25,574.94,9.71,8.02" target="#b4">[5,</ref><ref type="bibr" coords="1,534.79,574.94,6.47,8.02" target="#b5"> 6]</ref>, Reeb graphs <ref type="bibr" coords="1,342.14,584.90,14.19,8.02" target="#b15">[16,</ref><ref type="bibr" coords="1,357.90,584.90,10.65,8.02" target="#b19"> 20]</ref>, or Morse-Smale complexes <ref type="bibr" coords="1,477.47,584.90,9.71,8.02" target="#b7">[8,</ref><ref type="bibr" coords="1,488.75,584.90,10.65,8.02" target="#b12"> 13]</ref>. Moreover, important advances have been made regarding the analysis of topological noise with the formalism of topological persistence <ref type="bibr" coords="1,512.23,604.83,9.52,8.02" target="#b8">[9]</ref> . Persistence offers a simple extension to the existing topological abstractions , enabling their multi-resolution representations and consequent progressive data explorations. However, since the notion of feature is application-dependent, in many scenarios using persistence to prioritize topological cancellations can be inappropriate for selecting features of interest (depending on the characteristics of the noise). For this reason, users often employ ad-hoc feature identification strategies that combine several criteria to determine which topological cancellations should be considered signal or noise. For instance, Carr et al. <ref type="bibr" coords="1,534.04,694.49,10.45,8.02" target="#b5">[6] </ref>introduced simplification metrics based on local geometrical measures such as contour length, volume, hyper-volume, etc. For medical data, for example, these metrics have been shown to be much more effective than persistence. </p><p>While existing simplification schemes produce multi-resolution representations of the topological abstractions, they do not perform an actual simplification of the underlying scalar field. This can often be useful for further analysis. Moreover, in contexts such as scalar field visualization or design, it is desirable to obtain a simplified version of the input field directly without having to compute a computationally expensive topological abstraction. Also, the time complexities of many topological abstraction algorithms are dependent on the number of critical points in the input field. Hence, simplifying the field beforehand can also be beneficial for more sophisticated topological analysis. In this paper, we present a new combinatorial algorithm for the general simplification of scalar fields on surfaces. Our algorithm is simple, fast in practice, and more general than previous techniques. Given a scalar field f , our algorithm generates a simplified function g that provably admits only critical points from a constrained subset of the singularities of f , while guaranteeing a small distance ||f − g||∞ for data-fitting purpose. In contrast to previous combinatorial approaches , our algorithm is oblivious to the strategy used for selecting features of interest and allows critical points to be removed arbitrarily (<ref type="figure" coords="2,38.08,253.10,19.65,8.02">Fig. 1</ref>). In the special case where topological persistence is used as a feature identification criteria, our algorithm generates a standard -simplification <ref type="bibr" coords="2,81.27,273.03,13.74,8.02" target="#b9">[10]</ref>. The algorithm is simple to implement, handles surfaces with or without boundary, and is robust to the presence of multi-saddles (the input is not restricted to a true Morse function). Extensive experiments show the generality of our algorithm as well as its high performance. In particular, the iterative nature of the approach could require a large number of passes but in practice we have not found example requiring more than five iterations (normally only two are needed). For this reason the experimental results show an O(n log(n)) practical performance. To demonstrate the use of our approach, we present applications in terrain simplification and scalar field design. We believe the latter application to be particularly appealing as the algorithm, without any threshold parameter, robustly removes topological noise that arises from the use of numerical solvers in traditional scalar field design. This additional quality control enables scalar field design with topological guarantees for certified geometry processing. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Related work</head><p>The direct simplification of scalar fields given topological constraints is a subject that has only recently received attention. Existing techniques can be classified into two (complementary) categories. Numerical approaches aim at approximating a desired solution by solving partial differential equations, where a subset of the input singularities are used as topological constraints while smoothness constraints are often used to enforce geometry quality. The first work in this direction was presented by Bremer et al. <ref type="bibr" coords="2,197.09,526.74,9.52,8.02" target="#b3">[4]</ref>, where simplified Morse-Smale complexes are used to guide an iterative and localized simplification of the field based on Laplacian smoothing. However, the actual simplification process needs a (simplified) Morse-Smale complex as an input, which is computationally expensive to obtain. Moreover, it converges slowly and provides no error bounds on the interior of the complex cells. In the context of geometry processing, approaches have been presented for the computation of smooth Morse functions with a minimal number of critical points <ref type="bibr" coords="2,207.05,606.44,14.19,8.02" target="#b11">[12,</ref><ref type="bibr" coords="2,222.55,606.44,10.65,8.02" target="#b14"> 15]</ref>. Patanè et al. <ref type="bibr" coords="2,34.34,616.40,14.94,8.02" target="#b16">[17] </ref> presented a general framework for the topology-driven simplification of scalar fields based on a combination of least-squares approximation and Tikhonov regularization. Weinkauf et al. <ref type="bibr" coords="2,242.09,636.33,14.94,8.02" target="#b21">[22] </ref>improved the work by Bremer et al. <ref type="bibr" coords="2,145.75,646.29,10.45,8.02" target="#b3">[4] </ref>with bi-Laplacian optimization, resulting in smoother (C 1 ) output fields. However, numerical approaches have several common drawbacks. First, they are time consuming. Second, and more important, they are prone to numerical instabilities, either due to (a) the poor quality of the triangulation of the input domain, (b) the numerical sensitivity of the geometrical operators employed in the system of equations, or (c) numerical precision errors. As demonstrated in Sec. 5, these numerical instabilities may often generate additional critical points in the output field (potentially with high persistence), preventing it from strictly conforming to the input topological constraints. Combinatorial approaches aim at providing a solution with provable correctness that is not prone to numerical instabilities. In a sense, they can be complementary to numerical techniques by fixing the possible numerical issues as a post-process. The first research in this direction, on a related yet different problem, can be attributed to <ref type="bibr" coords="2,487.69,103.48,47.81,8.02;2,285.12,113.44,18.48,8.02">Edelsbrunner et al. </ref>with the notion of -simplification <ref type="bibr" coords="2,439.31,113.44,13.74,8.02" target="#b9">[10]</ref>. Given a target error bound , the goal of their algorithm is to produce an output field everywhere at most -distant from the input, such that all the remaining pairs of critical points have persistence greater than . Their algorithm can be seen as an extension of early work on digital terrain processing, where only minimum-saddle persistence pairs were discarded <ref type="bibr" coords="2,510.26,163.26,9.71,8.02" target="#b0">[1,</ref><ref type="bibr" coords="2,521.30,163.26,10.65,8.02" target="#b18"> 19]</ref>. However, their algorithm is complicated and difficult to implement. Moreover, as persistence pairs are processed in order of their highest extremity, the same vertices are swept several times when cancelable persistence pairs are nested. Recently, Attali et al. <ref type="bibr" coords="2,474.91,203.11,10.45,8.02" target="#b1">[2] </ref>and Bauer et al. <ref type="bibr" coords="2,296.06,213.07,10.45,8.02" target="#b2">[3] </ref>presented independently a similar approach for -simplification computation. By using radix sort with fixed word size, these algorithms admit linear time complexity (in practice, O(n log(n)) with a classical quick sort). Also, by locally reversing the gradient of the field, the authors show that multiple persistence pairs can be cancelled with only one procedure, even if they are nested <ref type="bibr" coords="2,463.38,262.88,9.52,8.02" target="#b2">[3]</ref>. However, these approaches suffer from several drawbacks. First, their input is a filtration (or equivalently a Discrete Morse function <ref type="bibr" coords="2,458.14,282.81,13.44,8.02" target="#b10">[11]</ref>). Converting the output of these algorithms into piecewise linear (PL) functions (which is the standard scalar field representation for any application) requires an important subdivision of the surface mesh (one new vertex per edge and per face), which can increase the size of the mesh up to an order of magnitude. In many applications, such an important domain subdivision would not be acceptable. Also, these approaches only deal with closed surfaces. The authors address this issue by artificially closing each boundary component, which does not guarantee consistently processed boundaries in the PL output once the surface is re-opened afterwards . In contrast, our algorithm works on PL functions defined on surfaces with or without boundary. Additionally, it addresses a more general problem for which -simplification is a special case. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Contributions</head><p>This paper makes the following new contributions: 1. Approach: An approach for the topological simplification of scalar fields that does not rely on persistent homology. It yields a simpler, more intuitive, and general setting. We enumerate the critical points that are non-removable because of the topology of the domain. We consequently derive a strategy that supports the suppression of arbitrary removable critical points of the field. This enables the development of a more general simplification framework than previous approaches, for which -simplification is a special case. 2. Algorithm: An iterative, combinatorial simplification algorithm which is very simple to implement (only a few dozens of lines of C++ code). Given a set of user constraints on the extrema of the output function, our algorithm automatically identifies and removes the optimal set of saddles with regard to ||f − g||∞, hence guaranteeing a small distance between the input and the output. In contrast to previous approaches, our technique works directly on PL scalar field representations, is robust to multisaddles , and handles surfaces with or without boundary. The algorithm uses no computationally expensive topological abstraction , such as a Morse-Smale complex or even a contour tree; hence it is very fast in practice. Our extensive experiments on approximated worst-case scenarios show that this iterative algorithm rarely takes more than two iterations to converge. 3. Application: We introduce the foundations for a robust, parameter-free, technique allowing intuitive scalar field design with topological guarantees. The user can select an arbitrary set of extrema to preserve with the guaranteed removal of all others . This leads to a more intuitive user interaction that does not require the user to understand sophisticated topological concepts such as persistence. For traditional automated scalar field design, . Scalar field on a terrain (left). A level set is shown in blue; a contour is shown in white. Vertices can be classified according to the connectivity of their lower (blue) and upper links (green). From left to right: a minimum (a), a regular vertex (b), a saddle (c), a maximum (d). numerical instabilities can easily lead to undesired topological noise. Our approach can be used to automatically fix this problem by simplifying any extraneous critical points introduced due to numerical instability. We provide a lightweight C++ implementation that can be used as a black-box post-process for fixing such problematic situations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRELIMINARIES</head><p> This section briefly describes our formal setting and presents preliminary results. An introduction to Morse theory can be found in <ref type="bibr" coords="3,254.67,266.45,13.74,8.02" target="#b13">[14]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Background</head><p>The input to our algorithm is a piecewise linear (PL) scalar field f : S → R defined on an orientable PL 2-manifold S. It has value on the vertices of S and is linearly interpolated on the simplices of higher dimension. Given an isovalue i, the level set L(i) is defined as the inverse image of i onto S through f : L(i) = f −1 (i). Each connected component of L(i) is called a contour. The sub-level set L − (i) is defined as the inverse image of the open interval (−∞, i) onto S through f , L − (i) = {p ∈ S / f (p) &lt; i}. Symmetrically, the sur-level set L + (i) is defined by L + (i) = {p ∈ S / f (p) &gt; i}. As i changes continuously in R, the points at which the topology of a contour changes are called critical points. In the PL setting, those occur on vertices. Critical points can be classified with simple and inexpensive operations (<ref type="figure" coords="3,54.85,416.04,19.46,8.02" target="#fig_0">Fig. 2</ref>). The star St(v) of a simplex v is the set of simplices σ that contain v as a face. The link Lk(v) of a simplex v is the set of simplices in the closure of the star of v that are not also in the star: Lk(v) = St(v) − St(v). The lower link Lk − (v) of v is the subset of Lk(v) containing only simplices with all their vertices lower in function value than v: Lk − (v) = {σ ∈ Lk(v) / ∀u ∈ σ : f (u) &lt; f (v)}. The upper link Lk + (v) is defined by: Lk + (v) = {σ ∈ Lk(v) / ∀u ∈ </p><formula>σ : f (u) &gt; f (v)}. </formula><p>Definition 1 (Critical Point) A vertex v of S is regular if and only if both Lk − (v) and Lk + (v) are simply connected, otherwise v is a critical point of f . </p><formula>If Lk − (v) </formula><p>is empty, v is a minimum. Otherwise, if Lk + (v) is empty, v is a maximum. If v is neither regular, nor a minimum nor a maximum , it is a saddle. Critical points can be classified by their index. For surfaces, minima, saddles, and maxima have index 0, 1 and 2 respectively . A sufficient condition for the above classification is that all the vertices of S admit distinct f values (no degenerate flat plateaus), which can be obtained easily with symbolic perturbation (Sec. 3). To simplify the discussion, we assume in the following that all of the saddles of f are simple (f is then a Morse function <ref type="bibr" coords="3,213.31,619.09,14.34,8.02" target="#b13">[14]</ref>) and that S is processed on a per connected component basis. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">General simplification of scalar fields on surfaces</head><p>Definition 2 (General Topological Simplification) Given a field f : S → R with its set of critical points C f , we call a general simplification of f a scalar field g : S → R such that the critical points of g form a sub-set of C f : Cg ⊆ C f (with identical indices and locations). </p><p> It is often additionally desired that ||f − g||∞ is minimized for datafitting purpose. In other words, general simplification consists in constructing a close variant of the input field f from which a set of critical points has been removed. We describe the possible removals:  Closed surfaces The Morse-Euler relation defines a dependency between the number of critical points of f and χS (the Euler characteristic of S), where C I f is the set of critical points of f of index I: </p><formula>χS = I∈{0,1,2} (−1) I |C I f | = # min(f ) − # saddles(f ) + # max(f ) (1) </formula><p>It follows that removing only one extremum, such that the total number of critical points strictly decreases, implies the removal of one saddle (to maintain χS invariant) and reciprocally. In other words, the removal of the saddles of f are dependent on the removal of its extrema. Certain saddles of f cannot be removed: </p><formula>χS = 2 − 2gS = # min(f ) − # saddles(f ) + # max(f ) (2) </formula><p>It follows that f counts exactly 2gS non-removable saddles, located along the gS handles of the surface (<ref type="figure" coords="3,425.61,342.77,19.35,8.02" target="#fig_1">Fig. 3</ref>(b)</p><p>). Surfaces with boundary The above properties are valid for surfaces with boundary. In addition, for each boundary component B ⊆ ∂S, certain saddles cannot be removed. Let fB be the restriction of f to B, and C f B its critical points that we call stratified critical points. By construction, B is a closed PL 1-manifold. Then: </p><formula>χB = I∈{0,1} (−1) I |C I f B | = # min(f B ) − # max(f B ) = 0 (3) </formula><p>It follows that B has an even number of stratified critical points. These cannot be regular points of f on S. For instance, if a maximum of fB is only surrounded on the interior of S by vertices with higher f values (<ref type="figure" coords="3,323.29,474.40,20.13,8.02" target="#fig_1">Fig. 3</ref>(c), right), its lower link is by construction not simply connected; therefore it turns into a saddle of f . If it is only surrounded by vertices with lower f values (<ref type="figure" coords="3,418.55,494.32,20.52,8.02" target="#fig_1">Fig. 3</ref>(d), right), then it turns into a maximum of f (otherwise it is a multi-saddle but f is assumed so far to have only simple saddles). The symmetric property holds for the minima of fB. Since f is required to admit distinct values for each vertex, fB admits a pair of global stratified extrema (<ref type="figure" coords="3,480.21,534.17,18.91,8.02" target="#fig_1">Fig. 3</ref>(c), middle). Consequently, each boundary component of S necessarily has a pair of critical points of f . If these two points are extrema, they can be removed only if they are not the only extrema of f , leaving a necessary saddle in place in exchange. Otherwise, these necessary critical points are non-removable saddles of f (<ref type="figure" coords="3,418.02,583.99,20.34,8.02" target="#fig_1">Fig. 3</ref>(c), left). In conclusion, the removal of the saddles of f is completely dependent on the removal of its extrema, and for particular cases (summarized in <ref type="figure" coords="3,493.55,603.91,20.38,8.02" target="#fig_1">Fig. 3</ref>) certain critical points are non-removable. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Surface scalar field constrained topology</head><p>As discussed in the previous sub-section, the removal of the saddles of f is dependent on the removal of its extrema. Then, given the sets of input constraints C 0 g and C 2 g (the extrema of g), the target of general simplification is to constrain the topology of the level lines of f such that the output field g is close to f and admits as saddles a valid subset of C 1 f (such that the Morse-Euler relation still holds, Eq. 1). To constrain the topology of the level lines L(i) of f , our strategy is to constrain the topology of both the sub-and sur-level sets of f (L − (i) and L + (i) respectively), which is more practical to achieve. We show in the following that, for surfaces, controlling the connectivity only of 2007 TIERNY AND PASCUCCI: GENERALIZED TOPOLOGICAL SIMPLIFICATION OF SCALAR FIELDS ON SURFACES </p><formula>L − (i) and L + (i) </formula><p> is sufficient to enforce the removal (or the preservation ) of the removable critical points of f . Let f − : S → R be a Morse function with only one maximum and several minima (<ref type="figure" coords="4,82.93,231.29,19.26,8.02" target="#fig_2">Fig. 4</ref> ). Let β0(X ) be the number of connected components of X . Since f − has only one maximum, β0(L + (i)) = 1 for all the i values under the maximum (each vertex of L + (i) has a nonempty upper link and thus admits a connected path to the maximum). Minima A minimum at isovalue i has an empty lower link; then there exists no connected path on L − (i) linking this minimum to other lower minima. Thus, as i changes continuously in R, when passing through a minimum of f − , a new connected component of L − (i) has to be created and β0(L − (i)) increases (<ref type="figure" coords="4,165.88,311.95,19.35,8.02" target="#fig_2">Fig. 4</ref>(b)). Regular vertices The lower link of a regular vertex at isovalue i is made of one connected component. Then, (a) it cannot merge distinct components of L − (i) and (b) there exists connected paths on L − (i) linking it to lower minima. Thus, passing through a regular point does neither (a) decrease nor (b) increase β0(L − (i)). Interior saddles By construction, the lower link of a simple saddle on the interior of S is made of two connected components (<ref type="figure" coords="4,237.17,383.62,19.32,8.02" target="#fig_0">Fig. 2</ref>(c)). These components can either be linked to (a) the same or to (b) distinct connected components of L − (i). In the latter case (b), β0(L − (i)) decreases when passing the saddle. In the former case (a), neither β0(L + (i)) nor β0(L − (i)) changes (β0(L + (i)) = 1 for all i below the maximum). However, since f − is Morse, L(i) changes its topology at the saddle. In the interior of surfaces, the only possible topological change of L(i) is a change of β0(L(i)). Saddles which change β0(L(i)) while preserving β0(L + (i)) and β0(L − (i)) have been shown to correspond to the saddles opening or closing the loops of the Reeb graph of the function <ref type="bibr" coords="4,149.59,483.24,14.94,8.02" target="#b19">[20] </ref>and for surfaces, these loops correspond to the handles of the surface <ref type="bibr" coords="4,172.67,493.21,9.52,8.02" target="#b6">[7]</ref>. Thus, the only interior saddles of f − for which β0(L − (i)) does not change are the 2gS nonremovable saddles (<ref type="figure" coords="4,94.31,513.13,19.73,8.02" target="#fig_1">Fig. 3</ref>(b) and <ref type="figure" coords="4,142.67,513.13,19.80,8.02" target="#fig_2">Fig. 4</ref>(d)). Boundary saddles Simple boundary saddles can be classified in two categories. In the first case (called join saddles), the lower link is made of two components (each lying on the same boundary component B ⊆ ∂S) and the upper link of one (<ref type="figure" coords="4,174.18,553.95,29.35,8.02" target="#fig_2">Fig. 4(e)</ref>). The second case (split saddles) is symmetric: the lower link is made of one component and the upper link is made of two components on the boundary . Since β0(L + (i)) = 1 (f − has only one maximum) and since their lower link is made of only one component, neither β0(L + (i)) nor β0(L − (i)) changes when passing split saddles. For a join saddle, noted sj, the two components of the lower link can either be linked to (a) the same or to (b) distinct connected components of L − (i). In the latter case (b), β0(L − (i)) decreases when passing sj. Otherwise (a), neither β0(L − (i)) nor β0(L + (i)) changes and there exists a connected path on L − (i) connecting the two components of the lower link of sj. This path encloses the boundary component B on which sj lies (<ref type="figure" coords="4,25.94,673.50,19.30,8.02" target="#fig_2">Fig. 4</ref>(e)</p><p>). This implies that {B − sj} ⊂ L − (i) since L + (i) is made of only one component (the presence of a vertex on B with a value higher than i would then imply that β0(L + (i)) &gt; 1). Thus, sj is the stratified global maximum of f − B . In other words, for each boundary component B ⊆ ∂S, the only join saddle of f − for which β0(L − (i)) does not change is a non-removable saddle (<ref type="figure" coords="4,181.71,725.50,19.23,8.02" target="#fig_1">Fig. 3</ref>). Maximum The lower link of a maximum is made of only one connected component. Then, a maximum cannot merge or create a new component of L − (i). Thus β0(L − (i)) does not change when passing through a maximum (<ref type="figure" coords="4,363.53,73.31,28.44,8.02" target="#fig_2">Fig. 4(f)</ref>). The symmetric properties hold for a Morse function f + : S → R admitting only one minimum and several maxima. Since the input fields are assumed to be Morse functions, when passing through a given critical point, only one topological event can occur at a time on the level set <ref type="bibr" coords="4,331.11,123.12,13.74,8.02" target="#b13">[14]</ref>, which enables the viewing of each critical point as an instance of the cases reviewed above. Then, in conclusion, the only critical points of the field for which both β0(L − (i)) and β0(L + (i)) do not evolve are the non-removable saddles due to the topology of S (Sec. 2.2); for the removable critical points of f , either β0(L − (i)) or β0(L + (i)) changes. Thus, it is possible to constrain the topology of the output field g by only controlling the connectivity of L − (i) and L + (i). The next section presents an algorithm exploiting this property. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ALGORITHM</head><p>Our algorithm naturally follows from the properties discussed in Sec. 2. Given the constraints C 0 g and C 2 g , it iteratively reconstructs the corresponding sub-and sur-level sets, while removing the optimal set of saddles with regard to the L∞ norm. The remainder of this section is organized as follows. The algorithm, which consists in alternating sub-and sur-level set constrained reconstruction, is described in Sec. 3.1, where it is shown to converge to an output field whose topology conforms to the input constraints C 0 g and C 2 g . Then, in Sec. 3.2, the properties of the algorithm are discussed. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="14"></head><p>T ← {T ∪ {vn ∈ Lk(v) | vn is not visited}}; </p><formula>15 A[i] ← v; 16 i ← i + 1; 17 until T = ∅; </formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="18">19</head><p>// Scalar and offset value update, for all the vertices. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="20"></head><p>// Make the ordering on g (scalar and offset values) consistent with the order of visit. </p><formula>21 for j ← 0 to n do 22 if j = 0 &amp;&amp; f (A[j]) &lt; g(A[j − 1]) then 23 g(A[j]) ← g(A[j − 1]); 24 else 25 g(A[j]) ← f (A[j]); 26 O(A[j]) ← j; 27 end 28 </formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Algorithm description</head><p>In the following, we start by describing the algorithm for sub-level set constrained reconstruction. Sub-level set constrained reconstruction The pseudo-code for sublevel constrained reconstruction is given in Algorithm 1. To guarantee that the input field admits distinct values on each vertex, symbolic perturbation is used. In addition to its scalar value, each vertex v is associated with an integer offset (noted O(v)) initially set to the actual offset of the vertex in memory. When comparing two vertices (for critical point classification for instance), if these share the same scalar value, their order is disambiguated by their offset O. Algorithm 1 modifies both vertex scalar values and offsets. The algorithm starts by pushing the minima constraints C 0 g into a self-balancing binary search tree (noted T , line 8) ordered by scalar value and offset. Then, the sub-level sets are iteratively reconstructed  (line 10 to 18), one vertex at a time, in a flooding fashion: the unvisited neighbors of the visited vertex are added to T and the vertices of T are uniquely visited in increasing order of scalar value (and offset) until the entire domain is processed. For instance, <ref type="figure" coords="5,223.61,265.80,44.42,8.02" target="#fig_4">Fig 5 shows</ref>the removal of the lowest minimum of f . Hence, all the minima of f have been added to C 0 g except for the global minimum. The corresponding flooding is progressively shown in the middle of <ref type="figure" coords="5,206.02,295.69,19.72,8.02" target="#fig_4">Fig. 5</ref> , where the visited and unvisited vertices appear in blue and green respectively. The resulting order of visit of each vertex is stored in the array A. The last step of the algorithm (line 22 to 27) traverses A and updates the vertex scalar values and offsets such that the order defined by the output field is equivalent to the order of visit of the vertices (then the sublevel sets L − (i) of the output field indeed correspond to the iteratively reconstructed sub-level sets). As shown in <ref type="figure" coords="5,186.91,365.42,21.16,8.02" target="#fig_4">Fig. 5</ref>(right), this strategy for function value update has the effect of flattening the output in the vicinity of the removed minima. Since the sub-level sets are grown by adding the vertices of T with smallest function value first, if a connected component of L − (i) were to hit a minimum constraint m ∈ C 0 g before the latter was popped out of T , this would imply that m had a neighbor with lower initial function value, through which the component entered the link of m. This implies that m was not a minimum in the input, which is an invalid constraint. Then, for each m ∈ C 0 g , m is visited before the vertices of its link; hence the vertices of C 0 g are all minima in the output. The other vertices which do not belong to C 0 g can only be visited by the iterative growth of L − (i), after that one of the vertices of their link has been visited. Hence, their lower link is not empty in the output and the vertices m ∈ C 0 g are then the only minima of the output (<ref type="figure" coords="5,236.04,510.84,19.23,8.02" target="#fig_4">Fig. 5</ref>). When passing a saddle s of the input which used to join distinct components of sub-level sets, if only one component of L − (i) hits the saddle, this implies that the minimum which created initially the other component does not belong to the constraints C 0 g . Then, the component of L − (i) traverses s and continues to grow by visiting vertices with smallest values first, eventually sweeping the removed minimum (<ref type="figure" coords="5,34.94,583.65,19.35,8.02" target="#fig_4">Fig. 5</ref>(b)-(d)). Otherwise, s is maintained as a saddle in the output. Hence, the algorithm implicitly removes saddles given the extrema constraints and guarantees a valid topology of the output. Note that, since the algorithm visits the vertices of T with smallest value first, the saddle removed with one minimum m is the lowest saddle s which used to join the sub-level set component created by m in the input (i.e. the next saddle from m up the join tree <ref type="bibr" coords="5,196.04,645.09,9.56,8.02" target="#b4">[5]</ref>): thus the algorithm minimizes |f (m) − f (s)| when removing one saddle s along with one minimum m. Since the update of function value will lift m up to the level of s (g(m) ← f (s), line 22 to 27 of algorithm 1), ||f − g||∞ will be equal to |f (m) − f (s)| (for instance, in <ref type="figure" coords="5,187.68,684.94,19.78,8.02" target="#fig_5">Fig. 6</ref>, B is lifted up to the level of E). Thus the algorithm removes the optimal set of saddles with regard to ||f − g||∞, hence guaranteeing a small distance between the input and the output (for the regions where no simplification is needed, the function is unaltered). Sur-level set constrained reconstruction The constraints C 2 g are . Sub-level set constrained reconstruction can introduce residual maxima (red spheres): in (a), all the neighbors of D are visited before it, hence yielding a maximum (b). Symmetrically, in (b), all the neighbors of B are visited before it, yielding a minimum (c). Alternating sub-and surlevel set reconstruction reduces the (offset) function difference between the residual extrema and their corresponding saddle (cf. vertex ordering, bottom), and converges to the removal of all the residuals. forced with the symmetric algorithm: the vertices of C 2 g are initially pushed in T and the vertices of T are visited in decreasing order of function value (the update of the function values is also symmetric). Overall algorithm As shown in <ref type="figure" coords="5,418.74,462.16,21.13,8.02" target="#fig_5">Fig. 6</ref> , while algorithm 1 guarantees that the constraints C 0 g will be the only minima of the output, it does not guarantee that C 2 g will be the only maxima. When the reconstructed sub-level set removes a saddle, the algorithm visits the vertices of lowest function value in priority, possibly leaving islands of non-visited vertices behind (<ref type="figure" coords="5,406.38,513.40,19.23,8.02" target="#fig_5">Fig. 6</ref>(a)), yielding residual maxima in the output function (<ref type="figure" coords="5,370.86,523.37,30.38,8.02" target="#fig_5">Fig. 6(b)</ref>). The symmetric remark goes for the sur-level set reconstruction regarding minima constraints. To remove these residuals, our overall algorithm successively alternates sub-and sur-level set reconstructions until C 0 g and C 2 g are the only extrema. We show in the following that this process converges. Convergence Algorithm 1 lifts up the minima to remove, since they are visited after their associated saddle (<ref type="figure" coords="5,436.68,585.06,18.96,8.02" target="#fig_5">Fig. 6</ref> (a)). Then, when removing a minimum m (B, <ref type="figure" coords="5,373.48,595.02,19.42,8.02" target="#fig_5">Fig. 6</ref>(a)), residual critical points can only occur higher than the minimum's associated saddle (E, <ref type="figure" coords="5,471.81,604.99,19.92,8.02" target="#fig_5">Fig. 6</ref>(a)), but lower than its next vertices in the global vertex ordering (F and G, <ref type="figure" coords="5,508.55,614.95,19.56,8.02" target="#fig_5">Fig. 6</ref>(a)). Symmetrically, sur-level set reconstruction pushes down the maxima to remove. Then new residual critical points (B and D, <ref type="figure" coords="5,489.08,634.88,19.63,8.02" target="#fig_5">Fig. 6</ref>(c)) occur lower than the residual saddle of the previous step (C, <ref type="figure" coords="5,493.42,644.84,20.23,8.02" target="#fig_5">Fig. 6</ref>(b)), but still higher than the original (E, <ref type="figure" coords="5,412.15,654.80,20.26,8.02" target="#fig_5">Fig. 6</ref> (a)). Alternating sub-and surlevel set reconstruction will keep on reducing the function range where the residual extremum and its corresponding saddle appear. Eventually these will be consecutive in the global vertex ordering (<ref type="figure" coords="5,491.52,684.69,19.15,8.02" target="#fig_5">Fig. 6</ref>, bottom) leaving no more room for new residuals at the next iteration. From symbolic to numerical perturbation After convergence, it may be useful to convert the symbolic perturbation (vertex offset O(v)) into numerical perturbation, to represent the output field g with a numerical value only for each vertex. The final array A (algorithm 1) 2009 TIERNY AND PASCUCCI: GENERALIZED TOPOLOGICAL SIMPLIFICATION OF SCALAR FIELDS ON SURFACES is traversed in increasing order and whenever a vertex is at the same value (or lower) than its predecessor (g(A<ref type="bibr" coords="6,177.98,583.78,11.27,8.02">[i]</ref>) ≤ g(A<ref type="bibr" coords="6,222.89,583.13,28.04,8.46">[i − 1]</ref>)), its function value is increased by an arbitrarily small value ξ: g(A<ref type="bibr" coords="6,245.52,593.60,11.60,7.96">[i]</ref>) ← g(A<ref type="bibr" coords="6,35.05,603.06,25.38,8.46">[i − 1]</ref>) + ξ. This numerical perturbation should be restricted only where it is needed (flat regions of g) to maintain ||f − g||∞ to a small value. For instance, in <ref type="figure" coords="6,105.63,623.63,20.01,8.02" target="#fig_5">Fig. 6</ref>, the vertices D, B and C should all have a final function value in the interval </p><formula>(f (E), f (F )</formula><p>). Hence, ξ should be smaller than </p><formula>δ f n </formula><p>, where δ f is the smallest (non-zero) function value absolute difference in the input and n is the number of vertices in S. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Algorithm properties</head><p>Relation to -simplification The implicit pairing performed by our algorithm is compatible with the pairing of critical points based on persistence: given one extremum removal, it pairs a minimum (respectively , a maximum), with its closest saddle up the join tree <ref type="bibr" coords="6,262.42,716.50,10.45,8.02" target="#b4">[5] </ref> (respectively, down the split tree). Moreover, given one extremum removal , ||f − g||∞ will be equal to the absolute difference in function value between the extremum and its paired saddle (line 22 to 27 of algorithm 1). For instance in <ref type="figure" coords="6,389.76,412.01,19.72,8.02" target="#fig_5">Fig. 6</ref>, B is paired with E and ||f − g||∞ is equal to |f (B) − f (E)|. Thus, if the input constraints are selected according to topological persistence (the persistence of the pairs associated with each critical point of C 0 g and C 2 g is higher than ), then ||f − g||∞ ≤ . Non-Morse inputs Multi-saddles may occur in the input, preventing f from being a Morse function. For these, the lower and upper links can be made of more than two components. Our algorithm handles these degenerate cases with no modification: removing one extremum associated with a multi-saddle will simply decrease the saddle's multiplicity in the output by one (<ref type="figure" coords="6,392.68,512.57,19.23,8.02" target="#fig_7">Fig. 7</ref>). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS AND DISCUSSION</head><p>In this section, we present practical results of our algorithm obtained with a C++ implementation on a computer with an i7 CPU (2.93 GHz). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Time requirement</head><p> The algorithm uses no computationally expensive topological abstraction , such as a Morse-Smale complex or even a contour tree. Therefore each iteration is extremely fast in practice. Given a surface with n vertices , inserting and removing a vertex from the self-balancing binary search tree T takes O(log(n)) time. Each vertex is uniquely visited. Thus, the complexity of an iteration is O(n log(n)), irrespectively of the number of critical points to remove. In theory, the number of iterations required for the algorithm to converge could possibly be nonnegligible . Given one extremum removal, after each reconstruction, the distance in the global vertex ordering which separates a new residual extremum from its corresponding saddle decreases at least by one (this distance is illustrated by a black arrow in <ref type="figure" coords="6,451.77,706.53,19.73,8.02" target="#fig_5">Fig. 6</ref>, bottom). As this distance can initially be close to the number of vertices in the mesh, n reconstructions could be required, yielding an O(n 2 log(n)) worst case complexity, irrespectively of the number of removed extrema. <ref type="figure" coords="7,47.81,335.45,7.39,7.37">10</ref>. Simplifying the Grand Canyon ((a), 500k vertices, 65,526 critical points, bottom) with a location driven feature selection. The terrain is decomposed into three geographically meaningful regions: the canyon, its north rim and its south rim (in black, green, blue, (a) bottom). (b) Maintaining only one minimum and removing all the critical points from the canyon (16,756 critical points remain) emphasizes the topological features of the rims and simulates a massive flooding of the canyon. (c) Removing all the critical points from the rims (2,296 remaining) emphasizes the topological features inside the canyon in a way that is suited for an interactive fly-through within the canyon. An -simplification with compatible L∞ norm (d) completely discards the features irrespectively of their location (zoom insets) while yielding a worse average data fitting (Avg(|f −g|)). <ref type="figure" coords="7,31.50,530.20,19.68,7.37">Fig. 9</ref>. In the special case where the critical points in C 0 g and C 2 g are all more persistent than , our algorithm produces an -simplification (||f − g||∞ ≤ ). Both the (vertex) position and the function value of the remaining removable critical points are preserved after simplification (top insets), even in the presence of multi-saddles (6 in the input). The topology of the resulting field is summarized with the inset Reeb graph for illustration purpose (input surface: 725k vertices). Traditionally, random scalar fields are considered as relevant approximations of worst-case scenarios. Moreover, considering multiple instances increases the chances to get a proper worst-case approximation . We show in <ref type="figure" coords="7,108.69,631.93,21.45,8.02" target="#fig_6">Fig. 8</ref>the average and maximum running times (in log scale) for the algorithm to achieve convergence on a set of meshes (including examples with high genus, up to 116), for which 50 instances of random fields have been considered and for which the constraints C 0 g and C 2 g are random subsets of the fields' extrema. In particular, critical points from C 0 f are uniquely added to C 0 g in random order until |C 0 g | is equal to a random fraction of |C 0 f | (the constraint set C 2 g is constructed similarly). For most data-sets, the average number of required iterations is smaller than or equal to 2 and the maximum number of iterations is never greater than 5. This shows that, from a practical point of view, the number of required iterations is negligible with regard to n, hence yielding O(n log(n)) practical running time. In our experiments, the algorithm took at most 10.7 seconds to compute on a mesh with 1 million vertices (6.3 million simplices total). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Discussion</head><p>A unique aspect of our algorithm is its ability, given the constraints C 0 g and C 2 g , to automatically identify and remove the optimal set of saddles with regard to the L∞ norm. Moreover, this is accomplished without the need to carry a union-find data-structure unlike previous techniques. Although this data-structure has nearly linear time complexity in theory, practically it could cause slowdowns by a nonnegligible constant factor, given the algorithm's low resource requirement . Also, after simplification, the (vertex) position of the remaining critical points is preserved. In the special case where the critical points of C 0 g and C 2 g are selected based on topological persistence, the algorithm produces a standard -simplification, as shown in <ref type="figure" coords="7,510.59,565.66,19.92,8.02">Fig. 9</ref>. In contrast to previous approaches, our algorithm directly works on a PL representation of the field, which is more acceptable application-wise. Importantly, it is also more general as critical points can be removed arbitrarily (at the exception of the non-removable critical points summarized in <ref type="figure" coords="7,337.07,615.47,20.99,8.02" target="#fig_1">Fig. 3</ref>), irrespectively of the employed feature-selection strategy. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Limitations</head><p>Given our formulation of general simplification (Sec. 2.2), for specific constraint configurations, the value of the remaining critical points may change after simplification. For instance, if the lowest minimum in C 0 g is initially higher than the highest maximum in C 2 g , the algorithm will change their values to satisfy the topological constraints. Also, when removing only one extremum from the boundary, it will be replaced by a boundary saddle if it is associated by the algorithm (with regard to the L∞ norm) with an interior saddle (<ref type="figure" coords="7,490.99,726.46,19.40,8.02" target="#fig_7">Fig. 7</ref>). This is due to the fact that the number of critical points must be even on each 2011 TIERNY AND PASCUCCI: GENERALIZED TOPOLOGICAL SIMPLIFICATION OF SCALAR FIELDS ON SURFACES boundary component (Sec. 2.2), which may be counter-intuitive from a user's perspective. Moreover, whereas our algorithm removes the optimal set of saddles with regard to ||f − g||∞ given some extrema constraints , our strategy for function value update (which is purely based on flooding) does not guarantee a minimization of ||f −g||∞, although the resulting L∞ norm is close to the theoretical minimum. In the context of persistence driven simplification, Bauer et al. <ref type="bibr" coords="8,216.24,113.16,10.45,8.02" target="#b2">[3] </ref>showed that optimality could be reached by a combination of carving (i.e. pulling the saddles halfway towards their associated extremum) and flooding (i.e. pushing the extrema halfway towards their associated saddle) at the expense of no longer guaranteeing a function value lock on the maintained critical points. By simplifying all the pairs less persistent than , their approach yields ||f − g||∞ ≤ 2 . In contrast, like in <ref type="bibr" coords="8,255.70,172.94,13.74,8.02" target="#b9">[10]</ref>, our approach yields ||f − g||∞ ≤ but locks the maintained critical points in terms of function value. However, in the context of general simplification, the optimal balance between carving and flooding will be more difficult to evaluate, as it is no longer a local decision which depends only on the pair of removed critical points (excessive carving could break the enforcement of near-by extrema located in the vicinity of the removed saddles). Finally, like any combinatorial approach , our algorithm provides strong guarantees on the topology of the output at the expense of its geometrical smoothness. Unlike previous combinatorial algorithms using carving <ref type="bibr" coords="8,188.41,272.56,9.71,8.02" target="#b1">[2,</ref><ref type="bibr" coords="8,199.32,272.56,6.72,8.02" target="#b2"> 3,</ref><ref type="bibr" coords="8,207.26,272.56,10.65,8.02" target="#b9"> 10]</ref>, our algorithm uses flooding only. Hence, it does not suffer from the usual artifacts of carving (visible thin paths linking sets of removed critical points), but from those of flooding (flat regions in the output, <ref type="figure" coords="8,214.61,302.45,19.89,8.02" target="#fig_4">Fig. 5</ref>, right). In our experiments, we found that these artifacts were usually little noticeable , unless the features removed by the user span a large region of the domain (<ref type="figure" coords="8,79.55,332.34,19.87,8.02" target="#fig_4">Fig. 5</ref>, right). If smoothness is desired, our approach can be combined with a numerical technique (cf. Sec. 1.1) to provide smooth outputs that still benefit from the topological guarantees of our algorithm (see Sec. 5.2). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">APPLICATIONS</head><p> To demonstrate the utility of our algorithm, we present two applications benefiting from a general scalar field simplification approach. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Terrain simplification with ad-hoc feature selection</head><p> Topological simplification of terrains can be particularly useful for topographic analysis or water flow simulations as discussed by Bremer et al. <ref type="bibr" coords="8,43.28,467.43,9.52,8.02" target="#b3">[4]</ref>. However, the original topological persistence measure can be unsatisfactory for selecting features in such a context, as the characterization of features of interest is application dependent and at times can also be data-set dependent. <ref type="figure" coords="8,142.00,497.32,26.18,8.02">Fig. 10</ref>exemplifies this observation on the Grand Canyon elevation data-set, which initially counts 65,526 critical points. The Grand Canyon can be decomposed in three major regions from a geographic point of view: the canyon itself, its north rim and its south rim. These regions (in black, green and blue respectively in <ref type="figure" coords="8,55.93,547.13,24.70,8.02">Fig. 10</ref>(a)) have been initially extracted by segmenting the image along high elevation gradient and interactively completed by the user. Based on this initial decomposition, we present two simplification scenarios. First, in <ref type="figure" coords="8,123.87,577.02,24.26,8.02">Fig. 10</ref>(b), the topology of only the rims has been emphasized: only the lowest minimum above 53% of the total elevation difference has been maintained, the critical points inside the canyon have been selected for removal and all the maxima on the rims above 53% of elevation have been maintained. In less than 2 seconds, our algorithm constructs the corresponding flooded Grand Canyon, while enforcing the preservation of the selected topological features on the rims. A contrary scenario would consist in emphasizing the peaks inside the canyon. For instance, the result of such a simplification strategy can drive a mesh simplification procedure for an interactive fly-through within the canyon. In that case (<ref type="figure" coords="8,202.10,676.65,22.62,8.02">Fig. 10</ref>(c)), only the global minimum has been maintained and all the maxima outside of the canyon have been selected for removal. Note that in comparison, a standard -simplification with compatible L∞ norm (<ref type="figure" coords="8,225.05,706.53,24.07,8.02">Fig. 10</ref>(d)) is unsatisfactory as it completely discards the topological features irrespectively of their location (zooms in <ref type="figure" coords="8,158.40,726.46,23.59,8.02">Fig. 10</ref>), while yielding a worse average data-fitting (Avg(|f − g|)). <ref type="figure" coords="8,302.62,238.20,7.39,7.37">11</ref>. Solving the Laplace equation with topological guarantees (transparent spheres are Dirichlet constraints). The combinatorial Laplacian (a) satisfies the topological properties of the solution, but it has a poor geometrical accuracy (level lines, top). The cotangent weight Laplacian (b) provides an improved geometrical approximation (top) but is numerically sensitive and generates invalid additional singularities (inset zooms). Our algorithm can be applied as a post-process (c), with no threshold parameter, to remove these inconsistent critical points. The resolution of the equation took 0.14 s. (surface: 25k vertices), while the combinatorial simplification took 0.02 s. (1 iteration). Our algorithm provides a solution (c) which both benefits from the geometrical approximation quality of cotangent weights (||f − g||∞ = 0.12%) and from the topological stability of the combinatorial Laplacian. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Scalar field design with topological guarantees</head><p>Many geometry processing problems involve numerically sensitive tasks such as partial differential equation resolution, gradient field integration , or scale-space computation. In many cases, the topology of the numerical solution is a major consideration. In meshing for instance, extraordinary vertices often correspond to singularities and these important constraints must be respected. However, numerical noise often occurs and can alter the topology of the solution. We illustrate this issue with the Laplace equation subject to Dirichlet boundary conditions. Beyond its ubiquity in geometry processing, this equation plays an important role in electromagnetism, astronomy and fluid dynamics . Given a finite set of extrema constraints D along with corresponding target values, the solution f to this equation is defined as follows: </p><formula>f (di) = f d i ∀di ∈ D (4) ∆f (v) = 0 ∀v / ∈ D (5) </formula><p> where ∆ stands for a discretization of the Laplacian operator on surfaces . An important property of this equation is that the Dirichlet constraints D should be the only extrema of the solution. However, since the Laplacian is a second-order operator, it is difficult to discretize for piecewise linear functions. Hence several discretization strategies have been proposed (see <ref type="bibr" coords="8,454.72,606.91,14.94,8.02" target="#b20">[21] </ref> for a comprehensive discussion). <ref type="figure" coords="8,349.33,616.87,26.05,8.02">Fig. 11</ref>shows the solution of this equation for two discretizations of the operator, obtained by least-squares optimization with the penalty method <ref type="bibr" coords="8,392.43,636.80,13.74,8.02" target="#b22">[23]</ref>. The combinatorial Laplacian <ref type="bibr" coords="8,520.56,636.80,14.94,8.02" target="#b20">[21] </ref>(<ref type="figure" coords="8,288.56,646.76,24.23,8.02">Fig. 11</ref>(a)) is a straightforward discretization which exhibits robust topological properties. However, as it is strongly biased by the discretization of the mesh, it fails at generating smooth level sets. In contrast, the discretization based on cotangent weights <ref type="bibr" coords="8,485.57,676.65,14.94,8.02" target="#b17">[18] </ref>produces much smoother level sets. However, in practice, surface triangulations often include many sharp triangles. As edge angles get closer to zero, the numerical error on their tangent evaluation can be arbitrarily amplified when used as the denominator for the cotangent computation, hence yielding an error of arbitrarily high amplitude in the solution in the vicinity of sharp triangles. As shown in <ref type="figure" coords="8,443.60,736.42,23.82,8.02">Fig. 11</ref>(b), this numerical error generates additional critical points (with non-zero persistence), which prevents the solution from conforming to its formal description. Our algorithm can be used in a straightforward manner to fix these numerical instabilities by using the Dirichlet constraints as topological constraints (C 0 g and C 2 g ). In practice, our algorithm is around an order of magnitude faster than the actual numerical optimization (using CholMod). Thus it can be used as a post-process with a negligible computation time overhead. Note that since our algorithm uses no threshold parameter, it can be used in a robust manner, irrespective of the amplitude of the numerical error. As shown in <ref type="figure" coords="9,217.07,145.09,23.90,8.02">Fig. 11</ref> (c), our algorithm automatically removes topological noise while minimally affecting the function. Therefore, our approach can be used to generate a solution with both the geometrical accuracy of the cotangent weight Laplacian and the topological robustness of the combinatorial Laplacian , yielding a solution with topological guarantees that is exploitable for certified geometry processing. Note however that due to its combinatorial nature, our algorithm will locally break the harmonicity of the function in the vicinity of the removed critical points by flattening the area. This drawback has only a local impact and a small amplitude (in <ref type="figure" coords="9,185.02,246.75,26.88,8.02">Fig. 11</ref>(c), ||f − g||∞ = 0.12%) and thus will be acceptable for most applications (like quadmesh design for example). However, it might be a limitation in specific applications where harmonicity is a critical feature that must be enforced everywhere, like harmonic parameterization for instance. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p> In this paper, we have presented a combinatorial approach for the general simplification of piecewise linear scalar fields on surfaces. By abstracting our approach from the concepts of persistent homology, we believe to have presented a simpler, more intuitive and more general description of scalar field topological simplification. Also, we enumerated all the configurations for which critical points were nonremovable given the topology of the domain, for surfaces with or with out boundary. From this, we derived a strategy that allows for the arbitrary suppresion of the removable critical points of the field. We presented a simple iterative algorithm for general topological simplification which, given some constraints on the extrema of the output field, implicitly identifies and removes the optimal set of saddles with regard to the L∞ norm, hence guaranteeing a small distance ||f − g||∞. Although it is iterative, extensive experiments on approximated worst-case scenarios showed that the algorithm rarely takes more than 2 iterations to converge. The algorithm uses no computationally expensive topological abstraction, such as a Morse-Smale complex or even a contour tree; hence it is very fast in practice. It can be used as a complement to existing numerical approaches to provide strict topological guarantees on the output. In contrast to previous combinatorial approaches, our approach works directly on a PL representation of the field (which is more acceptable application-wise), is robust against multi-saddles, and handles surfaces with or without boundary. Moreover, our approach solves a more general problem, for which -simplifications have been shown to be a special case. We demonstrated the utility, accuracy, and efficiency of our contribution in two applications. In the context of scalar field design, we showed that our algorithm could combine the practical individual advantages of different discretizations of the Laplace operator, hence providing, without any threshold parameter, topological guarantees for certified geometry processing. Other numerical problems on surfaces, including other partial differential equation systems, gradient field integration or scale-space computations can benefit from this post-processing black-box and we refer the reader to the C++ code provided in appendix for usage examples. A natural direction for future work is the extension of this approach to volumetric data-sets. However, as the dimension of the domain increases , new types of saddle points appear and more subtle topological transitions occur on the level sets. Hence, enforcing the connectivity of the sub-and sur-level sets is insufficient; the genus of the iso-surfaces also needs to be efficiently controlled. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="3,31.50,110.10,250.38,7.37;3,31.50,119.57,250.38,7.37;3,31.50,129.03,250.38,7.37;3,31.50,138.50,248.83,7.37"><head>Fig. 2</head><figDesc>Fig. 2. Scalar field on a terrain (left). A level set is shown in blue; a contour is shown in white. Vertices can be classified according to the connectivity of their lower (blue) and upper links (green). From left to right: a minimum (a), a regular vertex (b), a saddle (c), a maximum (d). </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="3,294.12,108.69,250.38,7.37;3,294.12,118.15,250.38,7.37;3,294.12,127.62,250.38,8.17;3,294.12,137.08,250.38,7.37;3,294.12,146.55,180.97,7.37"><head>Fig. 3. </head><figDesc>Fig. 3. Non removable critical points: (a) A global minimum and a global maximum have to be maintained for the field not to be constant. (b) 2 g S saddles cannot be removed. Each boundary component has 2 non-removable global stratified extrema, which turn into non-removable saddles (c) or (possibly) exchangeable extrema (d). </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2" coords="4,22.50,126.15,250.38,8.99;4,22.50,137.23,250.38,7.37;4,22.50,146.70,250.38,7.37;4,22.50,156.16,250.38,7.37;4,22.50,165.62,206.74,7.37"><head>Fig. 4. </head><figDesc>Fig. 4. Given a Morse function f − admitting one maximum and several minima (left inset), the number of connected components of the sublevel set (in blue) increases when passing a minimum (b), decreases when passing a removable saddle (c) and does not change when passing the non-removable saddles (d, e) and the maximum (f). </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3" coords="4,290.10,328.83,195.17,8.12;4,295.08,341.60,197.28,6.75;4,295.08,348.15,128.41,7.36;4,419.83,349.73,5.97,7.35;4,295.08,357.83,162.14,8.23;4,453.56,359.40,5.79,7.35;4,295.08,370.83,15.11,5.82;4,286.12,369.80,3.99,7.17;4,310.43,377.44,143.97,5.88;4,286.12,376.43,3.99,7.17;4,310.43,384.07,23.02,5.64;4,286.12,383.05,3.99,7.17;4,310.43,390.79,135.26,5.79;4,286.12,389.68,3.99,7.17;4,310.43,397.32,19.67,5.64;4,286.12,396.30,3.99,7.17;4,286.12,402.93,3.99,7.17;4,310.43,410.57,111.00,5.88;4,286.12,409.55,3.99,7.17;4,310.43,417.79,47.30,7.32;4,354.06,419.27,64.08,7.44;4,286.12,419.23,3.99,7.17;4,286.12,426.85,3.99,7.17;4,310.43,434.51,17.50,5.82;4,282.13,433.48,7.97,7.17;4,325.77,441.12,76.32,6.79;4,282.13,440.10,7.97,7.17;4,325.77,447.74,53.43,5.64;4,282.13,446.73,7.97,7.17;4,325.77,454.38,47.30,5.87;4,282.13,453.35,7.97,7.17;4,325.77,461.09,69.47,5.79"><head>mark </head><figDesc>v as visited; 13 // Add unvisited neighbors. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4" coords="5,31.50,201.37,513.00,7.37;5,31.50,210.83,185.69,7.37"><head>Fig. 5. </head><figDesc>Fig. 5. Removing the lowest minimum (small box on the input) by sub-level set constrained reconstruction (in blue). The algorithm enforces the minima constraints while implicitly removing saddles. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5" coords="5,294.12,350.57,250.38,7.37;5,294.12,360.03,250.38,7.37;5,294.12,369.50,250.38,7.37;5,294.12,378.96,250.38,7.37;5,294.12,388.43,250.38,7.37;5,294.12,397.89,250.38,7.37;5,294.12,407.36,204.31,7.37"><head>Fig. 6</head><figDesc>Fig. 6. Sub-level set constrained reconstruction can introduce residual maxima (red spheres): in (a), all the neighbors of D are visited before it, hence yielding a maximum (b). Symmetrically, in (b), all the neighbors of B are visited before it, yielding a minimum (c). Alternating sub-and surlevel set reconstruction reduces the (offset) function difference between the residual extrema and their corresponding saddle (cf. vertex ordering, bottom), and converges to the removal of all the residuals. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6" coords="6,22.50,374.30,397.40,8.66;6,415.82,374.30,17.57,10.11;6,429.31,375.59,84.93,8.83"><head>Fig. 8. </head><figDesc>Fig. 8. Running times (log scale) for the simplification of random functions, with a random constraint selection (C 0 g , C 2 g ), 50 runs per data-set. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7" coords="6,22.50,503.29,250.38,7.37;6,22.50,512.75,250.38,7.37;6,22.50,522.21,250.38,7.37;6,22.50,531.68,250.38,7.37;6,22.50,541.14,250.38,7.37;6,22.50,550.61,236.46,7.37"><head>Fig. 7. </head><figDesc>Fig. 7. Simplifying a saddle with high multiplicity (a): 4 components of sub-and sur-level sets merge in the saddle (inset Reeb graph: sub-and sur-level sets are marked in blue and green respectively). Removing one extremum (box in (a)) decreases the number of components of the lower and upper links by 1 (b). Removing other extrema (box in (b)) eventually decreases this number to 2, yielding a simple saddle (c). </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8" coords="7,31.50,335.45,513.00,7.37;7,31.50,344.92,513.00,7.37;7,31.50,354.38,513.00,7.37;7,31.50,363.85,513.00,7.37;7,31.50,373.31,513.00,7.37;7,31.50,382.47,513.00,7.68"><head>Fig. </head><figDesc>Fig. 10. Simplifying the Grand Canyon ((a), 500k vertices, 65,526 critical points, bottom) with a location driven feature selection. The terrain is decomposed into three geographically meaningful regions: the canyon, its north rim and its south rim (in black, green, blue, (a) bottom). (b) Maintaining only one minimum and removing all the critical points from the canyon (16,756 critical points remain) emphasizes the topological features of the rims and simulates a massive flooding of the canyon. (c) Removing all the critical points from the rims (2,296 remaining) emphasizes the topological features inside the canyon in a way that is suited for an interactive fly-through within the canyon. An -simplification with compatible L∞ norm (d) completely discards the features irrespectively of their location (zoom insets) while yielding a worse average data fitting (Avg(|f −g|)). </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9" coords="8,285.12,238.20,250.38,7.37;8,285.12,247.67,250.38,7.37;8,285.12,257.13,250.38,7.37;8,285.12,266.60,250.38,7.37;8,285.12,276.06,250.38,7.37;8,285.12,285.52,250.38,7.37;8,285.12,294.99,250.38,7.37;8,285.12,304.45,250.38,7.37;8,285.12,313.92,250.38,7.37;8,285.12,323.38,250.38,7.37;8,285.12,332.85,250.38,7.37;8,285.12,342.01,250.38,7.68;8,285.12,351.78,177.31,7.37"><head>Fig. </head><figDesc>Fig. 11. Solving the Laplace equation with topological guarantees (transparent spheres are Dirichlet constraints). The combinatorial Laplacian (a) satisfies the topological properties of the solution, but it has a poor geometrical accuracy (level lines, top). The cotangent weight Laplacian (b) provides an improved geometrical approximation (top) but is numerically sensitive and generates invalid additional singularities (inset zooms). Our algorithm can be applied as a post-process (c), with no threshold parameter, to remove these inconsistent critical points. The resolution of the equation took 0.14 s. (surface: 25k vertices), while the combinatorial simplification took 0.02 s. (1 iteration). Our algorithm provides a solution (c) which both benefits from the geometrical approximation quality of cotangent weights (||f − g||∞ = 0.12%) and from the topological stability of the combinatorial Laplacian. </figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS </head><p>The authors are grateful to Delila Omerba˘ si´csi´c and Brian Summa for their careful proofreading and Sophie Masse for the graphical design of our demo program's user interface. We would also like to thank the anonymous reviewers for their thoughtful remarks and suggestions . Data-sets are courtesy of AIM@SHAPE and the Large Geometric Models Archive at Georgia Tech. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct coords="9,312.38,147.79,232.12,7.13;9,312.38,157.25,232.12,7.13;9,312.38,166.72,49.81,7.13"  xml:id="b0">
	<analytic>
		<title level="a" type="main">I/O-efficient batched union-find and its applications to terrain analysis</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Agarwal</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">L</forename>
				<surname>Arge</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Yi</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Symp. on Comp. Geom</title>
		<imprint>
			<biblScope unit="page" from="167" to="176" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,176.18,232.12,7.13;9,312.38,185.65,232.12,7.13;9,312.38,195.11,87.38,7.13"  xml:id="b1">
	<monogr>
		<title level="m" type="main">Persistencesensitive simplification of functions on surfaces in linear time</title>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Attali</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Glisse</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Hornus</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Lazarus</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Morozov</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,204.57,232.12,7.13;9,312.38,214.04,232.12,7.13;9,312.38,223.50,96.07,7.13"  xml:id="b2">
	<monogr>
		<title level="m" type="main">Optimal topological simplification of discrete functions on surfaces. Discrete and Computational Geometry</title>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Bauer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Lange</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Wardetzky</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="347" to="377" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,232.97,232.12,7.13;9,312.38,242.43,232.12,7.13;9,312.38,251.90,123.64,7.13"  xml:id="b3">
	<analytic>
		<title level="a" type="main">A topological hierarchy for functions on triangulated surfaces</title>
		<author>
			<persName>
				<forename type="first">P.-T</forename>
				<surname>Bremer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Edelsbrunner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Hamann</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Vis. and Comp. Graph</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="385" to="396" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,261.36,232.12,7.13;9,312.38,270.83,232.12,7.13;9,312.38,280.29,33.87,7.13"  xml:id="b4">
	<analytic>
		<title level="a" type="main">Computing contour trees in all dimensions</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Carr</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Snoeyink</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Ulrike</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Symposium on Discrete Algorithms</title>
		<meeting>. of Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="918" to="926" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,289.76,232.12,7.13;9,312.38,299.22,232.12,7.13;9,312.38,308.68,49.81,7.13"  xml:id="b5">
	<analytic>
		<title level="a" type="main">Simplifying flexible isosurfaces using local geometric measures</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Carr</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Snoeyink</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Van De Panne</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE VIS</title>
		<meeting>. of IEEE VIS</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="497" to="504" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,318.15,232.12,7.13;9,312.38,327.61,232.12,7.13;9,312.38,337.08,94.96,7.13"  xml:id="b6">
	<analytic>
		<title level="a" type="main">Loops in Reeb graphs of 2-manifolds</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Cole-Mclaughlin</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Edelsbrunner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Harer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Natarajan</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Symp. on Comp. Geom</title>
		<imprint>
			<biblScope unit="page" from="344" to="350" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,346.54,232.12,7.13;9,312.38,356.01,232.13,7.13;9,312.38,365.47,183.04,7.13"  xml:id="b7">
	<analytic>
		<title level="a" type="main">Topological splines: A structurepreserving visual representation of scalar fields</title>
		<author>
			<persName>
				<forename type="first">C</forename>
				<surname>Correa</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Lindstrom</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Bremer</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE VIS</title>
		<meeting>. of IEEE VIS</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1842" to="1851" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,374.94,232.12,7.13;9,312.38,384.40,232.12,7.13;9,312.38,393.87,33.87,7.13"  xml:id="b8">
	<analytic>
		<title level="a" type="main">Topological persistence and simplification</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Edelsbrunner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Letscher</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Zomorodian</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete &amp; Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="511" to="533" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,403.33,232.12,7.13;9,312.38,412.79,232.12,7.13;9,312.38,422.26,69.95,7.13"  xml:id="b9">
	<analytic>
		<title level="a" type="main">Persistence-sensitive simplification of functions on 2-manifolds</title>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Edelsbrunner</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Morozov</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Symp. on Comp. Geom</title>
		<imprint>
			<biblScope unit="page" from="127" to="134" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,431.72,232.12,7.13;9,312.38,441.19,84.79,7.13"  xml:id="b10">
	<analytic>
		<title level="a" type="main">A user&apos;s guide to discrete Morse theory</title>
		<author>
			<persName>
				<forename type="first">R</forename>
				<surname>Forman</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Mathematics</title>
		<imprint>
			<biblScope unit="volume">134</biblScope>
			<biblScope unit="page" from="90" to="145" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,450.65,232.12,7.13;9,312.38,460.12,96.52,7.13"  xml:id="b11">
	<analytic>
		<title level="a" type="main">Controlled-topology filtering</title>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Gingold</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Zorin</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="page" from="676" to="684" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,469.58,232.12,7.13;9,312.38,479.05,232.12,7.13;9,312.38,488.51,232.12,7.13;9,312.38,497.97,37.86,7.13"  xml:id="b12">
	<analytic>
		<title level="a" type="main">A practical approach to Morse-Smale complex computation: scalabity and generality</title>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Gyulassy</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P.-T</forename>
				<surname>Bremer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Hamann</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE VIS)</title>
		<meeting>. of IEEE VIS)</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1619" to="1626" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,507.44,189.97,7.13"  xml:id="b13">
	<monogr>
		<title level="m" type="main">Morse Theory</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Milnor</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="1963" />
			<publisher>Princeton University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,516.90,232.12,7.13;9,312.38,526.37,232.12,7.13;9,312.38,535.83,123.73,7.13"  xml:id="b14">
	<analytic>
		<title level="a" type="main">Fair Morse functions for extracting the topological structure of a surface mesh</title>
		<author>
			<persName>
				<forename type="first">X</forename>
				<surname>Ni</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Garland</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Hart</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGGRAPH)</title>
		<meeting>. of ACM SIGGRAPH)</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="613" to="622" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,545.30,232.12,7.13;9,312.38,554.76,232.12,7.13;9,312.38,564.23,182.36,7.13"  xml:id="b15">
	<analytic>
		<title level="a" type="main">Robust online computation of Reeb graphs: simplicity and speed</title>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Scorzelli</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">P</forename>
				<forename type="middle">T</forename>
				<surname>Bremer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Mascarenhas</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graph. (Proc. of ACM SIGGRAPH)</title>
		<imprint>
			<biblScope unit="volume">269</biblScope>
			<biblScope unit="page" from="58" to="59" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,573.69,232.12,7.13;9,312.38,583.16,231.59,7.13"  xml:id="b16">
	<monogr>
		<title level="m" type="main">Computing smooth approximations of scalar functions with constraints. Computers and Graphics</title>
		<author>
			<persName>
				<forename type="first">G</forename>
				<surname>Patanè</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">B</forename>
				<surname>Falcidieno</surname>
			</persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="399" to="413" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,592.62,232.12,7.13;9,312.38,602.08,140.07,7.13"  xml:id="b17">
	<analytic>
		<title level="a" type="main">Computing discrete minimal surfaces and their conjugates</title>
		<author>
			<persName>
				<forename type="first">U</forename>
				<surname>Pinkall</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Polthier</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Exp. Math</title>
		<imprint>
			<biblScope unit="page" from="15" to="36" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,611.55,232.12,7.13;9,312.38,621.01,118.31,7.13"  xml:id="b18">
	<analytic>
		<title level="a" type="main">Optimal removal of spurious pits in digital elevation models</title>
		<author>
			<persName>
				<forename type="first">P</forename>
				<surname>Soille</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Water Resources Research</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,630.48,232.12,7.13;9,312.38,639.94,232.12,7.13;9,312.38,649.41,220.53,7.13"  xml:id="b19">
	<analytic>
		<title level="a" type="main">Loop surgery for volumetric meshes: Reeb graphs reduced to contour trees</title>
		<author>
			<persName>
				<forename type="first">J</forename>
				<surname>Tierny</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">A</forename>
				<surname>Gyulassy</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Simon</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">V</forename>
				<surname>Pascucci</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE VIS</title>
		<meeting>. of IEEE VIS</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1177" to="1184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,658.87,232.12,7.13;9,312.38,668.34,201.76,7.13"  xml:id="b20">
	<analytic>
		<title level="a" type="main">Discrete Laplace operators: no freen lunch</title>
		<author>
			<persName>
				<forename type="first">M</forename>
				<surname>Wardetzky</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">S</forename>
				<surname>Mathur</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">F</forename>
				<surname>Kalberer</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">E</forename>
				<surname>Grinspun</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SGP</title>
		<meeting>. of SGP</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="33" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,677.80,232.12,7.13;9,312.38,685.71,232.12,8.68;9,312.38,696.73,99.79,7.13"  xml:id="b21">
	<analytic>
		<title level="a" type="main">Topology-based smoothing of 2D scalar fields with C 1 -continuity</title>
		<author>
			<persName>
				<forename type="first">T</forename>
				<surname>Weinkauf</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Gingold</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">O</forename>
				<surname>Sorkine</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Graph. Forum (Proc. of EuroVis)</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="1221" to="1230" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,312.38,706.19,232.12,7.13;9,312.38,715.66,232.12,7.13;9,312.38,725.12,17.93,7.13"  xml:id="b22">
	<analytic>
		<title level="a" type="main">Dynamic harmonic fields for surface processing</title>
		<author>
			<persName>
				<forename type="first">K</forename>
				<surname>Xu</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">H</forename>
				<surname>Zhang</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">D</forename>
				<surname>Cohen-Or</surname>
			</persName>
		</author>
		<author>
			<persName>
				<forename type="first">Y</forename>
				<surname>Xiong</surname>
			</persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SMI)</title>
		<meeting>. of SMI)</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="391" to="398" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
