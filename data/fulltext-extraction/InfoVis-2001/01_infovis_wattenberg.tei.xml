<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Ordered Treemap Layouts</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>October 22 -October 23, 2001</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Wattenberg</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Human-Computer Interaction Lab</orgName>
								<orgName type="department" key="dep3">Insitute for Advanced Computer Studies</orgName>
								<orgName type="department" key="dep4">Institute for Systems Research</orgName>
								<orgName type="institution">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Dow Jones / SmartMoney.com and Digital Media Center</orgName>
								<orgName type="institution">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="laboratory">IEEE Symposium on Information Visualization</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Ordered Treemap Layouts</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published">October 22 -October 23, 2001</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>treemaps</term>
					<term>ordered treemaps</term>
					<term>trees</term>
					<term>hierarchies</term>
					<term>information visualization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Treemaps, a space-filling method of visualizing large hierarchical data sets, are receiving increasing attention. Several algorithms have been proposed to create more useful displays by controlling the aspect ratios of the rectangles that make up a treemap. While these algorithms do improve visibility of small items in a single layout, they introduce instability over time in the display of dynamically changing data, and fail to preserve an ordering of the underlying data. This paper introduces the ordered treemap, which addresses these two shortcomings. The ordered treemap algorithm ensures that items near each other in the given order will be near each other in the treemap layout. Using experimental evidence from Monte Carlo trials, we show that compared to other layout algorithms ordered treemaps are more stable while maintaining relatively favorable aspect ratios of the constituent rectangles. A second test set uses stock market data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Treemaps are a space-filling visualization method capable of representing large hierarchical collections of quantitative data <ref type="bibr">[S92]</ref>. A treemap ( <ref type="figure" target="#fig_0">Figure 1</ref>) works by dividing the display area into a nested sequence of rectangles whose areas correspond to an attribute of the data set, effectively combining aspects of a Venn diagram and a pie chart. Originally designed to visualize files on a hard drive, treemaps have been applied to a wide variety of domains ranging from financial analysis <ref type="bibr" target="#b4">[JT92,</ref><ref type="bibr">W98]</ref> to sports reporting <ref type="bibr" target="#b1">[JB97]</ref>.</p><p>A key ingredient of a treemap is the algorithm used to create the nested rectangles that make up the map. (We refer to this set of rectangles as the layout of the treemap.) The slice and dice algorithm of the original treemap paper <ref type="bibr">[S92]</ref> uses parallel lines to divide a rectangle representing an item into smaller rectangles representing its children. At each level of hierarchy the orientation of the linesvertical or horizontal -is switched. Though simple to implement, the slice-and-dice layout often creates layouts that contain many rectangles with a high aspect ratio. (In this paper we define the aspect ratio of a rectangle to mean the maximum of width/height and height/width. Using this definition, the lower the aspect ratio of a rectangle, the more nearly square it is; a square has an aspect ratio of 1, which is the lowest possible value.) Such long skinny rectangles can be hard to see, select, compare in size, and label. <ref type="bibr" target="#b6">[TJ92,</ref><ref type="bibr" target="#b0">BHW00]</ref>  Several alternative layout algorithms have recently been proposed to address these concerns. The SmartMoney Map of the Market [W98] is an example of the cluster treemap method described in <ref type="bibr">[W99]</ref> which uses a simple recursive algorithm that reduces overall aspect ratios. Bruls, Huizing, and van Wijk <ref type="bibr" target="#b0">[BHW00]</ref> introduced the squarified treemap, which uses a different algorithm to achieve the same goal. <ref type="figure" target="#fig_1">Figure 2</ref> shows examples of these two layouts. The new methods suffer from two drawbacks. First, changes in the data set can cause dramatic discontinuous changes in the layouts produced by both cluster treemaps and squarified treemaps. (By contrast, the output of the slice and dice algorithm varies continuously with the input data.) These abrupt layout changes are readily apparent to the eye; below we also describe quantitative measurements of the phenomenon. Large layout changes are undesirable for several reasons. If the treemap data is updated on a second-by-second basis-e.g., in a stock portfolio monitor-then frequent layout changes make it hard to track or select an individual item. Rapid layout changes also cause an unattractive flickering that draws attention away from other aspects of the visualization. Moreover, even occasional abrupt changes mean that it is hard to find items on the treemap by memory, decreasing efficacy for long-term users.</p><p>The second shortcoming of cluster and squarified treemap layouts is that many data sets contain ordering information that is helpful for seeing patterns or for locating particular objects in the map. For instance, the bond data described in <ref type="bibr">[J94]</ref> is naturally ordered by date of maturity and interest rate. In many other cases the given order is alphabetical. The original slice-and-dice layout preserves the given ordering of the data, but cluster treemaps and squarified treemaps do not. Another recent algorithm <ref type="bibr" target="#b7">[VN00]</ref> enables control over the aspect ratios but does not guarantee order.</p><p>This paper introduces ordered treemaps, which use layout algorithms that change relatively smoothly under dynamic updates and roughly preserve order, but also produce rectangles with low aspect ratios. We discuss two different algorithms to create ordered treemaps, each with slightly different properties. (Dynamic demonstrations of these algorithms have been posted on the Web, at http://www.columbia.edu/~mmw111/treemap.)</p><p>We then report the results of Monte Carlo experiments comparing the two ordered treemap algorithms to squarified treemaps, cluster treemaps, and the slice-anddice algorithm, using natural metrics for smoothness of updates and overall aspect ratio. The results suggest that ordered treemaps steer a middle ground, producing layouts with aspect ratios that are far lower than sliceand-dice layouts, though not as quite as low as cluster or squarified treemaps; they update significantly more smoothly than clustered or squarified treemaps, though not as smoothly as slice-and-dice layouts. Thus ordered treemaps may be a good choice in situations where legibility, usability and smooth updating all are important concerns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Algorithms for ordered treemaps</head><p>The key insight that leads to algorithms for ordered treemaps is that it is possible to create a layout in which items that are next to each other in the given order are adjacent in the treemap. Although such a layout does not follow the simple linear order of the slice-and-dice layout, it provides useful cues for locating objects and turns out to provide constraints on the layout that discourage large discontinuous changes with dynamic data.</p><p>We discuss two closely related algorithms for creating layouts that approximately preserve order. Both follow a similar recursive process, inspired in part by the idea of finding a two-dimensional analogue of the well-known Quicksort algorithm.</p><p>The inputs are a rectangle R to be subdivided and a list of items that are ordered by an index and have given areas. The first step is to choose a special item, the pivot, which is placed at the side of R. In the second step, the remaining items in the list are assigned to three large rectangles that make up the rest of the display area. Finally, the algorithm is then applied recursively to each of these rectangles.</p><p>In the first algorithm, pivot-by-size, the pivot is taken to be the item with the largest area. The motivation for this choice is that the largest item will be the most difficult to place, so it should be done first. The algorithm, as illustrated in <ref type="figure" target="#fig_2">Fig. 3</ref>, can be described as follows: 1. Let P, the pivot, be the item with the largest area in the list of items. 2. If the width of R is greater than or equal to the height, divide R into four rectangles, R 1 , R P , R 2 , and R 3 as shown in <ref type="figure" target="#fig_1">Fig. 2</ref>. (If the height is greater than the width, use the same basic arrangement but flipped along the line y=x.)</p><p>3. Place P in the rectangle R P , whose exact dimensions and position will be determined in Step 4. 4. Divide the items in the list, other than P, into three lists, L 1 , L 2 , and L 3 , to be laid out in R 1 , R 2 , and R 3 . L 1 and L 3 all may be empty lists. (Note that the contents of these three lists completely determine the placement of the rectangles in <ref type="figure" target="#fig_2">Figure 3</ref>.) Let L 1 consist of all items whose index is less than P in the ordering. Let L 2 and L 3 be such that all items in L 2 have an index less than those in L 3 , and the aspect ratio of P is as close to 1 as possible. We add the proviso, to avoid degenerate layouts, that L 3 cannot contain exactly one item. 5. Recursively lay out L 1 , L 2 , and L 3 (if any are nonempty) in R 1 , R 2 , and R 3 according to this algorithm.</p><p>The second ordered treemap algorithm, pivot-by-middle, is almost identical except that the pivot is taken to be the middle item of the list -that is, if the list has n items, the pivot is item number n/2, rounded down. The motivation behind this choice is that it is likely to create a balanced layout. In addition, because the choice of pivot does not depend on the size of the items, the layouts created by this algorithm may not be as sensitive to changes in the data as pivot by size. <ref type="figure" target="#fig_3">Figure 4</ref> shows examples of the layouts created by the two algorithms. Both algorithms have the property that they create layouts that roughly preserve the ordering of the index of the items, which will fall in a left-to-right and top-to-bottom direction in the layout. The two algorithms are also reasonably efficient: pivot-by-size has performance characteristics similar to QuickSort (order n log n average case and n 2 worst case) while pivot-by-middle has order nlog n performance in the worst case.</p><p>Although the two algorithms produce layouts with relatively low aspect ratios (as described in the following sections) they are not optimal in this regard. The stipulations in step 4 of the algorithm avoid some but not all degenerate layouts with high aspect ratios, so we experimented with post-processing strategies designed to improve the layout aspect ratio. For example we tried adding a last step to the algorithm in which any rectangle that is divided by a segment parallel to its longest side is changed so that it is divided by a segment parallel to its shortest side. Because this step gave only a small improvement in layout aspect ratio while dramatically decreasing layout stability, we did not include it in the final algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Metrics for treemap layouts: aspect ratio &amp; change</head><p>In order to compare treemap algorithms we define two measures: the average aspect ratio of a treemap layout, and the layout distance change function, which quantify the visual problems created by poor layouts. The goal is to have a low average aspect ratio and a low distance change as data is updated.</p><p>We define the average aspect ratio of a treemap layout as the unweighted arithmetic average of the aspect ratios of all leaf-node rectangles. This is a natural measure, although certainly not the only possibility. One alternative would be a weighted average that places greater emphasis on larger items, since they contribute more to the overall visual impression. We choose an unweighted average since the chief problems with high aspect ratio rectangles-poor visibility and awkward labeling-are at least as acute for small rectangles as large ones.</p><p>The layout distance change function is a metric on the space of treemap layouts that allows us to measure how much two layouts differ, and thus how quickly or slowly the layout produced by a given algorithm changes in response to changes in the data. To define the distance change function, we begin by defining a simple metric on the space of rectangles. Let a rectangle R be defined by a 4-tuple (x,y,w,h) where x and y are the coordinates of the upper left corner and w and h are its width and height. We use the Euclidean metric on this space, i.e. if rectangles R 1 and R 2 are given by (x 1 , y 1 , w 1 , h 1 ) and (x 2 , y 2 , w 2 , h 2 ) respectively, then the distance between R 1 and R 2 is given by</p><formula xml:id="formula_0">( ) ( ) ( ) ( ) 2 2 1 2 2 1 2 2 1 2 2 1 2 1 ) , ( h h w w y y x x r r d − + − + − + − =</formula><p>We use this metric since it takes into account the visual importance of the shape of a rectangle, but there are several plausible alternatives to this definition. Two other natural metrics are the Hausdorff metric for compact sets in the plane or a Euclidean metric based on the coordinates of the lower right corner instead of height and width. These metrics differ from the one we chose by a small bounded factor, and hence would not lead to significantly different results.</p><p>We then define the layout distance change function as the average distance between each pair of corresponding rectangles in the layouts. We use an unweighted average for the same reasons as we use an unweighted average for aspect ratios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Experimental design and results</head><p>To compare the performance of ordered treemap layout algorithms to squarified, cluster and slice-and-dice layouts, we ran two sets of experiments. The first consisted of a sequence of Monte Carlo trials to simulate continuously updating data. Our goal was to measure the average aspect ratio and average layout distance change produced by each of five algorithms. In the second experiment we measured the average aspect ratio produced by each of the algorithms for a static set of stock market data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4a. Monte Carlo trials</head><p>To simulate the performance of the five layout algorithms under a variety of conditions, we performed experiments on two types of hierarchies with two different statistical distributions of item sizes. The first hierarchy ("20x1") was a collection of 20 items with one level of hierarchy. The second ("8x3") was a balanced tree with three levels of hierarchy and eight items at each level for a total of 512 items.</p><p>For each experiment we ran 100 trials of 100 steps each. In one experiment we began with data drawn from a log-normal distribution created by exponentiating a normal distribution with mean 0 and variance 1. In a second version, we used data drawn from a Zipf distribution [R97] with power parameter equal to 1. Both distributions are representative of naturally occurring positive-valued data [R97]. In each step of a trial the data was modified by multiplying each data item by a random variable e x , where x was drawn from a normal distribution with variance 0.05 and mean 0, thus creating a log-normal random walk. All layouts were created for a square with side 100.</p><p>The results are shown in tables 1 through 4.    The results strongly suggest a tradeoff between low aspect ratios and smooth updates. As expected, the sliceand-dice method produces layouts with high aspect ratios, but which change very little as the data changes. The squarified and cluster treemaps are at the opposite end of the spectrum, with low aspect ratios and large changes in layouts. The two ordered treemaps fall in the middle of the spectrum. Neither produces the lowest aspect ratios, but they are a clear improvement over the slice-and-dice method, with the pivot-by-largest algorithm producing slightly better aspect ratios. At the same time, they update more smoothly than cluster or squarified treemaps, with the pivot-by-middle algorithm having a slight advantage over pivot-by-largest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4b. Static stock market data</head><p>Our second set of experiments consisted of applying each of the five algorithms to a set of 535 publicly traded companies used in the SmartMoney Map of the Market [W98] with market capitalization as the size attribute. For each algorithm we measured the aspect ratio of the layout it produced. The results are shown in the first column of <ref type="table" target="#tab_4">Table 5</ref>, and the layouts produced are shown in <ref type="figure" target="#fig_4">Figures 5-9</ref> at the end of this paper. (The gray scale indicates ordering within each industry group which is the last level of hierarchy in this data set.) Note that although aspect ratios are higher than in the statistical trials-partly due to outliers in the data set-the broad pattern of results is similar. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion and future directions</head><p>Treemaps are a popular visualization method for large hierarchical data sets. Although researchers have recently created several algorithms that produce create clear, legible treemap layouts with low aspect ratios, these new algorithms have two drawbacks: they are unstable under updates to the data, and they scramble any natural order on the items being mapped.</p><p>We introduced ordered treemaps, which alleviate these problems by creating layouts that preserve order and that update cleanly for dynamically changing data. Experimental results show that they offer a useful compromise between the smooth updates of the slice-anddice method and the low aspect ratios of cluster treemaps and squarified treemaps.</p><p>There are several directions for future research. First, there is doubtless room to optimize the ordered treemap algorithms discussed in this paper, especially to improve the overall aspect ratios they produce. It would also be useful to optimize the algorithms used by cluster treemaps and squarified treemaps to improve stability under dynamic updates. Another practical area to explore would be matching layout algorithms to particular statistical distributions of data and changes in the data, since different algorithms may be appropriate in different situations.</p><p>More speculatively, since experimental results suggest a tradeoff between aspect ratios and smoothness of layout changes, it would be worthwhile to look for a mathematical theorem that makes this tradeoff precise. It might also be fruitful to explore variants of treemap layouts that can update smoothly by using past layouts as a guide to current ones, or by using tiles that can have nonrectangular shapes.     </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>A slice-and-dice layout. Shading indicates order, which is preserved.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Low aspect ratio layouts. Shading indicates order, which is not preserved.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>The pivot configuration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Pivot layouts. Shading indicates order, which is roughly preserved. The "P" indicates the first pivot rectangle in each layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Stock portfolio with slice-and-dice layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Stock portfolio with pivot-by-middle layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Stock portfolio with pivot-by-largest layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 .</head><label>8</label><figDesc>Stock portfolio with cluster layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 .</head><label>9</label><figDesc>Stock portfolio with squarified layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 : 20x1, Log-normal initial distribution.</head><label>1</label><figDesc></figDesc><table><row><cell>Algorithm</cell><cell>Aspect Ratio</cell><cell>Change</cell></row><row><cell>Slice-and-dice</cell><cell>56.54</cell><cell>0.52</cell></row><row><cell>Pivot-by-middle</cell><cell>3.47</cell><cell>3.06</cell></row><row><cell>Pivot-by-size</cell><cell>3.15</cell><cell>7.17</cell></row><row><cell>Cluster</cell><cell>1.72</cell><cell>11.00</cell></row><row><cell>Squarified</cell><cell>1.75</cell><cell>10.10</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 : 8x3, Log-normal initial distribution.</head><label>2</label><figDesc></figDesc><table><row><cell>Algorithm</cell><cell>Aspect Ratio</cell><cell>Change</cell></row><row><cell>Slice-and-dice</cell><cell>26.10</cell><cell>0.46</cell></row><row><cell>Pivot-by-middle</cell><cell>3.97</cell><cell>1.08</cell></row><row><cell>Pivot-by-size</cell><cell>3.14</cell><cell>4.07</cell></row><row><cell>Cluster</cell><cell>1.79</cell><cell>7.67</cell></row><row><cell>Squarified</cell><cell>1.74</cell><cell>8.27</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 : 20x1, Zipf initial distribution.</head><label>3</label><figDesc></figDesc><table><row><cell>Algorithm</cell><cell>Aspect Ratio</cell><cell>Change</cell></row><row><cell>Slice-and-dice</cell><cell>36.85</cell><cell>0.51</cell></row><row><cell>Pivot-by-middle</cell><cell>2.70</cell><cell>2.91</cell></row><row><cell>Pivot-by-size</cell><cell>2.58</cell><cell>6.86</cell></row><row><cell>Cluster</cell><cell>1.75</cell><cell>12.57</cell></row><row><cell>Squarified</cell><cell>1.38</cell><cell>11.71</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 : 8x3, Zipf initial distribution.</head><label>4</label><figDesc></figDesc><table><row><cell>Algorithm</cell><cell>Aspect Ratio</cell><cell>Change</cell></row><row><cell>Slice-and-dice</cell><cell>44.58</cell><cell>0.61</cell></row><row><cell>Pivot-by-middle</cell><cell>4.54</cell><cell>1.57</cell></row><row><cell>Pivot-by-size</cell><cell>3.85</cell><cell>4.10</cell></row><row><cell>Cluster</cell><cell>1.78</cell><cell>6.19</cell></row><row><cell>Squarified</cell><cell>1.67</cell><cell>7.18</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 5 : Stock market data for 535 companies.</head><label>5</label><figDesc></figDesc><table><row><cell>Algorithm</cell><cell>Aspect Ratio</cell></row><row><cell>Slice-and-dice</cell><cell>369.83</cell></row><row><cell>Pivot-by-middle</cell><cell>19.30</cell></row><row><cell>Pivot-by-size</cell><cell>22.04</cell></row><row><cell>Cluster</cell><cell>3.74</cell></row><row><cell>Squarified</cell><cell>3.21</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements: Thanks to Ben Bederson and the reviewers for thoughtful suggestions on the draft.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">References</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Squarified Treemaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Bruls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huizing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the joint Eurographics and IEEE TCVG Symposium on Visualization</title>
		<editor>W. de Leeuw, R. van Liere</editor>
		<meeting>the joint Eurographics and IEEE TCVG Symposium on Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="33" to="42" />
		</imprint>
	</monogr>
	<note>Data Visualization</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">TennisViewer: A Browser for Competition Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="page" from="63" to="65" />
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Tree-maps: A Space-filling Approach to the Visualization of Hierarchical Information Structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Visualization &apos;91</title>
		<meeting>the IEEE Visualization &apos;91</meeting>
		<imprint>
			<date type="published" when="1991-10" />
			<biblScope unit="page" from="284" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Treemaps: Visualizing Hierarchical and Categorical Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Johnson</surname></persName>
		</author>
		<idno>UMI-94-25057</idno>
		<imprint>
			<date type="published" when="1994" />
			<pubPlace>College Park, MD</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note>Unpublished PhD dissertation</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Adapting Treemaps to Stock Portfolio Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W-A</forename><surname>Jungmeister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Turo</surname></persName>
		</author>
		<idno>CS-TR-2996</idno>
		<ptr target="http://www.cs.umd.edu/hcil/pubs/tech-reports.shtml" />
		<imprint>
			<date type="published" when="1992" />
			<publisher>Prentice Hall</publisher>
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>R97] Sheldon, R. A First Course in Probability</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Tree Visualization with Tree-Maps: 2-d Space-filling Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="92" to="99" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Improving the Visualization of Hierarchies with Treemaps: Design Issues and Experimentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Turo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johnson</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Visualization</title>
		<meeting>the IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1992-10" />
			<biblScope unit="volume">92</biblScope>
			<biblScope unit="page" from="124" to="131" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Extended Abstracts of the IEEE Information Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Vernier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nigay</surname></persName>
		</author>
		<ptr target="http://smartmoney.com/marketmap" />
	</analytic>
	<monogr>
		<title level="j">SmartMoney.com</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>Map of the Market</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Visualizing the Stock Market</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM CHI 99</title>
		<meeting>ACM CHI 99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="188" to="189" />
		</imprint>
	</monogr>
	<note>Extended Abstracts</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
