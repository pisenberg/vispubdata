<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of Morse Connection Graphs for Topologically Rich 2D Vector Fields</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Andrzej</forename><surname>Szymczak</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Levente</forename><surname>Sipeki</surname></persName>
						</author>
						<title level="a" type="main">Visualization of Morse Connection Graphs for Topologically Rich 2D Vector Fields</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Morse connection graph, vector field topology</keywords>
			</textClass>
			<abstract>
				<p>Recent advances in vector field topology make it possible to compute its multi-scale graph representations for autonomous 2D vector fields in a robust and efficient manner. One of these representations is a Morse Connection Graph (MCG), a directed graph whose nodes correspond to Morse sets, generalizing stationary points and periodic trajectories, and arcs-to trajectories connecting them. While being useful for simple vector fields, the MCG can be hard to comprehend for topologically rich vector fields, containing a large number of features. This paper describes a visual representation of the MCG, inspired by previous work on graph visualization. Our approach aims to preserve the spatial relationships between the MCG arcs and nodes and highlight the coherent behavior of connecting trajectories. Using simulations of ocean flow, we show that it can provide useful information on the flow structure. This paper focuses specifically on MCGs computed for piecewise constant (PC) vector fields. In particular, we describe extensions of the PC framework that make it more flexible and better suited for analysis of data on complex shaped domains with a boundary. We also describe a topology simplification scheme that makes our MCG visualizations less ambiguous. Despite the focus on the PC framework, our approach could also be applied to graph representations or topological skeletons computed using different methods.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The topological structure of time-independent planar vector fields is typically described using the classical topological features, i.e. stationary points, periodic trajectories, and separatrices, or trajectories that connect them. More generally, one can use Morse decompositions which are very similar, but replace the classical features with Morse sets, or regions of close to stagnant or circulating flow. Morse decomposition algorithms can be implemented so that the consistency of the result is guaranteed. In addition, they naturally support multiscale vector field topology. The number of Morse sets can be reduced using Morse set mergers, that generalize critical point cancellation operations used to simplify the topology of scalar fields. The mergers can be prioritized using an algorithm (possibly, also interactive input) provided by the user. This way, hierarchies of Morse decompositions with properties tailored to the user's goals can be built. In this paper, we focus on the piecewise constant (PC) vector field setting because the algorithm of <ref type="bibr" target="#b29">[30]</ref> leads to finer results than other approaches (in particular, it tends to produce features that are simple, i.e. structurally similar to the classical vector field features).</p><p>Despite our ability to compute it in a robust fashion, vector field topology is still problematic for complex vector fields because their number of features can be overwhelmingly large. While simplification can make it smaller, it may cause loss of detail and typically produces Morse sets with complex geometry, that can be hard to understand. This paper addresses these issues. Our main contribution is an algorithm for drawing the Morse Connection Graph (MCG), tailored for the case of topologically rich vector fields. An MCG is a directed graph whose nodes correspond to Morse sets and arcs indicate the existence of trajectories connecting different Morse sets. We propose an algorithm for drawing the MCG that preserves the spatial relationships between its arcs and nodes and highlights the coherence between connecting trajectories by clustering their similar segments. Our algorithm is motivated by a graph drawing algorithm of <ref type="bibr" target="#b6">[7]</ref>. Experiments for ocean data show that the resulting visualization can ef- fectively highlight arcs of the graph that follow the major ocean currents. Even though we focus our discussion on the piecewise constant setting, our approach can also be applied to visualize vector field topology obtained using other methods. Additionally, we discuss how the graph drawing approach can be meshed with other tools for planar PC vector field analysis. In particular, we describe how boundary of the domain can be handled in the PC framework. This provides a natural way to use the PC framework to study 'closed' systems, defined on bounded domains that particles cannot leave or enter, without losing the information related to flow interaction with the boundary. Additionally, this also allows us to extend merger-based simplification scheme of <ref type="bibr" target="#b23">[24]</ref> to the case of domains with a boundary. Building upon these results, we introduce the periodic trajectory culling, a simplification scheme that merges Morse sets similar to periodic trajectories into other Morse sets and makes the detail of the MCG visualized using our method clearer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRIOR WORK</head><p>The algorithm we propose in this paper is motivated by prior work in vector field topology and graph visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Vector field topology</head><p>Most of the work on vector field topology focuses on finding special kinds of trajectories such as stationary points, periodic orbits and separatrices. Examples of such techniques developed for continuous vector fields include <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b32">33]</ref>. A problem that often arises in these approaches is that trajectories are numerically approximated. In particular, they are not followed exactly. This means that correctness or consistency of the output is generally not guaranteed.</p><p>The combinatorial vector field framework of <ref type="bibr" target="#b22">[23]</ref> builds upon the mathematical results <ref type="bibr" target="#b9">[10]</ref> to provide a method for computing vector field topology with guaranteed consistency without numerical integration. However, trajectories of a combinatorial vector field are strongly restricted by the directions of mesh edges which makes them relatively poor approximation of the true trajectories of the underlying continuous vector field. Techniques for improving the accuracy are presented in <ref type="bibr" target="#b10">[11]</ref>, but only for the gradient vector field case.</p><p>The edge map approach developed in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b18">19]</ref> provides another solution to the consistency issues related to numerical integration. The basic idea is to represent the way trajectory segments contained in a single mesh triangle ∆ connect its boundary points as a mapping of the boundary of ∆ into itself, which can be approximated by a piecewise linear (possibly quantized), mapping with arbitrary accuracy. As a result, trajectories can be followed by applying a series of linear interpolations rather than numerical integration. Although this has not been done so far, the edge map representation can most likely be combined with the idea of transition graph used in the PC framework to increase its accuracy. However, it is not clear to what extent the additional complexity is justified for highly complex data, where the main challenge is to reveal the high level structure of the flow rather than extract all features with close to perfect accuracy.</p><p>In <ref type="bibr" target="#b3">[4]</ref>, a Morse decomposition is used to identify stationary points and periodic orbits. They are incorporated into a topological graph called the Entity Connection Graph (ECG), which extends the original definition of vector field topology of <ref type="bibr" target="#b13">[14]</ref>. In <ref type="bibr" target="#b4">[5]</ref>, Morse decomposition is proposed as a coarser, but also more stable alternative to the standard vector field topology. The same paper introduces an algorithm for computing a Morse decomposition and a Morse Connection Graph (MCG), that encodes connections between Morse sets. An extension of this approach that leads to a hierarchy of Morse sets and a scheme for Morse set classification is introduced in <ref type="bibr" target="#b2">[3]</ref>.</p><p>An efficient and robust algorithm for computing Morse decompositions of sub-triangle precision for piecewise constant vector fields is described in <ref type="bibr" target="#b29">[30]</ref>. In <ref type="bibr" target="#b26">[27]</ref>, an extension of this algorithm that supports construction of Morse decompositions of a user-specified stability under perturbation is introduced. A sweep algorithm for construction of a hierarchy of stable Morse decompositions is described in <ref type="bibr" target="#b27">[28]</ref>. Computing stable Morse decompositions or hierarchy of stable Morse decompositions is relatively slow and memory intensive since it requires analysis of much larger graphs than the computation of fine decompositions using the approach of <ref type="bibr" target="#b29">[30]</ref>. Also, user control over the properties of the hierarchy is often desirable. These issues motivated work on a faster and more flexible way to construct hierarchies of Morse decompositions <ref type="bibr" target="#b23">[24]</ref>. Their approach starts with a fine Morse decomposition and simplifies it by applying Morse set mergers. Similar topology simplification schemes, based on cancellations or combinations of classical topological features in non-gradient vector fields has previously been discussed in <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b33">34]</ref>. An algorithm for computing Morse Connection Graphs in the PC setting is described in <ref type="bibr" target="#b28">[29]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Graph visualization</head><p>Our visual representation of an MCG is strongly influenced by edge bundling techniques developed to visualize complex graphs. Edge bundling is a technique that reduces edge clutter in graph visualization by routing edges that connect close pairs of vertices along similar paths. These approaches lead to visualizations that highlights coherence between the graph edges.</p><p>The method closest to ours is the geometry-based edge clustering approach of <ref type="bibr" target="#b6">[7]</ref>. In that approach, the graph edges are clustered based on their intersections with edges of a control mesh. The basic idea is to bundle edges whose sequences of consecutive intersections overlap. Our approach is based on the same principle, but we also take into account the extra structure of an MCG constructed from a planar vector field. In particular, our way of simplifying and smoothing the arcs' paths attempts to preserve the spatial relationships between the nodes and arcs of the graph. We also cluster the arcs differently to avoid ambiguities of arc directions (an MCG is a directed graph).</p><p>There are several other methods for edge bundling. A method where graph edges are clustered by being gradually deformed toward ridges of the distance function to the closest node is presented in <ref type="bibr" target="#b8">[9]</ref>. An approach that splits the graph edges into short segments and then deforms them based on a simple ordinary differential equation involving spring and electrostatic forces is presented in <ref type="bibr" target="#b14">[15]</ref>. A technique based on minimization of a combination of the total length of the paths and their ink is introduced in <ref type="bibr" target="#b21">[22]</ref>. The method of <ref type="bibr" target="#b15">[16]</ref> performs edge bundling by applying carefully designed sharpening operation to the edge density map obtained from an initial drawing of the graph.</p><p>Graph representations of topology have unique requirements that are generally not satisfied by the general purpose algorithms. An algorithm for drawing contour trees that can show contour attributes along with the tree structure is presented in <ref type="bibr" target="#b11">[12]</ref>. First, they move together across faces of the mesh, with velocity in a face F equal to f (F). Then, they follow edges e and f , which are imploding (vectors in their adjacent triangles point toward them). Generally, trajectories that hit an imploding edge are trapped in it until they reach its endpoint. So far, trajectories have followed a uniquely defined path. However, this changes after v is reached. Trajectories can leave v in one of its three unstable directions (into faces T or T ′ , or along the edge g). The edge g is exploding, since the vectors in its incident triangles point away from it. Trajectories following such an edge can leave it at any point into one of the incident triangles, or follow it until they reach its endpoint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PC FRAMEWORK: BACKGROUND</head><p>Morse decompositions and MCGs are generally computed from a finite directed graph representation of the flow. In this paper we build upon the algorithms of <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref> designed for piecewise constant (PC) vector fields. We also use the approach of <ref type="bibr" target="#b23">[24]</ref> to simplify Morse decompositions. In this section, we include an outline of these results. Because of limited space, we keep it concise. Full detail can be found in the three original papers. Our discussion introduces two extensions of the original method of <ref type="bibr" target="#b29">[30]</ref>. We allow the PC vector field to be defined on a polygonal mesh with convex faces. Also, we describe a new way of treating the boundary of the data set, which allows trajectories to slide along it. As a result, a trajectory that hits the boundary can be continued indefinitely in time, ensuring better properties of the MCG.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Piecewise constant vector fields</head><p>A PC vector field is constant in each mesh element. While the original PC framework was developed for vector fields defined on triangle meshes, it is straightforward to generalize it to PC vector fields defined on 2D polygonal meshes with convex faces. A PC vector field assigns a 2D vector f (F) to each face F of the mesh. Its trajectories ( <ref type="figure" target="#fig_0">Figure  1</ref>) move through a face F with constant velocity, equal to f (F). Once a trajectory hits a mesh edge, it can either cross it into the adjacent face across that edge or follow the edge if it is exploding or imploding <ref type="figure" target="#fig_0">(Figure 1</ref>). The velocity of the flow along an exploding or imploding edge is equal to the weighted average of vectors assigned to its incident faces, with weights chosen to make it parallel to the edge. The behavior at the vertices is more complicated. Depending on its sector structure, the vertex is stationary or non-stationary. Trajectories are allowed to stay at stationary vertices for some amount of time (possibly, forever). They have to leave non-stationary vertices immediately. A trajectory can leave a vertex (either stationary or not) along a linear segment obeying the rules for mesh edges or faces described earlier. In general, there may be more than one trajectory passing through a point in the domain. However, the resulting multi-valued flow has properties that make it suitable for topology computation purposes <ref type="bibr" target="#b29">[30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Flow along the boundary</head><p>For reasons outlined earlier on, we let trajectories slide along the boundary edges in the domain. Our approach mimics the standard treatment of the boundary in <ref type="bibr" target="#b13">[14]</ref> and much of other work on vector field topology, where the attachment and detachment points are identified as features of interest for vector fields defined on bounded domains with no-slip boundary conditions. In the PC framework, one would rather avoid explicit non-slip conditions, since it would not allow discriminating topological features on the boundary of the domain  (basically, every connected component of the boundary would be contained in a single Morse set). Instead, we extrapolate the flow to any boundary edge from its incident face. As a result, the counterparts of attachment and separation points become separate recurrent features. More precisely, we let trajectories follow a boundary edge e with velocity equal to the perpendicular projection of the vector assigned to the face incident to e onto e. If the projection is zero, we pick the flow direction arbitrarily, to restrict stationary points to the mesh vertices (cf <ref type="bibr" target="#b29">[30]</ref>). For the vector field in <ref type="figure" target="#fig_1">Figure 2</ref>, left, the flow directions along the boundary edges are indicated by the green arrows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Stationary points on the boundary</head><p>In order to determine stationary points on the boundary of the data set, we extend the sector analysis <ref type="bibr" target="#b29">[30]</ref> to boundary vertices. We first determine all stable and unstable directions of such a vertex v. Stable directions are directions from which trajectories can enter the vertex, and unstable directions are trajectories along which trajectories can leave the vertex. The next step is to determine sector structure. We scan the stable and unstable directions in the counterclockwise order, starting from one of the boundary edges incident to v. A consecutive sequence of unstable directions defines an unstable parabolic sector. Similarly, a consecutive sequence of stable directions defines a stable <ref type="figure">Fig. 4</ref>. Examples of stationary vertices on the boundary of the domain. The vertex on the left has an elliptic sector (brown). Other types of sectors are color coded as described in <ref type="figure" target="#fig_2">Figure 3</ref>. Some stable or unstable parabolic sectors consist of a single direction. In the second example, the only unstable direction points along an imploding edge. The sole unstable parabolic sector consists of only this direction (note that, in the same example, one of the stable sectors consists of a single direction pointing along a boundary edge). The rightmost figure shows a repelling stationary vertex (source) on the boundary of the domain. A boundary vertex is non-stationary if it has precisely one stable parabolic, one unstable parabolic and one hyperbolic sector. All other boundary vertices are stationary. It turns out that the multivalued flow obtained with this definition can be used to determine vector field topology (i.e. is upper semicontinuous and admissible <ref type="bibr" target="#b29">[30]</ref>). A proof is provided in Section A of the supplementary material.</p><formula xml:id="formula_0">A. v B. v C. v v v v</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Transition graph</head><p>A transition graph is a directed graph that serves as a finite representation of all trajectories of a PC vector field. Nodes of a transition graph are in one to one correspondence with n-sets. N-sets are either mesh vertices or edge pieces, that result from subdividing mesh edges into shorter line segments. The arcs encode all possible connections between n-sets made by simple trajectory segments, i.e. linear segments that the trajectories are built from. Simple trajectory segments are constant velocity segments that move through mesh faces or along mesh edges. The transition graph also contains loop arcs at nodes corresponding to stationary vertices. An example is shown in <ref type="figure" target="#fig_1">Figure 2</ref>.</p><p>The transition graph can be refined to provide more precise information on the flow, by splitting an edge piece e into shorter ones and connecting them with the neighbors of e in the graph according to the local flow structure. Details of this process as well as refinement strategies to increase the precision of Morse decomposition and Morse Connection Graph are described in <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Morse decompositon</head><p>A Morse decomposition is derived from a transition graph G . Morse sets are defined by strongly connected components of G . They capture all circulation present in the flow, in particular all stationary points and periodic trajectories (since every cycle in the graph is contained in a strongly connected component). Morse sets can be classified based on fixed point index and stability (i.e. categorization as repelling, attracting or neither repelling nor attracting). In this paper, we extend the original classification of <ref type="bibr" target="#b29">[30]</ref> to the case of data sets with a boundary.</p><p>The idea is to compute not one but two fixed point indices for each Morse set M. The a-index of M is computed by extending the flow to the entire plane so that the domain attracts the flow around it. The r-index is computed as the index of M by extending the flow so that the domain repels the flow around it. In practice, both indices are computed by summing the indices of all vertices in M for flows extended both ways. Therefore, we focus the rest of this section on derivation of the formula for the a-and r-indices of a vertex.</p><p>As the starting point, we use the formula for the index of a vertex in the interior of the domain derived in <ref type="bibr" target="#b7">[8]</ref> and used in <ref type="bibr" target="#b29">[30]</ref>: 1 + e−h 2 , where e and h are the numbers of elliptic and hyperbolic sectors (respectively). This formula can be used directly to compute the index of any internal vertex: since index is local, the r-indices and a-indices are the same and are equal to the fixed point index. For a boundary vertex v, the formula needs to be changed to account for sectors outside the . The first one is trivial: by perturbing the flow near the Morse set, one can remove all circulating or stagnant flow within it. The second and third sets can be viewed as generalized detachment and attachment points <ref type="bibr" target="#b13">[14]</ref>. * <ref type="figure">Fig. 7</ref>. Left: a phase portrait of a planar flow defined on a rectangular domain, containing one saddle and one source in the interior. Flow along the boundary defined consistent with our scheme is shown as brown arrows. Stationary points on the boundary are shown using color squares (green -attracting, red -repelling, blue -neither). The MCG for this flow is shown on the right. If the flow along the boundary were not used, the MCG would contain only the arc labeled with a star, with the only nodes being the endpoints of that arc. In particular, there would be no arc out of the node corresponding to the saddle, even though it is not an attracting set. All trajectories leaving the saddle would simply leave the domain, so they would not contribute to the MCG arcs.</p><p>domain created by the flow extension. To describe these sectors, it is convenient to consider three cases, shown in <ref type="figure" target="#fig_3">Figure 5</ref>.</p><p>In case A, in addition to the sectors within the domain, two hyperbolic and one stable parabolic sectors are created outside the domain as the result of flow extension for a-index ( <ref type="figure" target="#fig_3">Figure 5, top left)</ref>. Hence the a-index is equal to 1 + e−(h+2) 2 = e−h 2 , where e and h are the numbers of elliptic and hyperbolic sectors found using the sector analysis described in Section 3.1.2. For the r-index (bottom left), the extended flow does not add any hyperbolic or elliptic sectors. Therefore, the original formula 1 + e−h 2 can be used. The formulas in cases B and C can be derived in the same way, based on the number of hyperbolic sectors formed by purple trajectories in <ref type="figure" target="#fig_3">Figure 5</ref>.</p><p>Extending the classification scheme of <ref type="bibr" target="#b29">[30]</ref>, we say that a Morse set of a-index i a and r-index i r is of type (i a , i r , +) if it is repelling, (i a , i r , −) if attracting and (i a , i r , 0) if neither repelling nor attracting. For Morse sets contained in the interior of the domain, i a = i r , and both are equal to the standard fixed point index. Hence, Morse sets of types (−1, −1, 0), (1, 1, +), (1, 1, −), (0, 0, +), (0, 0, −) generalize saddles, sources, sinks and repelling and attracting periodic trajectories (respectively). Morse sets of type (0, 0, 0) are trivial, i.e. contain no features or a number of features that cancel. Most common types of Morse sets intersecting the boundary of the domain are shown in <ref type="figure" target="#fig_4">Figure 6</ref>. Morse sets of any of these types are called simple. All other Morse sets are complex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Morse Connection Graph</head><p>A Morse connection graph (MCG) is determined from a transition graph G and represents potential connections between different Morse sets. Here, we define the MCG in two steps, following <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b28">29]</ref>. First, define as the 'is connected to' relationship on the strongly connected components of G , defining non-trivial Morse sets. More precisely, for two components A and B, A B if and only if there is a path in G connecting a node in A to a node in B. By definition of strongly connected components, existence of such a path is equivalent to existence of a path from any node p ∈ A to any node q ∈ B in G . Note that is a partial order <ref type="bibr" target="#b17">[18]</ref>. The MCG obtained from G , denoted by MCG(G ), can then be defined as the Hasse diagram of . More precisely, an arc A → B is in the MCG if and only if B is an immediate successor of A (or, equivalently, A is an immediate predecessor of B) in the partial order , i.e. A B and there is no C such that A C B.</p><p>Because of our treatment of the boundary of the domain, the stability of a Morse set is encoded in the MCG. More precisely, a Morse set A B <ref type="figure">Fig. 8</ref>. Merger of A and B. For a path connecting A and B, arcs of the inverted path (magenta) are inserted into the transition graph. As a result, A, B and all nodes on paths connecting them are fused into a larger strongly connected component. <ref type="figure">Fig. 9</ref>. A fine Morse decomposition and a coarser one obtained using periodic trajectory culling; note that all Morse sets equivalent to periodic trajectories (red or green loops in the left image) are gone in the simplified decomposition. We follow the same color coding as in <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b29">30]</ref>   <ref type="figure">Figure 7</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Simplification using merger operations</head><p>In our experiments, we use a variant of the algorithm of <ref type="bibr" target="#b23">[24]</ref> to simplify Morse decompositions. Let A and B be two strongly connected components of a transition graph G connected by an MCG edge A → B. A merger of A and B is performed by picking any path connecting an element in A to an element in B and adding the reversed path to G . This has the effect of replacing strongly connected components A and B with a single strongly connected component containing A, B and all paths connecting A and B <ref type="figure">(Figure 8</ref>). Note that the method used in this paper is different from the original approach of <ref type="bibr" target="#b23">[24]</ref>, which executes the merger by adding a single arc from any node in B to any node in A. However, such arc could potentially connect nodes corresponding to n-sets that are geometrically far from each other, which would lead to unnecessary intersections between connecting curves (Section 4.1) needed for our MCG drawing procedure. A general Morse simplification scheme would execute merger operations in an order determined to support the user's goals and requirements. In our case, we use the diameter of the approximate bounding box of the resulting Morse set as the 'cost' of a merger operation. For a Morse set in the initial fine Morse decomposition, the approximate bounding box is simply the bounding box for the union of n-sets in the respective strongly connected component of the transition graph. Whenever two components A and B are merged, we use the smallest axis-oriented box containing the approximate bounding boxes of A and B as the approximate bounding box of the resulting component.</p><p>The simplification algorithm executes admissible merger operations in order of increasing cost. Admissibility is defined by the user, and provides means to control the outcome of the process. In examples shown later in this paper, we use a process referred to as periodic trajectory culling. We consider a merger admissible if either A or B is of a periodic trajectory type ((0, 0, +) or (0, 0, −)) and the type of the resulting Morse set is simple. This forces periodic trajectory-like Morse sets to be merged with other ones if only the result is simple. In practice, this leads to a simplified decomposition without Morse sets similar to periodic trajectories ( <ref type="figure">Figure 9</ref>). Our implementation of the simplification algorithm maintains the MCG throughout the process and decides if a merger is admissible based on the information contained in the MCG (details are described in <ref type="bibr" target="#b23">[24]</ref>). This makes it more efficient because the MCG is typically much smaller than a transition graph that it is derived from. Let us stress that, for planar vector fields defined on bounded domains, this would not be possible without treating the boundary as described in Sections 3.1.1 and 3.1.2 (since otherwise MCG would not contain Morse set stability information as shown in <ref type="figure">Figure 7</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">MCG DRAWING</head><p>In this section, we describe our MCG drawing algorithm. The basic idea is to start with paths similar to trajectories representing MCG arcs (which can potentially intersect, although in practice intersections are rare) and gradually simplify and cluster them without introducing new intersections. The end result is a visual representation that highlights the coherence between connecting paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Representatives and connecting paths</head><p>Let G be a transition graph. Our algorithm starts with picking a representative node (vertex or edge piece) from each strongly connected component of G . The center of mass of that node will serve as the representative point for the corresponding Morse set. After experimenting with different strategies for this step, we finally settled on a simple procedure that chooses the representative of a strongly connected component M according to the following rules, that give preference to topological features within the Morse set:</p><p>1. If there are a sinks or sources in M, pick one of them 2. Otherwise, if there is a stationary vertex in M, pick one of them 3. Otherwise, pick any node in M. The next step is to construct paths in G that represent MCG arcs. For an arc A → B in the MCG, that path is the shortest path in G connecting the representative element of A to the representative element of B. To compute it, we use the Dijkstra's algorithm <ref type="bibr" target="#b5">[6]</ref> with weight of an arc a → b of G set to the distance between the centers of mass of a and b (recall that a and b can be edge pieces or vertices). The piecewise linear curve connecting the centers of masses of consecutive nodes along the path will be referred to as the connecting curve corresponding to the MCG arc A → B. Connecting curves, together with representatives of Morse sets for the simplified Morse decomposition in <ref type="figure">Figure 9</ref> are shown in <ref type="figure" target="#fig_0">Figure 10</ref>, left. Note that while the connecting curves occasionally merge and split, they rarely intersect. Our algorithm applies simple operations that make these curves geometrically simpler without introducing new intersections. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Discretization</head><p>First, the connecting curves are discretized. For each curve, we compute its consecutive intersections with the edges of the Delaunay triangulation T of the representative points of the Morse sets. The original connecting curve is replaced by the discretized connecting curve, the piecewise linear curve connecting the consecutive intersection points (referred to as knots later on). The discretization operation is illustrated in <ref type="figure" target="#fig_0">Figure 11</ref>, left. Discretized connecting curves for a topologically complex data set are shown in <ref type="figure" target="#fig_0">Figure 10</ref>, center. The discretization operation does not introduce any new intersections between the curves. An argument can be based on <ref type="figure" target="#fig_0">Figure 12</ref>, left. Consider two sections of non-intersecting connecting curves within a single triangle in T . One of them is shown in magenta in the figure. It splits the boundary of the triangle into two parts (shown with lines of different thickness). Since the two curves do not intersect, the other one (dark blue) enters and exits through the same section of the boundary. Therefore, the segments of the discretized curves (dashed lines) representing the original curve sections inside the triangle do not intersect. Note that this is true even if each of the dashed segments intersects the other curve (as shown in the figure).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Shortcutting</head><p>At this stage, we simplify the discretized connecting curves by means of two types of shortcutting operations, which are guaranteed not to introduce new intersections of the connecting curves.</p><p>The goal of the first type of shortcutting is to cut through backtracking sections of the connecting curves. For each curve, we remove all pairs of its consecutive knots located on the same edge of T . This operation is repeated until there is no pair of consecutive knots to remove. An example is shown in <ref type="figure" target="#fig_0">Figure 11</ref>, center. Shortcutting of the second type simplifies the geometry of curves spiraling into or out of Morse set representatives. For a curve connecting representative points p and q, we remove knots at the beginning of the curve, located on edges of T incident to p. Similarly, knots at the end of the curve located on edges of T incident to q are removed <ref type="figure" target="#fig_0">(Figure 11, right)</ref>.</p><p>Shortcutting does not introduce connecting curve intersections. To see this for shortcutting of the first type, consider two non-intersecting discretized curves shown in magenta and in green in <ref type="figure" target="#fig_0">Figure 12</ref>, center. Suppose that shortcutting replaces the segment of the magenta curve between a and b with a shortcut ab intersecting the green curve. Because the shortcut took place, there is no vertex of T within the blue region, bounded by the original segment of the magenta curve and the <ref type="figure" target="#fig_0">Fig. 13</ref>. Two connecting trajectories running close to each other (black lines). The vector field can be perturbed slightly in the magenta box so that the top trajectory follows the original route of the bottom trajectory past the box (as indicated by the blue line). shortcut. However, if this is the case, the section of the green curve between a ′ and b ′ would be replaced by the dashed green segment (also by shortcutting of the first kind), removing the intersection.</p><p>To see why shortcutting of the second type does not introduce new intersections, look at <ref type="figure" target="#fig_0">Figure 12</ref>, right. The shortcut for the end section of the red curve is shown in cyan. Take any discretized curve that does not intersect the red one, but does intersect the shortcut (an example is shown in blue). In the case shown in the figure, the blue trajectory does not end at d. A section of the blue curve containing its part between the intersections with the cyan shortcut will be removed and replaced by a shortcut using shortcutting of the first kind (for the case shown in the figure, the shortcut is the dashed blue interval eg). We conclude that the curves do not intersect after shortcutting operations are applied. Note that it is also possible that the blue curve ends at d, never reaching the points g and f . If this is the case, its final section (between e and d) is replaced by the shortcut ed and therefore the intersection with the cyan shortcut is also removed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Clustering</head><p>The goal of the clustering step is to group connecting curves that are locally similar by moving their knots on an edge e to the same location on e. This fuses sections of connecting curves that run close to each other into a single path. While this introduces ambiguities, one can argue that this is the right kind of ambiguity from the visualization standpoint. Connecting trajectories that run close to each other, particularly for a long time, tend to be highly unstable with respect to vector field perturbation. In particular, by introducing a small change to the vector field, a connecting trajectory can be rerouted along one that runs close to it <ref type="figure" target="#fig_0">(Figure 13)</ref>.</p><p>Let e be an edge of T . We group the knots of the discretized curves in e so that knots in the same group are consecutive along e, and the edges of T containing the predecessor and successor knots along their curves coincide. An example of a grouping satisfying the above criteria is shown in <ref type="figure" target="#fig_0">Figure 14</ref>, left. Clustering moves all knots in the same group to the same point, the center of mass of the group <ref type="figure" target="#fig_0">(Figure 14,  right)</ref>. The result of clustering for curves in <ref type="figure" target="#fig_0">Figure 10</ref> is shown in <ref type="figure" target="#fig_0">Figure 15</ref>, left. Note that our restrictions on knot grouping implicitly enforce knots in one group to cross the edge in the same direction. Hence there are no segments with arrows pointing both ways.</p><p>The basic scheme described above can be refined to make the clustering less aggressive. For example, instead of only predecessors and successors of knots in the same group being identical, we could require some number n of preceding or following nodes to be located on the same edges of T . One could also take the spacing of the nodes into account and require a pair of knots that are consecutive along e and more than some threshold away to be in different groups. More sophisticated clustering techniques for the knots on e can be used as well (for example, a k-means clustering based scheme is used in <ref type="bibr" target="#b6">[7]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Smoothing</head><p>After the clustering step, the connecting curves still tend to be geometrically complex. Therefore, we apply a simple iterative smoothing algorithm described in this section to improve their appearance. Recall that at this point, because of clustering (Section 4.4), there are typically a number of connecting curves passing through any given knot. The basic idea of a single step of smoothing is shown in <ref type="figure" target="#fig_0">Figure  16</ref>, left. A knot with three curves (solid red, blue and green lines) passing through it is shown as a black disk. When applying a smoothing operation, we compute the intersections of the dashed lines, connecting the knots along each curve immediately before and after the black knot, with the line containing the edge e. This leads to the three points on the line, shown in red, blue and green. In general, some of them may be outside e. Also, there may be a number of curves following the same edges into and out of the black knot -if this is the case, some of the intersections coincide. A single iteration of smoothing moves the black knot half way toward the target location, defined as the average of the intersection points, but never beyond the two black tick marks, points a user-defined threshold away from the endpoints of e.</p><p>Smoothing may potentially move different knots to the same location, but does not introduce other types of new intersections. This is because, assuming that curves passing through the two triangles do not intersect, the ordering of targets along e coincides with the ordering of the original knots along e, provided that the targets are in e. For the example shown in <ref type="figure" target="#fig_0">Figure 16</ref>, the target location of the magenta knot, is closer to the top endpoint than the target of the black knot.</p><p>A single iteration of smoothing moves all knots as described above. In our experiments described in Section 5, we place the tick marks 2l e /(l e + 5) away from the endpoints, where l e is the length of the edge e (with the average length of an edge of the grid the PC vector field is defined on used as the unit of length). This choice is arbitrary and ideally should be left under the user's control. The smoothing iterations are executed a user-specified number of times (in all examples shown here, 20). An example showing the result of smoothing can be seen in <ref type="figure" target="#fig_0">Figure 15</ref>, center.</p><p>The basic smoothing operation described here may map two knots into a single point. If this is undesirable, one could move the overlapping knots after smoothing operation, so that their ordering along any edge matches the original ordering before the smoothing operation.</p><p>For example, a final location of a knot could be set to the weighted average of its location after smoothing and before smoothing (with the weight of the latter being small).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Bezier arcs</head><p>Smoothness of the connecting curves can be further improved by drawing their linear segments as cubic Bezier curves rather than straight lines <ref type="figure" target="#fig_0">(Figure 15, right)</ref>.</p><p>For any knot p we compute the average tangent vector over all curves passing through p. For a section o → p → q of such a curve, its contribution to the average tangent is defined to be oq. Contributions are added over all curves, leading to the average tangent vector T p at p. For a connecting curve segment a → b, the control points for the Bezier segment are a, a ′ , b ′ and b, where a ′ = a + |ab|/(3|T a |) • T a and b ′ = b − |ab|/(3|T b |) • T b . In other words, the control points a ′ and b ′ are one third of the length of the segment ab from a and b along their tangent average tangent directions <ref type="figure" target="#fig_0">(Figure 16, right)</ref>. Note that the Bezier curves can intersect even if the straight line connecting curve segments do not. However, we found it not to be a major problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTAL RESULTS</head><p>This section discusses the results of experiments on the publicly available ocean data <ref type="bibr" target="#b20">[21]</ref>. The data contains the horizontal component of the velocity vector at 50 different depths, spanning almost 20 years.</p><p>In our experiments, we used the monthly velocity data at the ocean's surface. The vector field is sampled on a 1440×720 latitude-longitude grid. A vector value is specified for each 2D cell (quad) of the grid. We treat the data as a PC vector field defined on a quadrilateral mesh. To generate the images in this section, we used the part of the data representing flow in the North Atlantic Ocean and around Australia (with sizes between 80 and 90 thousand vertices).</p><p>To construct the transition graph, we use a simplified variant of the procedure in <ref type="bibr" target="#b28">[29]</ref>, with the coarsening steps removed to keep the graph fine along connecting paths to increase their precision. First, we build the coarse transition graph, using complete mesh edges as edge pieces. We compute all strongly connected components of the graph and split all nodes in these components, and on paths that start or end in components that represent nontrivial Morse sets that are neither attracting nor repelling, into two equal parts. This refinement step is iterated 9 times to make the Morse decompositions fine enough for our purposes. In particular, they contain only a few complex Morse sets for any time step. Next, the periodic trajectory culling procedure (Section 3.5) is applied. Finally, we run the MCG visualization procedure (Seciton 4) using the resulting transition graph. All components are implemented in C++. The visualization module is based on OpenGL 4.2. On a machine with an INTEL i7-3930K processor, the total time needed to compute a representation of the MCG suitable for interactive rendering was around 20 minutes for each of the 80-90 thousand vertex subsets of the data.</p><p>The output effectively shows the high level structure of the flow. Larger clusters of connecting paths tend to follow major ocean currents. Examples illustrating this are shown in <ref type="figure" target="#fig_0">Figures 17 and 19</ref>. As expected, the results sacrifice geometric accuracy for visual clarity. For example, as seen by comparing <ref type="figure" target="#fig_0">Figures 17 and 18</ref>, circulation around numerous eddies in the original data is lost to yield a less cluttered and easier to understand visualization of the major flow features. However, the constraints imposed throughout the algorithm keep the deviation under control. In particular, recall that the spatial relationships between the connecting paths and Morse sets are preserved. Intuitively, this means that the connecting paths pass the Morse set representatives on the same side as the original paths pass the corresponding Morse sets. Since the representatives are picked from the original Morse sets, this means that simplification generally can not change the shape of the paths in a significant manner.</p><p>While ocean currents are highly variable, we found out that the results generally show the most important structures in a consistent manner over time. To our best knowledge, there are no other automated tools that could extract major ocean currents from data as complex as used here. The typical practice in ocean sciences is to average velocity data over time or smooth the data to remove the eddies (which results in loss of accuracy) and manually extract the major currents. The presented method could be an interesting alternative, in particular in study of time variability of ocean flow.</p><p>The periodic trajectory culling procedure has little effect on the coarse structure conveyed by the MCG visualization algorithm <ref type="figure" target="#fig_0">(Figure 19)</ref>, but the finer details of the graph are easier to understand for simplified decompositions <ref type="figure" target="#fig_1">(Figure 20)</ref>. Our algorithm can also be applied to transition graphs simplified in different ways. In Section E of the supplementary material, we show the result for an MCG simplified in a more aggressive fashion.</p><p>Since Morse decompositions stabilize as the transition graph is refined <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>, one can expect the MCG visualizations obtained using our algorithm to stabilize as well. The periodic trajectory culling, if used, introduces some degree of instability because of its discrete nature. Despite that, the variation in the output is small if the Morse decomposition is fine enough. A typical example is included in Section C of the supplementary material.</p><p>Careful handling of the boundary of the domain is important not only to make topology simplification more efficient, but also for completeness and consistency of results for a closed system such as the ocean data flow used here. In Section B of the supplementary material, we present a comparison of results obtained with boundary handling described in Section 3.1.1 and without it.</p><p>The most important ocean currents could also be found as connecting paths between nontrivial Morse sets in simplified Morse decompositions, as shown in Section F of the supplementary material. However, the geometric complexity of connecting paths makes it hard to show the detail of the flow structure and highlight the major flow features at the same time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>We described a visual representation of Morse Connection Graph for planar PC vector fields, that highlights coherent behavior of connecting trajectories and preserves the spatial relationships between them and the Morse sets. Our algorithm can be used to show the high level flow structures such as major ocean currents in ocean flow data. It can be applied to topological skeletons computed using other methods, for example, based on separatrices instead of connecting paths.</p><p>The most computationally expensive part of our pipeline is building the transition graph and computation of the discretized connecting paths, because of the large size of the transition graph that these components involve (a more detailed complexity analysis of all steps of the algorithm is presented in Section G of the supplementary material). The rest of the algorithm (shortcutting, clustering and smoothing) takes up a small fraction of the total running time (for examples shown here, no more than 2 seconds out of about 20 minutes required for the entire procedure). This means that parameters such as widths of the lines in the output MCG visualization, amount of smoothing applied to the connecting curves and clustering granularity (an example of the latter is included in Section D of the supplementary material) can be adjusted based on an interactive interface. Important topics for future work include automatic optimization of these parameters and providing the user with intuitive control over the geometric accuracy of the paths shown in the final output.</p><p>We would also like to generalize the approach to vector fields defined on surfaces and three dimensional vector fields. These settings are considerably more challenging because, there is no obvious planar embedding of the MCG to start with, in contrast to the planar case presented in this paper. Our technique could potentially be used to visualize and cluster arbitrary sets of paths, which are not necessarily trajectories of autonomous planar vector fields. In particular, these paths could be trajectories of time dependent vector fields or movement traces. These applications will also be addressed in future work.  <ref type="figure" target="#fig_0">Fig. 17</ref>. A crop of the result for north Atlantic for March 1999 and 2000 (respectively). Note that although the two extracted structures are quite different geometrically, the major ocean currents <ref type="bibr" target="#b25">[26]</ref> can easily be recognized in both (we label some of them in the figure on the right). In the 1999 image, some of the currents are fragmented, but still recognizable. Both MCGs are derived from Morse decompositions obtained from fine ones using the periodic trajectory culling procedure. <ref type="figure" target="#fig_0">Fig. 18</ref>. A crop to region similar to shown in <ref type="figure" target="#fig_0">Figure 17</ref>, showing the rendering of Morse decompositions (left: fine, right: with periodic trajectory culling) with the connecting paths. This is the March 2000 time slice. Note that the flow structures are harder to see here than in the the MCG visualization in <ref type="figure" target="#fig_0">Figure 17</ref>, right.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>South Equatorial</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Leeuwin</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Great Australian Bight</head><p>East Australian Antarctic Circumpolar <ref type="figure" target="#fig_0">Fig. 19</ref>. A crop of a result for a region containing Australia (for June 2001), for a Morse decomposition simplified using periodic trajectory culling (left), and for the original fine Morse decomposition (right). Notice that the coarse structure is very similar. However, MCG detail is much better conveyed for the simplified decomposition ( <ref type="figure" target="#fig_1">Figure 20)</ref>. Major ocean currents, typical for Winter months <ref type="bibr" target="#b24">[25]</ref>, can easily be seen. We label some of them in the left figure. Note that much of the flow near Indonesia gets reversed. Also, the current following the South coast of Australia is essentially reversed in December 2004 and much less structured in December 2005 than in any of the June datasets. This is consistent with the analysis provided in <ref type="bibr" target="#b19">[20]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>An example of a PC vector field defined on a polygonal mesh. The mesh edges are shown in black and the red arrows represent the vector values assigned to the faces. A number of trajectories starting at a point s on the right hand side are shown in blue.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>A simple PC vector field is shown on the left. Red arrows in the mesh faces represent the input vector field. The direction of the flow along the exploding edgers is also indicated by a red arrow. Green arrows show the flow direction along the boundary edges. Each edge piece is given a label in {a,b,... ,o}. Vertices are given labels {p,q,... ,v}. Trajectory segments starting at points used to split the edges are shown in cyan. On the right, we show the transition graph for this vector field. Arcs representing the flow around the boundary are shown in brown, and edges described in<ref type="bibr" target="#b29">[30]</ref> -in black. The graph encodes all possible connections between the n-sets made by straight line segments of trajectories. For example, the edge piece f is connected to o, u, k, g, d and e since all these n-sets can be reached by a linear trajectory segment starting in f , that does not visit any other n-set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Sector analysis of a boundary vertex. Left: flow directions shown as black arrows. Note that there is always flow along any boundary edge (Section 3.1.1). Center: stable and unstable directions at the vertex shown as green and red arrows (respectively). Right: sectors (red: unstable parabolic, green: stable parabolic, blue: hyperbolic). This vertex is non-stationary.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Three cases arising in the index computation for a boundary vertex. The domain is shown in gold and purple arrows depict the extension of the flow outside the domain that arises in the a-index computation (top row) or r-index computation (bottom row). In case A, shown on the left, the flow around both boundary edges incident upon v is directed away from v. In case B, the flow along both edges is directed toward v. In case C, one edge contains flow toward v and the other -away from v. parabolic sector. A sector between an unstable and a stable direction can be elliptic or hyperbolic, depending on the direction of the flow inside it, as perceived from v. If the flow moves toward a stable sector, we have an elliptic sector. Otherwise, the sector is hyperbolic. Examples of sector structure are shown inFigures 3 and 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Schematic models of Morse sets intersecting the boundary, of simple types (0,0,0), (0,−1,0), (−1,0,0), (1,0,−) and (0,1,+)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 10 .</head><label>10</label><figDesc>Connecting curves (left) and discretized connecting curves before (center) and after (right) shortcutting. Edges of T are shown in magenta in the center and right figures. Representative points of Morse sets are shown as color-coded points, with colors representing Morse set types (the color coding is explained inFigure 9)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 11 .Fig. 12 .</head><label>1112</label><figDesc>Left: discretization turns the green curve into the blue curve. Center: shortcutting (of the first type) applied to the blue discretized curve replaces the section between a and b with the direct connection. The resulting curve section is shown in red. Note that the algorithm would achieve this by removing pairs of knots {k,l}, {i, j}, {g,h}, {e, f } and {c,d} from the blue curve (in this order). Right: shortcutting of the second type. An end section of a discretized curve, with endpoint at d, is shown in red. We remove all knots of the red curve with edges incident to d. This can be interpreted as replacing the section of the red curve between c and d, where c is the last intersection with an edge not incident to d, with a single segment (cyan). No intersections arise from discretization or shortcutting.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 14 .</head><label>14</label><figDesc>Left: a grouping of knots on the edge shared by the two triangles. Connecting curves passing through knots in the same group are shown in the same color. Right: the result of clustering of knots on the edge. Note that for a typical edge in a realistic topologically righ vector field, the number of groups is smaller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 15 .Fig. 16 .</head><label>1516</label><figDesc>Curves fromFigure 10after the clustering operation (left) and the smoothing operation (center and right), with segments drawn as straight lines (center) and Bezier curves (right). Arrows indicate the direction of the flow. Also, thickness of a segment is proportional to the number of connecting curves traversing it. This can be viewed as a simple importance measure. Left: Smoothing operation. Right: control points of the Bezier curve representing a connecting curve segment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 20 .Fig. 21 .</head><label>2021</label><figDesc>A zoomed in portion of the results for ocean flow near Australia. (a) and (b) show the fine Morse decompositions, with the connecting paths shown in (a). (c) is our visualization of the MCG, zoomed into the corresponding part of the graph. The nested set of periodic trajectory-like Morse sets in the magenta box gives rise to the complex configuration in (c), which is highly ambiguous (representatives of attracting and repelling periodic orbit-like Morse sets are shown as green and red rings). Periodic trajectory culling replaces it with a source with clean and easy to understand relationship to the rest of the MCG, (d) and (e). The rest of the simplified graph is much cleaner as well. Seasonal variability of ocean currents near Australia. In the top row, we show results for June 2004 and 2005, and in the bottom rowfor December 2004 and 2005.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Andrzej Szymczak is with Colorado School of Mines. E-mail: aszymcza@mines.edu. • Levente Sipeki is with Colorado School of Mines. E-mail: levente.sipeki@gmail.com.</figDesc><table /><note>Manuscript received 31 March 2013; accepted 1 August 2013; posted online 13 October 2013; mailed on 4 October 2013. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org.</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors are grateful to Prof. Weiqing Han from the Department of Atmospheric and Oceanic Sciences at the University of Colorado for useful comments and help with interpreting the results.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Edge maps: Representing flow with bounded error</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bhatia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jadhav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Levine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">G</forename><surname>Nonato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pacific Visualization Symposium (PacificVis) 2011</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="75" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Flow visualization with quantified spatial and temporal errors using edge maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bhatia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jadhav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Levine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nonato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1383" to="1396" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Morse set classification and hierarchical refinement using conley index</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="767" to="782" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Vector field editing and periodic orbit extraction using Morse decomposition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mischaikow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pilarczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="769" to="785" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Efficient Morse decompositions of vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mischaikow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="848" to="862" />
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Introduction to Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">H</forename><surname>Cormen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Leiserson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Geometry-based edge clustering for graph visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Qu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1277" to="1284" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">On the euler characteristic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Early</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The MIT Undergraduate Journal of Mathematics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="37" to="48" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Skeletonbased edge bundling for graph visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ersoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hurter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Paulovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cantareiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2364" to="2373" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Combinatorial vector fields and dynamical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Forman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematische Zeitschrift</title>
		<imprint>
			<biblScope unit="volume">228</biblScope>
			<biblScope unit="page" from="629" to="681" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Computing morse-smale complexes with accurate geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gyulassy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2014" to="2022" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Drawing contour trees in the plane</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Heine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1599" to="1611" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Representation and display of vector field topology in fluid flow data sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="27" to="36" />
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Visualizing vector field topology in fluid flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="1991-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Force-directed edge bundling for graph visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Holten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="983" to="990" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Graph bundling by kernel density estimation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hurter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ersoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3pt1</biblScope>
			<biblScope unit="page" from="865" to="874" />
			<date type="published" when="2012-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">An algorithmic approach to chain recurrence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">D</forename><surname>Kalies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mischaikow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C A M</forename><surname>Vandervorst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Found. Comput. Math</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="409" to="449" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The Design and Analysis of Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kozen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A quantized boundary representation of 2D flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Levine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jadhav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bhatia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3pt1</biblScope>
			<biblScope unit="page" from="945" to="954" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">The South-west Marine Region: Ecosystems and Key Species Groups. Department of the Environment and Water Resources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mcclatchie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Middleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pattiaratchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Currie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kendrick</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>Commonwealth of Australia</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">ECCO2: Estimating the circulation and climate of the ocean, phase II: High resolution global-ocean and sea-ice data synthesis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Menemenlis</surname></persName>
		</author>
		<ptr target="http://ecco2.jpl.nasa.gov/products/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Edge routing with ordered bundles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pupyrev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nachmanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bereg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Holroyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="136" to="147" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Fast combinatorial vector field topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Reininghaus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Löwen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Hotz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="1433" to="1443" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Simplification of Morse decompositions using Morse set mergers. under review</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Sipeki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Australia state of the environment 2011. Independent report to the Australian Government Minister for Sustainability</title>
		<ptr target="http://www.environment.gov.au/soe/2011/report/" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Introduction To Physical Oceanography. Open source textbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Stewart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Stable Morse decompositions for piecewise constant vector fields on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="851" to="860" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Hierarchy of stable morse decompositions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="799" to="810" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Morse connection graphs for piecewise constant vector fields on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="529" to="541" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Robust morse decompositions of piecewise constant vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szymczak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="938" to="951" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Grid-independent detection of closed stream lines in 2D vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Theisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weinkauf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Vision, Modeling and Visualization</title>
		<meeting>the Conference on Vision, Modeling and Visualization</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="421" to="428" />
		</imprint>
	</monogr>
	<note>VMV 04</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A topology simplification method for 2D vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="359" to="366" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Detection and visualization of closed streamlines in planar flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wischgoll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="165" to="172" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Vector field design on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mischaikow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1294" to="1326" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
