<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of Graph Products</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010-10-24">24 October 2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Jänicke</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Heine</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Hellmuth</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fraunhofer</forename><surname>Institut Für Zelltherapie Und Immunologie</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Germany</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">are with Image and Signal Processing Group</orgName>
								<orgName type="department" key="dep2">Institute for Computer Science</orgName>
								<orgName type="institution">Universität Leipzig</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Max Planck Institute for Mathematics in the Sciences, Germany, Bioinformatics Group</orgName>
								<orgName type="department" key="dep2">Department of Computer Science, and Interdisciplinary Center for Bioinformatics</orgName>
								<orgName type="institution">Universität of Leipzig</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Department of Theoretical Chemistry</orgName>
								<orgName type="institution">University of Vienna</orgName>
								<address>
									<addrLine>Austria, Santa Fe Institute, 1399 Hyde Park Rd., Santa Fe</addrLine>
									<postCode>87501</postCode>
									<region>NM</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Visualization of Graph Products</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2010-10-24">24 October 2010</date>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2010; accepted 1 August 2010; posted online</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:59+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph drawing</term>
					<term>graph products</term>
					<term>TopoLayout</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Hierarchical graph product layout: the four factors (left), top-layer view (middle) and a zoom to the second layer (right).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>To gain insight into binary relationships between objects, the relations are often coded into a graph, which is then visualized. The visualization is usually split in the layout and the drawing phase. The layout is a mapping of graph elements to points and curves in R d . The drawing assigns graphical shapes to the graph elements and draws them using the positions computed in the layout.</p><p>Many classes of graphs have been defined, e.g. trees, planar graphs, acyclic directed graphs, etc. However, most binary relationships that arise in nature do not fall in either of these classes and may only be represented as general graphs. While many layout algorithms exist that are tuned for special graph classes, there is no single sophisticated approach for general graphs, in the sense that if such a general method is applied to instances of a special graph class, the results are often inferior than using a specialized layout algorithm.</p><p>The structure of general graphs is often inhomogeneous. For many graphs it was found that there are parts that connect more with each other than with the rest of the graph. Detecting these clusters and successively collapsing them to single vertices results in a graph's hierarchical decomposition that can be visualized and explored at different levels of detail. A related idea is present in the TopoLayout <ref type="bibr" target="#b1">[2]</ref> approach: Even if a graph does not belong to a special graph class, substructures may. Therefore, their detection and collapsing also leads to a hierarchy, usually with a different graph class at each node of the hierarchy. TopoLayout can be seen as a generalization of graph clustering, as it treats clusters as a regular graph class in this framework.</p><p>A graph class that has not yet been discussed for automatic visualization is the class of graph products. A graph product is the result of a multiplication operation defined for graphs. For an general overview we refer the interested reader to <ref type="bibr" target="#b22">[23]</ref>. According to <ref type="bibr" target="#b22">[23]</ref> there are six options for defining a product for graphs, where the multiplication is associative, commutative, and has a unit. These products all have a vertex set that is the Cartesian product of the factors' vertex sets and differ only in their edge sets. <ref type="figure" target="#fig_0">Fig. 2</ref> shows an example of the two graph In the image each factor is associated with a color. The colored edges of the products are called Cartesian edges and the grey edges of the strong product are the cross edges. If only the colors of one factor are considered and all other edges deleted, the remaining graph consists of multiple connected components: its fibers. products we are mainly concerned with in this paper: the Cartesian and the strong product.</p><p>Many graphs have a product structure. Rectangular meshes are Cartesian products of paths. The Cartesian product of two cycles is a surface mesh of a torus. Each complete graph K n is a strong product of K p 1 ,..., K p k where p 1 ,..., p k are n's prime factors. Hamming graphs are the Cartesian product of complete graphs. A well-known Hamming graph is the d-dimensional hypercube, that is the Cartesian product of d edges. Therefore, graph products can be seen as a generalization of many graphs with regular structure.</p><p>The visualization of graph products was motivated from a biological model proposed by Wagner and Stadler <ref type="bibr" target="#b33">[34]</ref> that provided a concept concerning the topological theory of the relationships between genotypes and phenotypes. In this framework, a so-called "character" (trait) is identified with a factor of a generalized topological space that describes the variational properties of a phenotype. While these characters are usually not directly visible as an attribute of an organism, e.g. length of fingers, number of limbs, etc., the attributes are a combination of these traits. A graph can be constructed from the set of phenotypes and an "accessibility relation", that describes which phenotypes are interconvertible over short evolutionary time-scales. This evolution of phenotypes is reflected in the corresponding phenotype graph, that is itself (at least on a local level) a product graph <ref type="figure" target="#fig_1">(Fig. 3)</ref>. The problem is thus to find the factors that represent the character's evolution from the phenotype graph, i.e. their product. Therefore, a visualization for product graphs is needed that can effectively communicate the quality of results by emphasizing the regularity of graph structure through regularity of layout.</p><p>Other areas where graph products play an important role can be found in computational engineering, e.g., for the formation of finite element models or construction of localized self-equilibrating systems in computational engineering, see <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b27">28]</ref>. Typical tasks in scientific computing, like solving discretized partial differential equations, need computational meshes. Hamming graphs can be used to organize peers in a P2P network <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b31">32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>For a general overview of graph layout for general graphs and special graph classes we refer the reader to <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b21">22]</ref>. However, there does not exist an automatic layout algorithm tuned for graph products.</p><p>As one of our methods is a modification of the Fruchterman-Reingold algorithm <ref type="bibr" target="#b11">[12]</ref>, which is an algorithm for drawing general undirected graphs, we will give a brief account of it. Fruchterman and Reingold based their work on Eades <ref type="bibr" target="#b7">[8]</ref>, who viewed a graph's vertices as electrically charged particles that repel each other and edges as springs that attract particles. The layout of the graph is then found as an equilibrium state of that particle system by letting each particle The factors representing variational properties of phenotypes. The red factor indicates the "bodies" and the blue factor the "faces" of animals. Their multiplication forms a graph product: the phenotype space graph. It describes the possible evolution of phenotypes over short evolutionary time-scales. adapted from: <ref type="bibr" target="#b32">[33]</ref>. move according to the forces acting on it and slowly cooling the system by restricting the maximum movement per iteration. Fruchterman and Reingold extended this work by using a different force formula for springs, removing the repelling forces between distant particles, and constraining the layout to an area, so that the area could be subdivided into cells and repelling forces are only needed to be computed inside the cells and their neighbors. This general approach has been modified often, mostly to improve convergence and run-time. Frick et al. <ref type="bibr" target="#b8">[9]</ref> defined a local temperature for each vertex and gave heuristics to detect oscillations of subgraphs and cooling them faster. Hachul and Jünger <ref type="bibr" target="#b14">[15]</ref> presented a multi-pole approach called FM 3 that approximates repelling forces to distant vertices rather than computing them exactly and were thereby able to speed up the layout generation significantly. Different multi-level approaches exist <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b17">18</ref>] that first build ever coarser versions of the input graph and then compute layout for the graphs from coarsest to finest in each step using the layout of the coarser graph as a template. They improve the convergence and run-time of the layout algorithm. Hachul and Jünger <ref type="bibr" target="#b15">[16]</ref> gave an experimental evaluation for the different methods identifying FM <ref type="bibr" target="#b2">3</ref> as the most versatile layout algorithm. More recent work focused on using the GPU to compute the layouts with different acceleration structures <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>.</p><p>A different notion of force-directed methods is the spring embedder of Kamada and Kawai <ref type="bibr" target="#b24">[25]</ref> which uses springs of a certain stiffness and ideal length. The springs can act both attracting and repelling dependent on their current length. Rather than using repelling forces for vertices, each pair of vertices is connected by one spring with ideal length being the graph-theoretic distance between the vertex pair. The systems energy is coded in the stress which is then minimized. Gansner et al. <ref type="bibr" target="#b13">[14]</ref> identified the similarity of the problem with classical multi-dimensional scaling and proposed to use stress majoriziation to minimize the stress.</p><p>Although the preservation of symmetry is generally attributed to force-and spring-based algorithms, this seems to be only true for local substructures like clusters. Substructures that span the whole graph, like fibers of graph products, are usually not represented similarly; they often are subject to continuous deformation from one border of the layout to the other. For this reason, neither the Fruchterman-Reingold method, Kamada-Kawai, nor their many variations can be applied directly to draw graph products.</p><p>Harel and Koren <ref type="bibr" target="#b18">[19]</ref> presented a very fast and robust method called High-Dimensional Embedding (HDE) for drawing large graphs by carefully selecting landmark vertices of the graph that "span" the graph and then using a maximum variance projection of the graph distances to these landmarks.</p><p>A recent direction is drawing graphs with constraints <ref type="bibr" target="#b6">[7]</ref>. However, constraints between groups of vertices only ensure that these groups do not overlap. Constraining groups of vertices to have the same layout is yet not possible in this framework.</p><p>The TopoLayout <ref type="bibr" target="#b1">[2]</ref> algorithm builds a hierarchy of a graph by successive finding and splitting of substructures. The first phase splits the graph in its connected components. The second phase splits trees from each connected component. The third phase splits the graph into biconnected components and recurses in them. Each biconnected component is then checked whether it is suited to be drawn as an HDE component, whether is is a complete graph, or whether it consists of clusters (in that order). In the last case, the graph is split in its clusters and a graph for the inter-cluster connections. To these graphs the TopoLayout algorithm is applied recursively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">GRAPH PRODUCTS</head><p>In this paper, we use definitions similar to <ref type="bibr" target="#b5">[6]</ref> and <ref type="bibr" target="#b22">[23]</ref>. A graph G = (V, E) is an ordered pair of a vertex set V and an edge set E that consists of 2-element subsets of V . We assume that V is finite. For each edge {u, v} ∈ E, u and v are called adjacent to each other.</p><formula xml:id="formula_0">A graph G = (V , E ) is a subgraph of G = (V, E), written as G ⊆ G, if V ⊆ V and E ⊆ E. A subgraph G = (V , E ) is a spanning subgraph of G = (V, E), if V = V . Given two factors G 1 = (V 1 , E 1 ) and G 2 = (V 2 , E 2 ), the Carte- sian product G = (V, E ) = G 1 G 2 and the strong product G = (V, E ) = G 1 G 2 are defined as follows: V = V 1 ×V 2 = {(v 1 , v 2 )|v 1 ∈ V 1 , v 2 ∈ V 2 } E = {{(v 1 , u 2 ), (v 1 , v 2 )}|v 1 ∈ V 1 , {u 2 , v 2 } ∈ E 2 } ∪ {{(u 1 , v 2 ), (v 1 , v 2 )}|{u 1 , v 1 } ∈ E 1 , v 2 ∈ V 2 } . E = E ∪ {{(u 1 , u 2 ), (v 1 , v 2 )}|{u 1 , v 1 } ∈ E 1 , {u 2 , v 2 } ∈ E 2 } .</formula><p>It is imminent from the definition that the Cartesian product is a spanning subgraph of the strong product. The edges the strong product shares with the Cartesian product are called the Cartesian edges, and the other edges are called cross edges. A graph G is prime with respect to one of these products if the only product that is isomorphic to it is the product of G with the graph ({v}, / 0) (the unit). The definitions extend naturally to multiple factors. For instance, for the Cartesian product G = G 1 ... G k we get:</p><formula xml:id="formula_1">V = {(v 1 ,..., v k )|v i ∈ V i , 1 ≤ i ≤ k} E = {{(v 1 ,..., u l ,..., v k ), (v 1 ,..., v l ,..., v k )}|v i ∈ V i , {u l , v l } ∈ E l } .</formula><p>From this we can observe two things: each vertex of V is uniquely defined by a list of vertices from each factor, its coordinates, and each edge of E has exactly one origin edge, {u l , v l }, from one factor G l . If we create a spanning subgraph of G that contains only the edges that originate from G l for one particular l, the connected components of that subgraph are called the G l -fibers; each one being isomorphic to G l . For each vertex v l of each factor G l , we can define the set of instances of that vertex in the different fibers as follows:</p><formula xml:id="formula_2">I v l = {(x 1 ,..., v l ,..., x k )|x i ∈ V i , 1 ≤ i ≤ k, i = l}.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">VISUALIZATION OF GRAPH PRODUCTS</head><p>In previous work that treated graph products from a theoretical point, e.g. <ref type="bibr" target="#b22">[23]</ref>, illustrations were created manually, but one property was visible in almost all of them: all fibers of a factor G l were drawn congruently. More precisely, if the layout of one fiber was fixed, the layouts of the others were simple translations of the first. This is necessary so that all fibers of all factors can be drawn congruently. This style is illustrated in <ref type="figure" target="#fig_0">Fig. 2</ref>. In order to stay consistent with established practice, we adopted this as an aesthetic criterion for drawing graph products.</p><p>Generally, computation of a graph layout is subject to aesthetic criteria, which describe the relationship between properties of the layout and its impact on human understanding. See <ref type="bibr" target="#b2">[3]</ref> for an overview. Among these aesthetic criteria are, e.g. the minimization of edge crossings, which has been shown to have the greatest impact on human understanding <ref type="bibr" target="#b30">[31]</ref>, minimization of total edge length, equal distribution of vertices, and preservation symmetry. The last criterion is fulfilled, if isomorphic substructures of a graph have a similar layout. The aesthetic criterion for drawing graph products can be seen as a specialization of the symmetry criterion.</p><p>In the remainder of this section, we present algorithms for automated creation of a graph product's layout. They assume that the factors are given and construct the product from them. The methods are straight-line layouts and reduce the layout problem to a positioning of vertices. The method presented in Section 4.3 uses a modification of the Fruchterman-Reingold layout <ref type="bibr" target="#b11">[12]</ref> to the layout of each factor so that the layout of the graph product looks nice. The method presented in Section 4.4 requires a user-given order of factors to construct a layered view which can be used for exploration of large graph products.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Congruent Layout</head><p>Before we present the layout algorithms, we show how, by defining each factor's straight-line layout, a congruent layout can be obtained by adding the positions of each product graph vertex's coordinates.</p><p>Given k factors, G 1 ,..., G k and their resulting graph product with vertex set V . Let p i : V i → R d denote the position of each vertex of the factor 1 ≤ i ≤ k in an Euclidean space R d , the position of each vertex of V is then given by:</p><formula xml:id="formula_3">p : V → R d (v 1 ,..., v k ) → ∑ 1≤i≤k p i (v i ).</formula><p>Now we show that two fibers of the same factor are equivalent up to translation. Let u l be a vertex of a factor G l , and A and B some fibers of G l . The two instances of u l on these fibers are:</p><formula xml:id="formula_4">a i ∈ V i , 1 ≤ i ≤ k, i = l and b i ∈ V i , 1 ≤ i ≤ k, i = l. u l '</formula><p>s position with respect to A and B is given by:</p><formula xml:id="formula_5">p(a 1 ,..., u l ,..., a k ) = p l (u l ) + ∑ 1≤i≤k,i =l p i (a i ) p(b 1 ,..., u l ,..., b k ) = p l (u l ) + ∑ 1≤i≤k,i =l p i (b i ).</formula><p>The difference vector of u l from the fiber A to B is therefore:</p><formula xml:id="formula_6">p(b 1 ,..., u l ,..., b k ) − p(a 1 ,..., u l ,..., a k ) = ∑ 1≤i≤k,i =l p i (b i ) − p i (a i ).</formula><p>Let v l be another vertex of factor G l . If the difference vector that was used to move u l from fiber A to fiber B is added to v l in fiber A, it becomes imminent that this moves v l to the same point as using p directly.</p><formula xml:id="formula_7">p(a 1 ,..., v l ,..., a k ) + p(b 1 ,..., u l ,..., b k ) − p(a 1 ,..., u l ,..., a k ) = p l (v l ) + ∑ 1≤i≤k,i =l p i (a i ) + ∑ 1≤i≤k,i =l p i (b i ) − p i (a i ) = p l (v l ) + ∑ 1≤i≤k,i =l p i (b i ) = p(b 1 ,..., v l ,..., b k )</formula><p>As all edges are drawn as straight lines, i.e. their points are defined by linear interpolation between their incident vertices positions, they are equivalent up to translation, too.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">High-Dimensional Embedder (HDE)</head><p>The High-Dimensional Embedder of Harel and Koren <ref type="bibr" target="#b18">[19]</ref> was already briefly mentioned in the related work, but in this section we show that it gives a congruent layout for Cartesian graph products. HDE selects m landmark vertices and then computes the graphtheoretic distances of all input graph vertices to these m landmarks. Conceptually, the resulting m-dimensional distance vectors of each vertex are treated as positions in an m-dimensional space. A covariance matrix is then computed from these positions and its two biggest eigenvalue/eigenvector pairs are determined. These eigenvectors describe the directions of maximum variance and the final layout is obtained by projecting the distance vectors into the plane spanned by these vectors.</p><p>For Cartesian graph products, the graph-theoretic distances in the product are strongly related to the distances in the factors. For any two vertices of a Cartesian graph product, the distance between them is simply the sum of distances inside each factor. For example, for any two factors G 1 , G 2 and any two vertices (u 1 , u 2 ) and (v 1 , v 2 ) of the product G 1 G 2 , the distance between them is the same as the distance between u 1 and v 1 in G 1 plus the distance between u 2 and v 2 in G 2 . Because of this relation, application of HDE to a Cartesian graph product will create positions in the m-dimensional space that are already a congruent layout. Linear operations on a congruent layout result in a congruent layout again. Therefore, after the projection phase of HDE the result is a congruent layout, independently of the landmarks and eigenvectors used. However, we have observed that HDE often gives unsatisfactory results, due to a tendency to collapse the layout of fibers to lines even if they are tree-like or contain cycles. We also observed that factors with a big diameter (maximum shortest distance between any two vertices in a graph) dominate the drawing and factors with low diameter are then only visible at great magnification. Therefore we turned our attention to an algorithm which does not favor certain factors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Force-Directed Layout</head><p>Although it is trivial to construct the layout of a graph product from the layout of its factors, not all factor layouts give the same qualitative result for the product. The aim is therefore to find factor layouts that maximize the quality of the product. The layout is nice if the vertices are spread out uniformly across the drawing area. To avoid edge crossing, the edges should be kept short. As force-directed approaches achieve these goals for general graphs, we based our algorithm on one of them: the Fruchterman-Reingold algorithm <ref type="bibr" target="#b11">[12]</ref>. Although algorithms exist, that perform better in terms of quality and run-time, they are not that easily extended for our constraint to keep fibers congruent.</p><p>Like in the Fruchterman-Reingold algorithm we proceed iteratively, moving vertices according to acting forces in each iteration. However, to ensure that the layout of fibers stays congruent in each iteration, vertices cannot be moved independently of each other. We found that the product's layout being a sum of the factors' layouts is not only a sufficient but also a necessary condition. Therefore, we do not move vertices of the product, but vertices of the factors. However, forces are still computed for the products vertices to ensure that it looks nice.</p><p>At each iteration we execute the following steps: first the current product layout is computed from the layouts of its factors. Then, forces f (v 1 ,..., v k ) on the product's vertices are calculated like in the original Fruchterman-Reingold algorithm. The algorithm then computes forces for all factor's vertices by averaging the forces of their instances:</p><formula xml:id="formula_8">F(v l ) = |I v l | −1 ∑ v∈I v l f (v).</formula><p>Then the vertices of each factor are moved just like in the Fruchterman-Reingold algorithm, i.e, every vertex v l of each factor G l is shifted a bit in the direction of its corresponding force. We constrain each factor's layout to a certain area, which in turn constrains the layout of the product to an area, and therefore we can use the optimization of Fruchterman and Reingold to reduce the number of vertex pairs for which repelling forces have to be computed. We perform a traditional Fruchterman-Reingold on each factor to obtain a starting configuration and finish the algorithm after a userprovided fixed number of iterations. In contrast to a full Fruchterman-Reingold layout on the product, where the number of iterations scale roughly linear with the total number of vertices, the number of iterations needed for our method scales linearly with the number of vertices in the factors. As a rule-of-thumb, we use 10 times this total as the number of iterations. <ref type="figure" target="#fig_2">Fig. 4</ref> illustrates the algorithm for an example of a two factor Cartesian product.</p><p>The complexity of this algorithm is defined by the complexity of the underlying force directed method of Fruchterman and Reingold. For the graph product with n vertices and m edges we have to calculate O(m) attracting and an average of O(n) repelling forces in each iteration. The calculation of the product layout from the factor layout and the calculation of the factors' forces from the product's forces each take O(k • n) time, where k denotes the number of factors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Hierarchical Layout</head><p>Applying the force-directed algorithm of the former section for graph products that are composed of thousands of vertices, we suspected that the readability of the final layout was lost. In this case, the large number of edges produce many edge crossings because of the uniform vertex distribution in the product's layout. Now we present a hierarchical algorithm that, for a given sequence of factors, presents the graph in a hierarchical style, fibers being meta-nodes and edges between the fibers being bundled. As this bundeling, that uses convex hulls, is only efficient in R 2 , we only apply it in this case. The algorithm conceptually composes the layout step by step starting with all vertices positioned at origin and then shifting the vertices with each new factor that is considered. We assume that each factor has been laid out independently with traditional Fruchterman-Reingold algorithm.</p><p>Initially, each vertex v ∈ G is located at the origin of R d . The first layout of G is defined by the layout of the first factor G 1 in the following way: every vertex with the same coordinate v 1 according to G 1 will be shifted to the same position. For all other factors G i , each vertex v ∈ G is moved subject to its i-th coordinate by:</p><formula xml:id="formula_9">p(v) ← p(v) + α • p(v i )</formula><p>We choose α in a way that it removes overlaps of meta-nodes:</p><formula xml:id="formula_10">α = d max (G 1 ... G i−1 ) d min (G i )</formula><p>d min is the minimum Euclidean distance between two vertices in the layout of the factor graph G i and d max defines the maximum Euclidean distance between two vertices in the previously calculated layout</p><formula xml:id="formula_11">L i−1 for G 1 ... G i−1 .</formula><p>The multiplication with α ensures, that the edges of the factor graph G i will be long enough, that the components of L i−1 , that will be placed on every meta node of G i , do not overlap (a) The red factor produces a higher coverage ratio than the blue factor and thus precedes it in the initial order of factors for the hierarchical layout (b). Using convex hulls (c) the dominance of the red factor is emphasized.</p><p>each other. Only after processing the last factor, all vertices of G have distinct positions. At this point, we get a hierarchical drawing for G , where the highest hierarchical level corresponds to the last factor G k and its meta nodes are representations for the layout of</p><formula xml:id="formula_12">G 1 ... G k−1 .</formula><p>The order of factors have a huge impact on the final layout of the hierarchical graph product. Although this order can be specified by the user, we also determine a "best" order of factors by finding a configuration that uses a maximum of screen space and thus optimizes the overall resolution. To create the ordering, we compute a coverage ratio r i for each factor G i . Let d min denote the minimum distance between two vertices in the layout of factor G i , we replace each vertex of G i with a hyper-sphere, that has a diameter of d min . We contrast the sum of the hyper-spheres' volumes with an axis-parallel hypercube whose side length equals the maximum vertex distance in any of the d dimensions plus d min . The coverage ratio r i is determined as the ratio of the hyper-sphere volumes to hypercube volume. Finally, the factors G 1 ,..., G k are sorted from smaller to larger coverage ratios. The coverage ratio for two factors is illustrated in <ref type="figure" target="#fig_3">Fig. 5</ref>, which also shows the hierarchical layout.</p><p>Because the hierarchical method produces long edges, this usually leads to more edge crossings. Fortunately, the edges have very regular layout. As all edges that originate from the same factor edge are equivalent up to translation, their instances can be bundled and represented as one graphical shape. This shape is the convex hull of all instances of the vertices the origin edge connects. As many of these convex hulls repeat, especially in lower levels, rather than computing them each time anew, we only need to compute one for each layer of the hierarchy, and translate it for each node of that hierarchy level.</p><p>The complexity is one of the great advantages of this algorithm. Let n be the number of vertices in G . At first, the coverage ratios must be calculated for each factor. Therefore, getting the exact minimum distance between two vertices and the maximum distance between two hyper-sphere borders will both take O(n 2 i ), whereas n i is the amount of vertices in G i . Since n i n, the complexity of this phase is bounded by O(k • n).</p><p>For the second part, we have to update the graph product layout in every iteration. This takes O(n) time. Additionally, we must calculate the maximum Euclidean distance d max between two vertices in the temporary layout of G . The exact distance can be computed in O(n 2 ) by comparing each vertex pair. Since this scales badly for large values of n, we use the following upper bound instead: the maximum distance of all vertices to their barycenter. It produces useful spaces between the components of a layer, too, and de-stresses the final layout. The complexity for this step is linear and for the whole phase we get O(k • n), since we have to iterate over k factors.</p><p>Calculating the convex hulls for k − 1 hierarchy layers needs additional time. Except the highest layer, every convex hull occurs several times on each of the other k − 2 layers. We only have to compute one of these duplicate convex hulls, which is a representation for an edge of the factor, a layer corresponds to. For other fibers we shift the convex hull by the difference of the barycenters of the involved vertices. So, we need to find m c convex hulls, where m c is the total number of edges of the factors G 2 ,..., G k . On the highest layer, we find the largest complexity, since the point-set that is used for convex hull calculation has its maximum there. Let n k be the number of vertices in G k . Then, the point-set has a size of n c = 2 n n k . With this, we can conclude, that the computation of all convex hulls is bounded by O(m c • n c log n c ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">VISUALIZATION OF STRONG AND APPROXIMATE GRAPH PRODUCTS</head><p>Our force-directed algorithm (Section 4.3) extends naturally to strong and so-called approximate graph products, as long as the factors and the vertices' coordinates are known. It is quite simple to find the drawing for strong graph products. Fortunately, there is no need to change any part of the layout algorithms. In the algorithmic description we avoided any assumptions on the particular edge set, so the algorithm is directly applicable to any type of graph product. The forces alter slightly because of the additional cross edges of the strong graph product. The force-directed layout for the strong product of two factors can be seen in <ref type="figure" target="#fig_4">Fig. 6(a)</ref>. In comparison to the Cartesian product, the red factor's structure is narrower here and the cross edges, which are colored grey, cause additional edge crossings. We still obtain a similar layout for the strong product due to symmetry.</p><p>An approximate product is a "perturbed" product graph, where some edges or vertices are added or removed, see <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21]</ref>. Visualizing an approximate graph product needs additional work. On the one hand, there are vertices with their incident edges which are missing from the product, and on the other hand there are additional vertices which are connected to the graph product, but do not have any coordinates. To solve these problems, we calculate the layout for the corresponding graph product G which can be constructed from the given factors. Then, we map the resulting positions for the vertices of G to the existing vertices in the approximate productG using vertices' co-ordinates. If a vertex has no coordinates it is ignored for now. When the product part has been laid out, the vertices' positions are fixed and a regular Fruchterman-Reingold is run on the additional vertices. Finally, we receive a complete layout forG. <ref type="figure" target="#fig_4">Fig. 6(b)</ref> shows an approximate Cartesian graph product of two factor graphs. In comparison to the unperturbed version (4(c)), three vertices are missing and four vertices without coordinates were inserted. These vertices are easy to figure out, since they only have grey colored outgoing edges. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">TOPOLAYOUT INTEGRATION</head><p>The class of graph products can easily be integrated into the TopoLayout framework. In contrast to clusters, which are local features, factors span the graph or subgraph like a mesh, thereby pose an interesting complement. However, as the algorithm for drawing products requires each vertex's coordinates, the analysis phase of TopoLayout must be extended by an algorithm that recognizes and splits graph products into their factors. We use the algorithm by Imrich and Peterin <ref type="bibr" target="#b23">[24]</ref> to detect Cartesian products. It runs in linear time and requires linear space. For determining the strong product we use the algorithm provided by Hammack and Imrich <ref type="bibr" target="#b16">[17]</ref> that runs in linear time for graphs that have bounded degree. We now discuss where in the TopoLayout pipeline the detection of graph products is best situated. As every tree is prime, there is no need to check for products before trees. Graph products are biconnected, therefore it makes sense to check biconnected components. If a graph product is encountered by the original TopoLayout, it is usually detected as a HDE component, so checking after HDE would be too late. We therefore put it after biconnected component and before HDE. For each product that was detected, the factors are fed back to TopoLayout, so that they can be further split into trees and biconnected components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">RESULTS</head><p>To illustrate the benefits of using one of our presented algorithms to draw graph products, we compared the results to two widely used algorithms, namely HDE <ref type="bibr" target="#b18">[19]</ref>, which also generates congruent layouts, and Fast Multipole Multilevel Method (FM 3 ) <ref type="bibr" target="#b14">[15]</ref>. We compared the quality of the generated layouts and the running time of the considered algorithms. The system used in all experiments was a 3.07 GHz Intel Core i7-950 CPU with 12 GB RAM running Linux.</p><p>We have tested the algorithm on a multitude of self-generated graph products and graph products that we found in the University of Florida Sparse Matrix Collection <ref type="bibr" target="#b3">[4]</ref>. From these, we have selected three graph products to show the differences between the algorithms mentioned. The properties of these graphs are listed in <ref type="table" target="#tab_0">Table 1</ref>. G 1 is the graph G12 of the matrix group Gset of the University of Florida Collection. It is only one representative of numerous mesh-like graph products we found in this graph collection. Some other examples are qc324 and cdde1-cdde6 of the Bai matrix group, G11 and G13 of the GSet group and nos7 of the HB group.  <ref type="figure">Fig. 7</ref> shows different 2-dimensional layouts for the three graph products. Note that neither HDE nor FM 3 recognize graph products and are therefore unable to color edges based on the origin factor. Despite this, we choose to use these colors for their layouts and thereby improve their readability, because we think that our algorithms still perfom better with respect to quality. The obtained running times for calculating the different drawings are provided in <ref type="table" target="#tab_0">Table 1</ref>. First of all, we recognize that the hierarchical algorithm is the fastest method, which is due to the near-linear running time. HDE and FM 3 also generate their layouts in a relatively short time. Although we use the grid variant of the Fruchterman-Reingold algorithm, the force directed approach has a very high computation time compared to the other algorithms. This is due to the numerous iterations and a high computational effort in calculating repelling forces.</p><p>However, the graphical output points out the advantages of using the force directed approach to visualize graph products. Particulary for smaller graphs we get highly symmetrical layouts with very clearly displayed adjacencies of vertices. The reason is that different fibers of each factor stay congruent to each other in every iteration. Furthermore, the underlying force model leads to a good distribution of the vertices. So every fiber of each factor is pointed out clearly. Thus, it is easy to locate vertices with a specific coordinate vector. In terms of graphical output, HDE and FM 3 unveil their weaknesses in visualizing graph products. The distance-based calculation of HDE leads to good representations of fibers of factors with large diameters at the expense of factors with small diameters. The resulting piles of vertices can be seen in most HDE-layouts. Another problem is the selection of landmarks in HDE. We often observed collapse of factors' fibers to a line, depending on the (random) selection of the first landmark. Finally, we conclude that HDE may provide the important congruent layouts fast, but its graphical quality is worse than in the force directed approach. FM <ref type="bibr" target="#b2">3</ref> shows better vertex distributions as HDE, which is due to its force directed model. Nevertheless, the multi-level strategy leads to a globally stable graph structure, but locally we receive deformations of fibers in many parts of the graph product layout. This creates many additional edge crossings, and, thus, deteriorates the readability of the layouts significantly. However, the readability of the layouts is lost in products with more than a thousand vertices and a high amount of edge crossings and overlaps, regardless of using HDE, FM <ref type="bibr" target="#b2">3</ref> , and our own force directed algorithm. Then, the hierarchical approach is particularly well suited for visualizing. It also guarantees the congruency of the different fibers and it always creates aesthetic layouts because of the hierarchical structure. Even for products of several factors with more than 100,000 vertices we obtain attractive layouts in a few seconds.</p><p>The main advantage of the hierarchical layout for drawing product graphs is the ability to see and to understand how the factors look like. As one can see in <ref type="figure">Fig. 7(h)</ref>, resp. in <ref type="figure">Fig. 7(l)</ref>, it is much easier to understand what the factors are, than in <ref type="figure">Fig. 7(g</ref>), resp. in <ref type="figure">Fig. 7(k)</ref>, where the same graphs are represented. Moreover, as shown in <ref type="figure">Fig.  1 and 8</ref> it is possible to zoom into the product graph. In this way we can visualize the local structure, i.e., the contained subproducts of the given product graph. In particular, this method is an advantage if one wants to visualize product graphs with many factors. Zooming into those graphs makes clear how the different factors look like and helps to understand the product structure on the several local levels that exist. We furthermore wanted to evaluate, whether the class of graph products is occuring often in real-world data. In the University of Florida Sparse Matrix Collection <ref type="bibr" target="#b3">[4]</ref> which comprises 2101 graphs, we classified 55 graphs as a graph product or to contain a graph product according to TopoLayout. We classified graphs or graph components as graph products only if their size exceeded 20 vertices, in order to avoid counting the numerous K 2 K 2 and K 4 that were found. The products we found consisted of two or three factors and factors were usually simple paths. The sizes ranged from 900 to 3200 vertices and 1250 to 7840 edges. For TopoLayout, the HB/watt1 was particularly interesting as it detected a 27x8x8 lattice augmented by many small trees. These numbers do not indicate that graph products occur frequently in nature, however, they do indicate that graph products are of interest in other research contexts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSION AND FUTURE WORK</head><p>We have presented two algorithms for drawing product graphs. Both are fast and produce nice looking pictures. In the force-directed method each factor has the same influence on the layout, but it is only useble if the number of factors is small. By keeping edges short, it avoids edge crossings. For many factors, the edge crossings become unavoidable and it is beneficial to make some edges long and bundle them. This approach is present in the hierarchical layout of product graphs which also captures on the notion of the factors defining a hierarchy inside the product and allows an explorative analysis of large graph products. The methods however are still limited to rather few factors (usually less then 10) because the product grows enormously in size with each additional factor.</p><p>Both methods were integrated into the TopoLayout framework and can be applied to the six known graph products as well as perturbations of them, as long as all factors and the coordinates of each vertex are known.</p><p>In future work, we want to extend the recognition of graph products inside TopoLayout to more types of products and at one time also to perturbed graph products. Existing approaches only detect factors, but not vertices' coordinates.</p><p>Graph products have a general disadvantage: the product operation lets the number of edges grow faster than the number of vertices. Considering that this has a very bad influence on the number of crossings, it seems more natural to show the factors instead of the product. In our current visualization tool we always show both. Once products have been established in the visualization community, it may be possible to never show the product but only the factors and symbol indicating the used product operation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Two factors and their Cartesian and strong product.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Phenotype space graph of two characters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Force-directed graph product layout example.(a) after the initialization for the layout of G : Many vertices are drawn close together and some edges overlap. (b) intermediate result: the graph unfolds. (c) final layout showing good vertex distribution and no overlapping edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>coverage ratios of the factors of G (b) hierarchical layout of G (c) hierarchical layout of G with convex hulls Example hierarchical graph product layout.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>(a) Strong Graph Product (b) Approximate Cartesian Graph Product Layouts for a strong and an approximate graph product with 2 factors.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .Fig. 8 .</head><label>78</label><figDesc>Layouts for Cartesian graph products G 1 with 2 factors and |V | = 800, G 2 with 3 factors and |V | = 180, and G 3 with 5 factors and |V | = 1440 (a),(e),(i) HDE; (b),(f),(j) FM 3 ; (c),(g),(k) Force Directed; (d) Hierarchical,(h),(l) Hierarchical with convex hulls Zoom into different layers for the hierarchical layout of 7(l) (a) top-layer 1, (b) layer 2 of the bottom-right component of layer 1, (c) layer 3 of the top-left component of layer 2, (d) layer 4 of the bottom-left of layer 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Characteristics of the graph products fromFig. 7</figDesc><table><row><cell>graph</cell><cell>G 1</cell><cell>G 2</cell><cell>G 3</cell></row><row><cell>product size</cell><cell cols="2">800/1600 180/510</cell><cell>1440/7680</cell></row><row><cell>vertices/edges</cell><cell></cell><cell></cell><cell></cell></row><row><cell>factors</cell><cell>2</cell><cell>3</cell><cell>5</cell></row><row><cell>factor sizes</cell><cell>16/16</cell><cell>3/3, 6/5,</cell><cell>3/3, 4/4,</cell></row><row><cell>vertices/edges</cell><cell>50/50</cell><cell>10/10</cell><cell>5/5, 4/6, 6/5</cell></row><row><cell>HDE</cell><cell>0.24s</cell><cell>0.06s</cell><cell>0.72s</cell></row><row><cell>FM 3</cell><cell>0.49s</cell><cell>0.1s</cell><cell>1.12s</cell></row><row><cell>force-directed</cell><cell>3.17s</cell><cell>0.37s</cell><cell>14.07s</cell></row><row><cell>hierarchical</cell><cell>0.06s</cell><cell>0.01s</cell><cell>0.14s</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">J NICKE ET AL: VISUALIZATION OF GRAPH PRODUCTS</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors would like to thank Waldemar Beser for extending their TopoLayout implementation for the recognition of strong products.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A group-theoretic model for symmetric interconnection networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">B</forename><surname>Akers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Krishnamurthy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="555" to="566" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Topolayout: Multilevel graph layout by topological features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Auber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="305" to="317" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Graph Drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Battista</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Tollis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The University of Florida sparse matrix collection. Submitted to</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Mathematical Software</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Algorithms for drawing graphs: An annotated bibliography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Di Battista</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">G</forename><surname>Tollis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry: Theory and Applications</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="235" to="282" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Diestel</surname></persName>
		</author>
		<title level="m">Graph Theory (Graduate Texts in Mathematics)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Scalable, versatile and simple constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="991" to="998" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A heuristic for graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Congressus Numerantium</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="149" to="160" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A fast adaptive layout algorithm for undirected graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Frick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ludwig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Mehldau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>R. Tamassia and I. G. Tollis</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1994" />
			<biblScope unit="volume">894</biblScope>
			<biblScope unit="page" from="388" to="403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Multi-level graph layout on the GPU</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Frishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1310" to="1319" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Online dynamic graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Frishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="727" to="740" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Graph drawing by forcedirected placement. Software -Practice and Experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M J</forename><surname>Fruchterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Reingold</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1129" to="1164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Grip: Graph drawing with intelligent placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gajer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graph Algorithms Appl</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="203" to="224" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Graph drawing by stress majorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="239" to="250" />
		</imprint>
	</monogr>
	<note>In Pach [30</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Drawing large graphs with a potential-fieldbased multilevel algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hachul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jünger</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="285" to="295" />
		</imprint>
	</monogr>
	<note>Pach [30</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">An experimental comparison of fast algorithms for drawing general large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hachul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jünger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>P. Healy and N. S. Nikolov</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3843</biblScope>
			<biblScope unit="page" from="235" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On Cartesian skeletons of graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hammack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Imrich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ars Mathematica Contemporanea</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="191" to="205" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A fast multi-scale method for drawing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graph Algorithms Appl</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="179" to="202" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Graph drawing by high-dimensional embedding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graph Algorithms Appl</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="195" to="214" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Approximate graph products</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hellmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Imrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Klöckl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Combinatorics</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1119" to="1133" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Local algorithms for the prime factorization of strong product graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hellmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Imrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Klöckl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics in Computer Science</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="653" to="682" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Graph visualization and navigation in information visualization: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Herman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Melançon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Marshall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">06</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="24" to="43" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Product Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Imrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Klavzar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Wiley-Interscience</publisher>
			<pubPlace>New-York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Recognizing Cartesian products in linear time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Imrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Peterin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Math</title>
		<imprint>
			<biblScope unit="volume">307</biblScope>
			<biblScope unit="page" from="472" to="482" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">An algorithm for drawing general undirected graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kawai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Process. Lett</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="7" to="15" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Drawing graphs: methods and models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaufmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>London, UK</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Graph products for configuration processing of space structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaveh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Koohestani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Struct</title>
		<imprint>
			<biblScope unit="volume">86</biblScope>
			<biblScope unit="page" from="1219" to="1231" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Minimal cycle basis of graph products for the force method of frame analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaveh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mirzaie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications in Numerical Methods in Engineering</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="653" to="669" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">An efficient method for decomposition of regular structures using graph products</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaveh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rahami</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Intern. J. for Numer. Methods in Engineering</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1797" to="1808" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing, 12th International Symposium</title>
		<editor>J. Pach</editor>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004-09-29" />
			<biblScope unit="volume">3383</biblScope>
		</imprint>
	</monogr>
	<note>Revised Selected Papers</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Which aesthetic has the greatest effect on human understanding?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Purchase</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>G. D. Battista</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1997" />
			<biblScope unit="volume">1353</biblScope>
			<biblScope unit="page" from="248" to="261" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Hypercup -hypercubes, ontologies and efficient search on p2p networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sintek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Decker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Nejdl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="112" to="124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">The topology of evolutionary biology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">M R</forename><surname>Stadler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modeling in Molecular Biology</title>
		<editor>In Ciobanu</editor>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="267" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Quasi-independence, homology and the unity of type: A topological theory of characters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">P</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">220</biblScope>
			<biblScope unit="page" from="505" to="527" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A multilevel algorithm for force-directed graph-drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Walshaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graph Algorithms Appl</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="253" to="285" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
