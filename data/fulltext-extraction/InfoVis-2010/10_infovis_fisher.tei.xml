<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualizations Everywhere: A Multiplatform Infrastructure for Linked Visualizations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danyel</forename><surname>Fisher</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roland</forename><surname>Fernandez</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Ruble</surname></persName>
						</author>
						<title level="a" type="main">Visualizations Everywhere: A Multiplatform Infrastructure for Linked Visualizations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:59+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Visualization systems</term>
					<term>toolkit design</term>
					<term>data transformation and representation</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In order to use new visualizations, most toolkits require application developers to rebuild their applications and distribute new versions to users. The WebCharts Framework take a different approach by hosting Javascript from within an application and providing a standard data and events interchange.. In this way, applications can be extended dynamically, with a wide variety of visualizations. We discuss the benefits of this architectural approach, contrast it to existing techniques, and give a variety of examples and extensions of the basic system.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>New visualization techniques are constantly being invented: for example, the InfoVis 2009 conference featured over twenty novel visualizations that addressed established problems and introduced new domain-specific opportunities. We can divide the potential users of these visualizations into three (often overlapping) audiences: endusers who want to apply the visualizations to their own data; visualization writers who wish to create new visualizations, and application developers that want to enable others to use the new visualizations with their applications. End-users often have no choice but to become adept at moving data between applications or wait for updates to their favourite applications that may or may not include the new capabilities. Visualization developers often need to create the visualization from scratch or they may build upon visualization toolkits (such as Prefuse <ref type="bibr" target="#b11">[12]</ref> or the Information Visualization Toolkit <ref type="bibr" target="#b8">[9]</ref>). In order to use the toolkit, they are forced to use the language and data structures that the toolkit requires and their visualization, in turn, will only be useful to people who are using those toolkits. Finally, application developers, hoping to incorporate one of the visualizations themselves, either must adopt the toolkits or translate the visualization code into their own data structures and rendering systems.</p><p>We have chosen a different route, which is to add visualizations to applications dynamically, without requiring recompilation of the existing application. The WebCharts framework enables this functionality by allowing applications to host arbitrary visualizations. Any application that uses this infrastructure can add any compatible visualization, dynamically and at runtime. The application developer does not need to know the types of visualizations that might be applied to their application; the visualization designer does not need to know what applications might serve as host.</p><p>As a result, application developers now have a much easier task: they must build infrastructure only once, in the language of their choice, and add a mechanism to select particular visualizations. Visualization developers write their visualization, using their favorite visualization framework or toolkit, and add support for the WebCharts interface, and post them on the internet. Other developers can even write a thin WebChart adapter to translate existing visualizations into our interface. Finally, end-users can use the WebCharts-enabled application of their choice without waiting for an update that incorporates the latest visualizations.</p><p>WebCharts takes advantage of the growing popularity of Javascript as a language to communicate between components; and of the ability to embed web browsers within client applications, to support visualizations in rich client applications. The host application provides a generic drawing surface, and translates both tabular data and commands from the host application into a standard Javascript format. The charting client, written in a web-based language such as Silverlight, Flash, or Javascript, responds to these commands, and renders the visualization. By storing the web-based code locally, visualizations can be generated offline, without web access.</p><p>This paper discusses the WebCharts framework. It looks at the problem of extensibility and different ways that it has been approached. It then discusses the system design of WebCharts. Last, it provides several use cases in different environments, and hosting a broad variety of visualizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">EXTENSIBILITY FOR VISUALIZATIONS</head><p>WebCharts allows users to assemble visualization components within an application, using their data from that application. Tools that support a set of different visualizations are common: tools like Tableau <ref type="bibr" target="#b21">[21]</ref> and Spotfire <ref type="bibr" target="#b20">[20]</ref> and Dashiki <ref type="bibr" target="#b17">[17]</ref> allow users to assemble dashboards using a fixed suite of visualizations. These applications provide mechanisms for importing data, choosing visualization from a fixed set, aggregating values, and assigning data columns to aspects of the visualization. These tools do not, however, accommodate extensibility. There have been a variety of research and commercial projects meant to accommodate the developing needs of data visualization. In this section, we first outline a variety of approaches to visualization extensibility, and then compare our approach to other web-based architectures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.1</head><p>Extensible Toolkits A number of visualization toolkits have been developed to help developers more rapidly create visualizations. Most toolkits support building visualizations that are compiled into applications. For example, Pad++ <ref type="bibr" target="#b2">[3]</ref> and later Piccolo &amp; Jazz <ref type="bibr" target="#b3">[4]</ref>[5] provide libraries for common tasks such as zooming and object models. The Infovis Toolkit (IVTK) <ref type="bibr" target="#b8">[9]</ref>, Borner's XML Infovis Toolkit <ref type="bibr" target="#b0">[1]</ref>, and Prefuse <ref type="bibr" target="#b11">[12]</ref> are Java toolkits that provide base classes and package several common visualizations. All of these systems offer additional libraries that help the application collect or manage data, communicate with external sources, or take care of common tasks. Flare <ref type="bibr" target="#b9">[10]</ref>, written in Actionscript, provides similar functionality. In contrast to these systems, the WebCharts framework encourages developers to create visualizations in whatever system they are most comfortable, with the caveat that it must be embeddable within a web browser.</p><p>Other visualization systems, such as Processing <ref type="bibr" target="#b19">[19]</ref> and Protovis <ref type="bibr" target="#b5">[6]</ref>, are primarily languages for expressing visualizations, without a containing application. Protovis is written in Javascript, and so is optimized for deployment on the internet. Protovis, given its focus on web technology, is particularly well suited to being incorporated into the WebCharts framework.</p><p>Several of these systems provide functionality over the visualizations that are worth considering. IVTK provides a shared "magic lens" system, for example, which applies across any visualization. Weaver <ref type="bibr" target="#b23">[23]</ref> provides a shared selection and interaction layer. WebCharts supports brushing and linking between disparate visualizations in a similar fashion.</p><p>In each of these systems (with the exception of Protovis), a developer adds relevant libraries to their application as part of the development process, and then compiles their visualization. In Protovis, visualizations are controlled by the website developer who has embedded the visualization. Our focus is extending application dynamically, at run-time, so that end-users can choose what visualizations they will need.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Visualization on the Web</head><p>WebCharts leverage deployment across the web, and uses internet protocols as a communication mechanism. Increasingly, the internet is being used as a delivery mechanism for visualizations. There are several common architectures for constructing visualizations on the web. Visualizations can be generated as image files that can be embedded in a webpage (e.g. <ref type="bibr" target="#b7">[8]</ref>). Alternatively, client-side JavaScript code, Flash objects, and Java objects have been used to actually compute the visualization on the user's computer. For example, Many Eyes <ref type="bibr" target="#b22">[22]</ref> uses this mechanism: the Java applet that runs in the user's browser connects to the website, downloads the data, and renders the visualization. WebChart visualization can use either strategy (server or client rendering), but visualizations that support offline visualizations must support client rendering.</p><p>Several tools allow site designers to build visualizations easily. VisGets <ref type="bibr" target="#b6">[7]</ref> and Exhibit <ref type="bibr" target="#b12">[13]</ref> provide infrastructure that allow a web developer to assemble a coordinated series of visualizations that can be embedded in a web page. The web developer can choose from a variety of provided visualizations; the end-user can switch between views, select and filter data, and explore the resultant data.</p><p>Perhaps the closest analogue to WebCharts is the Google Visualizations <ref type="bibr" target="#b10">[11]</ref>. Google Visualizations are componentized visualizations packaged in Javascript. All Google Visualizations share a small set of Javascript commands, including an ability to set data and a callback to monitor selection. A web developer can incorporate several Google Visualizations into a webpage by placing their data into a single table, and applying the table to the visualizations. In addition, Google Spreadsheet allows users to add arbitrary Google Visualizations to their spreadsheets. Google Visualization is a client-only solution: it does not have an ability to accommodate visualizations in desktop applications, nor can it work when a user does not have an internet connection. The WebCharts framework includes an application-side component, which accommodates aggregation, small multiples, and remapping data between columns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">SYSTEM DESCRIPTION OF WEBCHARTS</head><p>WebCharts enables visualizations to be dynamically added to applications. In order to do so, both the visualization and the application must support the WebCharts interface. <ref type="figure" target="#fig_1">Figure 2</ref> shows a system schematic of WebCharts. The top half describes the design of the visualization; the bottom half describes the design of the client application, which we refer to as the 'Host.'</p><p>In general, our scheme is to have the application embed a web browser control. Many web browsers at this point come in embeddable form; applications with embedded web browsers can typically send Javascript commands to the browser. The browser control is used to contain the visualization, which is implemented in HTML, or any language that can be embedded in a web browser, such as Silverlight, Javascript, Java, or Flash. The host application sends data and commands to the chart; the chart sends back events.</p><p>We have provided two libraries to help developers add WebCharts support to the applications and visualizations. The HostLib library is used on the host application, and provides communication with the visualizations. The ChartLib handles communications for a visualization, and also includes an optional lightweight visualization framework. Our current implementations are written in C# (for hosts) and in Silverlight or Javascript (for visualizations); however, there is nothing in our design that would preclude interoperability with applications and visualizations written in any other language or framework.</p><p>We have implemented an extension to Microsoft Excel 2007 using the standard add-in mechanisms and we will use that to illustrate many examples. We will illustrate other host applications of the system in later sections.</p><p>In the following sections, we discuss the design of visualizations and the design of the host. Next, we discuss the interaction mechanisms that allow the visualization to send back events to the host. We discuss aggregation and column selection, which allows visualizations to show appropriate subsets of data. We discuss styling and theming, which allows visualizations to share a common visual appearance. Last, we discuss persistence and security, which allows host applications to store and save visualizations, and address data privacy issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.1</head><p>Defining a visualization In our framework, a visualization can be thought of as a web page which receives data from a host application. Visualizations maintain a very simple interface ( <ref type="figure">Figure 3</ref>): they must accept data. In addition, they may be able to communicate a selection, take color and theme updates, and share custom parameters. Visualizations communicate entirely through a Javascript bridge; the Javascript calls these commands on the chart.</p><p>The communication mechanism is managed by HostLib, a library which runs on the host side, and ChartLib, which is available on the chart side. The host application communicates with the visualization through Hostlib; the visualization, in turn, receives all its messages through ChartLib commands. HostLib and ChartLib are responsible for serializing and deserializing data (respectively), and for packaging other commands.</p><p>From a hosting perspective, an application developer includes a reference to HostLib, and adds a ChartHost control to their application. Hostlib manages the web browser component, the network connection, and the Javascript communication. The Host can make the calls in <ref type="figure">Figure 3</ref>, and can register for callbacks. Similarly, from a chart's perspective, a visualization developer includes Chartlib, which is implemented in both Silverlight and Javascript. They can register for events from the ChartLib, which will handle incoming messages to the visualization. The Silverlight version of ChartLib is useful for building custom visualizations, while the Javascript version is useful for wrapping prewritten visualizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Basic ChartLib Commands</head><p>SetChartData is the basic call of WebCharts, and must be implemented by every visualization. This command takes a dataset (in XML), consisting of one or more tables as a parameter. A data table consists of a series of named and typed columns and a number of rows. Most data structures can be represented in tabular form readily (see section 3.2.1); the HostLib and ChartLib libraries provide support for translating a dataset to and from XML. In addition to this command, every Chart and Host can choose to support additional commands which provide a richer experience.</p><p>SetChartSelection and SetHostSelection are sent from the host to the visualization and back (respectively) to communicate the rows and columns that are logically selected by the host, or other visualizations This forms the basis for brushing and linking support as well as the ability for visualizations to filter data based on the selection (see Section 3.3).</p><p>SetHostData allows the visualization to request that the host change the data based on actions in the visualization. (see section</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.1.4)</head><p>SetPartFormat allows the host to send styles and themes to the visualization. These are described in section 3.4</p><p>SetCustomParams allows the visualizations to accept custom parameters. Host applications that support customizable user interfaces can send parameters to the visualization. Conversely, when parameters are changed from the visualization (such as when a map is moved or an axis is altered), the new values are sent back through this command. These custom parameters are also persisted with the visualizations by the host (see section 3.5)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Declaring Custom Parameters</head><p>Each visualization may have its own custom parameters; and each visualization has its own capabilities. If a visualization requires, for example, a field of type 'ordinal', than mapping it to a string value may not be useful. Visualizations may declare their interfaces by providing an optional manifest file, called WebCharts.</p><p>xml. This file specifies the capabilities of the visualization, and which columns of data it can accept. In addition, it can describe any custom parameters that it supports and can announce any other relevant metadata. By providing a separate capabilities file, users can search for certain capabilities amongst a large number of charts stored on a web site without needing to invoke and examine each of them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Updating and Modifying Data</head><p>One advantage of embedding visualizations into a host application is that there can be a tight integration between the user editing and updating their data and the visualization. If the visualization is embedded in a spreadsheet, the user need not switch context from the visualization application to a spreadsheet to correct data errors, then switch back to update the visualization. Instead, the user can interactively modify or correct data, and see it instantly updated in the visualization or manipulate the data in the visualization and have it update the data in the host. One way of accomplishing this is for the host application to detect changes to the data and automatically send the data to the visualization. Data updating can work in both directions: visualizations can choose to call SetHostData to update data on the host, perhaps as a result of the user manipulating shapes within the visualization. In this case, the host application must provide a protection mechanism to help prevent accidental data changes by the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2</head><p>Aggregating Data and Choosing Columns Two different approaches to datasets seem to be common among visualization packages. First, the package can visualize input data without transformation, as is done with Microsoft's Excel. In Excel, two columns of data are understood as x and y axes. In other packages, such as Tableau (and Excel's PivotTables), visualizations implicitly contain aggregation: a user chooses a dimension and measure; the application adds, averages, or counts the measure in order to visualize the values. Since the goal of WebCharts is to conveniently allow the embedding of a variety of visualizations, we wanted to make aggregation capabilities available without requiring support from, the visualization. Of course, some visualization, such as histograms, prefer to do their own aggregations; this is an optional aspect of the system.</p><p>Aggregation is supported on the host, within HostLib. HostLib can transform a data table, given a few parameters. These parameters are similar to those that drive VizQL <ref type="bibr" target="#b21">[21]</ref>: columns of the data table can be used as aggregation values, filters, and sort orders. The aggregated values then can be sent to the visualization; columns of the aggregation can be split off to enable small multiples. The host maintains mapping objects, which maintain a mapping from unaggregated rows to their aggregated results. These allow the host to subsequently map selection rows from the visualization to the host domain, or from the host to the visualization domain (between the pre/post query data rows).</p><p>The aggregation is performed by the host rather than the visualization for two reasons. First, this allows aggregation to be implemented for any visualization, including those that are unable to scale to large datasets. Second, the host level can also provide significant optimization, since the individual visualizations do not need to be sent or store the entire datatable, but only the data that is actually visualized. A huge dataset can be reduced to only few datapoints in some of the aggregations. Alternatively, there are already visualizations that aggregate or optimize the renderings of data based on the view (for instance, a scatterplot with dense areas can choose not to render every data instance). This is still supported by sending all the data to the visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Non-Rectangular and Multi-Table Data</head><p>The SetChartData command sends data via a data table, which represents columnar data easily. Other common data structures can be readily normalized into tabular form. The Host is responsible for normalizing its native datastructures into a tables that the visualization can use. For instance, hierarchical data can be represented as name, parent, metadata as seen in <ref type="table" target="#tab_0">Table 1</ref>. Network models can be represented with two tables, one each for nodes, the other for edges. <ref type="table" target="#tab_1">Table 2</ref> illustrates a sample graph format.  <ref type="bibr" target="#b1">[2]</ref> proposed early brushing behavior in scatterplots, and the systems proposed by both North and Weaver <ref type="bibr" target="#b18">[18]</ref>[23] both support coordinated views. North provides a taxonomy of types of actions that can be propagated across brushing and linking, including selecting subsets of data, providing detail on a particular item, and restricting and filtering data. WebCharts implicitly supports all of these by providing a universal selection mechanism.</p><p>In the WebCharts framework, a selection is created by the user in either the host application or in a visualization. If the user has made a selection within a visualization, that selection is sent back to the host as the set of data rows which correspond to the selection. Hostlib provides infrastructure for translating the selection back to the original dataset. (In the case of aggregation, for instance, this means computing which rows of original data correspond to the aggregated values). With the selection now in the domain of the original data, the host can now both reflect the selection in its own user interface, if appropriate, and then send the selection to other visualizations that refer to the data.</p><p>Each visualization can respond to the selection as is most appropriate. In many visualizations, for example, selection commands correspond to highlighting particular shape objects within the display. However, we have also implemented a 'details on demand' visualization that merely prints all values from selected columns, and resolves image URLs as pictures <ref type="figure">(Figure 4</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.4</head><p>Styling and Theming A host can choose to support styling and theming for its hosted visualizations. A style is a collection of typefaces, text sizes, and colors. Styles specify the color and typeface for standard parts of a chart, such as the background color, the color of foreground objects, and the typeface for captions. A theme is a collection of styles that, together, describe the way that a chart is rendered. Using styles and themes, a host can ensure that all charts use the same color palette and similar typefaces. Implementation of styles for a visualization is optional; a chart implementation can choose to act on or ignore any portion of these commands. A theme typically includes color selections for both selected and unselected items, for multiple series of data.</p><p>Styles and themes are also used to enable small multiples and other grouped visualizations. In a small multiple, it is desirable to hide axis captions and legends that are shared between the several charts. The style information includes a "hidden" label, which allows the host to request that the visualization hide its unneeded axis labels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.5</head><p>Persistence: Save-Load and Copy-Paste It is useful for applications often provide persistence for operations such as saving and loading. When the embedding application is saved, the visualization should be saved with it; users should be able to copy and paste visualizations into other applications. Hostlib provides a mechanism for persisting (and reloading) a visualization. It includes the original URL, a reference to the source data, and any parameter settings that the user has set, and its current style settings. Optionally, the persisted version can include an offline executable version of the visualization code (the HTML page and related resources). Last, the persistent form of the visualization can include a bitmap snapshot of the visualization, to be used as a fallback when executing the visualization is not possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.6</head><p>Offline Use, Privacy, and Security Two great concerns that are associated with web based visualizations is the ability to use them when not connected to the internet and privacy/security issues. Visualizations that do not require the internet can be used offline, while some cannot. Offline use is possible for those visualizations that support disconnected operation from the internet. This means that once acquired via the net, the visualization will continue to function if all the code is available and the visualization does not require external data.</p><p>We have investigated three types of visualizations:</p><p>• Visualizations that, once downloaded, can continue to function without an active connection. • Visualizations that can run locally, but require external data. This is the case for the world map pictured above. When the user pans or zooms, other tiles are downloaded from the tileserver. In addition, this visualization uses an external service for turning city names into longitude and latitude coordinates. While data such as city names is sent to the network, most of the data stays resident on the local system. These visualizations continue to work as long as no new external information is needed and the data is not sent out on the internet. The third case of visualizations cannot be moved offline:</p><p>• Visualizations that run externally. These are cases where the visualization is created on a separate server, and either a bitmap, or laid out graphical objects are sent to the client. These visualizations can only be run when connected. Related to the online issue is privacy. Systems such as ManyEyes and Tableau Public require all data to be shared their data with the world. This can be inconvenient for sensitive information.</p><p>Visualizations of the first type do not share their data at all with the external world. Visualizations of the second type share some information, but the actual visualization is still computed and rendered locally. Visualizations of the third type require sharing their visualization with the external service. We are now investigating effective UI indicators to help users understand which sort of visualization they are using, and what behavior they can expect both offline and with regards to their privacy.</p><p>Any system that loads programs from the web represents potential security concerns, both with the data that is being shared with it and to other data resident on local client. Since the visualization is embedded in a browser, the same security conditions that is used for general internet browsing are in place -that is the code runs in a sandbox and does not have access to data except that which is explicitly passed to it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.7</head><p>Performance The WebCharts scheme requires using a hosted web browser, and communicating with it via Javascript calls. This means that all data must be flattened into a string form for Javascript, and then expanded outward back to a datatable in the visualization. As a result, WebCharts imposes some overhead above and beyond the needs of the visualization.</p><p>Performance issues can be broken down into 4 stages.</p><p>• Capture: is the time to capture data from the host application (in the case of the tests shown here, Excel) • Shape: is time spent selecting columns and organizing the data into tabular form in order to prepare it for the chart • Marshal: is the time spent converting the data to a string, sending to the visualization, and converting back to data • Build: is the time spent by the visualization creating and laying out shapes. In order to evaluate the impact of these phases, we evaluated the application against a moderate workload of 4200 rows. We computed the timing for generating a chart of all 4200 rows; the timing for generating an aggregated chart of just 4 rows, and of generating a trivial chart of one row. The following data is from a desktop PC, core i7 with 6GB of memory working on a typical sales spreadsheet with 4200 rows and 20 columns of data in msecs.</p><p>We note that capture appears to be proportionate to the number of rows processed, that shape currently dominates the run, and that marshal and build are proportionate to the number of rows transmitted. This suggests that larger aggregations can continue to scale, and that visualization designers can gain by optimizing their own code. 3.8 Versioning Because WebCharts are deployed to and loaded from web URLs, any time a visualization is created or opened (or refreshed), by default, the latest version of the visualization will be downloaded and used. The benefits of this behavior include always running the latest (and presumably best) version of the visualization. The downsides include users having to deal with broken features and unexpected new behaviours, often at very inconvenient times.</p><p>We believe most users would like host applications to default to an automatic "version capture" mode, where the first time they download the visualization to their application, it captures that version (when possible) and keeps providing it to the user (via a web service, and local caching), until the user requests to move to another version. This can be supplemented by unobtrusive notifications of newer versions of visualizations becoming available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CASE STUDIES</head><p>In this section, we discuss several instances of how these elements have been brought together to add visualizations to different applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1</head><p>Wrapping existing visualizations While we have implemented some new visualizations for use directly within the WebCharts framework (including TagClouds, and a special purpose Map Control), it is the ease with incorporating existing visualizations that sets WebCharts apart. We have written small wrappers that translate between the WebChart API and the Google Visualization API. In addition, we have written an adaptor for the Silverlight Toolkit, which enables TreeMaps, animated charts, and scatter-plots. Since Java applets, including those written in Processing can be embedded within a web page, we can potentially write adaptors for those as well, but we have not done so as yet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1.1</head><p>Exhibit in Excel Exhibit <ref type="bibr" target="#b12">[13]</ref> is a multi-dimensional faceted browser implemented in pure Javascript. It creates curated visualizations based on web-based datasets. An author can easily select structured data, choose columns, and add visualizations. A user can switch between the visualizations, and can choose filters on the dataset. Exhibit requires datasets that are placed on the web.</p><p>We embedded Exhibit in Excel using WebCharts. Thus, Exhibit used Excel-based data, but maintained the curated set of visualizations. We wrote a very small wrapper which translated the SetData call's XML format into JSON. We then mapped by hand the column names with the exhibit attributes. The entire procedure took only about 15 minutes. Creating an explicit roles file within exhibit, where we can match columns from the data with roles in the exhibit would be a useful extension. We are also exploring the use of Dido <ref type="bibr" target="#b14">[15]</ref> which allows modification of the data within the web page which could then reflect those changes back to the underlying data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2</head><p>Alternate hosts 1: WebCharts in IronPython IronPython is a scripting language that follows Python syntax, but is based on Microsoft's Common Language Runtime.CLR. We implemented an IronPython extension to WebCharts using IronPython as the host. This allows IronPython users to add visualizations inline within their code.</p><p>The interface for users is quite simple: they can invoke a visualization by creating a new Visualization object with a URL, and then can make calls against it v=new Visualization( "http://server/vis.html" ) v.setData( dataTable )</p><p>The setData call (implemented within IronPython) uses Hostlib to translate the data in the table into the Javascript format that WebCharts requires. This allows visualizations to be called from a read-eval-print loop enabling support for interactive exploration of data from a command line environment, similar to the Matlab and R.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Alternate hosts 2: Charts as Visual Debuggers</head><p>The Visual Studio IDE allows general extensions to be added anywhere within the user interface, including the debugger. By embedding the web-charts framework within a Visual Studio extension, we have enabled simple visualizations of data structures at debug time. See figure 7. While the demonstration at present is primarily a proof of concept, enabling visualization of memory allocation, processor utilization, values of variables over time could all aid in the debugging process enormously.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSIONS</head><p>We have created a simple strategy and architecture by which visualizations can be plugged in to a variety of host applications. This empowers end-users, application designers, and visualization designers by allowing greater reuse of existing code. End-users do not have to wait for new revisions of existing applications to use the latest techniques; designers of domain specific visualizations can work on just the visualization and have them incorporated into a variety of different host applications. The strategy helps bridge the benefits of both the client-centric and web-centric worlds. Users can do local processing and visualizations on their own machine, yet obtain new visualizations from the web world where they can be updated more frequently and the 'long-tail' phenomena (small amounts of special purpose applications) are available.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>The WebCharts framework accommodates multiple types of visualizations, embedded in multiple types of applications. In this figure, four different host applications (around the outside) each dynamically add any WebCharts enabled visualization available on the web (center).• Danyel Fisher, Steven Drucker, and Roland Fernandez are with Microsoft Research. {danyelf, sdrucker, rfernand}@microsoft.com • Scott Ruble is with Microsoft Corporation. sruble@microsoft.com Manuscript received 31 March 2010; accepted 1 August 2010; posted online 24 October 2010; mailed on 16 October 2010. For information on obtaining reprints of this article, please send email to: tvcg@computer.org.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>System Diagram of WebCharts. Host applications contain a web browser control in which a visualization is rendered.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Host/Visualization communication Excel spreadsheet showing some visualizations using the WebCharts Framework. Tag Clouds, Maps, TreeMaps, and a Focus + Context visualization have all been added to a spreadsheet. At the top, a palette offers more visualizations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Brushing and linking within WebCharts. All communication channels work as usual, except that selection is routed through the ChartHost.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Timing graphs for each condition. Condition A: nonaggregated (4200 rows), Condition B: Aggregated (4 rows)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Hierarchical data represented in tabular form. Used for TreeMap visualization.</figDesc><table><row><cell>Name</cell><cell>Parent</cell><cell>Metadata</cell></row><row><cell></cell><cell></cell><cell>(hierarchy level)</cell></row><row><cell>Bill Gates</cell><cell>None</cell><cell>1</cell></row><row><cell>Steve Ballmer</cell><cell>Bill Gates</cell><cell>2</cell></row><row><cell>Steven Sinofsky</cell><cell>Steve Ballmer</cell><cell>3</cell></row><row><cell>Stephen Elop</cell><cell>Steve Ballmer</cell><cell>3</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Two tables used to represent graphical data. The first represents edges while the second represents node data.</figDesc><table><row><cell></cell><cell>Node1</cell><cell>Node2</cell><cell>Metadata</cell></row><row><cell></cell><cell></cell><cell cols="2">(Distance, in miles)</cell></row><row><cell></cell><cell>Boston</cell><cell>New York</cell><cell>190</cell></row><row><cell></cell><cell>Boston</cell><cell>San Francisco</cell><cell>2708</cell></row><row><cell></cell><cell>Seattle</cell><cell>San Francisco</cell><cell>679</cell></row><row><cell></cell><cell>Seattle</cell><cell>Boston</cell><cell>2484</cell></row><row><cell></cell><cell>Node</cell><cell cols="2">Metadata</cell></row><row><cell></cell><cell></cell><cell cols="2">(population, in people)</cell></row><row><cell></cell><cell>Boston</cell><cell>620535</cell></row><row><cell></cell><cell>Seattle</cell><cell>602000</cell></row><row><cell></cell><cell>New York</cell><cell>8214000</cell></row><row><cell></cell><cell>San Francisco</cell><cell>809000</cell></row><row><cell>3.3</cell><cell cols="3">Interactivity: Brushing and Linking WebCharts</cell></row><row><cell cols="4">There has been a great deal of research showing the benefits of</cell></row><row><cell cols="4">linking together multiple visualizations via selection and</cell></row><row><cell cols="3">highlighting behaviors. Becker</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Performance numbers for communicating with a visualization in WebCharts.</figDesc><table><row><cell>ŽŶĚŝƚŝŽŶ</cell><cell>ĂƉƚƵƌĞ</cell><cell cols="2">^ŚĂƉĞ DĂƌƐŚĂů</cell><cell>ƵŝůĚ</cell><cell>dŽƚĂů</cell></row><row><cell>͗ EŽŶͲĂŐŐƌĞŐĂƚĞĚ</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>;ϰϮϬϬ ƌŽǁƐͿ</cell><cell>ϭϯϲ</cell><cell>ϲϵϲ</cell><cell>ϰϬ</cell><cell>ϯϵϬ</cell><cell>ϭϮϲϮ</cell></row><row><cell>͗ ŐŐƌĞŐĂƚĞĚ</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>;ϰ ƌŽǁƐͿ</cell><cell>ϭϯϴ</cell><cell>ϲϵϲ</cell><cell>ϯ</cell><cell>ϭϱ</cell><cell>ϴϱϮ</cell></row><row><cell>͗ ^ŝŶŐůĞ ZŽǁ ;ϭ ƌŽǁͿ</cell><cell>ϱ</cell><cell>ϴϱϵ</cell><cell>ϯ</cell><cell>ϭϲ</cell><cell>ϴϴϯ</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors wish to thank David Karger, for his assistance with Exhibit.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards an XML Toolkit for a Software Repository Supporting Information Visualization Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Baumgartner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katy</forename><surname>Börner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Information Visualization Conference</title>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>Interactive Poster</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Brushing Scatterplots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">S</forename><surname>Cleveland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987-05" />
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="127" to="142" />
		</imprint>
	</monogr>
	<note type="report_type">Technometrics</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Zoomable Graphical Sketchpad for Exploring Alternate Interface Physics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hollan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bacon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">Furnas</forename><surname>Pad++</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="3" to="31" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Toolkit Design for Interactive Structured Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jesse</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jon</forename><surname>Grosjean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Meyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="page" from="535" to="546" />
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Jazz: an extensible zoomable user interface graphics toolkit in Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Good</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Annual ACM Symposium on User interface Software and Technology</title>
		<meeting>the 13th Annual ACM Symposium on User interface Software and Technology<address><addrLine>San Diego, California, United States; New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000-08" />
			<biblScope unit="page" from="171" to="180" />
		</imprint>
	</monogr>
	<note>UIST &apos;00</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Protovis: A Graphical Toolkit for Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1121" to="1128" />
			<date type="published" when="2009-12" />
		</imprint>
	</monogr>
	<note>Visualization and Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">VisGets: Coordinated Visualizations for Web-based Information Exploration and Discovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dork</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Carpendale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1205" to="1212" />
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
	<note>Visualization and Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Dundas Chart for ASP.NET. Dundas</title>
		<imprint>
			<biblScope unit="volume">Documentation</biblScope>
			<biblScope unit="page" from="2005" to="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Information Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Symposium on</title>
		<imprint>
			<biblScope unit="page" from="167" to="174" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>The InfoVis Toolkit</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="http://flare.prefuse.org" />
		<title level="m">Flare</title>
		<imprint>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<ptr target="http://code.google.com/apis/visualization/interactive_charts.htm.Assessed" />
		<title level="m">Google Visualization API</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Prefuse: A toolkit for interactive information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Landay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CHI</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Exhibit: Lightweight structured data publishing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Huynh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WWW &apos;07: Proc. of the Int. World Wide Web Conf</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="737" to="746" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<ptr target="http://www.json.org.Onlineassessed" />
		<title level="m">JSON</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The web page as a WYSIWYG end-user customizable database-backed information management application</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ostler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd Annual ACM Symposium on User interface Software and Technology</title>
		<meeting>the 22nd Annual ACM Symposium on User interface Software and Technology<address><addrLine>Victoria, BC, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-10-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m">UIST &apos;09</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<biblScope unit="page" from="257" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Visualizing Software for Understanding and Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lienhard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kuhn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Greevy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th IEEE International Workshop on Software</title>
		<imprint>
			<date type="published" when="2007-06" />
			<biblScope unit="page" from="24" to="25" />
		</imprint>
	</monogr>
	<note>Rapid Prototyping of Visualizations using Mondrian</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Harnessing the Information Ecosystem with Wiki-based Visualization Dashboards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mckeon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1081" to="1088" />
			<date type="published" when="2009-12" />
		</imprint>
	</monogr>
	<note>Visualization and Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Snap-together visualization: a user interface for coordinating visualizations via relational schemata</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Working Conference on Advanced Visual interfaces</title>
		<meeting>the Working Conference on Advanced Visual interfaces<address><addrLine>Palermo, Italy; New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="128" to="135" />
		</imprint>
	</monogr>
	<note>AVI &apos;00</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Processing</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tibco Spotfire</surname></persName>
		</author>
		<ptr target="http://spotfire.tibco.com/" />
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Polaris: A system for query, analysis, and visualization of multi-dimensional relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diang</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="65" />
			<date type="published" when="2002-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Many eyes: A site for visualization at internet scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Viégas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kriss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mckeon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. On Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1121" to="1128" />
			<date type="published" when="2007-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Building Highly-Coordinated Visualizations in Improvise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Visualization</title>
		<imprint>
			<biblScope unit="page" from="159" to="166" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>IEEE Symposium on</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">WebCharts embedded in a development environment (Visual Studio) and used for debugging</title>
	</analytic>
	<monogr>
		<title level="j">Figure</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
