<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Smooth and efficient zooming and panning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarke</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
							<email>vanwijk@win.tue.nl</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wim</forename><forename type="middle">A A Nuij</forename><surname>Technische</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Universiteit</forename><surname>Eindhoven</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Smooth and efficient zooming and panning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.6 [Computer Graphics]: Methodology and Techniques-Interaction techniques; D.2.2 [Software Engineering]: Tools and Techniques-User interfaces Navigation</term>
					<term>zooming</term>
					<term>panning</term>
					<term>scrolling</term>
					<term>scale space</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Large 2D information spaces, such as maps, images, or abstract visualizations, require views at various level of detail: Close ups to inspect details, overviews to maintain (literally) an overview. Users often switch between these views. We discuss how smooth animations from one view to another can be defined. To this end, a metric on the effect of simultaneous zooming and panning is defined, based on an estimate of the perceived velocity. Optimal is defined as smooth and efficient. Given the metric, these terms can be translated into a computational model, which is used to calculate an analytic solution for optimal animations. The model has two free parameters: animation speed and zoom/pan trade-off. A user experiment to find good values for these is described.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>We consider a simple problem. Suppose, we are developing an interactive cartographic application. The user is presented a map of, say, the US, and can zoom in on regions, states, and cities by picking items from a list or clicking on areas on the screen. We want to offer a smooth animation from one close-up on the map to another. How to define this animation?</p><p>One encounters this problem frequently. Cartography is the prime example, but in Information Visualization there is an even stronger need for such smooth animations. Abstract data is typically mapped to 2D graphic representations, such as scatterplots, graph diagrams, or treemaps. Large data sets lead to large images with much detail. Interaction with these representations is vital to achieve insight, as summarized in <ref type="bibr">Ben Shneiderman's Visual Information Seeking mantra: Overview, zoom &amp; filter, details-ondemand</ref>  <ref type="bibr" target="#b8">[Shneiderman 1996]</ref>. Another key concept in Information Visualization is focus+context. Both stress that data must be visualized at several levels of scale: The user must be enabled to zoom in and focus, while on the other hand he should maintain an overview and understand the context of the data focussed on. One solution is to offer multiple representations at different scales simultaneously, another class of solutions concerns distortion of space, such as fish-eye views <ref type="bibr" target="#b4">[Furnas 1986</ref>]. Here we consider the use of the time dimension for this purpose. In other words, if the user shifts his attention, from overview to detail or from one detail to another, a smooth transition aids in understanding the relation between the two views.</p><p>At first sight, interpolation (linear in space, logarithmic in scale) might seem to be sufficient to make the transition from one view to another. However, this solution falls short when the transition has to be made from one close-up to another. For instance, suppose we focus on New York and shift to Los Angeles. Such a simple solution leads to a long animation, where a small strip of the US is shown in detail. A somewhat better solution is to zoom out first, pan across the continent, followed by a zoom in on the city of destination. But how much to zoom out? How much time should the animation take? How to combine zooming and panning? What is the optimal path? How can we define optimal here? The problem is less simple than it seems at first sight.</p><p>In this paper we present a solution to this problem, or, in other words, we present a computational model for fast navigation in scale space. After a review of related work in section 2, we analyze the problem in section 3. Central is the definition of a metric on the effect of zooming and panning, derived from an estimate of average velocity. Based on this metric we first present an optimal solution for a simple zoom-out, pan, zoom-in scenario (section 4). Next we consider arbitrary transitions (section 5) and present how an optimal path of a virtual camera can be determined analytically given two projections. In section 6 we present a first user experiment in order to find satisfying values for the two free parameters in the model (animation speed and zoom/pan trade off). Finally, conclusions are drawn and possible extensions are discussed in section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND</head><p>The importance of viewing at different levels of scale, or for short multiscale viewing, is addressed in many articles on visualization, and can be found in many interactive applications, not only visualization tools, but also image viewers, word processors, games, etc.. Bederson has shown with his work on Zoomable User Interfaces <ref type="bibr" target="#b1">[Bederson et al. 1994;</ref><ref type="bibr" target="#b2">Bederson et al. 2000]</ref> how flexible viewing can be used as a foundation for intuitive user interfaces. Surprisingly however, we could only find one reference where the problem we address here is discussed explicitly. George <ref type="bibr">Furnas and Ben Bederson [1995]</ref> present Space-Scale Diagrams: a visual depiction of multiscale viewing. The horizontal axis denotes space, the vertical axis denotes scale. Furnas and Bederson show how this diagram can be employed to attack a variety of problems associated with multi scale viewing, including optimal pan-zoom trajectories. Optimal is translated here as the shortest path. To determine the length of a path, they present measures for pure panning and zooming, based on an information metric. The distance between two views is expressed as the number of bits required to encode the difference between the two frames. For panning this is equal to βd, where β is the bit density of the image and d is the displacement in screen units, for zooming this is equal to βw log r , where w is the width of the screen, and r is the zoom factor. Guidelines for several piecewise pure pans or zooms trajectories are given, but for the truly optimal shape, the authors remark that such trajectories "will <ref type="bibr">IEEE Symposium on Information Visualization 2003</ref><ref type="bibr">, October 19-21, 2003</ref>, Seattle, Washington, USA 0-7803-8154-8/03/$17.00 ©2003 IEEE A related topic has been addressed by <ref type="bibr" target="#b5">Igarashi et al. [2000]</ref>. They consider how to improve the browsing through large documents. They recommend that during scrolling the view should zoom out automatically, such that the perceptual scrolling speed in screen space remains constant.</p><p>Our approach has a similar structure as that of Furnas and Bederson, but differs in the way various aspects are filled in. We discuss the problem in u, w space, where u denotes panning and w denotes zooming, both measured in world coordinates. We use u, w diagrams, which are simpler to understand and work with than spacescale diagrams. We define optimal as smooth and efficient, define a metric to measure the effect of combined zooming and panning, and derive, based on differential geometry, differential equations that describe optimal paths. We solve these explicitly, first for a zoom-pan-zoom strategy, and next to find the optimal path. Finally, we present a small-scale user experiment to find good values for the two free parameters we have introduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MODEL</head><p>In this section we define the projection in more detail, followed by our definition of optimality, and the definition of a metric to assess the effect of zooming and panning. This metric is next used to define optimality quantitatively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Projection</head><p>We consider the projection of a square subset A of an object M to image space I . M is defined over an area W ⊂ IR 2 , A ⊂ W , where W denotes world space. We define the area of interest A by a center point c = (c x , c y ) ∈ W and a width w, i.e.</p><formula xml:id="formula_0">A = [c x − w/2, c x + w/2] × [c y − w/2, c y + w/2].</formula><p>For the image space I we use normalized device coordinates: a unit square, centered around the origin, i.e.</p><formula xml:id="formula_1">I = [−1/2, 1/2] × [−1/2, 1/2]. w u pan zoom (u 1 , w 1 ) (u 0 , w 0 ) (u(s), w(s)) w 0 w 1 u 0 u 1 Figure 2: u, w space diagram</formula><p>The projection of a point</p><formula xml:id="formula_2">x = (x, y) ∈ A to a point x = (x , y ) ∈ I is then simply (x , y ) = x − c x w , y − c y w ,<label>(1)</label></formula><p>the inverse projection is given by</p><formula xml:id="formula_3">(x, y) = (c x + wx , c y + wy ).<label>(2)</label></formula><p>Suppose now that two areas of interest A 0 and A 1 are given, defined by c i , w i , with i = 0, 1, and that an animation from the first to the second has to be defined (see <ref type="figure" target="#fig_0">figure 1)</ref>. To this end we have to find functions c(s) and</p><formula xml:id="formula_4">w(s), s ∈ [0, S], such that at least c(0) = c 0 , w(0) = w 0 , c(S) = c 1 , w(S) = w 1 .</formula><p>The parameter s is along a path from the first to the second projection, and S denotes the final value. The functions c(s) and w(s) denote the path of the camera and the width shown along the path. An animation can now be defined by setting</p><formula xml:id="formula_5">s = V t, t ∈ [0, S/V ],<label>(3)</label></formula><p>where V denotes the constant animation speed, and t wall clock time, for instance in seconds. In the remainder we will use s as main parameter, decoupled from the basic animation speed V . For convenience, if a unit speed is assumed, s and t are interchangeable. We simplify the problem by assuming that there is no perceptual difference between horizontal, diagonal, and vertical panning. In this case an optimal path c(s) is always a straight line, and hence we can define</p><formula xml:id="formula_6">c(s) = c 0 + c 1 − c 0 c 1 − c 0 u(s), u ∈ [u 0 , u 1 ], with u 0 = 0 and u 1 = c 1 − c 0 .<label>(4)</label></formula><p>The parameter u(s) denotes panning along a straight line. We have to find functions u(s) and w(s), s ∈ [0, S], such that at least</p><formula xml:id="formula_7">u(0) = u 0 , w(0) = w 0 , u(S) = u 1 , w(S) = w 1 .<label>(5)</label></formula><p>We can depict the problem in (u, w) space, as shown in figure 2. We found these diagrams, which we called u, w-diagrams, more convenient to reason about the problem than space scale diagrams. Each projection maps to a point in the diagram. Zooming and panning naturally map to moving a point vertically or horizontally. The axes have the same dimension, both units in world space. Furthermore, the diagram enables a direct physical interpretation. The horizontal axis can be considered as a cross-section through the object M to be displayed, the point can be interpreted as a camera, floating at a height w above M with a field of view of 2 arctan 1/2 ≈ 53 • . The path (u(s), w(s)) is hence simply the path of a camera, flying above a map. This can be emulated physically: Position yourself in front of an image, look perpendicular to this image, and move your head according to a camera path (or, move the image). In this way we can try out various scenarios for zooming and panning in an easy way, and obtain a rough feeling for optimal paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Requirements</head><p>The next question is what an optimal path is. We think this can be summarized in two words: The optimal path should be smooth and efficient. Smoothness is a constraint. The path should be at least continuous in the first order, in the sense that no sudden steps are made or abrupt changes in direction occur. These are requirements on the shape of the path. Furthermore the parametrization of the path must be chosen carefully. We formulate this as follows. When the camera moves along the path, the viewer should get the impression of a uniform and constant motion of the projected image on the screen. We limit ourselves to the perceptual level here, and discard cognitive aspects, such as memory, meaning of the image shown etc. Such aspects are much harder to incorporate in a model, and we assume that a perceptually smooth motion will also aid in cognition. Furthermore, in the remainder we assume that each projected part of M has the same characteristics, i.e. each image shown is equally interesting, has the same visual density, etc. for the range of c and w of interest, and that there are no discontinuities in the displayed image for varying w. In a strict sense, this requirement can only be met by artificial imagery with fractal characteristics. In real world applications, such as cartography, urban areas are more interesting than uniformly colored oceans, in strong close-up views often less detail is available. On the other hand, most applications for which interactive zooming is interesting will have details at many scales, and it is the task of the designer to make sure that at each scale an appropriate level of detail is shown. In cartography this is well-known as generalization.</p><p>The aspect to be optimized is efficiency. We operationalize this by aiming for the shortest path in u, w space possible: Detours are not appreciated, we want to get from A to B as fast as possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Metric</head><p>We aim for a path that is smooth and efficient. Both require that we are able to measure the effect of changing c and w, as perceived by the viewer. Following and generalizing the approach of <ref type="bibr" target="#b5">Igarashi and Hinckley [2000]</ref>, we use the velocity of the moving image as a basis for measurements, i.e., we aim at a metric for the perceived average optic flow in the image window. To this end, we first consider the velocityẋ of a projected point x in image space. We use a centered dot as notation for differentiation with respect to s, e.g.ȧ = da/ds. Differentiation of (1) giveṡ</p><formula xml:id="formula_8">x = −xẇ −ċ x w + c xẇ w 2 , −yẇ −ċ y w + c yẇ w 2 , or, using (2)ẋ = −x ẇ −ċ x w , −y ẇ −ċ y w .</formula><p>We are not only interested in a single point, we have to measure the velocity over the whole screen space I . For this we use the root mean squared average velocity</p><formula xml:id="formula_9">V RMS V 2 RMS = V 2 Iẋ •ẋ d I I d I = V 2 1/2 −1/2 1/2 −1/2 (ẋ 2 +ẏ 2 )dx dy = V 2 1 w 2ċ x 2 + 1 w 2ċ y 2 + 1 6w 2ẇ 2 = V 2 1 w 2u 2 + 1 6w 2ẇ</formula><p>2 .</p><p>V RMS is proportional to the animation velocity V , and the zoom velocityẇ and pan velocityu, both relative to the width w in world space. Also, V RMS shows that zooming has less impact (the factor 1/6) than panning. At this point it is too early to use V RMS directly as a measure. We cannot be sure that the perceptual effect of zooming versus panning is indeed measured by the average velocity. Hence, we define a metric on (u, w) space that is more general:</p><formula xml:id="formula_10">ds 2 = ρ 2 w 2 du 2 + 1 ρ 2 w 2 dw 2 .<label>(6)</label></formula><p>This metric gives the distance ds travelled, when u and w are changed with du and dw. The parameter ρ represents a trade-off between zooming and panning. A high value indicates that zooming has little impact, a low value indicates that panning has less impact. For ρ = 6 1/4 ≈ 1.565, the metric is equivalent to using V RMS as a measure. The best value for ρ depends on the subjective perception of the viewer, and has to be found experimentally. Results from such experiments and suggestions for good values of ρ are given in section 6. <ref type="figure">Figure 3</ref> shows a visualization of the metric defined in (6) for various values of ρ in (u, w) space. Each small ellipse denotes a set of points equidistant to its center according to the metric in (u, w) space. The shape of the ellipses is determined by ρ, their size is proportional to w.</p><p>Given the metric, an optimal path can now be defined more precisely. Two conditions must be satisfied. First, the animation should be smooth. In other words, when s varies constantly, the perceived rate of change has to be constant according to the metric. This implies that the path (u(s), w(s)) has to be arc length parametrized, and should satisfy the following differential equation, derived directly from the metric:</p><formula xml:id="formula_11">ρ 2u2 +ẇ 2 /ρ 2 = w 2 .<label>(7)</label></formula><p>Secondly, the animation should be efficient. If the path is arc length parametrized, then s represents the distance travelled. Efficiency then implies that the total distance S should be minimal. In terms of figure 3, the task of finding an optimal path loosely comes down to finding a path between two points, such that at each step along the path the same number of ellipses is crossed, and that in total as few ellipses as possible are crossed. For each value of ρ such an optimal path is shown, where the dots indicate equidistant points. The shapes of these paths depend on ρ: little zooming for low ρ, much zooming for high ρ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ZOOM OUT, PAN, ZOOM IN</head><p>We illustrate the preceding ideas first for a simple scenario, in the next section we consider optimal paths. <ref type="figure">Figure 4</ref> shows a simple path:  • for s = s B to S: zoom in from (u 1 , w m ) to (u 1 , w 1 ).</p><formula xml:id="formula_12">• for s = 0 to s A : zoom out from (u 0 , w 0 ) to (u 0 , w m );</formula><p>The problem now is to define a path (u(s), w(s)) such that the path is arc length parametrized and that the total path length S is minimal. For the first interval, whereu = 0, the first condition (7) reduces toẇ = ρw. A solution of this equation that satisfies</p><formula xml:id="formula_13">w(0) = w 0 is w(s) = w 0 exp(ρs), s ∈ [0, s A ].</formula><p>This is consistent with the recommendation given in <ref type="bibr" target="#b7">[Mackinlay et al. 1990]</ref>, where the use of a logarithmically slower movement is advocated when the target (in 3D) is approached. Similarly we find for the last interval</p><formula xml:id="formula_14">w(s) = w m exp(ρ(s B − s)), s ∈ [s B , S].</formula><p>For the panning interval in between, whereẇ = 0, the arc length parametrization condition reduces tou = w m /ρ. The solution of this equation that satisfies u(s A ) = u 0 is</p><formula xml:id="formula_15">u(s) = w m (s − s A )/ρ + u 0 , s ∈ [s A , s B ].</formula><p>The quantities s A , s B , and S depend on w m . The value of w m should be chosen such that S is minimal. We determine first the total length by considering the length of the three intervals. First, the length of the first interval follows from w(s A ) = w m , i.e.</p><formula xml:id="formula_16">s A = ln(w m /w 0 )/ρ, w m ≥ w 0 .</formula><p>Similarly, we find for the length of the last interval</p><formula xml:id="formula_17">S − s B = ln(w m /w 1 )/ρ, w m ≥ w 1 .</formula><p>The constraints w m ≥ w 0 and w m ≥ w 1 are required here to make sure that no negative pathlengths are generated. Using u(s B ) = u 1 we find for the length of the panning phase:</p><formula xml:id="formula_18">s B − s A = ρ(u 1 − u 0 )/w m .</formula><p>Hence, the total length S, expressed in w m , is</p><formula xml:id="formula_19">S = ρ(u 1 − u 0 ) w m + ln(w m /w 0 ) ρ + ln(w m /w 1 ) ρ . S is minimal if d S/dw m = 0. This gives −ρ(u 1 − u 0 ) w 2 m + 2 ρw m = 0.</formula><p>Together with the constraints that w m ≥ w 0 and w m ≥ w 1 , we get the optimal value for w m</p><formula xml:id="formula_20">w m = max(w 0 , w 1 , ρ 2 (u 1 − u 0 )/2),</formula><p>which completes the derivation of the optimal path for this simple scenario. In summary, we have found that the optimal path (u(s), w(s)) for s ∈ [0, S] for the zoom-pan-zoom scenario is given by:</p><formula xml:id="formula_21">u(s) =    u 0 if 0 ≤ s &lt; s A w m (s − s A )/ρ + u 0 if s A ≤ s &lt; s B u 1 if s B ≤ s ≤ S w(s) =    w 0 exp(ρs) if 0 ≤ s &lt; s A w m if s A ≤ s &lt; s B w m exp(ρ(s B − s)) if s B ≤ s ≤ S s A = ln(w m /w 0 )/ρ s B = s A + ρ(u 1 − u 0 )/w m S = s B + ln(w m /w 1 )/ρ w m = max(w 0 , w 1 , ρ 2 (u 1 − u 0 )/2).</formula><p>Ignoring the constraints, the optimal value of w m depends only on ρ and on the distance between c 0 and c 1 . For ρ = 6 1/4 , w m ≈ 1.2 c 1 − c 0 , i.e. one has to zoom out to such a level that both the start point c 0 and the end point c 1 are visible at some moment during the flight.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">THE OPTIMAL PATH</head><p>The preceding section dealt with a path with a rectangular shape. The smoothness criterion is violated here: At the corners the motion is discontinuous. Also, the total length is not optimal: By cutting corners a shorter path can be achieved. An optimal path between (u 0 , w 0 ) and (u 1 , w 1 ) has to satisfy the boundary conditions given in (5), and the arc length parametrization condition (7). Furthermore, it has to be the shortest path between the two points, i.e. the geodesic.</p><p>In standard Euclidean space a geodesic is a straight line, in curved space this is usually a curve. A classic example is spherical space, used for mapping spheres. On a longitude, latitude map a line does not give the shortest path on the sphere, whereas a great circle does. Also our (u, w) space is curved, because of the metric we have defined. In Appendix 1 we illustrate how this curved space can be depicted geometrically.</p><p>Curved space is studied with analytical means in differential geometry, of which Gauss and Beltrami can be considered the founders. From this vast area we only need how from the metric an equation for the geodesics can be found <ref type="bibr" target="#b9">[Struik 1950;</ref><ref type="bibr" target="#b0">Auslander 1967;</ref><ref type="bibr" target="#b6">Lipschutz 1969]</ref>. Differential geometry tells us that for a space with a metric of the form</p><formula xml:id="formula_22">ds 2 = E du 2 + G dw 2 ,</formula><p>a geodesic (u(s), w(s)) has to satisfy the following equations</p><formula xml:id="formula_23">u + E u 2Eu 2 + E w Euẇ − G u 2Eẇ 2 = 0, and w − E w 2Gu 2 + G u Guẇ + G w 2Gẇ 2 = 0,</formula><p>where double dots denote double differentiation with respect to s (e.g.ü = d 2 u/ds 2 ), and subscripts denote partial differentation (e.g. E u = ∂ E/∂u). For our metric E = ρ 2 /w 2 and G = 1/ρ 2 w 2 , substitution givesü − 2uẇ/w = 0, and</p><formula xml:id="formula_24">w + ρ 4u2 /w −ẇ 2 /w = 0.<label>(8)</label></formula><p>Hence, the optimal path is the solution for (u(s), w(s)) that satisfies equations (5), <ref type="formula" target="#formula_11">7</ref>, and (8). In Appendix 2 we show how the analytical solution can be derived, here we give the final result for</p><formula xml:id="formula_25">(u(s), w(s)), s ∈ [0, S], u 0 = u 1 : u(s) = w 0 ρ 2 cosh r 0 tanh(ρs + r 0 ) − w 0 ρ 2 sinh r 0 + u 0 , w(s) = w 0 cosh r 0 / cosh(ρs + r 0 ), S = (r 1 − r 0 )/ρ,<label>(9)</label></formula><p>r i = ln(−b i + b 2 i + 1), i = 0, 1, and</p><formula xml:id="formula_26">b i = w 2 1 − w 2 0 + (−1) i ρ 4 (u 1 − u 0 ) 2 2w i ρ 2 (u 1 − u 0 ) , i = 0, 1,</formula><p>where the hyperbolic cosine, sine, and tangens are defined as cosh x = (e x + e −x )/2, sinh x = (e x − e −x )/2, and tanh x = sinh x/ cosh x. For u 0 = u 1 the optimal path is given by <ref type="figure">Figure 5</ref> shows sets of geodesic paths, starting from u = 0 and w = 10 in different directions, for various values of ρ. Furthermore, in each plot a set of contours is shown as thin lines. Each contour represents a set of points at an equal distance from the start point. Both the paths and the contours are parts of ellipses, where ρ again determines their shapes. A path lies on the ellipse through (u 0 , w 0 ) and (u 1 , w 1 ) with center (u 0 − w 0 sinh r 0 /ρ 2 , 0), the lengths of the axes in u and w direction are w 0 cosh r 0 /ρ 2 and w 0 cosh r 0 respectively. For ρ = 1 paths are circles. The center lies on the u-axis. For s → ±∞ the path approaches the horizontal axis perpendicularly, i.e. for small w panning is not effective. Given these images, the structure of equation <ref type="formula" target="#formula_25">9</ref>can now be understood more easily. The elliptic path is defined by (u, w) = (tanh(s)/ρ 2 , 1/ cosh(s)), the other constants involved make sure that the ellipse passes through (u 0 , w 0 ) and (u 1 , w 1 ), and that the parametrization fits the measure. <ref type="figure">Figure 6</ref> shows another visualization of the paths. The horizontal axis denotes s, the vertical axis u. The thick lines show u(s) for three values of ρ. This shows that the virtual camera moves smoothly and monotonically in the direction of u 1 . Furthermore the instantaneous width is shown: the interval between the graphs of u(s) − w(s)/2 and u(s) + w(s)/2, shown as thin lines. Again, the effect of different values for ρ is clearly visible.</p><formula xml:id="formula_27">u(s) = u 0 w(s) = w 0 exp(kρs) S = |ln(w 1 /w 0 )|/ρ k = −1 if w 1 &lt; w 0 1 otherwise</formula><p>The scale of s has not been discussed so far. For this case, the total path length S varies from about 4.2 to 4.5. What is this dimension? For a pure panning motion we find that value s corresponds to a motion of ρ u/w, i.e. s relates here to ρ times the number of image widths panned, which is a fairly natural and understandable measure. For example, for ρ = 1 panning from (u, w) = (0, 10) to (40, 10) gives a distance s = 4. For a zoom out with a factor  The paths derived here and in the previous section can easily be translated into an implementation of a smooth animation. The simplest and also most flexible approach is to calculate for each new frame everything anew. We take advantage here of the property that geodesics are unique: if C is a point on the geodesic from A to B, then the geodesic from C to B is a subset of the original one. We typically use a procedure which takes as input the current view (c 0 and w 0 ), the target view (c 1 and w 1 ), the animation parameters (V and ρ), and the time step t between frames, and which returns the view (c and w) for the next frame. For the time step we use an average value of the last five to ten frames.</p><p>Another implementation is to recalculate the path only when one of the parameters changes. This requires two separate procedures (one for making a step and one for changing the path), where care has to be taken that the latter one is always called when a parameter is changed. The suggested state-less implementation takes care of this automatically, simplifying the change of parameters during the flight, at the expense of some additional computing cost. But typically, this cost is neglectable when compared to the rendering of the frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">USER EXPERIMENTS</head><p>We have done a first user experiment to obtain insight in preferred values for V and ρ. We have implemented a small application where the user can load an image, define areas of interest, switch between these areas, upon which a smooth animation is shown with user-defined settings for V and ρ. Also, the application has a test mode for more controlled experiments. We used a high resolution height map of Mars as image. This image was visually interesting, contains information on various scales, and was unfamiliar to our users. We explained the background of the experiments, and asked the users to set V and ρ for two conditions. First, an alternating zoom-pan animation between two locations was shown, secondly, a tour around ten different locations was shown. We asked the users to set the parameters such that the perceived animation was smooth, fluent, and suitable for a daily use application. The task was done at a notebook computer, and took about 5 minutes to complete. Users could set the values via sliders, no feedback on numerical values was given to prevent bias. The 26 users were colleagues and students from our department, and all had (much) experience with using computers.</p><p>Many users commented on the importance of cognitive aspects. They pointed out that familiarity of the image shown, the amount of detail in the image, and the exact task would influence their preferences. Also, we found that some users set ρ to get a zoom-out level which they liked, where the aspect of smooth motion was of lesser importance. On the positive side, the users found the final paths (given their preferences) smooth, pleasant, and natural. <ref type="figure" target="#fig_5">Figure 7</ref> shows the parameter settings that were selected by our users. It shows that preference for ρ and V were uncorrelated, hence these seem to be independent dimensions, and that the conditions (two vs. ten locations) did not strongly influence the result. The average value for V is 0.90, the standard deviation 0.43. For ρ the average value is 1.42 and the standard deviation is 0.47. The value of 1.42 is (statistically significant) smaller than 1.565, the value which we derived from using the root mean squared average velocity. The average value found suggests that ρ = √ 2 is possibly an optimal value, but we have not found yet a model to explain this. Furthermore, the variation in the results was large, much larger than we expected. Nevertheless, we think that these average values will yield reasonable results for a variety of users and use cases. For an optimal result, the setting has to be customizable to the preference of the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSIONS</head><p>We have shown how to generate a smooth animation from one view on a 2D model to another. The problem turned out to be more complex than it seems at first sight, we needed differential geometry and had to solve a system of three differential equations to find an optimal path. Was this worth it? We think it was. The end result is a set of closed equations, which can easily be used to implement smooth and efficient zooming and panning. The visual result, as we observed from user tests is pleasing and smooth. The original impetus for this work was the visualization of call graphs via a hierarchical matrix visualization <ref type="bibr" target="#b10">[van Ham 2003]</ref>. The use of a smooth zoom-pan strategy to maintain a good overview was vital here, because the information shown is abstract and varies per level. The method described here has been integrated, and gives very good results, visually. Finally, there are many other applications that can take advantage of this method, i.e. any application where a user observes some 2D object and is enabled to zoom and pan.</p><p>Besides from practical use, the approach described here is also interesting from a more theoretical point of view. We used measurement of average perceived velocity as our starting point, and have presented a model to relate zooming and panning. In the future we will explore if the approach described here also can deal with more general image transforms, especially anisotropic scaling and rotation. Another possible variation is to use a varying velocity, such as acceleration at the beginning and deceleration at the end of the animation. Furthermore, we focussed here on animations where the start and end are given. The metric introduced here can possibly also be used to optimize free navigation, where the user is free to control the path himself.</p><p>We aimed at perceptually pleasing results, however, cognitive aspects also play an important role for this kind of animations. More research can be done to study the role of perception versus cognition. Specifically, it is interesting to study what the average value and variation of ρ is when perceptual effects are isolated in some way. A more precise analysis of the various cognitive aspects as well as guidelines for good values for ρ given a variety of tasks, image contents, etc. would be useful. An extended model, in which the user can additionally specify that he for instance wants to zoom out more than the optimal paths defined here could also be useful to tackle the cognitive aspects. Meanwhile however, the model presented here is already useful for a variety of cases, especially if the user can tune the two parameters to his preferences. w u <ref type="figure">Figure 8</ref>: u, w space depicted as a geometric surface More formally, let us consider a parametric surface x(u, w) = (x <ref type="bibr">(u, w), y(u, w), z(u, v)</ref>). The length of a small step dx = x u du + x v dv has to fit the measure, i.e. <ref type="figure">Figure 8</ref> shows a surface that satisfies this constraint:</p><formula xml:id="formula_28">dx • dx = ρ 2 w 2 du 2 + 1 ρ 2 w 2 dw 2 .</formula><p>x(u, w) = (ρ/w) cos u, y(u, w) = (ρ/w) sin u, and</p><formula xml:id="formula_29">z(u, w) = 1 ρ ln(w + w 2 − ρ 4 ) − w 2 − ρ 4 wρ .</formula><p>The horizontal circles are lines with constant w, the lines towards the top are lines with constant u. In other words, panning is mapped to rotating around the central axis. Panning over large distances corresponds to rotating multiple times around the central axis, each point on the surface is multi-valued. Zooming out corresponds to climbing the object, zooming in to descending. Note that the square grid cells shrink when w increases. Two geodesics are shown. For large panning distances (moving multiple times around the central axis) the geodesic is located high on the surface, i.e. zooming out is stronger.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>World space and image space have a complicated curved shape, and finding it is a complicated calculus-of-variations problem".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Metric in (u, w) space Zoom out, pan, zoom in • for s = s A to s B : pan from (u 0 , w m ) to (u 1 , w m );</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>Paths and iso-distance curves in (u, w) u and w as a function of s r = w 1 /w 0 we find that the corresponding s equals ln r/ρ. Hence, zooming in from (40, 10) to (40, 1) gives a distance of s ≈ 2.3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Scatterplot of V and ρ values found</figDesc></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX 1 -CURVED SPACE</head><p>To illustrate this concept of curved space, we consider what geometric surface corresponds to our metric, like a sphere corresponds with the longitude latitude map. Loosely, we distort the 2D images shown in figure 3 to a 3D surface, such that all ellipses are distorted to circles with the same size. To this end, one has to shrink horizontal lines (w constant) for high values of w, and to stretch them for low values. This will give a rotationally symmetric 3D surface. Horizontal lines are distorted into circles, or, in other words, the u parameter is mapped to rotation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX 2 -DERIVATION PATH</head><p>In this appendix we give the derivation of the optimal path</p><p>This path has to satisfy the boundary conditions</p><p>it has to be arc length parametrized:</p><p>and has to satisfy the geodesic equations u − 2uẇ/w = 0, and</p><p>Equation (11) can be satisfied by introducing an extra parameter β(s) and settingu = w sin(2β)/ρ, and (13) w = wρ cos(2β).</p><p>If we substitute this in (12), both equations reduce to</p><p>Integration gives, with r 0 an integration constant,</p><p>If we set s * = ρs + r 0 to shorten notation, then we get tan β = e s * . The use of cos 2β = (1 − tan 2 β)/(1 + tan 2 β) in equation <ref type="formula">14</ref>leads toẇ = ρw(1 − e 2s * )/(1 + e 2s * ) = −ρw sinh s * / cosh s * .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rearrangement and integration give ln</head><p>where A is an integration constant. Using sin 2β = tan β/(1 + tan 2 β) in (13) a similar derivation leads to u(s) = A tanh(ρs</p><p>where B is yet another integration constant.</p><p>We have now found u(s) and w(s), the next step is to set the four unknown constants A, B, r 0 , and S such that the boundary conditions (10) are satisfied. From w(0) = w 0 we get</p><p>Combination of the last two equations gives w 1 cosh r 1 − w 0 cosh r 0 = 0.</p><p>Similarly, the use of u(0) = u 0 and u(S) = u 1 gives B = u 0 − (w 0 /ρ 2 ) sinh r 0 , and</p><p>and combined</p><p>Let U = (u 1 − u 0 )ρ 2 . The unknown r 1 can be eliminated from (17) and (18) by using cosh 2 r 1 − sinh 2 r 1 = 1, resulting in which completes the derivation of u(s) and w(s).</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Differential geometry. Harper&amp;Row</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Auslander</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1967" />
			<biblScope unit="page">165</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Pad++: Advances in multiscale interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stead</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hollan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI&apos;94 Human Factors in Computing Systems</title>
		<meeting>CHI&apos;94 Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="315" to="316" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Jazz: An extensible zoomable user interface graphics toolkit in java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Good</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings UIST 2000, ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST 2000, ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="171" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Space-scale diagrams: Understanding multiscale interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Furnas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI&apos;95 Human Factors in Computing Systems</title>
		<meeting>CHI&apos;95 Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="234" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Generalised fisheye views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Furnas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI&apos;86</title>
		<meeting>CHI&apos;86</meeting>
		<imprint>
			<date type="published" when="1986" />
			<biblScope unit="page" from="16" to="23" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Speed-dependent automatic zooming for browsing large documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Igarashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hinckley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings UIST 2000, ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST 2000, ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="139" to="148" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Differential Geometry. McGraw-Hill</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lipschutz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1969" />
			<biblScope unit="page">234</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Rapid controlled movement through a virtual 3d workspace</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robertson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;90</title>
		<meeting>SIGGRAPH&apos;90</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="171" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The eyes have it: A task by data type taxonomy of information visualizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Visual Languages &apos;96</title>
		<meeting>IEEE Symposium on Visual Languages &apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="336" to="343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Lectures in classical differential geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Struik</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1950" />
			<publisher>Addison-Wesley</publisher>
			<biblScope unit="page">142</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Using multi-level call matrices in large software projects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Van Ham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE InfoVis</title>
		<meeting>IEEE InfoVis</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
