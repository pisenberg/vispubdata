<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visual Analysis of Hyperproperties for Understanding Model Checking Results</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Tom</forename><surname>Horak</surname></persName>
							<email>horakt@acm.org</email>
						</author>
						<author>
							<persName><forename type="first">Norine</forename><surname>Coenen</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Niklas</forename><surname>Metzger</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Christopher</forename><surname>Hahn</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Tamara</forename><surname>Flemisch</surname></persName>
							<email>tamara.flemisch@tu-dresden.de</email>
						</author>
						<author>
							<persName><forename type="first">Juli</forename><surname>Án M Éndez</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Dennis</forename><surname>Dimov</surname></persName>
							<email>dennis.dimov@tu-dresden.de@julianjesus.mendez</email>
						</author>
						<author>
							<persName><forename type="first">Bernd</forename><surname>Finkbeiner</surname></persName>
							<email>finkbeiner@cispa.de</email>
						</author>
						<author>
							<persName><forename type="first">Raimund</forename><surname>Dachselt</surname></persName>
							<email>dachselt@acm.org</email>
						</author>
						<author>
							<persName><forename type="first">•</forename><forename type="middle">T</forename><surname>Horak</surname></persName>
						</author>
						<author>
							<persName><forename type="first">J</forename><surname>Méndez</surname></persName>
						</author>
						<author>
							<persName><forename type="first">•</forename><forename type="middle">R</forename><surname>Dachselt</surname></persName>
						</author>
						<author>
							<persName><forename type="first">•</forename><forename type="middle">N</forename><surname>Coenen</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Interactive Media Lab at Technische</orgName>
								<orgName type="institution">Universität Dresden</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Cluster of Excellence Physics of Life (PoL) at Technische</orgName>
								<orgName type="laboratory">Interactive Media Lab, the Centre for Tactile Internet (CeTI)</orgName>
								<orgName type="institution">Universität Dresden</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="laboratory">Reactive Systems Group at CISPA Helmholtz Center for Information Security</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Visual Analysis of Hyperproperties for Understanding Model Checking Results</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">7576E484D49F58E0C514BA8AF74817B9</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.1" ident="GROBID" when="2022-06-13T13:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Analyzing Counterexamples</term>
					<term>Hyperproperties</term>
					<term>Multiple Coordinate Views</term>
					<term>Explainable Formal Methods</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Fig. 1. HYPERVIS provides linked interactive views with highlighting mechanisms for analyzing counterexamples of hyperproperties.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Model checking <ref type="bibr" target="#b22">[23]</ref> is a highly efficient technique for the computeraided verification of computer systems such as integrated circuits, network protocols, and software. Model checking has long made the transition from research into practice and is routinely used by companies like Intel, Microsoft, or Amazon. Intel, for example, replaced testing with verification for the core execution cluster in their design of the Intel Core i7 processor <ref type="bibr" target="#b47">[46]</ref> and, recently, the initial boot code in data centers at Amazon Web Services (AWS) has been model checked to be memory safe <ref type="bibr" target="#b27">[27]</ref>. The key advantage of model checking is that it is an automatic method: given a system description M and a logical specification ϕ of a desired behavioral property, the model checker automatically determines whether or not M satisfies ϕ. If the system design is erroneous, the model checker generates a counterexample in the form of a specific execution of M that violates ϕ. While finding the counterexample is completely automatic, model checking typically provides very little assistance in actually understanding the counterexample and its underlying design flaw. Model checkers typically output the counterexample in the form of a detailed listing that contains the complete state information for every step of a computation that leads to the violation. Understanding all this data is already difficult for small designs and, for more complex systems and specifications, quickly becomes a daunting task.</p><p>In this paper, we present a visualization system that aids the analyst in understanding the counterexamples found by the model checker. The visualization views communicate the core aspects of the model checking result to the analyst and support an iterative analysis process. We specifically focus on hyperproperties <ref type="bibr" target="#b52">[51]</ref>, a class of system specifications that is essential for the analysis of security-critical systems. Hyperproperties express the absence of undesired dependencies or flows of information, such as those exploited in the infamous Meltdown <ref type="bibr" target="#b57">[56]</ref> and Spectre <ref type="bibr" target="#b49">[48]</ref> attacks. A counterexample to a hyperproperty is a set of executions of the system that, together, are problematic. For example, if some software needs to keep certain data secret, then two executions that result from different values of the secret (but agree on the public inputs) should not show any difference on the public outputs. Consequently, the model checker searches for such a pair of executions that differ in their public output values. Our goal is to help the analyst understand the violation of the hyperproperty by visualizing the relationship between the individual system executions, as well as the relationship to the system description and the logical formula. To support this, we have implemented the interactive tool HYPERVIS (Fig. <ref type="figure">1</ref>, imld.de/hypervis), that follows a multiple coordinated views approach <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b72">72]</ref>. We provide five interconnected views. The hyperproperty specification is shown as a logical formula in the formula view, the system as a state machine in the graph view, the executions over time in a tabular-like trace view and in a more compact timeline view. Additionally, there is a textual explication in the explanation view.</p><p>The fundamental challenge is that the connections between the different views and the relevance of their individual components is not known in advance, but rather must be deduced specifically for the hyperproperty of interest. We address this challenge with an automated causal analysis of the counterexample, where we identify those elements of the different views that directly contribute to the violation of the specification. The textual explication in the explanation view is directly based on this analysis. In all other views, the relevant elements can be directly highlighted. By incorporating easy-to-parse value encodings and clear color mappings alongside interactive mechanisms such as linked highlighting and debugger-like functionalities, we support the analyst in recognizing the counterexample's characteristics and in relating its different components. Finally, after the cause of the violation is understood, the analyst can correct the system and the specification directly within the interface through integrated editing functionalities.</p><p>HYPERVIS is the result of an interdisciplinary effort and a highly iterative design process which included joint brainstormings and discussions between visualization and model checking experts. The results and insights from this joint effort are presented in this paper. Specifically, we contribute: <ref type="bibr" target="#b0">(1)</ref> an in-depth analysis of challenges, (2) the design of visualization and interaction concepts enabling the visual analysis of the model checking results, (3) the realization of these concepts with HYPERVIS as a web-based tool alongside integrated editing facilities, and (4) insights from applying multiple case studies to our tool and conducting user feedback sessions with 6 participants. In summary, our work contributes to a class of visualization solutions that aims at visually explaining complex and abstract computing concepts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">WORKING WITH HYPERPROPERTIES</head><p>To support the analysis of counterexamples, we first need to understand the involved components, current workflows, and prevalent challenges. Therefore, we will first describe the formal objects utilized during the model checking process on a toy information-flow control problem, where a system needs to satisfy observational determinism (Sect. 2.1). Then, we will detail the current workflow using a slightly bigger example (Sect. 2.2), before outlining the resulting challenges for analyzing counterexamples (2.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Example: Verifying Observational Determinism</head><p>In general, the considered objects include the system model M, the counterexample executions π and π , and the hyperproperty specification ϕ. In this simplified example, our model M (Fig. <ref type="figure">2</ref>) is prone to leak a secret s via the publicly observable outputs o 1 and o 2 to an attacker. The underlying security lattice considers the secret s to be a confidential input that should not be visible to any observer while the input i and the outputs o 1 and o 2 are publicly observable. The model M can be represented as a finite state machine, where the current state determines the system's output, and the transitions of the finite state machine are labelled with the inputs to the system. All inputs and outputs are binary values, thus, they are either present or absent. When executing such a system, the present inputs and outputs are observed over multiple time steps. The given system in Fig. <ref type="figure">2</ref> cycles in the first state, outputting nothing, until an input i is present. Depending on whether a secret s is also given, the system then either outputs o 2 or o 1 indefinitely. If an attacker now happens to observe two executions of the system where the outputs are different although the input i were the same on both executions, they can conclude about the secret s at this time step.</p><p>The specification ϕ that we would like to verify for the system M is given as a HYPERLTL formula <ref type="bibr" target="#b23">[24]</ref>, a linear-time temporal logic for hyperproperties that can relate multiple executions. For the example above, we would like to require observational determinism, which is formalized in HYPERLTL as follows: ∀π ∀π</p><formula xml:id="formula_0">(i π ↔ i π ) → (o π ↔ o π ) .</formula><p>The formula quantifies universally (∀) over two traces π and π . The temporal modality means "globally", i.e., the formula ϕ requires the subformula ϕ to hold at every point in time. The given formula thus states that for all trace pairs π and π it must hold that when the observable inputs are the same at every point in time, the respective observable outputs must also be equal. Given the model and formula, a model checker would now provide two specific executions where at a given time step the outputs differ while the inputs are equal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Current Workflow</head><p>With the growing complexity of both the system and the specification, the model checking of hyperproperties quickly becomes complicated. We demonstrate the current workflow and the corresponding challenges when invoking a model checker for hyperproperties on a more involved example. To this end, we consider a system that arbitrates the access of two processes to a shared resource. Both processes can request access to their critical section (using req i) where they can interact with the shared resource, and the arbiter grants the access (with grant i) while ensuring mutual exclusion, i.e., only one of the processes can enter its critical section at any given time. The arbiter guarantees that every request will eventually be answered while not giving out spurious grants, i.e., every grant will have been requested before. The finite state machine for this system is sketched on the right in Fig. <ref type="figure">3</ref>. We want to check whether the arbiter is symmetric, thus, if a pair of traces π and π with symmetric requests at every step (i.e., (req 0 π ↔ req 1 π ) and vice versa) also gives the grants symmetrically. This hyperproperty checks if any of the processes has an unfair advantage and is favoured when granting access to the critical section. The corresponding HYPER-LTL formula expressing symmetry is noted on the left in Fig. <ref type="figure">3</ref>. The system grants processes asymmetrically: If π = π and both processes request initially, then always process 0 is granted first (Fig. <ref type="figure" target="#fig_0">4b</ref>).</p><p>The symmetry specification and the model of the arbiter can be given to a HYPERLTL model checking tool, such as MCHYPER <ref type="bibr" target="#b31">[31]</ref>, which are typically command-line based. The provided system models are usually considered as hardware specifications that could be implemented, e.g., on a chipset. Consequently, the model checkers also consume low-level circuit representation like AIGER <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>, encoding the system as an And-Inverter Graph. This representation is hard to read for human developers, who often sketch the system by hand in a more visual way (Fig. <ref type="figure">3</ref>) and realize the models using hardware description languages such as VERILOG <ref type="bibr" target="#b44">[43]</ref>, which are then compiled down to AIGER. Given such a system description and a hyperproperty, the model checker then tries to find a counterexample, i.e., a set of system Fig. <ref type="figure">3</ref>. Handwritten details of an arbiter system and a symmetry formula checking if a process has an unfair advantage over the other process when requesting access to a shared resource. executions that together violate the HYPERLTL formula. If a violation occurred, a counterexample is reported in a textual representation where each line represents variable's value on a given trace at a given time step (Fig. <ref type="figure" target="#fig_0">4a</ref>). This representation is hard to grasp as even for smaller counterexamples, this output consists of a few hundred lines (140 lines for this arbiter example), rendering it almost impossible to quickly understand the violation. Consequently, system designers might write down the values in a table-like representation (Fig. <ref type="figure" target="#fig_0">4b</ref>). Only then they can start to relate formula, system, and the counterexample executions with each other in order to identify and understand the violation of the specification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Challenges</head><p>This whole process quickly becomes cumbersome and poses multiple challenges. First of all, hyperproperties can express arbitrarily complex relations across traces and time, making it hard to recognize the patterns in the executions that violate such a hyperproperty. Further, analysts need to identify which subformulas were relevant (i.e., violated) and which parts can be ignored. Any visual support for scanning the present executions and identifying the relevant elements will be highly beneficial. After identifying the violation, it is still necessary to reason about why the violation could occur, thus, why one execution reached a particular state. For this, the executions must be considered in the context of the provided system. Further, both formula and system can grow quickly in size. On the one hand, this makes it increasingly challenging to sketch the components adequately and recognize specific characteristics. On the other hand, the likelihood of faulty formula specifications or system definitions increases as well, leading to the need to identify these issues and to correct them. Thus, editing facilities for formula and system are of interest. With our tool, we aim to significantly improve these analysis workflows and help the system designers in their development process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BACKGROUND &amp; RELATED WORK</head><p>We first provide formal details of the model checking problem of hyperproperties. Secondly, we elaborate on the importance of visualization methods to better understand abstract models or processes by giving an overview of related work. Finally, we discuss existing work for editing formula and graph representations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Model Checking of Hyperproperties</head><p>Model checking <ref type="bibr" target="#b22">[23]</ref> answers the following question: Given a system description M and a specification ϕ, formally describing the desired property, does M satisfy ϕ. More specifically in the context of hyperproperties, we require that the set of executions of M satisfies the hyperproperty. For the interested reader, we will define these concepts formally in the following.</p><p>The system description M is typically provided as a finite Moore state machine, formally defined as a tuple (S, s 0 , I, O, τ, l) with: S: a finite set of states; s 0 : the initial state; I: the input alphabet; O: the output alphabet; τ : S × I → S: a transition function; and l : S → O: an output labeling. Figure <ref type="figure">2</ref>, for example, depicts a finite Moore state machine with three states. The input alphabet contains variables i and s and the output alphabet contains the variables o 1 and o 2 . Edges of the state machine (arrows) are labeled with the input and states (circles) are labeled with the system's output. An execution (trace) of a model M is an infinite sequence of sets of atomic propositions AP through the state machine, where AP = I ∪ O. An example trace of the model in Figure <ref type="figure">2</ref> is {i, s}({o 2 }) ω . In the first position of the trace (corresponding to the initial state and first input), there is no output but the input i and s. Defined by the transition function, we proceed from the initial state to state 2, where we reside indefinitely by outputting o 2 without receiving a further input. The notation (x) ω denotes that x is repeated infinitely often. Formally, the set of all traces for a set of atomic propositions is thus (2 AP ) ω , i.e., the set of above mentioned infinite sequences over atomic propositions. The set of traces of a system model M, denoted by Traces(M), is a subset of (2 AP ) ω .</p><p>Formally, a hyperproperty H is a set of sets of traces; meaning it defines all trace sets that comply to the hyperproperty. If the traces of a system model M are no element of the hyperproperty, i.e., if Traces(M) ∈ H then the system does not satisfy the hyperproperty. In this case, a counter example is provided by the model checker, i.e., a set of system traces that violates the hyperproperty.</p><p>The desired behavior of the system is provided in a formal specification language such as HyperLTL, a temporal logic for hyperproperties. In HyperLTL, variables are interpreted as atomic propositions which can be connected with either Boolean operators (e.g., equivalence ↔, implies →, or ∨) or temporal operators. The most prominent temporal operators are globally ( ϕ, where ϕ must be true at all times) and eventually ( ϕ, meaning that ϕ will hold at some point in time); further operators include until (U ), release (R), and next ( ). As an example, consider again the HYPERLTL formula from Sect. 2.1:</p><formula xml:id="formula_1">∀π ∀π (i π ↔ i π ) → (o π ↔ o π ).</formula><p>HyperLTL formulas start with a quantifier prefix introducing universally (∀) or existentially (∃) quantified trace variables (π and π ) followed by a formula ψ in the body (here</p><formula xml:id="formula_2">(i π ↔ i π ) → (o π ↔ o π ))</formula><p>. Within this formula, the variables are indexed with trace variables to indicate to which trace quantifier they refer to (e.g., i π ). For a formal definition of the semantics and more examples of hyperlogics, we refer the interested reader to <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b24">25]</ref>.</p><p>With HYPERVIS, we visualize hyperproperty counterexamples returned by a hyperproperty model checker <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b31">31]</ref>. We use MCHY-PER <ref type="bibr" target="#b31">[31]</ref>, which builds on ABC <ref type="bibr" target="#b13">[14]</ref>. MCHYPER takes as inputs a hardware circuit, specified in the AIGER format <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>, and a HY-PERLTL formula. MCHYPER solves the model checking problem by computing the self-composition <ref type="bibr" target="#b4">[5]</ref> of the system. If the system violates the HYPERLTL formula, MCHYPER returns a counterexample. This counterexample is a set of traces through the original system that together violate the HYPERLTL formula. Depending on the type of violation, this counterexample can then be used to debug the circuit or refine the specification iteratively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Visualization and Explication of Formal Methods</head><p>In recent years, research started more intensively to investigate how complex and abstract algorithms and models can be visualized and interactively explored, and, thus, be made more transparent. Most prominently, this includes work within the area of explainable artificial intelligence (XAI) <ref type="bibr" target="#b41">[40,</ref><ref type="bibr" target="#b79">79,</ref><ref type="bibr" target="#b82">82]</ref>, but can also be extended to related fields such as formal methods <ref type="bibr" target="#b32">[32]</ref>. For example, proof attempts have been visualized by SATVIS <ref type="bibr" target="#b34">[34]</ref> and an improved version of the Z3 Axiom Profiler <ref type="bibr" target="#b74">[74]</ref>. They visually represent attempts from the VAMPEXCIRE theorem prover and Z3 SMT solver, respectively, in order to support users and developers of the tools in understanding the results.</p><p>Textual Explications One instance of textual explications are automatically generated facts based on the underlying data <ref type="bibr" target="#b81">[81]</ref>. Typically, machine learning algorithms extract facts which are then verbalized using natural language generation (NLG) <ref type="bibr" target="#b58">[57,</ref><ref type="bibr" target="#b66">65,</ref><ref type="bibr" target="#b80">80]</ref>. These facts can then aid interpreting a visualization by verifying the viewer's thoughts and pointing at potentially overlooked aspects <ref type="bibr" target="#b81">[81]</ref>. The generated facts can be shown as a single caption for a chart <ref type="bibr" target="#b78">[78]</ref> or be provided as a collection of statements next to the visualization <ref type="bibr" target="#b28">[28]</ref>. Applications in the areas of student-teacher communication <ref type="bibr" target="#b61">[60]</ref>, XAI <ref type="bibr" target="#b43">[42,</ref><ref type="bibr" target="#b77">77]</ref>, and supporting safe handovers in cyber-physical systems <ref type="bibr" target="#b84">[84]</ref> further indicate their practical benefits for interpreting visualizations.</p><p>Visualizing Counterexamples Visually representing counterexamples for trace properties, e.g., for LTL, is a known challenge for which various approaches have already been proposed. Techniques, such as state diagrams <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b36">36,</ref><ref type="bibr" target="#b46">45,</ref><ref type="bibr" target="#b59">58]</ref>, sequence diagrams <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b56">55,</ref><ref type="bibr" target="#b59">58]</ref>, and variable tables <ref type="bibr" target="#b46">[45,</ref><ref type="bibr" target="#b59">58,</ref><ref type="bibr" target="#b68">68]</ref>, convert the counterexample and the system model to more readable formats. The model view <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b36">36,</ref><ref type="bibr" target="#b56">55]</ref> takes a different route by mimicking the counterexample and providing a step-wise navigation. Further, visualization approaches for such counterexamples with single executions have been considered for various domains and applications <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b45">44,</ref><ref type="bibr" target="#b69">69]</ref>. Additionally, the established model checker UPPAAL <ref type="bibr" target="#b56">[55]</ref> visualizes timed automata for real-time systems, allowing for interacting with simulations of the system.</p><p>Approaches for supporting the analysis of counterexamples include minimizing <ref type="bibr" target="#b54">[53]</ref> and explaining counterexamples <ref type="bibr" target="#b6">[7]</ref>, as well as investigating several system executions simultaneously <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b40">39,</ref><ref type="bibr" target="#b75">75]</ref>. Multiple works explore how individual counterexamples can be visualized and explained, e.g., for function block diagrams <ref type="bibr" target="#b45">[44,</ref><ref type="bibr" target="#b68">68]</ref>, with the newest version of MODCHK <ref type="bibr" target="#b68">[68]</ref> being highly related to HYPERVIS. MODCHK provides a causality analysis <ref type="bibr" target="#b6">[7]</ref> which delivers an overapproximation of a set of causes. In contrast, HYPERVIS produces minimal explanations using a more efficient explanation algorithm. Further approaches to identifying the causes of a trace property violation <ref type="bibr" target="#b40">[39]</ref> have been made, for instance, the EXPLAIN <ref type="bibr" target="#b39">[38]</ref> tool, which has been incorporated into multiple model checkers <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>Visualizing Parallel Executions Research on distributed systems has examined how to visualize multiple, parallel executions of a system. Two examples are ODDITY <ref type="bibr" target="#b64">[63,</ref><ref type="bibr" target="#b87">87]</ref> and SHIVIS <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b7">8]</ref>. Oddity consists of an interactive visual debugger and is part of the DSLABS framework, which also includes a model checker for distributed systems. SHIVIS is a web tool that uses space-time diagrams to visualize the execution of a distributed system. Particularly these diagrams highlight the communication between components and the partial ordering between events that happen across components (the happens-before relationship). However, while related investigations have been conducted, the specific case of visualizing model checking results of hyperproperties was not considered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Editing Formulas and Systems</head><p>The modeling of systems that fulfill certain specifications is an iterative process of checking, correcting, and refining both the specifications and the system models. Therefore, editing the specification, i.e., formula or system, are essential parts of the workflow. In the following, we present existing work providing techniques for efficiently editing them.</p><p>Formula Editing Established online tools like Wolfram Alpha <ref type="bibr" target="#b86">[86]</ref> feature advanced text editors that facilitate writing mathematical notations. Specifically for formula editing, most interfaces provide a real-time preview of the formula, translated from the markup language used for writing the mathematical expressions. The most common markup languages for mathematical input are L A T E X <ref type="bibr" target="#b38">[37,</ref><ref type="bibr" target="#b76">76]</ref> as well as OpenMath and MathML <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b51">50]</ref>. Via markup alternatives or special characters keyboards, WYSIWYG approaches can allow users without knowledge of the markup language to still write the desired mathematical expressions <ref type="bibr" target="#b55">[54,</ref><ref type="bibr" target="#b71">71]</ref>. Such visual interfaces can also support focusing on specific formula parts by collapsing selected subformulas <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b50">49]</ref>. Finally, more experimental interfaces are starting to provide handwriting and speech recognition capabilities <ref type="bibr" target="#b29">[29,</ref><ref type="bibr" target="#b55">54,</ref><ref type="bibr" target="#b85">85]</ref>.</p><p>System Editing System models are usually edited in a hardware description language like VERILOG <ref type="bibr" target="#b44">[43]</ref> within an integrated development environment. As an alternative to these textual representations, the systems can also be modeled through finite state machines <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b62">61,</ref><ref type="bibr" target="#b70">70]</ref>. These models can then be visually edited, e.g., by adding, relocating and removing nodes or edges from the node-link diagram <ref type="bibr" target="#b33">[33,</ref><ref type="bibr" target="#b73">73]</ref>. Lightweight versions of such editing are already provided within commercial tools for general diagram editing, such as Stateflow <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">HYPERVIS: VISUALIZING MODEL CHECKING RESULTS</head><p>Based on the identified challenges of analyzing model checking results (Sect. 2.3), we iteratively developed HYPERVIS. In this section, we will first recap the main components of the considered counterexamples (Sect. 4.1) and outline our set design goals (Sect. 4.2). Then, as the main part, we will present our visualization design (Sect. 4.3), including its interaction concepts. This is followed by the description of the considered editing and debugging facilities (Sect. 4.4). Finally, we provide further insights into the design process as well as the actual implementation (Sect. 4.5). The tool is provided online (imld.de/hypervis).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Components of Counterexamples</head><p>Strictly speaking, a counterexample to a hyperproperty is only the set of executions that are returned by the model checking tool. However, for the remainder of this work, we depict a counterexample to comprise the formula and system provided by the analyst as well. Thus, it consists of three main components: the system, the formula, as well as the specific executions. In addition, we introduce explanations as a fourth component, indicating and explicating relevant bits of the violation.</p><p>The system describes the hardware circuit as a transition system with states providing the outputs and transitions implementing state changes based on inputs. Due to the system being a hardware circuit, states are internally represented by latches, i.e., sub-circuits that can preserve information. Together, all available variables, i.e, outputs, inputs, and latches, are the atomic propositions. The formula can be represented as a syntax tree over propositional and temporal operators where leaves are selected atomic propositions on a specified trace (or execution).</p><p>Here, a formula typically describes relations on pairs of executions, i.e., two instances of the system. Each execution is representing values of atomic propositions for every time step. Notably, these executions can be infinite and contain a lasso (or loop), which marks subsequent time steps that are repeated infinitely.</p><p>Through a causal analysis of the counterexample, we are able to identify which atomic propositions in the formula contributed to its overall violation and are, therefore, relevant for the counterexample. For the explanations, we extract textual explications of the most top level subformulas with temporal operators. Depending on the actual top level operator, these subformulas can either be satisfied or violated (e.g., in case of an 'implies' → operator, the premise has to be satisfied while the conclusion is then violated). For an analyst, all mentioned components and elements are relevant for understanding the counterexample in general, reasoning about why it can occur, and identifying possible corrections to either the formula or system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Design Goals</head><p>When starting the design process, we identified multiple design goals that a tool for visually analyzing hyperproperty counterexamples should fulfill. The goals DG1-DG5 describe desired visualization aspects, while DG6-DG7 outline more general tool characteristics. DG1: Build Upon Familiar Presentations. As illustrated in Fig. <ref type="figure">3</ref> and Fig. <ref type="figure" target="#fig_0">4</ref>, analysts often sketch the system or list the executions in a certain way. We aim to foster an intuitive understanding of the views by building upon these typical representations, but extending them with more effective encoding strategies.</p><p>DG2: Support Recognizing Trace Relations. In many cases, a specific combination of absent or present atomic propositions must be identified and compared across the executions. We aim to simplify such pattern recognition within the executions.</p><p>DG3: Relating Components. A major challenge for analysts is relating the different components to each other, e.g., mapping back atomic propositions in the execution to corresponding subformulas or to taken transitions in the system. Thus, the tool should support the analyst in mentally linking elements across views.</p><p>DG4: Provide Guidance for Identifying Violations. Counterexamples can quickly become overwhelming, with a multitude of variables or time steps being involved. Our goal is to support analysts in identifying the relevant elements that led to the violation and, thus, in understanding the model checking result.</p><p>DG5: Enable Editing of Formula and System. Due to their complexity, formulas and systems can easily contain small but hard to recognize bugs leading to a counterexample. For this, the tool should provide integrated functionalities for fixing such issues. DG6: Provide a Holistic Interface. Model checking of hyperproperties is a multi-step process; from providing the input, to analyzing the counterexample, to iterating the specification or system. Thus, a tool should consolidate these steps within one interface.</p><p>DG7: Avoid Setup Efforts. The tools used for model checking are often command-line based and implemented with different dependencies. We aim at avoiding the setup effort for the analyst and providing a unifying ready-to-use tool.</p><p>In the following, we detail how we addressed these design goals within the visualization design of HYPERVIS' views.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Visualization Design</head><p>Guided by the described design goals, we developed HYPERVIS and its general interface including five visualization views. The focus in this section lies on how we visualize the counterexample components specifically as well as efficiently guide the analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Visualizing a Counterexample: Provided Views</head><p>For HYPERVIS, we developed five different views; the formula view, graph view, trace view, timeline view, and explanation view. In the following, their design is detailed. Formula View The HYPERLTL formula provided by the user is transformed into a representation using the actual logical and temporal operator symbols (DG1). Internally, the formula is in a hierarchical structure; this structure is indicated with bars below the formula string. The bars allow emphasizing the different subformula levels, with the uppermost bars representing the atomic propositions and the lowermost bar (marked in blue) the entire formula. Hovering over the bars emphasizes the corresponding subformula (Fig. <ref type="figure" target="#fig_1">5a</ref>), simplifying recognizing the formula structure and corresponding bracket. The stated atomic propositions always relate to one specific trace. To simplify distinguishing which proposition corresponds to which trace, we introduced fixed colors for the traces and added labels to the proposition, i.e., either @π or @π . These trace colors are re-used in all views.</p><p>Graph View The system is visualized as a Moore transition system, i.e., a graph with the states as nodes and transitions as edges (Fig. <ref type="figure" target="#fig_1">5b</ref>). Following their convention, the set of present outputs on a given state is printed into the node label, e.g., {emergency} in state S3. If an output is absent, its value is false. Further, we show symbolic transitions, i.e., edges can be labeled with formulas expressing specific input combinations, such as logical conjunction (e.g., up ∧ ¬bound). The graph can be freely zoomed and panned.</p><p>Trace View As previously described, analysts typically transform the textual output of the model checker into a table-like format, thus creating an overview of all atomic propositions and their values on the traces across time steps. Our trace view builds upon that (DG1) and prints the atomic propositions per trace as columns and the time steps as rows (Fig. <ref type="figure" target="#fig_1">5c</ref>). The values themselves are binary, thus are either true when a variable was present or false when it was absent. We propose to replace the common notation of the values as 1 and 0 with a graphical representation: a filled rectangle represents present variables and a hollow rectangle absent variables. This representation simplifies recognizing patterns of occurring values in and across traces (DG2).</p><p>Small icons before the proposition name indicate its type, i.e., either output, input, or latch. The propositions are sorted first by type and then alphabetically. Controls in the view head allow for hiding an proposition type. In addition to the atomic propositions, we also show a numbered state indicator (e.g., S3) in the first column of each trace. These state indicators are abstractions of the latches, which together encode the current state. The time steps are labeled as T0, T1, and so forth. Further, if a lasso (see Sect. 4.1) is present in the counterexample, it is indicated with gray borders at the respective time steps. Timeline View So far, the view design was influenced by common ways to write down the counterexample. However, the timeline view is a new visualization that aims to provide a more compact representation of the executions (Fig. <ref type="figure" target="#fig_1">5d</ref>). Similarly to the trace view, it shows the specific values of the atomic propositions, but with the time mapped horizontally. By omitting the atomic proposition labels, the rectangles indicating present or absent variables are placed next to each other. This allows for a further improved pattern recognition, either across traces or across time steps (DG2). For example, considering a set of four variables, it is easily possible to observe differences or similarities across instances: and differ only in the second variable. The label of the represented proposition can be accessed by hovering over the rectangle; their order is equal to the order in the trace view.</p><p>In an earlier iteration, the view was intended to emphasize diverging behaviors of the executions for one variable, e.g., showing when they were in different states or read different values for an atomic proposition. We opted to develop the view further into its more compact format while also showing the atomic propositions. To still indicate diverging executions, the state indicator (e.g., S0) is colored black if both executions are in the same state and colored according to the trace color when they diverge (e.g., S2 and S1). Finally, in the case of a present lasso, an indicator at the time steps is provided.</p><p>Explanation View The explanation view shows a verbal summary of the counterexample alongside statements on the most top-level subformulas relevant to the found violation (Fig. <ref type="figure" target="#fig_1">5e</ref>). The basis of this is an automated causal analysis of the counterexample, which extracts a minimal set of subformulas that contributed to the overall violation at one or more time steps. With this information, we can relate the subformulas to specific values at specific time steps and derive a textual statement. The statements' structure is always the same: first, the temporal operator of the subformula is stated, followed by a list of involved atomic propositions. For each proposition, it is indicated at which time step it became relevant, how the values relate to each other across traces and whether the values were always true or false. This information is provided as inline or word-sized representations <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b35">35]</ref>, seamlessly integrating into the textual description. Further, each statement is assigned a unique color, allowing for indicating it in other views (DG3). For example, as visible in Fig. <ref type="figure" target="#fig_1">5d</ref>, the timeline view shows bars at the bottom, hinting at which time steps a subformula was relevant. A complete statement is shown in Fig. <ref type="figure" target="#fig_1">5e</ref>. For bound the value was true ( ) and equivalent on both traces (π=π ) at T2, while emergency was unequal on both traces (π =π ) at T3. These statements can help analysts to quickly grasp the essential aspects of the violation and locate the time steps and atomic propositions of interest. Currently, the provided explanations for the atomic propositions can indicate found equivalences of traces across n time steps as well as consistent values across time steps (DG2). However, as HYPERLTL formulas can describe arbitrary relations of atomic propositions across traces, not all relevant patterns are currently recognized and expressed. Similarly, we only provide statements for subformulas being present at the top two levels; thus, more nested formulas might not be verbalized adequately.</p><p>Interface Arrangement By default, the views are arranged in a simple 2-column grid, with formula, explanation, and trace view being placed in a wider column on the left, and timeline and graph view on the right (Fig. <ref type="figure">1</ref>). However, as the space requirement of the views can heavily vary between counterexamples, the interface also supports arranging the views differently. For example, if a formula is becoming rather long, it is placed in full width on top. Similarly, if counterexamples involve many time steps, trace view and timeline view are devoted more space. In general, the goal is to provide all views within the initial viewport and avoid scrolling as much as possible. Finally, analysts can also manually collapse or maximize views.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Analyzing a Counterexample: Interactive Guidance</head><p>For analyzing the counterexample, we provide further interactive mechanisms fostering the comprehension of the counterexample's specifics. These mechanisms include an explicit highlighting of relevant elements, linked highlighting across views, as well as a debugger-like stepping through the counterexample. These dynamic functionalities of HYPERVIS are also shown and explained in the accompanying video.</p><p>Highlighting Relevant Elements As stated in the context of the explanation view, we are identifying the subformulas that contributed to the overall violation at specific time steps. This knowledge is not only used for the explanation statements but also to indicate the relevant elements across all views (DG4). To activate this indication, the explanation view features a 'Highlight' toggle button (Fig. <ref type="figure" target="#fig_1">5e</ref>). Upon activation, as in Fig. <ref type="figure" target="#fig_2">6a</ref> and Fig. <ref type="figure">1</ref>, the non-relevant subformulas in the formula view are grayed out, as are the non-taken states and transitions of the executions in the graph view. Similarly, non-relevant values in the trace view and timeline view are shown less opaque while relevant values are emphasized. Further, a filter button next to the highlight button allows for removing non-relevant elements from the views.</p><p>We also relate the relevant elements to the provided statements in the explanation view (DG3). Specifically, we identify which atomic proposition is part of which statement, i.e., in which subformula it occurs. Further, we propose to use the statements' assigned color for highlighting: the rectangle representing binary values are colored accordingly, as are the bars indicating the atomic proposition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Linked Highlighting</head><p>In general, all views react to hovering over displayed elements, e.g., subformulas, states, or time steps. Hovering also results in a linked highlighting across views <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b72">72]</ref>, i.e., the corresponding elements in other views are also highlighted (DG3). Only in a few cases, elements are shown in exactly the same way in other views. For example, subformulas in the formula view may occur again the explanation view. As in most cases elements appear slightly differently, e.g, formula view and timeline view show atomic propositions differently, the correspondence is not immediately apparent and is then indicated through the linked highlighting (DG3).</p><p>Specifically, hovering over a trace indicator (i.e., π or π ) in either view highlights the execution in the graph view, i.e., all taken transitions and states are colored in the trace color. Vice versa, hovering a state or transition highlights instances in the executions where this state and the inputs of the transition were present. Hovering over a time step highlights the corresponding row or column in trace and timeline view, the relevant subformulas at this time step, and the executions' current states and transitions taken next. The atomic propositions in formula and explanation view allow for highlighting the corresponding labels in the trace view and, if applicable, the specific values that were relevant at certain time steps in both trace and timeline view (DG4).</p><p>Stepping through a Counterexample It is important to understand the sequence of events that lead to the violation. Therefore, we enable stepping through the counterexample in a debugger-like fashion (Fig. <ref type="figure" target="#fig_2">6b</ref>). Through control buttons provided in the interface header, the analyst can move forward and backward. For the current step, a stronger visual highlight is used (Fig. <ref type="figure" target="#fig_2">6b</ref>), with the time step colored in blue and relevant subformulas further emphasized. For the graph view, we color the states and transitions in the respective trace colors; if they share the same state or transition, blue is used. The same effect can also be achieved by selecting a time step in the trace view or timeline view. Further, when stepping through, the highlight is permanent and can be used in combination with the highlighting of relevant elements as well as the linked highlighting triggered on hover.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Tool Functionalities &amp; Editing Facilities</head><p>Following DG6, we provide one unified interface that allows for performing model checking, analyzing the counterexamples, and iterating specification and system within it. In the following, we describe the tool functionalities of HYPERVIS as well as its editing facilities.</p><p>Tool Functionalities We extended HYPERVIS with tool functionalities allowing for using it in a productive way for many model checking projects simultaneously. Among others, this includes functionalities for (re-)loading projects, re-running model checks, or managing different versions of them. The project manager provides access to all model checking projects, i.e., loaded systems and specifications checked, in a sidebar widget. The different projects can have multiple versions (here, marked with the latest modification timestamp), helping analysts to quickly jump to older iterations. For each version, multiple checks can be created, i.e., multiple hyperproperties that a system should fulfill. The versions of the projects can be manually created, but are also automatically introduced when editing a formula or system. In case of faulty edits that result in an error thrown by the model checker, a Fig. <ref type="figure">7</ref>. Within the formula view, the formula editor can be toggled, providing a WYSIWYG inline L A T E X editor.</p><p>rollback to the previous version is offered. Each version of the project can be freely tagged and each checked hyperproperty can be named.</p><p>Editing of the Specification HYPERVIS provides a formula editor that uses L A T E X markup to edit the hyperproperty specifications (Fig. <ref type="figure">7</ref>). Specifically, the analyst can directly type L A T E X markup, which is automatically rendered inline. By using L A T E X, copying and pasting formulas edited in common tools outside of HYPERVIS becomes directly possible. Similarly, formulas could also be sketched by hand via pen input. However, this is currently only supported by external tools like MYSCRIPT <ref type="bibr" target="#b65">[64]</ref>. Our editor also features an extended keyboard, providing access to the common logical and temporal operators. As mentioned before, HYPERVIS supports the editing of multiple separate formulas for a single system, potentially allowing to split up complex hyperproperties or to test very different specifications.</p><p>Editing of the System For editing the system model, changes can be made either through visual editing or by changing the original text input. The visual editing could involve providing a special mode allowing for, e.g., drawing edges, rerouting existing ones, or creating nodes. At the same time, some users might still prefer to directly textually edit the originally provided VERILOG definition. However, as providing such editing supporting is not straightforward, HYPERVIS currently only features a mock-up editing of the system. Specifically, the challenge comes with the representation of the system as a hardware circuit in the AIGER format <ref type="bibr" target="#b9">[10]</ref>. These AIGER files are automatically generated from definitions implemented in VERILOG and are hardly readable by humans. For displaying the graph view, a DOT <ref type="bibr" target="#b53">[52]</ref> representation is generated from AIGER, however, the transformation comes with information loss and is therefore not invertible. To sidestep this, an intermediate format for automatons could be used, which can be transformed from or to AIGER without information loss and also more easily changed in programmatic way. For now, we allow the editing of the DOT notation, which updates the shown graph view to illustrate the intended functionality but cannot trigger an updated model check.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Design Process &amp; Implementation</head><p>In order to develop HYPERVIS, we followed an iterative design process within an interdisciplinary team. This team consists of formal methods researchers on the one hand and HCI as well as visualization researchers on the other hand. While not end-users, the first group are domain experts for model checking of hyperproperties, knowing the challenges and main goals. In the following, we detail the design phases as well as the current implementation of HYPERVIS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.1">Design Phases</head><p>The first phase involved introducing the visualization researchers to the domain of model checking and hyperproperties in order to establish a common understanding of the current processes and present challenges. Afterward, we jointly developed a first click prototype illustrating a possible interface visualizing the found counterexamples. Then, the first implementations of the visualizations were realized in a web prototype alongside a parser consuming the output file of the model checking generated by MCHYPER. Within this process, it became apparent that plainly representing the counterexample will be insufficient and that it will be essential to become able to extract the relevant bits of the violation and presenting it to the analyst. At this stage, a first version of the causal analysis algorithm was developed alongside early highlighting mechanisms. This enabled testing various case studies, and thus incorporating further improvements into the visualization design.</p><p>On the tool side, we started to develop approaches for editing the formula and system as well as the general structure of the tool interface, e.g., providing access to the project list, their versions, or loading new ones. With these tool aspects implemented, we ran a first feedback session with 3 participants and collected comments on the interface. This feedback allowed us to iterate, e.g., the menu structures, button icons and labels, or features of the inline formula editor. The result of the overall design process is the current version of HYPERVIS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.2">Implementation as Web Tool</head><p>HYPERVIS is implemented as a web-based tool, featuring a NODE.JSbased [67] backend and JavaScript-based frontend. In the frontend, the views are implemented with plain HTML or SVG. Except for the explanation view, the rendering of all views is controlled by D3.JS <ref type="bibr" target="#b12">[13]</ref>.</p><p>To support the linked highlighting, custom events were introduced that are sent and consumed by the views. For the formula editing, we incorporate the MATHQUILL library <ref type="bibr" target="#b76">[76]</ref>. For translating the formula and producing the polish notation that MCHYPER requires, we use SPOT. Graph editing is not fully functionally implemented yet. To illustrate the general possibility, we provide an embedded CODEMIRROR <ref type="bibr" target="#b42">[41]</ref> editor to change the DOT representation of the system.</p><p>The backend is responsible for managing the model checking pipeline. Based on the analyst's inputs, it calls the MCHYPER Python tool before handing over the found counterexample to our own Python script extracting the relevant subformulas. It computes a minimal set of variable and time step pairs, which cause the violation. In addition, this script also writes all required information into a JSON file. In parallel, a separate script is used to generate the DOT representation based on the AIGER file. As for larger systems this generation might not terminate in a reasonable time, for some counterexamples the graph is not available. After parsing these generated outputs in the NODE.JS server, the data is provided to the frontend. For each project, the results are stored in a folder structure, allowing to quickly reload the counterexamples later on and implement the versioning concept. The communication between the frontend and backend is based on HTTP requests.</p><p>The HYPERVIS tool is hosted online but can also be locally run, either as a Docker container or by fully installing it and all its dependencies. In general, we envision the usage as an online tool as the primary usage style, which then also allows for avoiding setup efforts (DG7).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">VALIDATING HYPERVIS</head><p>In this section, we validate HYPERVIS by discussing multiple case studies and reporting on user feedback sessions. Both illustrate that HY-PERVIS indeed advances the state-of-the-art significantly by helping to quickly identify the violations in counterexamples of hyperproperties.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Case Studies</head><p>Here, we detail two selected case studies: In the first one, we visualize the results of model checking information-flow properties on an open source implementation of the I2C bus protocol. In the second case study, we take a look at one of the core building blocks of such bus implementations: mutual exclusion protocols.</p><p>CS1: I2C Bus Protocol The I2C bus protocol coordinates the communication between multiple components in a master-slave hierarchy and is widely used in practice. As it has no security features, this has led to exploits, for example, in smart cards of German public health insurance companies <ref type="bibr" target="#b83">[83]</ref>. The implementation used in this case study is taken from OpenCores <ref type="bibr" target="#b67">[66]</ref>. Its AIGER circuit consists of 254 latches plus 86 input and output variables. Typically, this protocol consists of a master, one controller, and several slaves, where the master communicates to the slaves while the controller ensures properties like mutual exclusion. Suppose information has to be sent over the bus, the master addresses the slaves with a designated address bit. In this case study, we visualized the result of model checking the following information-flow policy: The information which slave the master is addressing should not be identifiable from the bus' output. This property is violated, but the counterexample is highly complex (e.g., it is not possible to generate a state graph). Still, the visualizations provided by HYPERVIS help to understand the violation. The analyst benefits especially from the highlighting and filtering functionalities. The trace view of HYPERVIS is shown in Fig. <ref type="figure" target="#fig_3">8</ref>. Fig. <ref type="figure" target="#fig_3">8a</ref> shows parts of the interface with highlighting activated. While this already helps to see relevant elements, it is still nearly impossible to grasp the violation as large parts are outside of the browser's viewport. By enabling the filtering and hiding variable types currently not of interest, see Fig. <ref type="figure" target="#fig_3">8b</ref>, HYPERVIS can yield the proposition and the time step responsible for the violation and support the user in limiting the information to a reasonable amount. Then, we can see that one output diverged at time step T6, resulting in a counterexample.</p><p>CS2: Symmetric Mutual Exclusion Arbiters form the basic building blocks in many protocols, such as the AMBA protocol or the above-mentioned I2C protocol. Ensuring that no process or slave has an unfair advantage is highly desirable, also referred to as symmetry in protocols. In this case study, we visualize the results of checking if an arbiter implementation satisfies symmetry (cf. the arbiter system from Sect. 2.2). Specifically, we check whether for two executions with symmetrically arriving requests the grants are also given symmetrically.</p><p>This case study features the interplay between the views implemented in HYPERVIS. The explanation view directly tells the analyst why the overall formula is violated. When the highlighting button is pressed, HYPERVIS pinpoints the atomic propositions, time steps, and subformulas that caused the violation in the trace view, the timeline view, and the formula view (Fig. <ref type="figure">1</ref>). In the formula view, for example, the subformula grant 0@π ↔ grant 1@π is highlighted in the conclusion because only this subformula is needed to understand why the symmetry specification is violated: In the counterexample, grant 0@π holds at time step 1 while grant 1@π does not hold at that time step. Highlighting relevant subformulas decreases the number of subformulas that the analyst needs to consider when trying to understand the counterexample. This illustrates that HYPERVIS fulfills DG4, providing guidance for understanding the formula violation.</p><p>After the violation is identified, the bug in the system needs to be found. Since DG3 is supported through the linked highlighting of elements and the highlight button, the graph view is restricted to the relevant states for the counterexample executions. This feature again allows the analyst to focus their attention on the most relevant aspects. By using HYPERVIS to explicitly step through the time steps, one observes that both executions represent the same system trace, thereby violating the symmetry in the grants. The solution to achieve symmetry is: Adding a new input to the system that allows giving grants symmetrically when both processes send requests simultaneously <ref type="bibr" target="#b60">[59]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">User Feedback Sessions</head><p>We conducted feedback sessions with domain users to better assess the merit of our tool for them. In the following, we first describe the study design before reporting on the received feedback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Study Design</head><p>Participants We recruited six participants (age M=27.5 yrs, SD=3.33 yrs; 1 female, 5 male) that have significant knowledge on model checking and hyperproperties. On average, participants rated their theoretical expertise on model checking with 4.5 out 5 and on hyperproperties with 4.0.</p><p>Apparatus The sessions were conducted remotely through a video call with screen sharing. We hosted the latest version of the tool online and provided participants with the link. Two investigators moderated the videotaped sessions, and a third one was taking notes. Participants were asked to follow a think-aloud protocol, i.e., verbally phrasing their thoughts and actions while interacting with the tool.</p><p>Procedure After a short welcome and general introduction, participants were asked to provide consent for the video recording. Then, we outlined the procedure and think-aloud protocol before starting the demonstration of HYPERVIS via screen sharing, introducing all views and their functionalities. Afterward, participants were asked to open the tool, start screen sharing from their end, and analyze three provided examples (detailed below). For each example, we provided a short introduction on the specification and system and then asked them to reason about the counterexample. Further, for the first example, participants had to propose a fix for a corrupt system, while in the second, they had to edit the formula to a working version. For the last example, they had to identify the "needle in the haystack". After working on each example, we asked them to reflect on the interface and which views they found helpful in the specific context. Lastly, we concluded the session with an open discussion and provided them with a link to our questionnaire. Sessions lasted one hour on average.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Provided Examples</head><p>For the demonstration of HYPERVIS, we used an arbiter example similar to the one described in CS2. Further, we prepared three examples for the hands-on part: The first two consider a straightforward drone system that is supposed to increase the drone's height when it reads an up input, and to go into an emergency state when a bound input is read. In the first version, the specification stated that equal bound inputs must result in equal emergency outputs in the next time step; however, the specification was violated due to an incorrect transition in the system. Participants had to identify this issue and verbally provide a fix. The counterexample is visible in Fig. <ref type="figure" target="#fig_1">5</ref> and Fig. <ref type="figure" target="#fig_2">6b</ref>. In the second version, the fixed system was used, but now with a different but incorrect formula. Participants had to pinpoint this issue and, this time, edit the formula in HYPERVIS. The counterexample is shown in Fig. <ref type="figure" target="#fig_2">6a</ref>. Lastly, the third example was a larger counterexample involving 29 time steps and 50 atomic propositions, where a mutual exclusion specification was violated. Due to the system's size, the graph view was not available. We asked participants to describe the violation in their own words and did not inquire any fixes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Results</head><p>Overall, all participants (P1-P6) were able to work with HYPERVIS without larger issues and considered the tool to be useful for experts and novices. Our two main insights are: 1) Our proposed interface allows to quickly identify the violations in counterexamples and provides valuable guidance for understanding the underlying issue. 2) Personal preferences and the different analysis workflows influence how the different views were used by the participants.</p><p>All participants were able to correctly identify the violations and issues in the provided examples within the given time. We could observe that the trace view was used as a central component within the analysis process, providing detailed information on the executions, while the linked highlighting allowed for seeing the corresponding information in the other views. For the formula view, all participants (P1-P6) explicitly stated that they are intrigued by the hierarchy indicators below the formula. Similarly, the graph view proved to be of great value, particularly when the traces were highlighted while stepping through the counterexample. The comments and ratings also showed that the used colors for traces and statements were appreciated for relating the different components. Finally, the explanation highlighting was considered "extremely important" (P3) for understanding the counterexample and identifying the relevant pieces for the violation (all Ps).</p><p>At the same time, not all views were used to the same extent. For example, while most participants (P2-P6) found the textual explanations "extremely good" (P6) and used it as starting point for understanding the violation, participant P1 preferred working with the other views. Similarly, while participants P2+P5 only briefly used the stepping through mechanisms, the others found it very helpful and used it extensively. The timeline view was intensively utilized by participants P2 and P4-P6, particularly for comparing traces and recognizing specific patterns. At the same time, P1 used the trace view more extensively, while P3 used the timeline view only for the larger example.</p><p>While working with HYPERVIS, participants also provided multiple suggestions for various improvements. One commonly stated shortcoming was the missing graph view for more extensive examples. Further, P5+6 would prefer some indication of the explanation statements in the graph view as well. As participant P4 intensively used the stepping through functionalities, he proposed to improve the coloring of nodes and edges in the graph view when both executions are overlapping. Participants P4+6 suggested activating the explanation highlight on default. Some extended filter options were also proposed, e.g., P5 suggested the filtering of single atomic propositions, while P2 proposed to allow for hiding time steps. For the formula editing, multiple possible improvements were stated, e.g., better highlighting of corresponding brackets (P5+P6), a semantic check (P4+P5), or separating the L A T E X input and rendered formula (P2). Still, the formula editor was appreciated, with P4 stating that it is "something that we needed for a long time".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">DISCUSSION</head><p>The positive feedback that we received emphasizes that there is a clear need for visualization and analysis interfaces within the formal methods domain. We found that the most important aspect when working on visualization solutions within this space is to have access to the specific knowledge that is involved in the rather abstract and formalized concepts. From a visualization perspective, the incorporated encoding strategies or interactive mechanisms are mostly already known. However, when applied and combined in the right way, they become extremely helpful. Importantly, as it was also commented in our study, such a solution is not only an improvement for domain experts, but can also support novices in understanding the underlying principles.</p><p>Consequently, our work is in line with other efforts of providing explications and intuition for abstract or black-box-like processes <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b82">82,</ref><ref type="bibr" target="#b84">84]</ref>. However, in this area, work around explainable AI <ref type="bibr" target="#b41">[40]</ref> has received most attention in recent years, while formal methods themselves are only rarely considered. This is particularly interesting for two reasons: (1) formal methods, and especially model checking, are largely built around mathematical and logical representations that are consumed in command-line tools, while visual representations remain underestimated. Therefore, there is a big potential for making the concepts more accessible by using visualizations. Further, the mathematical nature of it requires a rigorous treatment of the visualized elements, which poses special challenges to the visualization design.</p><p>(2) Formal methods also play an important role for AI in general and when trying to provide explanations to computations of an AI agent. For example, Marabou <ref type="bibr" target="#b48">[47]</ref> is a recently introduced framework for verifying and providing counterexamples of properties of deep neural networks (e.g., robustness, which is in general a hyperproperty). However, as it is command-line based and does not provide an explanation on the counterexample, users have to cope with the same problems described in this work. The here presented visualization approaches might be directly applicable to many tools in the area of formal methods.</p><p>In the light of these considerations, HYPERVIS can be seen as a first foundation for explaining hyperproperties and counterexamples. As the immediate next steps, the suggested improvements from the user feedback sessions can be incorporated. For the editing facilities, this includes the general possibility for modifying the system plus a visual editing mode. This could also allow for providing a stand-alone editing mode with improved live previews of formula and system. For the analysis of counterexamples themselves, an interesting addition would be support for adding annotations or storing derived insights <ref type="bibr" target="#b63">[62]</ref>. In this context, it can also be considered to automatically track the analysis history or provenance <ref type="bibr" target="#b88">[88]</ref> and allow analysts to review it.</p><p>Currently, HYPERVIS is focused on visualizing a specific counterexample to a hyperproperty. However, on the one hand, the need for visually representing hyperproperties can also occur independently from violated specifications, i.e., for correctly implemented systems and specified properties. While it is always possible to generate a so-called witness for a proved hyperproperty by negating the specification, the found witness is one of many possible ones and might not adequately represent the underlying hyperproperty. On the other hand, the challenging but promising interactive synthesis problem potentially benefits from the presented visualizations. Synthesis constructs per definition a correct implementation directly from the provided specification, making the model checking process superfluous. Here, it would be beneficial to visualize the iterative synthesis process (i.e., how the system was derived) as well as the proposed implementation itself. The visualization and interaction designs presented here can guide the development of such novel hyperproperty visualization tools.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSION</head><p>In this paper, we presented concepts for visually analyzing counterexamples to hyperproperties as well as for editing the provided formula and system. As demonstrated through case studies and attested by user feedback, our HYPERVIS tool notably improves the analysis and understanding of the counterexamples. At the core of this is the targeted usage of encoding strategies and interactive mechanisms that pointedly represent the different aspects and help to guide the analyst to the relevant information in the example. In particular, the right combination of allegedly simple measures, such as color encoding, linked highlighting, and relevance indication, can allow experts to quickly recognize the violation cause and also novices to understand the complex relations in the first place. Notably, the key to such solutions is the understanding of the domain, which in this case enabled us to embed the causal analysis of the counterexample and to automatically derive textual explanations and corresponding highlights. The provided editing facilities support fixing the identified issues, turning HYPERVIS into a valuable tool for analyzing hyperproperties. With this, we contribute a foundation for explaining and visualizing hyperproperties in general and hope to inspire further visualization solutions for more formal methods concepts.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. (a) Instance of a counterexample produced by MCHYPER (excerpt), here for the system and formula described in Fig. 3. (b) Handwritten notation of the provided output in a table-like format. The marked outputs in the second row do not fulfil the requirements of the formula.</figDesc><graphic coords="3,59.96,69.61,101.25,62.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Views of HYPERVIS: (a) formula view, here with hover of a subformula; (b) graph view showing the system as a Moore transition system, here zoomed in; (c) trace view providing for both executions π and π the values of all atomic propositions across all time steps; (d) timeline view showing the executions in a compact format; and (e) explanation view with textual statements on the counterexample, here with one relevant subformula.</figDesc><graphic coords="5,67.72,110.19,167.03,75.26" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. The interactive analysis of counterexamples is at the core of HYPERVIS: (a) activated explanation highlighting points analysts to relevant elements; (b) stepping through time steps fosters the understanding of the executions' behavior (controlled by the buttons in the top right corner).</figDesc><graphic coords="6,329.06,65.76,220.50,127.13" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. (a) Excerpt of the interface for the I2C case study with activated explanation highlighting, where the trace view can only show a fraction of the 680 columns (see scroll bar); (b) with the explanation filtering activated as well as latches and inputs disabled, the trace view can be limited to the one relevant output variable. In both views, the explanation view has been collapsed; the full view is provided in the supplement.</figDesc><graphic coords="8,429.93,66.39,119.38,147.54" type="bitmap" /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank Weizhou Luo for his valuable support during the overall project duration. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A tool converting finite state machine to vhdl</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Abdel-Hamid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tahar</surname></persName>
		</author>
		<idno type="DOI">10.1109/CCECE.2004.1347584</idno>
	</analytic>
	<monogr>
		<title level="m">Canadian Conference on Electrical and Computer Engineering</title>
				<imprint>
			<date type="published" when="2004">2004. 2004</date>
			<biblScope unit="page" from="1907" to="1910" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Shedding light on distributed system executions</title>
		<author>
			<persName><forename type="first">J</forename><surname>Abrahamson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Brun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
		<idno type="DOI">10.1145/2591062.2591134</idno>
	</analytic>
	<monogr>
		<title level="m">Companion Proc. International Conference on Software Engineering</title>
				<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="598" to="599" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Debugging of dependability models using interactive visualization of counterexamples</title>
		<author>
			<persName><forename type="first">H</forename><surname>Aljazzar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Leue</surname></persName>
		</author>
		<idno type="DOI">10.1109/qest.2008.40</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Quantitative Evaluation of Systems</title>
				<meeting><address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="189" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Angermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Beuschel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Wohlfarth</surname></persName>
		</author>
		<author>
			<persName><surname>Matlab -Simulink -Stateflow</surname></persName>
		</author>
		<idno>doi:10.1515/ 9783110636420</idno>
		<imprint>
			<publisher>De Gruyter Oldenbourg</publisher>
			<biblScope unit="page">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Secure information flow by selfcomposition</title>
		<author>
			<persName><forename type="first">G</forename><surname>Barthe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">R</forename><surname>D'argenio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rezk</surname></persName>
		</author>
		<idno type="DOI">10.1017/s0960129511000193</idno>
	</analytic>
	<monogr>
		<title level="j">Mathematical Structures in Computer Science</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1207" to="1252" />
			<date type="published" when="2011-10">Oct. 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Word-sized graphics for scientific texts</title>
		<author>
			<persName><forename type="first">F</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2017.2674958</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1576" to="1587" />
			<date type="published" when="2017-06">June 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Explaining counterexamples using causality</title>
		<author>
			<persName><forename type="first">I</forename><surname>Beer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ben-David</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Chockler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Trefler</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-02658-411</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="94" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visualizing distributed system executions</title>
		<author>
			<persName><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Brun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
		<idno>doi: 10.1145/ 3375633</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="9" />
			<date type="published" when="2020-04">Apr. 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Institute for Formal Models and Verification</title>
		<author>
			<persName><forename type="first">A</forename><surname>Biere</surname></persName>
		</author>
		<idno>07/1</idno>
	</analytic>
	<monogr>
		<title level="m">The AIGER And-Inverter Graph (AIG) format version</title>
				<meeting><address><addrLine>Linz, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">20071012. 2007</date>
		</imprint>
		<respStmt>
			<orgName>Johannes Kepler University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Institute for Formal Models and Verification</title>
		<author>
			<persName><forename type="first">A</forename><surname>Biere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Heljanko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Wieringa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<pubPlace>Linz, Austria</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Johannes Kepler University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
	<note>Aiger 1.9 and beyond</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Paths to property violation: A structural approach for analyzing counter-examples</title>
		<author>
			<persName><forename type="first">T</forename><surname>Bochot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Virelizier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Waeselynck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Wiels</surname></persName>
		</author>
		<idno type="DOI">10.1109/hase.2010.15</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on High Assurance Systems Engineering</title>
				<meeting><address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="74" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Using task analytic models to visualize model checker counterexamples</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Bolton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Bass</surname></persName>
		</author>
		<idno type="DOI">10.1109/icsmc.2010.5641711</idno>
	</analytic>
	<monogr>
		<title level="m">Intl. Conference on Systems, Man and Cybernetics</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="2069" to="2074" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">D 3 : Data-driven documents</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Ogievetsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2011.185</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2301" to="2309" />
			<date type="published" when="2011-12">Dec. 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">ABC: An academic industrial-strength verification tool</title>
		<author>
			<persName><forename type="first">R</forename><surname>Brayton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mishchenko</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-14295-65</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="24" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interactive data visualization using focusing and linking</title>
		<author>
			<persName><forename type="first">A</forename><surname>Buja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Michalak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
		<idno type="DOI">10.1109/visual.1991.175794</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization &apos;91</title>
				<meeting>Visualization &apos;91<address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="156" to="163" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">User-friendly model checking integration in model-based development</title>
		<author>
			<persName><forename type="first">A</forename><surname>Campetelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Hölzl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Neubeck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computer Applications in Industry and Engineering</title>
				<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Carlisle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">D F</forename><surname>Ion</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Miner</surname></persName>
		</author>
		<title level="m">Mathematical Markup Language (MathML) Version 3.0 2nd Edition. W3C</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Towards meaningful visual abstraction of mathematical notation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Cervone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Krautzberger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Sorge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CICM</title>
				<meeting>CICM</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Modular verification of software components in c</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Veith</surname></persName>
		</author>
		<idno type="DOI">10.1109/tse.2004.22</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="388" to="402" />
			<date type="published" when="2004-06">June 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Explaining abstract counterexamples</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Strichman</surname></persName>
		</author>
		<idno type="DOI">10.1145/1029894.1029908</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. Intl. Symposium on Foundations of Software Engineering</title>
				<meeting>Intl. Symposium on Foundations of Software Engineering<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="73" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Composition and configuration patterns in multiple-view visualizations</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">M</forename><surname>Al-Maneea</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Chang</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2020.3030338</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1514" to="1524" />
			<date type="published" when="2021-02">Feb. 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A tool for checking ANSI-c programs</title>
		<author>
			<persName><forename type="first">E</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lerda</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-24730-215</idno>
	</analytic>
	<monogr>
		<title level="m">Tools and Algorithms for the Construction and Analysis of Systems</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="168" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Model Checking</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Grumberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Peled</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Temporal logics for hyperproperties</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Koleini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Micinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">N</forename><surname>Rabe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sánchez</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-54792-815</idno>
	</analytic>
	<monogr>
		<title level="m">Lecture Notes in Computer Science</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="265" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The hierarchy of hyperlogics</title>
		<author>
			<persName><forename type="first">N</forename><surname>Coenen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hofmann</surname></persName>
		</author>
		<idno type="DOI">10.1109/lics.2019.8785713</idno>
	</analytic>
	<monogr>
		<title level="m">Annual ACM/IEEE Symposium on Logic in Computer Science</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019-06">June 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Verifying hyperliveness</title>
		<author>
			<persName><forename type="first">N</forename><surname>Coenen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sánchez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Tentrup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intl. Conference on Computer Aided Verification</title>
				<imprint>
			<biblScope unit="page" from="121" to="139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title/>
		<author>
			<persName><surname>Springer</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-25540-47</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Model checking boot code from AWS data centers</title>
		<author>
			<persName><forename type="first">B</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Khazem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tasiran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tautschnig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Tuttle</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-96142-228</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computer Aided Verification</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="467" to="486" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">DataSite: Proactive visual data exploration with computation of insight-based recommendations. Information Visualization</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Badam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Yalc ¸in</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Elmqvist</surname></persName>
		</author>
		<idno>doi: 10. 1177/1473871618806555</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="251" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Deep neural networks for recognizing online handwritten mathematical symbols</title>
		<author>
			<persName><forename type="first">H</forename><surname>Dai Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nakagawa</surname></persName>
		</author>
		<idno type="DOI">10.1109/ACPR.2015.7486478</idno>
	</analytic>
	<monogr>
		<title level="m">IAPR Asian Conference on Pattern Recognition</title>
				<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="121" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Model checking quantitative hyperproperties</title>
		<author>
			<persName><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Torfah</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-96145-38</idno>
	</analytic>
	<monogr>
		<title level="m">Intl. Conference on Computer Aided Verification</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="144" to="163" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Algorithms for model checking HyperLTL and HyperCTL *</title>
		<author>
			<persName><forename type="first">B</forename><surname>Finkbeiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">N</forename><surname>Rabe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sánchez</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-21690-43</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="30" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Towards designing a tool for understanding proofs in ontologies through combined node-link diagrams</title>
		<author>
			<persName><forename type="first">T</forename><surname>Flemisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Langner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Alrabbaa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dachselt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Visualization and Interaction for Ontologies and Linked Data</title>
				<imprint>
			<date type="published" when="2020-11">Nov. 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Visualization and Interaction Techniques for Node-Link Diagram Editing and Exploration</title>
		<author>
			<persName><forename type="first">M</forename><surname>Frisch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">6 2012</date>
			<pubPlace>München</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Otto-von-Guericke-Universität Magdeburg</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Interactive visualization of saturation attempts in vampire</title>
		<author>
			<persName><forename type="first">B</forename><surname>Gleiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kovács</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Schnedlitz</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-34968-428</idno>
	</analytic>
	<monogr>
		<title level="m">Lecture Notes in Computer Science</title>
				<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="504" to="513" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">An exploratory study of word-scale graphics in data-rich text documents</title>
		<author>
			<persName><forename type="first">P</forename><surname>Goffin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Boy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Willett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Isenberg</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2016.2618797</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="2275" to="2287" />
			<date type="published" when="2017-10">Oct. 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A visualization framework for the modeling and formal analysis of high assurance systems</title>
		<author>
			<persName><forename type="first">H</forename><surname>Goldsby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">H C</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Konrad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kamdoum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Model Driven Engineering Languages and Systems</title>
				<imprint>
			<biblScope unit="page" from="707" to="721" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title/>
		<idno type="DOI">10.1007/1188024049</idno>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Springer</publisher>
			<pubPlace>Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><surname>Grätzer</surname></persName>
		</author>
		<title level="m">Math into LaTeX. Birkhäuser</title>
				<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note>3rd ed.</note>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Understanding counterexamples with explain</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lerda</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-27813-935</idno>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="453" to="456" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">What went wrong: Explaining counterexamples</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Visser</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-44829-28</idno>
	</analytic>
	<monogr>
		<title level="m">Model Checking Software</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="121" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Explainable artificial intelligence (XAI)</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gunning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Defense Advanced Research Projects Agency (DARPA)</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">M</forename><surname>Haverbeke</surname></persName>
		</author>
		<author>
			<persName><surname>Codemirror</surname></persName>
		</author>
		<ptr target="https://codemirror.net/" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">TeleGam: Combining visualization and verbalization for interpretable machine learning</title>
		<author>
			<persName><forename type="first">F</forename><surname>Hohman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
		</author>
		<idno>doi: 10.1109/ VISUAL.2019.8933695</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization Conference</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="151" to="155" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<idno type="DOI">10.1109/IEEESTD.2006.99495</idno>
		<title level="m">IEEE Computer Society. IEEE Standard for Verilog Hardware Description Language</title>
				<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Fbdverifier: Interactive and visual analysis of counter-example in formal verification of function block diagram</title>
		<author>
			<persName><forename type="first">E</forename><surname>Jee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jeon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Koh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Seong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Research and Practice in Information Technology</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="171" to="188" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">VIS analyzer: A visual assistant for VIS verification and analysis</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cha</surname></persName>
		</author>
		<idno type="DOI">10.1109/isorc.2010.41</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing</title>
				<meeting><address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Replacing testing with formal verification in intel coretm i7 processor execution engine validation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kaivola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ghughal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Telfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Whittemore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pandav</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Slobodová</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">A</forename><surname>Frolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Reeber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Naik</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-02658-432</idno>
	</analytic>
	<monogr>
		<title level="m">Intl. Conference on Computer Aided Verification</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="414" to="429" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">The marabou framework for verification and analysis of deep neural networks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ibeling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Julian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lazarus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Thakoor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeljic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Dill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Kochenderfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">W</forename><surname>Barrett</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-25540-426</idno>
	</analytic>
	<monogr>
		<title level="m">Intl. Conference on Computer Aided Verification</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="443" to="452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Spectre attacks: Exploiting speculative execution</title>
		<author>
			<persName><forename type="first">P</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fogh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hamburg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yarom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
				<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Adaptation of notations in living mathematical documents</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kohlhase</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lange</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Rabe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Kohlhase</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Rabe</surname></persName>
		</author>
		<title level="m">Semantics of openmath and mathml 3. Mathematics in Computer Science</title>
				<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="235" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">A temporal logic of security. CoRR, abs/1306</title>
		<author>
			<persName><forename type="first">M</forename><surname>Koleini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Micinski</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">5678</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">Drawing graphs with dot</title>
		<author>
			<persName><forename type="first">E</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
		<respStmt>
			<orgName>AT&amp;T Bell Laboratories</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Model Checking Methodology for Large Systems, Faults and Asynchronous Behaviour: SARANA 2011 Work Report</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lahtinen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Launiainen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Heljanko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ropponen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<pubPlace>Finland</pubPlace>
		</imprint>
		<respStmt>
			<orgName>VTT Technical Research Centre of Finland</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Proposal for coexistence of mathematical handwritten and keyboard input in a wysiwyg expression editor</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lao-Tebar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Marques</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FM4M/MathUI/ThEdu/DP/WIP@CIKM</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">20 years of UPPAAL enabled industrial model-based validation and beyond</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">G</forename><surname>Larsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lorber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nielsen</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-03427-618</idno>
	</analytic>
	<monogr>
		<title level="m">Lecture Notes in Computer Science</title>
				<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="212" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Meltdown: Reading kernel memory from user space</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fogh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hamburg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">AutoCaption: An approach to generate natural language description from visualization automatically</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<idno type="DOI">10.1109/PacificVis48177.2020.1043</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Pacific Symposium on Visualization</title>
				<meeting>IEEE Pacific Symposium on Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<biblScope unit="page">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">An integrated framework for the analysis of dependable interactive systems (IFADIS): Its tool support and evaluation</title>
		<author>
			<persName><forename type="first">K</forename><surname>Loer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Harrison</surname></persName>
		</author>
		<idno>doi: 10. 1007/s10515-006-7999-y</idno>
	</analytic>
	<monogr>
		<title level="j">Automated Software Engineering</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="469" to="496" />
			<date type="published" when="2006-05">May 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Temporal verification of reactive systems -safety</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Manna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pnueli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">From data to insights: A layered storytelling approach for multimodal learning analytics</title>
		<author>
			<persName><forename type="first">R</forename><surname>Martinez-Maldonado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Echeverria</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">Fernandez</forename><surname>Nieto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Buckingham</surname></persName>
		</author>
		<author>
			<persName><surname>Shum</surname></persName>
		</author>
		<idno type="DOI">10.1145/3313831.3376148</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. CHI Conference on Human Factors in Computing Systems</title>
				<meeting>CHI Conference on Human Factors in Computing Systems<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<biblScope unit="page">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">New tool for converting high-level representations of finite state machines to verilog hdl</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Masoumi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A R</forename><surname>Al-Haddad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">Z</forename><surname>Rokhani</surname></persName>
		</author>
		<idno type="DOI">10.1109/SCORED.2017.8305431</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Student Conference on Research and Development</title>
				<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">InsideInsights: Integrating Data-Driven Reporting in Collaborative Visual Analytics</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mathisen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Horak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">N</forename><surname>Klokmose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Grønbaek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Elmqvist</surname></persName>
		</author>
		<idno type="DOI">10.1111/cgf.13717</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2019-06">June 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Teaching rigorous distributed systems with efficient model checking</title>
		<author>
			<persName><forename type="first">E</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Woos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Tatlock</surname></persName>
		</author>
		<idno type="DOI">10.1145/3302424.3303947</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. Eu-roSys Conference</title>
				<meeting>Eu-roSys Conference<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">Handwriting recognition -MyScript</title>
		<author>
			<persName><surname>Myscript</surname></persName>
		</author>
		<ptr target="https://www.myscript.com/handwriting-recognition" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Chart-to-Text: Generating natural language descriptions for charts by adapting the transformer model</title>
		<author>
			<persName><forename type="first">J</forename><surname>Obeid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Hoque</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Conference on Natural Language Generation</title>
				<meeting>International Conference on Natural Language Generation<address><addrLine>Dublin, Ireland</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="138" to="147" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title/>
		<author>
			<persName><forename type="middle">Org</forename><surname>Opencores</surname></persName>
		</author>
		<author>
			<persName><surname>Opencores</surname></persName>
		</author>
		<ptr target="https://opencores.org/" />
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Counterexample visualization and explanation for function block diagrams</title>
		<author>
			<persName><forename type="first">A</forename><surname>Pakonen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Buzhinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Vyatkin</surname></persName>
		</author>
		<idno>doi: 10. 1109/indin.2018.8472025</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Industrial Informatics</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="747" to="753" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Counterexample-guided simulation framework for formal verification of flexible automation systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Vyatkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pang</surname></persName>
		</author>
		<idno type="DOI">10.1109/indin.2015.7281905</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Industrial Informatics</title>
				<meeting><address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<monogr>
		<title level="m" type="main">Finite State Machines in Hardware: Theory and Design (with VHDL and SystemVerilog)</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">A</forename><surname>Pedroni</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Towards a universal interface for real-time mathematical communication</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pollanen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hooper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Cater</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CICM Workshops</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">State of the art: Coordinated &amp; multiple views in exploratory visualization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Roberts</surname></persName>
		</author>
		<idno type="DOI">10.1109/cmv.2007.20</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conference on Coordinated and Multiple Views in Exploratory Visualization</title>
				<meeting>IEEE Conference on Coordinated and Multiple Views in Exploratory Visualization<address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007-07">July 2007</date>
			<biblScope unit="page" from="61" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Expressive authoring of nodelink diagrams with graphies</title>
		<author>
			<persName><forename type="first">H</forename><surname>Romat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Appert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Pietriga</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2019.2950932</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="2329" to="2340" />
			<date type="published" when="2021-04">Apr. 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title level="m" type="main">Integration and analysis of alternative smt solvers for software verification</title>
		<author>
			<persName><forename type="first">F</forename><surname>Rothenberger</surname></persName>
		</author>
		<idno>doi: 10.3929/ ETHZ-A-010608394</idno>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note>Master&apos;s thesis, ETH Zurich</note>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Shortest counterexamples for symbolic model checking of LTL with past</title>
		<author>
			<persName><forename type="first">V</forename><surname>Schuppan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Biere</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-31980-132</idno>
	</analytic>
	<monogr>
		<title level="m">Tools and Algorithms for the Construction and Analysis of Systems</title>
				<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="493" to="509" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">H</forename><surname>Seoul-Oh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Adkisson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stufflebeam</surname></persName>
		</author>
		<author>
			<persName><surname>Mathquill</surname></persName>
		</author>
		<ptr target="http://mathquill.com/" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Going beyond visualization: Verbalization as complementary medium to explain machine learning models</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sevastjanova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Turkay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Henkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Butt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>El-Assady</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Visualization for AI Explainability at IEEE VIS</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Calliope: Automatic visual data story generation from a spreadsheet</title>
		<author>
			<persName><forename type="first">D</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Cao</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2020.3030403</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="453" to="463" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">explAIner: A visual analytics framework for interactive and explainable machine learning</title>
		<author>
			<persName><forename type="first">T</forename><surname>Spinner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Schlegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Schäfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>El-Assady</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2019.2934629</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1064" to="1074" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Neural data-driven captioning of time-series line charts</title>
		<author>
			<persName><forename type="first">A</forename><surname>Spreafico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Carenini</surname></persName>
		</author>
		<idno type="DOI">10.1145/3399715.3399829</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. International Conference on Advanced Visual Interfaces</title>
				<meeting>International Conference on Advanced Visual Interfaces<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<biblScope unit="page">2020</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Augmenting visualizations with interactive data facts to facilitate interpretation and communication</title>
		<author>
			<persName><forename type="first">A</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Endert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2018.2865145</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="672" to="681" />
			<date type="published" when="2019-01">Jan. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Seq2seq-Vis: A visual debugging tool for sequence-to-sequence models</title>
		<author>
			<persName><forename type="first">H</forename><surname>Strobelt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gehrmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Behrisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Perer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Rush</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2018.2865044</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="353" to="363" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<monogr>
		<title level="m" type="main">Code geknackt</title>
		<author>
			<persName><forename type="first">W</forename><surname>Thielke</surname></persName>
		</author>
		<ptr target="https://www.focus.de/finanzen/news/krankenkassen-code-geknackt_aid_148829.html" />
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<monogr>
		<title level="m" type="main">Safe handover in mixed-initiative control for cyber-physical systems</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wiehr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hirsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Daiber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kruger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kovtunova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Borgwardt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Demberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Steinmetz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jorg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Using automatic speech recognition to dictate mathematical expressions: The development of the &quot;talkmaths&quot; application at kingston university</title>
		<author>
			<persName><forename type="first">A</forename><surname>Wigmore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hunter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Pflügel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Denholm-Price</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Binelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computers in Mathematics and Science Teaching</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="177" to="189" />
			<date type="published" when="2009-04">Apr. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">Symbolic mathematical computation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wolfram</surname></persName>
		</author>
		<idno type="DOI">10.1145/3341.3347</idno>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="390" to="394" />
			<date type="published" when="1985-04">Apr. 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<monogr>
		<title level="m" type="main">A Step-through Debugger for Distributed Systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Woos</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
		<respStmt>
			<orgName>University of Washington</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b88">
	<analytic>
		<title level="a" type="main">Survey on the analysis of user interactions and visualization provenance</title>
		<author>
			<persName><forename type="first">K</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ottley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Walchshofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Streit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wenskovitch</surname></persName>
		</author>
		<idno type="DOI">10.1111/cgf.14035</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="757" to="783" />
			<date type="published" when="2020-06">June 2020</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
