<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visual Analysis of High Dimensional Point Clouds using Topological Landscapes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Oesterling</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Heine</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heike</forename><surname>JÃ¤nicke</surname></persName>
							<email>h.jaenicke@swansea.ac.uk</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Swansea University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Visual Analysis of High Dimensional Point Clouds using Topological Landscapes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:54+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"> <ref type="figure">Figure 1</ref><p>: (a) Because intuitive spatial scatter plot visualizations are limited to, at most, three dimensions, we cannot look into a high dimensional data set by simply visualizing its point cloud or, e.g., its density distribution. (b) However, the topology of a point cloud, described, e.g., by means of the contour tree, can be calculated in arbitrary dimension. (c) Instead of the data itself, we visualize its topological landscape <ref type="bibr" target="#b35">[36]</ref>, having the same topology as the given input data set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ABSTRACT</head><p>In this paper, we present a novel three-stage process to visualize the structure of point clouds in arbitrary dimensions. To get insight into the structure and complexity of a data set, we would most preferably just look into it, e.g. by plotting its corresponding point cloud. Unfortunately, for orthogonal scatter plots, this only works up to three dimensions, and other visualizations, like parallel coordinates or scatterplot matrices, also have problems handling many dimensions and visual overlap of data entities.</p><p>The presented solution tackles the problem of visualizing point clouds indirectly by visualizing the topology of their density distribution. The benefit of this approach is that this topology can be computed in arbitrary dimensions. Similar to examining scatter plots, this gives the important information like the number, size and nesting structure of accumulated regions. We view our approach as an alternative to cluster visualization.</p><p>To create the visualization, we first estimate the density function using a novel high-dimensional interpolation scheme. Second, we compute that function's topology by means of the join tree, generate a corresponding 3-D terrain using the topological landscape metaphor introduced by Weber et al. <ref type="bibr" target="#b35">[36]</ref>, and finally augment that landscape by placing the original data points at suitable locations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Visualizing and studying multivariate data has a long tradition. For hundreds of years, and in almost every discipline, people used to organize data entities with several attributes in a table-like manner. For a small number of attributes, simple visualizations of data or statistical information can be achieved using scatter plots or histograms. For classified data, or when different data points show statistical similarity, these simple visualizations might be colored or handled with transparency in order to differentiate between several coherent parts of the data. For example, observing a scatter plot, parallel coordinate system or a dendrogram, leads to much more insight and understanding of the data structure, than staring at a spreadsheet or a collection of data tuples <ref type="bibr" target="#b33">[34]</ref>. However, for some thousands of entities, having maybe some hundreds of attributes, most common visualizations fail at reasonably handling the dimensionality or the overlap-free data arrangement. With increasing size of the data, it also becomes increasingly complicated to bring the essential information to the point without forcing the user to consider a rather big part of the whole information in detail.</p><p>Hence, the goal is to break the habit of applying non-scalable approaches for small low-dimensional data sets to big highdimensional data sets by using more intuitive metaphors which make complex information easier to understand. One such metaphor is the topological landscape, which takes advantage of the fact that humans are naturally trained in understanding the structure of a terrain. By means of a topological landscape, the data is visualized indirectly by only showing its topological information, instead of the data itself. There are several advantages: First of all, the topology can be calculated for point clouds in arbitrary dimensions. Secondly, while we cannot visualize the high dimensional data itself, we can (independent of the dimensionality of the underlying input space) map the topology to a 3-D terrain. In the end, by visualizing the topology, we directly give answers to structural questions, instead of presenting a visualization which has to be analyzed with other methods afterwards.</p><p>Although we visualize the given point cloud indirectly, several direct methods are available: Axis-based approaches like parallel coordinates <ref type="bibr" target="#b20">[21]</ref>, star plot <ref type="bibr" target="#b9">[10]</ref> or RadViz <ref type="bibr" target="#b4">[5]</ref> try to overcome the three-dimensional limitation of common scatterplots <ref type="bibr" target="#b9">[10]</ref> by using a non-orthogonal axis-alignment. Although this allows for a more effective study and visualization of correlations in high dimensional data, the order of the axes is crucial and difficult to determine automatically. Moreover, some of these methods need a huge amount of pixels to visualize single data entities and still suffer from pixel overlapping. For an efficient usage of screen pixels, pixel-based methods <ref type="bibr" target="#b23">[24]</ref> were introduced to arrange the data in recursive patterns, thus unveiling trends in the data's attributes. Projective approaches like scatterplot matrix <ref type="bibr" target="#b5">[6]</ref>, Prosection View <ref type="bibr" target="#b16">[17]</ref> or Hyperbox <ref type="bibr" target="#b2">[3]</ref> are used to give an overview of all possible attribute configurations, i.e., they only consider two dimensions at a time. Consequently, the user only investigates a small subset and has to combine several different visualizations to get an adequate overview of the whole structure. In modern approaches like Rolling the Dice <ref type="bibr" target="#b13">[14]</ref> the rather static analysis of scatterplot matrices is spiced up with flexible interactive methods, queries and visual expressiveness.</p><p>Because all the basic methods become problematic when the dimensionality of the data becomes significantly high, it is a common approach to reduce the dimensionality. This focuses on finding correlations in subspaces and reducing the computational complexity. Transformation methods like PCA <ref type="bibr" target="#b22">[23]</ref>, MDS <ref type="bibr" target="#b25">[26]</ref> or Kohonen Maps <ref type="bibr" target="#b24">[25]</ref> project the data onto a smaller space which aggregates a maximum of variance. Feature selection methods are used for data reduction by removing irrelevant or redundant dimensions. An extension to the latter approach is subspace clustering. Its idea is that different subspaces may contain different, meaningful clusters. This requires effective and efficient ways to determine these subspaces. By default, our approach considers all dimensions and therefore special structures in subspaces might not be found. In principle, we could also apply out method only to particular subspaces, thus accelerating our overall run-time and finding similar features.</p><p>To formally define clusters and their detection, several methods have been developed. Density-based methods, like DENCLUE <ref type="bibr" target="#b19">[20]</ref> or DBSCAN <ref type="bibr" target="#b14">[15]</ref>, regard clusters as dense regions of objects that are separated by regions of low density (representing empty space or noise). Grid-based methods, like STING <ref type="bibr" target="#b34">[35]</ref> or WaveCluster <ref type="bibr" target="#b30">[31]</ref>, use a multiresolution grid to quantize the object space into a finite number of cells that are used to perform the clustering operations. Especially for higher dimensions, some methods, like CLIQUE <ref type="bibr" target="#b1">[2]</ref> and PROCLUS <ref type="bibr" target="#b0">[1]</ref> were introduced to overcome matters like curse of dimensionality <ref type="bibr" target="#b6">[7]</ref>.</p><p>An approach closely related to ours was recently introduced by Takahashi et al. <ref type="bibr" target="#b31">[32]</ref>, who construct a 3-D visualization approximating a high-dimensional scalar function's topology. Their method is a variation of the Isomap approach <ref type="bibr" target="#b32">[33]</ref>, and requires that the scalar values are given for all points. Their method is also dependent on eight parameters and they provide empirically derived values for seven of them. For one parameter (k) they are vague and it is not clear how to select this parameter for irregular high-dimensional data. The highest dimension for which they demonstrate their method is 7. Our method includes the computation of the scalar (density) value and requires one parameter for that. Two more parameters are used to simplify the topological landscape <ref type="bibr" target="#b35">[36]</ref>, but the core of our algorithm is parameter free.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BACKGROUND 3.1 Neighborhood Graphs</head><p>To extract a meaningful density function in a high dimensional space, we need methods to fill the void between data samples and methods to describe closeness between points. To that end, we present some structures that describe partitions of the space subject to closeness of points.</p><p>Let Î´ (x, y) denote the distance of two points x, y in a d-</p><formula xml:id="formula_0">dimensional Euclidean space R d , the Voronoi diagram [16] of a point set P = {p 1 , p 2 , . . . , p n } is a partition of R d into cells c i = {x â R|â j = i : Î´ (x, p i ) â¤ Î´ (x, p j )}.</formula><p>Each cell is a class of points having the same closest point of P.</p><p>A simplicial complex S is a topological space consisting of simplices (points, lines, triangles, tetrahedra, etc...) and satisfying that for each simplex, each of its faces is element of S and each intersection of a pair of simplices of S is their common face.</p><p>The Delaunay triangulation <ref type="bibr" target="#b15">[16]</ref> of a point set P in R d in socalled general position is a simplicial complex such that for each simplex there exists an empty circum-hypersphere. There is a well known duality: two cells c i , c j are neighbors in the Voronoi diagram if and only if the Delaunay triangulation contains a line between p i and p j . There are algorithms that can compute the Delaunay triangulation directly and they perform very well in two and three dimensions. For higher dimensions, it has been shown that the number of simplices is in â¦(n d/2 ) in the worst case <ref type="bibr" target="#b15">[16]</ref>, giving an exponential lower bound on the run-time. We will refer to the points and lines of the Delaunay triangulation, omitting all other simplices, as the Delaunay graph.</p><p>The Gabriel graph <ref type="bibr" target="#b17">[18]</ref> of a point set P in R d is a graph (P, E) which contains an edge between two points u, v if and only if the Gabriel lune contains no point from P except on its border. The Gabriel lune is the smallest hypersphere with both u and v on its border. The Gabriel graph can be computed using O(n 3 ) distance calculations by the following simple algorithm: for each point pair u, v â P construct the center c of u and v and test each point w â P, w = u, w = v whether it is closer to c than half the distance of u and v. An edge is inserted only if no such point is found. The inner loop can be aborted as soon as the first point inside the lune is found. Note that a distance calculation in a high dimensional space usually takes O(d) time, giving an overall run-time of O(dn 3 ). Because each point pair can be tested independently, this algorithm is trivial to implement in parallel using up to n(n â 1)/2 processors.</p><p>A neighborhood graph <ref type="bibr" target="#b21">[22]</ref>, also called a proximity graph, is a graph in which similar or neighbored points are connected with an edge. Many types of neighborhood graphs have been developed <ref type="bibr" target="#b3">[4]</ref>. The Delaunay graph is a suitable neighborhood graph as it maps cell neighborhood relation to edges. In the Gabriel graph, two vertices are connected if some vicinity of their direct connection is devoid of points. Neighborhood graphs often are related. In fact, the Gabriel graph is a subgraph of the Delaunay graph. An edge (p i , p j ) is Delaunay but not Gabriel if it does not intersect the boundary of the cells c i , c j of the dual Voronoi diagram. These are usually the longer edges of each simplex. In addition, the Gabriel is always connected, because the minimum spanning tree is a subgraph of it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Topology</head><p>Data in scientific environments is often provided as a discrete scalar function (or scalar field), describing, e.g., pressure, density or temperature distributions. The task for the visualization is to illustrate the data's structure and complexity and to examine whether the data contains unexpected features which require a closer investigation.</p><p>For up to three dimensions, scalar data might be visualized directly by, e.g., volume rendering <ref type="bibr" target="#b26">[27]</ref> or indirectly by, e.g., extracting isosurfaces <ref type="bibr" target="#b28">[29]</ref>. However, these approaches always show only a subset of the data and require the user to combine information from different images. Furthermore, the resulting visualization heavily depends on parameter selection. Therefore, another approach to investigate the structure of a (primarily high dimensional) scalar function is to compute its topology. This aims at a complete study of the variation of the function, described by means of critical points or entire regions <ref type="bibr" target="#b36">[37]</ref>.</p><p>Let the scalar data be given as a set of points</p><formula xml:id="formula_1">P = {p 1 , p 2 , . . . , p n } in R d , with corresponding scalar measurements H = {h 1 , h 2 , . . . , h n }.</formula><p>To interpolate values for points not in P, the data is extended to the entire space by means of a mesh, with vertex set P, and a continuous function f that satisfies f (p i ) = h i . A level set of f at some function value h is the set {x â R d | f (x) = h} and may consist of zero, one, or more connected components, called contours. For lower dimensions, level sets are known as isolines (2-D) and isosurfaces (3-D). If the function value f (x) is thought of as time, we can watch the evolution of contours of f over time, seeing them appear, join, split and disappear. The contour tree <ref type="bibr" target="#b7">[8]</ref> is a graph in which each contour is contracted to a single point and which tracks these topological changes. In <ref type="figure">Figure 1</ref>(b), the height field illustrates the scalar function and the rings constitute some contours. Consequently, these rings start to appear on top of the hills, merge or split at several heights and finally disappear in sinks in the valley. The contour tree tracks these changes at their particular height values, thus representing the topology by means of critical points (maximum=appearance, saddle=join/split and mini-mum=disappearance of contours).</p><p>The computation of the contour tree usually requires a Morse function, i.e. a function that requires all critical points to occur on distinct function values. Unfortunately, our density function is, in general, not a Morse function, but we apply simulation of simplicity <ref type="bibr" target="#b12">[13]</ref> to make it a Morse function.</p><p>If the mesh is a simplicial complex and piecewise linear interpolation is used, the contour tree can be determined by computing and merging two trees: the join tree and the split tree <ref type="bibr" target="#b8">[9]</ref>. The join tree of a scalar function contains the global minimum and all local maxima as well as all saddles which join contours. Concerning the density function, we are only interested in areas of high density and their nesting and therefore the join tree is sufficient for our purposes. The construction of the join tree is a graph algorithm, i.e. only points and edges of the mesh are considered, but higher order simplices are ignored. For space reasons we refer to <ref type="bibr" target="#b8">[9]</ref> where the reader can find a simple O(n log n) algorithm to compute the join tree (n and m denote the number of vertices and edges, respectively). However, we would like to remark that if the split tree is a single path of vertices, the contour tree is equal to the join tree. We can therefore always use an algorithm that is applicable to a contour tree on a join tree as well.</p><p>The contour tree is often partitioned into branches which are paths that are monotonic with respect to the Morse function values. Each branch's persistence <ref type="bibr" target="#b11">[12]</ref> can be measured as the difference of its highest and its lowest function value. The branches can be organized in a branch decomposition <ref type="bibr" target="#b29">[30]</ref> which is a tree. Each of this tree's nodes is a branch, the root being the branch of highest persistence. One node is child of another node if the branch it represents has lower persistence than the other node's branch and both branches are connected by a saddle. It is easy to see that in the case where the join tree equals the contour tree, the main branch always connects a global minimum with a global maximum because the path between these two extrema is always monotonic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Topological Landscape</head><p>The topological landscape metaphor was introduced by Weber et al. <ref type="bibr" target="#b35">[36]</ref>. Due to the page limitation, we cannot give an appropriate account of the algorithm to create the landscape because it would require us to introduce a number of concepts unrelated to the rest of our work. The generation of the topological landscape is fast and the landscapes are easily understood by humans. For our purposes, we will consider this stage to be a black box into which a branch decomposition is given and which gives back a list of triangles with endpoints in R 3 , where each triangle is annotated with the branch it originates from. This information is necessary to map the original data points to the correct region of the landscape.  shows a contour tree and its corresponding landscape, having the same topology as the input data set. The mapping of branches and triangles is indicated by colors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ALGORITHM</head><p>Given the high dimensional point cloud as a point set P = {p 1 , p 2 , . . . , p n } in a fixed-dimensional Euclidean space R d and a filter radius Ï , we approximate the density function by sampling on this point set's Gabriel graph, compute that functions join tree and then generate the topological landscape from the join tree. Finally, we add the original data points as small spheres on the landscape to improve the perception of the density distribution on the hills. This augmentation has several applications:</p><p>1. We are able to study in what amount data points contribute to hills in the topological landscape given the current Ï . This allows, among other things, to select an improved filter radius Ï (see Section 4.4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>Assuming some pre-classified input, we can easily prove whether dense regions correspond to classes in the data by coloring the spheres accordingly, as we have done in all our examples. If class members are equal because they share similar values of several attributes, then the spheres with the same color should be placed solely on one hill in the topological landscape.</p><p>3. It also allows for augmenting the landscape, e.g. with labels, and for clicking on spheres to get more information. For a later interactive visualization, possibly incorporating semantic zoom, this can be of great benefit if the data points represent more than a high-dimensional vector.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Approximating the Density Function</head><p>To compute the topology of the density function, we first need to generate it from the point set. Conceptually, we blur a high dimensional image that contains just the points using a Gaussian filter. Let Î´ (x, p i ) denote the euclidean distance of any point x to a point p i , the resulting image is given by:</p><formula xml:id="formula_2">f (x) = 1 Ï â 2Ï n â i=1 exp â Î´ (x, p i ) 2 2Ï 2<label>(1)</label></formula><p>We can omit the factor before the summation sign because it does not affect the nesting relations between dense regions. Because the computation of this function's topology is very hard, we approximate f by a simpler function f which has very similar topology and for which we can use the join tree computation. Our aim is to make an f that can be described by piecewise linear interpolation on a simplicial complex S. One option for S would be a Delaunay triangulation on P with f (p i ) = f (p i ), âp i â P, but we cannot use that for two reasons: (i) The linear interpolation on S is a bad approximation for f as it does not reflect that the density between two points can be lower than the density at the two points, as illustrated in <ref type="figure" target="#fig_0">Figure 3(a)</ref>. If so, f lacks a corresponding saddle value which attests points to be separated by a low-density region. (ii) The run-time increases exponentially with the dimension d. The first problem could be solved exactly by computing the Delaunay triangulation S on P augmented by all critical points of f . But as we already noted, these critical points are difficult to compute. Especially in higher dimensions, most simplices contain one minimum, resulting in an exponentially growing number of minima with growing dimension. Furthermore, we are only interested in maxima and the saddles between them. Maxima usually lie near the points of S and the saddles lie near the midpoints of the edges of S. We therefore could compute the Delaunay triangulation on P and split each edge at its midpoint adding the additional points</p><formula xml:id="formula_3">v 1 , v 2 , . . . , v m for which we also request that f (v i ) = f (v i ).</formula><p>This means an additional m (= the number of edges of S) evaluations of f , each requiring an additional n distance calculations. Let c be the midpoint of an edge (x, y) â S. For high-dimensional spaces, the distances Î´ (c, z) can be computed in constant time (i.e. in O(1), instead of O(d)) purely from the distances Î´ (x, y), Î´ (x, z), and Î´ (y, z) observing that x, y, z span a planar subspace which includes c and in which the law of cosines holds and therefore: 4Î´ (c, z) 2 = 2Î´ (x, z) 2 + 2Î´ (y, z) 2 â Î´ (x, y) 2 (cf. <ref type="figure" target="#fig_0">Figure 3(b)</ref>). Furthermore, splitting an edge only affects the join tree if the density at its mid-point is lower than the minimum density of its end-points. We only split an edge when needed, thus keeping the size of the graph small and allowing us to terminate the calculation of f for that mid-point once it exceeds the minimum.</p><p>The second problem can be solved by considering only a subset of the Delaunay triangulation. The Gabriel graph is considered a good approximation of the Delaunay graph with respect to neighboring vertices. However, this graph is not simplicial, therefore a precondition of the join tree algorithm is not met. Yet, this condition is only sufficient and not necessary, as it is trivial to construct simplicial complexes for which the deletion of some edges does not alter the output of the algorithm. In comparison to the Delaunay graph, the Gabriel graph omits the long edges of simplices. The density along these omitted edges is usually lower than the densities along the preserved edges, therefore the saddles of the join tree are unlikely to occur on removed edges. This is fortunate, as we are only interested in the join tree and therefore make only a small mistake by considering only the Gabriel edges. This graph can be computed using O(n 3 ) distance computations. As this can be still a very long time, we present our improved Gabriel graph computation in Appendix A.</p><p>The mesh construction requires all points to be distinct, but in practice this requirement may not be met. We therefore construct the unique point set from the original data points and remember for each unique point the set of data points it represents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Computing the Topology</head><p>Given the Gabriel graph of P, augmented by the additional m vertices on the edges and the density at all vertices, we can perform the join tree graph algorithm from <ref type="bibr" target="#b8">[9]</ref>. Because minima and split saddles are not of interest for point clouds, we compute just the join tree. The join tree still contains all the information about maxima and the densities at which contours join. It thus preserves the number and nesting of dense regions. The algorithm itself is performed on a graph for which we trivially bound the number of edges by n(n â 1) which in turn bounds the run-time of the join tree computation by O(n 2 log n).</p><p>Using a trivial modification of the join tree algorithm, we can remember, for each input graph vertex that represents a data point, on which join tree edge it lies. Since join tree edges are reflected by regions in the topological landscape, this mapping allows for a proper placement of data points in the landscape.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Generating the Landscape</head><p>To visualize the join tree, we essentially make use of the landscape metaphor as introduced by Weber et al. <ref type="bibr" target="#b35">[36]</ref>. To improve the resolution of the generated landscape, they present a method they term "rebalancing" to simplify the nesting of hills in the input contour tree which we apply to our trees as well. Before rebalancing, we remove topological noise by pruning branches from the branch decomposition which exhibit a persistence smaller than a given percentage of the main branch's persistence. These two simplifications are subject to one parameter each.</p><p>Weber et al. <ref type="bibr" target="#b35">[36]</ref> also present a way to distort the landscape so that the size of features in the original space is visible. We apply this distortion too, but as we cannot approximate the volume of single elements in the high dimensional space we use the number of data points on each join tree edge as the desired area of the corresponding landscape region. <ref type="bibr" target="#b35">[36]</ref> lacks details about the actual smoothing of the landscape. We could not find a suitable triangle-based interpolation that would preserve the topology of the landscape, therefore we join triangles back into quads and use Hermite interpolation on them. The resulting quads are split back again into triangles.</p><p>We augment the landscape by inserting the data points as small spheres in suitable locations. Unfortunately, the original distance information gets mostly lost by computing the topology and can not be used. However, because each data points lies on exactly one branch of the join tree and the topology of the landscape equals the join tree there must be exactly one contour on that branch's hill for that point's density. We place each data point at a random position along this contour. Since the contours are not present explicitly, but have to be computed from the triangle structure of the landscape, local accumulation of the data spheres can arise if not treated appropriately. <ref type="figure" target="#fig_4">Figure 4(a)</ref> shows some triangles which share a given height value, marked by the red height line. Assuming a sphere that should be placed at that height, each point on the red line would be topologically correct. Obviously, a sequential or random choice of a triangle (and then a position inside this triangle) would result in accumulations of data spheres at those positions where neighboring triangles intersect only a small portion of the contour. To avoid this, we select a random triangle using probabilities that are proportional to the amount of triangle/contour intersection. This results in a much more equally distributed arrangement of the spheres.</p><p>For each data point, we need to compute the set of triangles that are intersected by that point's contour. Testing each triangle becomes expensive if the landscape contains many triangles, which occurs especially after smoothing. For example, by means of subdivision surfaces or parametric surfaces, each pyramid-like hill (and the place in between) can be smoothed to a realistic hill, resulting in a huge amount of triangles. To boost the search process, we make use of some ideas from the field of accelerated isosurface extraction <ref type="bibr" target="#b27">[28]</ref>: Each triangle is mapped to a point (min, max) where min and max denote that triangles minimum and maximum height value, respectively. In this so called span space, all triangles that "span" over a given height value Îµ are contained in the rectangle R = [gmin, Îµ] Ã [Îµ, gmax] where gmin and gmax denote the minimum and maximum height of all triangles (see <ref type="figure" target="#fig_4">Figure 4(b)</ref>). To determine these points k i â R efficiently, the span space is organized in a kd-tree, which allows a quick range query using R. The construction of a kd-tree is known to take O(n log n) and a range query takes O( â n + |k|) <ref type="bibr" target="#b10">[11]</ref>. We use such a kd-tree for each branch separately to quickly determine the set of triangles that intersect a data point's contour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Reading the Landscape</head><p>One remaining question, when applying the method to a given data set, is the determination of the filter radius. A filter radius that is too large results in a rather blurry density distribution, thus combining actually separated dense regions. Likewise, a filter radius that is too small creates many peaks in the density distribution, thus identifying dense regions where there are none, e.g. at small noise accumulations. The analyzing process therefore consists of a sequential application of the method, using different filter radii until the best has been found, e.g. the number of maxima does not change for a significant range of the filter radius Ï . For this task, the structure of the landscape and the arranged data points can be used to determine the next filter radius. Starting with a particular radius, e.g. the diameter of the data's hyper-volume or the longest distance between any two points, several pieces of information can be obtained by reading the landscape:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">The number of hills</head><p>Unless the data set actually contains only one dense region, the presence of one single hill (or only a few hills) is an indicator of the filter radius being too large. Many small hills with only a few data points on it indicate a filter radius too small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The data point distribution on a hill</head><p>If dense regions are indeed separated, the densities of data points belonging to the dense region are quite different from the density of the saddle. Therefore, these points are arranged somewhere on the upper half of the hill. If many points are arranged at the foot of the hill, they are either noise or the filter radius is too small, thus splitting a single dense region into several ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The data point separation on a hill</head><p>If the data points on a hill constitute rings of different height, then the filter radius is too big and combines dense regions of different density.</p><p>Using these observations, the filter radius for the next step can be determined manually. An example for this process is given in <ref type="figure">Figure 7</ref>. Note that the algorithm does not have to recalculate everything. The pairwise distances and the Gabriel graph can be reused. The density function, the join tree and the topological landscape have to be generated again.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTS</head><p>We implemented our method in C++ and with the exception of the join tree and the topological landscape computation, all phases of our algorithm were parallelized. We tested our algorithm with several data sets on a computational platform with two 2.6GHz Quad-Cores and 8GB memory. Our biggest example required 2.9GB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Two Dimensional</head><p>While the great benefit of the new approach is that we can visualize the approximated topology of point clouds in arbitrary dimensions, we first want to explain a simple two-dimensional example. This is just to get a feeling of how features in the data correspond to features in the landscape and how the Gabriel graph in general looks like.</p><p>As a toy example, we consider a simple artificial twodimensional data set of 2,748 points, shown in <ref type="figure" target="#fig_5">Figure 5(a)</ref>. The data consists of several dense regions (one of which is nested) and the color of each point represents its cluster relationship. Furthermore, the dense regions have different size, shape and density (i.e. points per area) and we heavily afflicted the data with noise (black points) to subvert the regular dense regions.</p><p>We start with the computation of the Gabriel graph which is given in <ref type="figure" target="#fig_5">Figure 5</ref>(b). It contains 6,222 edges which is 0.14% of the number of edges the complete graph would have. We then compute the density at each vertex. The result is also shown in <ref type="figure" target="#fig_5">Figure 5(b)</ref> by means of color coding at the graph vertices. Darker points correspond to higher densities. Subsequently, edges are split when the density at their midpoint is lower than at their vertices. In our example, this happens 203 times, resulting in a graph with 2,951 vertices and 6,425 edges. The join tree is calculated next. In <ref type="figure" target="#fig_5">Figure 5</ref>(b), we marked maxima red, join saddles green and the global minimum blue. As can be seen, each dense region hosts one density maximum and between them there are single saddles. There are several extremum-saddle pairs, which have a rather small persistence. They are considered to be topological noise and are pruned.</p><p>We compute the join tree's topological landscape and arrange the data points at their appropriate positions. The result can be seen in <ref type="figure" target="#fig_5">Figure 5</ref>(c). Since the cyan cluster is the one with the highest density, it hosts the global density maximum, thus it constitutes the extremum of the root branch and, being the highest hill, is centered on the landscape. The footprints of the hills reflect the number of vertices on their corresponding branches in the join tree, i.e. the number of data points in the dense regions. Consequently, the red hill and the gray part (belonging to the root branch) are the biggest ones. Furthermore, the nesting structure of the dense regions is reflected by the nesting structure of the hills and the noise points are spread over the whole landscape (as they are spread over the whole data set). Finally, except from the red points, which are mixed with the orange, green and blue points, the colored points are solely on their hills. The overall computation time for this example, i.e. from reading the data till the final landscape, was approximately three seconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Ten Dimensional</head><p>In <ref type="figure">Figure 7</ref>, we demonstrate the effect of different filter radii on the topological landscapes of a 10-dimensional data set <ref type="bibr" target="#b0">1</ref> . The overall computation time for this example, containing 1,200 data points, was less than 2 seconds for each image. The Gabriel graph contained 18, 260 edges which is 2.53% of the number of edges in the complete graph. For the four values of Ï , the edge splitting operations performed were 2, 1, 298, 3, 205 and 4, 722. Generally, lower values of Ï result in more edges being split.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">High Dimensional</head><p>As a high dimensional example, we decided to use a sufficiently complex example, produced by a generator described in <ref type="bibr" target="#b18">[19]</ref>. It uniformly arranges normal distributions in a high dimensional space. We generated a 60-dimensional data set containing 25 clusters of random radius. In order to complicate the whole scenario, we added the same number of noise points as were produced by the clustering generator. This gave us a point cloud having a total of 8,452 points. For comparison with other methods, we initially apply some PCA to get a clue about the data. <ref type="figure" target="#fig_6">Figure 6(a)</ref> shows the projection of the input data onto the first two principal components. Note that the additional noise points were ignored here to allow for a useful scatterplot. Including the noise, the actual clustering would be hidden by a big containing noise-cloud. Although the PCA roughly indicates a clustering, the projection discards too much information about the data's structure and neglecting the coloring (which is casually unlikely in real data sets) leads to at most around 10 clusters. Also, if actually available, the clustering-based coloring of the PCA in <ref type="figure" target="#fig_6">Figure 6</ref>(b) does not reveal the actual point cloud's structure. However, it is good enough for a first glimpse and we therefore apply our new method to the data. To find an appropriate filter radius, we used the approach described in Section 4.4. After some passes with different radii, we end up with the landscape shown in <ref type="figure" target="#fig_6">Figure 6</ref>(c). First of all, the landscape clearly possesses a couple of separated hills, indicating the separated maxima in the density distribution. In particular, it has twenty-four of the possible twenty-five hills, meaning that two clusters are still combined by the currently used filter radius. Moreover, the data points on the hills are separated as well. We want to note here that a hill on a hill does not necessarily mean that the corresponding dense regions are completely enclosing each other. Structured hills indicate on the one hand that the saddle between the corresponding regions is higher than densities at the boundary, and on the other hand these regions are closer to each other than to other regions (i.e. other hills on the landscape). The noise in high dimensional spaces is  <ref type="figure">Figure 7</ref>: The user reads the landscape in order to determine the correct filter radius: (a) Starting with an obviously too big filter radius, we see a single hill, harboring rings of different height and color; (b) Reducing the filter radius, the first hills start to occur, representing the local maxima in the density distribution; (c) A further reduction of the filter radius leads to more hills, while some points from different clusters are still mixed on some hills and other points are still considered as being noise; (d) Finally, all the data points are separated on their corresponding hills; a further reduction would result in new local maxima inside the clusters, i.e. additional, smaller hills harboring a few points which could be pruned from the branch decomposition due to low persistence.</p><p>extremely sparse, thus being most likely outside the clusters. This sparseness leads to very small (and most likely equal) densities. Therefore, the corresponding spheres, which of course belong to the root branch, constitute a ring at the height between the global minimum (i.e. the height of the landscape's boundary) and the saddle value of the root branch's last child branch. Of course, this depends on the data set. As shown in the first example, the noise could also be mixed with the dense regions, thus taking every possible density value. In this case, the corresponding spheres would be placed at their appropriate positions. Regarding the run-time, the overall computation time for this rather large and high dimensional example was about 377s. The amount of Gabriel graph edges compared to the complete graph was 28.1%. Note that even without the coloring, the same information could have been extracted from the topological landscape.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">General Observations</head><p>We made some observations regarding the algorithm's general behavior in higher dimensions:</p><p>1. The Gabriel graph approaches the complete graph If the number of points is fixed, the number of relative neighbors increases with every additional dimension the points span and the Gabriel graph's vertices have an increasing number of neighbors. This has an effect on the topology which becomes increasingly trivial. In the end, the topology is not distinguishable from a single dense region. To counter this effect, the number of points should always be sufficiently larger than the number of dimensions they span.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The distance computation takes more time</head><p>With each additional degree of freedom, the costs to determine the euclidean distance (i.e. the scalar product) increases, as well. This affects on the one hand the need for additional memory to store the high dimensional vectors and on the other hand the duration of distance calculations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Noise points are on their own</head><p>With each additional degree of freedom, a fixed amount of data points becomes increasingly sparse. Moreover, when dimensionality increases, data points are likely located in different dimensional subspaces, which in turn affects the meaning of distance, because these points can all be considered as being equally distanced. These phenomena are known as curse of dimensionality and are widely discussed since they affect almost every algorithm in higher dimensions.</p><p>Regarding these observations, some things are important for higher dimensions. First of all, with each additional dimension the runtime and memory complexity increases. Because we deal to some extend with O(n 2 ) data structures and algorithms, this might constitute a bottle neck for higher dimensions, but also depends on the data itself. Secondly, matters like the curse of dimensionality and the ratio between data points and their dimensionality, force the Gabriel graph to become more full.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION AND FUTURE WORK</head><p>We presented a multiple stage process to achieve an approximation of the topology of high dimensional point clouds. This approximation aims on the study of the data's structure in terms of dense regions, thus considering the number, size and nesting structure of point accumulations. We therefore describe the data indirectly by its density distribution and visualize a 3-D topological landscape, having the same (joining-)topology as this distribution. To automatically present the best possible landscape, our future work focuses on the automatic choice of the filter radius. Furthermore, we analyze methods to apply our approach only to a limited number of dimensions, i.e. by analyzing only subspaces. Although, we actually want to describe the whole situation, i.e. by considering all dimensions, this might speed up the overall process by neglecting unimportant information in some dimensions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>3 [</head><label>3</label><figDesc>Pattern Recognition]: Clustering-Algorithms; I.5.3 [Pattern Recognition]: Models-Structural; I.5.3 [Pattern Recognition]: Design Methodology-Pattern Analysis;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>(a) A contour tree. (b) Its branch decomposition. (c) The topological landscape having the same contour tree. Colors have been used to mark which parts of the landscape correspond to which contour tree branches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>(a) Without an additional low density sample in between two distant points, two dense regions would be identified as one by the join tree computation. The missing saddles are added by sampling the density function not only on the original points but also on the mid-points of edges. (b) Because the triangles xyz and xcz share the angle Î±, the distance of the mid-point c to point z can be computed directly from the distances between x, y, z using the law of cosines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>(a) For a given height value, a sequential or random choice of a triangle using uniform probabilities results in accumulation artifacts. Therefore, we use probabilities proportional to the amount of intersection of each triangle with the contour of that height. (b) Points in the span space represent min-max height values of triangles. Only the points in R = [gmin, Îµ] Ã [Îµ, gmax] are related to triangles that share a given height value Îµ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>(a) The synthetic example data set (the colored borders are just for better visual identification) consisting of some colored clusters afflicted with noise. (b) The Gabriel graph with the color-coded density distribution (dark=dense) and the critical points of the join-tree (red=maximum, green=saddle, blue=minimum). (c) The resulting topological landscape, after pruning and rebalancing using a threshold of 10% of the maximum density.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>(a)-(b) The projection of the data points (without noise) onto the first two principal components coarsely reveals the clustering structure of the data set. (c) The Topological Landscape clearly shows 24 separated hills which correspond to the dense regions. The extremely sparse noise comprises a ring at the height of low density, thus indicating that all noise points are each on their own.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">In particular, it is the data set "10d-20c-no3.dat" from the dataset collection, accessible at http://dbkgroup.org/handl/generators/</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We thank Hamish Carr for valuable discussions regarding our method and Gunther H. Weber for assisting the realization of our topological landscape implementation. We would also like to thank the anonymous reviewers for their useful comments. This work was supported by a grant from the German Science Foundation (DFG) under number SCHE663/4-1 within the strategic research initiative on Scalable Visual Analysis (SPP 1335).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A IMPROVED GABRIEL GRAPH COMPUTATION</head><p>For large number of points the Gabriel graph computation can be very slow. There are optimizations for the two and three dimensional case, but they do not extend to higher dimensions. Instead, we present the following improvements: in euclidean spaces each triplet of (non-collinear) points u, v, w uniquely defines a plane, and the intersection of u, v's Gabriel lune with the plane is a circle with center c. Because of Thales' theorem which holds in this plane, the test whether w is outside the Gabriel lune can be written as <ref type="bibr" target="#b1">2</ref> . Using this method we no longer need to compute the circle centers and can determine the Gabriel graph using just the pairwise distances between the original point set. Of course, these distances can be computed beforehand reducing the run-time from O(dn 3 ) to O(dn 2 + n 3 ). The inner loop of the naive Gabriel graph algorithm aborts earlier if the points of P are tested in increasing distance from u or v. Furthermore, points w cannot lie within the Gabriel lune if Î´ (u, w) 2 +â(v) 2 â¥ Î´ (u, v) 2 and â(v) denotes v's distance to its nearest neighbor. Using these simple ideas we can greatly reduce the number of iterations in the inner loop if we sort the neighbors of each point for increasing distance. The final algorithm is presented in the following: </p><p>skipedge â false 9: We observed that the innermost loop was finished on average after 5-10 iterations for our data sets. For lower dimensions, because a point inside the lune was found quickly and in higher dimensions the length of the loop decreased dramatically due to the "curse of dimensionality". The run-time of the algorithm becomes dominated by distance calculations and sorting. Note that each point can still be treated independently. It is therefore possible to compute using a maximum of n processors with varying workloads in parallel.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fast algorithms for projected clustering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Aggarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Wolf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Procopiuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Park</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD Rec</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Automatic subspace clustering of high dimensional data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gunopulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Data Min. Knowl. Discov</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="5" to="33" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The hyperbox</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Alpern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE VIS &apos;91</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="133" to="139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Parameterfreies hierarchisches Graph-Clustering Verfahren zur Interpretation raumbezogener Daten (Dissertation)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-H</forename><surname>Anders</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>Universitaet Stuttgart</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Circle segments: A technique for visually exploring large multidimensional datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ankerst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization &apos;96</title>
		<meeting>Visualization &apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Brushing scatterplots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">S</forename><surname>Cleveland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="127" to="142" />
		</imprint>
	</monogr>
	<note type="report_type">Technometrics</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Adaptive Control Processes: A Guided Tour</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bellman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961" />
			<publisher>Princeton University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Hybrid techniques for real-time radar simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Boyell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ruston</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AFIPS &apos;63 (Fall): Proceedings of the November</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1963" />
			<biblScope unit="page" from="445" to="458" />
		</imprint>
	</monogr>
	<note>fall joint computer conference</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Computing contour trees in all dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Axen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Chambers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">S</forename><surname>Cleveland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kleiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Tukey</surname></persName>
		</author>
		<title level="m">Graphical methods for data analysis. The Wadsworth Statistics/Probability Series</title>
		<imprint>
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Computational geometry: algorithms and applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">De</forename><surname>Berg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Cheong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van Kreveld</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Topological persistence and simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Letscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zomorodian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete &amp; Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="511" to="533" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">P</forename><surname>MÃ¼cke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="66" to="104" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Rolling the dice: Multidimensional visual exploration using scatterplot matrix navigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Elmqvist</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dragicevic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1539" to="1148" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A density-based algorithm for discovering clusters in large spatial databases with noise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ester</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="226" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Voronoi Diagrams and Delaunay triangulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fortune</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>World Scientific Press</publisher>
			<biblScope unit="page" from="193" to="233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Prosection views: Dimensional inference through sections and projections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">W</forename><surname>Furnas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Buja</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JCGS</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="323" to="385" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A new statistical approach to geographic variation analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Gabriel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Sokal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systematic Zoology</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="259" to="278" />
			<date type="published" when="1969" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Cluster generators for large highdimensional data sets with large numbers of clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Handl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Knowles</surname></persName>
		</author>
		<ptr target="http://dbkgroup.org/handl/generators" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An efficient approach to clustering in large multimedia databases with noise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hinneburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Knowledge Discovery and Data Mining</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="58" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Parallel coordinates: a tool for visualizing multi-dimensional geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Inselberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dimsdale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;90: Proceedings of the 1st conference on Visualization &apos;90</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="361" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Relative neighborhood graphs and their relatives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jaromczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Toussaint</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE</title>
		<meeting>of the IEEE</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">80</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Principal component analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">T</forename><surname>Jolliffe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Springer</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Recursive pattern: A technique for visualizing very large amounts of data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ankerst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;95: Proc. of the 6th conference on Vis</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Self-Organizing Maps, volume</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kohonen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Springer Series</publisher>
			<biblScope unit="volume">30</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Multidimensional Scaling (Quantitative Applications in the Social Sciences)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Kruskal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wish</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978" />
			<publisher>SAGE Publications</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A near optimal isosurface extraction algorithm using the span space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="73" to="84" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGGRAPH Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Multi-resolution computation and presentation of contour trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cole-Mclaughlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scorzelli</surname></persName>
		</author>
		<idno>UCRL-PROC-208680</idno>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
		<respStmt>
			<orgName>Lawrence Livermore National Laboratory</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Wavecluster: A multi-resolution clustering approach for very large spatial databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sheikholeslami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chatterjee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="428" to="439" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Applying manifold learning to plotting approximate contour trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Takahashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Okada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1185" to="1192" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A global geometric framework for nonlinear dimensionality reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tenenbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Langford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">290</biblScope>
			<biblScope unit="issue">5500</biblScope>
			<biblScope unit="page" from="2319" to="2323" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">The Visual Display of Quantitative Information, 2nd</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tufte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Ed. Graphics Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Sting: A statistical information grid approach to spatial data mining</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Muntz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="186" to="195" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Topological landscapes: A terrain metaphor for scientific data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1416" to="1423" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Detecting critical regions in scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">H</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
