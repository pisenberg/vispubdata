<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization Multi-Pipeline for Communicating Biology</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Mindek</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kouřil</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Sorger</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Toloudis</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blair</forename><surname>Lyons</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Graham</forename><surname>Johnson</surname></persName>
							<email>graham@grahamj.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Eduard</forename><surname>Gröller</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Viola</surname></persName>
						</author>
						<title level="a" type="main">Visualization Multi-Pipeline for Communicating Biology</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2017.2744518</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:40+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Biological visualization</term>
					<term>remote rendering</term>
					<term>public dissemination</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1: Several datasets integrated into a single visualization of a human induced pluripotent stem cell. Three renderings with different visualization parameters are shown.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>time in which new discoveries are made. Therefore, after the illustration is made public, it might already be obsolete. The only way to update it is to remake it from scratch. Therefore, this model is not suitable for public dissemination of state-of-the-art knowledge in biology.</p><p>Another problem is that the illustrations and animations are typically not interactive. They cannot support the learning process as efficiently as an interactive environment could. They can tell a single story, but the possibilities to adapt them to tell different stories are very limited.</p><p>We propose a novel system, called Marion, which addresses both of these problems. It offers means for creating a pipeline which connects the underlying measurement and imaging data directly with the target audience. The system includes tools for illustrators to design interactive visualizations created automatically from the underlying data, and to deliver the results directly to users over the internet. Whenever the data change, or new findings are made, the illustrations can simply be updated and the results are visible to everyone immediately. The system can either allow users to freely interact with the illustration, or it can take them on guided tours through cells or microorganisms. We designed the system to fulfill the need for public dissemination of discoveries in cell science. The goal of the system is to informatively display human cells, in a similar way to visualizations designed by illustrators. The renderings are required to be interactive and deliverable over the internet, so that they can be used for communicating various scientific discoveries to wide audiences. The renderings have to be directly derived from the underlying data, so that the pipeline does not have to change when the data are updated.</p><p>In the first step, the system loads and filters the data. The system has to support various data types, such as meshes, volumes, as well as curves describing tubular structures, since individual organelles are described with different data types. Subsequently, each of the data types has to be rendered in a unique way, while maintaining interactive framerates. For instance, the tubular structures are displayed as sets of screen-space metaballs, which can be rendered in real-time while providing an organic look of the organelles they are representing, such as mitochondria. Finally, the rendered images of the organelles, which are to be visualized, are composited by means of an order-independent transparency technique.</p><p>In our system, this pipeline is implemented as a stand-alone dynamically-linked library, which can be reused in different host applications without any changes. To demonstrate this, we implemented a desktop application with a simple user interface displaying the cell data and supporting various story-telling operations, as well as a remoterendering server, which delivers the renderings over the internet to a web-based client. Our system ensures that both GPU shader code, as well as native host code is reloaded automatically upon change. This allows the developers to quickly prototype new rendering methods, as well as maintain the code without the need of restarting the application and reloading all the data.</p><p>Our system solves an existing problem of the Allen Institute for Cell Science <ref type="bibr">(AICS)</ref>. The goal of AICS is to engage the public in cell biology with informative 3D illustrations originating from microscopy data of human cells. The data are frequently updated, e.g., new organelles are scanned, or higher resolution scans are produced. Our system ensures that the changes made to the data are immediately incorporated in the produced visualizations. Our remote-rendering solution ensures that these interactive visualizations are delivered to the users with the only requirement that they have an internet connection on their devices.</p><p>Our remote-rendering solution serves as a reference implementation of a public dissemination mechanism for biological data. It is scalable to utilize multiple graphics processing units through the use of a stateless multi-threaded rendering architecture. This ensures that multiple clients can simultaneously issue rendering requests to the server. The requests are distributed amongst the active rendering threads based on a load-balancing mechanism tailored to the rendering pipeline, automatically adapting to its possible changes. The load-balancing works independently from the actual visualization pipeline, and it is therefore easily reusable for different applications.</p><p>The contributions of this paper are:</p><p>• A novel system for fast prototyping and deployment of illustrative visualizations.</p><p>• A pipeline implemented using our system designed for public dissemination of cell biology.</p><p>• A scalable remote-rendering system for the delivery of rendered images over the internet, implemented as another application of our system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Visualization of biological structures and processes is a major part of visualization research. It has been shown that students understand concepts easily and in-depth if the material is supplemented by realistic renderings <ref type="bibr" target="#b11">[11]</ref>. Iwasa <ref type="bibr" target="#b6">[6]</ref> argues for the importance of animated content for science communication and teaching. As a consequence there has been a significant effort put into creating scientific illustrations and animations. Sharpe et al. <ref type="bibr" target="#b27">[27]</ref> provide a comprehensive overview of techniques for creating biology-based models using modern 3D software like Maya. Arguably, interactive visualizations can convey the information and help with the learning process even more than a static image or a noninteractive animation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Biological visualization systems</head><p>Rendering large biological structures at their atomic level on consumer level hardware has only been possible in the last few years. Initially, Lindow <ref type="bibr" target="#b16">[16]</ref> rendered large scenes containing microtubules made of several billion atoms. Since then, new rendering techniques have been developed to improve the performance and appearance of rendering large and complex molecular scenes <ref type="bibr" target="#b15">[15]</ref>. MegaMol <ref type="bibr" target="#b5">[5]</ref> provides a framework that serves as a prototyping tool for creating visualizations of large, particle-based datasets. Using a packing tool like cellPACK <ref type="bibr" target="#b7">[7]</ref>, is is possible to create models of HIV down to their atomic detail <ref type="bibr" target="#b8">[8]</ref>. The actual interactive visualization of cellPACK outputs have been made possible by cellVIEW <ref type="bibr" target="#b14">[14]</ref>.</p><p>Different approaches have to be taken when acquiring and displaying larger organisms. Our system uses microscopy image data to render organelles of a human cell, which cannot be feasibly modelled and rendered in its entirety on the atomic level of detail because of hardware limitations.</p><p>Walter et al. <ref type="bibr" target="#b33">[33]</ref> reviews the many different modern acquisition techniques which scientists are using to generate enormous amounts of data these days. Moreover, the authors introduce a plethora of tools for visualizing multidimensional image data.</p><p>VTK <ref type="bibr" target="#b26">[26]</ref> is a prevalent framework for computer graphics, used extensively in visualization. Multiple other popular tools for showing multidimensional images exist <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b19">19,</ref><ref type="bibr" target="#b20">20,</ref><ref type="bibr" target="#b22">[22]</ref><ref type="bibr" target="#b23">[23]</ref><ref type="bibr" target="#b24">[24]</ref><ref type="bibr" target="#b30">30]</ref>.</p><p>UCSF Chimera <ref type="bibr" target="#b19">[19]</ref> is a popular viewer for displaying and manipulating atom-resolution macromolecule structures.</p><p>ParaView <ref type="bibr" target="#b0">[1]</ref> is an open-source solution initially focused on visualizing simulation results. It uses VTK as its foundation layer and implements methods to process, analyze, and visualize large datasets.</p><p>Web-based tools play an important role, as it is the most widespread form of media used by general audience. Online Anatomical Human <ref type="bibr" target="#b29">[29]</ref> is a web based project which provides an interactive way to study human anatomy. With our system, we want to enable interactive exploration of human cells, based on various microscopy and simulation datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Remote rendering systems</head><p>The idea of remote rendering is not new and has been used in several applications. Martin <ref type="bibr" target="#b18">[18]</ref> establishes three basic approaches to rendering in a server-client environment: client-side methods, server-side methods, and hybrid methods. The server-side methods are the focus of this paper and are based on rendering all the content on a high performance server and delivering the results as images to the clients.</p><p>The most obvious reason to use remote rendering is to leverage accelerated graphics capabilities of a powerful server machine and deliver the high-quality rendering results to the client, which might be a less powerful machine, such as a tablet or a mobile phone. This has been done for example in case of intensive volume rendering <ref type="bibr" target="#b4">[4]</ref>. In this work, the server renders into an off-screen buffer, compresses the result and transfers it to the client. The client on the other hand notifies the server about user interactions.</p><p>Koller et al. <ref type="bibr" target="#b10">[10]</ref> use remote rendering as a way of securing the intellectual property of scanned high-fidelity models. The authors provide a downloadable client program by which users can view 3D models of Michelangelo's statues. The difference to our system is that the client is implemented as a web page, thus eliminating the barrier of downloading and installing the client software itself.</p><p>Ma et al. <ref type="bibr" target="#b17">[17]</ref> explore remote rendering as a way to solve the problem of both high performance and storage requirements. The issue of latency is discussed and several image compression formats are compared in order to minimize the lag observed by the user. JPEG is chosen as the most suitable compression format, therefore we also use JPEG as the format of resulting images.</p><p>Krone et al. <ref type="bibr" target="#b12">[12]</ref> used a server-client architecture to leverage the performance of a server in order to deliver high-quality visualization results. The main use case of their solution is to employ mobile devices to control a large high-resolution display. The main emphasis does not lie in the client visualization quality. Our approach instead aims to provide the best possible final visualization on the client side.</p><p>Lamberti et al. <ref type="bibr" target="#b13">[13]</ref> propose an architecture for a remote visualization system based on the Chromium software and test the performance of such a system on two model use cases: surface (mesh) rendering and volume rendering. Jomier et al. <ref type="bibr" target="#b9">[9]</ref> demonstrate the usage of ParaViewWeb, a JavaScript library that uses the processing and rendering power of either VTK or ParaView on the back-end to deliver visualizations in the browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">SYSTEM OVERVIEW: VISUALIZATION MULTI-PIPELINE</head><p>The motivation for this work is the task to make human-cell confocalmicroscopy data accessible to the general public. The raw data, in the form of intensity volumes, do not convey much on their own to laypersons. Their relatively low resolution, and multiple channels encoding individual organelles, make the data unsuitable to standard volume-rendering approaches. Therefore, illustrators manually create abstracted three dimensional depictions of the cells based on the observed data, such as the one shown in <ref type="figure" target="#fig_0">Figure 2</ref>. Here, the scanned volumes are simplified and discrete surfaces are introduced to give the viewers an idea about the shapes and spatial configuration of the cell. Such information would be very difficult to grasp from simply visually exploring the volume-rendered images of the original data.</p><p>The manually created illustrations can explain the data very efficiently. However, there are several problems with this approach.</p><p>P1: the underlying data are continuously refined, as better scanning techniques are introduced relatively frequently. The algorithms used for extracting surfaces from the volume data are also continuously improved. With each update to the data, the illustration has to be manually updated as well. This takes a significant amount of time for the illustrator, which makes it expensive to produce the updates to the illustration. After the creation of the illustration, it is also necessary to deliver it to the target audience through a variety of channels. This results in the situation that by the time the illustration reaches the target audience, it might be already outdated.</p><p>P2: with each scanned cell, a new illustration has to be created. Biologists also use shape-modeling tools to examine all possible shapes of the cells by generating synthetic data. To visualize all these synthetic cells, an automated approach of creating the illustrations is necessary.</p><p>P3: the manually created illustrations do not provide any kind of interactivity. All the rendering parameters are fixed and tailored towards a single use-case. It is difficult to use such illustrations as a presentation environment for novel discoveries, such as protein interactions. The illustrations created in this way are mostly single-purpose.</p><p>Our goal is to address all of these problems with a system, which connects the underlying data directly with the target audience by an automated pipeline creating interactive, real-time 3D visualizations. The system should allow for easy creation of thick pipelines which simulate workflows of illustrators producing multiple different images from the underlying biological data. This means the individual datasets are processed into various types of data, rendered with different visualization techniques, composited together into an illustration communicating certain message, and delivered to the target audience. We refer to such pipelines as visualization multi-pipelines. It is necessary to transfer the knowledge to the illustrator, who then, through a thin pipeline, produces a single illustration. Any new illustration, e.g., reflecting changes in the underlying data, has to be created from scratch. (b) Visualization multi-pipeline. Our system allows the illustrators to design thick pipelines, which can automatically convert the underlying data to the desired visualizations in multiple ways, producing illustrations conveying different aspects of the data. All data refinements are instantaneously reflected in all generated visualizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Visualization Multi-Pipeline</head><p>The visualization multi-pipeline extends what is commonly known as visualization pipeline by the final stage which we refer to as deployment stage. In this stage, the entire process of generating the illustrations is embedded into various host applications, which ensures the delivery of the illustrations to the target audience. This step is essential when the illustrations are intended for public dissemination purposes. The support for the deployment stage constitutes the central novelty of our system. In comparison to the existing visualization systems, our system is specifically designed so that the visualizations developed within it can be easily embedded into external applications. Thus, supporting the deployment stage of the visualization multi-pipeline. <ref type="figure" target="#fig_1">Figure 3</ref> shows the workflow of traditional illustrations (orange path) as opposed to our proposed system (blue path).</p><p>Both cases start with biology researchers gathering data through observations, measurements, and simulations (green). In a traditional, manual approach, the process continues with a knowledge-transfer, where the scientists carefully explain the underlying dataset to the illustrators. The illustrators then process the dataset in various ways, and work on abstracted depictions of the structures and processes, which need to be communicated. This requires a significant effort, and in general the result can only convey information about a single dataset -the one that has been explained to the illustrator by the scientists.</p><p>When our system is used, there are three user-roles involved -a domain expert (a biologist), an illustrator, and a programmer. Rather than explaining a single dataset that should be illustrated, the domain expert explains to the illustrator the biology processes in general. The illustrator assesses which visualization and rendering techniques will be required in order to illustrate any dataset that is supposed to convey these processes. Subsequently, the illustrator communicates with the programmer, who prepares the skeleton of the visualization multi-pipeline. The API of the system is designed in such a way that common operations, which illustrators would typically be doing, can be implemented as single-command statements. With this approach, the programmer can efficiently implement any illustrator's requests.</p><p>After the programmer translates the illustration process into the multi-pipeline, the illustrator can customize it by changing the parameter settings. Our system automatically exposes all the parameters through a user interface so that the illustrator can influence the rendering without looking into the code. Thanks to the deployment stage, all the changes made to the multi-pipeline and its parameters are automatically reflected in all applications build for this particular multi-pipeline. This makes our system suitable for public dissemination of biology, where it is necessary to illustrate large numbers of datasets on different platforms.</p><p>In contrast to the traditional approach of illustration, as well as existing visualization systems, Marion is able to produce interactive illustrations, which can be immediately deployed to different devices. The interactiveness of the generated illustrations ensures that they can be used as a platform to tell stories about cell biology, as well as to communicate new discoveries made in this field to the public, all based on the same underlying data. Alternatively, the generated illustrations can be used for inter-disciplinary communication, for instance as figures in papers, while they can be highly customized to highlight desired features of the data. Whenever the underlying data change, all the generated visualizations can be updated immediately, which is a significant advantage over the traditional approach.</p><p>The first stage, Data Processing, ensures that the data are loaded, and adequately filtered and simplified so that they are ready to be visualized. Here it is important that the complexity of the data is reduced as much as possible, while maintaining all the necessary structural information about the data. In general, multiple datasets are processed in this stage, and each of them can be converted into a different format or data type, since this might be necessary for applying different illustrative techniques.</p><p>In the second stage, the data are rendered using various illustrativevisualization techniques. Different techniques are needed, since the underlying data are of various data types, and it might be required to convey multiple aspects of each of them. For instance, the mitochondria might be displayed with volume rendering as probability clouds to show the original measured data, or they can be displayed as extracted surfaces, which are not conveying the measured data, but give a simplified idea to the laypersons what mitochondria might look like.</p><p>The third stage produces the final image by compositing all the renderings into a single visualization. Here various visualization parameters are applied to achieve desired results.</p><p>Most notably, the visualization multi-pipeline extends the traditional visualization pipeline by the last, fourth stage, which we refer to as deployment. This stage describes the application environments, into which the previous stages can be integrated. Marion aids this integration on the prototyping, development, as well as deployment level. Thanks to the inclusion of this stage in our system, it is easily possible to create applications delivering visualizations in the form of interactive content to large audiences.</p><p>The colored circles in each stage depicted in <ref type="figure" target="#fig_1">Figure 3</ref> represent the modules of our system. Marion is built in a way that it is easy to add new modules to each of the stages, and to arbitrarily combine them. To demonstrate our system, we implemented all the modules necessary to create a pipeline for public dissemination of cell biology based on confocal-microscopy data.</p><p>In the following sections, we discuss the individual stages, and the modules we implemented to realize our multi-pipeline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Data Processing</head><p>The first step in creating an illustration is to acquire the necessary data. The data processing stage has to be able to process all acquired data types, and prepare them for the rendering. Confocal laser scanning microscopy (CLSM) creates a 3D volume of the observed specimen, such as a human cell. By modifying the cells, so that some of their organelle systems produce fluorescent light when excited by the laser beam, it is possible to scan each organelle system separately. This results in several volumes, which need to be further processed: First, the organelle structures are segmented. Some of the scanned structures, such as the cell membrane, can be smoothed and converted to meshes, since they do not have to convey any volumetric information. Organelles such as microtubules or mitochondria, which form tubular structures, are in general segmented with a backbone segmentation, and only the backbones are used for the visualization. Finally, in some situations, it is also necessary to show the original data in the volumetric form. We implemented modules for loading and smoothing of volumes, meshes, and backbone segmentations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Rendering</head><p>After the data processing, the datasets are rendered. Since the input data are diverse (volumes, meshes, backbones), there has to be a separate renderer for each data type.</p><p>For rendering volumes and meshes, we use well known methods, such as directional occlusion shading <ref type="bibr" target="#b25">[25]</ref> or volume raycasting. For both mesh and volume rendering, we provide the same set of shaders to mimic the look of the visual appearance created by illustrators.</p><p>Each renderer is realized as a standalone module, which renders the input dataset into an off-screen buffer. The renderers have to output the depth-buffer for each image too, so that the individual images can be later composed together in image-space with the depth testing implemented as a post-processing effect. Thanks to this design it is possible to split the rendering tasks between separate GPUs if necessary, since before compositing the renderers are independent of each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Compositing</head><p>After the rendering, all the images are composited into a single visualization. For that purpose, all the renderers have to produce images with the same size and the same format of the depth buffer. Based on the depth information, we are able to composite the images by means of order-independent transparency. For semi-transparent volumetric renderings, an approximation has to be taken, such as assuming a solid surface where the opacity accumulates above a certain threshold. In our application area, we are working with volumes obtained by 3D fluorescent microscopy, where each volume contains only a single object, and so there are no nested structures. Therefore, for our purposes, this is a satisfactory approximation, as shown in Section 5.</p><p>The order-independent transparency technique ensures that the individual organelles can be rendered semi-transparently, or turned off completely. Additionally, this way of rendering allows for applying certain post-processing effects on individual layers, such as contours or halos. This is necessary to achieve those visual effects which illustrators use for particular storytelling or highlighting purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Deployment</head><p>To finalize the pipeline between the original data and target audience, Marion implements the fourth stage -Deployment. In this stage, the visualization created in the previous stages is placed within a suitable software environment so that it can be delivered to the final users. This is done in a fast and flexible manner which supports fast prototyping as well as deploying of the finalized solutions.</p><p>The modules within this stage are in fact applications, in which the previous stages are embedded. With its internal architecture and helper tools , Marion ensures that this embedding is easily possible, and the same visualization pipeline is reusable across multiple applications. This means that in case one of the previous stages is modified, these changes are automatically passed on to in all applications within the deployment stage. This happens without the necessity to change any application code, or even to restart running applications. This is advantageous in case the application is a running server, since it is possible to update its visualization pipeline without any downtime. Additionally, this design supports fast prototyping of the visualization code, since it avoids all the data having to be reloaded on every change of the visualization pipeline.</p><p>We implemented two applications within the deployment stage to demonstrate the possibilities of our system. The first one is a desktop application, which provides a user interface for setting the visualization parameters. The application is scriptable and it can be used to create story-telling animations using the cell-visualization pipeline.</p><p>The second application consists of a remote-rendering server and thin client handling the interaction and displaying of the rendered images. This application is used to deliver the visualized content in an interactive manner to the target users over the internet. All the rendering happens on the server, where a load-balancing mechanism is in place. All the interaction is implemented on the client side, and it allows the users to set the desired rendering parameters. The client part can be embedded in any web-page, while the server can handle multiple users at the same time. The server is independent of the actual visualization pipeline, and its load-balancing mechanism automatically adjusts to it . Therefore, no server code has to be changed when the visualization pipeline is updated.</p><p>Both applications implemented within the deployment stage of our system support the public dissemination of biology knowledge based on measured or simulated data. The remote-rendering solution makes the interactive visualization available also on devices which lack the necessary processing power to create such visualizations on their own.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">SYSTEM ARCHITECTURE</head><p>The purpose of our system is to make a database of cell-microscopy scans accessible to laypersons in the form of interactive illustrations. The database is constantly being updated with higher quality scans, as well as by adding new datasets. Additionally, it is often necessary that the created illustrations are deployed to new platforms, or reused in different applications. This is typically very difficult to achieve with existing visualization systems, where the visualization pipelines are integral parts of a specific application.</p><p>Therefore, the contribution of this paper is twofold: an architecture of a system that allows development of visualization pipelines in such a dynamic environment, which is described in this section; the second contribution is an actual pipeline implemented within the system, which creates interactive illustrations of cells from the microscopy data, which is described in Section 5.</p><p>From the software architecture point of view, Marion consists of two main components, i.e., the visualization layer and the application layer. The visualization layer is used to implement the first three stages of the visualization multi-pipeline as shown in <ref type="figure" target="#fig_1">Figure 3</ref>. The application layer implements the deployment stage. Within the deployment stage, standalone applications, which use Marion, are written.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Visualization Layer</head><p>The visualization layer of our system is implemented as a standalone library. In this layer, all the modules necessary for data processing, rendering, and compositing are implemented. Additionally, the library provides functionality for fast prototyping and deployment of the modules. In this layer, the whole visualization is designed. This layer is not concerned with any sort of interaction. Its sole task is to render an image according to the given visualization parameters and input data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">System</head><p>The system part of the visualization layer is responsible for handling the code and the resources of the visualization multi-pipeline. On its own, this part of the visualization layer can be used for general purpose graphics applications and it is not restricted only to visualization tasks.</p><p>Our system is build in a way that it supports both fast low-level prototyping of illustrative rendering techniques and quick deployment to different platforms. This mean the outputs of our system can be quickly adapted to new types of data, directly within a running infrastructure without any significant down-times. Existing toolkits, such as VTK or ParaView, do not offer such functionality. They provide means for fast prototyping, but unlike in our system, the deployment of these prototypes to different platforms is tedious. Code For the development of complex, extensible visualizations, it is necessary to have a possibility to structure the code into modules in an intuitive way. In scientific visualization, two types of code are being used -CPU (or host) code, and GPU (or device) code. The visualization layer offers an encapsulating structure for both types of code. For the CPU code the structure is referred to as dynamic plugin, while for the GPU code it is referred to as dynamic shader. The developer can create an arbitrary number of dynamic plugins and dynamic shaders. Both types of the code modules have in common that the visualization layer automatically reloads them when the files in which they are stored are modified. For the GPU code this is trivial, since the GPU shaders are always compiled during the application run-time. For the CPU code, this is achieved through the use of dynamically-linked libraries. More details about this mechanism are given in Section 6.</p><p>Thanks to the dynamic reloading of the code modules, it is possible to observe the implementation changes immediately, without restarting the host application and reloading all the data, which might otherwise take a significant amount of time. In this way, the visualization layer ensures fast prototyping of visualization multi-pipelines.</p><p>Resources In the visualization of scientific data, various types of resources are frequently used. These are code modules (dynamic shaders and dynamic plugins), and buffers, such as render targets, textures, or datasets. In order to enable fast prototyping and development of visualization algorithms, the usage of these resources has to be simplified as much as possible.</p><p>The visualization layer implements a resource manager. All the resources are stored in dictionaries, implemented as hash maps, where the keys are string IDs. In this way, all the code modules, datasets, and GPU buffers are stored. They are created with a unique ID, which can be later used to retrieve them. The creation, as well as referencing a particular resource, is reduced to a single function call, where the unique ID is passed as a parameter.</p><p>In the background, the visualization layer handles these resources in specific ways. For instance, it ensures that the dynamic shaders and the dynamic plugins are reloaded whenever they are modified, e.g., after recompilation. Specific types of GPU buffers, the frame-buffer objects, which are used as rendering targets, are automatically re-sized when a re-size signal is received by the visualization layer. Therefore, the creation and usage of all types of resources is comfortable, since these mechanisms are hidden from the programmer. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Modules</head><p>The modules within the visualization layer implement individual algorithms for loading, processing, and rendering data. Typically, they are implemented as either dynamic shaders, dynamic plugins, or an arbitrary combination thereof. However, it is also possible to implement them as static libraries, compiled together with the rest of the visualization layer. In this case, the developer trades the flexibility of dynamic shaders and dynamic plugins for a possible performance increase, or compactness of the final application.</p><p>Data processing For the purpose of the data processing modules, the visualization layer contains data structures for holding meshes, volumes, and fiber structures (sets of one-dimensional poly-lines, i.e., a generalization of point clouds) . These structures are stored in a paged memory layout, which means that for each dataset a certain number of continuous memory blocks, or pages, is allocated. This ensures a relative data locality. However, it is scalable to large datasets that might otherwise not fit in the memory in a completely continuous way.</p><p>Rendering The rendering modules are based on OpenGL. Generally, they only render into off-screen buffers, which are managed by the visualization layer. It is the task of the host application to display the final rendering on screen, if desired.</p><p>Compositing For the purpose of the compositing of the final images from the individual renderings, the visualization layer is designed in a way that all the resources are global, and they are accessible to all the modules. This is realized by automatically providing a pointer to the visualization layer instance to every module. Through this pointer, the modules can access the resource dictionaries, which contain all the frame-buffer objects that are used by the rendering modules as render targets. Therefore, the compositing modules can access previously rendered images, as well as their depth buffers, and implement various compositing schemes, such as order-independent transparency. Similarly to the rendering modules, the output of a compositing module is also an off-screen buffer, which can be used by the host application in a flexible way. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Application Layer</head><p>The application layer of the Marion system consists of host applications, which embed a visualization multi-pipeline implemented through the visualization layer. This layer ensures that the visualizations can be easily deployed to the target audiences across different software and hardware platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Scenes</head><p>In order to make the visualization multi-pipelines easily reusable across multiple applications, we introduce the concept of scenes. Each scene implements a single multi-pipeline by accessing the visualization layer of the Marion system. The scenes are implemented as dynamic plugins. Therefore, each scene contains an independent code, that produces one or more images stored in the off-screen buffers managed by the Marion's resource manager. The scenes carry additional information, such as the starting time and the duration. This information can be used when the final visualization consists of several animated sequences, where each sequence is implemented as a single scene.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Applications</head><p>The final step of connecting the underlying data with the target audience is to implement a host application. These applications can use any functionality of the visualization layer of Marion. However, the intended usage of the system is that all the rendering functionality is implemented within the scenes, and the host application is only using existing scenes. In this way, the visualization code is centralized and shared amongst all the applications that might be developed. The host applications are then either showing the rendered images, or sending them over the network to their target audience. Changes made to the scenes, either because of the changes in the nature of the underlying data, or because of an aesthetic choice, are automatically reflected in all applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">SYSTEM IN ACTION: COMMUNICATING CELL BIOLOGY</head><p>In this section, we describe the visualization multi-pipeline which we implemented within Marion for creating illustrations of cells, which are visually comparable to the professional illustration shown in <ref type="figure" target="#fig_0">Figure 2</ref>. However, the requirements are that the cells are visualized in real-time, and delivered to the target audience over the internet or in a form of video, this avoiding the necessity of the users owning a high-end graphics hardware. The modules we implemented to achieve this goal are shown in <ref type="figure" target="#fig_3">Figure 5</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Data processing</head><p>At the current stage, four different organelle systems of a human induced pluripotent stem cell are being scanned by our collaborators in the form of image stacks forming 3D volumes. A single slice from each volume is shown in <ref type="figure" target="#fig_4">Figure 6</ref>. A direct volume rendering of these datasets would not result in a comprehensible visualization of the organelle systems, since they are too noisy and their resolution is too low. Therefore, we implement several modules to process these data and extract models suitable for creating illustrative visualizations.</p><p>In the final visualization of the cell, it is necessary to communicate the approximate shape of the cell membrane and the nucleus, as well as the relative size and position of the nucleus within the cell. All the other information present in the acquired data can be abstracted away, since they would reduce the clarity of the resulting visualization without providing any added value. Direct volume rendering of the raw nucleus data is shown in <ref type="figure" target="#fig_5">Figure 7a</ref>.</p><p>To extract an approximate shape of the membrane and the nucleus from the original data, a segmentation mask is created for both structures. For the membrane, seeded watershed <ref type="bibr" target="#b21">[21]</ref> is used. The segmentation of the nucleus is the result of a combination of adaptive local normalization, 3D level set segmentation, and weighted seed merging. This results in noise-free volumes describing the shapes of the structures. However, their resolution is still too low.</p><p>To extract smooth surfaces from the generated segmentation masks, the masks are filtered with a three-dimensional Gaussian kernel. Subsequently, iso-surfaces are extracted. The result of this process, a smooth surface suitable for an illustration, is shown in <ref type="figure" target="#fig_5">Figure 7b</ref>.</p><p>The same approach cannot be used on much finer organelles, namely the mitochondria and the microtubules, since they are too fuzzy for meaningful surfaces to be extracted from the data. Instead, center-lines are extracted for these organelles. For this purpose, MitoGraph <ref type="bibr" target="#b32">[32]</ref> is used. We up-sample the extracted center-lines and filter them with a 1D Gaussian kernel, since the low resolution of the original data causes staircase artifacts. Up-sampling and filtering produces smooth curves. <ref type="figure" target="#fig_5">Figure 7c</ref> shows how the mitochondria dataset looks like when directly visualized, <ref type="figure" target="#fig_5">Figure 7d</ref> shows the extracted center-lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Rendering</head><p>In the next step, each of the organelle system is rendered into a separate image. We have implemented several shaders useful for achieving the desired illustrative visual style. For the membrane <ref type="figure" target="#fig_6">(Figure 8a</ref>) and the nucleus <ref type="figure" target="#fig_6">(Figure 8b)</ref>, contours are used together with a Fresnel shader to indicate the 3D shape of these structures. The contours are calculated by applying a Sobel operator to the depth buffer, which ensures that the inner contours are included as well. The nucleus additionally uses tone-mapping to achieve a less synthetic look.</p><p>To achieve an organic look of the mitochondria <ref type="figure" target="#fig_6">(Figure 8c</ref>) and microtubules <ref type="figure" target="#fig_6">(Figure 8d)</ref>, for which the center-lines have been extracted, metaballs are used. The metaballs technique has originally been introduced by Blinn <ref type="bibr" target="#b1">[2]</ref> for rendering molecular data. We place a single metaball on every vertex of every center-line. We implemented a screenspace approximation, which is able to render a dataset consisting of approximately 65000 vertices, in real-time. However, the approach is scalable to a much larger number of vertices, since it is performed in screen-space.</p><p>The algorithm renders sphere impostors in place of each vertex, which is realized through billboarding. Separate color, depth, and normal buffers are rendered. The normal buffer is blurred, and deferred shading is applied to compose the final image approximating the visual appearance of metaballs.</p><p>In order to adequately illustrate the organelle surfaces, it is necessary that the metaballs belonging to different mitochondria or microtubules do not blend into each other. Therefore, for the blurring step, we use a trilateral filter, which calculates the kernel weights based on the pixel distance, the differences in depth, and whether pixels belong to the same mitochondrion or not. This ensures that the screen-space edges between different mitochondria are not blurred, while the depth component ensures that the different parts of a single mitochondrion, which are not next to each other, are not blurred either. The results of this rendering method are shown in <ref type="figure" target="#fig_7">Figure 9</ref>.</p><p>Even though the trilateral filter is not separable, we approximatively divide it into a vertical and a horizontal pass. This causes some undesired artifacts, however, since the center-lines are densely sampled in the data processing step, only a small blur radius is required to compensate this through the metaball effect and the amount of visual artifacts is therefore negligible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Compositing</head><p>After all the organelle systems are rendered, they have to be composited. For this we use a simple order-independent transparency method. For the nucleus, mitochondria, and microtubules, the corresponding depthvalues for each pixel are sorted and the color-values are composited in a back-to-front order using alpha blending. The membrane is then simply blended on top of this image, since the membrane is always the outermost structure. The final image is shown in <ref type="figure" target="#fig_6">Figure 8e</ref>.</p><p>Blending the semi-transparent membrane on top of the other organelles in screen-space allows us to use screen-space effects which depend on the depth information, such as screen-space ambient occlusion, depth-of-field, or fog. Compositing the membrane with other organelles in object-space would still allow us to use semi-transparency for each organelle system, but we would not be able to apply these effects. <ref type="figure" target="#fig_8">Figure 10</ref> shows a cell rendered without and with the screenspace effects. Applying the effects enhances the depth perception of the individual objects, while their screen-space implementations ensures the scalability of the visualization for large datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Deployment</head><p>The final step of making the cell data accessible to the general public is the deployment of the visualization designed in the previous steps. With the requirement of reaching as large an audience as possible, we implemented the previous steps into two separate scenes, as described in Section 4.2 so that they can be reused in different applications. The first scene contains the data loading and processing, while the second scene contains the rendering and compositing. The reason for this is that we can modify the visualization pipeline while the host application is still running. If the data loading and processing would be part of this scene, it would be executed every time we change the visualization pipeline, which is not desirable.</p><p>We implemented two distinct applications within the deployment stage, both reusing these scenes. These applications are described in the following subsections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.1">Virtual Cell -A Storytelling Application</head><p>We implemented a desktop application which uses both scenes mentioned in previous section to display the cell on the screen. The added value of the application is a graphical user interface, through which the visualization parameters of individual stages can be specified. The parameter settings can be stored in so-called presets. The presets can be timed using a simple scripting interface. The application then interpolates all the parameters in accordance with the created script. In this way, it is possible to create animations within the entire parameter space of the visualization. Another use case is to expose the user interface and allow the users to freely explore the visualization parameter space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.2">Remote-Rendering Server</head><p>To be able to deliver the cell visualizations to large audiences, we implemented a remote-rendering server. The server uses both scenes implementing the visualization, but does not display it on the screen. Instead, it acts as an application server listening to connections from clients. Each client can request an image rendered with given parameters. The remote-rendering server executes each request by rendering the image in an off-screen buffer, and sending the result back to the client over a WebSocket interface encoded as a JPEG image. The server supports multi-threaded rendering with a load-balancing mechanism for the utilization of multiple GPUs, if these are present. The multi-threaded rendering works by starting several threads and creating a separate OpenGL context for each of the threads. All the data are loaded separately within each of the contexts, so that the rendering can be done independently in each thread. The XYZ extension can be used to specify the affinity of each thread to a separate GPU, if this operation is supported in the given system.</p><p>The load-balancing mechanism chooses which thread is used to render a request. For this, an estimate of the rendering duration of each request is necessary. The rendering threads have request queues, where the incoming requests are placed. The sum of the estimated rendering durations of all requests in a queue gives an estimated load of the given thread. The load-balancing mechanism always places an incoming request into the queue with the lowest estimated load.</p><p>For this mechanism to work, it is essential that the system can realistically calculate estimated rendering durations of the incoming requests. To achieve this, upon startup the server samples the parameter space of the visualization by creating permutations of the parameter settings. Subsequently, it renders the scene a predefined number of times for each parameter setting and from different viewpoints. The duration of each rendering is recorded, and the durations for all the renderings from different viewpoints for the same parameter setting are averaged. These averages are stored. Whenever a request arrives, the server looks up the averaged rendering times for the parameter settings of this request. Subsequently it is used as an estimation of the rendering duration. In our use-case, we take the visibilities of the individual organelle systems as the relevant parameter settings, since turning on or off organelle systems has the most significant influence on the duration of the rendering.</p><p>The server uses the visualization multi-pipeline for rendering samples of the parameter settings without making any assumptions on how the multi-pipeline actually works. Therefore, the load-balancing mechanism automatically adapts to a particular implementation of the visualization multi-pipeline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.3">Remote-Rendering Client</head><p>Our remote-rendering solution utilizes a thin client, which implements a user interface to set the visualization parameters, as well as a camera widget based on ArcBall <ref type="bibr" target="#b28">[28]</ref> rotations. The client does not have any rendering capabilities, it only shows the images received from the server. The client is implemented in JavaScript. With this design, it is possible to run the client on a large variety of devices, which are not required to be equipped with a powerful GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">IMPLEMENTATION</head><p>Our system is implemented in C++ and it uses the Qt library <ref type="bibr" target="#b31">[31]</ref>. The rendering is based on OpenGL. Besides that, there are no other dependencies. The entire visualization layer, as well as the individual scenes, are implemented as dynamically-linked libraries. Therefore, it is possible to use the system without static linking.</p><p>An important aspect of our system is that it is able to reload CPU and GPU code without restarting the host application. For the GPU code this is done by watching changes of the shader files, and upon their modification, the respective shaders are recompiled in the runtime. For the CPU code, it is required that the code is compiled into a dynamically-linked library. Instead of loading it directly, the system  makes a copy of the library file and loads the copy. In this way, it is still possible to modify the original library file, e.g., through a recompilation of the particular program. Marion watches the changes of the original library file. Whenever a modification is detected, it unlinks the library and erases the copy from which the library has been loaded. It then proceeds to create a copy of the new version of the library, and loads it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">DISCUSSION AND FUTURE WORK</head><p>Our remote-rendering solution is going to be deployed at the AICS to support the public dissemination of their microscopy data of human cells. After the deployment, we plan to evaluate the performance of the system on the large user group composed of AICS website visitors. The illustrators and visualization tool software engineers at the AICS specified a set of requirements for the rendering of cells, so that the datasets are easily understandable by the general public. The illustrators also confirmed that our system fulfills their requirements. These include the possibility to use depth-cueing effects, such as fog and depth of field; illustrative effects, such as Fresnel shaders applicable to any channel, contours, and metaball rendering; composition of the individual organelles by means of order-independent transparency; volume rendering of noisy data, which we achieved by gradient-free shading. Additionally, the system exposes all the necessary parameters through the user interface, so that the illustrators have full control over such aspects as the level of simplification of the datasets.</p><p>In the future, we intend to present certain discoveries based on nanoscale models of the cellular structures at atomic detail. Such discoveries might be, for instance, protein colocalizations, interactions or other functional aspects derived from structural changes in the cells.</p><p>Our system already supports this multiscale aspect, as we already implemented a molecular rendering module within Marion, which can currently be used for rendering microtubules on molecular scale (as demonstrated in <ref type="figure" target="#fig_9">Figure 11)</ref>. We plan to further extend the nanoscale rendering capabilities with more complex mechanisms to support dynamic scenes of molecular interactions.</p><p>The interactions with the current single-scale visualizations can be handled by the standard features of the underlying Qt library. Therefore, no additional abstraction level was needed. For a proper support of interactions with multiscale data, however, our system will need to be extended by special interaction modules. One of these modules is a multiscale camera, which adapts the zoom speed semantically, based on the target of a zoom operation.</p><p>Another aspect we would like to explore in the future, are multiuser guided tours within the cell. Such guided tours can be used for teaching through interactive storytelling. This will allow users to virtually experience new biological discoveries through interactive tours guided by narration.We are also working on tools for comparing two or more cells both visually, statistically, and methods to integrate these two approaches.</p><p>Since the discoveries of the Allen Institute will be publicly announced, it might happen that the remote-rendering server load will peak shortly after the announcements. Our load-balancing mechanism can already efficiently utilize the resources available to the server, but this might not be enough during the peak times. Therefore, we plan to investigate further scalability options. One idea is to introduce a smart caching system, where the images, which have been already rendered, are stored. Whenever a similar image is requested, the respective image is taken from the cache, transformed in image-space so that it fits the request, and is sent to the user. The system would avoid caching images that are too similar, for instance with respect to the camera settings. In this way, a lot of processing power can be saved, and reasonable storage requirements can be maintained.</p><p>While our system is tailored to biological visualization, it includes modules covering many illustrative-rendering tasks to help focus the attention of different types of end users. It contains functionality for volume and mesh rendering, various illustrative effects such as contours and depth-of-field, and several simple filters like Gaussian and bilateral blur. These can be arbitrarily combined in order to use our system in different applications. Besides the data structures for storing volumes, meshes, and point clouds, the system also includes low-level memory structures for holding arbitrary data. This makes it convenient to extend the system to support new data types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSIONS</head><p>We presented a system for the dissemination of knowledge in cell science by means of interactive illustrative visualizations. Our system is powered by a visualization multi-pipeline that specifically targets two aspects that are associated with this task. First, it is capable of handling the illustrative visualization of volumetric data of various origins and degrees of quality. In order to achieve this, the multipipeline offers several modules for the processing and rendering of heterogeneous data sources that can be combined sequentially and in parallel. Secondly, the multi-pipeline allows the deployment of the generated visualizations at interactive frame rates to a wide range of software environments and output devices. Our system is therefore specially tailored to the quickly changing and accumulating data types and data entries of the short lived research results that are produced by cutting edge cell science. The flexibility of our system enables scientists to explore their data in the raw volumetric and in the refined illustrative representations. At the same time, guided illustrations with simple interactions can be produced for public knowledge dissemination, by allowing the partial masking the system's features and by supporting scripted changes of parametrizations. We demonstrated the capabilities of our multi-pipeline based on a real world application that will be publicly available. We are excited about the potential of our system with the goal of integrating all available data about human cells in a single framework.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 :</head><label>2</label><figDesc>An illustration of a few human induced pluripotent stem cells. It was created manually in 3D modelling software, based on the measured data. The rendering took several minutes. Illustration by Graham Johnson.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 :</head><label>3</label><figDesc>(a) Traditional scientific illustration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 :</head><label>4</label><figDesc>The architecture of our system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 :</head><label>5</label><figDesc>Overview of the modules implemented within our system in the individual stages of the visualization multi-pipeline for illustrative visualization of the cell microscopy data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 :</head><label>6</label><figDesc>The original data as scanned by the confocal microscope. (a) Cell membrane, (b) nucleus, (c) mitochondria, (d) microtubules.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 :</head><label>7</label><figDesc>(a) Direct volume rendering of the raw nucleus data: due to the high level of noise in the original data, direct volume rendering does not convey the shape of the nucleus well. (b) Visualization of the extracted nucleus surface. (c) Direct volume rendering of the raw mitochondria data. (d) Extracted center-lines for the individual mitochondria.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 :</head><label>8</label><figDesc>Individual organelle systems extracted from the original data. (a) Cell membrane, (b) nucleus, (c) mitochondria, (d) microtubules, (e) final composed image.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9 :</head><label>9</label><figDesc>(a) Center-lines extracted from the mitochondria dataset. (b) Every vertex is replaced by an impostor sphere. (c) The normal buffer is blurred with a trilateral filter, which makes individual mitochondria appear as smooth 3D objects. The filter prevents individual mitochondria to blend into each other. Additionally, screen-space ambient occlusion, depth of field, and fog effects have been applied in a post-processing step to provide sufficient depth cues for the scene. The screen-space implementation ensures interactive frame rates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 10 :</head><label>10</label><figDesc>(a)  No post-processing effects are used. (b) Screen-space ambient occlusion, screen-space volumetric fog, and screen-space depthof-field are applied. Since the semi-transparent membrane is blended in image-space on top of the rest of the scene, it is possible to use these screen-space effects together with the semi-transparent membrane.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 11 :</head><label>11</label><figDesc>Detail of a microtubule rendered at a nanoscale resolution.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This project has been funded by the Vienna Science and Technology Fund (WWTF) through project VRG11-010 and also supported by EC Marie Curie Career Integration Grant through project PCIG13-GA-2013-618680 and ManyViews, OeAD Scientific &amp; Technological Agreement SK 14/2016. Johannes Sorger has been partially supported in the scope of the FWF-funded project P24597-N23 (VISAR) and the COMET K1 program of the Austrian Funding Agency (FFG).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Paraview: An end-user tool for large data visualization. The Visualization Handbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Geveci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Law</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">717</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A generalization of algebraic surface drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Blinn</surname></persName>
		</author>
		<idno type="DOI">10.1145/800064.801290</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH &apos;82</title>
		<meeting>the 9th Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH &apos;82<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1982" />
			<biblScope unit="page">273</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Volumeshop: Interactive direct volume illustration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bruckner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Viola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Gröller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH 2005 Sketches, SIGGRAPH &apos;05</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<idno type="DOI">10.1145/1187112.1187183</idno>
		<imprint>
			<date type="published" when="2005" />
			<publisher>ACM</publisher>
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Combining local and remote visualization techniques for interactive volume rendering in medical applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hastreiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Tomandl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Eberhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<idno type="DOI">10.1109/VISUAL.2000.885729</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization 2000. VIS 2000 (Cat. No.00CH37145)</title>
		<meeting>Visualization 2000. VIS 2000 (Cat. No.00CH37145)</meeting>
		<imprint>
			<date type="published" when="2000-10" />
			<biblScope unit="page" from="449" to="452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">MegaMol-A Prototyping Framework for Particle-Based Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Grottel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Krone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Reina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Vis Comput Graph</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="201" to="214" />
			<date type="published" when="2015-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Animating the model figure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Iwasa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trends Cell Biol</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="699" to="704" />
			<date type="published" when="2010-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">cellPACK: a virtual mesoscope to model and visualize structural systems biology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">T</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Autin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Al-Alusi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Goodsell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Sanner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Olson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Methods</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="85" to="91" />
			<date type="published" when="2015-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">3D molecular models of whole HIV-1 virions generated with cellPACK</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">T</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Goodsell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Autin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Sanner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Olson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Faraday Discuss</title>
		<imprint>
			<biblScope unit="volume">169</biblScope>
			<biblScope unit="page" from="23" to="44" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Remote visualization of large datasets with midas and paraviewweb</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jomier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jourdain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Ayachit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Marion</surname></persName>
		</author>
		<idno type="DOI">10.1145/2010425.2010450</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Conference on 3D Web Technology, Web3D &apos;11</title>
		<meeting>the 16th International Conference on 3D Web Technology, Web3D &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="147" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Protected interactive 3d graphics via remote rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Turitzin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tarini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Croccia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
		<idno type="DOI">10.1145/1186562.1015782</idno>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH 2004 Papers, SIGGRAPH &apos;04</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="695" to="703" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Education catching up with science: preparing students for threedimensional literacy in cell biology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">M</forename><surname>Kramer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">R</forename><surname>Dahmani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Delouche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bidabe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schneeberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CBE Life Sci Educ</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="437" to="447" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Remote rendering and user interaction on mobile devices for scientific visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Krone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<idno type="DOI">10.1145/2801040.2801057</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Symposium on Visual Information Communication and Interaction, VINCI &apos;15</title>
		<meeting>the 8th International Symposium on Visual Information Communication and Interaction, VINCI &apos;15<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="21" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A streaming-based solution for remote visualization of 3d graphics on mobile devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Lamberti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sanna</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2007.29</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="247" to="260" />
			<date type="published" when="2007-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">cellview: A tool for illustrative and multi-scale rendering of large biomolecular datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Le</forename><surname>Muzic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Autin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Parulek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Viola</surname></persName>
		</author>
		<idno type="DOI">10.2312/vcbm.20151209</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eurographics Workshop on Visual Computing for Biology and Medicine, VCBM &apos;15</title>
		<meeting>the Eurographics Workshop on Visual Computing for Biology and Medicine, VCBM &apos;15<address><addrLine>Airela-Ville, Switzerland, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="61" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Illustrative visualization of molecular reactions using omniscient intelligence and passive agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Le</forename><surname>Muzic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Parulek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stavrum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Viola</surname></persName>
		</author>
		<idno type="DOI">10.1111/cgf.12370</idno>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="141" to="150" />
			<date type="published" when="2014-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Interactive rendering of materials and biological structures on atomic and nanoscopic scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lindow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Baum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2012.03128.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3pt4</biblScope>
			<biblScope unit="page" from="1325" to="1334" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">High performance visualization of timevarying volume data over a wide-area network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Camp</surname></persName>
		</author>
		<idno type="DOI">10.1109/SC.2000.10000</idno>
	</analytic>
	<monogr>
		<title level="m">Supercomputing, ACM/IEEE 2000 Conference</title>
		<imprint>
			<date type="published" when="2000-11" />
			<biblScope unit="page" from="29" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Adaptive rendering of 3d models over networks using multiple modalities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">M</forename><surname>Martin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Ucsf chimera -a visualization system for exploratory research and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">F</forename><surname>Pettersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Goddard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S</forename><surname>Couch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Greenblatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">C</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Ferrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Chemistry</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">13</biblScope>
			<biblScope unit="page" from="1605" to="1612" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pieper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Halle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kikinis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-04" />
			<biblScope unit="page" from="632" to="637" />
		</imprint>
	</monogr>
	<note>3d slicer</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Seeded Watersheds for Combined Segmentation and Tracking of Cells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pinidiyaarachchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wählby</surname></persName>
		</author>
		<idno type="DOI">10.1007/1155359541</idno>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Springer</publisher>
			<biblScope unit="page" from="336" to="343" />
			<pubPlace>Berlin Heidelberg; Berlin, Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">OsiriX: an open-source software for navigating in multidimensional DICOM images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rosset</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Spadola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ratib</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Digit Imaging</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="205" to="216" />
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Fiji: an open-source platform for biological-image analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schindelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Arganda-Carreras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Frise</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kaynig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Longair</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pietzsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Preibisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rueden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Saalfeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Y</forename><surname>Tinevez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Hartenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Eliceiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Tomancak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cardona</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nat. Methods</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="676" to="682" />
			<date type="published" when="2012-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The ImageJ ecosystem: An open platform for biomedical image analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schindelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Rueden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Hiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename><surname>Eliceiri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mol. Reprod. Dev</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="issue">7-8</biblScope>
			<biblScope unit="page" from="518" to="529" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A directional occlusion shading model for interactive direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pegoraro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Boulanger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bouatouch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum</title>
		<imprint>
			<publisher>Wiley Online Library</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="855" to="862" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<title level="m">An Object-oriented Approach to 3D Graphics</title>
		<meeting><address><addrLine>Upper Saddle River, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice-Hall, Inc</publisher>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>The Visualization Toolkit</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sharpe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Lumsden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Woolridge</surname></persName>
		</author>
		<title level="m">Silico: 3D Animation and Simulation of Cell Biology with Maya and MEL</title>
		<meeting><address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Arcball: a user interface for specifying three-dimensional orientation using a mouse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shoemake</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Interface</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">92</biblScope>
			<biblScope unit="page" from="151" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The Online Anatomical Human: Web-based Anatomy Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Smit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-W</forename><surname>Hofstede</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kraima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jansma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Deruiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Eisemann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vilanova</surname></persName>
		</author>
		<idno type="DOI">10.2312/eged.20161025</idno>
	</analytic>
	<monogr>
		<title level="m">EG 2016 -Education Papers. The Eurographics Association</title>
		<editor>B. S. Santos and J.-M. Dischler</editor>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Inviwo -An Extensible, Multi-Purpose Visualization Framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sundén</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Steneteg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kottravel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jönsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Englund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Falk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ropinski</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>Poster at IEEE Vis</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">The Qt Company. Qt</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Quantifying mitochondrial content in living cells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Viana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Rafelski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods in cell biology</title>
		<imprint>
			<biblScope unit="volume">125</biblScope>
			<biblScope unit="page" from="77" to="93" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Visualization of image data from cells to organisms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Walter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Shattuck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Baldock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Bastin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Duce</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ellenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pieper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Ragan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Tomancak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-K</forename><surname>Hériché</surname></persName>
		</author>
		<idno type="DOI">10.1038/nmeth.1431</idno>
	</analytic>
	<monogr>
		<title level="j">Nat Methods</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="26" to="41" />
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
	<note>Suppl</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
