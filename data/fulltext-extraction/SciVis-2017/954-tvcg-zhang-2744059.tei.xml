<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Dynamic Load Balancing Based on Constrained K-D Tree Decomposition for Parallel Particle Tracing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiang</forename><surname>Zhang</surname></persName>
							<email>jiang.zhang@pku.edu</email>
							<affiliation key="aff0">
								<orgName type="department">School of EECS</orgName>
								<orgName type="laboratory">are with Key Laboratory of Machine Perception (Ministry of Education)</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Mathematics and Computer Science Division</orgName>
								<orgName type="department" key="dep2">Argonne National Laboratory</orgName>
								<address>
									<postCode>60439</postCode>
									<settlement>Lemont</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Hanqi</forename><surname>Guo</surname></persName>
							<email>hguo@anl.gov</email>
							<affiliation key="aff0">
								<orgName type="department">School of EECS</orgName>
								<orgName type="laboratory">are with Key Laboratory of Machine Perception (Ministry of Education)</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fan</forename><surname>Hong</surname></persName>
							<email>fan.hong@pku.edu</email>
							<affiliation key="aff0">
								<orgName type="department">School of EECS</orgName>
								<orgName type="laboratory">are with Key Laboratory of Machine Perception (Ministry of Education)</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Mathematics and Computer Science Division</orgName>
								<orgName type="department" key="dep2">Argonne National Laboratory</orgName>
								<address>
									<postCode>60439</postCode>
									<settlement>Lemont</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Senior Member, IEEE</roleName><forename type="first">Xiaoru</forename><surname>Yuan</surname></persName>
							<email>xiaoru.yuan@pku.edu</email>
							<affiliation key="aff0">
								<orgName type="department">School of EECS</orgName>
								<orgName type="laboratory">are with Key Laboratory of Machine Perception (Ministry of Education)</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Mathematics and Computer Science Division</orgName>
								<orgName type="department" key="dep2">Argonne National Laboratory</orgName>
								<address>
									<postCode>60439</postCode>
									<settlement>Lemont</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Tom</forename><surname>Peterka</surname></persName>
							<email>tpeterka@mcs.anl.gov</email>
							<affiliation key="aff0">
								<orgName type="department">School of EECS</orgName>
								<orgName type="laboratory">are with Key Laboratory of Machine Perception (Ministry of Education)</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Dynamic Load Balancing Based on Constrained K-D Tree Decomposition for Parallel Particle Tracing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2017.2744059</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Parallel particle tracing</term>
					<term>dynamic load balancing</term>
					<term>k-d trees</term>
					<term>performance analysis</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We propose a dynamically load-balanced algorithm for parallel particle tracing, which periodically attempts to evenly redistribute particles across processes based on k-d tree decomposition. Each process is assigned with (1) a statically partitioned, axis-aligned data block that partially overlaps with neighboring blocks in other processes and (2) a dynamically determined k-d tree leaf node that bounds the active particles for computation; the bounds of the k-d tree nodes are constrained by the geometries of data blocks. Given a certain degree of overlap between blocks, our method can balance the number of particles as much as possible. Compared with other load-balancing algorithms for parallel particle tracing, the proposed method does not require any preanalysis, does not use any heuristics based on flow features, does not make any assumptions about seed distribution, does not move any data blocks during the run, and does not need any master process for work redistribution. Based on a comprehensive performance study up to 8K processes on a Blue Gene/Q system, the proposed algorithm outperforms baseline approaches in both load balance and scalability on various flow visualization and analysis problems.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Distributed and parallel particle tracing, which computes the movements of many massless particles that are released in the flow field, is a fundamental technique in large-scale flow visualization and analysis. Applications include visualizing streamlines and pathlines, generating streamsurfaces <ref type="bibr" target="#b8">[9]</ref>, computing finite-time Lyapunov exponents (FTLEs) and Lagrangian coherent structures (LCSs) <ref type="bibr" target="#b10">[11]</ref>, studying teleconnections <ref type="bibr" target="#b16">[17]</ref>, and analyzing differences in numerical ensembles <ref type="bibr" target="#b12">[13]</ref>. Parallel particle tracing enables these analyses to be run on clusters or supercomputers and to handle large-scale data generated from computational fluid dynamics, combustion, climate, weather, and biomedical simulations.</p><p>We focus on the load balance-a known hard problem and key to achieving scalability-in parallel particle tracing. The load-balancing problem exists in both task-parallel and data-parallel particle tracing methods, which are the two basic parallelism strategies. In the taskparallel methods, particles are statically distributed to parallel processes; each process has access to the whole data. Processes are unbalanced because of the early termination of some particles that travel out of the domain or hit critical points where the velocity is zero. In the dataparallel methods, the flow data are statically partitioned into blocks and distributed to processes; particles exchange between processes to finish the tasks. Processes are unbalanced because some blocks may contain more complex features than others, such as vortices that trap particles locally.</p><p>In this paper, we propose a dynamically load-balanced algorithm for parallel particle tracing using k-d (short for k-dimensional) trees. Our motivation is based on the successful use of k-d trees to balance workloads in N-body simulations <ref type="bibr" target="#b5">[6]</ref>, Delaunay tessellations <ref type="bibr" target="#b22">[23]</ref>, clustering <ref type="bibr" target="#b9">[10]</ref>, and sort-first parallel rendering <ref type="bibr" target="#b20">[21]</ref>. In these applications, k-d trees are used to evenly (re)distribute particles, data points, or pixels across parallel processes. As illustrated in a four-process run <ref type="figure" target="#fig_1">(Figure 1(a)</ref>), each process has a k-d tree leaf node, and particles are evenly distributed into different processes periodically. However, the redistribution requires full data duplication over all parallel processes, because processes may have particles that are located anywhere in the data domain, making the algorithm not scale on supercomputers.</p><p>We overcame this problem by a novel redesign of k-d tree decomposition, namely, the constrained k-d tree, to redistribute particles in the data-parallel particle tracing. In this design, each process is assigned with (1) a statically partitioned, axis-aligned data block that partially overlaps with neighboring blocks in other processes and (2) a dynamically determined k-d tree leaf node that bounds the active particles for computation. The bounds of k-d tree nodes are constrained by the geometries of the data blocks. In static data partitioning, we initially subdivide the domain into n non-overlapping, equal-sized, and axis-aligned blocks, where n equals the number of processes. We then expand the blocks to overlap with other blocks as much as possible, given the memory limit of the process. The expanded parts, called ghost layers, essentially maximize the overlaps between blocks under the memory limit and thus enable the k-d tree decomposition with constraints. During run time, we periodically redistribute particles based on the constrained k-d tree decomposition to balance the workload. The splitting planes in the k-d tree decomposition are limited to the overlapped regions of the ghost layers. Thus the decomposition ensures that the redistributed particles are inside the bounds of the corresponding blocks, as shown in <ref type="figure" target="#fig_1">Figure 1(b)</ref>. In the extreme case that each process can fit the whole data, our algorithm can evenly redistribute the particles because there are no constraints.</p><p>The proposed method can improve load balancing in both full-and local-range flow visualization and analysis techniques for steady and unsteady flows. Full-range analyses such as FTLE computation need to trace densely-seeded particles over the whole domain, while local-range analyses such as source-destination queries place seeds only locally in the domain. The constrained k-d tree can be used for both static and time-varying flows in both 2D and 3D meshes.</p><p>We evaluate our method with various flow visualization and analysis tasks on Vesta, a Blue Gene/Q supercomputer at Argonne National Laboratory. We show the performance benchmarks with up to 8K parallel processes. Compared with the baseline data-parallel particle tracing method, our constrained k-d tree approach significantly improves the performance in both load balancing and scalability. Compared with other load-balancing algorithms for parallel particle tracing, the proposed method does not require any preanalysis, does not use any heuristics based on flow features, does not make any assumptions  about initial particle distribution, does not move any data blocks during the run, and does not need any master process for work redistribution. In summary, the contributions of this paper are twofold:</p><p>• A dynamically load-balanced parallel particle tracing algorithm based on the redesigned k-d tree decomposition that is constrained by static data partitions;</p><p>• A comprehensive performance study of our algorithm with different datasets on a Blue Gene/Q system.</p><p>In Section 2 we briefly introduce the background of this work. In Section 3, we give an overview of our method. The initialization and run-time load-balanced parallel particle tracing are described in Section 4 and Section 5, respectively. A detailed performance analysis is given in Section 6 to demonstrate the effectiveness of our method, followed by discussion in Section 7. In Section 8, we conclude our paper and discuss future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>In this section, we review related work on load balancing in parallel particle tracing and on load-balancing algorithms based on k-d trees. We also review advection-based flow visualization and analysis applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Load Balancing in Parallel Particle Tracing</head><p>Load-balanced parallel particle tracing in large-scale flow data is difficult because of the varying computation and communication workloads in both task-and data-parallel methods.</p><p>In task-parallel methods, particles are statically distributed to processes. The workload among the processes is unbalanced because the particles have different trajectories. Work stealing and work requesting <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b23">24]</ref> can be used to redistribute tasks among processes. These methods, however, require a central master process for scheduling, which becomes a bottleneck to scale up. Moreover, task-parallel methods usually have higher I/O cost than data-parallel methods have, because processes need to load data out of core when the data is larger than the memory in each process. Our method is instead based on data-parallel methods. Compared with the task-parallel load-balancing methods <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b23">24]</ref>, our method has much lower I/O overhead, and we do not need any master processes to redistribute tasks.</p><p>In data-parallel methods, the input data is partitioned and distributed to processes statically; particles are exchanged between processes to finish the tasks. Both static and dynamic load-balancing algorithms are proposed for data-parallel particle tracing. Static load-balancing algorithms usually require data preprocessing and flow feature analysis. Nouanesengsy et al. <ref type="bibr" target="#b25">[26]</ref> proposed a method to construct flow graphs that characterizes both workload and flow directions of the data in preprocessing and then statically distributes the data blocks based on the optimized partitioning of flow graphs. Chen and Fujishiro <ref type="bibr" target="#b6">[7]</ref> instead partitioned the flow data in irregular shapes based on flow feature extraction. The irregular partitions can also be achieved by hierarchical clustering <ref type="bibr" target="#b33">[34]</ref>. Dynamic load-balancing algorithms redistribute and move data blocks periodically during the run. The major costs are twofold: from the scheduling algorithm that decides how blocks should be redistributed and from the data movement. For example, Peterka et al. <ref type="bibr" target="#b27">[28]</ref> used a recursive coordinate bisection to repartition the distribution of data blocks. The repartitioning is performed periodically, and data blocks are moved on the fly. Lu et al. <ref type="bibr" target="#b18">[19]</ref> proposed a workstealing approach to achieve dynamic load balancing in streamsurface generation. Data blocks are moved to the processes that have lower workload.</p><p>To improve scalability, researchers have proposed hybrid methods that combine task and data parallelism, but the load-balancing issues are not well studied in these methods. For example, Kendall et al. <ref type="bibr" target="#b16">[17]</ref> proposed the DStep framework that schedules tasks in a multitiered manner based on static data partitioning. DStep has also been extended to visualize ensemble differences by pathline advection analysis <ref type="bibr" target="#b12">[13]</ref> and to analyze multivariate unsteady flow data with Lagrangian-based attribute space projection <ref type="bibr" target="#b11">[12]</ref>. Zhang et al. <ref type="bibr" target="#b35">[36]</ref> also modified the DStep framework to generate high-order access dependencies in a data-preprocessing stage.</p><p>We regard our load-balanced particle tracing algorithm as a hybrid method that distributes data blocks statically and redistributes particles dynamically. Comprehensive comparisons with previous methods are discussed in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Load Balancing Based on K-D Trees</head><p>A comprehensive review of load balancing for distributed and parallel computing in general is out of the scope of this paper. We instead focus on load-balancing algorithms that are based on k-d trees.</p><p>The k-d tree, which was invented by Bentley <ref type="bibr" target="#b3">[4]</ref>, is a data structure</p><p>Block expansion with data overlapping</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Collective particle redistribution</head><p>Initial data domain partitioning</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Independent particle tracing</head><p>Flow data (steady/unsteady) Load-Balanced Computation Initialization <ref type="figure">Fig. 2</ref>. Workflow of our load-balanced parallel particle tracing method. The raw flow data is first partitioned into blocks in the initialization stage. These blocks are further expanded by adding ghost layers on them to maximize the overlap with other blocks as much as possible. In the computation stage, collective particle redistribution and independent particle tracing are alternately executed to achieve load balance dynamically. that splits k-dimensional data for efficient range queries and k-neighbor queries. The k-d tree data structure is essentially a balanced binary tree; each leaf node of the tree is a subdomain of its parent.</p><p>K-d trees have been used in load balancing of various applications in computational sciences, database, data analysis, and visualization. In computational sciences, k-d trees are used to build hierarchies of particles in order to improve scalability in large N-body cosmology simulations <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">6]</ref> and molecular dynamics simulations <ref type="bibr" target="#b30">[31]</ref>. In database applications, k-d trees can be used for fast query of images <ref type="bibr" target="#b0">[1]</ref>. In data analysis, k-d trees are widely used in distributed and parallel clustering algorithms, such as k-means <ref type="bibr" target="#b9">[10]</ref> and the DBSCAN algorithm <ref type="bibr" target="#b26">[27]</ref>. In visualization, the community has been extensively using k-d trees to address various load-balancing problems. For example, Morozov and Peterka <ref type="bibr" target="#b22">[23]</ref> proposed a load-balanced Delaunay tessellation algorithm. Input points are partitioned with k-d trees and distributed to different processes for load-balanced computation. The positions of these points are statically fixed when performing the computation of Delaunay tessellation. In sort-first volume rendering, k-d trees are used to split the image space to balance the parallel rendering costs <ref type="bibr" target="#b20">[21]</ref>. Bounding volume hierarchies <ref type="bibr" target="#b32">[33]</ref> or particle distribution schemes based on zordering <ref type="bibr" target="#b29">[30]</ref> that are similar to k-d trees are also used in parallel volume rendering. The path of each ray in these volume-rendering methods is determined by its initial position. On the contrary, in particle tracing, the positions of the particles always change over time, making it difficult to achieve load balance statically. Our method addresses this problem by dynamically performing k-d tree decomposition during run time to redistribute particles.</p><p>The implementation of k-d trees must be efficient and scalable for distributed applications. Serial k-d tree implementations include nanoflann 1 , but they are not able to scale in parallel. The previous version of our work <ref type="bibr" target="#b36">[37]</ref> used nanoflann to implement k-d tree decomposition. Zhang et al. <ref type="bibr" target="#b34">[35]</ref> proposed the first scheme to distribute k-d trees in peer-to-peer systems. Morozov and Peterka <ref type="bibr" target="#b22">[23]</ref> further improved the algorithm to scale k-d tree decomposition for efficient Delaunay tessellation.</p><p>In our study, we redesigned the parallel tree construction algorithm for constrained k-d trees. We further use the constrained k-d trees to balance the number of particles in parallel processes in order to achieve dynamic load balancing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Advection-Based Flow Visualization and Analysis</head><p>We review advection-based flow visualization and analysis applications that can benefit from scalable and parallel particle tracing. Advection-based flow visualization and analysis methods include texture-based <ref type="bibr" target="#b17">[18]</ref>, geometry-based <ref type="bibr" target="#b19">[20]</ref>, and part of feature extraction and tracking techniques <ref type="bibr" target="#b28">[29]</ref>. Based on the distribution of particle seed locations, we subdivide the techniques into two categories: full-range analysis and local-range analysis.</p><p>In local-range analyses, particles are seeded in sparse and local regions in order to understand part of the data. For example, seeds of a streamsurface are usually distributed on a line or curve in 3D flows <ref type="bibr" target="#b8">[9]</ref>. A source-destination query <ref type="bibr" target="#b16">[17]</ref> needs to seed particles only in a local region, instead of the whole domain.</p><p>In full-range analyses, particle are seeded densely in the entire data domain in order to analyze and visualize comprehensive features in the flow. For example, in texture-based visualization, line integral <ref type="bibr" target="#b0">1</ref> https://github.com/jlblancoc/nanoflann convolution (LIC) <ref type="bibr" target="#b4">[5]</ref> and unsteady flow LIC (UFLIC) <ref type="bibr" target="#b31">[32]</ref> need to compute streamlines and pathlines, respectively, from all locations. Although methods have been proposed to reduce the computational cost of tracing densely-seeded particles, such as partial path reuse <ref type="bibr" target="#b14">[15]</ref> and adaptive refinement <ref type="bibr" target="#b1">[2]</ref>, comprehensive analysis of the computation of FTLEs and LCSs <ref type="bibr" target="#b13">[14]</ref> still needs scalable and parallel tracing of densely-seeded particles <ref type="bibr" target="#b24">[25]</ref>.</p><p>Our study can be used to improve load balancing in both full-and local-range analyses. Our method is also compatible with both static and time-varying flows. More details and evaluations are in the following sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">OVERVIEW</head><p>As described in Algorithm 1 and illustrated in <ref type="figure">Figure 2</ref>, the pipeline of our method consists of a initialization stage and a computation stage.</p><p>The initialization stage has several steps. We first partition the input data into non-overlapping, equal-sized, axis-aligned blocks and then expand the ghost layers of each block up to the memory limit of each process. The blocks are loaded into memory, and the particles are initialized in the corresponding blocks. More details are explained in Section 4.</p><p>The computation stage is an iterative process that alternately executes the particle redistribution and particle tracing. In the particle redistribution phase, the parallel processes collectively exchange unfinished particles based on the constrained k-d tree decomposition. In the particle tracing phase, each parallel process independently traces its unfinished particles without communication. More details are given in Section 5.</p><p>Algorithm 1 Main function of each parallel process in our method, where comm is the communicator, and local block and local particles are the block and particles that are distributed to the process, respectively.</p><p>initialize(comm, local block, local particles) Section 4 while !all done do redistribute particles(comm, local particles) Section 5.1 trace particles(local block, local particles) Section 5.2 end while</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ALGORITHM INITIALIZATION</head><p>We initialize data blocks and particles for the dynamically loadbalanced parallel particle tracing.</p><p>Domain partitioning We partition the input data by iteratively splitting the domain in each dimension; the order of dimensions is consistent with that of k-d tree decomposition. Without loss of generality, we assume the number of processes n is a power of 2; otherwise we can subdivide each dimension based on the prime factorization of the number. For example, in 3D data we evenly subdivide the domain along the x-axis into two blocks and then further evenly split each block along the y and z axes. After the z-axis, the next dimension to subdivide is the x-axis. The iteration stops when the number of blocks equals n. Each process then owns single block. The outputs of the domain partitioning are n non-overlapping, equal-sized, axis-aligned data blocks.</p><p>Block expansion We maximize the overlaps between blocks by adding ghost layers on these blocks. As shown in <ref type="figure">Figure 3</ref>, each block is expanded in all dimensions so that the block overlaps with its neighbor blocks. The block expansion enables the k-d tree to split the domain in the overlapped regions, as explained in the next section. The thickness of the block is bounded by the available memory in the process. In the extreme case when the memory is large enough to fit the whole dataset, each process keeps a complete copy of the data. Block I/O We load the expanded data blocks in parallel. The parallel I/O is handled by the block I/O layer (BIL) <ref type="bibr" target="#b15">[16]</ref>, which essentially uses parallel I/O to load expanded data blocks in a scalable manner.</p><p>Particle initialization We load input particles and distribute them into different processes. Each particle is assigned to the block whose "core" region excluding ghost layers contains the particle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">LOAD-BALANCED PARALLEL PARTICLE TRACING</head><p>The computation stage (the loop in Algorithm 1) of our algorithm alternates the collective particle redistribution and the serial particle tracing for dynamic load balancing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Particle Redistribution Based on Constrained K-d Trees</head><p>Constrained k-d tree construction is illustrated in Figures 4 and 5. The algorithm cycles through each dimension to split the data domain. For each dimension, the algorithm attempts to find an axis-aligned median plane that can split particles evenly. If the plane is not in the overlapped regions between the two neighbor blocks, we use the boundary of either block that can balance the number of particles. As shown in the 2D example in <ref type="figure" target="#fig_3">Figure 5</ref>, if the coordinate of the plane is greater than the upper bound of the red block in x direction, we split the dimension with the right boundary of the red block; if the coordinate of the plane is less than the lower bound of the blue block in x direction, we split the dimension with the left boundary of the blue block; otherwise we choose the median plane in the overlapped region of the two blocks. The rule is similar in 3D, as illustrated in <ref type="figure">Figure 4</ref>. We redesign the distributed k-d tree decomposition <ref type="bibr" target="#b22">[23]</ref> to constrain the splitting planes, as detailed in Algorithm 2. Each iteration has two key parts: median selection and particle exchange. Initially, we group all processes in a group. In the first iteration, each process computes a local histogram of its particles and sends it to a designated root process within the group for gathering. The root process then picks up a median plane that is constrained in the overlapped regions, as described above, and broadcasts it to all other processes within the group. The selected median value splits all the particles into two parts, trying to make each part have particles as even as possible under the geometry constraints. For particle exchange, the processes are divided into two subgroups. Each process from one subgroup chooses a partner from the other subgroup to exchange particles, so that half the processes receive the particles whose projection onto the first coordinate is less than the picked median value, while the other half receives particles whose projection is more than the value. Given n processes, the algorithm will repeat in each process subgroup by cycling through the coordinates for splitting until log 2 n iterations are executed. The constrained k-d tree decomposition splits the particles as evenly as possible while also ensuring that the particles are bounded in the data block of the corresponding process. A thicker ghost layer leads to more even decomposition of the number of particles and better workload balance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Particle Tracing within Processes</head><p>We trace particles inside the local block of each process independently without communication, as shown in Algorithm 3. After tracing, each particle is either finished or unfinished. A particle is marked as finished if it goes out of the data domain, hits a critical point where the velocity is zero, or reaches the maximum integral steps required by the visualization and analysis algorithm; otherwise the particle is marked as unfinished. Unfinished particles will be redistributed in the next cycle, as detailed in the preceding subsection. We limit the maximal number of integration steps (N max ) that a particle can be traced in the cycles. This is an important parameter in our method because it indirectly defines the frequency of particle redistribution. If the redistribution is performed too frequently, the workload can be more balanced, but the redistribution cost will increase. On the contrary, if the redistribution is performed infrequently, our method cannot sufficiently balance the workloads. More discussion and evaluation on N max are in Sections 6 and 7, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">PERFORMANCE ANALYSIS</head><p>We conducted a comprehensive performance study with three applications: tracing densely-seeded streamlines in thermal hydraulics simulation (Nek5000) data, querying source-destinations in GEOS-5 simulation data, and computing FTLE of Hurricane Isabel data. The specifications of the data are detailed in <ref type="table" target="#tab_2">Table 1</ref> and the following subsections.</p><p>The implementation of our method is based on C++11. We use the DIY2 library <ref type="bibr" target="#b21">[22]</ref>, which wraps MPI for interprocess communication, to decompose the domain and exchange messages between processes. We also use the BIL library <ref type="bibr" target="#b15">[16]</ref> to efficiently read disjoint data blocks from different NetCDF files collectively.</p><p>The benchmark platform is Vesta, an IBM Blue Gene/Q system at Argonne National Laboratory. Vesta has 2,048 compute nodes: each has a 16-core 1.6 GHz PowerPC A2 processor and 16 GB of DDR3 RAM.</p><p>The interconnection between compute nodes is a 5D torus network. The storage of Vesta is GPFS (IBM General Parallel File System). In our test, we execute 8 processes per compute node, and we use up to 8,192 processes. We study the performance of our method with the following benchmarks.</p><p>• Load balancing We use the maximal workload divided by the average workload as the load-balancing indicator. The workload in each process is evaluated as the number of numerical integral steps for particle tracing. The load is more balanced if the indicator is closer to 1. We also use a Gantt chart to visualize the computation time of different processes.</p><p>• Strong scaling We measure how the total execution time varies with the number of processes for a fixed total number of particles. The strong scaling indicates the efficiency of our method by distributing a constant-size problem on all processes. A linear speedup is optimal.</p><p>• Weak scaling We measure how the total execution time varies with the number of processes for a fixed number of particles per process. The weak scaling indicates the efficiency of our method by assigning each process a constant-size problem. An optimal weak scaling is achieved if the total execution time is constant as the number of processes increases.</p><p>We also alter the conditions that affect performance:</p><p>• Available memory (M). We arbitrarily choose different memory limits for data blocks per process to test the scalabilities. In our work, the memory limit indicates the available memory for accommodating the loaded data block. The thickness of the ghost layers grows with the memory limit;</p><p>• Choice of 3D/4D trees (k). We study whether 3D or 4D trees perform better in time-varying flows.</p><p>• Maximum integral steps per cycle (N max ). We study the only parameter that controls the frequency of particle redistribution.</p><p>The baseline approach in the performance study is a data-parallel particle tracing implementation. The initialization stage of the baseline approach is the same as in Section 4. The computation stage alternates the independent particle tracing and the collective particle exchange phases. In the first phase, each particle does not stop until it goes out of the local block; in the second phase, particles that move to remote processes are exchanged collectively with MPI Alltoall. The program exits after all tasks in the system are finished.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Thermal Hydraulics Data</head><p>The thermal hydraulics dataset is from the output of the Nek5000 solver, which is a large-eddy Navier-Stokes simulation developed by Argonne National Laboratory. We use a single timestep of the data for the static flow analysis and trace streamlines from all grid points. <ref type="figure" target="#fig_4">Figure 6</ref> shows the Gantt chart visualization of a run, and <ref type="figure">Figure 7</ref> shows the timings of both strong-and weak-scaling results with different memory limits.</p><p>Load balance The workload in our method is much more balanced than in the baseline approach. We collect and visualize in <ref type="figure" target="#fig_4">Figure 6</ref>   the performance data from two 64-process runs with our method and the baseline method, respectively. We use the down-sampled version of the original data in order to fit into the small number of processes (64) for Gantt chart visualization. In the Gantt chart, the horizontal axis is the execution time, and the vertical axis is the ID of the process. We also visualize the load balance indicator over the execution time in the line chart of <ref type="figure" target="#fig_4">Figure 6</ref>. We can see that each time after the k-d tree decomposition is performed, the workload becomes more balanced, and thus the particle tracing takes less time compared with the baseline method. The Gantt chart of the baseline method shows that one or two processes are always busy computing while other processes are idle. We can also see that the particle redistribution time is much less than the particle tracing time.</p><p>Strong scaling We trace 128 million particles in total with 512, 1K, 2K, 4K, and 8K processes to study the strong scalability. As shown in <ref type="figure">Figure 7(a)</ref>, as the number of processes increases, the total execution time of our method decreases faster than the baseline approach does. The strong scalability of our method is better than the baseline. With 8K processes, our method performs more than twice as fast as the baseline. The parallel efficiency of 2K processes with a 48 MB, 96 MB, and 384 MB memory limit is 46.0%, 48.3%, 76.6%, respectively. In the baseline method, the parallel efficiency is 39.7%, 41.4%, 42.7%, respectively. From <ref type="figure">Figure 7</ref>(b), we can also see that the particle tracing time dominates the execution time, even if the percentage of I/O and particle redistribution increases as the number of processes increases.</p><p>Weak scaling We trace 16K particles per process with 512, 1K, 2K, and 8K processes in this test. As the number of processes increases, the execution time of the baseline approach increases much faster than that of our method does, as shown in <ref type="figure">Figure 7(c)</ref>. In other words, the weak scalability of our method is also better than that of the baseline. The parallel efficiency of 2K processes with a 48 MB, 96 MB, and 384 MB memory limit in our method is 47.8%, 50.2%, 77.1%, respectively. In the baseline method, the corresponding parallel efficiency is 40.3%, 41.9%, 43.6%, respectively. From all tests in <ref type="figure">Figure 7</ref>, we can see that our method performs better with larger memory limits. Although larger memory limits lead to thicker ghost layers and eventually result in higher I/O costs, I/O takes less than 10% of the total execution time in all cases. Larger memory  limits improve both strong and weak scalabilities, because thicker ghost layers weaken the constraints in our k-d tree decomposition, allowing the particles to be redistributed more evenly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">GEOS-5 Simulation Data</head><p>The GEOS-5 data is from the simulation output of an atmospheric model developed by the NASA Goddard Space Flight Center. The spatial resolution of the model is a 1°× 1.25°latitude-longitude grid with 72 vertical pressure levels that ranges from 1 atm (near the terrain surface) to 0.01 hPa (about 80 km). The dataset in our experiment consists of the monthly averaged output from January 2000 to December 2001.</p><p>We conduct a source-destination query analysis with 8M particles in the GEOS-5 data. The query results are shown in <ref type="figure">Figure 8(a)</ref>. In this experiment, seeds are densely placed in North America, and we visualize the distribution of the particle trajectories over time.</p><p>Strong scaling The first row of <ref type="figure" target="#fig_7">Figure 9</ref> shows the strong-scaling tests of this case. The optimal scaling curves in this figure show the linear speedup for reference. <ref type="figure" target="#fig_7">Figure 9(a)</ref> shows that our method scales as the number of processes increases, whereas the scalability of the baseline method is poor. With 8K processes, our method is 3.58 times faster than the baseline method. <ref type="figure" target="#fig_7">Figure 9(c)</ref> shows the overall level of load balance in the run-time particle tracing. In our method, the load balance indicator slowly increases as the number of processes increases. It is consistent with the time cost of the constrained k-d tree decomposition, as shown in <ref type="figure" target="#fig_7">Figure 9</ref>(b). We can also see that the curves that represent our k-d tree method are lower and more stable than those as the baseline method. These results demonstrate that compared with the baseline approach, our method has better load balance and scalability.</p><p>Parameter N max We compare the timings and load balance using different maximal number of steps in each cycle of tracing (N max ). To evaluate the effect of the execution frequency of the constrained k-d tree decomposition, we use 64 MB memory limit for this test. In the second row of <ref type="figure" target="#fig_7">Figure 9</ref>, as N max increases, the total running time decreases continually, and the workload becomes more balanced in most cases, except when N max is 10. Although frequently performing the constrained k-d tree decomposition can achieve more balanced workload, it also brings larger overhead. In this case, the optimal N max is 20. More discussion of N max is in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Hurricane Isabel Data</head><p>The Isabel dataset is from an atmospheric simulation conducted by the National Center for Atmospheric Research. The resolution of this mesh is 500 × 500 × 100, and the dataset has 48 time steps. We compute the FTLE field (shown in <ref type="figure">Figure 8</ref>(b)) based on the wind (U, V, and W components) by tracing 24 million particles that are uniformly seeded in the domain. The optimal N max in this experiment is 50.</p><p>Strong scaling We also make strong-scaling tests of this case. As shown in the first row of <ref type="figure" target="#fig_1">Figure 10</ref>, our method improves the performance and load balance. In this case, we extract the computation time of particle tracing from the total running time in <ref type="figure" target="#fig_1">Figure 10(b)</ref>. The computation is 2.1 times faster compared with the baseline method using 8K processes. From these results we can also see that the larger memory limit leads to higher I/O cost because the expanded blocks are larger, but our method scales better with larger memory limit in general.   Choice of 3D/4D trees We test whether 3D or 4D tree can achieve better load balance with our method. The results are shown in the second row of <ref type="figure" target="#fig_1">Figure 10</ref>. In general, we can see from <ref type="figure" target="#fig_1">Figure 10</ref>(e) that the performance is better if we consider only the space dimensions in this experiment. As shown in <ref type="figure" target="#fig_1">Figure 10</ref>(f), we conclude that the workload of using 4D trees is less balanced than using 3D trees, because the time of spatiotemporal particles always increases and leads to imbalance in the time dimension.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">DISCUSSION</head><p>In this section, we first discuss the advantages of our method compared with other load-balancing methods. We then discuss the limitations of our method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Comparison with Other Methods</head><p>We compare our method with other load-balancing algorithms for parallel particle tracing in different aspects, which are detailed in <ref type="table">Table 2</ref> and below.</p><p>Data preprocessing Our method does not require any data preprocessing. In previous studies, such as flow graph-based workload estimation <ref type="bibr" target="#b25">[26]</ref> and irregular data partitioning <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b33">34]</ref>, the whole input dataset needed to be processed and analyzed in a pilot run before the actual particle tracing runs. As the data scale continues to grow in present and future computing, however, it becomes prohibitive to perform the preprocessing because of high I/O costs.</p><p>Feature analysis Our method does not rely on any flow feature analysis. Flow partitioning <ref type="bibr" target="#b6">[7]</ref> and clustering <ref type="bibr" target="#b33">[34]</ref> can be expensive and sensitive to parameter selection. It is still an open challenge to well define features in fluid flows, especially time-varying datasets. It is even harder to detect features in distributed environments with scalability. In contrast, our constrained k-d tree method is light-weight and scalable.</p><p>Seed distribution We make no assumptions about the initial particle distribution. Most load-balancing algorithms in data-parallel particle tracing <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b33">34]</ref> are designed for full-range analyses that trace densely-seeded particles in the whole domain. Our method can handle arbitrary distributed seeds for load-balanced particle tracing.</p><p>Data dimensionality Our method supports both static and timevarying data in both 2D and 3D meshes, because k-d trees can decompose spaces in arbitrary dimensions. To the best of our knowledge, most load-balancing algorithms in data-parallel settings are designed for static datasets. Task-parallel algorithms can support unsteady flows, but they require out-of-core I/O scheduling for large-scale data.</p><p>Data movement The data movement of our method is minimal. Unlike previous studies that move data blocks for dynamic load balancing <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b27">28]</ref>, we do not need to move flow data back and forth after the initialization. Moving data blocks can be expensive, especially for clusters that have lower network bandwidths. As demonstrated in Peterka et al.'s study <ref type="bibr" target="#b27">[28]</ref>, the additional costs associated with data repartitioning caused by data movement (including the exchange of data blocks and particles) and updating of data structures may lower the overall performance. The only data movement in our method is the particle exchange, which is also necessary in all data-parallel particle tracing algorithms.</p><p>Communication patterns The distributed k-d tree decomposition is self-consistent and decentralized. In previous work-stealing <ref type="bibr" target="#b7">[8]</ref> and work-requesting <ref type="bibr" target="#b23">[24]</ref> algorithms for task-parallel particle tracing, a dedicated process is necessary in order to schedule the workloads in all other processes. Frequently requesting tasks and sending information for workload scheduling in work requesting <ref type="bibr" target="#b23">[24]</ref> significantly increase the communication overhead. The 1-to-n communication pattern makes it difficult to scale in large systems. We instead do not need any master processes to schedule tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Limitations</head><p>Our method does not guarantee optimal and perfect load balancing. First, we assume that an equal number of particles leads to the ideal balance, but it is only an approximation. In the independent particle tracing phase, some particles may stop earlier than others, because they go out of the local bounds of the block or hit critical points. The computation time may also vary because of data locality. As a result, processes have different workloads even if they are assigned the same number of particles. Second, the constrained k-d tree decomposition does not guarantee an even distribution of particles. Because the splitting planes of k-d trees are limited to the overlapped regions of ghost  <ref type="figure" target="#fig_1">Fig. 10</ref>. Strong-scaling tests using Isabel data with different number of processes. Panels (a), (b), and (c) show the tests with different memory limits that consider both space and time dimensions used for splitting (i.e., 4D trees), while panels (d), (e), and (f) show the comparison between considering both space and time dimensions for splitting (i.e., 4D trees) and considering only space dimensions for splitting (i.e., 3D trees). <ref type="table">Table 2</ref>. Comparison with other load-balancing algorithms for parallel particle tracing. The plus (+) means that the method meets a certain kind of category or requirement, while minus (-) means that it does not meet the corresponding kind of category or requirement.</p><p>Our Work Nouanesengsy et al. <ref type="bibr" target="#b25">[26]</ref> Chen and Fujishiro <ref type="bibr" target="#b6">[7]</ref> Yu et al. <ref type="bibr" target="#b33">[34]</ref> Lu et al. <ref type="bibr" target="#b18">[19]</ref> Peterka et al. <ref type="bibr" target="#b27">[28]</ref> Dinan et al. <ref type="bibr" target="#b7">[8]</ref> Müller et al. <ref type="bibr" target="#b23">[24]</ref> Category Requirement  <ref type="table">＋  ＋  -＋  -----＋  -＋  -＋  -＋  --＋  -＋  -＋  ＋  ＋  --＋  -＋  -＋  ＋  ＋  --＋  --＋  ---＋  -＋  --＋  ---＋  --＋  -＋  ----＋   -＋  -＋  ----＋</ref> layers, the k-d tree could be imbalanced. If there are no constraints on the decomposition, that is, the entire data can fit into memory, we can have optimal distribution. But at worst, when the ghost layers just overlap, our method degenerates to the baseline method because the splitting planes will be in fixed positions. Our method needs the parameter configuration of N max . As the single important parameter, it determines how frequently the particles are redistributed. If N max is too small, the k-d tree decomposition may bring large overhead. If N max is too large, the workload will be uneven because the redistribution is not performed frequently enough. We have shown the optimal values in our experiments on Blue Gene/Q systems, but the number may vary with different data and different architectures.</p><p>Our method is bulk-synchronous. The constrained k-d tree decomposition is a collective operation that involves all processes in a synchronous manner. However, the cost of synchronization grows as the number of processes increases. We currently cannot overlap computation with communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSIONS AND FUTURE WORK</head><p>In this work, we present a novel approach to balance workloads in parallel particle tracing with constrained k-d trees. The static data partitioning with partial data replication makes it possible to redistribute the unfinished particles during particle tracing through the k-d tree decomposition. A balanced workload is achieved dynamically with our method, which improves the performance of parallel particle tracing. We evaluate our method with different flow visualization and analysis problems through a comprehensive performance analysis. Results show that the proposed method improves both load balance and scalability in particle tracing.</p><p>In the future, we will generalize our algorithm to handle unstructured mesh data. Our method also has the potential to visualize and analyze flows in situ. We would also like to combine our algorithm with existing static load-balancing strategies. Furthermore, we plan to relax the synchronizations in the parallel k-d tree decomposition.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>General k-d tree decomposition (b) Our constrained k-d tree decomposition</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Example of particle redistribution during parallel particle tracing through the general k-d tree decomposition and our constrained k-d tree decomposition, respectively. In (a) and (b), the solid lines split the particles as balanced as possible. In (b), the dashed lines show the overlapped regions of ghost layers that limit the splitting lines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .Fig. 4 .</head><label>34</label><figDesc>Illustration of four expanded blocks in 3D. Illustration of constrained k-d tree decomposition in 3D. The splitting planes are constrained in the overlapped regions of ghost layers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>2D example to show constrained k-d tree decomposition with data overlapping between blocks. The splitting line is limited in the overlapped region of ghost layers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Performance of 64 processes tested by downsampled Nek5000 data. We record the time for I/O, particle tracing computation, and communication in the Gantt charts and the load balance indicator in the line chart. Top: Gantt chart using the baseline method. Each row in the Gantt chart represents a process. Middle: Line chart showing the evolution of workload balance. The dashed line represents the baseline method, while the solid line represents the k-d tree method. Bottom left: Gantt chart using our k-d tree method. The time axises of the two Gantt charts and the line chart are aligned. Bottom right: Rendering result of the Nek5000 data with 2,000 streamlines. The color encodes the integration steps during the streamline generation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .Fig. 8 .</head><label>78</label><figDesc>Performance breakdown for Nek5000 data analysis. (a) and (b) show the strong-scaling tests, while (c) and (d) show the weak-scaling tests. Time for I/O, particle tracing computation, and communication are encoded in different colors to reflect the performance. At each kind of process count, the six stacked histograms represent the baseline method with 48 MB memory, the k-d tree method with 48 MB memory, the baseline method with 96 MB memory, the k-d tree method with 96 MB memory, the baseline method with 384 MB memory, and the k-d tree method with 384 MB memory, respectively. (a) Source-destination query on GEOS-5 data. 300 pathlines are shown in this visualization. (b) FTLE field of Isabel data at time steps 0 within a finite time scope 12.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>10 N</head><label>10</label><figDesc>max = 60 N max = 40 N max = 20 N max = 10</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9 .</head><label>9</label><figDesc>Strong-scaling tests using GEOS-5 data with different number of processes. Panels (a), (b), and (c) show the tests with different memory limits. The maximal number of tracing steps, N max , is set to 20 in panels (a), (b), and (c). Panels (d), (e), and (f) show the tests with different N max under 64 MB memory limit.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>then bisect the group local particles ← particles low group ← {x ∈ group | x &lt; group.size/2} else local particles ← particles up group ← {x ∈ group | x group.size/2} end if domain ← bisect domain(domain, median, dim)</figDesc><table /><note>Algorithm 2 redistribute particles(comm, local particles) dim ← 0 rank ← comm.rank domain ← data.domain domain of the input flow data group ← {0, 1,...,n − 1} n is the number of processes Nr ← log 2 n number of iterations for i &lt; N r do root ← group[0] rank of the root process in the group local histogram ← compute local histogram(local particles) global histogram ← comm.gather(group, root, local histogram) gather to the root if rank = root then range ← compute overlapped region(domain, dim) overlapped region of ghost layers median ← compute bounded median(global histogram, range, dim) end if median ← comm.broadcast(group, root, median) broadcast from the root partner ← root + (rank + group.size/2) mod group.size rank of the partner process in the group particles low ← {p ∈ local particles | p[dim] &lt; median} particles up ← {p ∈ local particles | p[dim] median} comm.sendrecv(rank, partner, particles low, particles up) swap particles if rank &lt; group.size/2dim ← (dim + 1) mod k k is the dimensionality of k-d tree i ← i + 1 end for</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 .</head><label>1</label><figDesc>Datasets and analyses for the performance study.</figDesc><table><row><cell>Dataset</cell><cell>Resolution</cell><cell>Size</cell><cell>Analysis</cell><cell>Seeding</cell><cell>Benchmark</cell><cell>Alternating Conditions</cell></row><row><cell>Nek5000</cell><cell>1024 3</cell><cell>12 GB</cell><cell>Streamlines</cell><cell>Full-range</cell><cell cols="2">Strong/weak scaling M</cell></row><row><cell>GEOS-5 Isabel</cell><cell cols="5">1.34 GB Source-destination Local-range Strong scaling 500 × 500 × 100 × 48 13.4 GB 288 × 181 × 72 × 24 FTLE Full-range Strong scaling</cell><cell>M, N max M, k</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank the anonymous reviewers for their comments. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Distributed kd-trees for retrieval from very large image collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Aly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Munich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Perona</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the British Machine Vision Conference (BMVC)</title>
		<meeting>the British Machine Vision Conference (BMVC)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Adaptive refinement of the flow map using sparse samples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Barakat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2753" to="2762" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A hierarchical O(N log N) force calculation algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Barnes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hut</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">324</biblScope>
			<biblScope unit="issue">6096</biblScope>
			<biblScope unit="page" from="446" to="449" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Multidimensional binary search trees used for associative searching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Bentley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="509" to="517" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Imaging vector fields using line integral convolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">C</forename><surname>Leedom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 1993</title>
		<meeting>SIGGRAPH 1993</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A fast adaptive multipole algorithm for particle simulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Carrier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Greengard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Rokhlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific and Statistical Computing</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="669" to="686" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Optimizing parallel performance of streamline visualization for large distributed flow datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Visualization Symposium</title>
		<meeting>IEEE Pacific Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="87" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Scalable work stealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dinan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Larkins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sadayappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnamoorthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nieplocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;09: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="1" to="53" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Surface-based flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Edmunds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ware</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="974" to="990" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Dynamic load balancing in parallel kd-tree k-means</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Fatta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pettinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th IEEE International Conference on Computer and Information Technology</title>
		<meeting>the 10th IEEE International Conference on Computer and Information Technology</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="2478" to="2485" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Efficient computation and visualization of coherent structures in fluid flow applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Gerhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1464" to="1471" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Scalable Lagrangian-based attribute space projection for multivariate unsteady flow data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Visualization Symposium</title>
		<meeting>IEEE Pacific Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="33" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Coupled ensemble flow line advection and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2733" to="2742" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Distinguished material surfaces and coherent structures in threedimensional fluid flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Haller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physica D: Nonlinear Phenomena</title>
		<imprint>
			<biblScope unit="volume">149</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="248" to="277" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Hierarchical line integration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hlawatsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sadlo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1148" to="1163" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Toward a general I/O layer for parallel-visualization applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Latham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="6" to="10" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Simplified parallel domain traversal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Erickson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;11: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The state of the art in flow visualization: Dense and texture-based techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Doleisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Vrolijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="203" to="222" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Scalable computation of stream surfaces on large scale vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;14: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1008" to="1019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Over two decades of integration-based, geometric flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mcloughlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1807" to="1829" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Scalable sortfirst parallel direct volume rendering with dynamic load balancing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Moloney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Strengert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EGPGV07: Proceedings of Eurographics Symposium on Parallel Graphics and Visualization</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="45" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Block-parallel data analysis with DIY2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Morozov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Symposium on Large Data Analysis and Visualization</title>
		<meeting>IEEE Symposium on Large Data Analysis and Visualization</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="29" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Efficient delaunay tessellation through K-D tree decomposition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Morozov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;16: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="728" to="738" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Distributed parallel particle advection using work requesting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Camp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hentschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Large Data Analysis and Visualization</title>
		<meeting>IEEE Symposium on Large Data Analysis and Visualization</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Parallel particle advection and FTLE computation for time-varying flow fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nouanesengsy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;12: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="page" from="1" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Load-balanced parallel streamline generation on large scale vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nouanesengsy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-Y.</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1785" to="1794" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">BD-CATS: big data clustering at trillion particle scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M A</forename><surname>Patwary</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Byna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">R</forename><surname>Satish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lukic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Roytershteyn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Prabhat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dubey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;15: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A study of parallel particle tracing for steadystate and time-varying flow fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Ross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nouanesengsy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPDPS&apos;11: Proceedings of IEEE International Symposium on Parallel and Distributed Processing</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="580" to="591" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">The state of the art in flow visualization: Feature extraction and tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Vrolijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Doleisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="17" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Large-scale parallel visualization of particle-based simulations using point sprites and level-of-detail</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rizzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hereld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Insley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Papka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Uram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Vishwanath</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurographics Symposium on Parallel Graphics and Visualization</title>
		<meeting>Eurographics Symposium on Parallel Graphics and Visualization</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Load balancing for molecular dynamics simulations on heterogeneous architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seckler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Tchipev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bungartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Neumann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;16: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="101" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">UFLIC: A line integral convolution algorithm for visualizing unsteady flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Kao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="317" to="322" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Ray tracing deformable scenes using dynamic bounding volume hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Parallel hierarchical visualization of large time-varying 3D vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC&apos;07: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Brushwood: Distributed trees in peer-to-peer systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPTPD&apos;05: Proceedings of International Workshop on Peer-to-Peer Systems</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="47" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Efficient unsteady flow visualization with high-order access dependencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Visualization Symposium</title>
		<meeting>IEEE Pacific Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="80" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Dynamic load balancing based on constrained k-d tree decomposition for parallel particle tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peterka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Visualization Symposium 2017 (Posters)</title>
		<meeting>IEEE Pacific Visualization Symposium 2017 (Posters)</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="310" to="311" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
