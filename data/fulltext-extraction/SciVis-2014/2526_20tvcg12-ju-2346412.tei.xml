<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Robust Parity Test for Extracting Parallel Vectors in 3D</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Ju</surname></persName>
							<email>taoju@cse.wustl.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Washington University in St. Louis</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minxin</forename><surname>Cheng</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Washington University in St. Louis</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">University of Missouri at Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xu</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Washington University in St. Louis</orgName>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="institution">University of Missouri at Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Ye</forename><surname>Duan</surname></persName>
							<email>duanye@missouri.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Washington University in St. Louis</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">•</forename><surname>Tao</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Missouri at Columbia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Robust Parity Test for Extracting Parallel Vectors in 3D</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2014.2346412</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Parallel vectors</term>
					<term>feature curve extraction</term>
					<term>ridges and valleys</term>
					<term>parity test</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Parallel vectors (PV), the loci where two vector fields are parallel, are commonly used to represent curvilinear features in 3D for data visualization. Methods for extracting PV usually operate on a 3D grid and start with detecting seed points on a cell face. We propose, to the best of our knowledge, the first provably correct test that determines the parity of the number of PV points on a cell face. The test only needs to sample along the face boundary and works for any choice of the two vector fields. A discretization of the test is described, validated, and compared with existing tests that are also based on boundary sampling. The test can guide PV-extraction algorithms to ensure closed curves wherever the input fields are continuous, which we exemplify in extracting ridges and valleys of scalar functions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The parallel vector (PV) operator is a general-purpose line feature representation proposed by Peikert and Roth <ref type="bibr" target="#b7">[8]</ref> for data visualization. It is defined as the loci where two vector fields u, w are parallel or one of the two vectors is zero. In 3D, PV lines consist of those points x that satisfy u(x) × w(x) = 0</p><p>Various types of line features can be expressed as PV with suitable choices of u, w, including ridges and valleys of a scalar field, streamlines of a vector field, vortices of a velocity field, and extremal curves of a tensor field. As surveyed in <ref type="bibr" target="#b7">[8]</ref>, PV is usually computed on a spatial grid and proceeds in two stages. First, possible locations of PV on a grid cell face are computed. To differentiate them from true PV locations, we shall refer to these computed locations as seeds. Next, seeds are connected within a grid cell, either simply by straight line segments <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b10">11]</ref> or using more sophisticated but more accurate curve tracing methods <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b6">7]</ref>.</p><p>A key property that makes PV appealing is that they are generally made up of closed curves when u, w are continuous <ref type="bibr" target="#b7">[8]</ref>. This is in contrast with discontinuous features such as local maxima or minima in a scalar field. To inherit this property in a computational algorithm, the total number of seeds identified by the algorithm over all faces of a cell should be even. Otherwise, any way of connecting the seeds into curves within the cell would create either an open curve or a junction with odd degrees, which cannot be separated into disjoint closed segments. Various methods have been proposed for computing seeds (see a review in the next section). However, none of them comes with a theoretical guarantee of the parity of the number of seeds either on a cell face or in a cell, except in the special case when u, w are linear over each face.</p><p>In this paper, we propose a provably correct test that, given any choice of continuous fields u, w over a cell face, determines the parity of the number of PV points on that face. The test mimics the classical zero-crossing test over an 1D interval based on signs at the ends of the interval: it reports "true" if and only if there are odd number of true zeros in the domain. Like zero-crossing, our test only needs to sample u, w on the boundary of the face, and does not require sampling or subdivision of the face interior. The idea behind the test is to consider the solution of Equation 1 as singularities in a tangent vector field over some auxiliary surface. We show that the parity of the number of stable singularities in this field can be computed using the classical Gauss-Bonnett and Poincare-Hopf theorems without explicitly constructing the auxiliary surface. A discrete implementation of the test is presented and validated using a synthetic input whose PV has a known and analytical form.</p><p>Using our test, a PV extraction algorithm can ensure closed curves wherever u, w are continuous by creating one seed on each cell face that our test returns odd. We exemplify such usage in a typical 2-stage PV algorithm applied to extract ridge and valley lines of a scalar field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORKS</head><p>Given the scope of our work, we limit our discussion to published methods for identifying seeds. In particular, we will focus on the combinatorial aspect (e.g., number and parity), rather than the geometric location, of the seeds computed by these methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Analytical solution</head><p>When the face is a triangle and both fields u, w are defined by linear interpolation of vectors at the triangle vertices, the exact number and locations of PV points can be found analytically as an eigenvector problem <ref type="bibr" target="#b7">[8]</ref>. However, this approach is not applicable for high-order, non-linear fields.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Iterative root-finding</head><p>For non-linear fields u, w, solutions to Equation 1 can be sought by using root-finding techniques over the cell face <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b6">7]</ref>. These methods typically start at an initial location on the face, such as its center, and uses 2D Newton-Raphson technique either for a fixed number of iterations or until convergence. A seed is found if the iteration terminates at a PV point (within some tolerance) inside the face. However, root-finding does not guarantee to find any or all PV points on the cell face. There is also no guarantee on the parity of total number of seeds over all faces of a cell.</p><p>Pagot et al. <ref type="bibr" target="#b6">[7]</ref> uses reduced affine arithmetic to conservatively estimate the presence of PV points in a cell and on a face. The test is used to recursively subdivide any cell (and any face) that might contain a PV point. While the method can reduce the chances of missing PV points, there is still no guarantee on the correctness of the total number or parity of the computed seeds. Also, recursive subdivision adds computational cost, which can be substantial since the test based on affine arithmetic is conservative. Finally, the technique is restricted to those u, w with known, polynomial forms. comes from the well-known fact that the parity of the number of firstorder critical points in a 2D vector field z in a closed region can be obtained by the winding number (total number of 2π turns) of z as it travels along the region boundary. These methods typically start by projecting the 3D vectors whose zeros are being sought on the face boundary onto a common plane, and then analyze the winding of the projected 2D vector field. <ref type="bibr" target="#b0">1</ref> The 3D vectors can be either u × w or (u × w) × u, the projection of w onto plane orthogonal to u. The projection plane could be the supporting plane of the face <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5]</ref> or the plane orthogonal to the averaged u vectors along the face boundary <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b9">10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Boundary sampling</head><p>An appealing property of this approach is that it does not need to sample the interior of the face. However, current tests only capture the zeros in the projected 2D vector field rather than those in the original 3D vector field v. As we will demonstrate in Section 4, the winding of the projected 2D field can be a poor indicator for the parity of zeros of v. In addition, since the choice of the projection plane in current methods varies for different faces of the cell, there is no guarantee on the correct parity of the entire set of seeds in a cell.</p><p>Similar to these methods, our method also samples the 3D vector v along the face boundary and examines its winding. The key difference is that we compute the winding on varying planes that are orthogonal to u at each boundary location. Since these planes always contain v, we avoid the inaccuracy associated with projection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BACKGROUND</head><p>As we shall see in the next section, we will formulate the problem of detecting PV points as identifying critical points of a tangent vector field over a surface. Our method builds upon classical results on differential geometry and vector field topology, which we shall briefly review first. We refer interested readers to introductory materials such as <ref type="bibr" target="#b2">[3]</ref> for in-depth coverage of these concepts. Below we assume S is a differentiable, genus-zero surface in R 3 with a smooth boundary ∂ S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Vector fields along curves</head><p>We start by considering vectors that are tangent to the surface S and move continuously along a differentiable curve on the surface τ : [0, 1] → S. An example is the (unit) tangent vector field along τ, noted as g τ (shown in blue in <ref type="figure">Figure 1 (a)</ref>).</p><p>An operator used frequently for vector field analysis is how much one vector field v 1 turns with respect to another field v 2 along the curve. To formalize turning, note that the vector v 1 (t) and the surface normal defines a coordinate frame in the tangent plane at τ(t).</p><p>The turning from v 1 to v 2 along τ on the surface S, denoted as Turn τ,S (v 1 , v 2 ), is the total counter-clockwise angle traced by v 2 in this coordinate frame. <ref type="figure">Figure 1</ref> illustrates the turning from a vector field v (red) to the tangent vector field g τ (blue).  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Parallel transport and geodesic curvature</head><p>A vector field is parallel along τ if its derivative has zero component in the tangent plane along τ. The tangent field g τ is also parallel only when τ is a geodesic on S. Unlike the tangent field, there are infinitely many parallel fields on a given curve. In fact, there exists a parallel field starting from any given vector at one end of the curve τ(0). This is known as the parallel transport of that starting vector. An important property of parallel transport is that it only depends on the surface normal along τ and is independent of the geometry of τ. That is, parallel transport of a same initial vector along two curves τ 1 , τ 2 will produce the same sequence of vectors if τ 1 (t) has the same normal direction as τ 2 (t) for all t ∈ [0, 1]. <ref type="figure" target="#fig_12">Figure 2</ref> compares tangent fields and parallel fields on two examples. When τ is the equator of a sphere (left), the tangent field is also parallel, since τ is a geodesic. When τ is a circle on a plane (right), the tangent field turns a full circle around τ while a parallel field stays constant.</p><p>The turning from one parallel field to another is always zero. The turning from any parallel field to some fixed vector field v is the same, which we simply denote as Turn τ,S (v). The total geodesic curvature of τ is defined as the turning from a parallel field to the tangent field, or Turn τ,S (g τ ). This quantity reflects how much the curve τ twists on the surface S. The total geodesic curvature of a geodesic curve is zero, since the tangent field is also parallel. In the examples of <ref type="figure" target="#fig_12">Figure 2</ref>, the total geodesic curvature of the sphere equator and the planar circle is respectively 0 and 2π.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Gaussian curvature</head><p>The geodesic curvature of the boundary curve is closely related to the curvature over the interior of the surface. Consider the Gauss map, which maps a point x ∈ S to a point n(x) on the unit sphere B such that n(x) is the unit outward normal of S at x. The total Gaussian curvature of S, denoted by k S , is the signed area of the image of S on B under the Gauss map. The sign of the area at a location x is determined by the Jacobian determinant of the Gauss map at x.</p><p>Gauss-Bonnet theorem states that the sum of total Gaussian curvature of S (that is, k S ) and the total geodesic curvature of the boundary ∂ S (that is, Turn ∂ S,S (g ∂ S )) is 2π times the Euler characteristic of S. Since S being considered here has an Euler characteristic of 1, we have</p><formula xml:id="formula_1">k S = 2π − Turn ∂ S,S (g ∂ S )<label>(2)</label></formula><p>We use the convention that ∂ S is oriented such that S is on the "left" of the curve, or more formally, the cross-product of the normal of S and g ∂ S always points towards the interior of S. In the examples of <ref type="figure" target="#fig_12">Figure 2</ref>, the total Gaussian curvature is respectively 2π and 0 for the hemisphere and the flat disk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Vector fields on a surface</head><p>Consider a continuous vector field v over S that is tangential to S. We assume the generic situation where zeros of v are isolated and away from ∂ S. These critical points can be characterized using the Poincare index. Given any point x ∈ S, consider a disk neighborhood D of x small enough to not contain any other critical points of v except x. Given a continuous tangent coordinate frame over D, the index at x is the total counter-clockwise angle swept by v as it travels along ∂ D in the counter-clockwise orientation divided by 2π (also known as the winding number of v).</p><p>The index is zero if x is a regular point, and can assume positive or negative integers if x is a critical point. While a critical point can have any integer index, only ones with index +1 (sources or sinks or foci) and -1 (saddles) are stable with respect to small perturbation in the field <ref type="bibr" target="#b11">[12]</ref>. Higher-order critical points can be decomposed into lower-order critical points under slight perturbation.</p><p>If v is orthogonal to the boundary ∂ S and points towards the exterior of S, the Poincare-Hopf theorem states that the sum of all critical point indices, denoted as Ind S (v), is exactly the Euler characteristic of S, which is 1. Morse <ref type="bibr" target="#b5">[6]</ref> generalized the theorem to an arbitrary vector field v by considering the turning of v from the tangent vectors along ∂ S,</p><formula xml:id="formula_2">Ind S (v) = 1 + Turn ∂ S,S (g ∂ S , v) 2π<label>(3)</label></formula><p>As an example, consider the three vector fields in <ref type="figure" target="#fig_2">Figure 3</ref> on a flat disk S. The three fields exhibit turnings of 0, −2π, and −4π from the boundary tangent, correctly calculating the total index of 1 (a source), 0 (no critical points), and -1 (a saddle) inside S. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">THE PARITY TEST</head><p>Our key idea is to treat the solution of Equation 1 as critical points in a tangent vector field over some auxiliary surface. The total index of the critical points, which has the same parity as the number of stable critical points, can then be obtained by observing the boundary behavior of u, w. We start with a theoretical derivation of our test in the continuous setting, and then present a discrete implementation. We end with validation of the test and comparison to previous methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Theory</head><p>Suppose we have a surface M in R 3 that is homeomorphic to a disk (e.g., a cell face) and two continuous vector fields u, w on M. We make several assumptions of generic inputs. First, at least one of the fields, say u, is non-zero on M. Second, the PV consists of 1-dimensional curves, and these curves intersect with only the interior of M at a finite set of points. Note that these generic assumptions may be violated in the discrete implementation, which we shall address in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Index of a PV point</head><p>We start by defining the index of a PV point on M. Each PV point is a zero of the cross-product field v = u × w. Equivalently, it is also the zero of the field v = (u × w) × u, which has a geometric interpretation as the projection of w onto the plane orthogonal to u. These two choices of v are closely related; in fact they differ by a rotation of π/2 around u. We use the latter definition, which is adopted in existing tests based on boundary sampling <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">14]</ref>, but our results apply to either definition.</p><p>The index of a PV point is defined similarly as the Poincare index of a critical point on a surface. Given any point x ∈ M, consider a disk neighborhood D ⊂ M around x small enough to not contain any other zeros of v except x. We establish a continuous coordinate frame on each orthogonal plane to u(y) for all y ∈ D. This is possible because u is continuous and non-vanishing. The PV index at x is the winding number of v(y) in this frame as y travels in counter-clockwise orientation along ∂ D. The notations are explained in <ref type="figure" target="#fig_3">Figure 4</ref>. Similar to the Poincare index, the PV index is zero if v(x) is nonzero, and can assume positive or negative integers otherwise. By the same argument in <ref type="bibr" target="#b11">[12]</ref>, only PV points with indices +1 and -1 are stable with respect to small perturbation in the field, whereas other PV points can be decomposed into these stable ones.</p><formula xml:id="formula_3">PV index = -1</formula><p>Since a stable PV point has an odd index, the total index of all PV points on M has the same parity as the total number of stable PV points. In the following, we shall derive a formula for the total PV index on M.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Total index</head><p>To explain our formula intuitively, we will assume for now that there exists a mapping f from M to some auxiliary surface S such that, for every point x ∈ M, the outward unit normal at the mapped point f (x) ∈ S is the unit vectoru(x) = u(x)/|u(x)| (see <ref type="figure" target="#fig_4">Figure 5</ref>). As such, v becomes a tangent field on S, and the PV index at a point x ∈ M is the same as the Poincare index of v at f (x) ∈ S. Now our task becomes computing the total index of v on S.</p><p>Since we do not know the geometry of ∂ S, we cannot directly apply the generalized Poincare-Hopf theorem (Equation 3) to compute the total index of v. We need a different formula that would allow us to compute this index with only the knowledge of the normal field of S, which is u. To do so, we make note of the following property of turning,</p><formula xml:id="formula_4">Turn τ,S (v 1 , v 2 ) = Turn τ,S (v 2 ) − Turn τ,S (v 1 )<label>(4)</label></formula><p>That is, the turning from one vector field v 1 to another field v 2 along a curve τ is the difference between the turning from the parallel field to v 2 and the turning from the parallel field to v 1 . Substituting this identity and the Gauss-Bonnet theorem (Equation 2) into the Poincare-Hopf theorem (Equation 3) yields</p><formula xml:id="formula_5">Ind S (v) = Turn ∂ S,S (v) + k S 2π<label>(5)</label></formula><p>Note that the quantities on the right-hand side of this equation can be obtained by the Gauss map from S to the unit sphere B. The total Gaussian curvature, k S , is the signed area of the mapped region on B. The turning of v from the parallel field along the boundary curve ∂ S is the same as the turning of v from the parallel field along the mapped curve ∂ S on B, because the two curves share the same normal field.</p><p>On the other hand, this Gauss map can be directly defined from M and u, without the need to construct the auxiliary surface S. In fact, the image of a point x ∈ M after first mapping to S (via f ) and then to the unit sphere (via Gauss map) is exactlyu(x). We can now write the image of S under the Gauss map asu(M), which is bounded by curvė u(∂ M) (see <ref type="figure" target="#fig_4">Figure 5</ref>). Denoting the signed area ofu(M) as Au (M) , Equation 5 translates to a practical formula for total PV index:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Gauss map</head><formula xml:id="formula_6">Lemma 4.1 The sum of PV indices on M equals Turnu (∂ M),B (v) + Au (M) 2π<label>(6)</label></formula><p>In words, the total PV index equals the sum of signed area covered by the spherical regionu(M) and the turning of v along this region's boundary from a parallel vector field divided by 2π. While our derivation above assumes the existence of the auxiliary surface S, we can nevertheless prove without this assumption (see Appendix A). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Parity of PV points</head><formula xml:id="formula_7">Au (M) = Aż (M) (mod 4π)<label>(7)</label></formula><p>We illustrate this result using an example in <ref type="figure">Figure 6</ref>. Here M is a unit disk on the XY plane centered at the origin.  We wish to choose a field z whose resulting signed area Aż (M) can be easily evaluated. In this work, we use linear interpolation in a radial parameterization of M. Define some mapping from the unit disk to M so that the origin of the disk maps to some location c ∈ M. Let z(c) = z 0 where z 0 is an arbitrary unit vector. Each ray of the unit disk is mapped to a curve on M that starts from c and ends on some boundary point x ∈ ∂ M. For each point y on this ray, define the vector z(y) by interpolating z(c) and u(x) along the ray. By this definition, the imageż(M) on the unit sphere is made up of great arcs from z 0 to unit vectorsu(x) for all x ∈ ∂ M. As we shall see next, the signed area ofż(M) can be computed discretely over the spherical curveu(∂ M).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Discrete computation</head><p>The parity test in Equation 8 can be easily discretized and computed using basic spherical geometry. We assume that the surface boundary ∂ M is sampled by a finite sequence of points, {p 0 ,..., p n } such that p 0 = p n . We use u i , v i ,u i to denote the vectors u, v = (u × w) × u,u = u/|u| at a sampled location p i .</p><p>To discretize Equation 8, we approximate the spherical curvė u(∂ M) by a piecewise smooth curve made up of great arcs of B connecting successive samples in the sequence {u 0 ,...,u n }. We next give details on computing the two quantities, Turnu (∂ M),B (v) and Aż (M) . Note that our computation gives the exact result on this piecewise spherical curve, and hence the sum of the two quantities will still be an exact multiple of 2π (subject to numerical imprecisions). We end this section with a discussion on choosing the sample points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Discretizing turning</head><p>The first quantity, Turnu (∂ M),B (v), can be computed as the sum of turning over each arc in the piecewise approximation ofu(∂ M).</p><p>To compute the turning on the arc between {u i ,u i+1 }, we first parallel-transport vector v i along the arc fromu i tou i+1 , producing a new vector v * i atu i+1 (see <ref type="figure" target="#fig_8">Figure 7 left</ref>). There are several ways to compute v * i . One can rotate v i around the axis orthogonal tou i ,u i+1 by the angle betweenu i andu i+1 . However, the computation of the rotation axis requires a cross-product, which can be numerically unstable when the angle betweenu i andu i+1 is small. We take the more stable approach of Wang et al. <ref type="bibr" target="#b16">[17]</ref>, which involves only dot products.</p><p>The formulation given in <ref type="bibr" target="#b16">[17]</ref> is used to transport normal vectors along a spatial curve. We first re-formulate our problem as normal transportation as follows. Let g 0 , g 1 be the unit tangent vector of the great arc fromu i tou i+1 at the two ends of the arc, and consider now the great arc on the sphere from g 0 to g 1 . Note thatu i andu i+1 are tangent vectors of this arc, and v i is a normal vector of the arc at g 0 . Our goal is to transport v i to another normal vector v * i at the other end of the arc, g 1 .</p><p>Following <ref type="bibr" target="#b16">[17]</ref>, v * i is obtained by two reflection transformations. The first reflection uses the bisecting plane between g 0 , g 1 <ref type="figure">(Figure 8  (a)</ref>). Observe that the unit normal of this plane can be obtained by n = (u i +u i+1 ) |(u i +u i+1 )|. The reflection of any vector ξ by this plane can be written as</p><formula xml:id="formula_8">R(ξ ) = ξ − 2 (ξ • n) n<label>(9)</label></formula><p>After reflection, R(v i ) remains orthogonal to R(u i ), and the latter is identical with −u i+1 . The second reflection uses the bisecting plane between R(u i ) andu i+1 (see <ref type="figure">Figure 8</ref> (b)). Since R(v i ) is parallel to this reflection plane, it is unchanged by the reflection. Hence we obtain</p><formula xml:id="formula_9">v * i = R(v i ).</formula><p>(a) (b) <ref type="figure">Fig. 8</ref>. Parallel transport fromu i tou i+1 by two reflections.</p><p>The turning on the arc between {u i ,u i+1 } is simply the angle from v * i to v i+1 in the counter-clockwise orientation in the tangent plane aṫ u i+1 .</p><formula xml:id="formula_10">∠ (v * i , v i+1 ) = cos −1 v * i • v i+1 v * i |v i+1 | δ i (10) Here, δ i is 1 (resp. -1) ifu i+1 • v * i × v i+1</formula><p>is positive (resp. negative). The summation of the angles over all arc segments gives the desired turning over the entire curve,</p><formula xml:id="formula_11">Turnu (∂ M),B (v) = n−1 ∑ i=0 ∠ (v * i , v i+1 )<label>(11)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Discretizing spherical area</head><p>Using the choice of z as discussed earlier, the regionż(M), bounded bẏ u(∂ M)), is made up of n spherical triangles. Each triangle is formed by z 0 , a randomly chosen unit vector, and unit vectorsu i ,u i+1 for i = 0,...,n − 1. The signed area of each triangle can be obtained by</p><formula xml:id="formula_12">△ (z 0 ,u i ,u i+1 ) = (α 1 + α 2 + α 3 − π) η i (12)</formula><p>where α 1 , α 2 , α 3 are the dihedral angles between the planes forming the cone spanned by the spherical triangle and the origin (see <ref type="figure" target="#fig_8">Figure  7</ref> right), and η i captures the orientation of the triangle. Specifically, define n k as the unit normal of the plane opposite to angle α k for k = 1, 2, 3,</p><formula xml:id="formula_13">n 1 =u i ×u i+1 |u i ×u i+1 | , n 2 =u i+1 × z 0 |u i+1 × z 0 | , n 3 = z 0 ×u i |z 0 ×u i | (13)</formula><p>The angles α k are computed as</p><formula xml:id="formula_14">α 1 = cos −1 (n 2 • n 3 ) , α 2 = cos −1 (n 3 • n 1 ) , α 3 = cos −1 (n 1 • n 2 ) (14)</formula><p>The sign η i is 1 (resp. -1) ifu i+1 • (n 1 × n 2 ) is positive (resp. negative).</p><p>The summation of the signed areas over all triangles gives the desired total signed area overż(M),</p><formula xml:id="formula_15">Aż (M) = n−1 ∑ i=0 △ (z 0 ,u i ,u i+1 )<label>(15)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Boundary sampling</head><p>Our discrete algorithm correctly computes the parity of PV points given the discrete samples on ∂ M. However, it may fail to capture the true parity on M if u or v exhibits excessive variation between the sampled locations. To keep the variations low, we use a simple adaptive sampling strategy. Starting from a face edge, we calculate the angular difference between the u (and v) vectors at the two ends and create a sample at the mid point of the edge if the difference is greater than a user-defined threshold (we used 10 degrees). The new sample divides the edge into two segments, and the same process is repeated for each segment until either no more samples need to be created or a maximum subdivision depth is reached (we used 10). While we have not encountered such cases in our tests, it is possible that our generic assumptions (e.g., non-zero u and v on ∂ M) may be violated at a sample location p due to numerical evaluations. To deal with such degeneracy, one can perturb the location of p by a small spatial amount and re-sample u, v there. As long as such perturbation is done consistently for all surfaces that use p as a boundary sample, the parity test can still guarantee closedness of the PV curves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Comparison and Validation</head><p>Our parity test is similar in spirit to several existing methods for detecting zeros of v <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b9">10]</ref> in that they also monitor the winding of v on the face boundary in some 2D coordinate system. The key difference is that these existing methods use a single plane to establishing the coordinate system. Since this plane almost never contains v, v has to be first projected onto this plane. In contrast, our method uses variable planes orthogonal to u, which always contain v, and hence no projection is needed. The 2D coordinate systems on these planes are established by parallel vectors along the spherical curveu(∂ M). Equation 6 essentially computes the winding of v in these coordinate frames (Turnu (∂ M),B (v)) corrected by the turning of the frames themselves (Au (M) ).</p><p>To validate our method, we designed a synthetic example whose PV has a known form. The fields u, w are chosen so that the solution to Equation 1 can be expressed analytically but still has a non-trivial curve geometry. Specifically, for a spatial location {a, b, c}, we let w be a constant vector, and define u as a linear rotation field composed by successively rotating w around the X, Y, Z axes by angles a, b, c:</p><formula xml:id="formula_16">w(a, b, c) = {1, 1, 1} u(a, b, c) = R Z (c) • R Y (b) • R X (a) • w(a, b, c) T</formula><p>where R Π (α) is the 3D rotation matrix around a given axis Π by angle α (in radian). The solution to Equation 1 can be found using a symbolic package (e.g., Mathematica), and it is the union of straight lines and sinusoidal curves. For any real number t and integers c 1 , c 2 , there are 4 PV points of the following types:</p><formula xml:id="formula_17">• Type 1: t, 2c 2 π − π 2 , −t + 2c 1 π − π • Type 2: t, 2c 2 π + π 2 ,t + 2c 1 π − π</formula><p>• Type 3: t, 2 tan −1 cos(a)+sin(a)+1 cos(a)+sin(a)−1 + 2c 2 π,t + 2c 1 π</p><p>• Type 4: t, 2 mod tan −1 cos(a)+sin(a)−1 − cos(a)−sin(a)−1 , 2π</p><formula xml:id="formula_18">+ 2c 2 π, −t + 2c 1 π + π 2</formula><p>Points of the first two types lie on two groups of parallel lines, whereas points of the last two types lie on two groups of parallel sinusoidal curves. These PV curves are shown in <ref type="figure" target="#fig_9">Figure 9</ref>. We test our method at different grid resolutions. At each resolution, we compare the output of our test T our to the true parity of PV points on each grid face T true . A face is colored gray, red, blue, or not shown if the pair {T our , T true } has value {Odd, Odd}, {Odd, Even}, {Even, Odd}, or {Even, Even}. The result is shown in <ref type="figure" target="#fig_10">Figure 10</ref>, first row. Note that our test always matches the true parity even at an extremely coarse grid resolution, where the vector field on a cell face may vary significantly and there may be multiple PV points on one face.</p><p>We also tested existing methods based on boundary-sampling. In our implementation, we use the same boundary samples of the cell face M as in our method, and we compute the winding number of v at the samples after projecting to either the supporting plane of M <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5]</ref> (which we call the Face Plane test) or the plane orthogonal to the average of samples of u along ∂ M <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b9">10]</ref> (which we call the Average Plane test). The output of a test is the parity of the winding number. The results of these two tests, compared with the true parity, are shown in the second and third rows of <ref type="figure" target="#fig_10">Figure 10</ref>. Note that the Face Plane test consistently produces errors even at fine grid resolutions. The Average Plane test tends to make accurate decisions as a finer grid resolution, but fails at a low grid resolution.</p><p>We take a closer look at the failure cases of previous methods in <ref type="figure" target="#fig_1">Figures 11 and 12</ref>. <ref type="figure">Figure 11</ref> examines a face with no PV point, but an odd winding number is reported by both Face Plane and Average Plane tests (i.e., a false positive). <ref type="figure" target="#fig_1">Figure 12</ref> examines a face with one PV point, but an even winding number is reported by these tests (i.e., a false negative). Note that the choice of the projection plane in these tests has a significant impact on the winding of the projected 2D vectors (e.g., compare the lower pictures in (c,d) in each figure). On the other hand, our test does not require projection, and the correct parity is reported in both cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">APPLICATION: EXTRACTING RIDGE AND VALLEY LINES</head><p>Our test can be used in conjunction with a PV-extraction algorithm to ensure the closedness of the resulting curves wherever u, w are continuous. All that is needed for the algorithm is to compute seeds on a cell face whose parity matches the outcome of our test. For example, one can create one seed for each face where our test reports odd. For practical inputs, however, discontinuity of u, w generally exists. While the correctness of our parity test does not hold on faces containing such discontinuity, using our test still helps ensure well-connected curves elsewhere. We shall give an example of using our test in a typical 2stage PV extraction framework for computing ridge and valley lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Method</head><p>The ridge and valley lines of a 3D scalar field s : R 3 → R can be defined using the gradient g and the eigenvectors of the Hessian H <ref type="bibr" target="#b8">[9]</ref>. Let ε 1 , ε 2 , ε 3 be the three eigenvectors of H ordered such that their corresponding eigenvalues λ 1 , λ 2 , λ 3 have increasing absolute values. A point lies on the ridge or a valley if g is parallel to ε 1 . The values of λ 1 , λ 2 are both negative (resp. positive) if the point is on the ridge (resp. valley).</p><p>We can express ridges and valleys as PV by setting u = ε 1 and w = g. However, since ε 1 does not carry an orientation, it is technically a line field rather then a vector field. There are two approaches to resolve this difficulty. First, one can attempt to orient ε 1 locally on each cell face M by tracing along its boundary. The attempt will always succeed unless ε 1 is discontinuous somewhere on M <ref type="bibr" target="#b3">[4]</ref>, in which case our parity test would not be applicable anyway. Second, as done in several previous work <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b6">7]</ref>, one can use an alternative PV definition of u = Hg, and select from the computed curves those that are parallel to only ε 1 . The second approach avoids the need for orienting ε 1 and is more efficient because the eigen-problem is only solved during the selection process. However, the selection step may fail at locations on the curves where g and ε 1 are not aligned (e.g., due to numerical errors), which would lead to unnecessary disconnections in the resulting curves. Since our emphasis is on curve connectivity, our implementation takes the first approach.</p><p>In seed-extraction stage, we produce samples along the face boundary in an adaptive manner to ensure low variability of u, v. This is done using a recursive binary splitting strategy that adds a sample point between two existing ones until either the angle between u (and v) at successive samples falls under a given threshold or the distance between the samples is shorter than another threshold. After applying our parity test using <ref type="bibr">Equations 8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b14">15</ref>, and if the test reports odd, we compute a seed by applying a few 2D Newton-Raphson iterations starting from the face centroid. In seed-connection stage, we follow the simple strategy of connecting seeds by straight segments within a cell (more complicated tracing methods can also be applied). To deal with different number of seeds in a consistent manner, we additionally create a vertex (at the centroid of the face seeds) within a cell that has more than one seed and connect this vertex to each seed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results</head><p>We first test our method on a smooth distance field defined on a point set. The initial scalar value at a grid point is the Euclidean distance to the nearest point in the set. The grid is then smoothed using Gaussian kernels, and the scalar function s is defined by tricubic interpolation. An example result of our method for a Trefoil Knot is shown in <ref type="figure" target="#fig_2">Figure  13</ref>. We also compare with the results using the Face Plane test and the Average Plane test instead of our parity test. Note that the Face Plane test results in a large amount of spurious branches. While the Average Plane test produces much fewer noise, the resulting valley curve still contains disconnection and branching, due to a low grid resolution (20 3 ). On the other hand, our parity test gives a continuous knot as the valley curve. <ref type="figure" target="#fig_3">Figure 14</ref> shows the result of our method applied to two real-world data sets. One is the cryo-electron microscopy scan of a protein (BVP8), where the high density region is the protein backbone. The other one is a CT scan of blood vessels in the brain. In both data, ridge lines capture the meaningful features. For practical data like these, there is usually a fair amount of spurious ridge and valley lines that need to be pruned. A number of strategies for pruning ridge and valley lines have been used in the past <ref type="bibr" target="#b8">[9]</ref>. Here we applied simple pruning by thresholding the scalar value at the extracted PV points and removing short curve segments.</p><p>Since our parity test involves independent operations on each cell face, it can be easily parallelized. Our tests are performed on an Intel Xeon E5-2440 machine with 8 core 2.40G Hz CPU. The computational time, including both the parity test and curve extraction, ranges from 10 seconds for the protein data (on a 96 3 grid) to 20 minutes for the vessel data (on a 512 3 grid).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>We derive, for the best of our knowledge, the first robust test for the parity of the number of PV points on a genus zero surface with boundary in 3D. Similar to classical zero-crossing tests, our test only requires sampling along the boundary of the domain. A discretization of the test is described, validated, and compared with existing tests that are also based on boundary sampling. We also showed an application of the test for extracting continuous ridges and valleys.</p><p>Our parity test can be applied to arbitrarily shaped cell faces (e.g., triangles, hexagons, etc.) and even curved faces, and hence it is well suited for PV extraction in unstructured grids. Our test can also be used as an additional criteria for grid subdivision (e.g., subdivide if the parity is odd), which is particularly useful for tracing PV in higherorder fields <ref type="bibr" target="#b6">[7]</ref>.</p><p>While our test is restricted to disk-like surfaces in three dimensions, it would be interesting to explore its extension beyond this setting. As a starting point, we have verified that Lemma 4.1 should hold for surfaces of higher genus as well. <ref type="figure">Fig. 11</ref>. A cell face in our synthetic input. This face has no PV point (as seen in (a)). Our parity test correctly reports even, while the other two tests both report odd. The coordinates of the two corners of the face are {4.24,0.32,−4.5} and {4.24,2.63,−2.19}. <ref type="figure" target="#fig_1">Fig. 12</ref>. Another cell face in our synthetic input. This face has one PV point (indicated by the dot in (a)). Our parity test correctly reports odd, while the other two tests both report even. The coordinates of the two corners of the face are {−5,2.63,−2.19} and {−2.69,2.63,0.12}. <ref type="figure" target="#fig_2">Fig. 13</ref>. Ridge (red) and valley (green) lines extracted from a smoothed distance field to a point cloud (representing a Trefoil Knot) using different parity tests (grid resolution: 20 3 ). The two rows view the same data from different angles. determinant forms a graph, which partitions M into patches {M i } such that the Jacobian determinant ofu has the same sign within a patch. Since Lemma 4.1 holds within each M i , the total PV index over M, which is the summation of total index over each M i , equals</p><formula xml:id="formula_19">∑ i Turnu (∂ M i ),B (v) + ∑ i Au (M i ) 2π</formula><p>To prove Lemma 4.1 over entire M, it suffices to establish the following two identities</p><formula xml:id="formula_20">Au (M) = ∑ i Au (M i ) , Turnu (∂ M),B (v) = ∑ i Turnu (∂ M i ),B (v)</formula><p>The first identify holds because of the integral nature of the signed area. To show the second identity, consider the graph of the curves that partition M into patches M i . Each edge in the graph is either shared by the boundaries of two patches (traversed in opposite directions by the two boundaries) or lying on ∂ M. Now, write Turnu (∂ M i ),B (v) for each patch M i as the sum of turnings over edges in the graph (note that a parallel vector field is continuous even at C 0 corners of a curve). In the summation ∑ i Turnu (∂ M i ),B (v), the turnings on an edge shared by two patches cancel each other out, and hence only the turnings along the edges that are on ∂ M remain, which is exactly Turnu (∂ M),B (v). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B PROOF</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .Fig. 2 .</head><label>12</label><figDesc>(a) The tangent vector field g τ (blue) and another vector field v (red) along a curve τ on a unit sphere S. (b) Plotting g τ in the coordinate frame defined by v and the turn from v to g τ . Comparing the tangent fields (blue) and parallel fields (red) along the boundary of a hemisphere (left) and a flat disk (right). Noted under each picture are the total geodesic curvature of the boundary curve (defined as the turning from the parallel field to the tangent field) and the total Gaussian curvature of the surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Examples demonstrating the generalized Poincare-Hopf theorem, relating the total index Ind S (v) of a vector field v over a disk surface S to the turning of v from the tangents g ∂ S along the boundary ∂ S.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Notations for defining the PV index.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Illustration of the mapping f from M to S, and the Gauss map from S tou(M) on the unit sphere B.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Lemma 4 .</head><label>4</label><figDesc>1 requires knowledge of u over the interior of M to compute the signed area Au (M) . To avoid such need, we make the following observation (see proof in Appendix B): Lemma 4.2 Let z be any continuous, non-zero vector field on M such that z(x) = u(x) for all x ∈ ∂ M, and letż(x) = z(x)/|z(x)|. Then</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>1 − a 2 − b 2 (Fig. 6 .</head><label>126</label><figDesc>For a point on the disk with coordinates x = {a, b, 0}, define u(x) = a, b, √ top-left) and z(x) = a, b, − √ 1 − a 2 − b 2 (bottom-left). Note that the two vector fields are identical on the boundary of the disk. Whileu maps M to the top hemisphere of the unit sphere with a positive Jacobian determinant,ż maps M to the bottom hemisphere with a negative Jacobian determinant (as revealed by the inverted color order at the pole). The signed areas of the two images,u(M) andż(M), are respectively 2π and −2π. Their difference is 4π, which agrees with Lemma 4.2.The benefit of Lemma 4.2 is that we can replace Au (M) in Equation 6 by Aż (M) without affecting the parity of the quotient. Since the only requirement of z is to match u on the boundary ∂ M, such replacement avoids the need to probe the interior of M. Recall that the total PV index over M has the same parity as the number of stable PV points, we arrive at our main result, An example illustrating Lemma 4.2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Theorem 4 . 3 8 )</head><label>438</label><figDesc>The number of stable PV points on M equals, modulo 2, Turnu (∂ M),B (v) + Aż (M) 2π (where z is any continuous, non-zero vector field on M such that z(x) = u(x) for all x ∈ ∂ M, andż(x) = z(x)/|z(x)|.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 7 .</head><label>7</label><figDesc>Notations for discretizing the parity test.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 9 .</head><label>9</label><figDesc>PV curves of our synthetic vector fields. PV points of types 1, 2, 3, 4 are colored red, green, blue, magenta. The plot range is [−5,5] in X, [−4.3,3.7] in Y, and [−4.5,3.5] in Z.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 10 .</head><label>10</label><figDesc>Comparison of three parity tests on our synthetic data at four different grid resolutions (we used grid spacings 3.31, 2.31, 1.31, 0.31). Red (resp. blue) cell faces are where the test reports odd (resp. even) whereas the true parity is even (resp. odd).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 14 .</head><label>14</label><figDesc>Ridge lines extracted from real-world data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>OF LEMMA 4. 2 Proof:</head><label>2</label><figDesc>Consider the surfaceM that is identical with M but with an opposite orientation (so that the normal field ofM is opposite to that of M). Create a glued surface H = M ∪M. H is a closed surface homeomorphic to a sphere. Define mapping h : H → B (where B is the unit sphere) ash(x) = {u (x), if x ∈ Ṁ z(x), if x ∈MSince z, u are identical along the boundary of M andM, h is continuous. It is a well-known fact that the signed area of h(H) is the area of the unit sphere, 4π, times the topological degree of the mapping h, which is an integer. Hence we arrive at Equation 7 by noting that A h(M) = Au (M) + Aż (M) and Aż (M) = −Aż (M) .</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">The approach used by Medioni and co-workers<ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">14]</ref>, which is based on signs of the coordinate components of the projected v only at the four corners of the face, can be considered as a discrete way of computing the winding number.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The work of the first author is supported by NSF grants (IIS-0846072, IIS-1302200, IIS-1319573, DBI-1356388). The work of other authors is supported in part by NSF grants (CMMI-1039433, CC-NIE-1245795).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A PROOF OF LEMMA 4.1</head><p>Proof: If the Jacobian determinant ofu is positive everywhere on M, u(M) is a smooth surface whose unit normal vector at a pointu(x) is exactlyu(x). Hence Lemma 4.1 holds by the derivation in Section 4.1.2, letting S =u(M).</p><p>If the Jacobian determinant ofu is negative everywhere,u(M) is still a smooth surface but the normal at a pointu(x) is −u(x). Since v is tangent tou(M), Equation <ref type="formula">5</ref> Now consider the scenario where the Jacobian determinant ofu has mixed signs over M. In general, the loci whereu has zero Jacobian</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Using pvsolve to analyze and locate positions of parallel vectors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Gelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="682" to="695" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Inference of surfaces, 3d curves, and junctions from sparse, noisy, 3d data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Guy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Medioni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Mach. Intell</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1265" to="1277" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kobayashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nomizu</surname></persName>
		</author>
		<title level="m">Foundations of Differential Geometry</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Polygonizing extremal surfaces with manifold guarantees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Phan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Abeysinghe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Grimm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ju</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th ACM Symposium on Solid and Physical Modeling, SPM &apos;10</title>
		<meeting>the 14th ACM Symposium on Solid and Physical Modeling, SPM &apos;10</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Computing singularities of 3d vector fields with geometric algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Rockwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="283" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Singular points of vector fields under general boundary conditions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Morse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the National Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="428" to="430" />
			<date type="published" when="1928" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Efficient parallel vectors feature extraction from higher-order data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Pagot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename><surname>Osmari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sadlo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Comba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph. Forum</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="751" to="760" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The parallel vectors operator: A vector field visualization primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Visualization &apos;99: Celebrating Ten Years, VIS &apos;99</title>
		<meeting>the Conference on Visualization &apos;99: Celebrating Ten Years, VIS &apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Height ridge computation and filtering for visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sadlo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PacificVis</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="119" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Vortex detection in vector fields using geometric algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pollock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Applied Clifford Algebras</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Automatic Extraction of Vortex Core Lines and Other Line-Type Features for Scientific Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roth</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>ETH Zurich, Institute of Scientific Computing</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<title level="m">Topological Methods in Flow Visualization</title>
		<meeting><address><addrLine>Amsterdam, NL</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="341" to="358" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Tracing parallel vectors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sukharev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE</title>
		<meeting>SPIE</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">6060</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Inference of integrated surface, curve, and junction descriptions from sparse 3d data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Medioni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Mach. Intell</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1206" to="1223" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Extraction of parallel vector surfaces in 3d time-dependent fields and application to vortex core line tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Theisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sahner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weinkauf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page">80</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The 3d marching lines algorithm. Graphical Models and Image Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-P</forename><surname>Thirion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gourdon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="503" to="509" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Computation of rotation minimizing frames</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jüttler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<idno>2:1-2:18</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2008-03" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
