<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">VisageWeb: Visualizing WWW Data in Visage</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Higgins</surname></persName>
							<email>higgins@maya.com</email>
							<affiliation key="aff0">
								<orgName type="institution">MAYA Design Group, Inc</orgName>
								<address>
									<addrLine>2100 Wharton Street Suite #702 Pittsburgh</addrLine>
									<postCode>15203 +1 412, 488 2900</postCode>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lucas</surname></persName>
							<email>lucas@maya.com</email>
							<affiliation key="aff1">
								<orgName type="laboratory">MAYA Design Group, Inc</orgName>
								<address>
									<addrLine>2100 Wharton Street Suite #702 Pittsburgh</addrLine>
									<postCode>15203, 412, 488, 2900</postCode>
									<settlement>+1</settlement>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Senn</surname></persName>
							<email>senn@maya.com</email>
							<affiliation key="aff2">
								<orgName type="laboratory">MAYA Design Group, Inc</orgName>
								<address>
									<addrLine>2100 Wharton Street Suite #702 Pittsburgh</addrLine>
									<postCode>15203, 412, 488, 2900</postCode>
									<settlement>+1</settlement>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">VisageWeb: Visualizing WWW Data in Visage</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>World Wide Web</term>
					<term>Information Visualization</term>
					<term>User Interface</term>
				</keywords>
			</textClass>
			<abstract>
				<p>VisageWeb is an information-centric user interface to the World Wide Web built within the Visage data visualization environment. This paper traces the development of the VisageWeb project, using it to motivate an exploration of how an information-centric architecture copes with new visualization challenges. We conclude with a presentation of the VisageWeb prototype itself.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Visage is an information-centric environment for exploring and visualizing data <ref type="bibr" target="#b0">[1]</ref>. Our goal in the VisageWeb project is to extend the Visage environment to easily accommodate interfaces for browsing, organizing, exploring, and analyzing information on the World Wide Web.</p><p>A number of environments exist already to visualize the topographical structure of the Web. Some rely primarily on the explicit hyperlink connections amongst pages, others analyze page content to generate relationships <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>VisageWeb is unique in that while it supports "macroscopic" visualizations of this sort, it also allows an analyst to extract data from within pages. The value of the World Wide Web, of course, is the data contained within it. Usually this data is found within a page (or scattered amongst a few).</p><p>How does VisageWeb manage this flexibility? Visage's principled means of representing information allows great flexibility in the display and manipulation of that information. By modeling all information as directly manipulable objects, Visage provides the user a sense of direct-access -of "getting your hands on" the data.</p><p>We will briefly re-cap the information-centric architecture of Visage. We will then present the information architecture of the Web, drawing appropriate parallels to Visage and highlighting distinctions. Tracing VisageWeb's development, we will see how we needed to recast the Web to suit Visage's architecture and how we adapted Visage's user interface and capabilities to accommodate the Web. Finally, we will show some of the new prototypes for visualizing the Web now possible within Visage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THE INFORMATION-CENTRIC APPROACH</head><p>Visage's architecture, both in the details of its user interface and more generally can best be described as information-centric. Application-centric and documentcentric environments form a progression in which information-centric environments are the next logical step.</p><p>Application-centric environments give the file primacyany manipulation of data must be performed through an application upon a file. This level of granularity can be frustrating for the user because it sharply limits the organization of data to what the file system is capable of and limits manipulation and understanding of data to what an individual application permits.</p><p>With the advent of the graphical user interface, direct manipulation of files became more commonplace. After files became concrete, they evolved into documents: files coupled with component-managed behaviors. Extremely document-centric environments (like Web Forager <ref type="bibr" target="#b3">[4]</ref> and Workscape <ref type="bibr" target="#b4">[5]</ref>) allow visual and spatial operations to be performed on their documents.</p><p>Visage simply carries this progression one step further. Visage allows a data element to be directly manipulated at any level of granularity. A numeric table entry, a group of bars on a bar chart, or a complex presentation graphic are all equal candidates for user manipulation. Where document-centric interfaces to the Web, such as Web Forager, provide the user the ability to organize and understand collections of Web pages, VisageWeb allows the manipulation of fine-grained information even within a Web page.</p><p>To make this philosophy work in practice, we need an information architecture -a method of representing data consistently, so that the same fundamental operations may be performed on them everywhere.</p><p>Our information architecture is essentially object-oriented, but with a bent toward data representation rather than code representation. We use uniquely identified, extensible bundles of attribute-value pairs to represent every piece of data in Visage. In a traditional object-oriented system, we might also associate behavior with each of these bundles, enforcing a strict interface to hide the data representation. That approach is excellent for managing a code system, but we are interested here in creating an information visualization system. So we expose the structure of each bundle and allow behavior to be determined polymorphically and dynamically by "frames," discussed later.</p><p>We've come to call these bundles of information u-forms. Recognizing the need for a universal language for data representation, Dertouzos introduced e-forms <ref type="bibr" target="#b5">[6]</ref>. His eforms are simply bundles of attribute-value pairs. Our uforms extend this idea by attaching a universally unique identifier (or UUID) to each bundle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THE VISAGE USER-INTERFACE ARCHITECTURE</head><p>Having explained the philosophy and fundamental architecture of Visage, we need to examine the concrete pieces of the system. Data, as mentioned, are represented as universally unique attribute-value pairs called u-forms. A typical Visage database is a Web of u-forms, each with links to other uforms, rather than a hierarchy with well-defined leaves and interior nodes.</p><p>Graphically, Visage represents u-forms with visual elements. A visual element (or simply, element) refers to any atomically manipulable object in Visage. Examples include bars in a bar chart, a data cell in a table, and text labels on plots. Each element corresponds to one u-form in the database. This relationship is one-to-many, a u-form may have many different elements representing it.</p><p>Any element can have certain core interface operations performed on it at any time throughout the Visage environment. These operations include: Drill-down, which allows users to traverse a link from a data object represented by a visual element to related objects in the database.</p><p>Drag-and-drop, which allows people to move visual elements among frames.</p><p>Coordinated marking, which means that when a person marks an element with a certain color, other elements that share the same underlying u-form are marked that color as well.</p><p>Recomposition, which allows people to group objects (retrieved by drill-down) by common values of a specified attribute.</p><p>Magnification, which means that every visual element in Visage can be magnified, or scaled, to conserve screen real estate or provide a better view of the visualization. Through its scripts, each frame defines a user-interface "physics" <ref type="bibr" target="#b6">[7]</ref>. Because the u-form object model is pervasive throughout Visage, data can be copied from one frame into another, allowing multiple polymorphic views of the same data. Furthermore, the core interface operations are available in every frame. To put it another way, frames provide a specialization mechanism for viewing data, without sacrificing the generally available operations and representations. A frame or collection of frames can be thought of as a special-purpose "information appliance" <ref type="bibr" target="#b7">[8]</ref>.</p><p>The concept of information appliance is of particular importance. VisageWeb is an attempt to build a Web browser as an information appliance within Visage. Because all such appliances share the u-form data model and the ubiquitous basic user interface of Visage, doing this gives us an immediate entree into other Visage information appliances -plot charts, outliners, and so on. Furthermore, it facilitates developing a directmanipulation interface to organizing and navigating amongst and within Web pages.</p><p>Building the VisageWeb appliance presents two major challenges: extending the Visage environment to handle data from the Web and, more importantly, mapping the information architecture of the Web into that of Visage. It is important to note that Visage's information architecture was designed to support the subsumption of other information architectures, so this is not an unnatural goal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THE INFORMATION ARCHITECTURE OF THE WORLD WIDE WEB</head><p>Visage has a strong and principled information architecture. We insist on the representation of all data as a network of u-forms. The computation that presents the data in a particular visualization is the responsibility of a particular frame. This enforces a sharp separation between the representation of data and its presentation, and makes multiple views of the same data commonplace within Visage. (This is reminiscent of Smalltalk's MVC, see <ref type="bibr" target="#b8">[9]</ref>.)</p><p>The Web, however, has its own information architecture.</p><p>Since it is a highly distributed entity and a morass of de facto standards and individual publishers, it is not so rigorous. Bearing in mind that this summary can't be complete -new "Web technologies" emerge daily -let's examine the information architecture of the Web <ref type="bibr" target="#b9">[10]</ref>:</p><p>Uniform Resource Locators The topology of the World Wide Web is that of a network, and each node in the network is identified by a URL. They are responsible for making navigation possible within the Web. These URLs, as their name implies, specify data location rather than data identity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>HyperText Markup Language</head><p>The principal language of the Web is HTML. It is a language that has enjoyed unprecedented success, but also evades consistent definition and interpretation. The original conception of HTML meant to separate the representation of documents from their visual presentation. As the Web has evolved, however, authors have demanded tighter control over the visual rendering of their documents.</p><p>Responding to this, extensions of HTML designed to deal with presentation in more and less principled ways have emerged, including the </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>COMPARING THE ARCHITECTURES</head><p>The task at hand is to map these elements of the World Wide Web's information architecture into that of Visage. Let's look at some promising correspondences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Similarities</head><p>First, the URL on the Web serves some of the same purposes that a UUID does in the Visage repository. Both allow larger aggregate structures of information to be constructed by referencing other structures. URLs work by telling you where to go to get a piece of information -you must assume that whatever is at that location is what you wanted. UUIDs are handles to particular bundles of information. These bundles have persistent "identity" -an identity that is preserved across changes of storage location and even across changes in the content of the object.</p><p>Part of what we've discovered from analyzing the Web in these terms is that both of these ideas have merit. A UUID makes tasks like revision control and data replication tractable. A URL provides instructions for retrieval. The Visage architecture defines a class of u-forms that serve as pointers, containing a field that has a location reference and one that has a unique identifier, so that a system can find the information and then make sure that it is what was expected.</p><p>Visage attaches type information to its u-forms to assist frames in rendering them successfully but dictates no particular behavior with respect to types. The MIME type system is fairly flat by comparison with type systems found in many programming languages. It is designed to represent a document-centric model and does not scale down very well. Information of high granularity is likely to be merely an "octet-stream" in MIME, which is not very informative. Fortunately, the Visage type system can subsume MIME, since it is more expressive, and augment it when necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Differences</head><p>To deal with the lack of well-defined uniqueness on the Web, we simply imposed it. VisageWeb's approach to handling types it doesn't understand is the same as most browsers': it tries the best it can with a default visualization. VisageWeb is somewhat more forgiving than other browsers, since Visage is designed to handle "unfamiliar" data gracefully.</p><p>It turns out that anything with a URL is fetched via the Hypertext Transport Protocol (HTTP) <ref type="bibr" target="#b10">[12]</ref>. HTTP attaches many interesting attributes like "content type," "last modified date," and so forth, to every transmission. For system administrators and site managers, this metainformation (recorded in the u-forms by VisageWeb) can make very informative visualizations. This means that even information of a MIME type that Visage can't render may have interesting meta-information to visualize.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BUILDING THE INFORMATION-CENTRIC WEB BROWSER</head><p>Visage is as much an experiment in a new user interface as it is a visualization environment. In fact, we believe that the two roles dove-tail nicely, producing an information exploration environment. This differentiates it, we think, from some other experimental Web browsers <ref type="bibr" target="#b11">[13]</ref>. One notable browser that exists as part of a larger environment that might well be characterized as an "information exploration environment" is the pad++ "zoomable browser" <ref type="bibr" target="#b12">[14]</ref>. It's useful to recount some of the adjustments that had to be made to the user interface to accommodate the visualization challenges afforded by the Web. • "Web operations" such as traversing hyperlinks and parsing HTML should be available from the high level Visage scripting language. As much as possible should be implemented as script to facilitate user change and user incorporation into larger appliances. It is a tenet of Visage that the system designer cannot anticipate all possible visualizations, so the analyst must be able to extend the environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Project Requirements and Rationale</head><p>• All the normal Visage operations should be available.</p><p>Web pages, and pieces of Web pages, need to be navigable (in the drill-down sense), copyable, draggable, and scalable. Again, this is necessary for consistency with Visage as a whole.</p><p>• Normal Web operations should be available in the user interface. The user should have point-and-click hyperlink traversal, forward and backward navigation, a refresh operation, and organization of favorite links and pages. To the extent that this falls out of standard visualizations within Visage, so much the better.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Early Attempts</head><p>Our initial prototypes were unsatisfactory in almost all of these respects. Visage is implemented over a platformindependent C++ kernel, which provides an interpreter for the high-level scripting language, an interface to data repositories containing u-forms, and various eventhandling and drawing primitives. Our first attempt at providing a browser appliance was simply to add a set of new primitives to the kernel.</p><p>We added a hard-coded frame for rendering HTML, various URL and HTTP routines for fetching Web pages, and an HTML parser in C++. All of this was much too low-level. It lacked flexibility and made implementing the user-interface nearly impossible. It also complicated moving data from the "HTML frame" to other frames and back. We realized we had failed to follow our own architectural guidelines.</p><p>So we threw all of it away. We carefully segmented the problem into pieces that truly required a more systemsoriented language and those that could be handled in the high-level Visage script. We chose Java rather than C++ for our systems work, making asynchronous operations a lot easier.</p><p>Our final design placed fetching URLs and parsing HTML in systems-level Java code, accessible through a typical function call API from the scripting language. Rendering Web pages -the definition of the "HTML frame"became a high-level chore. Thus we could bring to bear the native power of the Visage environment to render HTML in a hierarchical "outline" form using the standard Visage outliner frame, or in any one of the other Visage frames available.</p><p>The design of the browser frame presented a challenge, however. As we've described, a Visage frame visualizes a collection of data. But a Web page is a hierarchy -a collection of collections of collections. (This falls out of the hierarchical tag-structure of HTML.) It follows that the natural design for a Visage frame that renders a Web page should be a frame containing nested subframes, which themselves contain frames, and so on. This is a compelling idea, because it means that when the user grabs the part of a Web page containing a paragraph, he will get that frame which represents the paragraph, and it will quite naturally be manipulable within Visage.</p><p>Unfortunately, our visual and user-interface design style for frames was too heavy. We had certainly conceived of nested frames before but never confronted dozens or hundreds of nested frames. Nor had we considered that frame decorations like scrollbars, titlebars, and buttons might be out of place when nested. Obviously, a Web page cannot be faithful to its author's design if every paragraph comes with a scrollbar and a title! As we were running into these problems, we had also begun to be very frustrated with the fact that users encountering Visage for the first time confused it with a standard Window-Icon-Menu-Pointer (WIMP) environment. Part of the problem was that frames, with their attendant scrollbars and buttons and titles, looked too much like windows. Thinking of frames as windows has proven to steer beginning Visage users away from some of Visage's most compelling capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rethinking the User Interface</head><p>We decided to dispense with the extra baggage. Frames are simply areas on which elements are arranged. Scrollbars appear when and if necessary. Titlebars are present if a frame designer decides one is called for. Modifier buttons are simply absent. This gives a pleasing spartan design. Under the new design, attention is focused on the visualization within the frame -distracting visual elements are present only when necessary. It leaves us with a thorny problem, though. When we need buttons and other extra controls, where should we put them?</p><p>Our solution is the "attachment." Attachments are lightweight containers of UI devices. They can be attached to a frame in any one of a number of positions and can be exposed in a variety of fashions:</p><p>Tack The "minimized" exposure; all that is visible is a tiny pushpin to indicate that an attachment is present.</p><p>Icon An icon or set of icons representing the attachment's functions is visible. Usually the icons serve as buttons for the functions.</p><p>Exposed The full attachment is exposed.</p><p>The attachments may be torn off the frame when not needed or moved into any one of their exposure states. This neatly solved the problem of a place for the controls.</p><p>Here was somewhere where a maximize button could reside, or a refresh button, or a status bar. Dynamic query sliders, always lightweight objects in Visage, are also now attachments. <ref type="figure">Figure 2</ref>: A Web page with an attachment that handles Web navigation and one that displays URLs when the mouse rolls over a hyperlink.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A SMORGASBORD OF VISUALIZATIONS</head><p>The novelty of VisageWeb lies in its ability to easily generate a variety of visualizations. We'll illustrate and describe a number of them.</p><p>To begin, let's look at a visualization of the finest granularity of information that VisageWeb processes: HTML tags within a Web page.  It is important to emphasize that the outliner frame is one of the standard visualization tools available in Visage. It knows nothing about Web pages and requires no special adaptations to work with VisageWeb. This is a consequence of their shared information architecture.</p><p>Let's examine the Web page frame more closely. The outliner visualization makes it clear that the entire page is not the finest level of information available. The seasoned Visage user would therefore expect to be able to interact with those interior structures in a drag-and-drop fashion.</p><p>In fact, this is the case. <ref type="figure">Figure 4</ref>: A Web page that is being edited using direct manipulation techniques. <ref type="figure">Figure 4</ref> shows that a user can edit the Web page by dragging pieces of it out. In the figure, a GIF image has been copied out of the Web page and a paragraph of text is in the process of being copied (the stylized arrow has been added to clarify the operation). It is also possible to remove structures from the Web page, rather than copying them. (Among other things, this allows one to easily remove flashing banner ads.) If this is done, the Web page presentation reorganizes itself appropriately.</p><p>Being able to easily remove content from a Web page inspires the question: is it possible to add content? The answer is yes, and in just the way one would expect. Any Visage element may be dropped into a Web page. It will be incorporated into the Web page's flow of information as naturally as is possible. Moreover, it is then possible to publish the Web frame. This provides a very natural mechanism for publishing visualizations constructed in Visage to an audience: simply create the visualization using any Visage frames desired, then drop them into a Web page, and (using an attachment created for this purpose) publish the page. "Publishing" really does two things. It generates GIF images of the elements involved, together with an HTML wrapper. It also generates a serialized version of the Visage elements which is written into a comment in the HTML. It then writes the whole thing to a location accessible by a Web server (usually via a distributed filesystem). The consequence of this is that users using traditional Web browsers can see the visualizations generated in Visage, but VisageWeb users can not only see the visualizations, but recover the frames published as live objects, since VisageWeb can interpret the hidden serialization. Let's turn now to a more realistic visualization problem. Since we can access and visualize data within a Web page, it seems natural to try to exploit data found in a normal HTML table. We'll use a real-world example to motivate our discussion.</p><p>The MAYA Design Group, like many companies, uses an online timesheet system with a Web-based interface. Every employee enters time, billed to various projects, into the system every week. Project managers can call up HTML pages that, having interrogated a database, display these billed hours.</p><p>Unfortunately, even for rather small projects a tabular visualization is difficult to understand. When the projects become moderate sized (involving, say, more than ten people over dozens of weeks) the tables are almost worthless.</p><p>An analyst using VisageWeb can simply drag the table into a more useful frame, and generate a more useful visualization.  The catch, of course, is that most tables found on the Web are not well-formed <ref type="bibr" target="#b13">[15]</ref>. VisageWeb, by default, naively assumes that columns define attributes of rows. This works fairly well much of the time, but the analyst must often add script code to interpret the tables. (In the example cited, alternate rows of the table were used by the HTML author for visual formatting and are irrelevant to the data analysis task, so script had to be added to remove them.) A mechanism is provided to facilitate doing this in an ad-hoc manner.</p><p>Let's now move to tasks involving the higher, "pagelevel," granularity. A common method of finding information on the Web is to use a search engine. Typically, the result is a big list of hyperlinks. Visage's scripting interface makes it a matter of a few minutes work to design a wrapper for the search engines (similar to the "Net Search" button on Netscape's browser) that fetches the top ten entire pages, representing them as thumbnails. <ref type="figure" target="#fig_0">Figure 10</ref>: The results of a Web search.</p><p>Now the user can use Visage analysis tools on the collection of pages. One easy thing to do is plot the Web pages by geographic point of origin. There are databases on the Web (http://cello.cs.uiuc.edu/cgi-bin/slamm/ip211/) that map an IP address to latitude and longitude. A Visage user armed with a script that marks up the u-forms for his or her Web pages with such information can plot the pages on a world map. (In the current prototype such a script is active by default.) More powerful scripted frames could do arbitrary sorts of analysis. In any case, the user has the full power of Visage's graphical data analysis environment to evaluate the results of the search. It is also possible to do visualizations that don't involve "Web pages" per se at all. It is an easy matter to write a script that queries a variety of search engines with same search terms, collecting results from each. It then might generate scores for each result based on the relative rank of the discovered URL within each engine's catalog. Interestingly, there is comparatively little overlap amongst the popular search engines' catalogs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FUTURE RESEARCH</head><p>VisageWeb breaks new ground both in user interfaces for interacting with the World Wide Web and in facilitating visualizations of information gleaned from the Web.</p><p>We hope to use these new capabilities to facilitate the addition of new visualization frames to Visage, and to further explore the user-interface ramifications of a directmanipulation interface to the Web.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CONCLUSIONS</head><p>We've adapted the World Wide Web to Visage's information-centric environment, developing an information appliance within Visage for extracting information from the Web.</p><p>Creating this appliance has led to new insights about the Visage information architecture and user-interface paradigm. It has also generated an exciting and unique Web browser, fully integrated with the data-manipulation and visualization tools of Visage.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Photograph of early physical mockups of attachments.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>A Web page, left, with an alternate visualization of it in the outliner frame.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3</head><label>3</label><figDesc>shows a scaled down Web page next to an outliner frame. Both the Web page frame and the outliner frame are visualizing the same data, to wit, the MAYA Design Group's home page. The Web page frame shows it as a Web browser traditionally would: a rendered document. The outliner, by contrast, shows the Web page as an aggregate with subordinate aggregates illustrating the hierarchical internal structure of a Web page.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>A standard Visage visualization being added to a Web page frame.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>A Visage visualization being published directly to the Web.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>The Visage visualization fromFigure 6in Netscape.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>An HTML table of financial billing data is dragged to a plot chart. Now we have a plot chart of billing, color-coded by department within MAYA, displayed across time. This makes spending trends easy to spot. Further analysis reveals the particular employess responsible for a spike in spending.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Plot chart of billing data from Figure 8 is further analyzed. Source Web page is shown scaled down in lower left.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 11 :</head><label>11</label><figDesc>Web pages scattered on a map of the world.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 12 :</head><label>12</label><figDesc>Lower left: Search engine results are plotted with their rank on the Excite engine displayed along one axis and their rank in the Altavista engine along the other. Upper right: Search engine results recomposed by host site. Saturated magenta coloring indicates coordinated selection, less saturated coloring encodes host site.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE</head><label></label><figDesc></figDesc><table /><note>element and Cascading Style Sheets. Multipurpose Internet Mail Extensions MIME provides an extensible type system for the Web [11]. It informs a browser about the nature of the information that has been downloaded, which in turn hints at what display method might be appropriate. Generally, the end-user has at least some control over what this display method is.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Whenever a Web page is brought into Visage, u-forms are created to represent it. They also have attributes that indicate from what URL the u-forms originated and even from what part of the parsed HTML stream they came. In that way we can make an intelligent guess later, if the page is fetched again, about whether the new page and the old are "the same." Many sites on the Web update their content continually. Since the Web has no pervasive notion of identity, information providers can't declare whether new content should be treated as an entirely new u-form or an update of an old uform. VisageWeb can either create a new u-form or update an existing one, relying on heuristics involving URL and page structure to decide when to do which.HTML is a fairly straightforward language to represent in the u-form environment since it is essentially hierarchical. Visage's information-centric agenda requires us to be able to manipulate much finer granularities, so we parse incoming HTML into a tree of uforms, once again imposing individual identities for every tag encountered. In principle, every distinguishable parse element in the HTML stream could be represented as a uform -that means every word. Because the user typically doesn't want to use a drag-and-drop direct-manipulation interface on individual words, we aggregate them according to their parent tags for manipulation in the user interface.</figDesc><table><row><cell>Sometimes it's possible to grant more identity to elements</cell></row><row><cell>of a Web page -images and forms, for instance, have</cell></row><row><cell>URLs associated with them. Even non-URLed elements</cell></row><row><cell>can be identified heuristically -"the third paragraph" is a</cell></row><row><cell>perfectly sensible heuristic. While this isn't as good as real</cell></row><row><cell>unique identity, such heuristics can have great practical</cell></row><row><cell>value in many real-life situations.</cell></row></table><note>Its parsing rules are a bit strange, but well-defined. The only difficulty is that some pieces of an HTML document have no individual identity, not even a URL. There is no well-defined way to refer to one paragraph or another within an HTML document.MIME types serve a useful but limited classification function. Visage provides composable and extensible types of its own. Typically, in the case of a decomposable MIME type like HTML, we enrich the type structure significantly, adding types for every tag and entity. For less easily parsed types like "image/gif" we simply use the MIME type.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>•</head><label></label><figDesc>Users should be able to directly manipulate Web pages at different levels of granularity. For instance, a user should be able to tear an HTML table, paragraph, or image off a Web page and drop it in another frame (even another Web page!). Users should be able to rearrange the contents of a page and add other Visage elements to a page. Supporting all these levels of granularity is important to allow visualizations to be constructed from information wherever it is found.</figDesc><table><row><cell>• Users should be able to directly manipulate entire Web</cell></row><row><cell>pages, analyzing each Web page as a collection of</cell></row><row><cell>HTML u-forms, image u-forms, and other content u-</cell></row><row><cell>forms. This is necessary for VisageWeb to be consistent</cell></row><row><cell>with the rest of Visage.</cell></row><row><cell>• Users should be able to directly manipulate collections</cell></row><row><cell>of Web pages, visualizing these collections in other</cell></row><row><cell>frames. This allows macroscopic visualizations.</cell></row><row><cell>• Asynchronous operations should be available. Users</cell></row><row><cell>expect a threaded, non-blocking browsing environment.</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This work was funded by DARPA contract #DAA01-97-C-R045. Many of the ideas presented here were developed through interaction with our colleagues at the MAYA Design Group. Particularly valuable engineering assistance in developing prototypes was provided by Phil Stroffolino and Kevin Hoffmann. The "attachments" design is largely the result of work by David Bishop and Phil Oye.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The authors would like to thank Erin Kelly, Heather</head><p>McQuaid, Susan Salis, Anukul Kapoor, and Jeremiah Blatz for editorial assistance. We would also like to thank Mr. Blatz for help in formatting our screenshots and photographs, and for video production help. Finally, we would like to thank Dr. Steven Roth for many useful insights about the paper in general.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards an Information Visualization Workspace: Combining Multiple Means of Expression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">F</forename><surname>Roth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mei</forename><forename type="middle">C</forename><surname>Chuah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kerpedjiev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stephan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jake</forename><surname>Kolojejchick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lucas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Human-Computer Interaction</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Webbook and the Web Forager: An Information Workspace for the World Wide Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuart</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>York</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;96</title>
		<meeting>CHI &apos;96<address><addrLine>New York NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="111" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Vizualizing the Results of Multimedia Web Search Engines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mukherjea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hirata</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hara</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Information Vizualization 95</title>
		<meeting>Information Vizualization 95<address><addrLine>Los Alamitos CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Soc. Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="64" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Web-based Information Vizualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randall</forename><forename type="middle">M</forename><surname>Rohrer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Swing</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="page" from="52" to="59" />
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Designing Workscape: An Interdisciplinary Experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">M</forename><surname>Ballay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;94</title>
		<meeting>CHI &apos;94<address><addrLine>New York NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="10" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">What Will Be</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">;</forename><surname>Dertouzos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Marc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">A</forename><surname>Schillner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Harper Collins</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Experiences with the Alternate Reality Kit, An Example of the Tension Between Literalism and Magic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ACM CHI + GI 87 Conf. on Human Factors in Computing Systems and Graphics Interface</title>
		<meeting>ACM CHI + GI 87 Conf. on Human Factors in Computing Systems and Graphics Interface<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="61" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Information Appliances and Tools in Visage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">F</forename><surname>Roth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jake</forename><surname>Kolojejchick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lucas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="page" from="32" to="41" />
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Tessler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Smalltalk Environment. Byte</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="90" to="147" />
			<date type="published" when="1981-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Electronic Networking: Research, Applications and Policy, 1992. 11. Multipurpose Internet Mail Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Berners-Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Cailliau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Groff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pollermann</surname></persName>
		</author>
		<ptr target="ftp://ftp.isi.edu/in-notes/rfc1522.txt,ftp://ftp.isi.edu/in-notes/rfc1523.txt" />
		<imprint/>
	</monogr>
	<note>World-Wide-Web: The Information Universe</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fielding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gettys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Frystyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Berners-Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Hypertext Transfer Protocol -HTTP/1.1</title>
		<imprint>
			<date type="published" when="1997-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The DeckScape Web Browser</title>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI &apos;96</title>
		<meeting>CHI &apos;96<address><addrLine>New York NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">A Zooming Web Browser. Human Factors in Web Development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hollan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stewart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Vick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Grose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Forsythe</surname></persName>
		</author>
		<editor>Ratner, Grose, and Forsythe, (Lawrence Erlbaum Assoc</editor>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="255" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Silk from a sow&apos;s ear: Extracting usable structures from the Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pirolli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pitkow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Human Factors in Computing Systems, CHI &apos;96</title>
		<meeting><address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
