<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Feature-Sensitive Subdivision and Isosurface Reconstruction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gokul</forename><surname>Varadhan</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Krishnan</surname></persName>
							<email>krishnas@research.att.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young</forename><forename type="middle">J</forename><surname>Kim</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinesh</forename><surname>Manocha</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="laboratory">AT&amp;T Research Labs</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Carolina at Chapel Hill</orgName>
								<orgName type="institution">University of North</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Feature-Sensitive Subdivision and Isosurface Reconstruction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling-Curve</term>
					<term>surface</term>
					<term>solid</term>
					<term>and object representations Implicit modeling</term>
					<term>Boolean operations</term>
					<term>Marching Cubes</term>
					<term>Distance fields</term>
					<term>Subdivision</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: We present improved subdivision and isosurface reconstruction algorithms for polygonizing implicit surfaces and performing accurate geometric operations. We highlight its performance on the &quot;gun model&quot; of the Bradley Fighting Vehicle which is generated using 8 Boolean operations. The leftmost and center left images show an iso-surface reconstruction using the dual contouring algorithm [Ju et al. 2002] on a distance field sampled on a uniform 64 × 64 × 64(≈ 262K) and 256 × 256 × 256(≈ 16.7M) grid, respectively. The reconstruction produced by dual contouring on the coarser grid has many handles. The center right image shows the improved iso-surface generated from our new reconstruction on the uniform 64 × 64 × 64 grid. It can reconstruct thin features without creating additional handles, but cannot reconstruct all the sharp features. We also present an algorithm to detect multiple sharp features in a cell and use it to generate an adaptive grid. The rightmost image shows our reconstruction applied to a grid generated by our subdivision algorithm. It can reconstruct all the sharp features, does not create any additional handles and uses only 313, 168 voxels.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Implicit surface representations have become increasingly common in computer graphics and geometric modeling. An implicit surface is typically defined as an isosurface of a 3-dimensional scalar field. It can be mathematically expressed by a function f (p) = 0 where p is a point. Moreover, f (p) is often defined as the distance between p and the surface of the object being represented.</p><p>In this paper, we mainly deal with geometric models that are implicitly defined using a volumetric data set. Our main goal is to compute an accurate polygonization of the implicit surface and use these representations for geometric processing applications such as Boolean operations (i.e. union, intersection and difference) or offset computations. The resulting algorithms use the following two steps:</p><p>1. Generate a voxel grid and compute the signed distance field at its corner grid points.</p><p>2. Reconstruct the isosurface using some variant of the Marching Cubes algorithm.</p><p>Many issues arise when applying this approach to complex shapes and reliably generating the boundary of the final surface. The accuracy of the algorithm is mainly governed by the resolution of the underlying grid and the choice of the reconstruction algorithm. If the final surface has thin features, insufficient grid resolution can create handles in the reconstructed surface (see <ref type="figure">Fig. 1</ref>). Moreover, many geometric operations (e.g., Booleans) create new sharp features or edges on the boundary of the final surface. Our goal is to reconstruct them as faithfully as possible. Recent work on implicit modeling techniques has addressed some of these problems. These techniques include generating adaptive grids based on octrees or using adaptively sampled distance fields (ADFs) <ref type="bibr" target="#b2">[Frisken et al. 2000]</ref>. However, a key challenge is designing criteria for generating adaptive subdivision. Recently, two improved isosurface extraction algorithms have been proposed: Extended Marching Cubes <ref type="bibr" target="#b10">[Kobbelt et al. 2001]</ref> and dual contouring <ref type="bibr" target="#b7">[Ju et al. 2002]</ref>. Both algorithms use Hermite data and generate isosurfaces that contain sharp features. In practice, they work well when each cell contains no more than one sharp feature or complex edges (i.e. edges with more than one intersection with a surface). Our approach builds on the adaptive grid generation methods and the improved isosurface extraction algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Main Contributions:</head><p>We present two new algorithms for accurate polygonization of implicit surfaces from volumetric data: feature-sensitive adaptive subdivision and isosurface reconstruction. Our reconstruction uses directed distances, i.e., distance along a direction <ref type="bibr" target="#b10">[Kobbelt et al. 2001]</ref>, to perform an exact edgeintersection test. This edge intersection test can reliably detect intersections of the edge with a surface. This test is combined with the dual contouring algorithm <ref type="bibr" target="#b7">[Ju et al. 2002</ref>] to obtain an improved reconstruction algorithm, Extended Dual Contouring. It can reconstruct thin features and avoids creation of additional handles. The algorithm takes into account the characteristics of the grid and considers complex edges. It enumerates all the intersections along the edges, separates them into components and reconstructs the isosurface locally within each cell.</p><p>We present a novel subdivision algorithm that takes into account sharp features in the original primitives as well as new sharp features that are introduced by intersecting surfaces and Boolean operations. We analyze the problem of accurately reconstructing the sharp features and present a conservative test to check for multiple sharp features in a cell. This test is used as a subdivision criterion for ADF generation and geometry processing.</p><p>Our overall approach for polygonization uses two kinds of tests to generate a more accurate approximation of the final surface: an edge-intersection test for improved reconstruction of thin features without creation of additional handles, and a multiple sharp feature detection test for improved reconstruction of sharp features. We have applied our algorithms to compute the boundary of implicit surfaces and complex CAD models designed using Boolean operations and offsets. The underlying primitives consist of polyhedra, quadrics and tori; our benchmark model (Bradley Fighting Vehicle) is designed using thousands of Boolean operations. We also use the graphics rasterization hardware to accelerate the computation of distance fields. In practice, our algorithm is able to compute a good approximation of the final surface (as shown in <ref type="figure">Fig. 1</ref>).</p><p>New Results: Novel aspects of our work include:</p><p>1. An improved reconstruction algorithm based on dual contouring that can reconstruct thin features and takes complex edges into account.</p><p>2. An exact edge-intersection test based on directed distance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A conservative technique for detecting multiple sharp features</head><p>per cell that arise from intersecting surfaces or Boolean operations.</p><p>Organization: The rest of this paper is organized as follows. We give a brief survey of prior work in Section 2. We present our improved reconstruction algorithm to compute the isosurface in Section 3. We present a technique for detecting multiple sharp features in a cell and use it to perform adaptive subdivision in Section 4. We describe the implementation of our algorithms and highlight their performance on different benchmarks in Section 5. Finally, we analyze the performance of our algorithms and discuss some of their strengths and limitations in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Prior Work and Preliminaries</head><p>In this section, we give a brief overview of prior work on generating discrete samples and reconstruction algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Sample Generation</head><p>We mainly deal with generating distance samples of analytic functions or geometric models. Many efficient algorithms are known to compute the distance fields and their gradients at any point in space. A good overview of these algorithms has been given in <ref type="bibr" target="#b1">[Cuisenaire 1999]</ref>. A key issue in generating discrete samples is the underlying sampling rate. Some of the common algorithms use an adaptive refinement strategy based on an octree, and only split those cells that contain a piece of the final surface in a top-down manner. Other techniques have used curvature information in generating the distance samples <ref type="bibr" target="#b15">[Shekhar et al. 1996;</ref><ref type="bibr" target="#b3">Gibson 1998</ref>]. Moreover, <ref type="bibr" target="#b2">[Frisken et al. 2000;</ref><ref type="bibr" target="#b14">Perry and Frisken 2001]</ref> have presented bottom-up and top-down methods for generating ADFs based on piecewise trilinear interpolation. Although, these algorithms optimize the sparsity of the octree representation, the approximation using a tri-linear interpolation may not work well for curved primitives or when the final surface has a lot of sharp features. <ref type="bibr" target="#b6">[Huang et al. 2001]</ref> have proposed a complete distance field representation (CDFR) to capture sharp features of an object.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Isosurface Extraction and Reconstruction</head><p>Given a volume grid, some of the most common techniques for isosurface reconstruction are based on Marching Cubes and its variants <ref type="bibr" target="#b11">[Lorensen and Cline 1987]</ref>. These algorithms assume that the surface samples are computed by an approximate intersection of the edges of a cell with the underlying surface. The Marching Cubes algorithm can produce too many small and badly-shaped triangles which typically require improving the mesh with decimation. Many authors have proposed using adaptive hierarchies to extract isosurfaces that will have fewer triangles <ref type="bibr" target="#b14">[Perry and Frisken 2001;</ref><ref type="bibr" target="#b15">Shekhar et al. 1996]</ref>.</p><p>The Marching Cubes algorithm is unable to extract high quality triangle meshes with sharp features from the volumetric data. Two kinds of algorithms have been proposed for accurate polygonization of implicit surfaces with sharp features. The first set of algorithms are based on an improved Marching Cubes based reconstruction. <ref type="bibr" target="#b10">Kobbelt et al. [2001]</ref> proposed an enhanced distance field representation and an Extended Marching Cubes algorithm to perform feature sensitive sampling and reduce the aliasing artifacts in the reconstructed model. This algorithm explicitly identifies and processes sharp features. <ref type="bibr" target="#b7">Ju et al. [2002]</ref> presented a Dual Contouring method for Hermite data which avoids the explicit identification and processing. Both of these algorithms work well as long as the grid contains at most one sharp feature. However, no good algorithms are known for generating a grid with atmost one sharp feature per cell. The second class of algorithms for sharp features  improve the output of Marching Cubes based on optimization techniques and smoothing operations, as a post-processing step <ref type="bibr" target="#b13">[Ohtake et al. 2001;</ref><ref type="bibr" target="#b12">Ohtake and Belyaev 2003</ref>].</p><p>Often the surfaces reconstructed from a volume data using the Marching Cubes algorithm have a higher genus than they should have. <ref type="bibr" target="#b18">Wood et al. [2002]</ref> and <ref type="bibr" target="#b0">Bischoff and Kobbelt [2002]</ref> have presented algorithms on isosurface topology simplification and isosurface reconstruction with topology control. These algorithms are mainly targeted towards volume data generated from physical scanning devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Extended Dual Contouring</head><p>In this section, we present our improved reconstruction algorithm, Extended Dual Contouring. Given a volumetric grid with atmost one sharp feature per cell, we apply this reconstruction algorithm locally to each grid cell. The algorithm combines an exact edgeintersection test based on directed distances with the dual contouring algorithm.</p><p>We start with a brief description of the dual contouring algorithm <ref type="bibr" target="#b7">[Ju et al. 2002]</ref>. The dual contouring method operates on a uniform grid in two steps. First, for each cell that exhibits a sign change across the edges, this method examines the set of intersection points and generates a vertex (per cell) such that a quadratic error function is minimized. We refer to this vertex as the error-minimizing vertex. Second, for each edge that exhibits a sign change, the contouring method generates a quad connecting the error-minimizing vertices of the four cells sharing the edge. The dual contouring algorithm detects whether the surface intersects the edge based on sign change across the edge. However, when the surface has thin features, this may not be a reliable intersection test. When a surface intersects an edge an even number of times, the edge will not exhibit a sign change. As a result, the reconstructed surface can have additional handles or disjoint components (as shown in <ref type="figure" target="#fig_1">Fig. 2</ref>).</p><p>In this case, both the endpoints A and B have the same sign, and the dual contouring algorithm considers the edge as nonintersecting. We present an exact edge-intersection test that can reliably detect edge intersection. We use this test to design an improved reconstruction algorithm. </p><formula xml:id="formula_0">) i 1 , i 2 , i 3 , i 4 are enumerated and divided into a set of com- ponents, {i 1 , i 2 } &amp; {i 3 , i4}. Error-minimizing vertices (M1 &amp; M2</formula><p>shown by pink circles) are computed for each component independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Edge Intersection Test</head><p>We use directed distances to reliably detect whether the surface intersects an edge. Let the directed distance between a point p and a surface along a unit vector v be denoted by D v (p). Our test is based on the following property: If an edge AB intersects the surface, then the directed distance at A along the direction vector, AB, will be strictly less than the Euclidean distance, D(A, B). Based on this fact, we define an edge AB to be intersecting if:</p><formula xml:id="formula_1">| D− → AB (A) | &lt; D(A, B)</formula><p>This is shown in <ref type="figure" target="#fig_1">Fig. 2</ref>. We define an edge to be complex if it is intersecting, but does not exhibit a sign change. The surface intersects a complex edge more than once. Complex edges typically arise when a cell contains a thin feature. The edges, AB, BC, DA are classified as intersecting based on our edge intersection test. No sign change occurs across the edge AB, a complex edge.</p><p>We use directed distance not only to detect edge intersections but also for computing intersection points. The directed distance at the two endpoints provides information for two intersection points along that edge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Reconstruction from Complex Edges</head><p>A direct application of the dual contouring algorithm to a grid with complex edges can lead to additional handles in the reconstruction due to the presence of complex edges (see <ref type="figure">Fig. 1</ref> and <ref type="figure" target="#fig_1">Fig.  2(b)</ref>). In this section, we present our contouring algorithm that takes complex edges into account. We enumerate all the cell intersection points, separate them into components, and generate an error-minimizing vertex for each component independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Intersection Points</head><p>We initially consider edges that exhibit a sign change and complex edges that have positive signs at both the endpoints. For each edge of a cell, the directed distances at the two endpoints provide us information for two intersection points. For edges that exhibit a sign change we consider one intersection point for that edge, while for complex edges two intersection points are considered. We enumerate all the intersection points for each edge of the cell. Consider cell ABCD in <ref type="figure" target="#fig_2">Fig. 3</ref>. Edges AB &amp; CD each have one intersection point. Edge BC is complex and has two intersection points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Component Separation</head><p>The set of intersection points enumerated above may belong to more than one surface component. A component refers to a sheet of the surface within the cell. For example, cell ABCD in <ref type="figure" target="#fig_2">Fig. 3</ref>  has two components. Next, we present a technique to separate the set of intersection points into components. Given a grid cell, let I be the set of intersection points. Each intersection point i ∈ I, is associated with a unique grid point with a positive sign. We refer to this grid point as the parent of i, denoted as P(i). See <ref type="figure" target="#fig_2">Fig. 3</ref>. We</p><formula xml:id="formula_2">have I= {i 1 , i 2 , i 3 , i 4 }, P{i 1 , i 2 } = B, P{i 3 , i 4 } = C.</formula><p>Given two intersection points, i, j ∈ I, we define the following equivalence relation:</p><p>i → j if and only if there is a path between P(i) and P(j) consisting of only non-intersecting edges in the cell.</p><p>The equivalence class defined by this relation induces a partition of I into separate components. In the case of cell ABCD, we have i 1 → i 2 and i 3 → i 4 . There is no non-intersecting path between B and C. As a result, I gets divided into two components:</p><formula xml:id="formula_3">{i 1 , i 2 } &amp; {i 3 , i 4 }.</formula><p>It is important to note that the components that result from the above method are accurate only because the edge intersection test is reliable. We compute an error-minimizing vertex for each component separately. Given an intersection point p along an edge of the cell C, let M C (p) be its error-minimizing vertex within the cell C. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Contouring algorithm</head><p>The resulting contouring algorithm is very similar to the dual contouring algorithm, but it must consider that an edge can have up to two intersection points and that there can be multiple errorminimizing vertices per cell. Our overall contouring algorithm proceeds in the following manner:</p><p>1. for each cell, separate the intersection points into components and generate an error-minimizing vertex for each component independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">for each intersecting edge,</head><p>• for each intersection point p on the edge -for each cell C i , i = 1, . . . , 4, that shares the intersecting edge, select M C i (p) as the errorminimizing vertex -Generate a quad by connecting the selected vertices <ref type="figure" target="#fig_4">Fig. 5</ref> is a 2D illustration of our contouring algorithm. This contouring algorithm also extends to adaptive grids, based on the approach presented in <ref type="bibr" target="#b7">[Ju et al. 2002]</ref>.</p><p>The grid can also have complex edges with negative signs at both the endpoints. Our component separation technique easily extends to handle them. We define the equivalence relation in terms of grid points with a negative sign. The partition induced by this relation separates the intersection points into components. The rest of the algorithm is similar to that of complex edges with positive signs at both the endpoints.</p><p>The intuition behind the equivalence relation is that if we walk across the edges of the cell without any intersections, we are always on the exterior (or interior) of the surface. We treat this as a hint to the local topology inside the cell. <ref type="figure" target="#fig_3">Figs 1 &amp; 4</ref> show reconstruction using the extended dual contouring algorithm applied to different benchmarks and compare it with dual contouring. The reconstruction produced by dual contouring algorithm has many topological artifacts.</p><p>Our reconstruction algorithm requires that there is atmost one sharp feature per grid cell. Next, we present a subdivision algorithm that generates a grid satisfying this requirement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Feature-Sensitive Subdivision</head><p>Many geometric processing applications like surface intersection and Boolean operations result in sharp features on the boundary of the surface. In the context of this paper, points of nondifferentiability (either along a curve or isolated surface points) constitutes a sharp feature. Examples include vertices and edges of polyhedra, or the intersection curve of two smooth surfaces. When we generate the voxel grid for these geometric models, some of the voxels can have more than one sharp feature. In order to use our reconstruction algorithm, we present a new algorithm to detect multiple sharp features per cell.</p><p>Sharp features can arise in a number of ways: from polyhedral primitives, as a result of performing geometric operations involving intersecting surfaces or Boolean operations, or due to singularities such as self-intersections. In case of polyhedron, we detect sharp features by tracking vertices and edges of the polyhedron. The problem of computing the intersection curve between two surfaces has been well studied. However, current algorithms are unable to robustly evaluate the intersections or handle degenerate cases for general models <ref type="bibr" target="#b5">[Hoffmann 2001]</ref>. As a result, our goal is to develop good approximation algorithms.</p><p>In this section, we address the problem of detecting sharp features that are created as a result of geometric operations involving  <ref type="figure">Figure 6: Fig (a)</ref> shows our reconstruction algorithm applied to a 32 × 32 × 32(≈ 32K) uniform grid. Some of the cells in the grid have multiple sharp features. As a result, the reconstruction suffers from aliasing. <ref type="figure">Fig (b)</ref> shows our reconstruction applied to an adaptive grid generated by our adaptive subdivision algorithm that uses 37, 456 voxels. It was able to reconstruct sharp features. surface intersection between primitives. We also present an approximate technique to compute the number of sharp features per cell and use it for performing adaptive subdivision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Sharp Features from Intersecting Surfaces</head><p>Consider the case when we are trying to compute the union of two objects S 1 and S 2 . Let the continuous signed distance field corresponding to the two objects be d 1 (x) and d 2 (x), respectively. The distance field, d(x), for S 1 ∪ S 2 is given by</p><formula xml:id="formula_4">d(x) = min (d 1 (x), d 2 (x)).</formula><p>This function can also be written as H <ref type="figure">(d 1 , d</ref> 2 ) (refer to <ref type="figure" target="#fig_6">Fig. 7)</ref>, where</p><formula xml:id="formula_5">H (p, q) = (p + q) 2 + (q − p) 2 sgn(p − q).<label>(1)</label></formula><p>The function (sgn(.) : R → {−1, 0, 1}) is the standard sign function. All Boolean operations can be expressed using linear combinations of the operand distance fields along with the sgn(.) function. From the point of view of signal processing, the presence of the sgn(.) function in the above expression can result in sharp features during Boolean operations. It is known that this function is not bandlimited. As a result, even if the primitive distance fields are bandlimited signals, a single Boolean operation can destroy this property. We use this formulation to provide a test that detects presence of sharp features within a cell. Since the sgn(.) function changes value at the zero crossing of its argument, the sharp features of the original operation can be characterized by tracking the zeros of its argument. Let us consider the union operation described above. For distance fields (defined by a metric), d 1 and d 2 , we must track <ref type="figure">Figure 8</ref>: Illustration of our subdivision algorithm in presence of multiple sharp features. Surfaces S 1 and S 2 intersect inside the cell ABCD where S 2 already has a sharp feature. Our algorithm subdivides the cell until it has no more than one sharp feature the zero-level surface of the function (d 1 − d 2 ) (called the bisector surface) (see <ref type="figure" target="#fig_6">Fig. 7</ref> for a one-dimensional example). An alternate geometric justification for this exists. Given two smooth primitives, the sharp features produced as a result of a Boolean operation occur only where the surfaces intersect. The intersection curve between the two solids is strictly contained in the zero set of (d 1 −d 2 ), where d 1 and d 2 are the distance fields of the two solids.</p><p>A simple test to detect the presence of a sharp feature is to track the presence of the bisector surface using its signed values at the grid points. However, this test can be conservative, and even the absence of sharp features can lead to unnecessary subdivisions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Detecting Multiple Sharp Features</head><p>We present an algorithm to estimate whether a cell has more than one sharp feature. We further subdivide a cell based on the outcome of this test.</p><p>We assume that at most one new sharp feature is created due to intersecting surfaces or a Boolean operation between a pair of primitives inside a cell. Whenever such an operation is performed between two objects, the number of sharp features inside a cell resulting from the operation is bounded by the number of sharp features of the individual objects (prior to the operation) inside the cell and any extra features created as a result of the intersection between them. We use this property in our algorithm. The main advantages of this approach lie in its simplicity, and its natural extension to a nested sequence of geometric or Boolean operations, say all within the same cell. Let us denote the number of sharp features of an object inside a cell using the #(.) operator. If is the geometric or Boolean operation between two objects, S 1 and S 2 , then we define it as</p><formula xml:id="formula_6">#(S 1 S 2 ) = #(S 1 ) + #(S 2 ) + I (S 1 , S 2 )</formula><p>, where</p><formula xml:id="formula_7">I (S 1 , S 2 ) = 1 if S 1 and S 2 intersect, 0 otherwise (2)</formula><p>Since the definition of the #() function is recursive, we must compute the sharp feature counts of all the leaf-level primitives. This computation is not difficult when dealing with linear and quadric primitives. As we mentioned earlier, in case of polyhedron, we detect sharp features by tracking vertices and edges of the polyhedron. We assume that smooth primitives such as ellipsoids and tori do not have any sharp features. A cylinder has two sharp features corresponding to the edges of its bottom and top caps. However, the main issue is how well we can compute I (., .) inside a cell. We choose the bisector surface test to determine I (., .). Even though this test can be conservative, we perform cell subdivision only if #() for the cell is greater than 1. This process is illustrated in <ref type="figure">Fig. 8. Figs. 1 and 6</ref> show the benefit of our subdivision algorithm.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implementation and Performance</head><p>In this section, we describe the implementation of our subdivision and reconstruction algorithms and highlight their performance on different applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Implementation</head><p>We used C++ programming language with the GNU g++ compiler under Linux operating system. For the choice of GUI implementation, GLUT and OpenGL were used. We represented all our primitives in an implicit form and computed distances to the primitives in a lazy manner. We used two types of distances: Euclidean distance to perform the sharp feature test during subdivision and directed distance for reconstruction. As part of the edge intersection test, we perform an inequality test on distances. The correctness of this test depends on the precision of distance computation. To test whether the edge intersects the surface, we first test for a sign change across the edge endpoints and apply our edge intersection test only if no sign change occurs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Applications</head><p>We used three different applications to test the performance of our algorithms. These include boundary evaluation of complex CAD models, offset computations and polygonization of general implicit <ref type="figure">Figure 11</ref>: Offset: The left image shows the spoon model and the right image is its offset surface. We decompose the spoon model into 25 convex polytopes, and reduced the problem to computing union of 25 pairwise Minkowski sums. It took about 13 secs to compute the boundary including distance field computation, adaptive subdivision and reconstruction.</p><p>models. In case of boundary evaluation of CAD models and offset computation, the problem reduces to performing many Boolean operations on the primitives. Even though the problem of Boolean operations and boundary evaluation has been extensively studied in solid modeling, no good algorithms are known for efficient and robust computation, especially for curved primitives <ref type="bibr" target="#b5">[Hoffmann 2001]</ref>. Some recent algorithms based on exact computation <ref type="bibr" target="#b8">[Keyser et al. 2002]</ref> can produce accurate results. However, they cannot handle degenerate configurations that arise in real-world applications. We used a number of benchmarks to test the performance of our algorithms and to compute an approximation to the final boundary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Boundary Evaluation of Bradley Fighting Vehicle:</head><p>We used the model of a Bradley Fighting Vehicle defined using Boolean operations. It consists of 1,296 solids and each solid is defined using 2 − 20 Boolean operations. The total number of Boolean operations is 8, 456 and the primitives consist of polyhedra, quadrics and tori. A view of the Bradley Fighting Vehicle is shown in <ref type="figure" target="#fig_8">Fig. 10</ref>. Some of the solids are shown in <ref type="figure" target="#fig_7">Fig. 9</ref>.</p><p>Offset Computation: The offset of a surface is defined by taking a fixed offset along the normal direction at each point and computing the envelope of the resulting set of points. We formulate it as the Minkowski sum with a sphere. Given a primitive P and a sphere S of radius r centered at the origin, the set of points in the offset surface are given as: P ⊕ S = {p + s| p ∈ P, s ∈ S}. No good algorithms are known for exact computation for any arbitrary primitive, P. One approach for approximating the offset surface is based on computing a convex decomposition of P and using the decomposition property of Minkowski sums. Computing the Minkowski sum of a convex polytope and a sphere is relatively simple. If P is decomposed into convex pieces, there can be O(n) pairwise Minkowski sums and the problem reduces to computing their union. We applied our adaptive subdivision and reconstruction framework to approximate a boundary of the union of convex primitives. We used a model of a spoon (shown in <ref type="figure">Fig. 11</ref>) decomposed it into 25 convex polytopes and computed the boundary using 25 union operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Polygonization of General Implicit Models:</head><p>We used our reconstruction algorithm to polygonize the surface of general implicit models. In <ref type="figure" target="#fig_1">Fig. 12</ref>, we show the image of a heart-shaped implicit model polygonized using extended dual contouring. This model is represented mathematically by a sixth order polynomial, (2x 2 + y 2 + z 2 − 1) 3 − (0.1x 2 + y 2 )z 3 = 0. <ref type="figure" target="#fig_1">Figure 12</ref>: General Implicit Model: The image shows a heartshaped implicit model polygonized using extended dual contouring. This model is represented as a sixth order implicit polynomial function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Performance</head><p>We have applied our algorithms to perform 8, 456 Boolean operations in 1, 296 solids in the Bradley model, offset computations and polygonization of implicit models. In our implementation, more than 90% of the time is spent in distance computation; applying the multiple sharp features subdivision criteria and computing the isosurface using extended dual contouring algorithm takes the remaining time. On average, it took about 12-15 secs to compute an approximation to each solid in the Bradley model of which 10-12 secs were spent in distance computation. The remainder of the time was spent on adaptive grid generation and iso-surface reconstruction. We accelerated distance computation by computing a distance field (directed as well as Euclidean) at a minimum resolution of 64 × 64 × 64 using a hardware-based approach similar to <ref type="bibr" target="#b4">[Hoff et al. 1999]</ref> and adaptively computing additional distance values in software. The hardware generated distance values are obtained by rendering a polygonal approximation of distance functions. The average time to generate a grid for each solid using our multiple sharp features test varied from 0.7-0.9 secs. The average time to compute a boundary representation of each solid using the extended dual contouring algorithm was about 1 sec. <ref type="table" target="#tab_0">Table 1</ref> shows timings for the extended dual contouring algorithm applied to different benchmarks. <ref type="figure">(Fig 1)</ref> 0.61 2.14 1.14 2.57 Turret <ref type="figure" target="#fig_7">(Fig. 9)</ref> 0.72 2.55 0.89 2.72 Drivewheel <ref type="figure" target="#fig_7">(Fig. 9)</ref> 0.85 3.32 1.03 3.56 Hull <ref type="figure" target="#fig_7">(Fig. 9)</ref> 0.81 3.12 0.95 3.41 We represent the adaptive grid using an octree. For all our benchmarks, we generated an adaptive grid with a minimum resolution of 64 in each dimension and subdivide it in an adaptive manner, such that the maximum resolution in each dimension is bounded by 512. <ref type="figure" target="#fig_2">Fig. 13</ref> highlights the performance of our adaptive subdivision algorithm on different benchmarks, showing the level of subdivision. <ref type="figure" target="#fig_3">Figs. 1 &amp; 4</ref> show a comparison between the extended dual contouring and dual contouring. Our algorithm produces better reconstructions with fewer levels of subdivision. <ref type="table" target="#tab_0">Table 1</ref> compares the performance of the extended dual contouring algorithm with that of the dual contouring. On an average, it is 10-20% slower compared to dual contouring algorithm. Our algorithm behaves differently from dual contouring only in the cells with complex edges. Because the gun model has many complex edges at a coarse resolution of 64 × 64 × 64, our algorithm takes more time.  <ref type="figure" target="#fig_7">Fig. 1 and Fig. 9</ref>. It highlights the number of voxels generated by our adaptive subdivision algorithm at different resolutions. Note that a very small fraction of the voxels at 64 × 64 × 64 resolution are further subdivided by our algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dual Contouring Ext Dual Contouring</head><formula xml:id="formula_8">Model N = 64 N = 128 N = 64 N = 128 (s) (s) (s) (s) Gun</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Comparison with Previous Approaches</head><p>We have presented an algorithm for generating an adaptive grid that takes into account the number of sharp features per cell. To the best of our knowledge, none of the previous approaches for grid generation took this into account; consequently, we cannot directly compare those approaches to ours. Previous algorithms <ref type="bibr" target="#b2">[Frisken et al. 2000;</ref><ref type="bibr" target="#b14">Perry and Frisken 2001</ref>] based on tri-linear interpolation may not work well for curved primitives or when the final surface contains many sharp features. Comparing the performance of our grid generation algorithm with these algorithms proves difficult because distance computation time depends highly on the primitives and the number of Boolean operations per solid. Our benchmarks include curved objects such as quadrics and tori and our solids are generated by performing 2-20 Boolean operations. Moreover, our implementation can be sped up by cache coherence techniques presented in <ref type="bibr" target="#b14">[Perry and Frisken 2001]</ref>.</p><p>Optimization based algorithms <ref type="bibr" target="#b13">[Ohtake et al. 2001;</ref><ref type="bibr" target="#b12">Ohtake and Belyaev 2003]</ref> can recover sharp features in many cases, though their applicability to complex models defined using hundreds of Boolean operations and whose final boundary consists of multiple sharp features close to each other is not clear. <ref type="bibr" target="#b6">[Huang et al. 2001]</ref> have used a Complete Distance Field Representation (CDFR) to capture sharp features of an object. However, it is unclear if the CDFR representation can be used to consistently capture sharp features generated from geometric operations such as Boolean operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>In this section, we analyze our algorithms and discuss some of its strengths and limitations. The techniques presented in this paper address the problem of sampling and reconstruction using distance fields. We address two main issues with respect to generating accurate reconstructions. These are sharp features and additional handles that can arise in Marching Cubes based reconstruction algorithms. Main Benefits: One of the main challenges with Marching Cubesbased algorithms is accurate reconstruction of all the sharp features. Fundamentally, the problem of computing sharp features based on discrete sampling can be ill-posed. In practice, this imposes a limit on the performance of any algorithm based on a subdivision and reconstruction framework. However, the use of sharp feature test gives us certain properties which can generate better reconstructions. Overall, our algorithm for subdivision and reconstructing surfaces with sharp features is more general and less restrictive than earlier techniques like Extended Marching Cubes or Dual Contouring, which assume at most one sharp feature per cell. The method works quite well on our benchmarks.</p><p>Our reconstruction algorithm detects surface features that cannot be found purely based on sign changes along an edge. One alternative to our subdivision and reconstruction approach would have been to subdivide the grid adaptively until there are no complex edges and use dual contouring for reconstruction. However, such a subdivision algorithm can be very conservative and can result in a very high number of cells. One of our major goals is to use fewer grid cells, if possible. Limitations: Our reconstruction algorithm uses information along the edges of the cell to make a guess about the local topology within the cell. This is not a fool-proof test; in some cases, the topology within the cell can be different. Thus, although it produces better results as compared to earlier algorithms, it is not completely immune from topological inconsistencies. It does not handle edges with more than two intersection points. The algorithm doesn't handle cases where a surface lies completely within a cell or passes through a face of the cell without intersecting any edges. To detect such cases, <ref type="bibr" target="#b17">[Varadhan et al. 2003</ref>] have presented an efficient voxel-intersection test based on max-norm computation to reliably test whether the surface intersects a voxel. Furthermore, our assumption of two primitives intersecting in only one sharp feature per cell may not hold in some configurations of the primitives. In such cases, our approach may not reconstruct all the sharp features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>We have presented a novel reconstruction algorithm for extracting isosurfaces from volume data. Our reconstruction algorithm can reconstruct thin features without creation of additional handles. We presented an exact edge-intersection test which can reliably detect intersections of the edge with a surface. We presented new techniques to handle problems related to multiple sharp features. We have applied the results to generate an approximate boundary of a Bradley Fighting Vehicle described using more than 8000 Boolean operations on curved primitives.</p><p>Many avenues for future work lie ahead. We have applied our approach to reconstruct the boundaries generated from Boolean operations and implicit functions defined using polynomials. We would like to apply it to inputs defined using blends and warping. We would like to incorporate the voxel-intersection test <ref type="bibr" target="#b17">[Varadhan et al. 2003</ref>] in our adaptive subdivision algorithm. We would also like to extend our sharp feature computation algorithm to handle primitives that can intersect in more than one sharp feature per cell. We could use more efficient algorithms for distance field computation <ref type="bibr" target="#b16">[Sud and Manocha 2003</ref>]. Finally, we would like to extend our approach to compute good approximations for arrangement computation problems (e.g. envelope computation, cell decomposition, swept volume <ref type="bibr" target="#b9">[Kim et al. 2003</ref>], etc.).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Fig (a) shows a surface (shown in green) intersecting a cell. The symbols, + &amp; − represent positive and negative signs of distance at the grid points where the grid point outside the surface is defined as having positive distance and vice versa. Fig (b) shows reconstruction using dual contouring algorithm. Note that the reconstructed surface has disjoint components. Fig (c) shows how the directed distance can be used as a reliable edge intersection test. The surface intersects edge AB if and only if | D AB (A) |&lt; D(A, B)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>The primitive shown in green intersects cell ABCD such that the edge BC is complex. The intersection points (shown by red cross</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figs (a)&amp; (c) shows reconstruction using extended dual contouring method applied to different benchmarks with thin features on an adaptive grid.Figs (b) &amp; (d)show reconstruction of the models using dual contouring on the same grid. Note that the reconstruction produced by dual contouring has many topological artifacts.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Contouring: Within each cell, an error-minimizing vertex (shown by pink circles) is computed for each component independently. The reconstructed surface (shown in brown) is obtained by connecting the error-minimizing vertices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>This figure shows a union operation between two functions, d 1 and d 2 , and their union expressed as min(d 1 ,d 2 ). The sharp features in the union occur where the function (d 1 -d 2 ) changes sign i.e., at the zero crossing of the sign function sgn(.) We use this as a test to detect sharp feature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Benchmarks: Fig. (a) Turret is composed of 41 solids, where each solid defined using 2 − 19 Boolean operations. Fig. (b) Drivewheel composed of 30 solids, each defined using 2 − 7 Boolean operations. Fig. (c) Hull in the Bradley model composed of 36 solids, each defined using 2 − 12 Boolean operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Bradley Model: This figure shows a view of the Bradley Fighting Vehicle. This model consists of 1, 296 solids and each solid is defined using 2 − 20 CSG operations, for a total of 8, 456 CSG operations for the entire model. It took about 3.5 hours, including subdivision, distance field computation and reconstruction, to generate the approximate boundary on a 2 GHz Pentium 4 PC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 13 :</head><label>13</label><figDesc>This figure shows the total number of voxels in our adaptive grid for different benchmarks (shown in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Performance: This table compares the performance of extended dual contouring algorithm with that of dual contouring on different benchmarks at different grid resolutions (N × N × N)</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">IEEE Visualization 2003,  October 19-24, 2003, Seattle, Washington, USA 0-7803-8120-3/03/$17.00 ©2003 IEEE</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>This research is supported in part by ARO Contract DAAD 19-99-1-0162, NSF awards ACI-9876914, ACI-0118743, ONR Contract N00014-01-1-0067 and Intel Corporation. We thank Joe Warren and Scott Schaefer for providing us with dual contouring code and the reviewers for their feedback and suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Isosurface reconstruction with topology control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bischoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Pacific Graphics</title>
		<meeting>of Pacific Graphics</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="246" to="255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Distance Transformations: Fast Algorithms and Applications to Medical Image Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Cuisenaire</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
		<respStmt>
			<orgName>Universite Catholique de Louvain</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Adaptively sampled distance fields: A general representation of shapes for computer graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Frisken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rockwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jones</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGGRAPH</title>
		<meeting>of ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="249" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Using distance maps for smooth representation in sampled volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gibson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Volume Visualization Symposium</title>
		<meeting>of IEEE Volume Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast computation of generalized voronoi diagrams using graphics hardw are</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Culver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Keyser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="277" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Robustness in geometric computations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hoffmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Science in Engineering</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="143" to="156" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A complete distance field representation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">Y</forename><surname>Liou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the conference on Visualization</title>
		<meeting>the conference on Visualization</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="247" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dual contouring of hermite data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Losasso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schaefer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics (Proc. SIGGRAPH)</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Esolid: Exact solid modeling for low-degree curved solids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Keyser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Culver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Foskey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Solid Modeling and Applications</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fast swept volume approximation of complex polyhedral models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varadhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Symposium on Solid Modeling and Applications</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Feature-sensitive surface extraction from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Schwanecke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGGRAPH</title>
		<meeting>of ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="57" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3D surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;87 Proceedings)</title>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dual-prime mesh optimization for polygonized implicit surfaces with sharp features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ohtake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Belyaev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of CISE</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Dynamic meshes for accurate polygonanization of implicit surfaces with sharp features. Prof. of Shape Modeling International</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ohtake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Belyaev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pasko</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="135" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Kizamu: A system for sculpting digital characters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Frisken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGGRAPH</title>
		<meeting>of ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="47" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Octree-based decimation of marching cubes surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shekhar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Fayyad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Cornhill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Visualization</title>
		<meeting>of IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="335" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Fast distance field computation using graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>University of North Carolina</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. TR03-026</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Efficient max-norm distance computation and reliable voxelization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varadhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Diggavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics Symposium on Geometry Processing</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Isosurface topology simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schroder</surname></persName>
		</author>
		<idno>MSR- TR-2002-28</idno>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>Microsoft Research</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Tech. rep.</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
