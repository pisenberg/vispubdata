<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Counting Cases in Marching Cubes: Toward a Generic Algorithm for Producing Substitopes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Florida State University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Linton</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Saint</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Counting Cases in Marching Cubes: Toward a Generic Algorithm for Producing Substitopes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: G.2 [Discrete Mathematics]: Combinatorics-Counting problems</term>
					<term>G.4 [Mathematical Software]: Algorithm Design and Analysis</term>
					<term>level set, isosurface, orbit, group action, Marching Cubes, separating surfaces, geometric substitution, substitope</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Andrews Distinct cases of colorings for a square, assigning one color to each vertex. Top row: seven cases result from using four colors (fluid, bone, tissue, lesion) when applying Separating Surfaces to a square. Bottom row: thirteen cases result from using three colors (+-=) when applying Marching Cubes to a square.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">The MC family of algorithms</head><p>The Marching Cubes (MC) algorithm was presented by <ref type="bibr" target="#b17">Lorensen and Cline in 1987</ref>  <ref type="bibr" target="#b17">[Lorensen and Cline 1987]</ref> as an exhaustivesearch algorithm that generates a level set (isosurface) of a scalar function f .</p><p>The algorithm iterates over each cube tesselating a compact subvolume of R 3 on which the function f is defined.</p><p>The sign of f (v i ) − c is evaluated at the eight vertices v i of a cube, where c is some user-defined constant (the isovalue). Neglecting the degenerate case where the sign is exactly zero, each of the eight vertices can be in one of two states: negative or positive (black or white). These produce 2 8 = 256 patterns. Many of these patterns turn out to be equivalent under the symmetries of the cube (such as rotation or mirror-reflection). Other patterns are equivalent under reversal of colors (for example, all-black being equivalent to all-white). Through patient brute-force organization of the 256 patterns, one discovers there to be fourteen or fifteen equivalence classes of the colorings. Among the fifteen cases is a chiral pair that are mirror images of each other, so these two are equivalent if orientation is ignored.</p><p>In the MC algorithm, the pattern of a given cube is matched to one of these fourteen or fifteen cases (via a look-up table), and a pre-determined arrangement of polygons is fitted to meet the constraint f (p) − c = 0 for points p within the cube. In other words, the cube is replaced by zero or more triangles approximating the level set. Examples are illustrated in figure 1, showing one of the geometric substitutions in a 2-simplex, a 3-simplex, a 2-cube, and a 3-cube.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Variations on MC</head><p>Since its original publication, MC has inspired numerous modifications and extensions. These variations suggest that a family of algorithms exists, whose members are distinguished by a few key parameters. A selection of these variations is surveyed below.</p><p>Variation of the shape. If a 3-simplex (tetrahedron), rather than a 3-cube, tiles the domain, then the scalar function is evaluated at only four vertices. Bloomenthal presented this approach in 1988 <ref type="bibr" target="#b4">[Bloomenthal 1988]</ref>, and Shen and Johnson called it "Sweeping Simplices" in their 1995 paper <ref type="bibr" target="#b26">[Shen and Johnson 1995]</ref>. One advantage of using tetrahedra rather than cubes is that the analysis is simpler: only three cases arise for the vertex colorings of a tetrahedron, rather than fourteen for a cube.</p><p>Variation of the dimension. The two-dimensional version of MC is popularly called "Marching Squares," which provides a simple motivation for the three dimensional case. Although the algorithm is unpublished, it can easily be derived. One can find many descriptions of Marching Squares by searching the World Wide <ref type="bibr">IEEE Visualization 2003</ref><ref type="bibr">, October 19-24, 2003</ref>, Seattle, Washington, USA 0-7803-8120-3/03/$17.00 ©2003 IEEE The colors correspond to sign of f (v i ) − c at each vertex such as black for negative and white for positive. Upper left: 2-simplex replaced by line segment. Upper right: 3-simplex replaced by triangle. Lower left: 2-cube replaced by line segment. Lower right: 3-cube replaced by triangle. they were admitting a smaller symmetry group.</p><p>Variation of the number of colors. The works described above all share the goal of producing a level set of a scalar-valued function. But in 1997 Nielson and Sung showed that this strategy of counting cases and using pre-computed geometry can be used for other purposes. In their "Interval Volumes" <ref type="bibr" target="#b21">[Nielson and Sung 1997]</ref>, they generated subvolumes of a domain corresponding to the locus of points x satisfying x : a &lt; f (x) &lt; b. In the arena of computational geometry, this subvolume is represented by the Boolean intersection L a ∩ L b , where L a and L b are the subvolumes in which a &lt; f (x) and f (x) &lt; b, respectively. Previously this constructive solid geometry (CSG) problem had been approached in a totally different way by Thibault and Naylor in 1987 using a binary space partitioning (BSP) tree <ref type="bibr" target="#b30">[Thibault and Naylor 1987]</ref>. Nielson and Sung's novel insight was that three discrete situations or "colors" can prevail at a vertex (i.e., f &lt; a; a &lt; f &lt; b; b &lt; f ), leading to fifteen cases of vertex colorings of a tetrahedron. <ref type="figure">Figure 2</ref> (top row) shows an example of the geometric substitution in Interval Volumes for a 2-simplex and a 3-simplex. They could have further reduced the cases, as Lorensen and Cline did, by treating as equivalent any two figures whose coloring schemes are reversed, i.e., changing the symmetry of the colors. Hege and colleagues also considered using multiple colors, which they describe in two technical reports <ref type="bibr" target="#b13">[Hege et al. December 1997]</ref>  <ref type="bibr" target="#b28">[Stalling et al. December 1998</ref>]; their implementation is the basis of the "amira" visualization tool's GMC module <ref type="bibr">[AMI n. d.]</ref>, which has been used to simulate rat dissection in a virtual environment <ref type="bibr" target="#b19">[Montgomery et al. 2001]</ref>.</p><p>Weigle and Banks also considered the effect of changing the number of colors. They discussed, but did not enumerate, the cases where the function is exactly zero at a vertex of a simplex, representing a third "color." In Marching Squares, this third color leads to thirteen cases. These are illustrated at the top of this paper (bottom row of figure). Until now there has been no published case count for MC with this third color included; we calculate the solution and report it in section 5.</p><p>Variation of the colors' symmetry. In 1997, Nielson and Franke presented a technique for generating a separating surface <ref type="bibr" target="#b20">[Nielson and Franke 1997]</ref>. A separating surface is the boundary between subvolumes, each of which has a discrete color or type. For a 3-simplex, it suffices to consider four available colors for the four vertices, Nielson and Franke treated as equivalent any two vertex colorings where the colors of one figure are a permutation of the colors of the other. For example, a tetrahedron with two vertices of color 1 and two of color 2 is equivalent to the case of two vertices of color 3 and two of color 4 . Their paper lists four of the five possible cases (the remaining case being the trivial case where all vertices <ref type="figure">Figure 2</ref>: Examples of geometric substitution rules. For Interval Volumes (upper row), Colors denote intervals such as white for (-∞, a), gray for (a, b), and black for (b, ∞). Left: 2-simplex replaced by line segment. Right: 3-simplex replaced by triangles. For Separating Surfaces (lower row), colors denote set membership such as fluid, bone, tissue, lesion. Left: three-colored 2-simplex replaced by line segments. Right: two-colored 3-simplex replaced by triangles.</p><p>have the same color). <ref type="figure">Figure 2</ref> (bottom row) shows an example of geometric substitution in Separating Surfaces for a 2-simplex and a 3-simplex. Lorensen and Cline reduced the number of cases by considering equivalences induced by the reversal of color. By comparison, Nielson and Franke considered color symmetry to include not just reversal of an ordered set of colors, but all possible permutations of colors. The important role of groups acting on shapes and colors is noted in Hege's abstract <ref type="bibr" target="#b14">[Hege May 25-29, 1998</ref>] from a seminar at Dagstuhl.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Generic Marching Cubes</head><p>The techniques surveyed in section 1.1 share a basic approach but vary in detail. The basic approach is as follows.</p><p>1. A polytope (whether a cube or a tetrahedron or a 4-cube or a 4-simplex) in some domain is inspected. 2. Each vertex v i is assigned a color f (v i ), as dictated by some user interaction such as moving a slider bar to select a different isovalue. 3. (Optional) The polytope coloring is matched to representative case via a look-up table. 4. Geometric substitution is performed, replacing the polytope with some other geometry, e.g., to represent an isosurface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Geometric Substitution. Geometric substitution was used by</head><p>Lindenmayer in 1971 <ref type="bibr" target="#b16">[Lindenmayer 1971</ref>] and by <ref type="bibr" target="#b22">Prusinkiewicz in 1990 [Prusinkiewicz and</ref><ref type="bibr" target="#b22">Lindenmayer 1990</ref>] to model natural shapes; Glassner used geometric substitution to create complex shapes <ref type="bibr" target="#b12">[Glassner 1992]</ref>. Geometric substitution was used to simplify polygonal meshes by Lounsbery, DeRose, and Warren <ref type="bibr" target="#b18">[Lounsbery et al. 1997]</ref> and by <ref type="bibr" target="#b15">Kobbelt, Campagna, and Seidel [Kobbelt et al. 1998</ref>], whose figure 1 shows the explicit use of a geometric substitution rule. So geometric substitution is by no means exclusive to MC. There is no commonly used name for polytopes that result from geometric substitution of other polytopes; we propose calling them substitopes.</p><p>Weigle and Banks demonstrated with Contour Meshing that the recursive nature of substitopes permits an MC-style technique to be applied repeatedly to a dataset: they reduced the dimension from four to three to two, generating surfaces in R 4 .</p><p>Acceleration Schemes. Some, but not all, of the variations on MC pre-compute a look-up table, which serves as an acceleration technique when the geometric substitution is applied; the geometric substitution can also be performed procedurally.</p><p>Another way to accelerate the algorithm is to skip over the trivial substitutions rather than to employ an exhaustive traversal of the domain. Traversing the domain is the most inefficient portion of these algorithms, because in practice most polytopes are replaced </p><formula xml:id="formula_0">commentĝĝ (s) g identity () (v 1 , v 2 , v 3 , v 4 ) () swap (x y) (v 1 , v 3 , v 2 , v 4 ) (2 3) flip (x -x) (v 2 , v 1 , v 4 , v 3 ) (1 2) (3 4) flip (y -y) (v 3 , v 4 , v 1 , v 2 ) (1 3) (2 4) swap flip (x -x)(x y) (v 3 , v 1 , v 4 , v 2 ) (1 2 4 3) swap flip (y -y)(x y) (v 2 , v 4 , v 1 , v 3 ) (1 3 4 2) swap flip flip (y -y)(x -x)(x y) (v 4 , v 2 , v 3 , v 1 ) (1 4) flip (y -y)(x -x) (v 4 , v 3 , v 2 , v 1 ) (1 4) (2 3)</formula><formula xml:id="formula_1">v 1 , v 2 , v 3 , v 4 )</formula><p>. Column g gives corresponding permutations of vertices. Permutations are written as cycles, acting by composition from right to left.</p><p>by the empty set. The performance of MC improves considerably when a spatial data structure is available that delivers the subdomain containing only polytopes for which the geometric substitution is non-trivial. Shen, Hansen, Livnat, and Johnson showed in 1997 how a hierarchical data structure vastly improves the speed of the algorithm by spending most of the computation on the non-trivial replacements <ref type="bibr" target="#b27">[Shen et al. 1997]</ref>. Their work built on previous work by Wilhems and Van Gelder that imposed octrees on the spatial domain <ref type="bibr" target="#b32">[Wilhelms and Gelder 1992]</ref>, and work by <ref type="bibr" target="#b10">Gallagher [Gallagher 1991]</ref> that inverted the spatial database to support queries based on the value of the scalar field, which were incorporated into Sweeping Simplices. Parameters needed for counting cases. As the variations listed in section 1.1 suggest, there are five key parameters that determine the number of cases that arise for colored polytopes. The number of cases is independent of the actual geometric substitution that is employed. The five parameters are 1. the symmetry applied to the polytope; 2. the symmetry applied to the colors; 3. the choice of polytope from the set {n-simplex, n-cube}; 4. the dimension n of the polytope; and 5. the number k of colors.</p><p>The remainder of this paper explains how to count cases by using group theory: orbits of groups acting on sets are enumerated using a computational algebra package. Section 2 describes the aspects of group theory that are required for solving the case-counting problem. Section 3 describes how a tool for computational group theory can be programmed to count cases and shows the results of the calculations organized into a table. Section 5 indicates where various Marching-Cubes-style algorithms fit into this new taxonomy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Action of a Group on a Set</head><p>For years mathematicians have studied problems similar to counting cases of polytope colorings. In order for us to apply their results we first convert the problem of counting cases in various visualization algorithms into the appropriate mathematical language. This task requires the use of group theory, described briefly below.</p><p>The theory of groups owes its name to a paper published in 1854 by Arthur Cayley <ref type="bibr" target="#b6">[Cayley 1854]</ref>, "On the theory of groups." A group is a set with a binary operation satisfying four criteria:</p><p>1. the set is closed under the operation; 2. the operation obeys the associative law; 3. the set has an identity element (denoted by the symbol 1); and 4. each element has an inverse. Often the appearance of the binary operation is suppressed, so a * b is written as ab, and a * a is written as a 2 . More details about groups can be found in textbooks on modern algebra, such as the popular one by Fraleigh <ref type="bibr" target="#b9">[Fraleigh 1998</ref>]. Familiar examples of groups include integers with the addition operation, and rational numbers (without zero) under multiplication.</p><p>In creating the table for MC, Lorensen and Cline produced a set of 256 cube colorings. Then they considered the action of a symmetry group on the 256 cube colorings. The group operation is composition: a permutation (of vertices and colors) composed with another permutation is again a permutation, satisfying requirement (1) of a group, namely, closure. One can readily determine that permutations also meet the other three criteria for being a group.</p><p>A group acts on a set X by mapping it to itself in a particular kind of way. The requirements of a group action are given below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition.</head><p>A group G is said to act on a set X if (1) the identity fixes every element of X i.e., 1x = x, and (2) the associative law holds; i.e, (g 2 g 1 )x = g 2 (g 1 x), where 1, g 1 , g 2 ∈ G, and x ∈ X. (Note: some authors apply actions from the right rather than the left, thus writing xg 1 g 2 .)</p><p>Example. The symmetric group S 2 of all permutations of coordinates x and y acts on R 2 .</p><formula xml:id="formula_2">S 2 = {(x → x, y → y), (x → y, y → x)}</formula><p>The first (identity) element leaves the x and y coordinates fixed; the second element sends x to y and y to x, producing a reflection about a diagonal line. Both actions preserve the shape of an axis-aligned square centered at the origin.</p><p>The usual convention when writing a permutation is to list the cycles it induces on elements of the set. For example, the permutation (x → y, y → x) sends x to y which goes to x; the permutation is denoted by the cycle (x y). The identity mapping is, by convention, denoted () rather than (x)(y), and trivial cycles like (x) and (y) are suppressed when the permutation is written out. Thus the symmetric group on two letters is the set with two permutations: the identity, written (), and the swap, written (x y).</p><p>The shape of the square is also preserved by the action of mirror reflections (flips) exchanging x with -x or y with -y. These flip groups contain the permutations {(), (x -x)} and {(), (y -y)}; each flip group is equivalent (isomorphic) to the group S 2 . Their direct product contains all four combinations of flip operations.</p><formula xml:id="formula_3">S 2 × S 2 = { (), (x -x), (y -y), (x -x)(y -y) }</formula><p>These four operations correspond to the identity, a flip of the x-axis, a flip of the y-axis, and flips of both axes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Group Acting on the Set of Vertices</head><p>The full set of symmetries on an n-cube is the wreath product (written ) of a flip with the permutations. We let shapeGroup represent the symmetry group acting on a polytope, so shapeGroup = S 2 S n for the cube. The wreath product is too complicated to describe here; for its definition see the algebra textbook by Cohn <ref type="bibr" target="#b7">[Cohn 1984]</ref>.</p><p>One particular geometric incarnation of a square isŝ, which has vertices labeled as v 1 = (-1, -1), v 2 = (1, -1), v 3 = (-1, 1), and v 4 = (1, 1), corresponding to the lower left, lower right, upper left, and upper right vertices of a square centered at the origin. Squares, for the purpose of counting cases, result from any action of shapeGroup on this reference squareŝ. This observation is formalized below.</p><p>Definition. A standard square is the tupleŝ=(  </p><formula xml:id="formula_4">v 1 , v 2 , v 3 , v</formula><formula xml:id="formula_5">. So (x -x)(ŝ) = (v 2 , v 1 , v 4 , v 3 ).</formula><p>Although we defined shapeGroup in terms of its actions on the plane (in particular, its actions on the positive and negative axes), we would prefer to think of it in terms of its actions on vertices. In the example above, the flip (x -x) puts vertex v 1 into the second slot and puts v 2 into the first slot, since negating the x coordinates swaps the bottom two vertices. By looking at the tuple on the right hand side, one can deduce what permutation acted onŝ: an outof-position vertex must have been permuted. So if v i is put into position j, then the permutation maps i → j.</p><p>Example. Under the action of (x -x) on the plane, vertex v 1 in the square s moves to position 2 and vertex v 2 moves to position 1. Likewise, vertices v 3 and v 4 swap positions in the tuple. The group element (x -x) can be re-labeled accordingly in terms of its effect on the vertices ofŝ, namely (1 2)(3 4).</p><p>This re-labeling is important in section 3, which describes how the computational algebra package "GAP" can create shapeGroup automatically.</p><p>All eight actions of shapeGroup are listed in figure 3. In the left-most column of the table in figure 3, elementĝ ∈ shapeGroup is written in terms of the coordinates x and y. The middle column shows its action on the squareŝ = (</p><formula xml:id="formula_6">v 1 , v 2 , v 3 , v 4 ).</formula><p>The right hand column re-names the group element as g, which acts on the vertices of the square.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Group Acting on the Set of Colors</head><p>In counting cases for MC, we see that one group acts on the vertices of a square by moving them around; another group acts on the set of colors by permuting them. We call the second group colorGroup. A vertex v i in a square can be labeled with two symbols + andor, equivalently, can be marked with two colors color 1 and color 2 to indicate the sign of f (v) − c, where c is the isovalue. The color of vertex v i is determined by a coloring function χ which maps vertices to colors. Ifσ is a permutation on the colors, then color i is mapped to the colorσ (color i ). The notation is simplified if we use the permutation σ that maps one color index to another color index. Thusσ</p><formula xml:id="formula_7">(color i ) = color σ (i)</formula><p>Example. The permutation σ = (1 2) acts as follows on the color indexes 1 and 2.</p><p>(1 2) (1) = 2 i.e., σ of 1 is 2</p><p>(1 2) (2) = 1 i.e., σ of 2 is 1</p><p>So there is one group (i.e., shapeGroup) that acts on the vertices of a square, and another (i.e., colorGroup = S 2 ) that acts on the colors. Together they act on the combinatorial set of all 2 4 = 16 colorings of the square. The next section describes this action.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Group Acting on the Set of Colorings</head><p>Having defined actions on vertices and on colors, we can now define a group action on colored vertices. It is convenient to write χ(v i ) as χ i , suppressing the v, so that a coloring of the square can be written in the compact form given below.</p><p>Definition. A coloring of the square is the 4-tuple of colors (χ 1 , χ 2 , χ 3 , χ 4 ) and its permutations by shapeGroup × colorGroup.</p><p>Examples. Suppose color 1 is purple and color 2 is orange. <ref type="figure" target="#fig_0">The  coloring (1, 1, 1, 1)</ref> has all purple vertices. The coloring (1, 1, 2, 2) has purple for the bottom two vertices and orange for the top two. <ref type="figure">Figure 5</ref>: Orbits of shapeGroup × colorGroup acting on colorings of the square. In each row, any coloring can be mapped to any other via the action of some element (g, σ ) of coloringGroup.</p><p>The coloring (1, 2, 1, 2) has purple on the left side and orange on the right.</p><p>The direct product shapeGroup × colorGroup acts on a coloring in the obvious way: an element of shapeGroup shuffles the order of the four colors, and an element of colorGroup permutes the value of the colors. We call this product coloringGroup. An element h of coloringGroup has the form (g, σ ), where g acts on vertices and σ acts on colors.</p><p>Example. The action of ((2 3),σ ) on a coloring is</p><formula xml:id="formula_8">((2 3),σ ) (χ 1 , χ 2 , χ 3 , χ 4 ) = (σ (χ 1 ),σ (χ 3 ),σ (χ 2 ),σ (χ 4 ))</formula><p>The two middle terms get switched, the result of permutation (2 3) acting on the tuple, and the colors get permuted.</p><p>Representing color i by its subscript i allows the action on the coloring (1, 1, 2, 1) to be written as follows, using σ rather thanσ .</p><formula xml:id="formula_9">((2 3), σ ) (1, 1, 2, 1) = (σ (1), σ (2), σ (1), σ (1))</formula><p>Again the middle two elements get swapped by (2 3) and σ is applied to the color indexes. We next show an example with a specific permutation from shapeGroup and a specific permutation from col-orGroup acting on a specific coloring.</p><p>Example. The group element ((2 3), (1 2)) acts on the coloring (1, 1, 2, 1) as follows.</p><p>((1 2)(1), (1 2)(2), (1 2)(1), (1 2)(1)) = (2, 1, 2, 2) So the middle elements of the tuple get swapped and all the colors get reversed.</p><p>Two colorings x 1 and x 2 are said to be equivalent if a group action maps one into the other (by permuting the vertices and colors). For example, all eight of the squares are equivalent whose vertices are three black and one white or one black and three white. Each of these squares can be mapped to any other via the action of some element of coloringGroup. Each equivalence class of colorings forms an orbit, which is defined below.</p><p>Definition. The orbit of the group G acting on the coloring x 1 is the set of colorings {x 2 : gx 1 = x 2 , for some g ∈ G}.</p><p>As <ref type="figure">figure 5</ref> shows, coloringGroup, acting on the 16 colorings of a square, has four orbits: an orbit with 2 elements (all colors the same), an orbit with 8 elements (a singleton color), an orbit with 4 elements (adjacent pairs of a color), and another orbit with 2 elements (diagonal pairs of a color). <ref type="figure">Figure 6</ref> shows these same four orbits, written in the notation of a four-tuple of vertex colors as in <ref type="figure" target="#fig_2">figure 4</ref>; the goal of section 3 is to produce this numerical depiction of the orbits as tuples. <ref type="figure" target="#fig_0">(1, 1, 1, 1) (2, 2, 2, 2)</ref> (1, 1, 1, 2) (1, 1, 2, 1) (2, 1, 1, 1) (1, 2, 1, 1) (2, 2, 2, 1) (2, 2, 1, 2) (1, 2, 2, 2) (2, 1, 2, 2) (1, 1, 2, 2) (2, 2, 1, 1) (1, 2, 1, 2) (2, 1, 2, 1) (1, 2, 2, 1) (2, 1, 1, 2) <ref type="figure">Figure 6</ref>: Orbits of shapeGroup × colorGroup acting on colorings of the square. These encodings of colorings correspond to the images in figure 5, where white=1 and black=2.</p><p>For two-dimensional Marching Squares, counting orbits of products of groups acting on colorings of vertices is no improvement over drawing a mere sixteen figures by hand and inspecting them for equivalence. However, by casting the problem in terms of combinatorial algebra we can exploit powerful computational tools to count the orbits for us in situations where the large dimension or large combination of colorings makes hand-enumeration overwhelming.</p><p>In this section we used the square as an example of the process of counting orbits of group actions on colorings, but our goal is to consider other shapes as well (such as triangles and tetrahedra), other sets of colors, and other kinds of groups acting on each of them. Before generalizing the algebraic details, we first describe a computational algebra package and demonstrate its ability to enumerate the number of cases for a square.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Computational Group Theory</head><p>Many practical questions in group theory can be answered by sheer calculation. Computational group theory is concerned with the numerical solution of problems in group theory, a notable example being the solutions to Rubik's cube. An article by Seress gives an overview of computational group theory <ref type="bibr" target="#b25">[Seress 1854]</ref>.</p><p>Two numerical packages for computational group theory are widely used: GAP (Groups, Algorithms, and Programming), which is free software, and Magma, costing about $US 1000 for a single license at the time of this writing. For more details about these packages, see "GAP -Groups, Algorithms and Programming" <ref type="bibr" target="#b24">[Schönert 1994]</ref> and "An Introduction to MAGMA" <ref type="bibr" target="#b5">[Cannon and Playoust 1993]</ref>.</p><p>Practitioners of visualization, and other casual users of computational group theory, are likely to choose GAP because it is free software. So we describe how to use GAP to solve the particular problem of counting cases for a two-colored square. (Users should be aware that GAP uses the convention of applying group actions from the right, as noted in the definition of action in section 2.)</p><p>Below is a transcript of an interactive session using GAP, slightly edited for formatting purposes. The user input is shown in sansserif font, and GAP's reply is shown in the fixed-width typewriter font. We begin by creating shapeGroup, colorGroup, and coloringGroup for dimension n with k colors (note: the double semicolons suppress feedback from GAP). Next we construct projection operators to extract the two groups This demonstration shows how GAP can enumerate the orbits of a group action in Marching Squares, and thus to determine the number of cases for polytope colorings that arise in the two-dimensional version of Marching Cubes. The variable names suggest how to extend this example to handle other cases; for example, one can simply change the value of n from 2 to 3 to enumerate the orbits and count them for MC. One can also change the definition of shape-Group or colorGroup at the beginning of the code to generate the orbits for still other colorings. The next section describes how this approach can be extended to handle additional geometries and symmetries, constructing a complete taxonomy of case-counts for substitopes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Taxonomy of Substitopes</head><p>In order to extend the case-counting capabilities of our demonstration GAP program, we must express the shape groups and color groups for various substitopes. The colorings of interest to us are the ones that arise in algorithms like MC. The shape groups involve simplexes and cubes, with orientation-preserving (direct) symmetry and with full symmetry acting on them. The color groups include reversal and full permutation.</p><p>Shape groups. A polytope in n-dimensional space is acted on by symmetries of that space. The orthogonal group O(n), consisting of n × n orthogonal matrices, forms a continuous group under matrix multiplication. This group contains finite subgroups that produce the symmetries of the n-simplex and of the n-cube. The symmetries of the simplex form a subgroup of O(n) isomorphic to S n+1 , the symmetric group permuting the n + 1 vertices of the n-simplex. The symmetries of the cube form a subgroup of O(n) isomorphic to S 2 S n , also known as the hyperoctahedral group. These two groups are the full symmetry groups of the simplex and the cube.</p><p>The set of orientation-preserving symmetries of R n forms the special orthogonal group SO(n), a subgroup of O(n). Its intersection with a full symmetry group, called a direct symmetry, yields the orientation-preserving symmetries on the simplex or the cube. The direct symmetry group for the n-simplex is the alternating group A n . The direct symmetry group for the n-cube is the direct-cube group.</p><p>Color groups In the examples cited in Section 1.1 above, variations on Marching Cubes have employed three different groups to permute color indexes. These are listed below.</p><p>(1) The simplest color group is the identity group, which leaves each index fixed. Nielson and Sung considered the ordering of the colors to be significant, meaning the identity group Id k acted on k colors.</p><p>(2) The reversal group Rev k on the numbers {1..k} swaps the first with the last element, the second with the next-to-last element, and so forth. Lorensen and Cline used the reversal group to reorder two colors. The group Rev k contains only two permutations: the identity permutation () and the permutation ρ defined below.</p><formula xml:id="formula_10">ρ = (1 k)(2 k-1)..( k 2 k+2 2 ) if k is even (1 k)(2 k-1)..( k-1 2<label>k+3</label></formula><p>2 ) if k is odd</p><p>(3) Nielson and Franke considered two color orderings to be equivalent no matter how they were permuted, thereby allowing the symmetric group S k to act on the k colors.</p><p>So we see in the literature variations on MC in which shape-Group is one of the two types of symmetry {direct, full} acting on a polytope p ∈ {simplex, cube}, and colorGroup is one of the three groups {Id k , Rev k , S k }. We programmed GAP to fill in a table (table 1) of combinations of these parameters, with both the dimension n and the number k of colors in the range <ref type="bibr">[1..4]</ref>. Each entry in the table gives the number of cases (orbits) for the corresponding colored polytopes. A table entry noted in boldface indicates a combination of parameters that was at work in any of six algorithms surveyed in section 1.1. The GAP source code orbitTable.gap that generated the table is freely available for download at the GAP Web site.</p><p>The table is easily computed on a desktop machine for n and k in the range <ref type="bibr">[1..3]</ref>. For this range, we measured the table generation time at about ten seconds on a desktop machine with 1 GB memory and a 1.7 GHz Intel Xeon processor. But the memory demands increase significantly for the 4-cube with more than two colors; calculating the orbits exceeded the capacity of our desktop machine. In order to enumerate the six coloring groups acting on the 4-cube with 3 colors, we used the parallel GAP package ParGAP by Gene Cooperman <ref type="bibr" target="#b8">[Cooperman 1999]</ref> and ran it on a Beowulf cluster <ref type="bibr" target="#b29">[Sterling et al. 1995]</ref> composed of 85 nodes, each node having dual 2.4GHz processors, connected by 100 Mb/s Ethernet. Using two processes per node (with 0.5 GB of workspace per process) on twelve nodes, calculating each of the six table entries for the 4-cube with three colors took about 300-500 seconds of wall-clock time, and about 1000-3000 seconds of CPU time. In other words, calculating the six cases n = 4, k = 3 for the cube took more than a thousand times longer than calculating the 54 cases where n ≤ 4 and k ≤ 3.</p><p>Calculating the case-counts for four colors (k = 4) exceeded even the memory capacity of our parallel version, although it appears that the ParGAP version of our code could be further modified to exploit 1996 1 6 21 56 1 402 132102 &gt;11000000 1 2 4 6 (full, Rev k ) 1 2 4 6 1 2 6 10 1 4 7 13 31 1 4 3 7 9 19 1 1 14 7 147 7 1036 1 5 3 5,7 12 28 1 2 222 7 66524 &gt;5600000 1 2 2 2 (full, S k ) 1 2 2 2 1 2 3 3 1 4 6 7 7 1 3 4 6 5 1 14 58 7 124 1 3 5 6 1 222 22490 &gt;460000 finer-grain parallelism and thus satisfy the memory constraint. We therefore merely estimate a lower bound for each of these entries, based on the fact that no orbit can be bigger than the order of the group.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Summary</head><p>Marching Cubes (MC), and algorithms like it, share the essential feature of applying geometric substitution to polytope colorings to produce substitopes. These algorithms vary in the choice of groups acting on vertices and on colors, in the choice of polytope, and in the choice of dimension n and number of colors k. We presented a technique for enumerating the cases that arise in counting the cases of polytope colorings, and showed how this technique can be applied using software for computational group theory software (called GAP). One benefit of a tool for computational algebra is that it independently confirms the results announced by <ref type="bibr" target="#b3">Bhaniramka, Wenger, and Crawfis [Bhaniramka et al. 2000]</ref> and by <ref type="bibr" target="#b23">Roberts and Hill [Roberts and Hill 1999]</ref> for counting the cases in four-dimensional MC, results that cannot reasonably be checked by hand. Moreover it permits us to predict the size of tables for MC variants that have yet to be implemented. The following examples illustrate the predictive utility of the table.</p><p>Example. What happens when the algorithm for Separating Surfaces is extended to 3-cubes with four colors? Consulting the table (full, S k , n-cube, 3, 4) we see that 124 cases arise. For the square (n = 2) with four colors, only seven cases arise; they are illustrated in the diagram at the top of the paper (top row), with a possible interpretation of colors that might be derived from medical data.</p><p>Example. What happens when MC is extended to handle the degenerate situation where f (v i ) − c = 0 at vertices v i ? This case would almost never happen (that is, would occur on a set with measure zero) if the scalar function were truly real-valued. But in practice one routinely encounters integer-valued isosurfaces of integervalued datasets, so a level set may, with non-zero probability, pass through many grid points. When the set of corresponding colors is augmented to include the degenerate case (full, Rev k , n-cube, 3, 3) we see that 147 cases arise. For the square (n = 2) with three colors, only 13 cases arise; they are illustrated in the lower part of the diagram at the top of this paper (bottom row).</p><p>What happens when Marching Hypercubes is extended to handle the degenerate situation where f (v i )−c = 0? The table predicts that for (full, Rev k , n-cube, 4, {2,3}) the number of cases explodes from 222 to 66,524.</p><p>Example. Weigle and Banks briefly discussed the degenerate situation where f (v i )−c = 0 for n-simplexes in Contour Meshing, but did not enumerate all the cases. How many cases would they have found for the 4-simplex? The table predicts that for (full, Rev k , n-simplex, 4, 3) there are 12 cases.</p><p>Example. What happens when Interval Volumes is applied to cubes instead of tetrahedra? The table predicts that for (full, Rev k , n-cube, 3, 3) there are 147 cases.</p><p>What happens when an interval is added, creating the four "colors" (−∞, a), (a, b), (b, c), and (c, ∞)? Letting k = 4, we find the table predicts that for (full, Rev k , {n-simplex, n-cube}, 3, 4) there are 19 cases for the tetrahedron and 1036 cases for the cube.</p><p>These examples illustrate how table 1 can be used to determine the number of cases required to implement a variation on existing MC-style algorithms. The table also imposes a clear taxonomy on this collection of algorithms where no such organization has heretofore been suggested. This indicates that a very deep, very generic underlying algorithm for visualization exists, which can be incarnated in many different ways. The table also shows the intimate connection between group theory, geometry, and visualization. The availability of GAP, a free software package for computational group theory, should encourage the research community to explore group actions for generating substitopes in novel ways; not only can GAP count the number of cases (orbits) automatically, but it can also enumerate the members of each orbit. This capability eliminates a very difficult part of any substitope algorithm. We look forward to the novel applications that this general framework invites.</p><p>We are actively working on ways to expand the table to larger values of n and k, and to determine the asymptotic case-counts of certain coloring groups as functions of n and k. We are also actively exploring ways in which colored polytopes might arise in other types of data and in other visualization techniques.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Examples of geometric substitution rules in Marching Cubes, generalized to n-simplexes and n-cubes, for n ∈ [2..3].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Permutations acting on axes and vertices. Columnĝ gives permutations of x and y axes. Columnĝ(s) shows the effect of a permutation on vertices of the square s=(</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Permutations from figure 3 acting on the x and y axes and on the squareŝ. Top row: first four permutations applied toŝ. Bottom row: next four permutations applied toŝ. Note that half of the permutations preserve orientation, one on the top row and three on the bottom.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc><ref type="bibr" target="#b2">4</ref> ) and its image under any action of shapeGroup. That is, s is a standard square if and only if s = gŝ for some g ∈ shapeGroup.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Example.</head><label></label><figDesc>The element (x -x) of shapeGroup acts on the square, flipping it in the x direction</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>shapeGroup := WreathProductProductAction (SymmetricGroup(2), SymmetricGroup(n));; colorGroup := Group (PermList (Reversed ([1..k])));; coloringGroup := DirectProduct (shapeGroup, colorGroup);;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Table ofcase counts for substitopes. Each of the twelve sub-tables contains the case-counts for the tuple(shapeGroup, col- orGroup, polytope, n, k), with n and k in the range [1..4]. Each row of sub-tables shares (shapeGroup, colorGroup), as indicated in the middle. The left column contains sub-tables for simplexes; the right column for cubes. Case-counts specifically mentioned in this paper are highlighted in boldface. 1 Marching Cubes. 2 Marching Hypercubes.3  Interval Volume.<ref type="bibr" target="#b2">4</ref> Sweeping Simplices. 5 Contour Meshing. 6 Separating Surfaces. 7 Counting Cases (this paper).</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We gratefully acknowledge support by NSF grants CISE-#0083898 and FRG-#0101429, and by the Scottish Higher Education Funding Council (SHEFC) and the Particle Physics and Astronomy Research Council (PPARC) for use of the Beowulf cluster to run Par-GAP on the larger problem sizes. We thank Eric Klassen for fruitful discussions about group actions and orbits, and the reviewers for their careful reading and helpful comments.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>back from their direct product.</p><p>shapeProjection := Projection (coloringGroup, 1);; colorProjection := Projection (coloringGroup, 2);;</p><p>Next we generate the list of colors and colorings, allowing GAP to answer back with its results.</p><p>numVerts := 2ˆn;; coloredVerts := ListWithIdenticalEntries (numVerts, [1.</p><p>Then we define a function to produce the action of a group element on a coloring. The projections of element (g, σ ) of coloringGroup yield the components g and σ that shuffle the order of the tuple and permute the colors. We now let GAP produce the orbits and count how many there are. Notice that these orbits agree exactly with the tuples we computed in figure 6. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>:= Orbitsdomain</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>coloringGroup, colorings, action</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Length (orbits</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m">References TEMPLATE GRAPHICS SOFTWARE. Module: GMC. (User manual entry for amira visualization software)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Isosurfacing in higher dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhaniramka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wenger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="267" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Polygonization of implicit surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="341" to="355" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cannon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Playoust</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">An Introduction to MAGMA. School of Mathematics and Statistics</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
		<respStmt>
			<orgName>Sydney University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">On the theory of groups, as depending on the symbolic equation θ n = 1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cayley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Philosophical Magazine</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="40" to="47" />
			<date type="published" when="1854" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Cohn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algebra</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1984" />
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Parallel GAP/MPI (ParGAP/MPI), Version 1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cooperman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
		<respStmt>
			<orgName>College of Computer Science, Northeastern University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">A First Course in Abstract Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">G</forename><surname>Fraleigh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Addison-Wesley Publishing</publisher>
		</imprint>
	</monogr>
	<note>6th edition</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Span filter: An optimization scheme for volume visualization of large finite element models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Gallagher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="68" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Group</surname></persName>
		</author>
		<ptr target="http://www.gap-system.org" />
		<title level="m">GAP -Groups, Algorithms, and Programming</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>Version 4.3.</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A tutorial on geometric replacements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Glassner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Application</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="22" to="36" />
			<date type="published" when="1992-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">A Generalized Marching Cubes Algorithm Based on Non-Binary Classifications. Konrad-Zuse-Zentrum für Informationstechnik Berlin</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seebass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zöckler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>December</surname></persName>
		</author>
		<idno>SC 97-05</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Enumeration of symmetry classes in mesh generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hierarchical Methods in Computer Graphics</title>
		<editor>M. Gross, H. Müller, P. Schröder, and H.-P. Seidel</editor>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">9821</biblScope>
			<biblScope unit="page" from="9" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A general framework for mesh decimation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Campagna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Interface</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="43" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Developmental systems without cellular interaction, their languages and grammars</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lindenmayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Theoretical Biology</title>
		<imprint>
			<biblScope unit="page" from="455" to="484" />
			<date type="published" when="1971" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 1987</title>
		<meeting>SIGGRAPH 1987</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Multiresolution analysis for surfaces of arbitrary topological type</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lounsbery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="34" to="73" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A virtual environment for simulated rat dissection: a case study of visualization for astronaut training</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Montgomery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bruyns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wildermuth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="509" to="512" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Computing the separating surface for segmented data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Franke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="229" to="233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Interval volume tetrahedrization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="221" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">The algorithmic beauty of plants</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Prusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lindenmayer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Piecewise linear hypersurfaces using the marching cubes algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visual Data Exploration and Analysis VI, Proceedings of SPIE, IS&amp;T and SPIE</title>
		<editor>R. Erbacher and A. Pang</editor>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="170" to="181" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">GAP -Groups</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schönert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms and Programming. Lehrstuhl D für Mathematik</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An introduction to computational group theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Á</forename><surname>Seress</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Notices of the AMS</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="671" to="679" />
			<date type="published" when="1854-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Sweeping simplices: A fast iso-surface extraction algorithm for unstructured grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="143" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Isosurfacing in span space with utmost efficiency (issue)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="287" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zöckler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Sander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>December</surname></persName>
		</author>
		<idno>SC 98-39</idno>
		<title level="m">Weighted Labels for 3D Image Segmentation. Konrad-Zuse-Zentrum für Informationstechnik Berlin</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">BEOWULF: A parallel workstation for scientific computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sterling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Savarese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Dorband</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">A</forename><surname>Ranawake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Packer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th International Conference on Parallel Processing</title>
		<meeting>the 24th International Conference on Parallel Processing</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="11" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Set operations on polyhedra using binary space partitioning trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Thibault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">F</forename><surname>Naylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIG-GRAPH 1987</title>
		<meeting>ACM SIG-GRAPH 1987</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="153" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Complex-valued contour meshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weigle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="173" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Octrees for faster isosurface generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
