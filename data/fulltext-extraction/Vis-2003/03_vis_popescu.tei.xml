<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Producing High-Quality Visualizations of Large-Scale Simulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Voicu</forename><surname>Popescu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>CS</roleName><forename type="first">Chris</forename><surname>Hoffmann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sami</forename><surname>Kilic</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mete</forename><surname>Cri</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sozen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Ce</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Meador</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">ITaP Purdue University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<postCode>2003</postCode>
									<settlement>Seattle</settlement>
									<region>Washington</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Producing High-Quality Visualizations of Large-Scale Simulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Applications</term>
					<term>Three-dimensional Graphics and Realism</term>
					<term>Graphics Utilities. I.6. [Simulation and Modeling]: Applications</term>
					<term>Model Validation and Analysis</term>
					<term>Output Analysis</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper describes the work of a team of researchers in computer graphics, geometric computing, and civil engineering to produce a visualization of the September 2001 attack on the Pentagon. The immediate motivation for the project was to understand the behavior of the building under the impact. The longer term motivation was to establish a path for producing highquality visualizations of large scale simulations. The first challenge was managing the enormous complexity of the scene to fit within the limits of state-of-the art simulation software systems and supercomputing resources. The second challenge was to integrate the simulation results into a highquality visualization. To meet this challenge, we implemented a custom importer that simplifies and loads the massive simulation data in a commercial animation system. The surrounding scene is modeled using image-based techniques and is also imported in the animation system where the visualization is produced. A specific issue for us was to federate the simulation and the animation systems, both commercial systems not under our control and following internally different conceptualizations of geometry and animation. This had to be done such that scalability was achieved. The reusable link created between the two systems allows communicating the results to non-specialists and the public at large, as well as facilitating communication in teams with members having diverse technical backgrounds.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Problem description</head><p>Since Ken Wilson's articulation of simulation as third paradigm of science in the late 1980s <ref type="bibr" target="#b2">[Bell 1989</ref>], co-equal with experimental and theoretical science, simulations have become essential tools in many fields of science and engineering. Scientific simulations are used to crash-test an automobile before it is built, to study the interaction between a hip implant and the femur, to evaluate and renovate medieval bridges, to assess the effectiveness of electronic circuit packaging by running circuitboard drop tests, or to build virtual wind tunnels. In particular, finite-element analysis (FEA) plays a fundamental role in engineering because of its ability to integrate multiple physical phenomena, such as fluid flow, fluid/solid interaction, and material behavior. FEA systems compute a variety of physical parameters over the time span of the simulation, such as position, velocity, acceleration, stress, and pressure. The visual presentation of the results is either handed off to generic post-processors or studied in specific contexts in the field of scientific visualization.</p><p>Three dimensional computer graphics has advanced tremendously, driven mostly by the popularity of its applications in entertainment. Consumer-level priced personal computers with add-in graphics cards can produce high-quality images of complex 3D scenes at interactive rates or can run sophisticated animation software systems to produce, off-line, video sequences that very closely approach photorealism. Because of the specifics of the applications that commissioned their development, animation systems are mainly concerned with minimizing the production effort and maximizing the entertainment value of animations. They focus on the rendering quality, on the expressivity of the animated characters and are less concerned with closely following the laws of physics.</p><p>Our team had the goal of producing a visualization of the September 2001 attack on the Pentagon that is both physically and visually accurate <ref type="figure" target="#fig_0">(Figure 1</ref>, <ref type="figure" target="#fig_2">Figure 3</ref> and video available at <ref type="bibr">[Popescu et al. 2003]</ref>). The obvious solution is to take advantage of the strengths of both simulation and animation systems. The project had two distinct parts. During the first part we designed, tested and then ran at full scale the FEA simulation of the aircraft impacting the building structure. For this part we used <ref type="bibr" target="#b7">[Hallquist 1998</ref>], a commercial FEA system often used for crashworthiness simulations. In the second phase the efforts were focused on producing a high-quality visualization of the massive data resulting from the simulation. In order to do so we created a scalable link between the FEA system and a commercial animation system (3ds max <ref type="bibr">[Discreet]</ref>). The link can be directly reused to create animations with physical fidelity regardless of the scientific or engineering domain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Motivation</head><p>A high-quality visualization of the results of a simulation first requires that the objects whose interaction is simulated be rendered using state-of-the-art rendering techniques. The second requirement is that the simulation be placed in the context of the e-mail, in order: {popescu | cmh}@cs.purdue.edu, {skilic | sozen}@purdue.edu, wsmeador@tech.purdue.edu immediate surrounding scene. For this the scene has to be modeled and rendered along with the simulation results. Such a visualization makes the results and conclusions of the simulation directly accessible to others than the specialists that designed the simulation, without sacrificing scientific accuracy. This will make scientific simulations powerful tools that will routinely be used in a variety of fields including national security, emergency management, forensic science, and media.</p><p>A good visualization ultimately leads to improvements of the simulation itself. High-quality images quickly reveal discrepancies with experimental data observed over the years or recorded specifically for fine tuning the current simulation. <ref type="figure" target="#fig_1">Figure 2</ref> gives an overview of the process that converted the heterogeneous data documenting the event into the desired visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Process overview</head><p>The first step in creating the simulation was to generate the element meshes suitable for FEA. To keep the scene complexity within manageable limits, only the most relevant components of the aircraft and of the building were meshed. Then, the material model parameters were tuned during test simulations to achieve correct load deflection behavior. The FEA code was run on the full resolution meshes to simulate the first 250 milliseconds of the impact over 50 states.</p><p>The visualization part of the project began with modeling the Pentagon building from architectural blueprints using a CAD tool. The geometric model of the building and the surroundings were enhanced with textures projected from high-resolution satellite and aerial imagery using a custom tool. The 3ds max aircraft model used for visualizing the approach was readily available. The 3.5 GB of state data describing the mesh deformations was simplified, converted and imported into the animation system through a custom plugin. The imported meshes were aligned with the surrounding scene and enhanced with rendering material properties. Finally the integrated scene was rendered from the desired camera paths.</p><p>Prior work is discussed next. The remainder of the paper is organized as follows. Section 3 describes the simulation; section 4 describes modeling the part of the scene not involved in the simulation; section 5 covers importing the simulation data into the animation system. Results are presented for each section separately. All the timing data was obtained on Pentium 4 Xeon, 2 GHz, 2 GB workstations. Discussion and directions for future work conclude the paper. <ref type="bibr" target="#b1">Baker et al. [1998]</ref> describe the simulation of a bomb blast and its impact on a neighboring building. The scenario investigated matches the 1996 attack on the Khobar towers. Two computational codes were used. The blast propagation was computed using CTH <ref type="bibr" target="#b9">[McGlaun et al., 1990]</ref> at the Army's research lab in <ref type="bibr">Vicksburg [Namburu et al. 1998</ref>]. Results of the CTH calculation are used as initial pressure loadings on the buildings and Dyna3D <ref type="bibr" target="#b6">[Hallquist and Benson, 1987]</ref> is then used to model the structural response of the building to the blast. The results were visualized in the Dyna3D postprocessor and [VTK] (visualization toolkit) using standard visualization techniques such as slicing and isosurfacing. The researchers report the difficulty of visualizing the large data sets; the solutions employed are reducing resolution, decimation and extraction of regions of interest. Enhancing the quality of the visualization using photographs is mentioned as future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Prior work</head><p>A considerable body of literature in nuclear engineering is dedicated to simulating the crash of an aircraft into a concrete structure. Provisions for aircraft impact on reinforced concrete structures are incorporated into the Civil Engineering codes used for the design of nuclear containment structures. A full-scale test was conducted by Sugano et al. <ref type="bibr">[1993]</ref> to measure the impact force exerted by fighter aircraft (F-4D) on a reinforced concrete target slab. The study provided important information on the deformation and disintegration of the aircraft. A simplified computational model was also developed in order to capture the global response of the impact. This study provided us the experimental evidence that the airframe and the skin of the aircraft alone are not likely to cause the major damage on reinforced concrete targets.</p><p>To place the simulation in context we had to model and render the surroundings of the Pentagon. Research in image-based rendering (IBR) has produced several successful approaches for rendering complex large-scale natural scenes. The QuicktimeVR system <ref type="bibr" target="#b4">[Chen 1995</ref>] models the scene by acquiring a set of overlapping same-center-of-projection photographs that are stitched together to form panoramas. During rendering the desired view is confined to the centers of the panoramas. In our case it was important to allow for unrestrained camera motion so we dismissed the approach.</p><p>Image-based rendering by warping (IBRW) <ref type="bibr" target="#b10">[McMillan and Bishop, 1995]</ref> relies on images enhanced with per-pixel depth. The depth and color samples are 3D warped (reprojected) to create novel views. Airborne LIDAR sensors can provide the depth data at appropriate resolution and precision. In the case of our project no depth maps of the Pentagon scene were available and we could not use IBRW. In light field rendering the scene is modeled with a database containing all rays potentially needed during rendering. The method does not scale well: the number of images that need to be acquired and the ray database grow to impractical sizes for large-scale scenes.  An approach frequently used for modeling large urban scenes combines images with coarse geometry into a hybrid representation. A representative example is the Façade system <ref type="bibr" target="#b5">[Debevec et al., 1996]</ref> which maps photographs onto buildings modeled with simple primitive shapes. The system was used to model and realistically render a university campus environment. The relatively simple geometry of the Pentagon building and the availability of photographs of the area motivated us to choose a hybrid geometry / images approach as described in section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Large scale simulation</head><p>FEA codes are among the most flexible and competent tools for simulating physical phenomena. A simulation is described by providing a geometric description, a set of constitutive models that capture non-linear material behavior, initial conditions, and the interaction of various components of the model through contact algorithms. The geometric description is in terms of nodes (points in 3-space) and elements (beam, shell and volume) partitioning the geometric objects. The elements have associated material properties that describe their behavior under strain. The simulation code integrates differential equations that express the material characteristics and the interaction and energy exchange between materials in contact (or in a field). Failure of elements in the simulation is achieved by imposing a maximum strain limit in the material model, and eroding elements that reach the limit. These elements are not considered in the dynamic equilibrium of the model in the following time steps. Physically this means that the material tears or breaks at that locale. This approach enables the wings to cut through the reinforced concrete columns. Erosion of elements is a technique that is essential for simulating penetration problems.</p><p>Based on careful consideration, our simulation hypothesis is that the most massive structure, causing the bulk of the damage through its kinetic energy, has been the liquid fuel (kerosene) in the tanks of the aircraft. At impact, the plane was carrying an estimated 5,200 gallons of fuel and had a speed estimated at 480 mph. Damage inspection revealed that the performance of the building depended crucially on the spirally reinforced concrete columns of the building. Accordingly we concentrated on modeling the columns and the fuel. This focus may come as a surprise. However, experimental research has given evidence that the airframe is not very strong in a head-on crash <ref type="bibr">[Sugano 1993]</ref>. <ref type="figure">Figure 4</ref> shows the finite element mesh (FEM) for the spirally reinforced concrete columns. We modeled the confined concrete core, the steel rebars, and the unconfined concrete cover (fluff). The column hexahedral elements are 7.5 x 7.5 x 15 cm in size.</p><p>The column is anchored by the floor and ceiling supports (red in the figure). The fuel was modeled using an Arbitrary Lagrangian-Eulerian (ALE) formulation that integrates the Navier-Stokes equations of fluid dynamics for the motion of the liquid fuel. The Eulerian mesh is able to expand in order to enclose the splashing liquid fuel. Automatic mesh motion is achieved by following the mass-weighted average velocity of the ALE mesh. The fuel is specified in the Eulerian mesh in terms of per-cell fractional occupancy values. <ref type="figure" target="#fig_4">Figure  5</ref> shows the liquid in the initial configuration. The mesh elements are 15 x 15 x 15 cm in size. A 3ds max model of the Boeing 757 was obtained from a game company <ref type="bibr" target="#b3">[Casper 2002</ref>] and formed the basis for creating the FEM of the plane. The meshed model includes fuselage stringers reinforcing the body of the plane and ribs in the wing structure, as well as the fuselage floor. Those are the structural elements of the plane deemed to be most significant. Our custom mesh generation tool uses a set of hard points in the wings and the body. The mesh generation is parametric, which allows for conveniently generating meshes at various resolutions. We tried unsuccessfully to get a fully meshed model from Boeing. However, Boeing did share general structural characteristics of its aircraft with us which, in combination with literature on aircraft design, confirmed that the elements we had selected were the significant structural element relevant to the problem.</p><p>In order to calibrate the columns used in the simulation, a reinforced concrete column was analyzed under impact loading.   software and hardware limitations. At 954 K nodes, the simulation took approximately 6 hours per recorded state on an IBM Power-4 platform with 8 processors and 64 GB of memory. The integration step size was 0.1 milliseconds, and we recorded 50 states, 5 milliseconds apart. The disk size of each state is 70 MB, for a total of 3.5 GB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Surrounding scene</head><p>We decided to model the surrounding scene for two reasons. First we wanted to visualize the trajectory of the plane immediately before the collision. Second, we wanted to place the simulation results in context to make it easily understood by someone who was not closely involved with the investigation. As described earlier, our approach was dictated by the available data documenting the scene. From the architectural blueprints we produced a CAD model of the building. The damage in the collapsed area was modeled by hand to match available photographs. The region surrounding the Pentagon was simply modeled with a large plane. The geometric models were enhanced with color using high-resolution satellite [SpaceImaging] and aerial imagery <ref type="bibr">[ASCE 2003</ref>].</p><p>In order to apply a photograph to a geometric model two problems need to be solved. First one has to find the pose of the camera in a model-defined coordinate system (camera matching). Second the photograph pixels need to be mapped to the model triangles that are visible to the camera (projective texture mapping <ref type="bibr" target="#b10">[Segal et al., 1992]</ref>). The basic functionality is available in animation systems such as 3ds max and Maya. We decided to implement our own camera matching / projective texture mapping tool to have more control over the camera matching and to create a conventionally texture mapped model. Such a model with individually texture mapped triangles can then be easily combined with other models (namely the approaching aircraft and the results of the simulation) and allows using multiple reference photographs with good control over the triangle to photograph assignment.</p><p>We find the camera pose using correspondences between the photograph and the geometric model. Since the camera used to take the photographs is not available we also calibrate for the focal length. The focal length is the only intrinsic parameter of the camera model used: the center of projection is assumed to project in the center of the pixel grid, the pixels are assumed to be square and the lens distortion is ignored.</p><p>We use this idealized model since the scene is flat (the height of the Pentagon building is small compared to its horizontal dimensions) and nearly coplanar points make the calibration for complex camera models numerically unstable. We search for the seven unknowns using the downhill simplex method. The starting position is obtained by rendering the model and manually adjusting the view such that the rendered image roughly matches the photograph. Convergence is achieved in negligible time. For a 3000 x 2000 pixels image the camera matching error is on average 3.5 pixels for 10 correspondences.</p><p>Once the view is known, the camera is transformed in a projector and the photograph pixels are deposited on the surface of the triangles to create individual texture maps. The algorithm proceeds as follows (Pseudocode 1). IB stores the IDs of the triangles that are seen by the photograph. A texture map is generated for each visible triangle. The texture is aligned with the longest edge of the projected triangle and with its corresponding height. The lengths of the two segments in pixels give the texture resolution. By choosing the resolution this way, the texture subsamples the photograph in the part of the triangle near the camera and supersamples it at the far end. Subsampling implies losing some of the color information of the photograph. We have experimented with setting the texture resolution to the maximum sampling rate encountered at the near end of the triangle. The Pentagon building model contains long triangles and the conservative resolution produced excessively large textures. Using the z buffer the texture is set only for the part of the triangle actually seen in the photograph. This is important when other images are used to complete the texture of the triangle. To correctly handle triangles that have a thin projection, the texels traversed by the edges are set the same way (without the triangle membership test).</p><p>The building and ground plane model consisting of 25 K triangles was sprayed with a 3000 x 2000 pixels photograph. The resulting texture mapped model produced realistic visualizations of the Pentagon scene. <ref type="figure">Figure 8</ref> shows an image rendered from a considerably different view than the view of the reference photograph, which is shown in <ref type="figure" target="#fig_6">Figure 7</ref>. The total disk size of the texture files is 160 MB. The difference when comparing to the 24 MB of the reference photograph is due to the texels outside of the triangle, to the texels corresponding to the hidden part of the triangle, to the thin triangles that have a texture larger than their area and to our simple merging of individual texture images that vertically collates 10 images to reduce the number of files. For now we rendered the scene offline so the large total texture size was not a concern. For real time rendering, the texture size has to be reduced. A simple greedy algorithm for packing the textures involving shifts and rotations is likely to yield good results. The rotation can be propagated upstream to the spraying to avoid the additional resampling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Integration</head><p>The simulation results files are directly imported in 3ds max via a custom plugin. The 954 K nodes of the FEM define 355 K hexahedral (solid) elements used to model the column core and the fluff, 438 K hexahedral elements for the liquid elements, 15 K quadrilateral (shell) elements used to define the fuselage and floor of the aircraft, and 61 K segment (beam) elements used to define   <ref type="figure">Figure 8</ref> Image rendered from texture mapped model the ribs and stringers of the aircraft. The importer subdivides the simulation scene into objects according to materials.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Solid objects</head><p>Ignoring the liquid for now, the 12, 2 and 1 triangles per solid, shell and beam elements respectively imply about 4.3 M triangles for the solid materials in the simulation scene. This number is reduced by eliminating internal faces, which are irrelevant during rendering. An internal face is a face shared by two hexahedral elements. Because elements erode, faces that are initially internal can become visible at the fracture area. For this an object is subdivided according to the simulation states; subobject k groups all the elements that erode at state k. Discarding the internal faces of each subobject is done in linear time using hashing. This reduces the number of triangles to 1.3 M, which is easily handled by the animation system.</p><p>However, importing the mesh deformation into the animation system proved to be a serious bottleneck. The mesh deformations are saved by the FEA code as node positions at every state. The animation system supports per vertex animation but creating 50 position controllers for each of the remaining 700 K nodes takes days and the resulting scene file is unusable. The practical limit on the number of animation controllers is about 1 M. The number of animation controllers is reduced in two ways. First, the importer does not animate nodes with a total movement (sum of state to state movement) below a user chosen threshold (typical value 1 cm). Second, the trajectories of each node are simplified independently by eliminating (i.e. not creating) controllers for the nearly linear parts. We have experimented with two ways of simplifying the trajectory. In the first approach, a controller is removed if the resulting trajectory is, at every state, within a threshold (typical value 1 cm) of the original trajectory. This enforces the threshold globally at the cost of an order Ns 2 running time where N is the number of nodes and s is the number of states. Our second approach considers triples of states A, B, C and removes the controller for B if B is closer than 1 cm from the line AC. The next triple considered is A, C, D if B is removed and B, C, D if not. When the threshold is considerably less than the amount a node moves between states, the result is virtually the same as in the case of the first approach, with the benefit of an order Ns running time. After simplification, 1.8 M controllers remained. We distributed the simulation scene over three files, each covering one third of the simulation. Materials and cameras can of course easily be shared among several files. Importing the solid objects takes 2 hours total, out of which 1 hour is needed for the third part of the simulation. Once the solid objects are loaded, the animator assigns them standard 3ds max materials.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Liquid objects</head><p>The liquid data saved at every state contains the position of the nodes of the Eulerian mesh and the fractional occupancy values at that state. The liquid could be directly rendered from the occupancy data using volume rendering techniques. We chose to build a surface boundary representation first in order to take advantage of the rendering capabilities of the animation system. For every state the importer selects the Eulerian mesh elements that have a liquid occupancy above a certain threshold (typical value 25%). The internal faces are eliminated similarly to the solid object case. Once the liquid is imported, two 3dsmax modifiers are applied. For now the modifiers are applied manually by the animator; in the future this step will be moved inside the importer. The first is the "relax" modifier, which changes the apparent tension of the surface by moving vertices toward an average center point. By relaxing the mesh, it rounds the edges without adding or removing faces. After relaxing the mesh, a "smooth" modifier is added to average the object's normals, which creates a surface that reacts well to light, reflection, and refraction.</p><p>The liquid material is a 3ds max standard material with a falloff map in the opacity channel. This map attenuates the transparency of the object relative to the camera. It makes the object appear transparent where its normals are pointing in the same direction as the camera (the Fresnel effect). Optional raytrace maps are also controlling the reflection and refraction of the liquid material. <ref type="figure">Figure 9</ref> shows the liquid rendered once without the raytrace maps (5 seconds render time, top image) and then twice with the raytrace maps (5 minutes middle image, 55 minutes bottom image). Refraction and surface reflections improve the realism of the second image while the less expensive technique produces acceptable results when the liquid is integrated with the complex scene.</p><p>As in the case of the solid objects, animating the liquid is challenging. There are two fundamental approaches: to consider the liquid a complex object that moves and deforms over the simulation time or to frequently recompute the liquid object from the occupancy data, possibly at every animation frame.</p><p>The first approach is in the spirit of animation systems where the same geometric entity suffers a series of transformations over the animation time span. The state of the geometric entity is known at the simulation states; it can be computed by thresholding or isosurfacing the occupancy data. In order to define a morph that produces the animation frames in between the states, correspondences need to be established. This is challenging since the liquid can change considerably from one state to another; this <ref type="figure">Figure 9</ref> Fuel rendered in animation system</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Raytracing</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alpha transparency</head><p>Raytracing implies different number of vertices, different local topologies (drops, liquid chunks separating and reuniting).</p><p>We have attempted to implement this approach using the Eulerian mesh as a link between states. First, for each simulation state, the liquid elements occupied above a given threshold are selected. Then the Eulerian mesh is split in liquid objects (i, j) defined by the set of elements that contain liquid from state i to j, and do not contain liquid at states i-1 and j+1. In other words the object (i, j) contains the liquid "alive" between states i and j. The internal faces are removed and the object, which is a subset of the Eulerian mesh, is animated according to the known positions of the mesh nodes. Because the occupancy values vary considerably from one frame to another, many small liquid objects are generated. This leads to a large number of position controllers.</p><p>The approach of defining the liquid with independent objects corresponding to snapshots along the simulation timeline has proven to be more practical. Visibility controllers automatically generated by the plugin define the appropriate life span for each object. To smooth the transition the objects are faded in and out at a negligible cost of 4 controllers per liquid object. Currently the liquid is modeled with one object per state. The 50 liquid objects total 1.5 M triangles. By interpolating the occupancy data one could generate one snapshot for every animation step. When playing back the 50 states over 30 seconds at 30 Hz, 900 liquid objects need to be generated, which exceeds a practical geometry budget. We are investigating generating the liquid objects during rendering. This implies finding a way for applying the modifiers and assigning the liquid material automatically, during rendering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Discussion and future work</head><p>As one of the five member team to inspect the damaged building, Mete Sozen is a coauthor of the Pentagon Building Performance report <ref type="bibr">[ASCE 2003</ref>]. The most massive impacting element was the fuel. The fuselage of the aircraft has little strength under axial impact, as confirmed by the simulation and validated by actual experiments <ref type="bibr">[Sugano et al., 1993]</ref>. The simulation clearly shows that the structural damage occurs only when the fuel mass hits. The simulation can be extended by modeling the building and aircraft in more detail and including the effects of the explosion, of the high temperatures and of the combustion. The bottleneck in the simulation runs was the amount of memory available on the various platforms used. The power of large memory spaces has recently been combined with the convenience of desktop computing. We will investigate using Itanium PCs.</p><p>We have implemented a set of tools for integrating the simulation results with the surrounding scene in a commercial animation package. All tools can directly be reused for producing other visualizations. The tools are now routinely used by the civil engineering researchers of our team. Initially the use was restricted to producing illustrations of their work; they are now using it to inspect the result of simulations. Scientific simulation researchers and commercial-simulation-system developers have shown great interest in the quality of the visualizations and we have initiated several collaborations. Except for the liquid raytracing, the integrated scene could be explored interactively. The VRML format for example does support triangle meshes with per vertex animation and can be rendered with hardware support by many browser plugin or stand alone 3D viewers.</p><p>The link created between simulation and animation has to be further developed. The current bottleneck is the animation of the deforming meshes. Paradoxically the animation system performs better if the animation is specified by geometry replication. We will continue to investigate this problem. The importer could be extended to create dust, smoke and fire automatically. For example when a concrete element erodes, it should be turned in fine debris or dust animated according to the momentum that the element had before eroding. The simulation driven recreation of low visibility conditions will be valuable in virtual training. The first effort described here relied as much as possible on the capabilities of the animation system. These can be extended to include classic visualization techniques. Well studied algorithms can be employed and we do not foresee any major difficulty.</p><p>Good visualizations facilitate the comparison of the simulation results to observed or recorded real data. Providing tools to assist and then fully automate the comparison is one of our longer term goals. Computer vision techniques are a possibility. This task is greatly facilitated if the experiment scene or actual event scene are captured by depth maps in addition to the traditional photographs. In our case, recording the shape of the columns affected by the impact would have been both easy and very beneficial.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1</head><label>1</label><figDesc>Animation frame. The top floors are not shown to reveal the simulated aircraft / concrete columns impact.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2</head><label>2</label><figDesc>Process overview.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3</head><label>3</label><figDesc>Visualization of the jet fuel.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 (</head><label>6</label><figDesc>top) shows the calibration column subjected to highspeed impact with liquid. The liquid mass was idealized as a block (shown in red color). Figure 6 (bottom) illustrates the damaged state</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5</head><label>5</label><figDesc>Eulerian mesh cells with &gt;25% liquid occupancy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6</head><label>6</label><figDesc>Test simulation for tuning column / liquid interaction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7</head><label>7</label><figDesc>Photograph</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Acknowledgements</head><p>We would like to thank Jim Bottum and Gary Bertoline for making this project possible, William Whitson for his help with the supercomputer runs, Hendry Lim and Mihai Mudure for implementing texture spraying, Mary Moyars-Johnson and Emil Venere for publicizing this work, Amit Chourasia for modeling the Pentagon building, Jason Doty for his help with producing the first video illustration of this project and Raj Arangarasan for his help with an earlier implementation. This work was supported by Information Technology at Purdue (ITaP), Computing Research Institute (CRI) Purdue, NSF, ARO and DARPA.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Pentagon Building Performance Report</title>
		<imprint>
			<date type="published" when="2003" />
			<publisher>American Society of Civil Engineers</publisher>
		</imprint>
	</monogr>
	<note>88 pages</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Visualization of Damaged Structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Baker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Heiland</surname></persName>
		</author>
		<ptr target="http://archive.ncsa.uiuc.edu/Vis/Publications/damage.html" />
		<imprint>
			<date type="published" when="1998" />
		</imprint>
		<respStmt>
			<orgName>NCSA, University of Illinois</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The future of high-performance computers in science and engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CACM</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="1091" to="1101" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Amazing 3D Graphics, Inc., P.O Box 1821</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Casper</surname></persName>
		</author>
		<ptr target="URL:www.amazing3d.com" />
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="volume">85547</biblScope>
			<pubPlace>Payson, Arizona</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">QuicktimeVR-an image-base approach to virtual environment navigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGG. &apos;95</title>
		<meeting>SIGG. &apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="29" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Modeling and Rendering Architecture from Photographs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">P</forename><surname>Debevec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gortler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grzeszczuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Szeliski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cohen</surname></persName>
		</author>
		<ptr target="http://www.discreet.com/products/3dsmax" />
	</analytic>
	<monogr>
		<title level="m">Proc. of SIGG. &apos;96. DISCREET</title>
		<meeting>of SIGG. &apos;96. DISCREET</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="43" to="54" />
		</imprint>
	</monogr>
	<note>Proc. of SIGGRAPH &apos;96</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Dyna3D User&apos;s Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">O</forename><surname>Hallquist</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Benson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page">168</biblScope>
			<pubPlace>Livermore, California</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Lawrence Livermore National Laboratory</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Report #UCID-19592-revision-3</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">LS-Dyna, Theoretical Manual, Livermore Software Technology Corporation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">O</forename><surname>Hallquist</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<pubPlace>Livermore, California</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Light field rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SIGGRAPH &apos;96</title>
		<meeting>of SIGGRAPH &apos;96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="31" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">CTH: A three dimensional shock wave physics code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Mcglaun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Impact Engng</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="351" to="360" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Effect of Blast Walls for Protection of Multistory Building Structures against Terrorist Explosions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mcmillan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bishop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Namburu</surname></persName>
		</author>
		<ptr target="http://www.spaceimaging.com/gallery/9-11/default.htmSUGANO" />
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &apos;95</title>
		<meeting>SIGGRAPH &apos;95</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="373" to="385" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Visualization</forename><surname>Vtk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Toolkit</surname></persName>
		</author>
		<ptr target="http://public.kitware.com/VTK/" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
