<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Appearance-Preserving View-Dependent Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Jang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Shaw</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Peter Wonka GVU Center</orgName>
								<orgName type="institution">Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<settlement>Seattle, Washington</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Appearance-Preserving View-Dependent Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling -Surface and object representations view-dependent</term>
					<term>level of detail</term>
					<term>mesh simplification</term>
					<term>appearance-preserving</term>
					<term>multiresolution models</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In this paper a new quadric-based view-dependent simplification scheme is presented. The scheme provides a method to connect mesh simplification controlled by a quadric error metric with a level-of-detail hierarchy that is accessed continuously and efficiently based on current view parameters. A variety of methods for determining the screen-space metric for the view calculation are implemented and evaluated, including an appearance-preserving method that has both geometry-and texture-preserving aspects. Results are presented and compared for a variety of models.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>We are entering an era where 3D models from diverse sources are achieving unprecedented scale and detail. These include urban models that may contain extended streetscapes or large collections of detailed buildings. Some of these models are reconstructed from range data and imagery <ref type="bibr" target="#b19">[Neumann et al. 2003;</ref><ref type="bibr" target="#b8">Fr√ºh and Zakhor 2001]</ref> while others are constructed using advanced CAD or procedural methods <ref type="bibr" target="#b25">[Wonka et al. 2003</ref>]. In addition there are highly complex single models of varying sizes that must be dealt with using view-dependent techniques <ref type="bibr" target="#b15">[Levoy et al. 2000]</ref>. Many of the models in these two categories are textured or have other strong appearance attributes.</p><p>There have concurrently been developments in level-of-detail (LOD) management and visualization methods. Many of these methods have been applied to compact but highly detailed models <ref type="bibr" target="#b12">[Hoppe 1997;</ref><ref type="bibr" target="#b9">Garland and Heckbert 1997]</ref> while others have been applied to extended large scale models, such as terrain, where outof-core management is necessary <ref type="bibr" target="#b1">[Davis et al. 1998;</ref><ref type="bibr" target="#b17">Lindstrom 2003;</ref><ref type="bibr" target="#b7">Faust et al. 2000]</ref>. Ultimately, multiresolution methods of sufficient flexibility are needed to provide good quality visualizations at minimal cost for all these different types of models. In addition, optimal interactive visualization is in general obtained when local resolutions within and among models are chosen dynamically based on the current viewpoint. Also, multiresolution models, when properly organized, can provide efficient, incremental access to data that may reside out-of-core or in networked archives.</p><p>This paper presents the following new results that are useful in attacking these diverse models.</p><p>A new, view-dependent method is provided based on the quadric-error approach that has general appearance-preserving attributes.</p><p>A multiresolution hierarchy is developed that efficiently encodes a succession of quadric-based simplifications permitting traversal from original highly detailed models to final, constrained models. It is shown how geometry and/or texture-preserving metrics can be used to produce view-dependent simplifications. A variety of metrics are developed and evaluated. The quality of this view-dependent method is evaluated for a range of architectural and non-architectural models.</p><p>Because it is based on the quadric error approach <ref type="bibr" target="#b9">[Garland and Heckbert 1997]</ref>, our view-dependent method provides flexible, good quality shape-preserving simplification that applies to both topological and non-topological geometry. Our view-dependent mesh collapse or expansion is also monotonic. The methods presented here can fit into a general program attacking both structured (e.g., buildings) and natural models in a scalable geospatial framework <ref type="bibr" target="#b7">[Faust et al. 2000;</ref><ref type="bibr" target="#b21">Ribarsky 2003</ref>]. In addition, the quadric approach handles boundary preservation in a general way. This permits the transition to simple textured objects that have been used successfully in interactively navigable large scale collections of buildings in urban environments <ref type="bibr" target="#b2">[Davis et al. 1999;</ref><ref type="bibr" target="#b14">Jepson et al. 1996]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>A lot of work has been done on geometric model simplification, and effective methods have been developed that apply to models with consistent meshes. In this section we will concentrate on work most relevant to the research described here. Some methods enact a series of topology-preserving edge collapses to produce a desired level of simplification, such as the progressive mesh (PM) <ref type="bibr" target="#b11">[Hoppe 1996</ref>]. Other methods do not require topological consistency nor preserve topology. These include vertex clustering methods <ref type="bibr" target="#b22">[Rossignac and Borrel 1993]</ref> and methods that either remove vertices <ref type="bibr" target="#b24">[Schroeder et al. 1992]</ref> or combine vertices at new locations (not necessarily along edges) <ref type="bibr" target="#b9">[Garland and Heckbert 1997;</ref><ref type="bibr" target="#b3">El-Sana and Varshney 1999]</ref>. There are also methods based on regular meshes <ref type="bibr" target="#b16">[Lindstrom et al. 1996;</ref><ref type="bibr" target="#b17">Lindstrom 2003;</ref><ref type="bibr" target="#b7">Faust et al. 2000]</ref>, which are usually obtained by resampling. These have the advantage of a compact representation, a simplification hierarchy that is straightforward to set up, and extension to efficient out-of-core management of large scale data <ref type="bibr" target="#b7">[Faust et al. 2000;</ref><ref type="bibr" target="#b17">Lindstrom 2003</ref>]. However, these methods may not represent certain irregular surface features (say, a mountain ridge) as efficiently as irregular methods. Most of the regular methods have been applied to terrain height fields. <ref type="bibr" target="#b9">Garland and Heckbert [1997]</ref> present the quadric-based approach to polygonal simplification, which creates simpler approximations of the input mesh by performing a sequence of vertex pair merges. <ref type="bibr" target="#b10">Garland and Heckbert [1998]</ref> and <ref type="bibr" target="#b13">Hoppe [1999]</ref> have extended this approach to account for appearance attributes, including vertex colors, vertex normals, and texture coordinates. While these approaches yield nice results, it is not clear how the appearance attribute error relates to the geometric error in this metric, or how to bound appearance error in the rendered image. <ref type="bibr" target="#b6">Erikson and Manocha [1999]</ref> extend the quadric approach to support the joining of unconnected pieces of the mesh beyond just the initial threshold pairs. Their approach produces high quality drastic simplifications of potentially non-manifold models of arbitrary topology and fits well under a hierarchical level of details (HLOD) approach <ref type="bibr" target="#b5">[Erikson and Manocha 1998</ref>]. The HLOD approach works best for scene graphs where there exist many logically or actually separated objects, as opposed to expansive contiguous meshes.</p><p>The above methods can produce good models at a target LOD. In addition some of the methods above and others can produce either simplified or more complex models dynamically based on changing viewing parameters <ref type="bibr" target="#b12">[Hoppe 1997;</ref><ref type="bibr" target="#b16">Lindstrom et al. 1996;</ref><ref type="bibr" target="#b17">Lindstrom 2003;</ref><ref type="bibr" target="#b20">Pajarola 2001;</ref><ref type="bibr" target="#b7">Faust et al. 2000;</ref><ref type="bibr" target="#b3">El-Sana and Varshney 1999;</ref><ref type="bibr" target="#b26">Xia et al. 1997]</ref>. The latter capability is of significant importance for free navigation among highly detailed or large scale models where one may zoom in for a close-up look or back away for an overview. With these methods, views of large scale models, such as terrain, can be reduced by a factor of a hundred or more in polygon count without noticeable reduction in image quality <ref type="bibr" target="#b16">[Lindstrom et al. 1996]</ref>.</p><p>The view-dependent methods differ in the details of their approaches. Most of them use a merge hierarchy of some sort that is traversed at run-time to produce the current view, such as the merge tree <ref type="bibr" target="#b26">[Xia et al. 1997]</ref> or the view-dependence tree (VDT) <ref type="bibr" target="#b3">[El-Sana and Varshney 1999]</ref>. Like the VDT, the view-dependent progressive mesh (VDPM) <ref type="bibr" target="#b12">[Hoppe 1997</ref>] imposes dependencies (restrictions to preserve mesh consistency) on the run-time simplification; however, they are looser and generally allow more optimally adaptive view-dependent simplifications. <ref type="bibr" target="#b18">Luebke and Erikson [1997]</ref> describe a framework for view-dependent simplification of arbitrary polygonal environments based on a vertex clustering-based tight-octree hierarchy. Their vertex clustering tree (VCT) algorithm uses the screen-space projection of vertex deviation bounding spheres as the view-dependent simplification metric. This can be a very conservative bound due to the mismatch between the box-shaped clustering cells as well as lack of consideration for appearance attributes. <ref type="bibr" target="#b0">Cohen et. al. [1998]</ref> present an algorithm for appearancepreserving simplification. The approach involves a representation conversion whereby normal maps replace normals and texture maps are used for colors. This allows the algorithm to use a texture-deviation metric alone to guarantee appearance quality. The approach is able to generate low-polygon-count approximations of the original model while still preserving appearance, but it operates as a static simplification algorithm. While it is theoretically capable of generating single path simplification sequences as in a PM, it cannot be directly applied to an adaptive view-dependent simplification. <ref type="bibr" target="#b23">Sander et al. [2001]</ref> present an approach for texture mapping progressive meshes that seeks to minimize texture stretch. The approach is mainly concerned with creating stretch minimizing texture atlases such that the entire PM simplification sequence can use the same map. Like <ref type="bibr" target="#b0">Cohen et al. [1998]</ref>, our approach is concerned with bounding the texture deviation, whatever the parameterization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Hierarchical Mesh Structure</head><p>As with most view-dependent simplification approaches, our approach consists of two phases: an offline pre-processing phase and a run-time view-dependent meshing phase. The preprocessing phase generates a hierarchy that encodes all possible selectively refined meshes attainable during the subsequent runtime simplification phase. Similar to the VDT approach, we generate a vertex hierarchy of vertex-pair collapses from the bottom-up. However, instead of using the cubic-spline distance metric, we use an area-weighted quadric error metric with boundary preservation quadrics <ref type="bibr" target="#b9">[Garland and Heckbert 1997]</ref> to determine the simplification sequence. During this pre-processing phase, we also calculate texture coordinates and incremental bounds on the texture deviation. These bounds are used during run-time to select the appropriate LOD approximation within a user-specified screen-space error bound. (See Section 4 for a description of geometry and texture deviations.)</p><p>Lindstrom has developed a view-dependent quadric-based approach <ref type="bibr" target="#b17">[Lindstrom 2003</ref>] that uses a regular resampling of the original surface tessellation. A significant difference between this approach and ours is that we retain the original tessellation. In addition we consider view-dependent error metrics that depend more generally on appearance attributes (geometry, texture, etc.) whereas Lindstrom only considers geometry. <ref type="bibr" target="#b10">Garland and Heckbert [1998]</ref> have considered color and texture in a quadric approach, but without view-dependence. Although Lindstrom finds that resampling has little effect on the quality of the simplification for the models he considers, it is still possible that for certain models important details may either be lost or require excessively detailed resampling to retain them. In addition, the resampling grid must be chosen for each model, which introduces an additional complication to the modeling process. Our approach has neither of these potential drawbacks. Ultimately it may be that the two approaches can be combined to take advantage of both the powerful out-of-core capabilities of Lindstrom's method and the precision detail-handling of our approach.</p><p>We thus make the following contributions. Our viewdependent method uses a quadric-based structure that produces better visual quality than El-Sana and Varshney's method <ref type="bibr">[1999]</ref> and is built on the original surface rather than the resampled surface, as in <ref type="bibr">Lindstrom's method [2003]</ref>. It also depends on appearance attributes rather than geometric attributes alone (as in Lindstrom). In addition, as we show in Section 6, the structure is fast to build and traverse, as opposed to <ref type="bibr">Hoppe's algorithm [1997;</ref><ref type="bibr" target="#b13">1999]</ref>, which takes very long to preprocess.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Quadric-Based Tree</head><p>We have chosen the quadric approach because it quickly produces good quality simplifications of polygonal models by contracting arbitrary vertex pairs, not just edges. This procedure can produce better quality approximations than those restricted to edge collapses and is more general (in particular, it is useful for nonmanifold models encountered in urban, architectural, or other reality-based visualization). The quadric error metric (QEM) measures surface deviation and curvature by concisely encoding any number of plane equations of faces in the local neighborhood of a simplified point and its predecessors <ref type="bibr" target="#b9">[Garland and Heckbert 1997]</ref>. A quadric matrix (or simply, quadric) Q is the sum of any number of fundamental error quadrics K p = pp T , where p = [a b c d] T represents the plane defined by ax + by + cz + d = 0, where a 2 + b 2 + c 2 = 1. The quadric error (</p><formula xml:id="formula_0">v) = ([v x v y v z 1] T ) = v T Q v, is the sum of squared distances from a point (v x ,v y ,v z ) to all the planes encoded in Q.</formula><p>The basic quadric approach can be extended to preserve boundaries <ref type="bibr" target="#b9">[Garland and Heckbert 1997]</ref>. For every edge on the boundary, we can construct a plane parallel to that edge and perpendicular to the face. We can compute the quadric for this plane (called a border quadric) and add it to the quadric of the face. For higher boundary preservation, the border quadric is multiplied by a weighting factor (we use a default of 1000) before being added in. We use these border quadrics to constrain the simplification process so it produces a particular lowest approximation. This is especially useful for simplifying collections of, say, buildings and other objects in an urban environment. Here, one needs to both move in for close-ups and navigate to an overview in the visualization <ref type="bibr" target="#b2">[Davis et al. 1999;</ref><ref type="bibr" target="#b14">Jepson et al. 1996]</ref>. To support the overviews, the simplification should converge consistently to a collection of simple textured objects (such as a polygon for an extended fa√ßade or a box for a building or group of buildings).</p><p>Constructing the Tree. Our approach builds a binary tree of vertices from the bottom up via a sequence of vertex merges. We begin with all the vertices of the original mesh M 0 , which will be the leaves of the eventual tree. We use the vertex-pair collapse sequence {vcol 0 , ‚Ä¶, vcol k } of the quadric simplification algorithm to determine the order of vertex merges and the positions of the merged vertices. For vcol i , when merging two vertices V a and V b M i , we create a new vertex V c M i+1 to be the parent of V a and V b in the tree. Pointers to the faces removed by this merge are stored as the subfaces of V c and each subface retains a residence index, the index of V c . This information will be used during run-time to update the mesh. The algorithm proceeds until there is one vertex, the root of the tree. Note that we could also stop when the last face is decimated, when the error of the most recent vertex merge has passed some threshold, or when reaching the above reference polygon. The result would then be a forest of binary trees <ref type="bibr" target="#b12">[Hoppe 1997;</ref><ref type="bibr" target="#b18">Luebke and Erikson 1997]</ref>.</p><formula xml:id="formula_1">V 10 V 11 V 5 V 8 V 9 V 4 V 2 V 1 V 14 V 15 V 7 V 6 V 3 Simplification Pass: split: V 7 ; merge: V 10 , V 11 V 10 V 11 V 5 V 8 V 9 V 4 V 2 V 1 V 14 V 15 V 7 V 6 V 3</formula><p>Figure 1: The vertex front is circled. Green nodes are activeinterior, blue nodes are active-boundary, and orange nodes are inactive. Here, vertex V 7 is split and V 10 and V 11 are merged.</p><formula xml:id="formula_2">V 10 V 11 V 14 V 15 V 8 V 9 V 6 V 4 V 10 V 11 V 7 V 6 V 4 V 5 V 14 V 15 V 6 (a) (b)<label>(c)</label></formula><p>Simp Pass </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Mesh Updates</head><p>The run-time meshing algorithm resembles the VDPM and is also similar to the VCT and VDT approaches. It maintains a linked list of active boundary vertices and a list of active triangles. A vertex may be active or inactive, and the active vertices may be on the boundary or interior. (See <ref type="figure">Figure 1</ref>.) The boundary vertices are all the leaf nodes of the sub-tree of all active vertices. These boundary vertices (referred to as a front in the tree) comprise all the vertices of the current selectively refined mesh, the list of active triangles. A simplification pass ( <ref type="figure" target="#fig_0">Figure 2</ref>) consists of the traversal of the vertex front during which view-dependent simplification criteria are applied to decide whether to collapse, keep, or split a vertex node. A collapse removes a pair of vertices and adds their parent vertex to the active vertex list while a split replaces a vertex with its two child vertices. Depending on the mesh update information stored at the node, a split/collapse may also result in the introduction/removal of t triangles from the active triangle list. For the VDPM t is always 2, while our approach permits zero or more, allowing it to support arbitrary meshes as in the VCT. Unlike the VCT, it is able to exploit the binary tree structure to perform less work during this update. In contrast to the VDPM and the VDT, it neither stores, updates, nor enforces dependencies.</p><p>Dependencies. Both the VDPM and the VDT enforce dependencies on the view-dependent simplification of the mesh to preserve some aspect of mesh validity or coherence including foldover-prevention and local adjacency information. However, this requires the algorithm to perform a few additional comparisons for every refinement evaluation as well as update the dependencies after every vertex split or merge occurs. In addition, to perform a desired vertex split, it may be necessary to split neighboring vertices and their neighbors therein (that is, to recursively evaluate a chain of dependencies) just to respect the dependencies. Because a long and expensive recursion might result, El-Sana and Varshney <ref type="bibr">[1999]</ref> ignore the need to recursively activate secondary display vertices and instead opt for a lazy approach, waiting for vertices to split during later frames. For their VDT, they report that this is reasonable for slowly changing view-parameters. However, with our quadric-based tree, even slow navigation can result in a simplified mesh that is very visually inadequate for a long time, or it may never activate some visually critical nodes. <ref type="figure">Figure 3</ref> demonstrates this phenomenon. In 3a, the sphere was approached from the right and zoomed in. In 3b, the entire sphere was brought into view all at once, allowing the supporting vertices to be present, followed by zooming in to the same view. The tessellation inside the viewing frustum of 3a is inadequate. (It should resemble that of 3b.) In <ref type="figure">Figure 3b</ref>, there is not much simplification outside the view frustum. The dependencies in 3b are overly restrictive due to a chain of dependencies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 3: Effect of dependencies on two different navigation paths</head><p>This phenomenon is more severe with our quadric-based tree than with the VDT, which is based on a spline-distance metric.</p><p>The spline-distance metric is an indication of deviation across the surface. With this metric, a vertex pair collapse on the surface is highly likely to increase the error of the potential subsequent collapse between the newly picked vertex and its neighbors. The quadric metric is an indication of deviation orthogonal to the surface, so a vertex pair collapse does not necessarily increase the quadric error of the new vertex with respect to its neighbors, particularly in flat or common curvature regions. Thus, a tree built with the quadric metric is much more likely to result in chains of dependencies as it is more likely to nest neighbors as ancestors or descendents of each other as opposed to across the tree horizontally as cousins.</p><p>Note that the VDPM imposes less restrictive dependencies. Even though this would reduce the chance of inadequate refinement when taking the lazy approach (as in <ref type="bibr" target="#b3">[El-Sana and Varshney 1999]</ref>), their algorithm opts for correctness and evaluates chains of dependencies anyway.</p><p>In our approach, no run-time dependencies are enforced. The VDPM requires manifold surfaces, which is too narrow for our case, and the VDT is too restrictive in terms of the run-time simplifications it will permit. Instead, we allow the viewdependent simplification criteria alone to determine the mesh from all those encoded in the tree structure. Not enforcing supplementary dependencies allows for maximally adaptive simplification and also speeds up computation of the active vertex front. Ignoring dependencies means that there may be a chance for mesh inconsistencies, such as foldovers, during run-time simplification. However, these hardly ever occur in practice, although they are somewhat more likely for artificial meshes (such as meshes for flat or nearly flat walls). For textured surfaces, our screen-space appearance metric bounds texture deviation. So any visual artifacts due to foldovers on texturemapped surfaces with no additional surface-dependent visual ornamentation, e.g. specular highlights, have negligible visible impact (when the texturing is applied to both sides of the polygons). In practice we have found that not only do foldovers occur infrequently, but also that visual artifacts due to foldovers are not noticeable. This is consistent with our approach to focus on preserving appearance attributes rather than on mesh consistency. This is reasonable since the mesh itself often has no fundamental value (as in models acquired from laser range data or even in some constructed models) and sometimes is not even consistent, as in non-topological models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">View-Dependent Metrics</head><p>We now describe the details of the deviation metrics that are used to select a particular LOD during run-time. We first define how the metrics are computed during the pre-processing phase and then describe how to apply them at run-time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Deviation Metrics</head><p>We consider several deviation metrics that encompass either geometric or texture error measures, as shown in <ref type="figure" target="#fig_1">Figure 4</ref>. In Section 6, we will evaluate and compare these metrics, using them on different models.</p><p>For the merge of vertices V a and V b M i to vertex V c M i+1 , we define measures for the geometric deviation incurred. In <ref type="figure" target="#fig_1">Figure 4</ref>, each of these deviations is indicated by red dotted lines. These include the collapse distance deviation vectors G CDV : <ref type="figure" target="#fig_1">Figure 4A</ref>), and the incremental surface distance deviation vectors G ISV: <ref type="figure" target="#fig_1">Figure 4B</ref>) where H j (X) is the 3D point on mesh M j closest to point X. The quadric error vector G QV = (V c )n ( <ref type="figure" target="#fig_1">Figure 4C</ref>), simplistically computed by scaling the surface normal n (which is the direction of highest deviation from the surface) by the quadric error at V C <ref type="bibr" target="#b17">[Lindstrom 2003</ref>], provides a better alternative. In practice, this measure uses the quadric error to scale a careful characterization of the actual normals involved, which is derived from the same quadric matrices. Alternatively, a simpler but less precise formulation is to use the quadric error as the radius of a bounding sphere, which results in a conservative bound. Notably, G CDV and G ISV measure incremental errors, which are in general non-monotonic, while the quadric metrics measure errors from the original mesh, which are monotonic. In principle, the quadric metric should be the most accurate measure of geometric deviation. Geometric deviation gives an incomplete measure of the actual appearance deviation. We must also track texture deviation, which is the measure of how far a point V i on a surface M i has deviated from the point V j on another surface M j that has the same texture coordinate as V i . Using notation from <ref type="bibr" target="#b0">Cohen et al. [1998]</ref>, we can map between 3D object space and 2D texture space. The function, F j (X): M j P, maps point, X, on the surface, M j , to point, x, in the 2D texture domain, P. 1 The inverse function, F -1 i (x): P M i , maps point x in the texture domain P to a point X on surface M i . We now define a one-way incremental texture deviation vector G T1V = V c -P c , where P c = F -1 i (F i+1 (V c )),and a set of two-way incremental texture deviation vectors G T2V : (G T1V , V a -P a , V b -P b ), where P a = F -1 i+1 (F i (V a )) and P b = F -1 i+1 (F i (V b )). ( <ref type="figure" target="#fig_1">Figure 4D</ref> and <ref type="figure" target="#fig_1">Figure 4E</ref> illustrate G T1V and G T2V , respectively.) The length of G T1V or the max length of the vectors in G T2V can also be used as the radius of a bounding sphere. Since this radius 1 Capital letters (e.g., X) refer to points in 3D, while lower case letters (e.g., x) refer to points in the texture domain. </p><formula xml:id="formula_3">G ab = V b -V a , G ac = V c -V a (</formula><formula xml:id="formula_4">G c = V c -H i (V c ), G a = H i+1 (V a ) - V a , G b = H i+1 (V b ) -V b (</formula><formula xml:id="formula_5">V a V b V c Two-Way Incremental Surface Distance Deviation (ISV) V a V b V c Quadric Error Deviation (QV) V a V b V c V a V b V c P c One-Way Incremental Texture Deviation (T1V) V a V b V c P a Two-Way Incremental Texture Deviation (T2V) P b P c Total Texture Deviation (A) (B) (C) (D) (E) (F) V a V b V c</formula><p>is non-monotonic (as is the case with all the other incremental metrics), we calculate the bounding sphere radius r(V c ) = ||G|| + max(r(V a ), r(V b )), where G is the deviation vector of choice, be it geometric deviation or texture deviation. The difference between one-way and two-way deviations is that the former calculates only the deviation from M i due to V c , while the latter calculates this deviation plus the deviation from M i+1 due to V a and V b . The twoway incremental deviation will thus provide a better bound. Texture coordinates for V c are calculated by using the texture coordinate of the point closest to V c in mesh M i . That is, F i+1 (X) = F i (H i (X)). Note that the mapping is potentially not one-to-one. Furthermore, for the two-way bounds, we seek the texture coordinate for V c that results in the smallest r. Therefore, the approach examines only the local neighborhood N i,Vc of V c and looks for the texture coordinate from the closest points to the faces in N Vc that minimizes the max two-way texture deviation. <ref type="figure" target="#fig_1">Figure 4F</ref> describes the total texture deviation between the merged surface and the original surface. In this case deviations from all affected texture coordinates must be included <ref type="bibr" target="#b0">[Cohen et al. 1998</ref>]. This total deviation is too complex to consider for interactive view-dependent simplification, hence we devise approximate metrics to bound it.</p><p>Screen-Space Deviation. To determine the maximum screenspace deviation, we select one of the above deviation metrics and project the deviation bounding sphere to screen space.</p><p>As with most approaches, e.g. <ref type="bibr" target="#b12">[Hoppe 1997;</ref><ref type="bibr" target="#b20">Pajarola 2001;</ref><ref type="bibr" target="#b17">Lindstrom 2003</ref>], we opt for an approximate but more efficient evaluation instead of precise evaluation. We calculate the projected radius, p, of the sphere centered at v with radius r as follows.</p><formula xml:id="formula_6">= 2 * h / p = * r / (v -e) e</formula><p>where h is the vertical size in pixels of the viewport, is the (vertical) field of view angle, is an approximation of the pixels per view angle subtended, and e is the view direction vector, which is calculated once per view. A vertex is refined if its p is less than a pixel threshold .</p><p>This approximation overestimates the projection sizes near the view center and overestimates those further away. Furthermore, the neighborhood of V on an adaptively simplified mesh may be different than the neighborhood of V for which the bounds were originally calculated during the build phase.</p><p>Hoppe <ref type="bibr">[1997]</ref> estimates the Hausdorf distance between N v,i+1 , the local neighborhood of v after edge collapse i, and N v,0 , the corresponding local neighborhood on the original mesh, M 0 , by analyzing the residual error vectors from a dense set of points on M 0 . The distance bound obtained is used as the radius of the bounding sphere, which is used to bound error during viewdependent refinement. In addition, this approach can project a vector scaled in the direction of the normal that biases the refinement for preserving geometry on or near the silhouette. This approach yields nice results, but requires significant computation, especially if it were to be extended to account for texture deviation. Although the tree is built off-line, it is still desirable to have an efficient build phase, especially for applications such as urban modeling where data generation to visualization turnaround time is important.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Frustum and Backface Culling</head><p>Each node of the vertex tree stores a frustum culling bounding sphere radius that bounds all descendant vertices. Our implementation compares the sphere with the six planes of the view frustum. Nodes with frustum-culling bounding spheres that intersect the frustum are candidates for refinement. Alternatively, one can opt for a faster but more conservative evaluation of view frustum visibility as in the frustum cone of <ref type="bibr" target="#b20">Pajarola [2001]</ref>.</p><p>For closed manifold models of objects, faces on the back side with respect to the viewpoint are not visible as long as the viewpoint is never located inside the model. Therefore, it makes sense to allow these faces to simplify as much as possible. Like <ref type="bibr" target="#b12">Hoppe [1997]</ref> and <ref type="bibr" target="#b20">Pajarola [2001]</ref>, we bound the spread of normals of the adjacent faces of a vertex v and the descendants of v with a cone represented as the vertex normal, n v , and a cone angle, v vertex is considered unnecessary for supporting a front face if n v (v -e) v -e &gt; sin v holds The situation is more complicated, of course, for open or non-manifold models, as are sometimes encountered in urban visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implementation</head><p>We have developed several structures, based on the VDPM <ref type="bibr" target="#b12">[Hoppe 1997</ref>] and the VCT approach <ref type="bibr" target="#b18">[Luebke and Erikson 1997]</ref>, to make the run-time traversal of the above trees efficient. Our approach extends the VDPM to general meshes without requiring the use of dependencies, while being able to update the mesh more efficiently than the VCT due to the binary structure of the tree. ListNode is a doubly linked list structure used to string together faces in the active triangle list and vertices in the active vertex list. An index is used to locate the respective face or vertex being linked. Face consists of references to the three original and the three current vertices of a triangle. The residence_index refers to the index of the vertex node in which the face becomes a subface. Vertex consists of a 3D point location, a 2D texture coordinate, refinement information, binary tree id and depth, adjacent face and subface lists, and pointers to the parent and two child nodes. RefineInfo depends on the selective refinement approach used. It includes a bounding sphere radius for frustum culling as well as information that defines a deviation space to be projected into screen space in order to make a refinement decision on the node. Below is a listing of the structural organization.</p><p>In the pseudocode, activate‚Ä¶ and deactivate‚Ä¶ add/remove faces or vertices to/from the active lists; addAdjacency <ref type="bibr">(v, s)</ref> and removeAdjacency(v, s) add/remove face s to/from the adjacent face list of vertex v; linkLists(a, b, c) concatenates lists a and b and moves the resulting list to c. In addition, lowestActiveAncestor <ref type="bibr">(v, s)</ref> replaces the proxy of vertex v of face s with the lowest active ancestor of vertex v in the tree; childIsLeft(f, v) uses the depth of vertex v and the tree_id of the corresponding proxy of face f to determine whether the face belongs in the adjacent faces list of the left or right child of v; clearList(a) clears linked list a. Note that we always store vt and vu, the child nodes of the residence node of the face, in corner indices 1 and 2, thus s-&gt;proxies <ref type="bibr">[3]</ref> refers to the other vertex involved. The implementation of clearList() is trivial (set list to NULL) since the nodes of the adjacent face list of v are moved into the child node lists, thus emptying the list of v.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Results and Discussion</head><p>We test our approach and evaluate the various metrics using a variety of models of different types <ref type="figure" target="#fig_3">(Figs. 5-8</ref>). The sphere, wall, and wave models are procedurally generated and include texture coordinates. The wall <ref type="bibr" target="#b25">[Wonka et al. 2003</ref>] is comprised of 1800 separate components with arbitrarily connectivity. The wave is a height-field of sine waves that continuously vary in frequency. The bunny, the Buddha, and the building fa√ßade are models constructed from scanned data. The building fa√ßade <ref type="bibr" target="#b8">[Fr√ºh and Zakhor 2001]</ref>   <ref type="table">Table 1</ref> gives basic information, including size, initial candidate simplification pairs, and tree height, for these various models and shows their respective tree construction times in seconds. (These timings are from our prototype implementation running on a 2.4GHz Pentium4 Win2k PC with 512MB of RDRAM and a NVIDIA Quadro4 900XGL graphics card.) Our build times are comparable with qslim <ref type="bibr" target="#b9">[Garland and Heckbert 1997]</ref> since the quadric simplification approach is the foundation of our tree build algorithm. On top of the basic algorithm, we perform additional computation associated with the viewdependent structure, including linking the tree, computing texture coordinates, and computing run-time refinement information such as the error bounds. The two-way texture bounds (T2V) followed by the two-way geometric bounds (ISV are the most computationally expensive error bounds to compute, so those build times are listed separately. The total build times are significantly faster than for some other methods <ref type="bibr" target="#b12">[Hoppe 1997]</ref>.</p><p>For a fly through of the wave model, we achieve average frame rates of 20fps, where 54 percent of each frame is devoted to the simplification pass and the rest to rendering. We achieve simplification throughputs of over 60k triangles per second (tps) for collapses and over 50k tps for splits. Because we have concentrated on the new view-dependent structure and error metric implementation in this paper, our implementation is unoptimized for rendering. It traverses a linked-list for every refinement pass and traverses a linked-list to render every frame. We have not implemented optimizations, such as vertex arrays (as in <ref type="bibr" target="#b4">[El-Sana and Bachmat 2002]</ref>) and display lists (as in <ref type="bibr" target="#b17">[Lindstrom 2003</ref>]), or mesh update optimizations, such as prioritized traversal <ref type="bibr" target="#b4">[El-Sana and Bachmat 2002]</ref>, triangle-budget simplification <ref type="bibr" target="#b18">[Luebke and Erikson 1997]</ref>, asynchronous simplification <ref type="bibr" target="#b18">[Luebke and Erikson 1997]</ref>, etc. We anticipate that significant improvement in performance would result in incorporating any of the above, which is straightforward for most.   <ref type="figure" target="#fig_3">Figure 5</ref> shows the view-dependent simplification in action. For the bunny model, notice the high fall-off in mesh tessellation density outside the view frustum (blue outline). The wave model (right) exhibits more simplification in areas of lower frequency content (towards the lower right of the image) and less simplification in areas of higher frequency content (towards the upper left). Here we use G T2V . The G ISV , G QV , and G T1V metrics behave similarly. <ref type="figure" target="#fig_5">Figure 6</ref> shows the facade model simplified using each metric at one pixel screen-space deviation for 1024 x 768 pixel views. The blue box shows the viewport. The first pair (6A, 6B) is at full resolution; each subsequent pair is for a different metric. In each pair, the right-hand image shows the mesh explicitly. Note that the geometry-only metric G CDV (6E, 6F) preserves appearance, but does not allow much simplification. Also note that the geometryonly metric G ISV (6I, 6J) allows significant simplification, but fails to bound texture deviation. As shown in (6C, 6D), G T1V bounds texture deviation at the vertices of the active mesh, but not in between. G T2V (6G, 6H) not only bounds texture deviation at the vertices, but it also bounds deviation across the faces. The quadric sphere metric G QV (6K, 6L) gives nice adaptive simplification, refining more in areas of high geometric detail, but guarantees no bounds on texture deviation. Furthermore, there is less of a fall-off in tesselation for portions of the model further from the viewpoint than with other approaches. <ref type="figure" target="#fig_4">Figure 7</ref> demonstrates that our scheme can preserve appearance even on piecemeal meshes such as the wall model. This an architectural model generated with a procedural technique where mesh topology is not enforced. Notice how the mesh falls apart outside the view frustum, yet inside is virtually indistinguishable from the original. As it moves inside the frustum, the outside mesh also reforms consistently. Finally, <ref type="figure">Figure 8</ref> shows the Buddha model simplified with the texture deviation metric G T2V , despite it not being given (nor does it compute) a texture parameterization. The G T2V metric gracefully falls back to G ISV .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions and Future Work</head><p>We have presented a quadric-based approach for appearancepreserving, view-dependent visualization of triangulated models. We have described a method for quickly generating a visualization-ready hierarchy from an input model. This hierarchy can be efficiently traversed for view-dependent rendering. In addition the data structure accommodates different error metrics. We have characterized the relative merits of several metrics in determining the appropriate mesh for preserving appearance. We have presented results for several models that show the visual quality of our approach and the merits of the different error metrics. For future work, normal maps and vertex color information can be added to the formalism to efficiently improve the appearance-preserving character of non-texture mapped models. A formulation for boundary preservation using reference planes can be built on our approach to permit consistent transition to simple textured objects appropriate for overviews of collections of objects. In addition a more general approach could be developed for urban models based on architectural semantics <ref type="bibr" target="#b25">[Wonka et al. 2003</ref>] that would support interactive 3D planning. Finally large collections of models could be placed in a scalable structure for interactive visualization that ranges over all scales. Our approach has the flexibility to support all these avenues. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>The pink, purple, and dark gray triangles are subfaces of V7, V5, and V4, respectively in Figure 1. (a) Full mesh. (b) Tree on left of Figure 1. (c) Tree on right.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 :</head><label>4</label><figDesc>Several metrics for view-dependent simplification</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>View-dependent simplification of bunny and wave models. Triangle counts are 36k of 69k and 43k of 205k.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Wall model with (left) and without texture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>FigureFigure 6 :</head><label>6</label><figDesc>Fa√ßade model comparing different metrics at a resolution of 1 pixel (except for 6A, which is full resolution). Triangle counts are (AB) FULL = 48117, (CD) T1V = 3989, (EF) CDV = 42841, (GH) T2V = 29245, (IJ) ISV = 13825, (KL) QV = 27386.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>.</head><label></label><figDesc>Model and build information. All timings are in seconds.</figDesc><table><row><cell></cell><cell cols="3">includes texture information scanned concurrently</cell></row><row><cell cols="4">with the geometry, and thus possesses an inherently correct</cell></row><row><cell cols="2">parameterization.</cell><cell></cell></row><row><cell></cell><cell></cell><cell>initial</cell><cell>tree</cell></row><row><cell cols="2">model verts tris</cell><cell>pairs load init T1V ISV T2V</cell><cell>height</cell></row><row><cell cols="4">sphere 10k 20k 30k 0.17 0.19 0.36 0.44 0.84 54</cell></row><row><cell>wave</cell><cell cols="3">103k 205k 308k 1.64 2.22 4.64 5.22 8.16 26</cell></row><row><cell cols="4">bunny 36k 69k 104k 0.49 0.77 1.48 1.70 1.77 22</cell></row><row><cell cols="4">buddha 150k 300k 450k 2.12 6.05 7.31 8.06 8.49 26</cell></row><row><cell cols="4">fa√ßade 49k 97k 146k 1.03 0.95 2.05 2.36 3.86 36</cell></row><row><cell>wall</cell><cell cols="3">3.6k 7.2k 36k 0.14 3.67 0.25 0.28 0.52 31</cell></row><row><cell>Table 1</cell><cell></cell><cell></cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>We acknowledge the Stanford Computer Graphics Lab for the use of the bunny and Buddha models. This work is supported by the Department of Defense's MURI program, administered by the Army Research Office; it is also supported by a grant from the NSF Large Scientific and Software Data Visualization program.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Iterative Updates. We need efficient per-vertex handling for merges and splits that are made at run-time in the view-dependent simplification. On a merge, the approach is to deactivate the subfaces, move all other adjacent faces to the parent node, and update the corner references of the faces. The approach on a split is to activate the subfaces, distribute the adjacent triangles (and the subfaces) to the appropriate child node, and update the corner references. Our algorithm differs from the VCT in two ways: we maintain adjacent triangle lists for each vertex in the active mesh and we leverage the binary tree structure to minimize calls to the routine that finds the lowest active ancestor of a node. This is desirable since this routine is the most computationally expensive part of the inner loop of these routines. The pseudocode for the collapse of v (the merge of its two child nodes) and the split of v into its two child nodes is as follows. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Appearance-Preserving Simplification of Polygonal Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Olano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">98</biblScope>
			<biblScope unit="page" from="115" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Intent, Perception, and Out-of-Core Visualization Applied to Terrain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">98</biblScope>
			<biblScope unit="page" from="455" to="458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Real-Time Visualization of Scalably Large Collections of Heterogeneous Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Y</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ho</surname></persName>
		</author>
		<idno>GIT-GVU-99-14</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization 99</title>
		<meeting>IEEE Visualization 99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="437" to="440" />
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Generalized View-Dependent Simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>El-Sana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum (Proceedings of Eurographics 99)</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="83" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Optimized View-Dependent Rendering for Large Polygonal Datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>El-Sana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bachmat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="77" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Simplfication Culling of Static and Dynamic Scene Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Erikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
		<idno>TR98-009</idno>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
		<respStmt>
			<orgName>UNC Chapel Hill Computer Science</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">GAPS: General and Automatic Polygonal Simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Erikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Interactive 3D Graphics</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="79" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">International Conference On Discrete Global Grids. An earlier version is in Rep</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Y</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wasilewski</surname></persName>
		</author>
		<idno>GIT-GVU-97-07</idno>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
	<note>Real-Time Global Data Model for the Digital Earth</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">3D Model Generation for Cities Using Aerial Photographs and Ground Level Laser Scans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fr√ºh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zakhor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Computer Vision and Pattern Recognition Conference</title>
		<meeting>IEEE Computer Vision and Pattern Recognition Conference</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="31" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Surface Simplification Using Quadric Error Metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 97</title>
		<meeting>ACM SIGGRAPH 97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Simplifying Surfaces with Color and Texture using Quadric Error Metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">98</biblScope>
			<biblScope unit="page" from="263" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Progressive Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 96</title>
		<meeting>ACM SIGGRAPH 96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">View-Dependent Refinement of Progressive Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 97</title>
		<meeting>ACM SIGGRAPH 97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="189" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">New Quadric Metric for Simplifying Meshes with Appearance Attributes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization 99</title>
		<meeting>IEEE Visualization 99</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Virtual Modeling of Urban Environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Jepson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Liggett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Friedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Presence</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="72" to="86" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Digital Michelangelo Project: 3D Scanning of Large Statues</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pulli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Curless</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ginzton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ginsberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shade</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fulk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="131" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Real-Time, Continuous Level of Detail Rendering of Height Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">F</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 96</title>
		<meeting>ACM SIGGRAPH 96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Out-of-Core Construction and Visualization of Multiresolution Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lindstrom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2003 Symposium on Interactive 3D Graphics</title>
		<meeting>ACM SIGGRAPH 2003 Symposium on Interactive 3D Graphics</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page">239</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">View-Dependent Simplification of Arbitrary Polygonal Environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Luebke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Erikson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 97</title>
		<meeting>ACM SIGGRAPH 97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="199" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Augmented Virtual Environments (AVE): for Visualization of Dynamic Imagery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>You</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Virtual Reality</title>
		<imprint>
			<biblScope unit="page" from="61" to="67" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">FastMesh: Efficient View-dependent Meshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pajarola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Pacific Graphics</title>
		<meeting>Pacific Graphics</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="22" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Virtual Geographic Information Systems. To be published. The Visualization Handbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
		<editor>Charles Hansen and Christopher Johnson</editor>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Academic Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Multi-resolution 3D Approximations for Rendering Complex Scenes. Geometric Modeling in Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Borrel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="455" to="465" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Texture Mapping Progressive Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snyder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gortler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="409" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Decimation of Triangle Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zarge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proceedings of ACM SIGGRAPH 92</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="65" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Instant Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wonka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wimmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sillion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Ribarsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2003</title>
		<meeting>ACM SIGGRAPH 2003</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="669" to="677" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Adaptive Real-Time Levelof-Detail-Based Rendering for Polygonal Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>El-Sana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="171" to="183" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
