<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Gaussian Transfer Functions for Multi-Field Volume Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Kniss</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Scientific Computing and Imaging Institute</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Premože</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milan</forename><surname>Ikits</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Scientific Computing and Imaging Institute</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Lefohn</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Scientific Computing and Imaging Institute</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Hansen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Scientific Computing and Imaging Institute</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emil</forename><surname>Praun</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Gaussian Transfer Functions for Multi-Field Volume Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:51+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism I.3.7 [Computer Graphics]: Three-Dimensional Graphics Volume Rendering</term>
					<term>Transfer Functions</term>
					<term>Multi-field visualization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Volume rendering is a flexible technique for visualizing dense 3D volumetric datasets. A central element of volume rendering is the conversion between data values and observable quantities such as color and opacity. This process is usually realized through the use of transfer functions that are precomputed and stored in lookup tables. For multidimensional transfer functions applied to multivariate data, these lookup tables become prohibitively large. We propose the direct evaluation of a particular type of transfer functions based on a sum of Gaussians. Because of their simple form (in terms of number of parameters), these functions and their analytic integrals along line segments can be evaluated efficiently on current graphics hardware, obviating the need for precomputed lookup tables. We have adopted these transfer functions because they are well suited for classification based on a unique combination of multiple data values that localize features in the transfer function domain. We apply this technique to the visualization of several multivariate datasets (CT, cryosection) that are difficult to classify and render accurately at interactive rates using traditional approaches.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Direct volume rendering is a flexible technique for visualizing arbitrary three-dimensional scalar and multi-field datasets. Other 3D visualization techniques require the computation of an intermediate geometric representation of the data prior to rendering (e.g. creating a polygonal mesh using isosurface extraction). In contrast, direct volume rendering does not require intermediate geometry; the data is resampled and converted to optical properties as it is being rendered. This conversion from data values to optical properties is represented using a transfer function, which is typically implemented as a lookup table.</p><p>One advantage of direct volume rendering is its ability to visualize multiple values, or fields, simultaneously. Multi-field volume rendering has been shown to dramatically improve our ability to classify subtle features that may not be well characterized by any single input field <ref type="bibr" target="#b11">[Laidlaw 1995]</ref>. Even scalar datasets can benefit <ref type="figure">Figure 1</ref>: Volumetric rendering using Gaussian Transfer Functions (GTF). Left: analytic approximation of the GTF integral evaluated on graphics hardware (128 slices). Middle: numerical integration of the GTF using 368 slices. Right: numerical integration of the GTF using 128 slices.</p><p>from multi-field volume rendering techniques by adding fields for local derivative information <ref type="bibr" target="#b6">[Kindlmann 1999]</ref>. For example, gradient magnitude characterizes the rate of change of values in some neighborhood and can help classify the input data set into homogeneous and transition regions <ref type="bibr" target="#b7">[Kindlmann 2002]</ref>. Multiple data fields effectively place the ranges of data values representing different features at different locations in a multidimensional data space. Features may therefore be easier to classify in a multivariate dataset because ambiguities can be better resolved when different features share the same range of data values in an individual field.</p><p>Although a multi-field dataset can be visualized using separate transfer functions for each field, multidimensional transfer functions that specify the optical properties for each unique combination of data values are a more general and expressive representation <ref type="bibr">[Kniss et al. 2002b;</ref><ref type="bibr">Kniss et al. 2002a]</ref>. A major limitation of multidimensional transfer functions using a lookup table is the increased storage requirement. Each additional field in the dataset increases the size of the transfer function lookup table. For instance, a 1D transfer function for eight bit data would require 256 entries, whereas a 2D transfer function requires 256 2 entries. In practice, we have found that it is not uncommon to encounter datasets that require 3D or even 4D transfer functions.</p><p>One approach for handling the exponential memory requirements of a multidimensional transfer function is to decompose it into multiple transfer functions of a lower dimension, i.e. implement it as a product of separable transfer functions. For instance, a 4D transfer function for data fields d 1 , d 2 , d 3 , d 4 could be represented as a 2D transfer function for fields d 1 and d 2 multiplied with another 2D transfer function for fields d 3 and d 4 . Alternatively, this 4D transfer function could be represented as four 1D transfer functions, one for each of the data fields, multiplied together. Although separable transfer functions may reduce the memory requirements of a high dimensional transfer function, they also dramatically limit the kinds of features that can be visualized when compared to a general multidimensional transfer function. Separable transfer functions also have the potential to erroneously clas- <ref type="bibr">IEEE Visualization 2003</ref><ref type="bibr">, October 19-24, 2003</ref>, Seattle, Washington, USA 0-7803-8120-3/03/$17.00 ©2003 IEEE</p><formula xml:id="formula_0">d 1 d 2 tf- d 1 tf- d 2 tf-d 2 d 1 tf- x B A C D d 2 F 1 F 1 F 1 F 1 F 2 F 2 ? ?</formula><p>Figure 2: The limitations of separable transfer functions. sify features. This occurs when the separable parts of a transfer function unintentionally interact when they are combined. <ref type="figure">Figure 2</ref> illustrates how this unintentional interaction occurs in the transfer function domain. <ref type="figure">Figure 2</ref>(A) shows the desired 2D transfer function classifying some feature F 1 seen in red. <ref type="figure">Figure 2</ref>(B) shows 1D transfer functions for each of the data fields d 1 and d 2 that when multiplied together produce the desired transfer function. However, if we add a second classified feature to the 2D transfer function, F 2 in <ref type="figure">Figure 2</ref>(C), we can no longer represent this transfer function as a product of two 1D transfer functions. <ref type="figure">Figure 2</ref>(D) shows how the 1D transfer functions interact to produce an incorrect 2D transfer function.</p><p>Another issue affecting the size of a transfer function lookup table is the dynamic range of the data. The ideal transfer function lookup table should have the same number of entries as the number unique data values. Therefore, a typical transfer function for scalar 8-bit data has 256 entries. Similarly, a transfer function for scalar 16-bit data would need to have 65, 536 entries. Most industrial and medical scanners acquire data with a fixed-point dynamic range of at least 12 bits. Nearly all modern numerical simulations produce 32-bit floating-point or double precision floating-point data. Using a transfer function with a different dynamic range and resolution than that of the source data requires scaling the source to the dynamic range and quantizing it to the resolution of the transfer function. It is not always clear how to appropriately map floating point data to a discrete transfer function with finite size.</p><p>The dynamic range and dimensionality of the transfer function affect how finely the data volume must be sampled during rendering. <ref type="bibr" target="#b4">Engel et al. [2001]</ref> observed that the maximum frequency along the viewing ray in volume rendering is the product of the highest frequency in the source data and the highest frequency in the transfer function. <ref type="bibr">Kniss et al. [2002b]</ref> observed that the maximum frequency along the viewing direction is also proportional to the dimension of the transfer function. These observations imply that it is not sufficient to sample the volume with the Nyquist frequency of the data field, because undersampling artifacts would become visible. This problem is exacerbated if non-linear transfer functions are allowed. That is, the narrower the peak in the transfer function, the more finely we must sample the volume to render it without artifacts. Similarly, as more dimensions are added to the transfer function, we must also increase the sampling rate of the volume rendering.</p><p>This paper develops a framework for the compact representation of multidimensional transfer functions. We choose a transfer function based on the Gaussian as the underlying primitive. While many other functions could be used in general, its capability for feature classification and several implementation issues justify our choice of the Gaussian.</p><p>First, we show that the Gaussian and its properties enable flexible feature classification. Second, the Gaussian can be efficiently evaluated even for multiple dimensions while preserving its generality and expressiveness. This function can be explicitly evaluated which also remedies the size and dynamic range issues of transfer functions that would ordinarily be implemented as lookup tables. Third, mathematical properties of the Gaussian allow us to approximate the volume rendering equation in closed form over a line segment with linearly varying multivariate data values. As shown in <ref type="figure">Figure 1</ref> this approximation enables us to render high quality images with significantly fewer samples than are required for ordinary numerical integration techniques.</p><p>In Section 3 we present a class of transfer functions based on the Gaussian. Section 4 describes how this class of transfer function primitives can be analytically integrated over a line segment under the assumption that data values vary linearly between two sampled points. In Section 5 we describe the practical implementation details of Gaussian transfer functions and their analytic integration. In Section 6 we show examples of multivariate data visualization and compare the described approach with commonly used methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Previous Work</head><p>Visualization of volumetric datasets has been studied extensively. <ref type="bibr" target="#b1">[Blinn 1982</ref>] introduced a particle model for computer graphics adapting the radiative transfer theory. <ref type="bibr" target="#b5">[Kajiya and Von Herzen 1984</ref>] extended the particle model to inhomogeneous volumetric media. Modern direct volume rendering methods are based on work of <ref type="bibr" target="#b3">[Drebin et al. 1988]</ref>, <ref type="bibr" target="#b19">[Sabella 1988</ref>] and <ref type="bibr" target="#b12">[Levoy 1988]</ref>. <ref type="bibr" target="#b19">[Sabella 1988</ref>] presented a simple raytracing algorithm for rendering three dimensional scalar fields. The illumination model was based on a varying density emitter and a simple transfer function was applied to the scalar data field for visualization. Accurate and convincing visualization of data sets can be achieved by direct volume rendering if the data is sampled at high rates. Unfortunately, high sampling rates result in performance penalties and therefore slow rendering times. Slow performance is exacerbated if non-linear transfer functions are used and complex optical models <ref type="bibr" target="#b14">[Max 1995]</ref> are employed in volume shading computation. <ref type="bibr" target="#b13">[Max et al. 1990</ref>] realized the need for pre-integration in the projected tetrahedra (PT) volume rendering algorithm <ref type="bibr" target="#b20">[Shirley and Tuchman 1990]</ref>. They analytically integrate the opacity and intensity integrals in the sorted convex polyhedra cells comprising the volume. These individual segments are then composited together using standard compositing operators. Color sample compositing has been derived by <ref type="bibr" target="#b1">[Blinn 1982]</ref> and <ref type="bibr" target="#b17">[Porter and Duff 1984]</ref>. <ref type="bibr" target="#b24">[Williams and Max 1992]</ref> described a simple analytic volume density optical model for piecewise linear transfer functions. <ref type="bibr" target="#b25">[Williams et al. 1998</ref>] further improve the accuracy of visualization of unstructured grids by improving pre-integration and adding more sophisticated optical models. Previous volume rendering algorithms only allowed linear transfer functions <ref type="bibr" target="#b21">[Stein et al. 1994]</ref>. Arbitrary transfer functions can also be pre-integrated by storing the integral in a three-dimensional texture and later used efficiently in the visualization step <ref type="bibr" target="#b18">[Roettger et al. 2000;</ref><ref type="bibr" target="#b18">Roettger and Ertl 2002]</ref>. <ref type="bibr" target="#b4">[Engel et al. 2001</ref>] applied the idea of volume pre-integration to regular meshes and employed programmable consumer hardware for visualization. They achieved high-quality visualizations of volume data even for coarse data sets and non-linear transfer functions without the performance penalty. Pre-integration can sometimes result in artifacts if preshaded colors and opacity values are interpolated separately. <ref type="bibr" target="#b26">[Wittenbrink et al. 1998</ref>] improved the compositing step by interpolating opacityweighted color.</p><p>Interactive direct volume rendering has become possible by exploiting graphics hardware support for texture mapping. <ref type="bibr" target="#b2">[Cabral et al. 1994</ref>] cast the volume rendering problem into a 3D texture resampling problem that can be efficiently implemented in graphics hardware. Numerous other authors made significant improvements to texture based volume rendering such as performance optimizations, sophisticated light and shading models and improved quality <ref type="bibr" target="#b22">[Westermann and Ertl 1998;</ref><ref type="bibr">Meißner et al. 1999;</ref><ref type="bibr" target="#b18">Rezk-Salama et al. 2000;</ref><ref type="bibr" target="#b23">Westermann and Sevenich 2001;</ref><ref type="bibr" target="#b4">Engel et al. 2001]</ref>.</p><p>Transfer functions and methods for generating them have also been extensively studied. <ref type="bibr" target="#b16">[Pfister et al. 2001]</ref> and <ref type="bibr" target="#b7">[Kindlmann 2002</ref>] provide an excellent survey of existing methods and tradeoffs between them. While 1D and 2D transfer function have received much attention, true multidimensional transfer functions have not. <ref type="bibr" target="#b11">[Laidlaw 1995</ref>] developed a framework for magnetic resonance imaging (MRI) classification and visualization using volume rendering algorithms that included 2D Gaussian transfer functions for data classification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Gaussian Transfer Functions</head><p>In direct volume rendering, data points are directly mapped to optical properties such as color and opacity that are then composited along the viewing direction into an image. This mapping is achieved using transfer functions. These functions have to be able to efficiently classify data features and produce various different outputs such as color, opacity, emission, phase function, etc. Typically these functions have many parameters that have to be set by the user by hand or through interactive exploration of the volume data. As the survey by <ref type="bibr" target="#b7">[Kindlmann 2002</ref>] on transfer functions and generation methods shows, the process of creating expressive transfer functions can be a very time consuming and frustrating task. For multivariate volumes, this problem becomes even more daunting since the number of parameters grows with the number of dimensions, sometimes exponentially. It is therefore important, especially for multivariate datasets, to have transfer functions with simple expressions that rely on a limited number of free parameters. We have found transfer functions based on the Gaussian primitive to be particularly useful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">General GTF</head><p>The Gaussian Transfer Function (GTF) is defined in one dimension as:</p><formula xml:id="formula_1">g(v, c, σ ) = e −(v−c) 2 /σ 2 (1)</formula><p>where v is the sampled data value, c is the data value that the Gaussian is centered over, and σ is the width of the Gaussian. Note that this function does not represent a probability distribution. The GTF is a scaled version of the normal distribution that does not integrate to one, yet retains its shape and simplicity. While the above definition illustrates the shape and some desirable properties of the GTF in one dimension, we are interested in multidimensional transfer functions. The multivariate Gaussian transfer function is written as:</p><formula xml:id="formula_2">GTF( v, c, K) = e −( v− c) T K T K( v− c)<label>(2)</label></formula><p>where v is the sampled data vector of dimension n (the number of values at each sample in the data set), c is the vector data value that the Gaussian is centered over, and K is an n × n linear transformation matrix that can scale and rotate the Gaussian (see <ref type="table" target="#tab_0">Table 1</ref>). For example, if K is a diagonal matrix, it scales the Gaussian along the primary axes of the data domain. In the more general case, the matrix K can rotate and scale the Gaussian about the center c. As defined above, the GTF takes values between 0 and 1. We obtain achromatic opacity α by scaling the GTF with the maximum opacity value α max . To select several features from the data set and show each one in its own color, we build a transfer function by combining several </p><formula xml:id="formula_3">α = ∑ α i and C = ∑ α i C i .</formula><p>( <ref type="formula">3)</ref>where α and C are the resulting opacity and color contributions from all primitives. Note that these operators combine the individual contributions without taking into account the order in which they are specified.</p><p>Using Gaussian primitives is just one possible approach to building transfer functions. In the past, researchers have explored the use of precomputed lookup tables, piecewise linear or piecewise quadratic functions. While individual elements of these functions are simple and can be evaluated efficiently, the number of elements required to build transfer functions that can faithfully select fine features can grow very large for multivariate datasets. For example, representing an n-dimensional transfer function capable of selecting a neighborhood of size ∆ around a data value v may require a lookup table with 1/∆ n entries. Commonly used datasets can have 1/∆ = 256 and n = 4, leading to table sizes larger than the available texture memory on current graphics cards. Piecewise linear and piecewise quadratic functions are more memory efficient than lookup tables but can still suffer from an exponential growth in the number of free parameters with respect to the number of dimensions. For rendering, we are interested in the transfer function applied to a line segment between two data values. Even for transfer functions that can be represented with relatively few segments along each of the primary data axes, the restriction of the function's domain to an arbitrary line through data space may be quite complicated (use a large number of segments). Our Gaussian primitives have higher expressive power while still being simple enough to allow intuitive parameter control and efficient hardware evaluation. In addition, multidimensional GTFs restricted to arbitrary lines result in a simple one-dimensional Gaussian that can be analytically integrated. We explore uses of this property in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Triangular GTF</head><p>For visualizing boundaries between materials in scalar data, one can benefit from transfer functions that also depend on the data gradient magnitude. We extend 1D GTFs to 2D transfer functions using a construction introduced by <ref type="bibr" target="#b12">[Levoy 1988]</ref>. A triangular transfer function primitive can be generated using Gaussians by adjusting their widths depending on the gradient magnitude ∇v : σ = σ ∇v , where σ is a free parameter (corresponding to the width of the triangular GTF for ∇v = 1). The intuition behind this construction is that in regions of the volume with high gradient magnitude, the data values are changing fast, so it is likely that the region will contain the boundary (feature) that we are looking for. Therefore, it is advantageous to apply a wider Gaussian to increase the chance that the region will be selected by the transfer function. The use of the triangular classification function can also be easily extended for use with multi-field datasets by replacing the gradient magnitude from the univariate case with the L 2 norm of the matrix D T D where the rows of D are the gradients of each of the data fields.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Piecewise Analytic Integration</head><p>The intersection of the multidimensional GTF with an arbitrary line through data space results in one-dimensional Gaussian. This allows us to integrate the transfer function over line segments in the volume for which the data varies linearly. As shown in <ref type="figure">Figure 3</ref> for narrow peaked transfer functions, this analytical integration is much more accurate than a numerical (Riemann sum) integration using the same number of samples for each viewing ray.</p><p>The emission-absorption volume rendering equation over a line segment is defined as <ref type="bibr" target="#b19">[Sabella 1988</ref>]:</p><formula xml:id="formula_4">I(a, b) = b a Cρ(v(u)) e − u a τρ(v(t))dt du (4)</formula><p>where τ is extinction (expressing attenuation along the ray), ρ is density, C is radiant intensity or color, v(t) is the data value at the position along the ray parameterized by t starting at the spatial position x in direction ω. If we assume that the color C and extinction τ are constant over the segment, the intensity can be expressed as <ref type="bibr" target="#b13">[Max et al. 1990</ref>]:</p><formula xml:id="formula_5">I(a, b) = C τ α (5)</formula><p>where the opacity term α is:</p><formula xml:id="formula_6">α = 1 − e −τ b a ρ(v(t))dt .<label>(6)</label></formula><p>If we further assume that data values along the ray between parameters a and b vary linearly, the opacity term becomes:</p><formula xml:id="formula_7">α(v 1 , v 2 , l) = 1 − e −τ l 1 0 ρ(v 1 +t(v 2 −v 1 ))dt = 1 − e −τ lρ<label>(7)</label></formula><p>where v 1 = v(a) is the data value at ray parameter a, v 2 = v(b) is the value at ray parameter b, l = b − a, and ρ is the density line integral along the segment. For arbitrary one dimensional transfer functions the integral can be expressed as <ref type="bibr" target="#b24">[Williams and Max 1992]</ref>:</p><formula xml:id="formula_8">ρ (v 1 , v 2 ) = 1 0 ρ(v 1 + t(v 2 − v 1 ))dt = R(v 2 ) − R(v 1 ) v 2 − v 1<label>(8)</label></formula><p>where R(v) is the integral function of the density:</p><formula xml:id="formula_9">R(v) = v −∞ ρ(x)dx (9)</formula><p>The opacity is computed similarly to (7) when ρ is a multidimensional function:</p><formula xml:id="formula_10">α( v 1 , v 2 , l) = 1 − e −τ l 1 0 ρ( v 1 +t( v 2 − v 1 ))dt = 1 − e −τ lρ<label>(10)</label></formula><p>In general, the line integral ρ has no analytic solution. In the companion paper <ref type="bibr" target="#b10">[Kniss et al. 2003</ref>], we show that if we let ρ( v) = GTF( v, c, K), ρ becomes:</p><formula xml:id="formula_11">ρ ( v 1 , v 2 ) = √ π 2 S d (erf(B) − erf(A))<label>(11)</label></formula><p>where <ref type="figure">Figure 3</ref>: Setup for analytic integration using Gaussian transfer functions. The top image shows a parameterized ray going through a volume. The volume is sampled at points x 1 ...x n along this ray.</p><formula xml:id="formula_12">A = d • v 1 d , B = A + d , S = e − v 1 2 +A 2 f(x) T(x) T(f(x)) x1 x2 x3 xn { l A B S</formula><p>A continuous function f is reconstructed from these samples using linear interpolation. A Gaussian transfer function T is then applied to the function f , and becomes T ( f (v)). Traditionally, the integral of T ( f (v)) is computed using a Riemann sum, seen at the bottom labeled S. Notice how the peaks A and B in T ( f ) are missing in the Riemann sum. Piecewise analytic integration of T ( f ) ensures that we do not miss these peaks.</p><formula xml:id="formula_13">v 1 = K v 1 − c , v 2 = K v 2 − c , d = v 2 − v 1<label>(12)</label></formula><p>and erf(z) is the error function:</p><formula xml:id="formula_14">erf(z) = 2 √ π z 0 e −x 2 dx.<label>(13)</label></formula><p>Notice that the √ π/2 in equation (11) cancels the 2/ √ π in equation (13). While erf has no explicit representation, it can be closely approximated with simple functions. We found the approximation of <ref type="bibr" target="#b0">[Abramowitz and Stegun 1974]</ref> particularly useful and easy to implement. Note that if v 1 = v 2 , i.e., when we have two samples in a homogeneous region, d = 0 and we cannot use equation <ref type="formula" target="#formula_11">11</ref>directly. In this case the formula converges to:</p><formula xml:id="formula_15">ρ ( v 1 , v 2 ) → ρ( v 1 )<label>(14)</label></formula><p>as d → 0, since ρ becomes the derivative of the integral function, which is the integrand itself. We use the following formulae to combine transfer function elements during piecewise analytic integration of each segment:</p><formula xml:id="formula_16">ρ i = 1 0 ρ i (v 1 + t(v 2 − v 1 ))dt ρ i (v) = GTF(v, c i , K i ) α = 1 − e −l ∑ τ i ρ i C = ∑ τ i ρ i C i ∑ τ i ρ i = ∑ ρ i C i ∑ τ i ρ i C i = C i τ i<label>(15)</label></formula><p>where the integrals in the sum for computing the opacity α are evaluated separately similarly to equation (11). Note that even though the sum of GTFs is not a GTF, we can still integrate them separately, scale them by τ i and sum them in the exponent. Combining the color contributions employs a commonly used approximation that neglects the order in which the primitives appear along the line segment <ref type="bibr" target="#b4">[Engel et al. 2001]</ref>. We also have to divide the input color C i by the input extinction coefficient τ i according to equation (5).</p><p>Note that in theory the extinction coefficient τ i takes values between 0 and ∞. In practice the necessary upper limit is much lower because τ i is integrated resulting in an opacity value that quickly reaches one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implementation</head><p>In this section, we describe the practical implementation details of Gaussian transfer functions from Section 3 and the implementation of the analytical integration described in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Gaussian Transfer Function</head><p>The goal of Gaussian transfer functions is to provide a general and scalable class of transfer function primitives for specifying fully general multidimensional transfer functions. Rather than utilizing a lookup table to evaluate the transfer function for data values sampled within the volume, the Gaussian transfer function is evaluated as a true function for each sample. The down side of transfer functions that are evaluated explicitly is that the computational cost of evaluation is linearly proportional to the number of transfer function primitives used. Although it may seem that this computational cost would preclude the use of this class of transfer functions for interactive volume rendering, we have found them quite practical for a number of reasons. First, the simple and continuous form of the Gaussian transfer function makes it an efficient function to compute on modern graphics hardware. Second, we found that in practical applications we rarely use more than four or five transfer function primitives at a time.</p><p>The fragment processing pipeline on modern GPUs provides a rich set of SIMD vector operations such as component-wise arithmetic, vector dot products, exponentiation and trigonometric functions. The current generation of graphics hardware supports all of the necessary instructions to implement explicit evaluation of transfer functions at full 32-bit floating point precision. High precision is important since we would like the transfer function primitives to be general with respect to both dimension and dynamic range.</p><p>The GTF can be evaluated on modern graphics hardware in as few as four instructions; a multiply-add instruction, a dot product, an exponential, and a multiply. This holds for datasets with up to 4 fields, and each additional multiple of 4 fields adds 3 instructions; a multiply-add, a dot product, and an add. The algorithm for evaluating the GTF is shown below in pseudo code:</p><formula xml:id="formula_17">1 r = K V,i * v − c i Vector Multiply-Add 2 r = r • r Vector Dot Product 3 r = exp(−r)</formula><p>Scalar Exponent 4 α i = α max,i * r Scalar Multiply <ref type="table">Table 2</ref>: Fragment program for computing opacity using the GTF.</p><p>The GTF parameters c = K V * c, K V , and h are stored as fragment program constants, while the sampled data value vector v can be read from a data texture and/or come from other variables such as a spatial position or the dot product of the view direction and normal. r is a temporary register. The program in <ref type="table">Table 2</ref> assumes that the matrix K only scales the GTF along the primary axes of the transfer function domain, so the diagonal matrix K can be represented with just a vector K V with n elements, where n is the number of fields in the dataset. A general matrix representation for K would be more expressive allowing us to specify an arbitrary orientation for the GTF. However, it would significantly complicate any user interface for the transfer function, and the additional computational cost of evaluating the matrix-vector multiply may outweigh the benefits. An example of classification using a 3D GTF is seen in <ref type="figure" target="#fig_0">Figure 4</ref>. </p><formula xml:id="formula_18">= 1/g Scalar Reciprocal 2 r 1 = K V,i * v − c i Vector Multiply-Add 3 r 1 = r 0 * r 1 Scalar Vector Multiply 4 r 1 = r 1 • r 1 Vector Dot Product 5 r 1 = exp(−r 1 ) Scalar Exponent 6 α i = α max,i * r 1 Scalar Multiply 7 α i = if(g = 0){0}else{α i } Scalar Conditional</formula><p>where g = ∇v i is the gradient magnitude of one of the data values, and r 0 and r 1 are temporary registers. K V is the scaling vector that scales the Gaussians along the axes of the transfer function domain. <ref type="table">Table 3</ref>: Fragment program for computing opacity using the triangular GTF.</p><p>The triangular GTF described in Section 3.2 requires three additional instructions (a scalar reciprocal, a vector multiply, and a scalar conditional-move operation) compared to the general GTF (see <ref type="table">Table 3</ref>). The conditional in line 7 of <ref type="table">Table 3</ref> is required because we have a divide by zero when g = 0. Note that we do not always have to check for division by zero if the graphics hardware architecture implements the IEEE floating point standard. If g is equal to zero in the first instruction, the result will be properly carried through subsequent instructions as expected, setting pixels with invalid values to zero. An example of classification using a 4D triangular GTF is seen in <ref type="figure">Figure 5</ref>.</p><p>Notice that the algorithm for computing the GTF involves two vector operations and two scalar operations. Similarly, the triangular GTF requires three vector and four scalar operations. This symmetry is important since modern programmable GPUs allow us to compute one vector and one scalar operation in parallel. We cannot exploit this parallelism in the computation of a single GTF because each operation is serially dependent on the previous one. However, the computation of multiple GTF primitives can be interleaved such that the vector operations for one are computed in parallel with the scalar operations for another. Therefore, we can effectively compute two transfer function primitives at once. Combining multiple GTFs requires us to keep track of the summed colors and GTFs, as in equation <ref type="formula">3</ref>, adding an additional vector/scalar pair of instructions per GTF:</p><formula xml:id="formula_19">1 C = C i * α i +C Vector Multiply-Add 2 α = α i + α</formula><p>Scalar Add where C is the cumulative opacity weighted color, α is the cumulative opacity, α i is computed using the program from <ref type="table">Table 2  or Table 3</ref> and C i is the color for the current primitive. <ref type="figure">Figure 5</ref>: An example of classification using the triangular GTF. The data set is a numerical weather simulation courtesy of the Canadian Meteorological Centre and includes 4 fields, temperature, humidity, wind speed, and a derived multi-gradient. The left image identifies the simulation domain. The left-center image shows a default transfer function created by centering a triangular GTF at the median value for each axis and setting its width to one. The right-center image shows some of the airmass boundaries (fronts). The right image was created by modifying the triangular GTF's width along the wind speed axis to select only those portions of the previously classified airmass that have wind speeds greater than fifty percent of the maximum wind speed in the simulation. Dataset size is 256x256x64.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Piecewise Analytic Integration</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">One Dimensional Case</head><p>The use of explicitly evaluated transfer functions as described in the previous section, assumes that the volume rendering equation is being solved by compositing color and opacity segments along the viewing ray using a Riemann sum. It is well known that this technique produces significant artifacts if the sampling rate is not high enough. We use analytic integration based on the equations derived in Section 4 in order to significantly reduce the number of samples required to reconstruct the data with good fidelity.</p><p>The analytic integral for scalar data and gradient magnitude can be implemented as a special case of equation <ref type="bibr">(11)</ref>. In this case we can simplify the general multidimensional case to 1D, because the gradient magnitude only modifies the width of a 1D GTF.</p><p>We use equation (8) to compute the density integral using the GTF. For the triangular version, ρ will depend on the gradient magnitudes and we use the same formulation with the following input parameters:</p><formula xml:id="formula_20">v j = K (v j − c) g ,ĝ = g 1 + g 2 2 , g j = ∇v j .</formula><p>We found that this approximation of the density integral works well in practice. Further justification for using the average of the gradient magnitudes can be found in <ref type="bibr" target="#b10">[Kniss et al. 2003</ref>].</p><p>For this special case we precompute a 2D function:</p><formula xml:id="formula_21">IGauss(x 1 , x 2 ) = √ π 2 erf(x 1 )−erf(x 2 ) x 1 −x 2 x 1 = x 2 IGauss(x 1 , x 2 ) = e −x 2 1 x 1 = x 2 .<label>(16)</label></formula><p>In our implementation we evaluate this function within a domain from [−10, 10] in both x 1 and x 2 , and store it as a 2D texture. Since the function is smooth we have found 128 2 16-bit samples to be sufficient. A scale and bias are required to access the texture correctly, since its texture coordinates are [0, 1]. The analytic piecewise integral of the triangular GTF for scalar data can be implemented with only four more instructions than the triangular GTF itself:</p><formula xml:id="formula_22">- c i = {C i .</formula><p>x,C i .y,C i .z, τ i } Color and extinction input 1 </p><formula xml:id="formula_23">r.x = K V,i * v 1 − c i Scalar Multiply-Add 2 r.y = K V,i * v</formula><formula xml:id="formula_24">c i = (C i , τ i ).</formula><p>Step 2(a) is used for the triangular GTF only.</p><p>Once all primitive's color and extinction quantities have been computed, a final step is required to compute the opacity and the correctly weighted color: This algorithm leverages the fact that most modern graphics hardware architectures are capable of executing a texture read and a vector/scalar pair of operations simultaneously. For instance, the Nvidia FX series can handle two texture reads and two operations simultaneously. This algorithm also permits interleaving of instructions for the evaluation of multiple GTFs.</p><formula xml:id="formula_25">-r = {−l,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Multidimensional Case</head><p>The analytic integral of the general multidimensional GTF for linearly varying data, defined in equation <ref type="formula" target="#formula_11">11</ref>, can be implemented entirely in a fragment program including an approximation of the erf function. We have however found that the large number of instructions required (over 30) affects performance dramatically. About half of these instructions are devoted to computing the two erf functions. Similarly to the one-dimensional case, we can precompute erf(x) − erf(y) and store it into a 2D texture. Since this function asymptotically approaches constant values as the absolute value of the argument grows, we only need to represent a small interval around the origin and clamp to the edges of the texture when accessing values outside this interval. We have found that the domain −3.6 ≤ x, y ≤ 3.6, is adequate for a 16-bit lookup table. <ref type="table">Table 4</ref> shows the fragment program used in the multidimensional case. Naturally, 20 fragment instructions are a lot for a rendering technique that is already fill bound. This computation takes  <ref type="table">Table 4</ref>: Fragment program for analytic integration in the multidimensional case.</p><formula xml:id="formula_26">1 v 1 = K V * v 1 − c Vector Multiply-Add 2 v 2 = K V * v 2 − c Vector Multiply-Add 3 d = v 2 − v 1 Vector Subtract 4 r 0 = d • d Vector Dot Product 5 r 1 = 1/ √ r 0 Scalar Recip. Sqrt. 6 ABG.x = d • v</formula><p>more than twice as long as the point sampled multidimensional GTF, meaning that this analytic integral is as computationally expensive as the Riemann sum of a GTF with at least 2 extra samples over the same domain. In general, this analytic solution would only be required when one of the components of K is very large, i.e. the GTF is very narrow along one of the dimensions of the dataset, or the gradient magnitude is being used to emphasize boundaries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Results</head><p>As can be seen in <ref type="figure">Figure 1</ref>, one advantage of the analytic triangular GTF is the ability to extract thin material boundaries with fewer slices than using Riemann sum integration methods. On the left is the CT tooth dataset extracting the enamel, dentin, and pulp boundaries rendered with the analytic triangular GTF using 128 slices. In the middle is an image with a non-analytic triangular GTF using 368 slices. On the right is an image rendered with a non-analytic triangular GTF but with only 128 slices. This example demonstrates the ability to extract thin material boundaries with similar quality using far fewer slices by employing the analytic GTF. In evaluating performance, the computational cost of explicitly evaluating transfer functions must be considered. Each classified feature adds a new transfer function primitive, which increases the time for the evaluation. <ref type="table">Table 5</ref> lists the timings achieved for different numbers of transfer function primitives using the approaches presented in this paper, and compares them to the traditional approaches using table lookups. Separable 2D Textures use one pair of 2D textures for each transfer function primitive. This ensures we do not have classification errors detailed in Section 1. It is clear from the table that the cost of explicitly computing the analytic solution is higher, due to the long fragment program, than either separable transfer function or just the GTF. <ref type="figure">Figure 6</ref> shows another example of the tradeoff between quality and speed for the analytic triangular GTF and the Riemann sum integration methods. The data is a multi-modal MRI of a mouse brain, and the transfer function uses three primitives representing the cortex, white matter, and the ventricles. <ref type="figure">Figure 6 (A)</ref> shows the results of using the 4D triangular GTF (TGTF) rendered by Riemann sum integration with 270 slices. <ref type="figure">Figure 6 (B)</ref>   <ref type="table">Table 5</ref>: Time comparisons in seconds per-frame using the Duke Mouse Brain at 1.2 average samples per voxel on an Nvidia GeForceFX 5900. GTF computations were not interleaved in these timings.</p><p>number of slices but rendered with the analytic 4D TGTF. For figure 6 (C), the Riemann sum was again used but the number of slices was increased (1000 slices) to match the rendering speed required by figure 6 (B). Note the higher quality result of the analytic integration.</p><p>If speed is the primary concern in a volume rendering system, it is likely that a separable transfer function using table lookups will suffice. However, if accuracy and scalability are primary concerns, Gaussian transfer functions may be preferable over separable lookup tables. Although a general n-dimensional transfer function cannot be decomposed into n 1D transfer functions without errors in the classification, it is possible to decompose it if it consists of m separable transfer function primitives. In this case the transfer function could be represented by n * m 1D transfer functions. Naturally, the computational cost of this decomposition could be much higher compared to an explicitly evaluated transfer function with the same characteristics. The cost for evaluation of the analytic GTF is high but is clearly effective for thin material boundaries.</p><p>User interface concerns are very important in multi-field transfer function design. Although direct manipulation of classified features is often necessary, we have found that a simple modification of dual-domain interaction <ref type="bibr">[Kniss et al. 2002b</ref>] can provide the primary transfer function interface without an explicit representation of the transfer function domain. Our system allows the user to probe a simple color-mapped slice of the multi-field data. As the user probes a feature, all sample locations are recorded and basic statistics are performed on these samples to derive the mean, standard deviation, and covariance required for GTF specification. The user is then able to refine the GTF specification by modifying simplified and independent parameters like size, opacity, color, etc. Each classification element can be manipulated independently, or grouped with other elements representing the same feature and modified simultaneously. An explicit representation of the transfer function is required for fine tuning. Each classification element or group is modified independently of all others. The interface provides a number of 2D projections of the multi-dimensional transfer function space that allow the user to modify the position and size of GTFs along each axis simultaneously or independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>We have presented a general and scalable framework for classifying and rendering multi-field datasets, using transfer functions based on Gaussian primitives. We have adopted these transfer functions because they are well suited for classifying narrow features in multidimensional domains. The triangular Gaussian transfer function is a simple modification of the basic GTF that makes it useful for classification based on gradient magnitude measures.</p><p>These transfer functions are efficient to implement, especially on the modern programmable graphics hardware and do not require the large amount of texture memory storage as do high dimensional lookup tables. With reasonable assumptions, e.g. data values only vary linearly between two sample points, they can be analytically (A) 0.43 s/frame (B) 2.11 s/frame (C) 2.20 s/frame <ref type="figure">Figure 6</ref>: A multi-field MR of a mouse brain, courtesy of the Duke Center for In Vivo Microscopy, consisting of four fields; PD, T2, Diffusion Tensor trace, and a derived multi-gradient. The images are rendered with the Riemann sum and analytically integrated TGTF (3 primitives: cortex (tan), white matter (gray), and ventricles (red)). The dataset size is 256 3 .</p><p>integrated over a line segment even in multiple dimensions. Although functions would work as an underlying transfer function primitive, the GTF is valuable because it is easy to control, very simple to implement, and analytically integrable.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 4 :</head><label>4</label><figDesc>Examples of multi-field volume classified using a GTF. The dataset is the Visible Male Color Cryosection, courtesy of the National Institutes of Health. Dataset size is 256 3 1 r 0</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>2 − c i Scalar Multiply-Add 2(a) r = r * (1/ĝ) Scalar Multiply 3 r = r 0 * .05 + .5 Vector Multiply-Add 4 r.x = IGauss( r.xy) 2D Texture Read 5 c = c + r.x * c i Vector Multiply-Add where c = (C, τ) contains the combined color and extinction terms, and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>c * r.wwwx Scalar Multiply 3 c.w = exp(c.w) Scalar Exponential 4 c.w = 1 − c.w Scalar Add 5 c.xyz = c.xyz * c.w Scalar Multiply where r is a temporary register.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Notation and important terms used in the paper Gaussian primitives. We sum the opacities α i and average the colors C</figDesc><table><row><cell>K</cell><cell>Linear transformation matrix</cell></row><row><cell>K V K S ρ</cell><cell>Vector representing scaling Scalar representing uniform scaling Density</cell></row><row><cell>τ</cell><cell>Extinction</cell></row><row><cell>c</cell><cell>Center of the Gaussian</cell></row><row><cell>c</cell><cell>Transformed center of the Gaussian</cell></row><row><cell>v</cell><cell>Vector data value</cell></row><row><cell>v</cell><cell>Scalar data value</cell></row><row><cell>erf</cell><cell>Error function</cell></row><row><cell cols="2">GTF Gaussian transfer function</cell></row><row><cell>C</cell><cell>Color</cell></row><row><cell>α</cell><cell>Opacity</cell></row><row><cell cols="2">α max Maximum opacity</cell></row></table><note>i together:</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgments</head><p>We would like to thank Will Nesse, Dmitriy Pavlov, and Frank Stenger for stimulating conversations about functional approximation, statistics, and analytic integration techniques, which aided greatly in the development of this work. Dave Weinstein and Helen Hu read drafts of the paper. This work was funded by the following grants: NSF ACR-9978032, NSF MRI-9977218, NSF ACR-9978099 and the US Department of Energy's VIEWS program.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Handbook of Mathematical Functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abramowitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">A</forename><surname>Stegun</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974-06" />
			<publisher>Dover</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Light reflection functions for simulation of clouds and dusty surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;82 Proceedings</title>
		<imprint>
			<date type="published" when="1982-07" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="21" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Accelerated volume rendering and tomographic reconstruction using texture mapping hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Cam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Symposium on</title>
		<imprint>
			<biblScope unit="volume">Visualization</biblScope>
			<biblScope unit="page" from="91" to="98" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;88 Proceedings</title>
		<editor>J. Dill</editor>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="65" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">High-Quality Pre-Integrated Volume Rendering Using Hardware-Accelerated Pixel Shading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics / SIG-GRAPH Workshop on Graphics Hardware &apos;01</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Ray tracing volume densities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Von Herzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;84 Proceedings)</title>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Semi-Automatic Generation of Transfer Functions for Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
		<respStmt>
			<orgName>Program of Computer Graphics, Cornell University</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Transfer functions in direct volume rendering: Design, interface, interaction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Siggraph Course Notes</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Volume rendering multivariate data to visualize meteorological simulations: A case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kniss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grenier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Robinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics -IEEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Multi-dimensional transfer functions for interactive volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kniss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="270" to="285" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Closed-form approximations to the volume rendering integral with Gaussian transfer functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kniss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Premože</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ikits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lefohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>School of Computing University of Utah</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. UUCS-03-013</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Geometric Model Extraction from Magnetic Resonance Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Laidlaw</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, California Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Area and volume coherence for efficient visualization of 3D scalar functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (San Diego Workshop on Volume Visualization)</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Optical models for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="99" to="108" />
			<date type="published" when="1995-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Enabling Classification and Shading for 3D Texture Mapping based Volume Rendering using OpenGL and Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meissner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Strasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99 Proc</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The transfer function bake-off</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">S</forename><surname>Avila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Machiraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="16" to="22" />
			<date type="published" when="2001-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Compositing digital images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;84 Proceedings)</title>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="253" to="259" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Interactive Volume Rendering on Standard PC Graphics Hardware Using Multi-Textures and Multi-Stage-Rasterization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rezk-Salama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Engel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Greiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Roettger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Roettger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics / SIGGRAPH Workshop on Graphics Hardware &apos;00</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="109" to="116" />
		</imprint>
	</monogr>
	<note>Preceedings of IEEE Visualization</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A rendering algorithm for visualizing 3D scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sabella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH &apos;88 Proceedings)</title>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="51" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A polygonal approximation to direct scalar volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tuchman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (San Diego Workshop on Volume Visualization)</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="63" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Sorting and hardware assisted rendering for volume visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="83" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Efficiently using graphics hardware in volume rendering applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 98 Conference Proceedings, M. Cohen</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="169" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Accelerated volume ray-casting using texture mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sevenich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="271" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A volume density optical model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Volume Visualization</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A high accuracy volume renderer for unstructured data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">L</forename><surname>Max</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Stein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<date type="published" when="1998-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Opacityweighted color interpolation for volume sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Wittenbrink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Malzbender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Goss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="135" to="142" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
