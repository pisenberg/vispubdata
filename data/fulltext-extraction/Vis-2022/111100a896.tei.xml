<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Taurus: Towards a Unified Force Representation and Universal Solver for Graph Layout</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mingliang</forename><surname>Xue</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Zhi</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Fahai</forename><surname>Zhong</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Yong</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Mingliang</forename><surname>Xu</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Oliver</forename><surname>Deussen</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Yunhai</forename><surname>Wang</surname></persName>
						</author>
						<title level="a" type="main">Taurus: Towards a Unified Force Representation and Universal Solver for Graph Layout</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-03-27T09:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph Layout</term>
					<term>Gradient Descent</term>
					<term>Framework</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Over the past few decades, a large number of graph layout techniques have been proposed for visualizing graphs from various domains. In this paper, we present a general framework, Taurus, for unifying popular techniques such as the spring-electrical model, stress model, and maxent-stress model. It is based on a unified force representation, which formulates most existing techniques as a combination of quotient-based forces that combine power functions of graph-theoretical and Euclidean distances. This representation enables us to compare the strengths and weaknesses of existing techniques, while facilitating the development of new methods. Based on this, we propose a new balanced stress model (BSM) that is able to layout graphs in superior quality. In addition, we introduce a universal augmented stochastic gradient descent (SGD) optimizer that efficiently finds proper solutions for all layout techniques. To demonstrate the power of our framework, we conduct a comprehensive evaluation of existing techniques on a large number of synthetic and real graphs. We release an open-source package, which facilitates easy comparison of different graph layout methods for any graph input as well as effectively creating customized graph layout techniques.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Graphs are commonly used for modeling complex data in many domains such as social media, finance and biology. The most commonly used graph visualization technique, node-link diagrams, depict nodes as points in a plane and edges as lines connecting these points. In past decades, various graph layout methods <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b35">36]</ref> have been developed for producing aesthetically-pleasing drawings, while maintaining the underlying graph structures.</p><p>Rather than directly optimizing aesthetic criteria <ref type="bibr" target="#b33">[34]</ref> (e.g., even node distribution and minimal edge crossing), most methods simulate one of two kinds of physical systems as a basis for layouting graphs: the spring-electrical model or the stress model. The spring-electrical model <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10]</ref> regards edges as springs that use attractive forces to pull connected nodes close to each other, at the same time treating nodes as electrically-charged particles that repel each other with repulsive forces. Based on this model, many variants of force-directed placement (FDP) algorithms have been developed for better revealing different structures and features of graphs. For example, FM 3  <ref type="bibr" target="#b17">[18]</ref> and SFDP <ref type="bibr" target="#b19">[20]</ref> use a multilevel scheme for overcoming local minima, the extended models of LinLog <ref type="bibr" target="#b30">[31]</ref> and ForceAtlas2 <ref type="bibr" target="#b21">[22]</ref> allow to better reveal clusters and local structures, respectively. While the spring-electrical model produces good layouts for many graphs, it does not encode the target (data-space) edge lengths between every pair of nodes. This is the focus of stress models <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b39">40]</ref>, which assume a spring between each pair of nodes with an ideal length equal to the graphtheoretical distance among the nodes. By minimizing the stress energy of the spring system, a layout is obtained. For efficiently solving such models, which involve considerably more interactions between the nodes, a few optimization strategies have been incorporated, such as stress majorization <ref type="bibr" target="#b13">[14]</ref>, and stochastic gradient descent (SGD) <ref type="bibr" target="#b41">[42]</ref>. To alleviate the involved computational costs, sparse stress models <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b31">32]</ref> have been proposed, which only impose springs for a subset of node pairs.</p><p>Because of the divergent mechanisms, these models have different characteristics when creating graph layouts. For example, FDP performs better in preserving neighborhood structures for many graphs, while the stress model tends to maintain the overall structures, especially for mesh-like graphs. However, it is still unclear why the models have such differences and how they are connected conceptually. Moreover, it is difficult to make a fair quantitative comparison because different optimization strategies are used. This not only hinders researchers to develop new methods but also poses a challenge for practitioners to choose a proper method for visualizing their graphs.</p><p>In this paper, we present a general framework, we call Taurus, Towards a Unified force Representation and Universal Solver for graph layout, that offers a unified view for understanding and comparing most of the popular graph layout algorithms. It relies on two novel components: a unified force representation and a universal solver. The uniform force representation allows us to show that all existing methods can be formulated as a combination of quotient-based forces, using a quotient between power functions of graph-theoretical and Euclidian distances. This unified representation enables us to compare the strengths and weaknesses of different methods. The universal solver combines the advantage of SGD <ref type="bibr" target="#b29">[30]</ref> in escaping local minima and the effectiveness of the Barnes &amp; Hut approximation <ref type="bibr" target="#b2">[3]</ref> in reducing computational cost, which allows us to solve different existing layout methods with the same optimizer.</p><p>Moreover, our framework can also be used as a general platform for developing new graph layout methods. In particular, we propose a balanced stress model, which combines the advantages of springelectrical and stress models. Specifically, it exerts attractive and repulsive forces to all node pairs, where the attractive force is reciprocal and the repulsive force is proportional to the graph-theoretical distances. In doing so, the model avoids extremely large repulsive and attractive forces for nearby nodes, while pulling neighboring nodes close to each other.</p><p>We implement Taurus as a graph visualization package in C++, which allows users to define their own attractive and repulsive forces. To demonstrate its effectiveness, we comprehensively evaluate it by comparing various spring and stress layout methods on a large number of synthesized graphs with different structures such as lattices, trees and clusters. The evaluation includes two parts: verifying whether Taurus can produce similar results to the original implementations of existing methods, and examining how different methods behave on graphs with different characteristics. The results show that our solver enables all methods to perform as well as or even better than the original implementations, while our proposed balanced stress model makes a good trade-off in distance preservation and maintaining neighborhoods as well as cluster structures. In addition, we show that our Taurus allows users to flexibly customize the graph layout methods for meeting specific requirements.</p><p>The main contributions of this paper can be summarized as follows:</p><p>â€¢ We propose a general framework for graph visualization based on a novel quotient based force representation and an augmented SGD optimizer, which offers a unified view for understanding and comparing existing graph layout methods;</p><p>â€¢ We present a new graph layout method based on our framework and conduct a systematic analysis and extensive evaluation for our framework on different graph datasets through quantitative comparisons; and</p><p>â€¢ We release a library with the proposed general framework that enables rapid implementation and design of graph layout methods for any graph input.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Related works can be categorized into three parts: graph layout methods, graph layout solvers and graph layout packages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Graph Layout</head><p>Various graph layout methods have been proposed to visualize network data as node-link diagrams. Among them, the most common methods often use virtual physical models to represent the relationships between objects. By referring to the taxonomy by Gansner et al. <ref type="bibr" target="#b12">[13]</ref>, we classify such methods into three types: spring-electrical models, stress models and hybrid models. Spring-electrical models <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10]</ref> regard nodes as electrically-charged particles that push nodes away from each other and edges as springs that pull nodes close to each other, often referred to as repulsive and attractive forces. A graph layout result is achieved when attractive and repulsive forces strike a balance. For a complete review of the graph layout methods developed from this model, please refer to Kobourov <ref type="bibr" target="#b27">[28]</ref> and GouvÃªa et al. <ref type="bibr" target="#b15">[16]</ref>. Here, we briefly review some widely used models. Hu et al. <ref type="bibr" target="#b19">[20]</ref> improve the repulsive force designed by Fruchterman and Reingold <ref type="bibr" target="#b9">[10]</ref> and use a repulsive force that decays rapidly, avoiding edge-length distortion at the periphery of a layout. Noack et al. <ref type="bibr" target="#b30">[31]</ref> introduce the LinLog model that employed a constant attractive force and set the repulsive force to the inverse of the distance.</p><p>As a result, this model can generate graph layouts with clearly-separated node clusters. Kermarrec and Moin <ref type="bibr" target="#b25">[26]</ref> further extend the LinLog model for revealing cluster structures at different levels. Inspired by these studies, the attractive and repulsive force of ForceAtlas2 <ref type="bibr" target="#b21">[22]</ref> were designed to be proportional and inversely proportional to the distance between nodes, obtaining graph layouts with a good preservation of local structures and cluster separation.</p><p>Stress models <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b22">23]</ref> also use a spring analogy but assume that there are springs connecting every pair of nodes in the graph. Spring forces are defined to create a layout with distances of nodes as close as possible to the graph-theoretical distances. Many variants of the stress model aim to improve its efficiency through sparse approximations.</p><p>For example, progressive multidimensional scaling <ref type="bibr" target="#b4">[5]</ref> and low-rank stress majorization <ref type="bibr" target="#b26">[27]</ref> have been used to approximate the shortest path distances of all node pairs in a graph. The sparse stress model <ref type="bibr" target="#b31">[32]</ref> speeds up the stress model by aggregating the terms of the objective function. Wang et al. <ref type="bibr" target="#b39">[40]</ref> improved the stress model by imposing constraints on edge vectors and edge lengths, further enhancing the expressiveness of the stress model. Hybrid models combine both models for overcoming their drawbacks. For example, Hu and Koren <ref type="bibr" target="#b20">[21]</ref> resolve the warping effect of springelectrical models by integrating attractive forces into the stress model.</p><p>To reduce the cost for computing graph-theoretical distances, the Maxent-stress model (Maxent) <ref type="bibr" target="#b12">[13]</ref> imposes stress constraints on pairs of neighboring nodes and entropy-based constraints on the remaining node pairs, the latter ones can be regarded as repulsive forces between all node pairs. Noack <ref type="bibr" target="#b30">[31]</ref> shows that energy-based layout methods like LinLog can be formulated as force representations. Similarly, Gansner et al. <ref type="bibr" target="#b12">[13]</ref> represent the repulsive force as an entropy term and incorporate it into the stress-based energy model. However, there is still a lack of an inherent representation for unifying existing layout methods. In this work, we demonstrate that almost all methods from spring-electrical and stress models can be formulated as a combination of our proposed quotient-based forces. Moreover, we show that this unified view not only facilitates the understanding and comparison of different methods but also allows the development of new methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Graph Layout Solvers</head><p>Most graph layout methods need an optimization solver to create desirable drawings. Solving a spring-electrical model has a time complexity of O(n 2 ) at each iteration, where n is the number of nodes in the graph. To improve the computational efficiency of such models, several multilevel methods <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref><ref type="bibr" target="#b38">39]</ref> have been proposed. Among them, the Barnes-Hut (BH) approximation <ref type="bibr" target="#b2">[3]</ref> is the most commonly-used acceleration method. It uses hyper nodes to approximate repulsive forces, resulting in a time complexity of O(n log n). The method has been used by different spring-electric model algorithms, such as <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b21">22]</ref>. Another method is to use random vertex sampling (RVS) <ref type="bibr" target="#b16">[17]</ref> to accelerate the computation of repulsive forces. This method generates layouts similar to <ref type="bibr">Barnes-Hut.</ref> There are also many algorithms to optimize solutions for the stress model. The earliest stress model <ref type="bibr" target="#b22">[23]</ref> employs gradient descent to find the optimal graph layout; however, it is often trapped into a local minimum. Gansner et al. <ref type="bibr" target="#b13">[14]</ref> adapt stress majorization to the stress model, which is rooted in solving multidimensional scaling. Ensuring a monotonic decrease of the stress, the method has advantages over the original implementation. Recently, stochastic gradient descent (SGD), a powerful optimization solver widely used in machine learning, has also been applied to graph drawing <ref type="bibr" target="#b41">[42]</ref>. It converges fast and achieves layouts with a lower stress error. Ahmed et al. <ref type="bibr" target="#b0">[1]</ref> further proposed a SGD-based graph drawing approach (SGD) 2 that can handle multiple readability criteria of graph drawing simultaneously. We propose an augmented SGD solver for finding optimal layouts at minimal computation speed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Graph Layout Packages</head><p>A number of open-source packages facilitate an easy implementation of different graph layout techniques. For example, Graphviz <ref type="bibr" target="#b14">[15]</ref>, Tulip <ref type="bibr" target="#b1">[2]</ref> and OGDF <ref type="bibr" target="#b5">[6]</ref> are C++ libraries that implement customized graph data structures and many graph drawing techniques. Data-Driven Documentation (D3) <ref type="bibr" target="#b3">[4]</ref>, the most popular web-based visualization toolkit, incorporates some graph drawing techniques (e.g., the springelectrical model <ref type="bibr" target="#b9">[10]</ref>). All packages allow users to directly use different graph layout methods without implementing them from scratch. Because of the underlying models, however, these packages often expose different APIs and parameters for different methods, resulting in cumbersome parameter tuning for the user and the need for understanding different approaches. Building upon our unified force representation and universal solver, our graph drawing package is much more generic and easier to use. Different solutions can be compared and the right method for the wanted layout can be selected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PROPOSED FRAMEWORK</head><p>As mentioned above, our general framework aims to unify existing graph layout methods. It consists of a quotient-based force model to describe the relationship among nodes, and a universal optimization solver to achieve optimal graph layouts. In this section, we first show how the proposed framework originates from the observations of prior graph layout approaches. Then, we present our quotient-based force model as well as the guidelines for using it. Finally, we introduce our proposed balanced stress model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Revisiting Existing Graph Layout Methods</head><p>For a graph G(V, E) with V 2 representing the set of node pairs, graph layout methods aim to map the graph nodes V to coordinates in 2D or 3D space and often require a model to represent the relationship between them. Depending on the underlying mechanism of building the model, Hu et al. <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b20">21]</ref> classified layout methods into two types: spring-electrical models and stress models. They propose to use hybrid models, which integrate spring-electrical and stress models. Spring-electrical models often use force modeling, while stress and hybrid models are built on energy modeling to specify the graph layout. Since the force on an object is the negative derivative of the energy with respect to the distance <ref type="bibr" target="#b40">[41]</ref>, we re-write all energy-based layout methods into the form of a force modeling for establishing a unified representation. In the following, we take one representative method of each model type as an example. Force-Directed Placement. As a typical instance of the springelectrical model, FDP <ref type="bibr" target="#b9">[10]</ref> aims to meet the principles that connected nodes should be drawn near each other and all nodes should not be drawn too close to each other. It computes the position of each node x i by exerting the attractive force F a i, j and repulsive forces F r i, j between the node and its neighbours and all other nodes, respectively.</p><formula xml:id="formula_0">e i, j = x j âˆ’ x i ||x i âˆ’ x j || , (<label>1</label></formula><formula xml:id="formula_1">)</formula><formula xml:id="formula_2">F a i, j = ||x i âˆ’ x j || 2 * e i, j , âˆ€{i, j} âˆˆ E, (<label>2</label></formula><formula xml:id="formula_3">)</formula><formula xml:id="formula_4">F r i, j = âˆ’ 1 ||x i âˆ’ x j || * e i, j , âˆ€{i, j} âˆˆ V 2 , (<label>3</label></formula><formula xml:id="formula_5">)</formula><p>where e i, j is a unit vector. By successively moving each node along the resultant force F i ,</p><formula xml:id="formula_6">F i = âˆ‘ {i, j}âˆˆE F a i, j + âˆ‘ {i, j}âˆˆV 2 F r i, j ,</formula><p>the final layout is obtained when the force system reaches an equilibrium. To meet given layout principles, the unit vector e i, j in Eqs. 2 and 3 can also be computed in terms of some constraints <ref type="bibr" target="#b6">[7]</ref> (e.g., node non-overlapping and minimal edge crossing). Stress Model. Unlike the spring-electric model, this model aims to preserve predefined edge lengths in the visualization. It assumes that there is a spring between every pair of nodes with an ideal spring length, which is equal to their graph-theoretical distance being one unit. Hence, it obtains an optimal layout by minimizing the energy function:</p><formula xml:id="formula_7">U = âˆ‘ {i, j}âˆˆV 2 (||x i âˆ’ x j || âˆ’ d i j ) 2 d 2 i j , (<label>4</label></formula><formula xml:id="formula_8">)</formula><p>where d i j denotes the graph-theoretical distance between nodes i and j. The original model is solved by using the gradient descent method with the gradient:</p><formula xml:id="formula_9">âˆ‚U âˆ‚ x i = âˆ’ âˆ‘ {i, j}âˆˆV 2 2(||x i âˆ’ x j || âˆ’ d i j ) d 2 i j * e i, j .</formula><p>Since the negative gradient of the energy here is regarded as the acting force, we write Eq. 4 as forms of attractive and reclusive forces:</p><formula xml:id="formula_10">F a i, jâˆˆV 2 = 2||x i âˆ’ x j || d 2 i j * e i, j , F r i, jâˆˆV 2 = âˆ’ 2 d i j * e i, j .<label>(5)</label></formula><p>For escaping local minima, stress majorization <ref type="bibr" target="#b13">[14]</ref>, a widely used method for MDS solutions, has been adapted for solving this model. To reduce the computation cost, a few extended stress models choose a subset of node pairs to compute the stress energy. For example, the lowrank based stress model, Mars <ref type="bibr" target="#b26">[27]</ref> and sparse stress model (SSM) <ref type="bibr" target="#b31">[32]</ref> both define the force range based on a set of pivot nodes, while SSM further incorporates the edge information.</p><p>Table <ref type="table">1</ref>. Quotient based force functions and their corresponding parameters of different layout methods: Ï‰ is the weight, Î± and Î² are the exponents of the graph-theoretical distance and the Euclidean distance between two nodes, respectively, and Î© is the force range. P is a set of pivot nodes <ref type="bibr" target="#b26">[27]</ref>, k f a is defined as âˆ’(deg(i) + 1)(deg( j) + 1) <ref type="bibr" target="#b21">[22]</ref> with the node degree deg(i). V 2 refers to all node pairs, E to node pairs connected by an edge, S to a k-ring neighborhood graph.</p><formula xml:id="formula_11">Method Attractive Force {Ï‰1, Î±1, Î²1, Î©1} Repulsive Forces {Ï‰2, Î±2, Î²2, Î©2} FDP [10] âˆ‘(i, j)âˆˆE ||xi âˆ’ x j || 2 eij {1, 2, 0, E} âˆ‘ {i, j}âˆˆV 2 âˆ’1 ||x i âˆ’x j || eij {-1,-1,0,V 2 } FA2 [22] âˆ‘(i, j)âˆˆE ||xi âˆ’ x j ||eij {1, 2, 0, E} âˆ‘ {i, j}âˆˆV 2 k f a ||x i âˆ’x j || eij {k f a, âˆ’1, 0,V 2 } LinLog [31] âˆ‘(i, j)âˆˆE 1 * eij {1, 1, 0, E} âˆ‘ {i, j}âˆˆV 2 âˆ’1 ||x i âˆ’x j || eij {âˆ’1, âˆ’1, 0,V 2 } SM [14] âˆ‘ {i, j}âˆˆV 2 2||x i âˆ’x j || d 2 i j eij {2, 1, 2,V 2 } âˆ‘ {i, j}âˆˆV 2 âˆ’2 d i j eij {âˆ’2, 0, 1,V 2 } MARS [27] âˆ‘(i, j)âˆˆPÃ—V 2||x i âˆ’x j || d i j eij {2, 1, 1, P Ã—V } âˆ‘(i, j)âˆˆPÃ—V âˆ’2eij {âˆ’2, 0, 0, P Ã— V } SSM [32] âˆ‘(i, j)âˆˆPÃ—V âˆªE 2||x i âˆ’x j || d 2 i j eij {2, 1, 2, P Ã— V âˆª E} âˆ‘(i, j)âˆˆPÃ—V âˆªE âˆ’2 d i j eij {âˆ’2, 0, 1, P Ã— V âˆª E} Maxent [13]</formula><p>âˆ‘{i, j}âˆˆS</p><formula xml:id="formula_12">2||x i âˆ’x j || d 2 i j eij {2, 1, 2, S} (âˆ‘ {i, j}âˆˆS âˆ’2 d i j + âˆ‘ {i, j}âˆˆV 2 âˆ’Î±sgn(q) ||x i âˆ’x j || q )eij {âˆ’2, 0, 1, S}, {âˆ’Î±sgn(q), âˆ’q,0,V 2 }</formula><p>Maxent-Stress Model. Instead of specifying springs for all node pairs, the maxent-stress model <ref type="bibr" target="#b12">[13]</ref> is a hybrid model that defines a stress model constraint on a subset of node pairs (typically, the set of graph edges E), while imposing an entropy-based constraint to the rest of the node pairs. Hence, the energy function is defined as follows:</p><formula xml:id="formula_13">U = âŽ§ âŽª âŽª âŽª âŽª âŽ¨ âŽª âŽª âŽª âŽª âŽ© âˆ‘ (i, j)âˆˆS (||x i âˆ’ x j || âˆ’ d i j ) 2 d 2 i j + Î± âˆ‘ (i, j) / âˆˆS sgn(q) ||x i âˆ’ x j || q , if q = 0 âˆ‘ (i, j)âˆˆS (||x i âˆ’ x j || âˆ’ d i j ) 2 d 2 i j + Î± âˆ‘ (i, j) / âˆˆS ln ||x i âˆ’ x j ||, if q = 0</formula><p>where the default S is E but can also be the k-neighborhood graph, Î± &gt; 0 and q &gt; âˆ’2. When q is not zero, the gradient of this model is:</p><formula xml:id="formula_14">âˆ‚U âˆ‚ x i = âˆ’ âˆ‘ (i, j)âˆˆS 2(||x i âˆ’ x j || âˆ’ d i j ) d 2 i j âˆ’ Î± âˆ‘ (i, j) / âˆˆS sgn(q) q||x i âˆ’ x j || q+1 * e i, j , otherwise the gradient is: âˆ‚U âˆ‚ x i = âˆ’ âˆ‘ (i, j)âˆˆS 2(||x i âˆ’ x j || âˆ’ d i j ) d 2 i j âˆ’ Î± âˆ‘ (i, j) / âˆˆS 1 ||x i âˆ’ x j || * e i, j .</formula><p>We can see that its attractive force has the same form but is only exerted to a subset of node pairs, while two repulsive forces are exerted in different ranges (as defined by S)</p><formula xml:id="formula_15">F a i, jâˆˆS = 2||x i âˆ’ x j || d 2 i j * e i, j , F r1 (i, j)âˆˆS = âˆ’ 2 d i j * e i, j ,<label>(6)</label></formula><formula xml:id="formula_16">F r2 (i, j) / âˆˆS = âˆ’Î± âˆ‘ (i, j) / âˆˆS sgn(q) q||x i âˆ’ x j || q+1 * e i, j . (<label>7</label></formula><formula xml:id="formula_17">)</formula><p>When q = 0, the second repulsive force is:</p><formula xml:id="formula_18">F r2 (i, j) / âˆˆS = âˆ’Î± âˆ‘ (i, j) / âˆˆS 1 ||x i âˆ’ x j || * e i, j . (<label>8</label></formula><formula xml:id="formula_19">)</formula><p>Besides these three methods, Table <ref type="table">1</ref> lists the attractive and repulsive forces of a few other methods such as FA2 <ref type="bibr" target="#b21">[22]</ref>, Linlog <ref type="bibr" target="#b30">[31]</ref>, and MARS <ref type="bibr" target="#b26">[27]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Quotient based Force Function</head><p>After systematically comparing and analyzing various forces used in different graph layout methods (see Table <ref type="table">1</ref>), in the following we identify common components that appear in most methods, and further propose a quotient-based representation to unify them. Given l forces, the resultant force F i exerted on a node i is:</p><formula xml:id="formula_20">F i,k = âˆ‘ (i, j)âˆˆÎ©k Ï‰ k * ||x i âˆ’ x j || Î±k d Î²k i j * e k,i j , F i = l âˆ‘ k F i,k<label>(9)</label></formula><p>where Î© k is the force range specifying the nodes that exert forces towards node i, Ï‰ k is a weight with a sign deciding the force type (attractive force vs. repulsive force), Î± k is the exponent of the graphtheoretical distance, Î² k of the Euclidean distance between nodes j and i, which decide the force magnitude. To illustrate how this representation unifies existing graph layout methods, we formulate some popular methods in this representation, see Table <ref type="table">1</ref>. Taking the maxent-stress model as an example, its attractive and first repulsive force have the same force range {i, j} âˆˆ S, and their corresponding {Ï‰, Î±, Î² } are {2, 1, 2} and {âˆ’2, 0, 1}, respectively. The range of the other repulsive force Î© is {i, j} / âˆˆ S, the parameters {Ï‰, Î±, Î² } are {âˆ’q sgn(q), âˆ’q, 0}. Note that low-rank stress majorization (MARS) <ref type="bibr" target="#b4">[5]</ref> and the sparse stress model (SSM) <ref type="bibr" target="#b31">[32]</ref> exert forces for ranges defined by the user specified pivot nodes P. Parameter Effect. A closer look at the examples in Table <ref type="table">1</ref> tells us that there should be at least two forces (l â‰¥ 2) with different signs for weights Ï‰ k to ensure convergence. Common force ranges are E, V 2 or the ones defined by the user-specified node sets P. In contrast, there are many choices of {Î± k , Î² k }, each of them might create different behaviors. In the following, we show how existing methods set these parameters.</p><p>To investigate the effect of {Î± k , Î² k }, we depict the force magnitude between two nodes i and j as a function of their pairwise Euclidean distance ||x i âˆ’ x j || and the graph-theoretical distance d i j . Fig. <ref type="figure" target="#fig_0">1(a)</ref> shows the force magnitudes under different combinations of a few commonly used Î± and Î² values {âˆ’1, 0, 1}. From the plots, we can see that there are three kinds of the relationship:</p><p>1. If Î±Î² is zero, the force magnitude is purely determined by ||x i âˆ’ x j || or d i j ;</p><p>2. If Î±Î² is smaller than zero , the factors d i j and ||x i âˆ’ x j || have the same positive or negative effect on the force magnitude; and</p><p>3. If Î±Î² is larger than zero, the factors d i j and ||x i âˆ’ x j || have the opposite effect on the force magnitude.</p><p>Case 1 corresponds to the forces defined in FDP (see Eqs. 2 and 3) and the repulsive forces used in the stress model (see Eq. 5). In contrast, there is only one example (see the attractive force in Eq. 5) for Case 3 in Table <ref type="table">1</ref> and no example for Case 2. In the following, we provide the guidelines for selecting proper Î± and Î² .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Guidelines for the Selection of Exponents</head><p>To faithfully maintain the relationship between nodes, we generalize a core principle of the FDP method about connected nodes to all node pairs. In FDP connected nodes should always be closer to each other than to other nodes.</p><p>â€¢ Nodes with small graph-theoretical distances should be drawn closer to each other than nodes with large distances.</p><p>For simplicity, we divide all k forces within the graph into attractive and repulsive forces. To meet the above principle, two nodes with a larger graph-theoretical distance should be exerted a larger repulsive force (Î² &lt; 0) and a smaller attractive force (Î² &gt; 0). To prevent the layout from diverging to infinity or collapsing into a point, for two nodes with fixed graph-theoretical distances, the repulsive force should decrease as the Euclidian distance between the two nodes increases (Î± &lt; 0), and the attractive force should decrease as the Euclidian distance between two nodes decreases (Î± &gt; 0). For yielding a clustering (dispersing) effect, we can also use a constant repulsive (attractive) force with a large attractive (repulsive) force by setting Î± = 0 (Î² = 0). Therefore, we identify the following two guidelines for choosing Î± and Î² :</p><p>â€¢ G1: For the attractive force, the exponent parameters are suggested to satisfy: Î± â‰¥ 0, Î² â‰¥ 0; and</p><p>â€¢ G2: For the repulsive force, the exponent parameters are suggested to satisfy:</p><formula xml:id="formula_21">Î± â‰¤ 0, Î² â‰¤ 0.</formula><p>The examples in Fig. <ref type="figure" target="#fig_0">1</ref> enclosed by the red box correspond to parameters meeting G1 and blue box to parameters meeting G2.</p><p>Looking again at Table <ref type="table">1</ref>, we see that the attractive forces of all methods satisfy G1, whereas the repulsive force of some existing graph layout methods violate G2. For example, the repulsive forces of SM <ref type="bibr" target="#b13">[14]</ref>, MARS <ref type="bibr" target="#b26">[27]</ref> and SSM <ref type="bibr" target="#b31">[32]</ref> is âˆ’2 dij are not in the blue box, but in the red box of Fig. <ref type="figure" target="#fig_0">1</ref>. Since their magnitude decreases with increasing graph-theoretical distance, the repulsive force might not be able to repel node pairs with large graph-theoretical distances far from each other, resulting in false neighborhoods. Reflections. To explore how different choices of Î± and Î² influence the final layout, we compute the resultant force for the two nodes with varying d i j and Euclidean distance ||x i âˆ’ x j ||. Figs. <ref type="figure" target="#fig_0">1 (b,c,d</ref>) show the results for three methods: FDP, stress model and maxent-stress model, where a positive value indicates that the attractive force is larger than the repulsive force and vice versa for a negative value.</p><p>In Fig. <ref type="figure" target="#fig_0">1</ref>(b), we can see that FDP exerts large repulsive forces on nodes with small Euclidean distance, but only applies attractive forces to connected nodes. In other words, it treats all nodes with d i j being larger than 1 equally, resulting in a poor overall distance preservation.</p><p>Fig. <ref type="figure" target="#fig_0">1(c</ref>) allows two observations about SM: i) the resultant force is close to zero in most places (see the yellow region), except the ones for nodes with small graph-theoretical distances; and ii) the force exerted on nearby nodes with large graph-theoretical distances is close to zero (see top-left corner). In other words, the original stress model might not be able to efficiently preserve local neighborhood structures and large graph-theoretical distances.</p><p>For the maxent-stress model, we set S and q to E and zero and show the resultant forces for two nodes in Fig. <ref type="figure" target="#fig_0">1(d)</ref>. When d i j is larger than one, its resultant force is equal to the one of FDP, as shown in Fig. <ref type="figure" target="#fig_0">1(b)</ref>, otherwise it is the same as the one of the stress model shown in Fig. <ref type="figure" target="#fig_0">1(c</ref>). Hence, we conclude that this model can be regarded as the combination of the spring-electrical and the stress model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">A Balanced Stress Model (BSM)</head><p>The above considerations and the possibility to formulate different methods with a unified formula help us to formulate a balanced stress model that would have an "ideal" behavior. It is surprisingly simple and in contrast to many methods we would consider to be "ad hoc" in their selection of weights and exponents its behavior is directly derived from the nature of the underlying problem.</p><p>As mentioned in Section 3.3, it is desirable to exert large repulsive force to the node pairs with large graph-theoretical distances d i j , a fact that the stress model does not satisfy. To address this issue, we propose the following model:</p><formula xml:id="formula_22">F i = âˆ‘ i, jâˆˆV 2 ( ||x i âˆ’ x j || d i j âˆ’ d i j ||x i âˆ’ x j ||</formula><p>) * e i j , <ref type="bibr" target="#b9">(10)</ref> where the second term can be taken as a weighted repulsive force from the graph-theoretical distance as used in FDP (see Eq. 3), its reciprocal corresponds to the term of the attractive force. Doing so, nodes with large graph-theoretical distances are repelled far from each other. On the other hand, a model after Eq. ( <ref type="formula">10</ref>) is able to effectively preserve graph-theoretical distances, since the resultant force is zero when the graph-theoretical distance between two nodes is equal to their Euclidean distance. To our understanding, this is a meaningful setup that builds on the intuition that a layout should reflect graph-theoretical distances as good as possible in its projected distances.</p><p>As shown in Fig. <ref type="figure" target="#fig_1">2</ref> (a), the resultant forces exerted on two nodes forms a skew-symmetric matrix and all forces are zero at the diagonal of the matrix. For us, an ideal behavior. Figs. <ref type="figure" target="#fig_1">2(b,c</ref>) compare SM with our balanced model BSM using cluster_2000. BSM clearly reveals the cluster structures, while SM shows much less separation. To further investigate the differences between the methods, we calculate the stress error for different graphtheoretical distances and the neighborhood preservation degrees of different ring sizes. As shown in Figs. <ref type="figure" target="#fig_1">2(d,e</ref>), BSM performs slightly worse than SM for smaller graph-theoretical distances and similar or even better for large distances, whereas it outperforms SM in neighborhood preservation no matter what the ring size is. These results are consistent with our reflections about SM in Section 3.3 and hence we speculate that our BSM performs better in balancing distance preservation and neighborhood preservation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">AUGMENTED SGD SOLVER</head><p>Before we evaluate the balanced stress model in Section 5, we outline our second contribution that allows us to compare all the mentioned models. Recently, Zheng et al. <ref type="bibr" target="#b41">[42]</ref> adapt the stochastic gradient descent technique, a powerful optimization solver widely used for training deep neural networks, to solve the stress model. They show that SGD can reach lower stress errors faster than stress majorization <ref type="bibr" target="#b13">[14]</ref>, while not requiring a good initialization. However, the method is originally designed for minimizing energy functions and thus has not been used for solving force-based layout methods.</p><p>Since energy is the negative integral of a force, we can formulate each of the quotient-based force models (see Eq. 9) as the following energy:</p><formula xml:id="formula_23">U k = âŽ§ âŽª âŽª âŽª âŽª âŽ¨ âŽª âŽª âŽª âŽª âŽ© âˆ‘ (i, j)âˆˆÎ©k Ï‰ k Î± k + 1 * ||x i âˆ’ x j || Î±k+1 d Î²k i j Î± k = âˆ’1 âˆ‘ (i, j)âˆˆÎ©k Ï‰ k ln ||x i âˆ’ x j || d Î²k i j otherwise. (<label>11</label></formula><formula xml:id="formula_24">)</formula><p>To minimize this energy, SGD repeatedly randomly picks a pair of nodes x i and x j for moving it along the force direction at a time:</p><formula xml:id="formula_25">r = Ï‰ k 2 * ||x i âˆ’ x j || Î±k d Î²k i j * e k,i j (<label>12</label></formula><formula xml:id="formula_26">)</formula><formula xml:id="formula_27">x i = x i âˆ’ Î· s r, x j = x j + Î· s r,<label>(13)</label></formula><p>where Î· s is the step size. With a carefully chosen step size, this method quickly converges to a reasonable layout. Unlike Zheng et al. <ref type="bibr" target="#b41">[42]</ref>, our SGD solver updates each node with two steps, since the gradient of the stress model in Eq. 4 is separated into attractive and repulsive forces. This facilitates us to apply SGD to solve force-based methods. However, directly applying SGD to FDP-based methods might be too end for 11: end for 12: return X expensive because of its O(n 2 ) time complexity. To alleviate this issue, we suggest to combine it with the Barnes-Hut (BH) <ref type="bibr" target="#b2">[3]</ref> method, which approximates the repulsive force between nodes by using a quadtree structure with a time complexity of O(n log n). Note that this approximation only holds for forces with parameters Ï‰ k &lt; 0 and Î² k = 0. With this augmented SGD(ASGD) solver, we first compute the repulsive force using the BH solver to move nodes and then use the SGD solver to update nodes at each iteration, as outlined in Algorithm 1.</p><p>Fig. <ref type="figure" target="#fig_3">3</ref>(a) shows the convergence curves of different solvers for computing the FDP layout of the btree9 graph. Our solver performs similarly to the SGD solver, while both converge to smaller energy values than the BH solver. On the other hand, our solver is faster at each iteration and its overall time is lower than the SGD solver (see <ref type="bibr">Section 5)</ref>. Moreover, it is surprising that our solver even produces better layouts than the SGD solver. As shown in Figs. <ref type="figure" target="#fig_3">3(b,c,d</ref>), only our solver is able to maintain the tree structure of the data. We speculate that this is due to the separation of attractive and repulsive forces for node movement. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EVALUATION</head><p>We implemented our framework in C++ and warped it into an opensource library<ref type="foot" target="#foot_0">1</ref> . To customize a graph layout method, users only need to configure and assemble different forces together in terms of the design guidelines from Section 3.3. Based on this library, we evaluate Taurus from four perspectives. First, we validate our augmented SGD solver by comparing it with BH and SGD on a set of graphs. Second, we check to what extent the implementations of existing graph layout methods under Taurus generate similar results as the original ones. Third, we compare our proposed balanced stress model with the existing graph layout methods. Last, we present a usage scenario to illustrate the flexibility of Taurus for supporting the customization of graph layouts. All the experiments were done on a Windows desktop computer with an Intel Core i7-9700K processor with 32GB memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experimental Design</head><p>Methods. To evaluate the capability of Taurus in expressing existing graph layout techniques, we selected five well-known methods as baselines: force-directed placement (FDP) <ref type="bibr" target="#b9">[10]</ref>, LinLog <ref type="bibr" target="#b30">[31]</ref>, stress model (SM) <ref type="bibr" target="#b13">[14]</ref>, Maxent <ref type="bibr" target="#b12">[13]</ref>, and FM 3 <ref type="bibr" target="#b17">[18]</ref>. They are chosen by considering two factors: First, they cover three major categories of existing graph layout methods (spring-electrical models: FDP, LinLog and FM 3 ; stress models: SM; hybrid models: Maxent), as introduced in Section 2.1. Second, they have widely-used implementations. Four of these methods have C++ implementations: FDP, FM 3 and SM within the OGDF <ref type="bibr" target="#b5">[6]</ref> package, and Maxent within the graphviz <ref type="bibr" target="#b8">[9]</ref> package. For LinLog, we use the author's Java implementation <ref type="bibr" target="#b30">[31]</ref>. We reimplement these graph layout methods under Taurus, and compared our results with the existing implementations. Datasets. To evaluate our general framework, we generated three types of commonly-used graph datasets (i.e., grids, binary trees, and clustered graphs) and 15 real graphs of different applications.</p><p>â€¢ Grids are graphs with a regular tiling. The ideal layout results will be a uniform grid consisting of squares of a uniform size. Grids can be used to assess whether a graph layout method is able to preserve the regular graph structures. We generate both 2D and 3D grids of different sizes.</p><p>â€¢ Binary trees have been widely used to evaluate graph layout methods <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b26">27]</ref>. Binary trees are often symmetric. Using them, we can evaluate whether a method is able to preserve the symmetric structures of a graph.</p><p>â€¢ Clustered graphs refer to networks with clear community structures, which can be used to evaluate whether a graph layout method preserves such structures in the layout. We use the Stochastic Block model <ref type="bibr" target="#b23">[24]</ref> implemented in the graph-tool <ref type="bibr" target="#b32">[33]</ref> to generate such graphs. The number of communities in the generated graphs ranges from five to fifteen.</p><p>â€¢ Real graphs are networks publicly available on the Internet used by prior studies <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b42">43]</ref>. They come from different fields such as biology, social sciences and environmental structures, and have different sizes.</p><p>We generated fifteen example graphs for each of the three types of synthetic graphs and collected fifteen real graphs. To ensure that our solver can efficiently find optimal solutions for our layout methods, we did not test large graphs but used exemplars with 100 to 5000 nodes and 128 to 19016 edges. Parameters. There are three parameters of the augmented SGD solver, which influence the graph layout quality and speed, i.e., the maximum number of iterations, the step size Î·, and the decay rate of the Barnes-Hut algorithm Î» . For Î·, we follow the suggestion of Zhang et al. <ref type="bibr" target="#b41">[42]</ref> that gradually decreases from 1 to 0.01, while setting the maximum number of iterations to 200. For SM and BSM, we found that usually 30 iterations are enough for convergence. To remove the influence of the initialization, we use the same randomized initial layout for all methods on each graph.</p><p>Measures. Seven measures are used to evaluate the similarity of different implementations for the same graph layout method and to compare their performances. These measures were chosen to evaluate the capability for different graph structure preservation or graph readability.</p><p>â€¢ Normalized stress error (SE) <ref type="bibr" target="#b12">[13]</ref> is used to measure the overall preservation of the graph-theoretical distances in the graph layouts. A small value indicates that graph-theoretical distances between nodes are well maintained.</p><p>â€¢ Neighborhood preservation (NP) checks whether the neighborhood around each node in the graph structure is also the neighborhood in the layout. We use the neig hborhood preservation measure introduced in <ref type="bibr" target="#b36">[37]</ref>, and define the neighborhood nodes of a graph node as the nodes with a maximum of two edges from it. A larger value of NP is preferred.</p><p>â€¢ Crosslessness (CL) quantifies the number of non-crossing edge pairs in a graph layout <ref type="bibr" target="#b33">[34]</ref>. A larger score indicates fewer edge crossings.</p><p>â€¢ Minimum Angle (MA) measures the average deviation of the minimum angle from the ideal angle for each node in a layout. <ref type="bibr" target="#b33">[34]</ref> A small value is preferred.</p><p>â€¢ Runtime measures the average time for computing a layout. We assess the average runtime of each graph layout method on one graph by calculating the average over 5 runs.</p><p>â€¢ Cluster Extraction (CE) <ref type="bibr" target="#b37">[38]</ref> delineates the average distance of nodes within the same cluster. A small value of this measure indicates compact clusters, which is helpful for identifying graph communities and is thus preferred.</p><p>â€¢ Cluster Distance (CD) <ref type="bibr" target="#b37">[38]</ref> measures the separation of different clusters in the layout. We calculate the minimum distance between nodes of two different clusters here. A large value indicates different clusters are well separated and is thus preferred.</p><p>Since CE and CD both require the cluster information, we only apply them to the clustered graphs.</p><p>To consistently compare different methods, we evaluate the relative difference of the measure M between the target implementation M t and the reference implementation M r : where a value around zero indicates a specific implementation is similar to the reference implementation. Among all measures, positive differences of NP, CL and CD indicate a better performance of the target implementation, while negative differences of SE, MA, CE and runtime mean that the reference implementation performs better. To consistently show larger values as being better, we take the final value for SE, MA, CE and runtime as 1 âˆ’ Î´ M.</p><formula xml:id="formula_28">Î´ M = M t âˆ’ M r M r ,<label>(14)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Comparison between Different Solvers</head><p>Since our ASGD is equivalent to SGD for stress model based methods, we only compare its efficiency with SGD and BH for spring based methods. Here, we choose the classic FDP method as an example method for comparison in terms of runtime and layout quality. To ensure a fair comparison, we use the same convergence condition for three solvers, while running each solver for a graph five times and calculating the average measures. For all measures, we apply Eq. 14 to normalize the results by taking the implementation based on our ASGD as M t and the two others as the references. Due to space limits, we only show the summarized runtime and four measures in Fig. <ref type="figure" target="#fig_4">4</ref>, the complete scores of all measures can be found in the supplemental material, as well as runtimes and visualizations for additional ten large graphs. The boxplots in Fig. <ref type="figure" target="#fig_4">4</ref>(a) provide a statistical summary of the runtime of three methods on all tested graphs, where our ASGD is faster than SGD by 40 percent and slightly slower than BH. To learn how fast these solvers are, we plot the relationship between runtime and the number of graph nodes in Fig. <ref type="figure" target="#fig_4">4(b)</ref>. We can see that all solvers perform similarly for graphs with a number of nodes being smaller than 1500, while ASGD and BH have significant advantages over SGD for large graphs. With increasing number of graph nodes, the runtime of SGD increases quadratically, while the runtime of ASGD and BH increases logarithmically. For the largest graph with 5000 nodes, ASGD and BH are six times faster than SGD (1.8s vs. 10.5s).</p><p>Figs. <ref type="figure" target="#fig_4">4(c-f</ref>) provide a summary of four layout quality measures in terms of relative differences. For SE and NP, ASGD demonstrates significant benefits over SGD and BH, where the median of the relative increase is at least 8%, while it is similar for the other measures. In all, ASGD is significantly faster than SGD and similar to BH, while generating the best layout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Comparison between Different Implementations</head><p>To demonstrate the effectiveness of our quotient-based representation and ASGD solver, we compare the implementation of each layout  method under our framework as M t with its original or existing implementation as M r and compute Î´ M in terms of the above measures. Quantitative Results. The boxplots in Fig. <ref type="figure" target="#fig_5">5</ref> summarize the relative differences of seven measures computed from all tested datasets. For SE, the median values of the relative differences on all methods are either around zero (i.e., SM, Maxent, LinLog and FM 3 with a difference less than 3%), or larger than zero (FDP with a difference around 15%) as shown in Fig. <ref type="figure" target="#fig_5">5(a)</ref>. Similarly, the median value of the relative differences of NP on SM is around zero, the ones of Maxent, LinLog and FM 3 are larger than zero.</p><p>These results indicate that our implementation enables FDP to better preserve stress and neighborhood, while showing similar performances for the other methods. We have similar observations for the two readability measures in Figs. <ref type="figure" target="#fig_5">5(c,d</ref>). Our implementations result in less edge crossing (CL) and smaller minimum angle (MA) for Maxent, FDP LinLog, and FM 3 , while maintaining the quality of SM.</p><p>Furthermore, it largely reduces the runtime of SM, Maxent, FDP and LinLog by around 75%, 45%, 75% and 90%, respectively (see Fig. <ref type="figure" target="#fig_5">5(e)</ref>). For FM 3 , it leads to a slightly longer runtime (less than 5%) for most graphs. We speculate that the reason or this is the fact that our ASGD solver is not inherently designed for solving multi-level graph layout whereas the BH method is. Note that the SM implementation in the OGDF library is solved by stress majorization rather than SGD, FDP in the OGDF library is the exact implementation, while the other methods in the existing implementations are based on BH methods.</p><p>Figs. 5(f,g) show the results of the measures CD and CE for clustered graphs. We can see that the relative differences of all methods are positive or close to zero for CE and CD, indicating that our implementation has a higher capability in revealing cluster structures.  Qualitative Results. The above analysis shows that our implementation produces similar results as the baseline for stress model and LinLog, while largely improving the layout results for FDP and Maxent. Fig. <ref type="figure" target="#fig_6">6</ref> compares the results produced by different implementations of FDP and Maxent on four typical graphs.</p><p>Our FDP implementation is able to effectively maintain the grid structure for the graph shown in Fig. <ref type="figure" target="#fig_6">6</ref>(a), whereas the grid is highly deformed with folds by the baseline implementation. We have similar observations for the tree structure shown in Fig. <ref type="figure" target="#fig_6">6</ref>(b), our result on the right has fewer edge crossings and reveals a clearer hierarchy of clusters than the original one on the left. These results are consistent with the ones shown in Fig. <ref type="figure" target="#fig_3">3</ref>, demonstrating the efficiency of our solver.</p><p>Figs. <ref type="figure" target="#fig_6">6(c,d</ref>) show results generated by two implementations of Maxent. Our result is significantly better in terms of cluster preservation and reveals all different communities (Fig. <ref type="figure" target="#fig_6">6(c</ref>)), while the original mixes clusters. This also holds for the collaboration network (Fig. <ref type="figure" target="#fig_6">6(d)</ref>). Compared to the baseline, our result distributes all local clusters in 2D plane evenly with fewer edge crossing, while maintaining the overall structure. Yet, the baseline implementation better reveals the multi-ring structures, but has strong node overlaps and edge crossings.</p><p>Overall, the results of all methods implemented in Taurus are similar to or even better than the original implementations, with a largely reduced runtime. In particular, our versions of FDP and Maxent largely improve layout quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Comparison between Different Methods</head><p>Here, we compare our proposed layout method BSM with five existing methods (SM, FDP, Maxent, LinLog and FM 3 ). To show the effectiveness of this model, we implemented all these methods by Taurus with the same solver and use the same initial layout for each tested graph. Quantitative Results. Fig. <ref type="figure" target="#fig_7">7</ref> summarizes the values of six measures overall tested graphs using boxplots. For the complete results presented in table, please refer to the supplemental material In terms of the stress error, BSM is slightly worse than SM but outperforms the other methods, while LinLog is the worst. In contrast, BSM is better than SM and Maxent in neighborhood preservation, close to FDP and FM 3 , worse than LinLog. Regarding readability measures, BSM performs similarly to the other methods but is worse than LinLog for CL. Similarly, BSM is worse than LinLog and similar as FDP and FM 3 with regard to CE and CD on clustered graphs. This is reasonable, since LinLog is designed for revealing clusters, while BSM is for distance preservation.</p><p>While LinLog performs the worst in terms of the stress error, it is the best for preserving neighborhoods. This is interesting, since we often assume that LinLog is good in revealing clusters and FDP and FM 3 performs well in neighborhood preservation. After examining the statistics of each type of graph in Fig. <ref type="figure" target="#fig_8">8</ref>, we found that FM 3 works well for all graphs and LinLog performs poorly on grids but works well for other graphs, whereas SM and our BSM perform best for such graphs. For tree structured graphs, BSM performs better than SM but worse than the others, because maintaining the overall distance is not helpful here. In contrast, BSM performs similar or even better than FDP and FM 3 on clustered and real graphs, although it is designed for preserving graph-theoretical distances. For each of the other measures, the distribution of the results does not show any significant dependency on the data type.</p><p>In summary, BSM achieves a balanced capability in preserving overall distances (SE), neighborhoods (NP) and clusters (CE and CD), especially for clustered and real graphs. In addition, it maintains similar graph readability values as the other methods and therefore matches our design goal. Qualitative Results. Fig. <ref type="figure" target="#fig_9">9</ref> shows the visual results of four typical example graphs. The dataset in the first row of Fig. <ref type="figure" target="#fig_9">9</ref> is a graph with a 3D-like grid, where only BSM and SM preserve the grid structure, while the other methods heavily deform it.</p><p>BSM is able to clearly visualize the major branches and the symmetry of tree graph shown in the second row of Fig. <ref type="figure" target="#fig_9">9</ref>. Other methods (except SM) do not preserve the symmetry but show more minor branches. For this graph, Maxent, FDP and LinLog have a higher score in neighborhood preservation, whereas they do not show major branches. Hence, we speculate that BSM might perform even better in visualizing large tree structures than these methods. Although LinLog allows to inherently reveal cluster structures, its results are too tight to explore any details. FDP and Maxent alleviate this issue, but might create overlaps between clusters. In contrast, BSM better balances intra-and inter-cluster separation well, where the maroon and yellow green clusters are at the center and are surrounded by the other clusters. This makes sense, since these two clusters have the most inter-cluster connections with the others in the ground truth data. In contrast, FM 3 does not reflect this ground truth. For the real graphs, the results of BSM are similar to or even slightly better than SM in terms of preserving radial graph structures and local clusters, while both of them perform better than the others.</p><p>Overall, the visual results by BSM align well with the observations in Section 5.4: BSM is able to visualize the structures of different types of graphs well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Usage Scenario</head><p>Lastly, we present a usage scenario to showcase how Taurus can facilitate graph visualizations in a unified manner. Suppose Bob, a data scientist who often needs to explore networks in his daily work and has a basic understanding of different graph layout techniques. He wants to visualize a network that he wants to explore the potential clusters. With Taurus, he can easily try different graph layout methods within the same framework.</p><p>First, he uses Taurus to quickly implement BSM by simply configuring the four parameters {Î©, Ï‰, Î±, Î² } for attractive forces with  {V 2 , 1, 1, 1} and for repulsive forces with {V 2 , âˆ’1, âˆ’1, âˆ’1}. The layout result (Fig. <ref type="figure" target="#fig_10">10 (a)</ref>) shows that the network seems to have a clustering structure. To display clusters more clearly, Bob updates the parameters to {E, 1, 0, 0} and {V 2 , âˆ’1, âˆ’1, 0} for attractive and repulsive forces, i.e. applying the LinLog method. He obtains a more compact clustering result as shown in Fig. <ref type="figure" target="#fig_10">10 (b</ref>). However, the clusters in this graph layout are too tight to examine the relationship between nodes within the same cluster. To achieve the optimal graph layout, Bob further adjusts Î± and Î² of the attractive force to 2.5 and -1.5, and finds that the result in Fig. <ref type="figure" target="#fig_10">10 (c</ref>) shows the detail of each cluster more clearly, making it easier for Bob to know which clusters contain more nodes. With Taurus, Bob can easily customize graph layout methods to explore different graph structures, which facilitates him to perform a deeper analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION AND FUTURE WORK</head><p>In this paper, we propose a general framework, Taurus, to unify popular graph layout methods. It consists of two major components: a unified quotient-based force representation to model repulsive and attractive forces of different graph layout techniques, and a universal augmented stochastic gradient descent (ASGD) solver to find the optimal graph layout results. We systematically analyze our general framework and provide guidelines for designing effective graph layout methods. We also release a graph layout library based on Taurus that facilitates convenient implementation of graph visualizations in a unified manner.</p><p>In the future, we would like to extend Taurus along the following directions. First, apart from the current open-source package in C++, we plan to extend Taurus to other programming languages like Python and JavaScript. Second, Taurus provides a clear design space for graph layout techniques, but it might require users to try multiple different parameters for a specific graph analysis task (see Section 5.5). Therefore, we like to explore automated parameter tuning methods for automatically fining proper parameters to generate desired visualizations. Third, it will be interesting to further extend our framework to unify graph layout techniques with special model designs (e.g., tsNET <ref type="bibr" target="#b28">[29]</ref> and DRGragh <ref type="bibr" target="#b42">[43]</ref>). Last, we would like to conduct a large user study to compare the different layout methods in terms of layout principles and then use the findings to further improve our framework.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. (a) Influence of the parameters {Î±, Î² } on the force. Each plot shows the force magnitude as a function of the graph-theoretical distance between two nodes in the graph and the pairwise Euclidian distance in the layout for the given combination of Î± and Î² . The yellow color represents a force magnitude close to zero and the orange color a large force magnitude. The red and blue boxes cover the parameter settings satisfying the criteria G1 and G2, respectively. (b) shows the resultant forces for FDP, (c) for the stress model and (d) for the maxent stress model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. (a) Resultant force for two nodes with varying graph-theoretical and Euclidian distances generated by our balanced SM. (b) Layouts generated by SM and balanced SM (c) on the graph cluster_2000 . Our method clearly separates different clusters. (d,e) The boxplots summarize the value ranges (same for all boxplots in this paper) of the stress error (d) in terms of different graph distances and neighborhood preservation (e) degrees for different ring sizes.</figDesc><graphic url="image-15.png" coords="5,64.04,443.40,132.29,65.27" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Algorithm 1 4 :k = 1 to l do 5 :</head><label>145</label><figDesc>Pseudocode for our augmented SGD solver 1: Input: graph G = (V, E), 2: X = RandomMatrix(|V |, 2) 3: for i = 1 to iters do for if Ï‰ k &lt; 0 and Î² k = 0 then 6: solve_BH_forces(X, Î± k , Î² k , Î© k ) , Î± k , Î² k , Î© k )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Comparing three solvers (BH, SGD, and our augmented SGD) for the FDP method to layout the btree9 graph. (a) The plots of U(X) versus the number of iterations showing the convergence of the three solvers. Our augmented SGD solver performs similarly to SGD. (b,c,d) The layout results generated by three solvers, the one produced by our augmented SGD solver preserves the tree structure well.</figDesc><graphic url="image-20.png" coords="6,64.15,136.37,99.31,63.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. (a) The boxplots of the runtime for different solvers, in which black lines represent the median value. (b) the plots of runtime versus number of nodes for each dataset. (c,d,e,f) The boxplots of four measures SE(c), NP(d), CL(e) and MA(f) for the layouts generated by using ASGD vs. BH and SGD. A large value is better in all boxplots.</figDesc><graphic url="image-27.png" coords="7,64.54,196.64,132.29,62.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Relative differences of the measures SE(a), NP(b), CL(c), MA(d) and runtime(e) for the layouts of all tested graphs and CD(f) and CE(g) for the clustered graphs by our implementation vs. existing ones. A larger value for all measures is better.</figDesc><graphic url="image-38.png" coords="7,314.00,265.32,66.34,60.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Comparison of layout results on the same data generated by the same methods using the existing implementation (left) and our implementation (right). (a,b) Results generated by FDP; (c,d) results generated by Maxent.</figDesc><graphic url="image-42.png" coords="7,314.00,325.92,66.34,60.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Six measures over all datasets for six layout methods. A large value is better for all measures.</figDesc><graphic url="image-56.png" coords="8,65.29,172.31,99.30,53.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Bxplots summarizing the NP measure of each type of graphs for six different layout methods. A larger value is better.</figDesc><graphic url="image-59.png" coords="8,65.29,225.40,99.30,53.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. BSM results of four graphs (top down: grid_1000, btree_513, cluster_4463, and US_powergrid) with different structures in comparison to baseline methods (SM, FDP, LinLog, Maxent and FM 3 ) implemented by Taurus.</figDesc><graphic url="image-64.png" coords="9,65.25,317.08,284.35,61.51" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Utilizing Taurus to obtain good graph layout results. By entering the corresponding parameters, the user quickly gets layout results for (a) BSM, (b) LinLog and (c) a customized layout method.</figDesc><graphic url="image-65.png" coords="9,65.36,410.31,231.27,97.56" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">https://github.com/Ideas-Laboratory/Taurus</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was supported by the grants of the National Key Research and Development Program of China (2018AAA0101100), and NSFC (62132017, 62141217). Oliver Deussen was funded by the German Research Foundation (DFG) -Project-ID 2,51654672 -TRR 161.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Multicriteria scalable graph drawing via stochastic gradient descent, (SGD) 2</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>De Luca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Devkota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kobourov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Li</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2022.3155564</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="2388" to="2399" />
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Auber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bourqui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Delest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lambert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mathiaut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>MelanÃ§on</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Pinaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Renoust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Vallet</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4614-7163-9_315-1</idno>
		<title level="m">TULIP 5. In Encyclopedia of Social Network Analysis and Mining</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="1" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A hierarchical o (n log n) force-calculation algorithm</title>
		<author>
			<persName><forename type="first">J</forename><surname>Barnes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hut</surname></persName>
		</author>
		<idno type="DOI">10.1038/324446a0</idno>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">324</biblScope>
			<biblScope unit="issue">6096</biblScope>
			<biblScope unit="page" from="446" to="449" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">D 3 data-driven documents</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Ogievetsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<idno type="DOI">10.1109/tvcg.2011.185</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2301" to="2309" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Eigensolver methods for progressive multidimensional scaling of large data</title>
		<author>
			<persName><forename type="first">U</forename><surname>Brandes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pich</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-70904-6_6</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="42" to="53" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">The open graph drawing framework OGDF. Handbook of Graph Drawing and Visualization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Chimani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gutwenger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>JÃ¼nger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">W</forename><surname>Klau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mutzel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011. 2013</date>
			<biblScope unit="page" from="543" to="569" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Scalable, versatile and simple constrained graph layout</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2009.01449.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="991" to="998" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A heuristic for graph drawing</title>
		<author>
			<persName><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Congressus Numerantium</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="149" to="160" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Graphviz-open source graph drawing tools</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ellson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Woodhull</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-45848-4_57</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001-02">Feb. 2001</date>
			<biblScope unit="page" from="483" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Graph drawing by force-directed placement</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">M</forename><surname>Fruchterman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Reingold</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-658-21742-6_49</idno>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1129" to="1164" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A multi-dimensional approach to force-directed layouts of large graphs</title>
		<author>
			<persName><forename type="first">P</forename><surname>Gajer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.comgeo.2004.03.014</idno>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="18" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Grip: Graph drawing with intelligent placement</title>
		<author>
			<persName><forename type="first">P</forename><surname>Gajer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<idno type="DOI">10.1142/9789812796608_0011</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000-05">May 2000</date>
			<biblScope unit="page" from="222" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A maxent-stress model for graph layout</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>North</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2012.299</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="927" to="940" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Graph drawing by stress majorization</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>North</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-31843-9-25</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="239" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">An open graph visualization system and its applications to software engineering. Software: Practice and Experience</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1203" to="1233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Forcedirected algorithms as a tool to support community detection</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>GouvÃªa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">S</forename><surname>Da Silva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Macau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Quiles</surname></persName>
		</author>
		<idno type="DOI">10.1140/epjs/s11734-021-00167-0</idno>
	</analytic>
	<monogr>
		<title level="j">The European Physical Journal Special Topics</title>
		<imprint>
			<biblScope unit="volume">230</biblScope>
			<biblScope unit="issue">14</biblScope>
			<biblScope unit="page" from="2745" to="2763" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A random sampling o (n) force-calculation algorithm for graph layouts</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gove</surname></persName>
		</author>
		<idno type="DOI">10.1111/cgf.13724</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="739" to="751" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Drawing large graphs with a potential-field-based multilevel algorithm</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hachul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>JÃ¼nger</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-31843-9_29</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="285" to="295" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Large-graph layout with the fast multipole multilevel method</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hachul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>JÃ¼nger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-12">December. 2005</date>
			<biblScope unit="page" from="1" to="27" />
			<pubPlace>Spring, V</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Efficient high-quality force-directed graph drawing</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematica Journal</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="37" to="71" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Extending the spring-electrical model to overcome warping effects</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<idno type="DOI">10.1109/PACIFICVIS.2009.4906847</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Pacific Visualization Symposium</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="129" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Forceatlas2, a continuous graph layout algorithm for handy network visualization designed for the gephi software</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jacomy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Venturini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Heymann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bastian</surname></persName>
		</author>
		<idno type="DOI">10.1371/journal.pone.0098679</idno>
	</analytic>
	<monogr>
		<title level="j">PLOS ONE</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page">e98679</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">An algorithm for drawing general undirected graphs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kawai</surname></persName>
		</author>
		<idno type="DOI">10.1142/9789814434478_0005</idno>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="7" to="15" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Stochastic blockmodels and community structure in networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Karrer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Newman</surname></persName>
		</author>
		<idno type="DOI">10.1103/PhysRevE.83.016107</idno>
	</analytic>
	<monogr>
		<title level="j">Physical Review E</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">16107</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Drawing graphs: methods and models</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kaufmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">FlexGD: A flexible force-directed model for graph drawing</title>
		<author>
			<persName><forename type="first">A.-M</forename><surname>Kermarrec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moin</surname></persName>
		</author>
		<idno type="DOI">10.1109/PacificVis.2013.6596148</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Pacific Visualization Symposium</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Drawing large graphs by low-rank stress majorization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Khoury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2012.03090.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3pt1</biblScope>
			<biblScope unit="page" from="975" to="984" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Force-directed drawing algorithms</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Graph layouts by t-SNE</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Kruiger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">E</forename><surname>Rauber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Martins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kerren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kobourov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Telea</surname></persName>
		</author>
		<idno type="DOI">10.1111/cgf.13187</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="283" to="294" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Deep learning</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<idno type="DOI">10.1038/nature14539</idno>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">521</biblScope>
			<biblScope unit="issue">7553</biblScope>
			<biblScope unit="page" from="436" to="444" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">An energy model for visual graph clustering</title>
		<author>
			<persName><forename type="first">A</forename><surname>Noack</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-24595-7_40</idno>
	</analytic>
	<monogr>
		<title level="m">International symposium on graph drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="425" to="436" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A sparse stress model</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ortmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Klimenta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Brandes</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-319-50106-2_2</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing and Network Visualization</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="18" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">The graph-tool python library. figshare</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Peixoto</surname></persName>
		</author>
		<idno type="DOI">10.6084/m9.figshare.1164194</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Metrics for graph drawing aesthetics</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">C</forename><surname>Purchase</surname></persName>
		</author>
		<idno type="DOI">10.1006/jvlc.2002.0232</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="501" to="516" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">The network data repository with interactive graph analytics and visualization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Rossi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K</forename><surname>Ahmed</surname></persName>
		</author>
		<idno type="DOI">10.1609/aaai.v29i1.9277</idno>
	</analytic>
	<monogr>
		<title level="m">Twenty-Ninth AAAI Conference on Artificial Intelligence</title>
				<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="4292" to="4293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Handbook of Graph Drawing and Visualization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>CRC press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Visualizing data using t-SNE</title>
		<author>
			<persName><forename type="first">L</forename><surname>Van Der Maaten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">86</biblScope>
			<biblScope unit="page" from="2579" to="2605" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Perceptual organization in user-generated graph layouts</title>
		<author>
			<persName><forename type="first">F</forename><surname>Van Ham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Rogowitz</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2008.155</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1333" to="1339" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A multilevel algorithm for force-directed graph drawing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Walshaw</surname></persName>
		</author>
		<idno type="DOI">10.1142/9789812773296_0012</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="171" to="182" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Revisiting stress majorization as a unified framework for interactive constrained graph visualization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-W</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sedlmair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Deussen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2017.2745919</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="489" to="499" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">D</forename><surname>Young</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sandin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">University Physics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<date type="published" when="1996">1996</date>
			<publisher>Addison-Wesley Reading</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Graph drawing by stochastic gradient descent</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">X</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pawar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Goodman</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2018.2859997</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="2738" to="2748" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Drgraph: An efficient graph layout algorithm for large-scale graphs by dimensionality reduction</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2020.3030447</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1666" to="1676" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
