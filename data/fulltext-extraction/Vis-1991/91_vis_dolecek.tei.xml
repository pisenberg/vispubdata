<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multidimensional Real Time Visualization on Personal Computers</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Quentin</forename><forename type="middle">E</forename><surname>Dolecek</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Johns Hopkins University Laurel</orgName>
								<address>
									<postCode>20723</postCode>
									<settlement>Maryland</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Multidimensional Real Time Visualization on Personal Computers</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This case study describes a law-cost, highperformance visualization tool based on the IBM PC. Characteristics of scientific and engineering visualization and requirements for real time analysis are discussed. Application programming without coding by use offlowgraphs is also presented.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Visualization can be defined as a method of computing that enriches the process of discovery, fosters insight, and offers a way for seeing the unseen. For scientific and engineering analysis, this requires that one can focus on and rapidly interact with simulations and data.</p><p>However, current visualization systems are usually geared to realistic rendering of geometric sources of data, such as computer-aided design or two-and three-dimensional modeling. This translates to the use of expensive graphic workstations for photorealistic image rendering. In addition, the capability to let a user immediately interact with data is often limited to a few menu selections or reprogramming of the system. Without the ability to easily interact with and analyze data, the result is "what you see is what you get"; not "Eureka, I see the light!" Scientific and engineering visualization needs to support experimentat modeling and simulations of phenomena; it does not require a high degree of realism. Insight comes from within the user, not the system. Two basic items are required for the system to enhance understanding and comprehension. First is fast graphical interaction with data to allow the researcher to focus on the problem instead of the visualization system. Second is a wide variety of interactive nonapplication-specific techniques, for real time data analysis and display. In addition, the researcher should be able to easily define and insert new functions into the system. In short, new data representations and new ways of presenting datavisually, not high realism displays, lead to discovery and solutions.</p><p>Visualization technology enhances and accelerates understanding only if it is readily assessable. Low-cost systems that are easily applied to real-world scientific problems are needed. Only a select few researchers have the resources for highcost, workstation-based visualization systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Personal Visualization System</head><p>The Personal Visualization System (PVS) developed by the Applied Physics Laboratory brings low cost visualization and "super computer" power to the personal computer. This modular system, illustrated in <ref type="figure">Figure 1</ref>, operates on any IBM compatible computer with EGA or high-resolution graphics. It spans the gap between users and scientific visualization with an integrated set of graphic tools that are easily used and expanded. Two high-speedPC plug-in board options are supported by the PVS. The IRISVISION'" board, summarized in <ref type="table">Table 1</ref>, adds state of the art, realtime graphics to the system and the parallel information coprocessor, PiP, brings low cost "super computer" power to the system.</p><p>When operated as aconventional coprocessor, a single Pip module can perform up to49.5 million floating point operations per second (Mflops). A pip module contains two processing elements which can be operated in series or parallel. When both processing elements are used on the module, a single Pip board can perform 99 Mflops. This inserts the computational power of several typical workstations into the PVS. For even more power, the PVS can contain up to 8 Pip modules resulting in approximately the computational capability of a CRAY I computer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SPEED</head><formula xml:id="formula_0">3 D V e c t o r s - Triangles -14,l OO/Second Polygons -9,00O/Second (4-sided) 90,00O/</formula><p>Each Pip module also contains up to 4.6 megabytes of data memory interleaved with the two processor elements, serial control ports, and 40 megabyte per second parallel ports as shown in <ref type="figure" target="#fig_1">Figure 2</ref>. In addition, each pip module contains program memory and data flow control hardware for each processing element. Thus, the Pip module can operate in parallel with computations done in the host PC.</p><p>The Pip insvuction set includes floatingpoint arithmetic, fixed-point arithmetic, logical operations, and bit manipulation. It is programmable from the PC in both the C language and Assembly language. With the Personal Visualization System, the Pip module is assessable from Basic, Fortran, and the C languages. Thus, the personal visualization system can be configured as a low-cost system using only a personal computer, expanded for high-quality graphics with the IRISVISION board; and expanded for high-speed computation using the Pip board.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PVS Software</head><p>As users have differing preferences andneeds for using and/or writing application programs, the personal visualization system accepts programs in four different formats, as shown in <ref type="figure">Figure 3</ref>. At the lowest level, programs are entered using Basic, Fortran, C, or Assembly language code. At the mid level, programs are entered and run using flowcharts and/or sets of equations. Program entry is graphic in that the user simply types the equations to use, or selects icons and operations to compose a flowchart. The system then generates executable code.</p><p>At the top level, programs are entered by drawing flowgraphs as shown in <ref type="figure" target="#fig_3">Figure 4</ref>. The user selects icons defining operations and functions contained in the PVS library and connects them together using the system's graphic editor. Using the DOS operating system, PVS then links together the selected functions and executes the flowgraph. Programming at this level is similar to the "point-and-click" method used in many word processing and image processing packages. The major difference is the user can specify multiple operations/functions and their order of execution each time the program is executed. In addition, functions defined at lower levels in PVS, or executable programs from sources external to PVS, can be easily inserted into the PVS library. This insertion is also a "point-and-click," or graphic, operation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Multidimensional Real Time Visualization</head><p>Real time visualization is usually thought of in terms of high-speed computation and display. The personal visualization system provides this with its high-speed options; however, this is not the whole story. Visualization often requires days to months of programming to achieve. PVS reduces the time between problem definitioddata generation and visualization to a few minutes or hours. This is done with a set of intuitive visualization tools. Experience in graphics programming is not needed to effectively use PVS. In the simplest case, a researcher draws a two block flowgraph to read in data and generate three-dimensional interactive displays. The first block could range from the simple operation of reading a data file to running a complex simulation. The second block would send the data to the system FRAME icon. This icon displays vector or scaler data inside a three-dimensional cube. The cube containing the data canthenbe rotated, translated, zoomed, pseudocolored, and annotated with axes and text labels using the system mouse and/or keyboard. Real time visualization also requires real time analysis. Here information must be extracted from the display and sent to other flowgraph boxes that perform functions such as regression analysis, data transformations, and specialized displays. Information is extracted within the FRAME using icons such as those summarized below:</p><p>Grid Icon -An on/off switch for using the mouse to select grid points, scaler values, or vectors. When off, any point on the screen can be selected. Interpolated values are returned for points selected between vectors or scalers. When on, the mouse is permitted to select only data set points.</p><p>Probe Icon -This icon provides lookup of data points or interpolated lookup of vector, scaler, or XYZ coordinate values for any point in the display depending on the grid icon state. The icon can also be used to start and stop the tracking of a point's value as the display is updated, as in a simulation sequence.</p><p>Cutting Plane Icons -These icons create planes for viewing both vector and scaler data. The planes can be rotated around or moved along an X, Y, or Z axis to display information as:</p><p>Scaler Maps that show a continuous color map of the scaler values across the plane.</p><p>Scaler Contours that provide two-dimensional colored contour line displays.</p><p>Vector Maps that display the direction and magnitude of data vector points in the plane or interpolated direction and magnitude at user-defined grid points on the plane.</p><p>Data Extraction Planes that make the scaler or vector data defined by the plane available for further analysis and display. This includes such operations as x-y plots, polar plots, histograms and image filtering, and analysis with user-defined functions.</p><p>Tools for the analysis of volumetric data are also available in PVS. Examples of these tools are the PVS render, drape and isosurface icons. Isosurface creates a continuous three dimensional contour surface within the volume of a specified scaler value. Drape uses a two-dimensional function to color the surface of a three-dimensional object. Render uses ray tracing to produce a rendered picture of scaler data.</p><p>Multidimensional real time visualization in its simplest form is execution of the above operations fast enough to facilitate understanding. High frame rates (10 to 30 frames/second) are not needed for scientific analysis. However, motion is often useful in making dynamic displays of analytical results. The personal visualization system achieves "movies" by playing data displays back at 2-10 frameshecond.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Summary</head><p>In this age of supercomputing, getting data isn't the problem; understanding it is. PVS is a new "open-ended" approach for low-cost, personal computer-based visualization. It goes beyond the usual language-and menu-driven plotting systems with its graphic interface for application program generation, data generation and importing, visualization, and analysis. Complex research problems can now be seriously addressed using personal computers. Of course, if you have access to, and the budget for using a supercomputer, PVS would make a great "terminal"!</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>CH3046- 0 Figure 1 .</head><label>01</label><figDesc>/91/0000/036/$01 .OO 0 1991 IEEE HIGH SPEED Personal Visualization System Hardware.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Major Components of the Pip Board.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>I</head><label></label><figDesc>Figure 3. PVS Program Formats.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Programming with Flowgraphs.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
