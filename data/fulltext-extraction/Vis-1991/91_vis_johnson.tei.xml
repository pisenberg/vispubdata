<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Tree-Maps: A Space-Filling Approach to the Visualization of Hierarchical Information Structures</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Johnson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science &amp; Human-Computer Interaction</orgName>
								<orgName type="institution">Laboratory University of Maryland</orgName>
								<address>
									<postCode>20742</postCode>
									<settlement>College Park</settlement>
									<region>MD</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science &amp; Human-Computer Interaction</orgName>
								<orgName type="institution">Laboratory University of Maryland</orgName>
								<address>
									<postCode>20742</postCode>
									<settlement>College Park</settlement>
									<region>MD</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Tree-Maps: A Space-Filling Approach to the Visualization of Hierarchical Information Structures</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper describes a novel methodfor the visualization of hierarchically structured information. The Tree-Map visualization technique makes 100% use of the available display space, mapping the full hierarchy onto a rectangular region in a space-filling manner. This efficient use of space allows very large hierarchies to be displayed in their entirety and facilitates the presentation of semantic information.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A large quantity of the world's information is hierarchically structured: manuals, outlines, corporate organizations, family trees, directory structures, intemet addressing, library cataloging, computer programs ... and the list goes on. Most people come to understand the content and organization of these structures easily if they are small, but have great difficulty if the structures are large.</p><p>We propose an interactive visualization method for presenting hierarchical information called Tree-Maps. We hope that the Tree-Map approach is a step forward in the visualization of hierarchical information, and that it will produce benefits similar to those achieved by visualization techniques in other areas.</p><p>As humans we have the ability to recognize the spatial configuration of elements in a picture and notice the relationships between elements quickly. This highly developed visual ability allows people to grasp the content of a picture much faster than they can scan and understand iext [12].</p><p>The Tree-Map visualization method maps hierarchical information to a rectangular 2-D display in a space-filling manner; 100% of the designated display space is utilized. Interactive control allows users to specify the presentation of both structural (depth bounds, etc.) and content (display properties such as color mappings) information. This is in contrast to traditional static methods of displaying hierarchically structured information, which generally make either poor useofdisplay spaceor hidevastquantitiesof information from users. With the Tree-Map method, sections of the hierarchy containing more important information can be allocated more display space while portions of the hierarchy which are less important to the specific task at hand can be allocated less space <ref type="bibr">[9,101.</ref> Tree-Maps partition the display space into a collection of rectangular bounding boxes representing the tree structure <ref type="bibr" target="#b20">[20]</ref>. The drawing of nodes within their bounding boxes is entirely dependent on the content of the nodes, and can be interactively controlled. Since the display size is user conmlled, the drawing size of each node varies inversely with the size of the tree (i.e., # of nodes). Trees with many nodes (lo00 or more) can be displayed and manipulated in a fixed display space.</p><p>The main objectives of our design are:</p><p>Efficient Space Utilization Efficient use of space is essential for the presentation of large information structures.</p><p>Interactive control over the presentation of information and real time feedback are essential.</p><p>The presentation method and its interactive feedback must facilitate the rapidexuactionof information with low perceptual and cognitive loads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Esthetics</head><p>Drawing and feedback must be esthetically pleasing.</p><p>Hierarchical information structures contain two kinds of informa tion: structural (organization) information associated with the hierarchy, and content information associated with each node. Tree-Maps are able to depict both the structure and content of the hierarchy. However, our approach is best suited to hierarchies in which thecontentof theleafnodesand the structure of the hierarchy are of primary importance, and the content information associated with internal nodes is largely derived from their children.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation: Current Methods and</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interactivity</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Comprehension</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Problems</head><p>This work was initially motivated by the lack of adequate tools for the visualization of the large directory structures on hard disk drives.</p><p>Traditional methods for the presentation of hierarchically structured information can be roughly classified into three categories: listings, outlines, and tree diagrams. It is difficult for people to extract information from large hierarchical information structures using these methods, as the navigation of the structure is a great burden and content information is often hidden within individual nodes <ref type="bibr" target="#b23">[23]</ref>.</p><p>Listings are capable of providing detailed content information, but are generally very poor at presenting structural information. Listings of the entire structure with explicit paths can provide structural information, but require users to parse path information to arrive at a mental model of the structure. Alternatively, users may list each intemal node of the hierarchy independently, but this requires users to manually traverse the hierarchy to determine its structure. Outline methods can explicitly provide both structural and content information, but since the structural indentation can only be viewed a few lines at a time, it is often inadequate <ref type="bibr" target="#b3">[4]</ref>.</p><p>Thenumberofdisplay lines required topresent a hierarchy with both the listing and outline methods is linearly proportional to the number of nodes in h e hierarchy. These methods are inadequate for structures containing more than a few hundred nodes. A great deal of effort is required to achieve an mental model of the Structure in large hierarchies using these methods.</p><p>Tree drawing algorithms have traditionally sought efficient and esthetically pleasing methods for the layout of node and link diagrams. These layouts are based on static presentations and are common in texts dealing with graph theory and data structures. They are excellcnt visualization tools for small trees <ref type="bibr">[2,10,12.13,17]</ref>. However, these traditional node and link tree diagrams make poor use of the availabledisplay space. In a typical v~e drawing more than 50% of the pixels are used as background. For small tree diagrams this poor use of spaceisacceptable,and traditional layout methods produce excellent results. But for large trees, traditional node and link diagrams can not be drawn adequately in a limited display space. Attempts to provide zooming and panning have only been only partially successful <ref type="bibr">[lo]</ref>.</p><p>Another problem with tree diagrams is the lack of content information; typically each node has only a simple tcxt label. This problem exists because presenting additional information with each nodequickly overwhelms the display space for trees with more than just a few nodes.</p><p>The presentation of content information in all of these traditional methods has usually been text based. Although me diagrams are a graphically based method capable of making use of visualization techniques, and many of the ideas presented in this paper. Unfortunately, global views of large tree diagrams require the nodes to be so small that there is virtually no space in which to provide visual cues as to node content.</p><p>Tree Command Line Listing (e.g. UNIX "ls", DOS "dir"); Outlines (e.g. UNIX "du", Microsoft Windows)</p><p>Windowing (e.g. Macintosh Finder) Tree Drawings (e.g. Openwindows File Manager)</p><p>We are not aware of approaches that provide a visual representation of the relative sizes of files or directories.</p><p>Even moderately sized directory trees are difficult to visualize using standard operating system interfaces. With command line interfaces such as UNIX "ls" or DOS "dir", only the immediate children of any directory are listed. An overall view of the directory tree must be pieced together by traversing the various paths and listing the immediate children of the currently active directory.</p><p>Desktop metaphors and their windowing strategies are another alternative. Oneof the problems with windows is that they often obscure each other, and users may spend much of their time may be spent m n g i n g windows. Also. the tree structure is not apparent unless windows havebeen carefully placed. Desktop icons generally show only the type of the file. Much richer visual mappings are possible but are currently not available, for instance, the depth of an icon's shadow could be used to indicate file size.</p><p>We will use a small directory tree hierarchy as an ex-  <ref type="figure">Figure 1</ref> we see an outline view similar to the presen-tations provided by PCShell under DOS, theUNIX command "du", or Microsoft Windows 3.0. This presentation requires 23 lines: a structure with lo00 files would require a minimum of lo00 lines in order to present both directories and files. <ref type="figure" target="#fig_0">Figure 2</ref> presents a typical tree diagram, such drawings can be found in graph theory textbooks. This tree drawing approach is similar to the presentation method used by theopenwindows File Manager. Directory trees with 1000 files cannot be drawn all at once on a typical Screen (if all files are at the same leve1,each file node will have less than one pixel in which todraw itself). The problem becomes even more severe when real file names are used as node labels. <ref type="figure">Figure 3</ref> presents the same information in yet another manner, as a Venn diagram. We use this figure for illustrative purposes as a familiar and often used set theoretic visualization technique. It is an intermediate step which facilitates the transition from traditional presentations to Tree-Maps. This is an odd use of Venn diagrams, as one does not usually think of files and directories as sets. However, simple directory structures can be thought of as set theoretic collections of files. using only the containment (subset) property. Note that each node has been drawn proportionate to its size.</p><p>The space required between regions would certainly preclude this Venn diagram representation from serious consideration for larger structures. Note that this "waste" of space is also present in traditional tree diagrams. Using boxes instead of ovals and a bin-packing algorithm could partially solve this space problem. But bin-paclung is an NPcomplete problem and does not preserve order. <ref type="figure" target="#fig_1">Figure 4</ref> is a box-based Venn diagram which illustrates a more efficient use of space and is an excellent tool for the visualization of small hierarchies. But even the small degree of nesting present in this technique renders it unsuitable for the presentation of large hierarchies. Fortunately space efficient results can be achieved without bin-packing, using our "slice and dice" Tree-Map approach, a simple linear method in which the algorithm works top-down. An analogy should quickly illustrate this concept. If the hard disk drive werea large, flat,rectangular cheese, onecouldcertainly slice it into chunks representing the size of each top lcvel directory. Applying this slice and dice algorithm recursively to each piece of the cheese, and rotating the slicing direction 90 degrees at each recursive step, would result in the Tree Map   In this directory structure it can be observed that purple application filesaregenerally thelargest files on thisdisk, and take up relatively the same percentage of overall disk space as system related (green) files. A duplicate set of files exists just to the right of the vertical green bar. The files in this root level folder can be seen duplicated one level down in subfolders, as repeatinggeometricpattemsoffset900from their parent.</p><formula xml:id="formula_0">F6 G6 Hb 114 536 K24 A U I W N28 04 P4 Q4 R4 S 4 T4 f i U8 VI2 W8</formula><p>Since thisTree-map portrays the overall allocation ofdisk space, the largest files can be located quite easily. Sorting a large directory listing by size would also make finding the largest files easy, but these files would not be presented in their original context. In addition, sorting a list on two or more properties (i.e. size and type) makes presentation of the results difficult. Tree-Maps make finding the largest system, application, and picture files on the disk as easy as finding the largest green, purple, and magenta rectangles in <ref type="figure">Figure 8</ref>. This is one simple example of the visual display properties possible; further discussion is contained in scction 4.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The Tree Map Method</head><p>Displaying a directory tree while fully utilizing space and conveying structural information in a visually appealing and low cognitive load manner is a difficult task, as these are often opposing goals. Our interactive approach to drawing dircctory trees allows users to determine how the tree is displayed. This control is essential, as it allows users to sct display properties (colors, borders, etc.) maximizing the utility of the drawing based on their particular task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Structural Information: Partitioning the Display Space</head><p>Tree-Map displays look similar to the partition diagrams of quad-trees and k-D trees. The key difference is the direction of the transformation. Quad-trws create hierarchical structures to store 2-D images efficiently <ref type="bibr" target="#b18">[18]</ref> while Tree-Maps present hierarchical information structures efficiently on 2-D display surfaces. Tree-Maps require that a weight be assigned to each node, this weight is used to determine the size of a nodes bounding box. The weight may represent a single domain property (such as disk usage or file age for a directory tree), or a combination of domain properties (subject to Property 4 below). A nodes weight (bounding box) determines its display size and can be thought of as a measure of importance or degree of interest <ref type="bibr" target="#b8">[9]</ref>.</p><p>The following relationships between the structure of the hierarchy and the structure of its Tree-Map drawing always hold:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Properties</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IfNodel is an ancestor of Node2, then the bounding box ofNodel completely encloses,or isequal to, the bounding box of Node2. The bounding boxes of two nodes intersect iff one node is an ancestor of the other. Nodes occupy a display area strictly proportional to their weight. The weight of a no&amp; is greater than or equal to the sum of the weights of its children.</head><p>Structural information in Tree-Maps is implicitly presented, although it may alsobe explicitly indicated by nesting child nodes within their parent. Nesting provides for the direct selection of all nodes, both intemal and leaf. Although the space required for nesting reduces the number of nodes which can be drawn in a given display space, and hence reduces the size of the trees that can be adequately displayed compared to non-nested drawings <ref type="bibr" target="#b21">[21]</ref>.</p><p>A non-nested display explicitly provides direct selection only for leaf nodes, but a pop-up display can provide path information as well as further selection facilities. Non-nested presentations cannot depict internal nodes in degenerate linear sub-paths, as the bounding boxes of the intemal nodes in the sub-path may be exactly equal. Such paths seldom occur and tasks dependent on long chains of single child nodes will require special treatments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Content Information: Mapping Content to the Display</head><p>Once thebounding box ofanodeisset,avarietyofdisplay properties determine how the node is drawn within it. Visual display properties such as color (hue, saturation, brightness), texture, shape, border, blinking, etc. are of primary interest, but the interface will not limit users to purely visual properties <ref type="bibr" target="#b5">[6]</ref>. Color is the most important of these visual display properties, and it can be an important aid to fast and accurate decision making [ 1 1,15,16]. Auditory properties may also be useful in certain circumstances. Nodes may have many domain dependent properties, in which case a rich set of each of its children, and recursively sends each child a drawing command. The bounds of a node's children form eithera vertical or horizontal partitioning of the display space allocated to the node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Tracking</head><p>mappings exists between content information and display properties.</p><p>The drawing of individual nodes within their bounding boxesdetermines thecontentinformation statically presented in a Tree-Map. The number and variety of domain properties that can be statically coded in the drawing of the tree is limited. As Kuhn states, "Since human perception imposes an upper bound on the complexity of graphic representations, only a small number of relations can be shown." <ref type="bibr" target="#b6">[7,</ref><ref type="bibr">14]</ref> Interactive control of the drawing is therefore critical because the mapping of content information to the display will vary dependingon theinformation usersrequire. Dynamic feedback is provided by a pop-up window which displays information about the node currently under the cursor.</p><p>For example, files could have weights (display size) proportional to their creation date, color saturation dependent on their last modification date, and pitch (tone heard while crossing border) based on size. Using this scheme it is easy to locate old files which have changed recently, and &amp;Y the cursor crosses into their bounding box a deep tone tells users that the file is large even before they read the information about that file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Algorithms</head><p>Algorithms are given to draw a Tree-Map and to track cursor movement in the tree. The algorithms may be applied to any tree, regardless of its branching degree. Both algorithms appear on the following page as <ref type="figure" target="#fig_4">Figures 9 and 10</ref>.</p><p>The basic drawing algorithm produces a series of nested boxes representing the structure of the tree.</p><p>The cursor tracking algorithm facilitates interactive feedback about the tree. Every point in the drawing corresponds to a node in the tree. While the current tracking point (from a mouse or touchscreen input device) is in a node, the node is selected and information about it is displayed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Drawing Algorithm</head><p>The Tree-Map can be drawn during one pre-order pass through the tree in O(n) time, assuming that node properties (weight, name, etc.) have previously been computed or assigned. The current algorithm has been implemented in object-oriented Think C on a Macintosh 11. The drawing algorithm proceeds as follows:</p><p>1) The node draws itself within its rectangular bounds according to its display properties (weight, color, bordcrs, etc.).</p><p>2) The node sets new bounds and drawing properties for</p><p>The path from the root of the tree to the node associated with a given point in the display can be found in time proportional to the depth of the node. In our implementation, when a node draws itself it stores its bounding box in an instance variable. Every point in the Tree-Map corresponds to a node in the hierarchy. in addition every node is contained in the bounding box of the root node. Recall that each node's bounding box completely encloses the bounding boxes of its children, and that the bounding boxes of sibling nodes never overlap. Finding the path to a node containing a given point thus involves only a simple descent through one path in the tree, until the smallest enclosing bounding box is found.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Coping with Size</head><p>A typical 13 inch display has a resolution of 640 x 480, or roughly 300,000 pixels. Drawing an 80mb directory tree (weight = disk usage) on such a display requires that each pixel represent 260 bytes, i.e., there are roughly 4 pixels per Kilobyte. Assuming that such a directory structure may contain roughly 3,000 files (as on one of our lab's hard disks)</p><p>implies that there are approximately 100 pixels per file on average. A box with 10 pixels per side (roughly 4"') is easily selectable using a standard mouse or touchscreen device <ref type="bibr" target="#b19">[19]</ref>. This average case analysis is only part of the story since file sizes may vary widely.</p><p>The range of file sizes on our hard disk varied from a few hundred bytes to well overonemillion bytes. In theTree-Map of <ref type="figure">Figure 8</ref>,groups of very small files often becomecompletely black regions as there is only enough space to draw their borders. Magnification over these regions or zooming can provideaccess tothese files. But since theassignment ofnode weights can be user controlled, presumably the nodes with the greatest weights are of greatest interest and the nodes with the smallest weights are of least interest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Future Research Directions</head><p>Further research includes the exploration of alternate structural partitioning schemes, appropriate visual display of both numeric and non-numeric content information, dynamic views such as animated time slices, and operations on elementsof the hierarchy. Standardoperationssuchaszooming, marking, selecting and searching also invite designers to explore variations on the Tree-Map strategy.</p><p>Dr. Ram Naresh-Singh, a visiting research scientist in our lab, is working on an alternate directory only approach to partitioning the display which we have termcd "top-down". His implementation on a Sun Sparcstation preserves the traditional notion of having the root node at the top and the leaves at the bottom.</p><p>Animation, or time-sliced displays, could provide insight into evolving structures. For example, the hierarchical organization of a university could be mapped from the university level (root), to the college level, to the department level, to the research lab level. If weights were assigned based on personnel resources, it would be easy to see the structure of the university based on the distribution of employees, and hence understand its strengths and weaknesses. Furthermore, if the saturation of red was proportionate to the funds spent at each node, and the saturation of cyan (the inverse of red) was proportionate to the funds allocated, nodes (labs, departments, colleges) which were on budget would be shades of gray (equal amounts of red and cyan), nodes over budget would become increasingly red, and nodes under budget would become increasingly cyan. The magnitude of the nodes funding would range from black (small budgets and expenditures) to white (large budgets and expenditures). If a series of Lhese displays are generated based on data over the last ten years, it would be possible to see how funding and personnel resources have evolved and been distributed within the university.</p><p>The range and variety of potential applications of this   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>We believe that space-filling approaches to the visualization of hierarchical information structures have great potential. The drawing algorithm we have given is quite general, and the numerous possibilities for mapping information about individual nodes to the display are appealing. The Tree-Map approach to visualizing hierarchical structures enables meaningful drawings of large hierarchies in a limited space.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .</head><label>2</label><figDesc>Tree DiagramFigure 3. Venn Diagram</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 .</head><label>4</label><figDesc>Nested Tree-Map</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 .</head><label>5</label><figDesc>Tree-Map of Figure 5. Figure 5 simply eliminates the nesting offset used to seperate objects at each level. If we wanted to distribute our cheese to 17 people based on their weights, Figure 5 would give us a slicing diagram. This weight-proportionate distribution is one of the important features of Tree-Maps. The Tree Map snapshots of Figures 6 and 7 (see color plates) are the full color, machinc generated screen snapshots of Figures 4 and 5. All screen snapshots in this paper have been made while using our TreeViz application on an Apple Macintosh 11. Figure 8 (see color plates) is a screen snapshot showing a Tree-Map of loo0 files. A simple color mapping has been used to code some of the various Macintosh file types: Tree-Map applications are red; all other applications are purple; system files are green; picture files are magenta; text files are yellow; archive files are cyan; and all other file types not currently of primary interest are gray. This Tree-Map shows 21 root level files on the left, followed by 19 root level directories moving across tothe right. Detailcdfileinformation is displayed in a pop-up dialog window as the mouse is dragged over files in the display.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Johnson Figure 6 (</head><label>6</label><figDesc>Color ). Nested Tree-Map Johnson Figure 7 (Color ). Non-nested Tree-Map (See color plates, page 429.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>11FindPath(Figure 9 .</head><label>9</label><figDesc>point thepoint) { if node encloses thepoint then foreach child of thisNode do ( path = FindPath(theP0int); if (path != NULL) then return(lnsertlnList(thisNode. path)Drawing Algorithm Add child to path Start path, thePoint is in this node, but not in any of its children</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 10 .</head><label>10</label><figDesc>Tracking Algorithm technology is vast. For instance, stock market portfolios are often hierarchically structured, animations over time of financial portfolios could be a valuable application of this technology .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Thus much more space is available for the rendering of individual leaf nodes, and for providing visual cues related to content information.Tree-Maps provide an overall view of the entire hierarchy, making the navigation of large hierarchies much easier. Displaying the entire information structure at once allows users to move rapidly to any location in the space. As Beard states in his paper on navigating large two-dimensional spaces[l], "If the two-dimensional information space fits completely onto a display screen, there is no navigation problem ... Users are never lost because they can see the complete information space.</figDesc><table><row><cell>nodes.</cell></row><row><cell>-Maps efficiently utilize the designated display area</cell></row><row><cell>and are capable of providing structural information implic-</cell></row><row><cell>itly, thereby eliminating the need to explicitly draw internal</cell></row></table><note>" 3 A Directory Tree Example Obtaining information about directory trees was the ini- tial motivation for this research and provides a familiar example domain. For illustrative reasons, the hierarchy in this example is small and nodes haveonly an associated name and size. While reading through this example, think about how the techniques described would scale up to a directory tree containing loo0 files. An Apple Macintosh screen snapshot showing a Tree-Map of loo0 files from one of our laboratory's hard disk drives follows this example. Presenting directory structures is a very practical prob- lem. The following are the methods widely available today:</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>ample. Tree A depicted in Figures 1 through 7 contains 23nodes, of lhese 6 are directories (internal nodes) and 17 are files (leaf nodes). This tree is structured such that among siblings, file nodes always precede directory nodes.In</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>How much of the parent will have been allocated after this node Decide which direction parent is being sliced Set direction to slice this node for its children How much of the parent will haw been sliced after this node Left side, Offset controls the nesting indentation</figDesc><table><row><cell>DrawTreeO</cell><cell>The node gets a message to draw itself</cell><cell>The Root node is set up prior to the original recursive call</cell></row><row><cell cols="2">{ donesize = 0;</cell><cell>The percent of this nodes subtree drawn thus far</cell></row><row><cell cols="2">PaintDisplay Rectangle();</cell><cell>The node sends itself a Paint Message</cell></row><row><cell cols="2">switch (myorientation) (</cell><cell>Decide whether to slice this node horizontally or vertkdy</cell></row><row><cell cols="2">case HORIZONTAL:</cell><cell></cell></row><row><cell></cell><cell>startside = myBounds.left;</cell><cell>Set start for horizontal slices</cell></row><row><cell cols="2">case VERTICAL:</cell><cell></cell></row><row><cell></cell><cell>startside = myBounds.top;</cell><cell>Set start for vertical slices</cell></row><row><cell cols="2">1 if (myNodeType == Internal) (</cell><cell>Set up each child and have it draw itself</cell></row><row><cell cols="2">ForEach (childNode) Do (</cell><cell></cell></row><row><cell></cell><cell cols="2">childNode-&gt;SetBounds(startSide, donesize, myorientation); Set childs bounds based on the parent partition taken by previous</cell></row><row><cell></cell><cell></cell><cell>children of parent</cell></row><row><cell></cell><cell>childNode-&gt;SetVisual();</cell><cell>Set visual display properties (color, e tc.)</cell></row><row><cell></cell><cell>childNode-&gt;DrawTree();</cell><cell>Send child a draw command</cell></row><row><cell>111</cell><cell></cell><cell></cell></row><row><cell cols="2">SetBounds(startSide, donesize, parentorientation) ( donesize = donesize + mysize;</cell><cell></cell></row><row><cell cols="2">switch (parentorientation) (</cell><cell></cell></row><row><cell cols="2">case HORIZONTAL:</cell><cell></cell></row><row><cell></cell><cell>myorientation = VERTICAL;</cell><cell></cell></row><row><cell></cell><cell>endside = parentwidth * donesize / parentsize; SetMyRect(startSide + offset,</cell><cell></cell></row><row><cell></cell><cell>parentBounds.top + offset, parentBounds.left + endside -offset.</cell><cell>TOP Right</cell></row><row><cell></cell><cell>parentBounds.bottom -offset);</cell><cell>Bottom</cell></row><row><cell></cell><cell>startside = parentBounds.left + endside;</cell><cell>Set start side for next child</cell></row><row><cell cols="2">case VERTICAL:</cell><cell></cell></row><row><cell></cell><cell>myorientation = HORIZONTAL;</cell><cell>Set direction to slice this node for its children</cell></row><row><cell></cell><cell>endside = parentHeight ' donesize I parentsize;</cell><cell></cell></row><row><cell></cell><cell>SetThisRect(parentBounds.left + offset, startside + offset, parentBounds.right -offset.</cell><cell>Left side TOP Right</cell></row><row><cell></cell><cell>parentBounds.top + endside -offset);</cell><cell>Bottom</cell></row><row><cell></cell><cell>startside = parentBounds.top + endside;</cell><cell>Set start side for next child</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to acknowledge the support of the members of the Human-Computer Interaction Lab, whose suggestionsandcriticisms havebeen greatly appreciated. They have forced us to prove the value of Tree-Maps and allowed us to hone our presentations of the idea.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Walker 11. Navigational techniques to improve the display of large two-dimensional spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Beard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>John</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Behavior &amp; Information Technology</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Drawing trees nicely withtex</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Briiggemann-Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ElectronicPublishing</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="101" to="115" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The information visualizer, an information workspace</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Stuart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">G</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jock</forename><forename type="middle">D</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM C111&apos;91 Conference on Human Factors in Computing Systems, Information Visualization</title>
		<meeting>ACM C111&apos;91 Conference on Human Factors in Computing Systems, Information Visualization</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="181" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Evaluation of three interfaces for browsing hierarchical tables of contents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Chimera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kay</forename><surname>Wolman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sharon</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
		<idno>CAR-TR-539, CS-TR-2620</idno>
		<imprint>
			<date type="published" when="1991-02" />
			<pubPlace>College Park</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The art of scientific visualization. Academic Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donna</forename><forename type="middle">J</forename><surname>Cox</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990-03" />
			<biblScope unit="volume">20</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A framework for the automated drawing of data structure diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prabhaker</forename><surname>Mateti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Sofiware Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="543" to="557" />
			<date type="published" when="1990-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Visualization at work. Academic Computing, page 26</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Ellson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Seeing the forest for the trees: Hierarchical displayofhypertextsuuctures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACMProc. COIS88 (Conf. on Office Information Systems)</title>
		<meeting><address><addrLine>Palo Alto, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-03" />
			<biblScope unit="page" from="205" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Generalized fisheye views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">W</forename><surname>Furnas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ceedings of ACM CH1&apos;86 Conference on Human Factors in Computing Systems, Visualizing Complex Information Spaces</title>
		<imprint>
			<date type="published" when="1986" />
			<biblScope unit="page" from="16" to="23" />
		</imprint>
	</monogr>
	<note>Pro-9</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Viewing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tyson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><forename type="middle">E</forename><surname>Henry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hudson</surname></persName>
		</author>
		<idno>90-13</idno>
		<imprint>
			<date type="published" when="1990-05" />
		</imprint>
		<respStmt>
			<orgName>University of Arizona</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Investigating the effects of color</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ellen</forename><forename type="middle">D</forename><surname>Hoadley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="120" to="139" />
			<date type="published" when="1990-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On Visualization ofAbstract Objects and Relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomihisa</forename><surname>Kamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bunkyoku</title>
		<imprint>
			<biblScope unit="issue">7-3-l Hongo</biblScope>
			<date type="published" when="1988-12" />
		</imprint>
		<respStmt>
			<orgName>University of Tokyo, Departmentof Information Science</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Fundamental Algorithms, volume I of the Art of Computer Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973" />
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Editing spatial relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Kuhn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Symposium on Spatial Data lfandling</title>
		<meeting>the 4th International Symposium on Spatial Data lfandling<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="423" to="432" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Using colour effectively in displays for computer-human interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lindsay</forename><forename type="middle">W</forename><surname>Macdonald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">DISPLAYS</title>
		<imprint>
			<biblScope unit="page" from="129" to="142" />
			<date type="published" when="1990-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Ten rules for color coding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">F</forename><surname>Rice</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Display</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="12" to="14" />
			<date type="published" when="1991-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Cone trees: Animated 3d visualizations of hierarchical information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jock</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuart</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM CHI&apos;91</title>
		<meeting>ACM CHI&apos;91</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m">Cogerence on Human Factors in Computing Systems, Information Visualization</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Design and Analysis of Spatial Data Structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanan</forename><surname>Samet</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
			<publisher>Addison-Wesley Publishing Co</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">High precision touchscreens: Design strategies and comparisons with a mouse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Sears</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Man-Machine Studies</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="593" to="613" />
			<date type="published" when="1991-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Tree visualization with tree-maps: A 2-d space-filling appoach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Shneiderman</surname></persName>
		</author>
		<idno>CS-TR-2645</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<date type="published" when="1990-09" />
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>to appear in</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A visual representation forknowledge structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Travers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Hypertext&apos;89 Proceedings, Implementations and Interfaces</title>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="147" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">The Visual Display of Quantitative Information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Tufte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983" />
			<publisher>Graphics Press</publisher>
			<pubPlace>Cheshire, CT</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Assaying and isolating individual differences in searchinga hierarchical file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><forename type="middle">J</forename><surname>Vicente</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><forename type="middle">C</forename><surname>Hayes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Williges</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">HmnFactors</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="349" to="359" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
