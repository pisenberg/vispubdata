<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">NetV: An Experimental Network-based Volume Visualization System</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Todd</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">San Diego Supercomputer Center Advanced Scientific Visualization Laboratory</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">R</forename><surname>Nadeau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">San Diego Supercomputer Center Advanced Scientific Visualization Laboratory</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">NetV: An Experimental Network-based Volume Visualization System</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Volume data imaging is a computationally expensive process. Imaging small volume data sets is slow when executed on typical workstatwn-class machines and imaging large volume data sets on such machines is nearly impossible. Executing the same tasks on minisupercomputer class system can significantly reduce imaging times and job-size restrictions, but at the cost of increased user-interface and accessibility problems. In a well-integrated system, computational tasks should be handled by high-powered compute engines, while userinterface tasks are left to graphics workstations. At the San Diego Supercomputer Center (SDSC), an experimental volume visualization system is being tested that distributes volume imaging tasks to appropriate network resources. Remote high-powered compute engines process rendering tasks, while local workstations run the user-interface .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Volume visualization is a powerful and popular technique used to create highquality images from three-(or higher-) dimensional data sets [5]. Unfortunately, due to the large memory and computational requirements of volume imaging techniques, imaging even small data volumes requires high-end compute engines. Imaging large data sets overloads all but the most powerful archi-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>tectures.</head><p>In the heterogeneous environment where today's scientists work, a variety of machines are connected via local and wide area networks, yet often scientists do not have the tools necessary to take advantage of the unique capabilities of each machine. In the case of volume visualization, scientists need a means to take advantage of the windowing capabilities of their local, inexpensive workstations and the volume imaging capabilities of remote high-end volume imaging engines 141.</p><p>Although good visualization software [6,8] is available at little or no cost, these tools run slowly on the low-end workstations most often accessible to scientists and do not provide widely-available, easy-to-use access to network resources. To render an image in a reasonably short time, scientists must make due with cutting plane data exploration (a computationally less demanding and visually less satisfactory technique), settle for reduced image quality (scientifically unacceptable), port and run CPUintensive rendering modules elsewhere on the network, or purchase an expensive high-end system.</p><p>One no-cost volume visualization tool developed for low-end workstations [14] is available for the CRAY platfonn but has not been enhanced to take advantage of the CRAY's processing power. It is a handy tool for cutting plane exploration of three-dimensional scientific data but not useh1 for Creating high quality images.</p><p>Running rendering modules on compute engines connected on a local area network works well but most scientists have neither access to local compute engines nor the time necessary to deal with the complexities of porting modules and making network connections.</p><p>Commercial visualization software [1,3,9,15] available for high-end workstations runs at acceptably interactive speeds but the expense of purchasing such workstations and software licenses is often prohibitive. The cost makes these stations a shared resource, so those scientists who want to use them must arrange for time at the console and must travel to where the machines are installed.</p><p>Several projects have broken ground in providing network-based visualization tools to scientists [2,13,16]. However, these tools do not give widely-available access to centralized network volume-imaging software and hardware.</p><p>This paper describes the SDSC NetV project. NetV gives off-site scientists easy access to high-end volume imaging software and hardware at SDSC. The system allows a user to submit volume imaging jobs to an imaging spooler on a visualization-server. The time required to submit a job, render the job on a mini-supercomputerclass machine, and return the volume image to the off-site scientist is far less than the time it would take to create a similar image on a local workstation-class machine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Network-based Volume Visualization</head><p>Sharing network resources such as high-end visualization servers (vis-servers) among many users is not a simple task. Many issues of communication, timing, and resource management must be addressed. The payoff for solving these problems is a centrally located, properly maintained, well operated, and more fully utilized resource.</p><p>Given a good network toolset, a user can be sheltered from the complications of resource-specific "features." In fact, there is no need for the user to know what network resource is processing their job. The t e a m networktrunsprent is sometimes used to describe this "ignorance is bliss" situation.</p><p>The NetV system is designed to achieve several goals. The software must give the widest possible user population access to distributed volume visualization resources. The software must be easy to leam and use; complexities of network protocol. queuing schemes, and windowing methods must be hidden. The software must be powerful so that it can generate and return highquality images quickly. The software must be able to support multiple users simultaneously without too much degradation in performanw to any of the users.</p><p>NetV is designed to be flexible so that the user interface will remain unchanged as future back-end compute engines, compute-fanns, and/or imaging capabilities are added or changed. Users will benefit from faster tmnaround and higher quality images as volume imaging back-ends are enhanced.</p><p>NetV is also designed to provide a solid starting point for new distributed rendering systems. Job distribution utilities for three-dimensional scene rendering, raytracing, and other means of generating images will be able to use many NetV components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">An Experimental System</head><p>The NetV system is composed of five functional units or modules. A job-submitter runs on the user's local UNIX machine and is the only program that the user sees.</p><p>The job-receiver, queue-manager, renderer(s), and image-handler all run, transparently to the user, on a remote vis-server to process submitted jobs.</p><p>The following sections describe the job-submission language and the responsibilities of each of the modules in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">The Jobsubmission Language</head><p>A simple script language has been developed to pass information from the user's machine to the vis-server conveniently. ' Ihe script contains a c o k t i o n of name value pairs. Some of the names have an enumerated list of possible string values, while other names may be associated with one or more numerical values. ' Ihe script contains all of the information that the vis-setver needs to mder an image and return it to the user. Users must currently use a text editor to compose job-submission scripts, but development of a graphical user inteaface to classify data and compose scripts is underway.</p><p>The scripting language contains seven types of information.</p><p>Dam pairs Namevalue pairs that describe the data set to be rendered, what portion of it to render, and what level of data sampling to peafonn.</p><p>Namevalue pairs that describe how the data set is to be viewed in the threedimensional scene.</p><p>Namevalue pairs that describe the size of the image and the size of the data within the image.</p><p>Name-value pairs that describe each of the light sources in the scene.</p><p>Namevalue pairs that describe the auxiliary scene information. These include such information as ambient lighting intensity and background color value.</p><p>Namevalue pairs that describe how ranges of data values are to be mapped. A color and an opacity is associated with each possible data value.</p><p>Namevalue pairs that describe how the final rendered image is to be returned to the user. These options will be discussed in section 3.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>View pairs</head><p>Window pairs</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Light pairs</head><p>Environment pairs</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data classification pairs</head><p>Image handling pairs</p><p>Routines to read scripts in this language into a data structure in memory, and to write scripts from the intend data svucture to a file have been implemented. While the job-receiver is the only module that writes scripts, all five modules have to read submitted scripts. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>User's Host</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Vis-server Host</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">The Job-submitter</head><p>The job-submitter program runs on a user's local machine and so is designed to be portable and easy to install. It is a command-line utility that operates much like the UNlX lpr line printer queuing utility.</p><p>Users invoke the job-submitter program to send volume visualization jobs to a remote vis-server. <ref type="figure" target="#fig_0">Figure  1</ref> shows the job submission dataflow between NetV modules. The job-submiuer takes two arguments: the name of a script file and the name of a binary data file. optional arguments include flags to:</p><p>force data cogy Force the remote vis-server to transfer a new copy of the data file and purge its old copy. The need for this option will be discussed later in this stion.</p><p>Attempt to use a particular vis-server host.</p><p>If there are already jobs in the queue, don't spool this job.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>use host donotspool</head><p>If the vis-serva is already processing a job, the jobsubmitter prints the number of spooled jobs and a message explaining that there will be a short delay.</p><p>If the user indicates that the resulting image is to be disphyed on the graphics workstation that originated the job, the job-submitter calls the xhosr(1) utility to add the vis-server to the list of hosts allowed to display on the local machine.</p><p>The job-submitter only transfers the binary volume data across the network the h t time the data is submitted for rendering. 'There are three reasons for this: volume data sets are usually large, transferring large data sets across a network takes a long time, and users usually render the same data set repeatedly. Volume data files are not put in the NetV spool directory, but rather in a cache directory named with the user's ID number and hosts".</p><p>The data file, with its original name, is reused as long as the data file does not change on the user's machine. A new symbolic link is made from the data file into the NetV spool directory each time the user submits a job. Caching the data file on the vis-server saves time and prevents redundant network transfers. Cached data files am purged from the cache directory by the queue manager program when the files have not been used in the previous 24 hours.</p><p>The job-submitter program and the remote job-&amp;ver </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="33.">The Jobreceiver</head><p>Job-receiver processes are spawned automatically by the UNIX i u t d daemon program on a vis-server in response to a network senrice request from a jobsubmitter. The only command-line argument passed to the job-receiver is the path to the NetV spool directory. A new job-receiver pmcess is spawned for each job sub-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>mitted.</head><p>Upon opening an SNet connection, the job-receiver receives an initial packet of information from the job- submitter. The packet contains the name, size, and time stamp of the volume data file to be rendered, the name and ID number of the user, the name of the client machine, and a forcedatacopy flag. The job-receiver responds with a pixket that describes the vis-server's state. The packet contains the number of jobs in the requested queue, and whether the renderer for this queue is currently processing. The pBcket also contains a flag indicating whether the rendem has been disabled by a system manager, and a flag indicating whether the data file to be rendered is already present on the vis-server's disk and has an associated time stamp that matches the time stamp of the file on the client's disk.</p><p>Next, the job-submitter reads the user's script into an intemal data structure and then sends this information across the SNet connection as a stream of data packets. The job-receiver stores the script data into an internal data structure and then invokes the NetV script write routine to store the script data in a file in the NetV spool If the job-receiver determines that the data file to be rendered either doesn't exist on the vis-server, exists but is out of date, or the user has requested a new copy, the job-submitter reads the data file into memory and then writes it to the socket used by SNet. The job-receiver reads from the socket and saves the data to a file in a cache data directory. The binary data transfer does not use the SNet protocol but instead passes data across the socket connection via the SDSC binary I D library 171 to ensure that the data is stored in the vis-server's native binary file format even if it is ditkent than the client's directory.</p><p>native binary file format. The job-receiver next creates an information file in the cache data directory that wntains the time stamp of the data file as it existed on the client machine. This file is used by subsequent jobreceiver processes to determine whether the data file on the user's host has been modified.</p><p>The job-receiver finally establishes a symbolic link from the data file in the cache directory into the NetV spool directory, creates a "ready" file in the spool directory, and then sends a signal to the queue-manager program indicating that a job has arrived. The "last-modify" times of the data and information files am explicitly updated by the job-receiver every time a new symbolic link is made from the data file. This prevents the queue manager from purging the data and information files as unused.</p><p>The names of the files put in the NetV spool directory share the same prefix (the fivedigit process ID number of the job-receiver process). Their su*es indicate what they contain. The "last-modify" time of the ready file indicates how long the job has been in the queue. The oldest files in the spool directory are processed first by the queuemanager.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">The Queue-manager</head><p>At run-time, the queuemanager takes as its only argument the path to the base NetV spool directory. The queue-manager runs continuously as a daemon program watching for ready files to appear in NetV spool directories. <ref type="figure" target="#fig_1">Figure 2</ref> shows the queue-manager and job rendering dataflow.</p><p>The queue-manager spends most of its time sleeping, but wakes up every two minutes or when it receives a signal from a job-receiver process indicating that there is work to do.</p><p>The queue-manager is designed to handle any number of render queues, although at present the set of queues must be determined at compile time. When the queue manager finds a ready file, it spawns an appropriate rendering process and passes the names of the script file. data file, and ready file to the renderer on the command line.</p><p>If the spawned process fails to execute or dies prematurely, the queue-manager reads the script file and sends an error message via electronic mail (e-mail) to the user. The script, data, and ready files are then removed from the spool directory so that other jobs can bubble to the top of the queue.</p><p>The queue-manager maintains an internal table of active child rendering processes so that it can ensure that only one of each type of renderer is running at any given time. The queue-manager also maintains a "renderer busy" file so that job-receiver processes can determine the state of the rendering queues easily.</p><p>After the renderer successfully creates an image file, the queue-manager spawns an image-handler process to return the rendered image to the user. The queue-manager may also spawn another render job at this point if there are jobs in a queue.</p><p>The queue-manager cleans old data files out of the cache directory and cleans old image files out of the temporary directory. Data files and their associated time stamp files that have not been used in the previous 24 hours are moved. Policy regarding removal of old image files will be discussed in section 3.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">The Renderer(s)</head><p>The NetV system currently uses the SDSC Alliant FX/2800 as its vis-server. The job-receiver, queuemanager, renderer, and image-handler all run on the Alliant. The renderer is based on volume visualization routines from the Alliant Volume Visualization Environment (AVolVE) library [lo] developed at Alliant Computer Systems Corporation. Highquality images can be rendered relatively quickly since compute-intensive AVolVE rendering routines take advantage of the parallel-processing capabilities of the FX/2800.</p><p>In general, a NetV renderer has the following responsibilities: Read spooled files</p><p>Invoke the NetV script reader to read and store the contents of a spooled script. Read the binary data file into memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initialize</head><p>Initialize all rendering parameters including viewing, windowing, and classification strwtures. perform precalculations.</p><p>Map the threedimensional data set onto a twe dimensional image plane using the usersupplied data classification parameters (rendeting time is proportional to data set size, image size, sample step, and the number of semitransparent substances in the volume). NetV doesn't specify the method used by the rendem to find renderable primitives. AVolVE uses raycasting, but renderers using surfacefitting methods would also be acceptable.</p><p>Remove the data and ready files from the spool directory, and e-mail the program's success or failure to the remote user. The rendered image is stored in a file in a temporary directory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Render</head><p>Clean up</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.">The Image-handler</head><p>The name of a NetV script file is the only argument to the image-handler. The image-handler is responsible for returning a rendered image to a user according to &amp;he instructions the user has placed in the script file. Experimental options include: (1) display the image in a window on a remote display device, (2) copy the image file itself to a writable directory on a remote disk, and (3) send the image file directly to a hardcopy queue at SDSC. If the image-handler encounters a problem while processing these options, it e-mails an e m message to the user.</p><p>Image return options yet to be implemented include:</p><p>(1) send the image file to a remote machine using the SDSC queued file transport (QFT) utility, and (2) email an encoded, compressed version of the image to the user. If the user has not requested hardcopy, the imagehandler removes the image file from the temporary disk area after processing the other image return options. Image files not removed by the image-handler are assumed to have been submitted to a hardcopy queue.</p><p>The queue-manager allows these image files to remain on disk for one week before they purged to ensure that they move to the front of the queue and get recorded. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Vis-server Host</head><p>Hardcopy I submitter Preliminary results have shown that a high-quality, 800x800 pixel image of a one-megabyte data set can be submitted, rendered, and returned in less than half a minute. This test was run both on-site and from another facility several miles away with no appreciable difference in speed. Small images (250x250 pixels) of a o n e hundred-kilobyte data set can be submitted, rendered, and returned in less than six seconds. To generate a similar image of the same data talres two minutes on a Sun SPARCStation I, and 40 seconds on an SGI 4DDlOVGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">hture Directions</head><p>The following are some of the ways that NetV will be modified and enhanced in future versions. Some of these projects are in progress and some of them are still just ideas.</p><p>Transporting volume and image data across low bandwidth networks will require adding data compression and uncompression modules to the NetV job-submitter, job-receiver, and imageretum modules.</p><p>An additional experimental rendering program is under development for the SDSC nCUBE 2 parallel processor (128 nodes). The nCUBE host will be an additional vis-server, and volumeimaging jobs will be submitted to the nCUBE NetV renderer in the same way that they are submitted to the NetV renderer running on the SDSC</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hardcopy Host</head><p>Alliant, The nCUBE renderer will perform the same rendering functions that the rendem on the Alliant handles. but rendering will be spread across many more processors. Impressive rendering speeds have been achieved by partitioning the data set into jobs of eight (or more) data slices per processor.</p><p>As the list of experimental vis-setvers and NetV renderers grows, it may prove beneficial to be@ spooling rendering jobs to thc least loaded visserver or to spool jobs to the most appropriate vis-server based on the size of job's data set Another option is to dedicate some vis-serveas to batch animation jobs and other vis-servers to interactive jobs. Most scientists currently perform postcomputation visualization, however "tracking" and "steering" of simulation codes running on a supercomputer via real-time visualization are becoming possible. By invoking the NetV jobsubmitter as a command line utility, computational simulation programs could pass data in real-time to remote imaging engines so that users could track the progress of their computation visually. NetV could similarly be used in the compu Wobserve P-of a compuWobserve/steer scenario.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions</head><p>Public-domain and commercial volume visualization software packages do not always provide adequate interactivity due to a user3 lack of access to high-end hardware. NetV is one solution to this problem.</p><p>NetV is a platform for providing widely-available access to powerful, centralized vis-servers. NetV uses a portable job-submiuer program on a user's local machine to communicate with a collection of four programs running on a remote vis-server. The vis-server programs receive jobs, manage the rendering queues. render images, and return tendered images to users. The system is extensible to new vis-servers and can incorporate other volume imaging software easily.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Overview of NetV job submission dataflow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Overview of NetV job processing dataflow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3</head><label>3</label><figDesc>shows image return dataflow. Image files may be stored and returned in any of the roughly 20 image file formats supported by the SDSC Image Tool suite [ 111. The user indicates the format of choice in the NetV script. Hardcopy queues at SDSC are accessed via the SDSC vpr queuing utility [ll]. Any number of vpr command-line options can be included in the NetV script. Hardcopy options include color paper, several types of film, and videotape.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>Overview of image return dataflow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>User's Host ............ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ..... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</figDesc><table><row><cell>Image b File</cell></row><row><cell>4. Results</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">CH3046-0/91/0000/0239i$Ol .OO 0 1991 IEEE</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>Mike Bailey, the director of the visualization group, has been a constant source of inspiration and support. Thanks to the whole SDSC visualization team for the SDSC image library, image tools, and vpr. Our appwiation also goes to Jim Montine at Alliant for developing AVolVE and helping us get started with i t This work has been supported through major funding from the National Science Foundation and the State of Califomia. The opinions, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect the views of SDSC, General Atomics, or their sponsors.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A New &apos;Inlook&apos; on Life</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Argiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vanzandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">V</forename><surname>Bancroft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Plessel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Memtt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P</forename><surname>Walatka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scientific Visualization in Computational Aerodynamics at NASA Ames Research Center</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
		</imprint>
	</monogr>
	<note>Computer</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Visualization Expanding Scientific and Engineering Research Opportunities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Brittain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Aller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C. ; T S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the First IEEE CorJerence on Visualization. IEEE Computer Society DeFanti</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="89" to="95" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note>Computer</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Drebin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">; P</forename><surname>Ha</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Visualization Computing EnvirOnment for a Widely Dispersed Scientific Community: State of the Art in Data Visdzutwn</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Dyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">T</forename><surname>Elvins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcmillan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mosher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH 90 Course Notes, Course N u m b 27</title>
		<meeting><address><addrLine>Dallas, Texas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="52" to="58" />
		</imprint>
		<respStmt>
			<orgName>University of New Mexico</orgName>
		</respStmt>
	</monogr>
	<note>Sun Techndogy</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A pn&gt;cedural Interface for Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Montine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First IEEE Conference on Visualization</title>
		<meeting>the First IEEE Conference on Visualization</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1990-10" />
			<biblScope unit="page" from="36" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Image Handling in a Multi-vendor Envi&quot;enf</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Nadeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">T</forename><surname>Elvins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Bailey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second IEEE Conference on Visualization</title>
		<meeting>the Second IEEE Conference on Visualization</meeting>
		<imprint>
			<date type="published" when="1991-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simple Network User Notes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Nadeau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">San Diego Supercomputer Center Technical Report</title>
		<imprint>
			<date type="published" when="1991-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Distributed Visualization at Los Alamos National Laboratory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Phillips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="70" to="77" />
			<date type="published" when="1989-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The Application Visualization System: A Computational Environment for Scientific Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stowell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Upson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Faulhaber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kamins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laidlaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schlegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vroom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gurwitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="30" to="42" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
	<note>NCSA access</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Yen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename><surname>Beford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Kempf</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Three-dimensional Stereoscopic Display and Model Control System for Great Iakes Forecasts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Marshall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First IEEE Conference on Visualization</title>
		<meeting>the First IEEE Conference on Visualization</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1988-08" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="15" to="16" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
