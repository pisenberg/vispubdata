<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Integration of Visualization and Scientific Calculation in a Software System</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Stuttgart Computer Center</orgName>
								<address>
									<addrLine>Allmandring 30</addrLine>
									<postCode>D-7000</postCode>
									<settlement>Stuttgart 80</settlement>
									<region>FRG</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Stuttgart Computer Center</orgName>
								<address>
									<addrLine>Allmandring 30</addrLine>
									<postCode>D-7000</postCode>
									<settlement>Stuttgart 80</settlement>
									<region>FRG</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ruhle</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Stuttgart Computer Center</orgName>
								<address>
									<addrLine>Allmandring 30</addrLine>
									<postCode>D-7000</postCode>
									<settlement>Stuttgart 80</settlement>
									<region>FRG</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Integration of Visualization and Scientific Calculation in a Software System</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This paper presents the problems and advantages of the integration of scientific computations and visualization into one common program system. An important point is the direct feedback of information from the visualization into an ongoing simulation. Some strong and weak points of the varying approaches in different software packages are shown. The visualazation component of the program system developed at our computer center and the advantages of its integration into the overal system is explained. Finaly the weak points in our system and the open work items to deal with them are described.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Scientific visualisation is used to comprehend the behaviour of scientific or technical systems. These systems are often simulated using high performance computers <ref type="bibr" target="#b3">[4]</ref>. The turn around time for doing calculations and analysing their meaning through visualisation is reduced, if the scientist or engineer can visualize data during an ongoing calculation or if he can directly manipulate the calculation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">What Does Integration Mean?</head><p>Scientific work using computers consists of different steps like problem modelling, input generation, simulation and visualization. Integration means, that these steps should not be considered separately. Instead they should be done consistently in a homogeneous environment. Consistency concerns multiple compunents of the overall software system. Different approaches and codes exist which cover more or less of the overall task of dealing with sci-entific problems on computers. The following subsections show areas where consistent approaches are useful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Models and their Structuring</head><p>Most of the modern software systems have their code structured into modules. Modules are the basic building blocks in packages like apE <ref type="bibr" target="#b1">[2]</ref> or AVS <ref type="bibr" target="#b8">[8]</ref>. They can be connected via a data flow network, or executed via a command language, like in RSYST <ref type="bibr" target="#b6">[6]</ref> or PAW <ref type="bibr">[l]</ref>. AVS and apE were specifically developed for the visualisation area. Their networks are well suited for asynchronous, parallel execution of modules with interactive user interference. It was not intended to have a common working model during the scientific simulation and the visualization phase. Data from calculations is converted into a representation appropriate for the package.</p><p>Scientific problems are usually also separated into basic components. But they are seldomly modelled as data driven networks of modules describing the basic components. Traditionally scientists are used to develop program driven code, which consists of basic components. These components often need to be executed repeatedly or iteratively. The execution of modules can be controlled by a programing language or by scripts written in a command language. To our knowledge, the data flow networks of current network based packages don't support module loops or recursive execution of module chains, nor dynamic, calculation controlled restructuring of parts of the network or dynamic generation of new networks.</p><p>The software system RSYST had its origin in the simulation area. Modules represent basic scientific components. Complex systems are modelled by combining modules in module sequences. They are formulated in a command language which allows to build loops, to execute other sequences, to interrupt execu-tion of module sequences and to restart arbitrary module sequences. Through recursive execution of module sequences it is possible to deal with timesteps in timedependent calculations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Feedback of Information</head><p>Via feedback of information a scientist can steer an ongoing simulation. By manipulating the graphical representation of data produced during an o n g e ing calculation the information feedback is initiated. This task is much easier accomplished, if a common data representation is used within the visualization part and the simulation part of the overall code.</p><p>In the module network approch feedback data has to flow up against the usual data flow direction. Initial implementations of networks in available packages only support a one way data flow. Therefore information feedback is not possible.</p><p>In RSYST data is not directly exchanged between modules. Instead all data is stored on databases. Every module fetches its information from a database, does its calculation and writes back results to a database (see <ref type="figure" target="#fig_0">figure 1)</ref>. Thus, there is no u p or downstream flow of data. Data can reach every module by executing a module sequence in a loop. This approach makes it also very easy to feed initial conditions into a module a t startup, whereas the results of other modules or interactive input replaces the initial conditions after the first module sequence loop. In a data flow network this would mean, that two datastreams are connected to the same input port of a module. This is usually not possible. It would make a conditional selection of an input data stream necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Data Storage and Distribution</head><p>Networks of modules can be very memory consuming. An output dataset, which is split and then flows into two other modules exists as three copies in memory within the three separate processes. New versions of network and module implementations seem to solve this problem by passing memory pointers, pointing to the same region of shared memory.</p><p>In RSYST data is stored in a database. Multiple databases can be in access at the same time. Databases can reside in memory, on a local disk, on a remote disk or can be accessed via a link between two RSYST systems on different machines.Access to objects in the memory database can be done using pointers very similar to the network case. Data objects in a memory database can also be accessed via pointers. The main difference is, that in RSYST datasets are stored as data objects, which have names, whereas datasets in packages using networks are identified through their position in the network. . Software tools are growing, based on these packages. Software like PAW, RSYST, AVS, apE, which recognized the same requirements, were initially designed to have a much broader functionality. They all have standardized interfaces for fetching and storing of data. The main idea is to have selfcontained data objects of certain types, with descriptive parts and data parts. Whereas most of the packages made the storage format public, RSYST hides the internal representation by using abstract data types (ADT) and ADT modules for operations. By using one of the packages for the data representation, users don't have to convert data into other formats to apply different tools to their datasets. It is also easier to develop application independent tools for visualisation, if they all use the same data representation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Common Data Representation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Common User Interface</head><p>A common user interface for all modules in a package makes it much easier for users to deal with the package. The user interface part of the overall package has to be implemented just once. No additional code development for the user interface is necessary within the tools. ApE gives an example for a common user interface within one package.</p><p>When the development of RSYST started, workstations did not exist. The initial user interface was command oriented using alphanumeric terminals. Currently an X Window based user interface is implemented as an alternative to the command input.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Common Dialog Interface</head><p>By using a centralized dialog system between the user and a system like RSYST, advantages can be made generally available. Input can either come from a keyboard, from a batch input file, or from text data objects from a database. The behaviour of the system can be adapted to a batch or interactive working mode without any code development by an application programmer. For simulations a command oriented input with storage and execution of whole input sequences as an alternative to a mouse/window oriented working mode is absolutely necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Common Output and Helpsystem</head><p>By implementing a common output and help system based on existing database objects in RSYST the system obtains a common look and feel. Output can be redirected centrally and the output volume can be changed centrally. In addition users get support in the handling of a system environment with many functionalities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Integrated Visualization Modules</head><p>Most of the modern visualization software packages establish module chains, where data is converted using filters, mappers, etc.. A problem within this conversion path is, that original information is lost. E.g., if an original temperature range from 400.K to 500.K stored in a dataset is mapped to the range 0. to I., as input for a colorization module, you have problems afterwards to add a colorbar, where the mapping of the original temperatures to the chosen colors are displayed. The original data values don't reach this point in the module chain, and are therefore not available for output with the color bar.</p><p>In RSYST many of the processing steps, which are separated into different modules within other packages, are integrated into the visualization modules. There are two module implementations, one based on Phigs(+), the other on Silicon Graphics GL. Both understand the same command sequences. By using GL additional functionality like transparency and texture mapping can be used, which is not available in the PHIGS standard. An important idea is to maintain the relationship between the original data and their graphical representations.</p><p>The whole functionality can be controlled either in a mouse/window oriented mode or by command sequences. In the case of GL, the native popup menues are used. Within PHIGS the menues are generated in a separate view using PHIGS calls. This allows the software to be portable across different window system platforms, because no elements of the current window system are used. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic Components</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Examples of Current Object Types</head><p>Examples of different display methods for volumetric data included in RSYST are given in figure 2. An example output of multiple views and objects of different type is shown in figure 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="0">LEVEL</head><p>This graphical object displays functions of the type F(x,y). X and y define a grid, which can be nonaequidistant and nonorthogonal. The grid coordinates x and y can either be stored in two vectors or two matrices of the type x(m,n) and y(m,n These function values are converted into colors. Normal vectors based on the nodes or in the elements can also be read in. They are used to display the object with a lighted surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="0">CAKE</head><p>This graphical object visualizes three dimensional scalar fields with grids either defined by three vectors for the x, y and z coordinates or with three dimensional fields for the x, y and z coordinates. The outer surface of the field is displayed by converting field values at the surface into colors via a color map. Cubes can be cut out of the original grid, showing field values at these newly defined surfaces. The color map can be loaded from the database and can be modified interactively. An additional display method represents every mesh through shrinked subcubes using the same coloring method. A special case of this are dot clouds. By selecting every nth plane to be displayed, the update speed during interactive manipulation can be significantly increased.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Storage</head><p>It is possible to store setups for single objects separately, or together with the object data. Setups for whole views, or for the who module state can be stored. Object data can be added in all cases. If object data is not stored with the setups, these setups can be used later as templates for sequences of different datasets from the database. Storage of setups is done using standard data objects like parametersets, vectors, matrices, etc. Color tables are e.g. stored as 3,n matrices. Thus other RSYST modules for the generation, display and manipulation of these data objects can be applied to the visualization part of the data processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Problems and Future Work in RSYST</head><p>Due to the different origin of the program system RSYST, compared to newer network based designs in visualization systems there are stronger and weaker points. Ongoing and future work on RSYST is explained to deal with the weak points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Parallel Execution of Modules</head><p>Currently modules are linked together into one executable program. Every module is executed sequentially. For simultaneous execution of the visualization module together with the simulation module sequence a parallel execution of modules is necessary. This will be realized by introducing language elements for building of module groups, whitch are executed in parallel and synchronization points for module groups.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Parallel Access to Databases</head><p>In the current version of RSYST databases can be read by multiple processes, but there are no mechanisms implemented to synchronize parallel read/write access to databases by multiple modules running in parallel. The current intention is to implement a s e p arate database process, which handles requests, syncronizes them and passes on pointers into shared memory regions within a memory database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Module Types</head><p>Current module types are program not data driven. Every module in a module sequence reads its input data, when it is started, does its calculations, and writes its results as data objects to databases. Then it finishes its execution and gives back control to the control program, which starts the next module.</p><p>A module with a new structure fetches all pointers to data objects in an initial execution step. During later repeated executions of such a module it first checks, using the pointers, whether a data object, it has to process, has changed. It will only perform any actions if a data object has changed. In any case it gives back control to the control program immediately afterwards.</p><p>Typical interactive modules have an internal event loop. They run in parallel to the other modules, until they are explicitely ended through user action, or by shutdown through the control program. These modules are e.g. used to generate parametersets on the database, which are input by the simulation modules during every recursive execution of their module sequence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Execution across Machine Boundaries</head><p>RSYST has been distributed between different machines. The conversion of the internal data representation is handled within RSYST. The distribution has been based on X25. Work w i l l be invested to convert the lower levels of the used software to TCP/IP, to communicate in a network of unix machines.</p><p>Currently the distributed execution between machines is based on a distributed PHIGS library, which was implemented at the University of Stuttgart Computer Center, or on DGL, the Distributed Graphics Library from Silicon Graphics. Both Libraries are offered on the CRAY-2 of the Computer Center.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Feedback from Visualization into Simulations</head><p>Feedback from a visual representation into an ongoing calculation is possible in the current system environment. Mouse picks have to initiate the storage of parameter values on the database. These values are read by modules in a repeatedly executed module sequence. They cause appropriate actions by the modules. Examples might be to select the initial points of a particle trace integration within the graphical representation of a fluid flow field. The flow calculation module then starts the calculation of particle positions over time for future timesteps. Such an example still has to be implemented, to test the behaviour in an environment with parallel executing modules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>Different Software Systems have their specific advantages and disadvantages. Our aim is to extend the functionality of RSYST, so that the advantages of data flow networks can be incorporated into the originaly command driven shell oriented programming environment.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Asyncronous Visualization during Calculation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Different methods to display volumetric data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Display of different object types. (See color plates, page 428.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>7], netCDF [5], HDF [3]</head><label></label><figDesc>An area of development at different sites is the generation of common data description, handling and storage mechanisms. Typical examples are CDF [</figDesc><table /><note></note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">PAW, a general-purpose portable software tool for data analysis and presentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Brun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Couet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vandoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Zanarini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computing in High-Energy Physics</title>
		<meeting><address><addrLine>Oxford</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Dyer</surname></persName>
		</author>
		<title level="m">apE, Providing Visualization for a Statewide Supercomputing Network. Proceedings of the 24th Semi-Annual Cray Users Group Meeting</title>
		<meeting><address><addrLine>Trondheim, Norway</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="237" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">HDF, a file format for data sharing; NCSA data link</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Folk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Aichele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Pohlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Riihle</surname></persName>
		</author>
		<title level="m">Scientific Visualization in a Supercomputer Network</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m">Eurographics Workshop on Visualization in Scientific Computing</title>
		<meeting><address><addrLine>Clamart, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Glenn</forename><forename type="middle">P</forename><surname>Rew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Unidata netCDF: Software for Scientific Data Access. Workshop on &quot;Data Structures and Access Software for Scientific Visualization</title>
		<meeting><address><addrLine>L. A. Treinish; Dallas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="volume">90</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Riihle</surname></persName>
		</author>
		<title level="m">RSYST an Integrated Modular System for Reactor and Shielding Calculations; Conf. on Mathematical Models and Computational Techniques for Analysis of Nuclear Systems. Ann Arbor, USAEC Conf-730414P2</title>
		<imprint>
			<date type="published" when="1973-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A Software Package for the Data-Independent Management of Multi-Dimensional Data; in &quot;State of the Art in Data Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Treinish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGGRAPH 89 Course Notes</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note>gust</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Andries van Dam: The Application Visualization System: A Computational Environment for Scientific Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Upson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Faulhaber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jr</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kamins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Laidlaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Schlegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Vroom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Gurwitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applications</title>
		<imprint>
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
