<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">T w o Widely-Different Architectural Approaches to Computer Image Generation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Park</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Eo</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Samsung Advanced Institute of Technology</orgName>
								<address>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Kim</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">K</forename><surname>Choi</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Samsung Advanced Institute of Technology</orgName>
								<address>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Alexander</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Electrical Engineering</orgName>
								<orgName type="department" key="dep2">FT-10</orgName>
								<orgName type="laboratory">Image Computing Systems Laboratory</orgName>
								<orgName type="institution">University of Washington Seattle</orgName>
								<address>
									<postCode>98195</postCode>
									<region>WA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">T w o Widely-Different Architectural Approaches to Computer Image Generation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Among several systems from the UWGSP (University of Washington Graphics System Processor) series, two recent architectures were designed for imaging and graphics. One of them, UWGSPS, has already been completed and is being used for selected applications, while the other one, UWGSP4, is being implemented now. These two systems use parallel and pipelined architectures for high performance graphics operations. U WGSPS uses only commercially available off-theshelf chaps, and consists of a TMS34020 graphics syst e m processor and four TMS34082 floating point coprocessors that can be configured into pipelined or SIMD modes depending on the algorithm. UWGSP4, however, uses dedicated ASIC (Application Specific IC) chips for higher performance, and consists of two main computational parts: a parallel vector processor with 16 vector processing units, used mainly for image processing, and a graphics subsystem which utilizes a parallel pipelined architecture for image synthesis. I n this paper, the computer graphics aspects of both UWGSPS and UWGSP4 will be described.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Computer image generation, i.e., computer graphics, became very important and widespread in many applications during the last decade, and is expected to grow continuously in conjunction with image processing and multimedia in the 1990's [l]. This trend has been accelerated by technology development (such as VLSI technology, parallel and pipelined architectures, image display technology, and interactive graphical user interfaces), and proliferating application areas (particularly scientific visualization, animation, machine vision, simulation, medical and military area, and multimedia).</p><p>Among parallel and pipelined architectures, pipelining has been the predominant technique for computer graphics. Parallelism, however, can provide several advantages, such as reconfigurability according to different graphics algorithms, modularity, and so on. The problems to achieve high computational performance are load balancing between the computation stages in a pipelined structure and synchronization and data passing between processors in a parallel architecture. A combined architecture incorporating both parallelism and pipelining may provide better performance than a single architecture system if the above problems are solved. Some commercial graphics workstations use both parallelism and pipelining, for example, the AT&amp;T Pixel Machine 12).</p><p>For high-speed graphics, the operations most frequently used in graphics should be supported by hardware. In particular, antialiasing, alpha blending, transparency, and texture mapping, as well as basic Gouraud shading and 3-D vector drawing, are common features which are implemented with hardware in high-end graphics systems.</p><p>The Image Computing Systems Laboratory (ICSL) at the University of Washington has been developing a series of imaging and graphics workstations, referred to as the UWGSP (University of Washington Graphics System Processor) series. Among the four systems (UWGSP1 to UWGSP4), UWGSP3 was completed in early 1990 <ref type="bibr" target="#b3">[3]</ref>, while UWGSP4 is currently under development <ref type="bibr" target="#b4">[4]</ref>. Both UWGSP3 and UWGSP4 utilize parallel and pipelined architectures for image processing and computer graphics. UWGSP3 has a reconfigurable architecture for pipelined or parallel processing using only off-the-shelf programmable VLSI chips, and is a low-cost and medium-performance imaging and graphics workstation, whereas UWGSP4 will be a medium cost and high performance system with a highly parallel and pipelined architecture employing dedicated ASIC chips. This paper describes the architecture of UWGSP3 and UWGSP4. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Overview of UWGSPS</head><p>The UWGSP3 system, based on the NeXT computer platform, was completed in January 1990, and the UWGSP&amp;HI, a host-independent version which can work with any host computer via a simple interface card, has been subsequently developed at ICSL to accommodate various host computers without any modification of the hardware except the interface card (31. Interfaces for the VME bus and the Micro Channel Architecture (MCA) bus have been completed.</p><p>Based on the TMS34020 graphics system processor, coupled with four TMS34082 floating point coprocessors on a daughter board, UWGSP3 delivers moderate performance for image and graphics processing, and provides the following features: 0 2k x 2k x 32 bit (a total of 16 Mbytes) roamable video/frame memory. 0 32 bits per pixel that can be configured either as 24-bit true-color pixels with 8 overlay bits or four 8-bit pseudo-color pixels.</p><p>0 1,280 x 1,024 60 Hz noninterlaced color display with 1:l screen aspect ratio. 0 160 MFLOPS peak performance for high-speed</p><p>integer and floating-point image processing and graphics functions. 0 Hardware zoom, roam and cursor support.</p><p>0 Fast cine display up to 60 frames/sec. 0 3 different color lookup tables (LUT) per color plane, which can be used simultaneously for region of interest (ROI) operations. Supports window-oriented user interface. 0 Multiple UWGSP3s can be configured in the same host computer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Hardware Architecture</head><p>As shown in <ref type="figure" target="#fig_2">Fig. 1</ref>, UWGSP3 centers around the Texas Instruments TMS34020 graphics system processor, while four TMS34082 floating point coprocessors are used for the computation-intensive operations, producing up to 160 MFLOPS of peak performance.  Each of the TMS34082 coprocessors has 128 kbytes of dedicated memory to store patches of data transferred from the video RAM (VRAM) or DRAM of the TMS34020, intermediate results, and program code. This coprocessor memory is implemented with fast static RAM so that memory access can be performed in a single cycle. After a patch of the data is transferred to the coprocessor memory, the TMS34020 signals the coprocessor to start executing its instructions. The data bus between the TMS34020 and the coprocessors can then be used to transfer another section of the data from the TMS34020 to a different coprocessor. If the same code is loaded into each of the coprocessor's memory prior to the execution, all four coprocessors perform the same processing on different data sets, after a slight delay caused by the data transfer. This is very similar to the SIMD (single instruction multiple data stream) mode of parallel processing. If different program codes are used in the coprocessors, MIMD (multiple instruction multiple data stream) processing can also be performed. In addition to the dedicated memory, a shared memory of 8 kbytes, implemented with 4-port memory chips, enables the coprocessors to communicate with each other. The coprocessor board can be configured as a 4-stage pipelined processor, in which the image data generated by the last stage are transferred back to the VRAM and displayed on the screen.</p><p>The system memory on the UWGSP3 board includes 16 Mbytes of VRAM for the frame buffer and 1 Mbyte of DRAM for program and data storage. The 16 Mbytes of VRAM are configured as 2k x 2k x 32 bits, in which each 8-bit slice of the buffer constitutes four color planes: red, green, blue, and overlay. An 8-bit image can be stored in any of these four planes and displayed in gray scale or pseudo color, while a 24-bit true-color image can occupy the red, green, and blue planes with 8 bits each. Since the display resolution (1,280 x 1,024) is smaller than the frame buffer, the display window can be roamed around the frame buffer. For example, up to 64 512 x 512 x 8-bit images or 256 256 x 256 x 8-bit images can be stored in the frame buffer, and multiple frames can be displayed up to 60 frames/sec. The memory control signals for both the VRAM and DRAM are provided by the TMS34020, thereby greatly simplifying the logic circuits.</p><p>The video display subsystem consists of four Brooktree Bt460 RAMDACs and additional hardware circuitry. The RAMDACs receive pixel data from the VRAMs and convert them to analog signals of red, green, and blue. Each RAMDAC contains a 512 x 24 bit lookup table (LUT) that is used to generate 8bit values each for red, green, and blue components. The red, green, and blue outputs of each RAMDAC are then summed together and used to drive the color monitor. To display 8-bit images, only one RAMDAC, corresponding to the color plane where the image is stored, is enabled and outputs the red, green, and blue components. When displaying 24-bit true-color images, each of the red, green, and blue RAMDACs drives one color component. In this case, the overlay RAMDAC can be enabled to superimpose text and annotations on top of the images. The RAMDACs also include the functions of hardware cursor and zoom, where the zoom factor can range from 1 to 8 in integer steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Software Architecture</head><p>UWGSP3 was designed for both image processing and graphics applications, and we have developed a collection of image processing and computer graphics functions; the 3-D computer graphics applications will be focused on here. There are three major categories of the UWGSP3 graphics software: a 3-D graphics rendering pipeline, graphical data management, and graphics libraries.</p><p>The 3-D graphics rendering pipeline software renders 3-D objects provided by higher-level functions (along with scene parameters, such as viewing location, light intensity, and light direction), and displays them on the screen from a perspective view. Several rendering modes are supported: wire-frame, coloring, flat shading, and Gouraud shading. The pipeline, which consists of four TMS34082 coprocessors, supports graphics operations such as coordinate transformations, back-face culling, clipping, rasterization, Z-buffer comparison, and shading. The pixel data generated by the pipeline is transferred back to the TMS34020, which stores it in the correct location of the frame buffer.</p><p>The graphical data management program runs on the host computer and utilizes many graphics functions implemented on UWGSP3 including the 3-D graphics rendering pipeline. Users can generate complex 3-D scenes by creating a hierarchical data structure of 3-D objects, and compiling the program on the host computer with the supplied graphics database management library. The library contains functions to support the opening and closing of a structure, adding and deleting an element to and from the structure, changing attributes of the structure and defining viewing and lighting parameters. When the program is executed, the structure defined by the user is transformed into a more compact form with the hierarchical information contained into individual data structures, and transferred to UWGSP3. The functions residing on UWGSP3 disassemble the received data into polygons, and each polygon is passed to the 3-D graphics pipeline until all of the polygons in the scene are drawn on the scene.</p><p>In the case of standard graphics libraries, the UNIX version of the TIGA (Texas Instruments Graphics Architecture) software has almost been completely implemented for supporting 2-D graphics capabilities, and Ithaca Software's HOOPS is also being ported to UWGSP3 to support 3-D graphics. A ray-tracing program has been implemented in UWGSP3, which generates very realistic images, including shadows, transparency through an object, and reflections from other objects. On traditional minicomputers, these programs require an exorbitantly high computing time, but, on UWGSP3, a high-resolution l k x Ik image can be generated in one minute.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Lessons Learned from UWGSP3</head><p>Data communication between the TMS34020 and the four TMS34082s became a bottleneck for the 3-D graphics pipeline execution as the graphics routines were optimized further. There is only one data bus between the TMS34020 and the four TMS34082s, as shown in <ref type="figure" target="#fig_2">Fig. 1</ref>. Therefore, the bus became saturated while the TMS34020 distributed polygon data to the four coprocessors and read back the final rendered data in order to draw the polygons on the screen, causing a bottleneck. If the last stage coprocessor could write the final computation results (synthesized image) directly into the frame buffer, instead of through the TMS34020, then better performance would be obtained for graphics pipelined operations since the input and output data flows of the pipeline could be 3 Advanced Parallel and Pipelined Architecture</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overall Architecture of UWGSP4</head><p>Utilizing the experience gained with UWGSP3, we have designed and are now implementing UWGSP4, which provides very high performance for image processing and computer graphics. It exploits both parallel and pipelined architectures. Most of the image processing functions are performed in a parallel fashion, whereas graphics operations are mainly pipelined (but also somewhat parallelized). <ref type="figure">Figure 2</ref> shows the block diagram of the UWGSP4 system: it consists of a parallel vector processor, a graphics subsystem, and a shared memory and interconnection network <ref type="bibr" target="#b4">[4]</ref>.</p><p>The parallel vector processor is the main computational unit in UWGSP4, through which image processing operations and general arithmetic computations are performed. In particular, most image processing operations (such as image transforms and convolution) can be accelerated by parallel and vector processing, since an image can be divided into several sub-image blocks, and multiple processors can perform operations on the sub-image blocks in parallel. In addition, most low-level image processing functions require carrying out the same operation on a large amount of data. The parallel vector processor consists of 16 vector processing units which can operate independently or in synchronism. Interprocessor syn-chronization logic allows the 16 vector processing units to successfully operate in a parallel fashion.</p><p>Each vector processing unit consists of dual floating point processors, scalar and vector register files, an instruction and data cache, a master control ASIC, a pixel formatter unit (PFU) for pixel data handling, and a bus interface unit (BIU). The dual floating point processors operate in an alternating fashion with a 20</p><p>MHz two-phase clock, whereas the other units operate with a 40 MHz clock. The master control ASIC fetches and interprets instructions, and controls all parts of the vector processing unit so as to execute the desired arithmetic and logical operations. The PFU handles data conversion between floating point and integer values "on-the-fly". Most image pixel data consists of 8-bit or 16-bit unsigned integer values, whereas image computations should be performed in floating point for accuracy. The PFU relieves the floating point processors from having to perform pixel formatting, so that the processors can concentrate on the main computation without continually breaking up the pipeline. The peak computational performance of the parallel vector processor is 1,280 MFLOPS.</p><p>In order for the parallel vector processor to perform image processing at high speed, the shared memory and the interconnection network should provide highspeed data transfer, since most of the performance limitations in parallel computing systems, e.g., UWGSP3, arise from memory access bottlenecks and data transfer rate. The shared memory and the interconnection network provide a 1,280 Mbytes/sec data transfer rate. This rate can supply each vector processing unit with one-word (32 bits) data in every two clock cycles (50 nsec). This is relatively slow compared with, for example, a Cray X-MP supercomputer, where each vector processing unit can be supplied with two loads and one store of a 64-bit data word every 8.5 nsec <ref type="bibr" target="#b6">[5]</ref>. However, the parallel vector processor is optimized for image processing, which requires less data access, and not optimized for general computations which may require high memory access bandwidth.</p><p>The shared memory consists of many memory modules in a 32-way interleaved fashion, with which the required 1,280 Mbytes/sec memory access rate can be achieved. Scalar data, a column or row vector, or 2-D array data with arbitrary strides can be accessed from the shared memory with a single command. This function is supported by the port controller and the memory controller ASICs. There are eight port controllers and eight memory controllers in the shared memory, all of which are implemented in CMOS gatearray ASICs. For communication between the port U Local Bur <ref type="figure" target="#fig_4">Figure 3</ref>: Block diagram of the graphics subsystem of UWGSP4 controllers and the memory controllers, an 8 x 8 x 40bit crossbar network is implemented. Each port controller is connected to two vector processing units through a high-speed bus, and two port controllers share one high-speed bus. In order to provide a 1,280 Mbyteslsec data bandwidth, four high-speed buses, operating with an 80 MHz speed, are used.</p><p>Since most graphics applications require operations using very small size matrices (3 x 3 or 4 x 4) in comparison with image processing, the parallel vector processor is not an optimum computational engine for graphics operations. Therefore, a separate graphics subsystem was designed to support fast generation of realistic 3-D graphics images, to display the synthesized images into the screen, and to interface with the host computer. The TMS34020 maintains the host interface, acts as a central controller for the UWGSP4 system, and controls a 1,280 x 1,024 x 8-bit overlay buffer. The data transfer rate between the host computer and UWGSP4 through the host interface is 20 Mbyteslsec.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The Graphics Subsystem of UWGSPI</head><p>The graphics subsystem of UWGSP4 consists of three major parts: the geometry engine, the raster engine and the system controller, as shown in <ref type="figure" target="#fig_4">Fig. 3</ref>.</p><p>The graphics subsystem is connected to two highspeed buses through bus interface units (BIUO and BIU1). To deliver host commands to the parallel vector processor or the geometry engine, the system controller stores the host commands in a specific region of the shared memory via BIUO. BIUO is also used to transfer images from the shared memory to the frame buffer of the graphics subsystem at the rate of 40 Mpixels/sec. This transfer rate enables the system to display a lk x lk image in 25 msec. BIU1, on the other hand, is used t o transfer the geometric data of polygons and other drawing parameters to the geometry engine.</p><p>The key features of the geometry engine and raster engine are: a polyhedral object model, 3-D vector drawing, Gouraud shading, antialiased vector and polygon drawing, transparency, and hardware texture mapping.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">The Parallel Pipelined Geometry Engine</head><p>The geometry engine is responsible for the frontend processing of the global 2-buffer algorithm used The geometry engine consists of nine 40 MHz Intel i80860 FUSC microprocessors operating in a parallelpipelined fashion for maximum performance. The i80860 has an on-chip pipelined floating-point processor which enhances the performance of the system, since most of the geometric computations for computer graphics are floating-point intensive. <ref type="figure" target="#fig_5">Figure 4</ref> shows its detailed architecture. The first i80860, called the head processor, communicates with the shared memory through a high-speed bus to access the actual polygons by traversing an object hierarchy. The head processor calculates the total amount of computational effort required for rendering each polygon and distributes it such that all pipeline stages have approximately equal loads. The head processor has an 8k x 64 SRAM as its local memory, to store its instruction code and data as well as the structural information of the object hierarchy (the physical data is stored in the shared memory).</p><p>The graphics engine is not limited to a specific graphics algorithm. Since each pipelined stage is provided by a general floating point processor (i80SSO), any new graphics algorithm can be programmed and applied to the geometry engine by changing the firmware of the i80860s. The head processor is followed by two identical pipelines. The head processor distributes polygons to the first stages of the two pipelines according to their requests. The number of pipelines required is determined by the processing speed of the head processor, the bandwidth of the high-speed bus, and the performance of the raster engine consisting of BBI ASIC chips. Our baseline system design has high flexibility and can be reconfigured to meet a wide variety of performance requirements.</p><p>In general, the loads of the four stages in the pipeline of the geometric engine are assigned as follows: The boundaries of load assignments, however, can be moved dynamically for load balancing. Each i80860 reads input data from the input FIFO (which is the output FIFO of its previous stage), processes it, and writes the results to its output FIFO. The geometry engine can sustain a performance of over 200,000 Gouraud-shaded 100-pixel polygons per second.</p><p>The hierarchical object definition method requires object flattening; in this process, the object hierarchy is traversed and each polygon is extracted. The architecture of the graphics subsystem supports this tors facets feature. Manipulation of the object hierarchy will be done by the head processor of the geometry engine. Calculation of the polygon surface normal and vertex surface normal (obtained by averaging the surface normals of the polygons containing the vertex) can be also performed in the head processor. These will make it easy to port standard 3-D graphics packages, e.g., PHIGS+ or HOOPS, into UWGSP4.</p><p>The polygon data are received from the host computer through the host interface, and are stored in the shared memory. In order to facilitate the hiddensurface removal process, which is one of the most timeconsuming tasks in image synthesis, they need to be transformed into a new coordinate system, i.e., the "eye coordinate system." Such a coordinate transformation requires vector-matrix multiplications, which are well suited to the i80860s.</p><p>If all objects (polygons) in the scene are blocking (opaque), we can eliminate those objects which are back-facing with respect to the eye from the illumination and hidden surface removal processes, because they cannot contribute to the final synthesized image. This is called back-face culling. Since, on the average, about half of each object in the scene is back-facing with respect to the eye, the number of polygons will be reduced to half the original number after back-face culling. Back-face culling requires only a simple vector inner product between the polygon surface normal and the eye vector (whose direction is from the eye to the polygon), and it saves many unnecessary computations, resulting in an effective performance increase by nearly a factor of two.</p><p>It is very difficult to model the illumination of a natural object based on the real properties of light. A popular model used in computer graphics today is to compute the color of an object surface from the light source, surface characteristics, and its orientation with respect to the light source. The calculations are classified into three components such as the ambient, diffuse reflection, and specular reflection terms. In the case of a transparent object, an additional term, the transmittance, is added. This popular illumination model (including transparency) is used in the graphics subsystem.</p><p>Sophisticated smooth-shading techniques are necessary to render the smooth surface in the polyhedral object model. Gouraud shading has been most popular while Phong shading is more computationally expensive than Gouraud shading, but can generate more realistic images [6] <ref type="bibr" target="#b8">[7]</ref>. However, since the quality of the images generated by Gouraud shading is acceptable in most engineering applications, and Phong shading requires more complicated hardware, the Gouraud shading scheme is used in the graphics subsystem. And many objects in the scene may lie on the screen boundary or out of it. As these objects cannot contribute to the output image in the local illumination model, 3-D clipping is required to reduce the number of polygons to be rendered and to facilitate scan conversion.</p><p>The input t o the BBI is in the form of spans of pixels which can be generated by slicing the polygon horizontally. These are often called scan line commands, or simply spans. A span consists of the X and Y coordinates of the starting point, a run length, the function values a t the starting point, and their X derivatives. The BBI interpolates the scan line command by iteratively adding the X derivatives to the corresponding function values.</p><p>In the case of triangles, the X and Y derivatives of the function values are constant. Thus it is not necessary to update those derivatives at every scan line and every pixel, which results in a significant reduction of the computational cost. The output image of this scheme is not identical to that of real Gouraud shading, but the results are acceptable and indistinguishable from those of real Gouraud shading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Raster Engine</head><p>The raster engine in the graphics subsystem of As mentioned in the previous subsection, geometry transformation, clipping, lighting, and projection for computer image generation are performed by the geometry engine. The BBI's primary role is the rendering of the span data delivered by the geometry engine. The BBI can perform the following functions: polygon span drawing, 3-D line drawing, Gouraud shading, antialiasing, transparency, alpha blending, plane masking, bit plane and block image transfer, texture mapping, and multi-window control. Four BBIs operate in parallel to deliver a peak polygon rendering throughput of 200,000 Gouraud-shaded 100-pixel polygons per second.</p><p>There are seven instructions for the BBI: scan conversion of general spans, scan conversion of texturemapped spans, general line drawing, color and Z-value fill, bit plane and block image transfer, mask register load, and screen refresh counter load. The BBI receives instructions from the geometry engine through the command distributor, interprets the instructions,  <ref type="figure" target="#fig_8">Figure 5</ref> shows the block diagram of the BBI. Each BBI has two separate input register files. While the BBI executes an instruction from one input register file, it also fetches the next instruction from the command distributor and stores it t o the second input register file, effectively eliminating the instruction fetch time. Each BBI has eight channels, consisting of an interpolator and alpha blending unit to calculate new pixel values for red, green, and blue colors, an alpha value for transparency/coverage, a Z value for image depth, U and V values for texture mapping, and a Y value for 3-D vector drawing. A quadratic interpolation scheme is used for U and V, whereas the other values are linearly interpolated. The new pixel value is selected from four different values, i.e., the pixel data transferred from the command distributor, the interpolator output, the alpha blending unit output, and the masked values in each channel, according to the instruction. After the BBI computes a new pixel value, the Z channel compares the new Z value with the old Z value (stored in the Z buffer) to determine whether the new color and Z values should be written into the frame buffer and Z buffer. The BBI also contains address generators to generate row and column addresses for the frame buffer and Z buffer, and to select the drawing buffer or the refresh buffer in the double buffer structure. The image data transfer speed from the shared memory to the frame buffer is 40 MpixelsJsec. Therefore, 40 consecutive l k x l k images (e.g., cine angiogram) can be displayed every second. The BBI also generates memory control signals to control the VRAMs in the frame buffer and Z buffer. If any memory refresh or display refresh commands are received from the system controller, the BBI generates appropriate control signals for VRAMs.</p><p>The double frame buffers consist of two 2,048 x 1,024 x 32-bit buffers built using VRAMs, with each pixel being 32 bits deep to support realistic animation with 24-bit true color. The remaining eight bits are used for storing alpha values which are used for transparency and antialiasing. Although each frame buffer is built with 2,048 x 1,024 pixels, the actual screen resolution is 1,280 x 1,024. Therefore, we have two remaining memory areas each of which has a dimension of 768 x 1,024 x 32 bits. These memory areas are used for storing the image data for texture mapping. Since they are directly accessible from the BBIs, the texture mapping operation can be performed very fast.</p><p>The Z buffer, whose size is 1,280 x 1,024 x 24 bits, is implemented with VRAMs as well, which significantly speeds up the global Z buffer algorithm. Each pixel has a 16-bit offset Z value and an 8-bit base Z value. The image data stored in the frame buffer is transferred to the RAMDACs to be displayed on the screen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusions</head><p>Two different architectures have been designed for high performance imaging and computer graphics. The first architecture, UWGSP3, which consists of exclusively commercially-available processors (one graphics system processor and four floating point coprocessors), has structure that is reconfigurable according to the imaging and graphics algorithms being implemented. UWGSP3, which has moderate performance, is applicable to an image display and processing system for an electronic filmless PACS (Picture Archiving and Communications System) for radiology which requires a high display speed with moderate computing power <ref type="bibr" target="#b9">[8]</ref>.</p><p>The second architecture, UWGSP4, was designed with highly parallel and pipelined structures, and consists of two parts, performing imaging and graphics separately. The graphics part uses a combination of parallel and pipelined architectures to achieve a graphics performance of 200,000 Gouraud shaded 100pixel polygons/sec and 250,000 3-D shaded 100-pixel lineslsec. Since the imaging and graphics performance of UWGSP4 is very high (e.g., simulation results show that less than 0.2 sec is required for a 2-D FFT of a l k x l k image), it has wide application areas including scientific visualization, medical imaging, various military applications, animation and simulation. In particular, by integrating high performance imaging and graphics into one system, UWGSP4 meets the requirements of those application areas where both imaging and graphics must be supported in a single platform: for instance, volume rendering and ray tracing as a p plied to medical imaging (e.g., image reconstruction and bone detection from X-ray CT) to aid in planning radiation therapy and surgery by allowing the physician to visualize a 3-D model of the extracted target on the screen.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Block diagram of UWGSP3-HI</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>VF' Board # 2 vpFigure 2 :</head><label>22</label><figDesc>Board #, Parallel Vector Processor and Display Graphics Subsystem Shared Memory &amp; Interconnection Network Block diagram of UWGSP4 separated, reducing the amount of traffic on the bus.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>for 3 -</head><label>3</label><figDesc>D computer image generation. The processes performed in the front-end engine include geometric transformation, back-face culling, illumination, clipping, projection, triangulation, span generation, etc., while the back-end processor, called the raster engine, is implemented with four bit-blit interpolator (BBI) ASIC chips. The main functions of the raster engine are scan conversion based on the 2-buffer algorithm and digital differential analyzer (DDA) calculations for line and polygon drawing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Block diagram of the parallel-pipelined geometry engine</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>e</head><label></label><figDesc>Stage 1: Transformation of coordinates and vece Stage 2: Light modeling (illumination) 0 Stage 3: Clipping polygons against the six view e Stage 4: Triangulation and span generation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>UWGSP4</head><label></label><figDesc>consists of four CMOS standard cellbased ASICs, called bit-blit interpolators (BBI), and VRAMs comprising double frame buffers and a Z buffer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 :</head><label>5</label><figDesc>Block diagram of the BBI ASIC and performs proper operations.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">CH3046-0/91/0000/0042/$01.00 @ 1991 IEEE7-I</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Feiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hughes</surname></persName>
		</author>
		<title level="m">Computer Graphics: Principles and Pmctice</title>
		<imprint>
			<publisher>Addison-Wesley Publishing Co</publisher>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The Pixel Machine: A Parallel Image Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Potmesil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Hoffert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="69" to="78" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A High Performance Floating-point Image Computing Workstation for Medical Application</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Mills</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of SPIE Medical Imaging IV</title>
		<imprint>
			<biblScope unit="volume">1232</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Alexander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Moon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A High Performance Parallel Computing System for Imaging and Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Pacific Rim Conference</title>
		<meeting>IEEE Pacific Rim Conference<address><addrLine>Victoria, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-05" />
			<biblScope unit="page" from="223" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Simulation Study of the CRAY X-MP Memory System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Computer</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="613" to="622" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Continuous Shading of Curved Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gouraud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Computers</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">6</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Illumination for Computer Generated Pictures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">T</forename><surname>Phong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications ACM</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">RadGSP: A Medical Image Display and User Interface for UWGSP3</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename><surname>Yee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Haass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Rowberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of SPIE Medical Imaging V</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="292" to="305" />
			<date type="published" when="1444" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
