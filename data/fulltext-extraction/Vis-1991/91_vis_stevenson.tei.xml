<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualisation Tools for Semi-Conductor Modelling Software</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duncan</forename><surname>Stevenson</surname></persName>
							<email>duncan@csis.dit.csiro.au</email>
							<affiliation key="aff0">
								<orgName type="institution">CSIRO Division of Information Technology GPO</orgName>
								<address>
									<postBox>Box 664</postBox>
									<postCode>2601</postCode>
									<settlement>Canberra</settlement>
									<region>ACT</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Visualisation Tools for Semi-Conductor Modelling Software</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>This case study looks at the issues involved in using a visualisation software package to extend the scope of an existing suite of semiconductor modelling software. The visualisation software and its hardware platform represent the &quot;state of the art&quot; in powerful interactive workstation visualisation systems. The semiconductor modelling software is the result of joint development between research groups and industry, and is at the leading edge in terms of the underlying models used and the solution techniques employed. The result of this case study is the identification of a range of important issues 10 be considered when applying &quot;off the shelf&apos; visualisation software to a real-world scientific problem.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>In spite of the current proliferation of visualisation software packages, a vast amount of engineering and scientific data continues to be displayed with very simple techniques. This case study looked at one instance of using a visualisation software package in an environment where mature engineering software had been previously displaying quite complex spatial data in very limited manner. The purpose of this study was not to force the visulisation software solution upon the engineers working on the project, but rather to investigate the issues and problems, the costs and benefits involved if such a solution were to be attempted.</p><p>The questions being addressed were: How well do the generic features offered by the visualisation software package meet the particular needs of the application; what particular expertise is needed to implement a visualisation solution; how does one realistically assess the costs and benefits of introducing visualisation tools into a mature software environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Visualisation Software AVS</head><p>The visualisation software in this case study was the Application Visualisation Software package (AVS) from Stardent Inc., running on a Stellar GS2000 workstation. AVS contains a set of applications (modules) for performing standard visualisation operations on data, a graphical interface for operating each of those modules and a graphical interface for controlling the flow of data from one module to another. The user can interact with displayed data using a supplied "geometry viewer" module which provides rotation, expansion, translation and variations in lighting conditions [l].</p><p>AVS also contains a programming environment, giving the programmer high level access to the graphical user interface, the data flows and the program control <ref type="bibr" target="#b1">[2]</ref>. The Stellar GS2000 used here had 4 processors, vectorising capability and a 24-bit colour hardware-assisted display. The combination of AVS and the Stellar GS2000 was sufficiently powerful to let the user perform interactive visualisation tasks in real time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Semi-Conductor Modelling Package</head><p>The application used in this case study was the Everest semi-conductor modelling software suite developed jointly by the Rutherford Appleton Laboratory (SERC, UK) together with other academic and industrial partners in UK and Europe <ref type="bibr" target="#b2">[3]</ref>. The software provides an environment for simulating the behaviour of semi-conductor devices, and includes modules for: 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>Setting the impurity doping.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>Setting the geometry of the device.</p><p>Generating and adaptively refining the finite-volume mesh structure. Solving the highly non-linear partial differential equations which govern the electrical behaviour in the device. Post-processing and displaying the results of the solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Visualisation Requirements for Everest</head><p>need for the user to see the data involved: 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Each of the five stages of the Everest suite produces a</head><p>The geometry of the device is specified numerically, and the user needs to view the resulting device to check the correctness of the specification. The user needs to confirm that the impurity doping matches the geometry of the device.</p><p>The software developer needs tools to view the finite-volume mesh, though the eventual aim is to isolate the applications user from the details of the mesh structure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>The solution of the equations for semi-conductor devices is time consuming. A visual display of partial solutions, though not currently available, would be useful in monitoring progress.</p><p>The final solution contains, among other data, the electric potential at each point in the device, or more correctly at each node in the finite-volume mesh. Visual display of this data, and of quantities derived from it, is the main target of the software suite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Visualisation Limitations of Everest</head><p>The visualisation limitations of Everest stem mainly from the hardware environment in which it was developed and lack of availability of, or awareness of, modern visualisation techniques. Computing power was limited to, typically, Sun 3 series workstations. Graphical display was limited to monochrome or 8-bit colour workstations and simple colour plotters, using a 16-level rainbow sequence for colour coding. The main limitations are: 1.</p><p>Lack of interactive three-dimensional display modes for displaying the three-dimensional objects (device geometry, mesh structure) of the problem. Lack of control over the colour sequences used to display the resulting data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Use of a Software Demonstrator</head><p>This case study produced demonstrator software to show how the usefulness of a software package such as Everest might be extended with modern visualisation techniques provided by a visualisation package.</p><p>Two attributes of such an extension were being explored. First, the extension should be cheap to implement in terms of software development effort, without disturbing existing mature production code, and second, the extension should offer the engineer benefits that are significantly better than those currently available.</p><p>The maturity of the Everest software meant that wholesale incorporation of Everest source code into locally written AVS modules was not feasible, considering the cost of design, coding and testing such an exercise. The engineers who use Everest generally want to interact with the results of the computation, and in real time, rather than interact with the process of computation. The exception is the solver module, where views of partial solutions would be of interest, but this was not attempted because of the programming overheads involved.</p><p>The decision, therefore, was to tap directly into the data flows between the Everest modules rather than disturb the existing code. The problem then became one of matching Everest data types and visualisation requirements with AVS data structures and display capabilities.</p><p>Demonstrator AVS modules were written to use Everest data sets in two places in the semi-conductor modelling sequence. First, the device geometry and mesh structures were displayed as wire-framed three-dimensional objects so that the engineer could visually inspect them as a quality control step before starting on the costly process of solving the simulation. Second, one set of results (the electric potential at each node of the mesh) was displayed as a colour-coded three-dimensional object with interactive cross-sectioning capability and interactive colour adjustment so that the engineer could inspect the solution both globally and via interactively chosen cross sections. Two types of output were produced, image-based with pixels representing the nodes in the finite element mesh and polygon-based, with polygons representing the facets of the finite element mesh.</p><p>The examples shown in the colour figures are for a simple test case, the "comer diode", where a cube of semiconductor material sits on a larger block to form the diode. A voltage is applied across the diode via contact plates, one on the top of the smaller block, and one on the bottom of the larger block.</p><p>The particular colour sequence chosen to represent the voltages is a saturated rainbow, being the colour sequence commonly used in Everest. <ref type="figure" target="#fig_0">Figure 1</ref> shows an isometric snapshot of the diode, taken from the AVS geometry renderer. <ref type="figure" target="#fig_1">Figures 2 and 3</ref> show the electric potential in cross sections through the X and Z axes, with the potential shown by both height and colour. <ref type="figure" target="#fig_3">Figure 4</ref> shows the voltages associated with the particular colours. <ref type="figure" target="#fig_4">Figures 5 and 6</ref> show what can go wrong when the user does not take into account the colour models upon which the visualisation software is based. They represent the minimal test case, two units wide, two units deep and two units high. The voltages were given for the 13 nodes involved, and AVS interpolated them to colour fill the surfaces of the polygons for display. The interpolation was done in HSV space, rather than along the saturated rainbow, and produced deep magentas rather then the expected yellows and greens.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>The conclusions from this case study take the form of recommendations to a system designer who is considering using a visualisation package to enhance a proposed or existing application software package.</p><p>1. The underlying models used in the visualisation should match the physical reality of the application, and the system designer should be able to draw on expertise in the physics of the application at an early stage in the design.</p><p>This case study was a good example of a potential mismatch between model and reality. The visualisation tools relied to a large extent on local linearity of the attributes being displayed. The AVS geometry renderer applied filled polygons to convert mesh structures into solids, and the cross-section image displays were filled with square pixels. In reality, the diode semi-conductor behaviour is a surface effect, operating in a thin layer where the outer surfaces of two solids meet, and is highly non-linear. Linear representations of behaviour will be approximately correct in the body of each component of the device, but not in the region of most interest, namely near the junction between components.</p><p>An awareness of this type of problem would allow for appropriate data and display structures to be designed at the beginning of the project. 2. The system designer should be able to draw on expertise in the field of modem visualisation techniques..</p><p>Most application scientists have not had much experience of modem visualisation techniques, and are not likely to allow for their use unless assisted. This means that many existing application software packages, if not designed with visualisation of the data in mind, may not be suitable for enhancement using visualisation packages. In the Everest case, good access to the data flows between the five components was part of the original design, and the AVS demonstrator had no problem accessing that data. This was not the case within the equation solving component, and easy access to the partial solutions during the solving phase was not possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>The system designer should understand, and allow for, the colour model and colour interpolation schemes used in the visualisation package.</p><p>The old mode of a colour display, with a limited set of discrete colours as a legend, breaks down with 24-bit colour visualisation like that provided by AVS. AVS interpolates colours according to an inbuilt colour space, without explicitly informing the user, and unless the chosen colour legend is linear in that colour space, intermediate colours will be generated that are not recognisable as part of the colour sequence.</p><p>Further, the viewer may well be accustomed to quantising the data, and displaying only those colours shown in a colour legend. In creating colour filled polygons for display, AVS performs some form of interpolation of the colours at the vertices of the polygons to generate the filling colours, and these filling colours are not generally shown in a discrete colour legend.</p><p>This will be even more significant at the software development stage, where, typically, very few data points are used, and the interpolation is most noticed. In the case study, a three node mesh, using a standard (AVS supplied) saturated "rainbow", interpolated from red to blue to get magenta instead of green, having selected a hue at 180 degrees away from the expected hue in HSV colour space.</p><p>4. The overall system should be properly balanced with respect to the effort involved and the desired results.</p><p>The system designer should keep in mind the end result</p><p>of an exercise such as is shown in this case study, which is to provide a good display of the data at hand. Where there is value in using new display forms, such as threedimensional rendering of a solid, and it is cost-effective in terms of programmer time, user training and configuration management, then it is worth considering. Where the existing simple display mechanisms work, such as the monochrome display of Volrage-Current curves (the "bread and butter" of semi-conductor design) in Everest, then the existing situation should not be disturbed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.</head><p>The system designer should consider the use of a demonstrator prototype.</p><p>This case study was done with a demonstrator prototype. Simple test cases were chosen to show the users the "look and feel" of the visualisation package, and to assess the scale of difficulties involved in the particular case of this application package and visualisation software. A good appreciation was gained for the areas of greatest visualisation benefit and for the development effort needed to achieve them.           </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Isometric view of the corner diode, with surface voltage colour-coded on a saturated rainbow colour legend.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Voltage at points in a cross-section, parallel to the M plane, through the corner diode. shown both by height and colour.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Voltage at points in a cross-section. parallel to the XY plane, through the corner diode, shown both by height and colour.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Rainbow colour legend showing voltages displayed in Figures 1,2, and 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Corner diode showing spurious colourcoding of voltages due to incorrect interpolation in the native colour space of AVS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Cross-section through the diode displayed in Figure 5, again showing the spurious colourcoding of voltages due to incorrect Interpolation in colour space. (See color plates, page 433.) ~ Visualization Tools f o r Semi-Coricluc.tcjr Modeling Sojmare, D. Stevenson, pp. 360-363.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 1 :</head><label>1</label><figDesc>Isometric view of the corner diode, with surface voltage colour-coded on a saturated rainbow colour legend.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 2 :</head><label>2</label><figDesc>Voltage at points in a cross-section.parallel to the YZ plane, through the corner diode, shown both by height and colour.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 3 :</head><label>3</label><figDesc>Voltage at points in a cross-section, parallel to the XY plane, through the corner diode, shown both by height and colour.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 4 :</head><label>4</label><figDesc>Rainbow colour legend showing voltages displayed in Figures 1,2, and 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 5 :</head><label>5</label><figDesc>Corner diode showing spurious colourcoding of voltages due to incorrect interpolatior in the native colour space of AVS Figure 6: Cross-section through the diode displayed in Figure 5, again showing the spurious colourcoding of voltages due to incorrect interpolation in .:olour mace</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The author would like to acknowledge the hospitality of the Informatics Department of the Rutherford Appleton Laboratory (Science and Engineering Research Council, UK) who hosted him for seven months in 1990 when this work was done, and also the support given by his employer, the CSIRO Division of Information Technology, for the visit.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Application Visualisation System User&apos;s Guide&quot; (AVS Version 2.0)</title>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Stardent Computer Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Application Visualisation System Developer&apos;s Guide&quot; (AVS Version 2.0)</title>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Stardent Computer Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Modelling Semi-conductor Devices in Three Dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Greenough</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gunasekera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Fitzsimons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A W</forename><surname>Mawby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Towers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Tools for Process, Device and Circuit Modelling</title>
		<imprint>
			<publisher>W.Crans, Boole Press</publisher>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
