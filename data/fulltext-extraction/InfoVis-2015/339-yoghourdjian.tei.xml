<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">High-Quality Ultra-Compact Grid Layout of Grouped Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vahan</forename><surname>Yoghourdjian</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Dwyer</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Graeme</forename><surname>Gange</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Kieffer</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karsten</forename><surname>Klein</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Marriott</surname></persName>
						</author>
						<title level="a" type="main">High-Quality Ultra-Compact Grid Layout of Grouped Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2015.2467251</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Network visualization</term>
					<term>graph drawing</term>
					<term>power graph</term>
					<term>optimization</term>
					<term>large-neighborhood search</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1: Grid systems in typographic layout, UI design and an example of our proposed grid layout for a power-graph. With graphic designers playing an increasing role in the design of user interfaces for phone, tablet and desktop operating systems, this traditional grid-based design aesthetic is becoming more popular in these media. A case in point is Microsoft&apos;s &quot;Modern&quot; interface which seeks to unify app-design across devices. This resurgence of the grid-design aesthetic in new media leads us to reexamine some of the aesthetic assumptions that have been made in designing layout methods for network diagrams.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Computer science researchers (and others) have been exploring different ways to automatically layout and draw diagrams that represent graphs or networks for many decades. Because of the difficulty of the network layout problem and limited computational power of early computers, the primary focus was on developing fast heuristic techniques with low time complexity. As computer power rapidly increased through the '90s and 2000s, many researchers continued to focus on fast heuristic techniques in a race to see who could untangle the biggest graphs.</p><p>Other research led to the development of complex multi-stage layout frameworks for higher quality layout of smaller networks. For example, a seminal paper by Batini et al. <ref type="bibr" target="#b7">[12]</ref> proposed a multi-stage layout framework called Topology-Shape-Metrics (TSM) which led to the development of orthogonal graph-drawing techniques which were designed to produce drawings with orthogonal connectors. Another family of multi-stage approaches arose following Sugiyama et al. <ref type="bibr" target="#b43">[48]</ref>, specifically for layered-layout of directed graphs. One feature common to the layouts produced by all of these different algorithms for network layout is the use of white space to clearly separate nodes and an implicit visual emphasis on edges rather than nodes. This leads to relatively sparse layouts in which most of the display space is empty. The main contribution of this paper is to investigate a new network layout aesthetic based on ultra-compact grid layout.</p><p>This new aesthetic is motivated by the grid arrangements that are used almost universally by designers in typographical layout, and are increasingly common in other media such as computer interfaces <ref type="figure">(Fig.  1</ref>). Layout in this tradition is built upon a grid that divides the viewing space into regular cells. Individual elements may span grid-cells but-as much as possible-the grid subdivisions are respected. This approach provides a regularity to the layout that leads the eye in a familiar and comfortable way <ref type="bibr" target="#b33">[38]</ref>. Recent studies of network layout have shown that grid arrangements are memorable <ref type="bibr" target="#b31">[36]</ref>, when people arrange small diagrams themselves they prefer to place nodes at grid-points <ref type="bibr" target="#b38">[43]</ref> and such placements are also preferred to TSM-based orthogonal layout <ref type="bibr" target="#b25">[30]</ref>.</p><p>As we have mentioned, TSM-based orthogonal layout techniques were also influenced by a grid-aesthetic, though probably more due to  (b) We can use power-graph like compartments to reduce the number of edges. A lot more structure is visible in this edge-compressed version of the graph from 2(a). For example, the outermost compartment makes it obvious that all states apart from "starting state" are cancellable, i.e. have a link to "trip cancelled". However, this TSM-based orthogonal layout still takes quite a large area. If coerced to a grid the dimensions would be 6 × 7, leaving 29 empty grid-cells.</p><p>(c) Here is the same state-machine shown using our ultra-compact grid-based layout which has grid dimensions 4 × 4 leaving only three empty grid-cells. This optimally compact solution was found in 0.464 seconds using the SAT solver. Although we do not explicitly minimise bends or crossings, our layout is equal to the TSM output in these respects and significantly reduces the overall area and edge-length. With the additional node area we are able to include more detailed descriptions of each state.  circuit layout traditions than typography. As <ref type="figure" target="#fig_1">Fig. 2</ref> shows, our new aesthetic leads to a very different visual style. It uses ultra-compact arrangement on a grid with group membership shown by containment in nested rectangular regions. This containment then enables the use of the power-graph convention <ref type="bibr" target="#b41">[46]</ref> to collapse edges. In such an edgecompressed view <ref type="bibr" target="#b13">[18]</ref> an edge from a group to another group implies all nodes in the first group are connected to all nodes in the second. Unlike virtually all existing approaches to power-graphs or network diagrams with clustering, we do not require that groups are hierarchical, making our approach applicable to other types of diagrams such as representations of overlapping set-membership ( <ref type="figure" target="#fig_2">Fig. 3)</ref>.</p><p>After exploring grid-design, this paper's second contribution is to investigate practical methods for producing ultra-compact grid layout that is of the highest-possible quality. Rather than developing a specialised algorithm we decided to explore more general purpose optimisation based approaches. One reason for this is that current frameworks for high-quality network layout separate the layout into a pipeline of different steps and so, the resulting layouts are often compromised because of the fixed trade-off between aesthetic criteria imposed by the pipeline. Furthermore the implementations of these methods are complex and brittle, as discussed in Sect. 6.</p><p>Since the time when pipe-line-based graph-layout methods such as TSM were conceived, generic technologies for solving combinatorial and mixed-integer optimization problems have improved by several orders of magnitude. Simultaneously, the computing power available on average desktop machines has increased exponentially. Optimisation problems that once took weeks to solve with home-sized computers can now be solved in seconds on cheap computers in the home.</p><p>We feel then, that the time is right to reassess network layout and see whether these general purpose optimization techniques can be usefully applied to solve simple mathematical models encoding such layout problems. One advantage of using such a generic approach is that it allows us to readily explore this new aesthetic by allowing us to rapidly create examples from different applications and with different aesthetic trade-offs (Sect. 2).</p><p>Thus, after developing a model for ultra-compact grid layout (Sect. 3), we compare the applicability of several generic optimisation techniques (MIP, CP and SAT) to this problem (Sect. 4). While useful for exploring the design of the layout model, we found that even the best of these solving technique was only practical (in terms of running time) for graphs of up to around 50 nodes.</p><p>A common fallback for solving difficult combinatorial optimisation problems is to use generic meta-heuristic techniques like tabu search, simulated annealing or genetic programming. Dozens of different techniques have been proposed. While not guaranteed to find an optimal solution they are routinely used to find "good" solutions to problems that are too hard to solve optimally using MIP, CP or SAT. We therefore developed a meta-heuristic to solve our layout problem.</p><p>We decided to use large neighbourhood search (LNS) <ref type="bibr" target="#b4">[9,</ref><ref type="bibr" target="#b37">42]</ref>(Sect. 5). This class of meta-heuristic is currently de rigueur for solving various transportation and scheduling problems. While we are not the first to try generic meta-heuristic approaches for network layout we are the first to consider LNS. Though not guaranteed to find an optimally compact solution our evaluation shows that our LNS heuristic found reasonably good layouts (when compared to the optimal layout) and scaled to graphs with 100 nodes.</p><p>In summary, the technical contributions of this paper are to: -Introduce a new ultra-compact grid-based aesthetic for network layout and explore the design-space (Section 2); -Present a declarative model of layout goals and constraints that allows us to rapidly evaluate different refinements and applications of these aesthetic criteria, solvable using generic constrained optimisation techniques and without the need for specialised algorithm development (Sect. 3); -Compare the efficiency of different generic optimisation techniques (MIP, CP, SAT) for solving our declarative model (Sect. 4); -Explore the use of a large-neighborhood-search based meta-heuristic to solve this declarative model. This allowed us to obtain compact grid layouts for graphs of up to 100 nodes in less than 5 minutes (Sect. 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">ULTRA-COMPACT GRID LAYOUT</head><p>In this section we present a new layout aesthetic for network diagrams that is based on grid layout in typography and we provide a number of motivating examples. The aesthetic incorporates the following layout requirements: R1 -Node content emphasis. Many applications have more than just simple labels associated with nodes, for example, rich graphics or text in paragraph or tabular form. In typography, grid-cells are packed quite densely in order to maximize the area devoted to this content. By contrast, orthogonal network diagram layouts are typically very sparse, devoting more space for edge paths, which-in order to minimize bends and crossings-may be very long. Networks featured in Figs. 1, 4, 5(b) and 6 all contain significant text and graphic content associated with each of the nodes. For this detail to remain readable at reasonable scales without resorting to interactive focus-and-context techniques (e.g. <ref type="bibr" target="#b23">[28]</ref>), compact node-placement is essential. A strong correllation between human preference and layout compactness is also observed in a recent study by Kieffer et al. <ref type="bibr" target="#b25">[30]</ref>. R2 -Proximity implies connectivity. If we are to devote less space to edge paths in our grid arrangements then we must rely more on the proximity of nodes to indicate connectivity. Recent studies have shown that layout that achieves such proximity is strongly preferred by readers of small diagrams <ref type="bibr" target="#b15">[20]</ref>. In addition, this objective indirectly addresses crossings simply because shorter edges are less likely to cross. Minimizing edge-length can sometimes be a more successful strategy for minimizing crossings than heuristics which directly address crossings, e.g. <ref type="bibr" target="#b14">[19]</ref>. R3 -Variable node dimensions. Some nodes may have significantly more content than others. Following typographical layout conventions, these nodes can be expanded to fit their content, but they must always fully fill a rectangular set of grid-cells. Furthermore, where different orientations of the node are possible (e.g. picture beside text or picture below text) the layout should choose the orientation to best suit the layout. <ref type="figure">Fig. 4</ref> demonstrates layout with variable node orientations. R4 -Containment. The semantics of many applications involve representing group membership over sets of nodes. In typography, such relationships are shown through nested rectangular enclosing regions. R5 -Flow. In applications where the directionality is important we would like flow to be shown in multiple directions, for example, leftto-right and top-to-bottom, as in document layout.</p><p>Part of the motivation for this work was the search for an effective layout method for edge-compressed dense, directed networks <ref type="bibr" target="#b13">[18]</ref>. Without compression, graphs that have only few nodes but many edges are already very difficult to read. For example, <ref type="figure" target="#fig_1">Fig. 2(a)</ref> shows the state-chart for a travel booking system with 13 nodes and 44 edges arranged using the commercial layout software, yFiles <ref type="bibr">[8]</ref>.</p><p>Figs. 2(b) and 2(c) show the edge-compressed version of the network with only 17 edges. In the compressed representation, an edge between two groups implies a biclique. That is, every node contained in the source group of the edge is the source of an edge to every node in the target group. Thus, precisely the same connectivity structure is conveyed but in a less cluttered way. Further, the grouping inferred <ref type="figure">Fig. 4</ref>: Links between major composers arranged with our model with the solver choosing the best orientations for nodes. Layout took 37.422 seconds using the SAT solver -disjunctions due to variable node orientations expand the search space.</p><p>by the edge-compression reveals structure, for example, it is obvious from the single edge adjacent to the largest group and the trip cancelled state that every state other than start is cancellable.</p><p>Figs. 2(b) and 2(c) compare layouts obtained by a standard TSM approach (yFiles) and by our model. Our layout model here keeps connected nodes close together (R2) while preserving group containment within rectangular regions (R4). Furthermore, the layout is as compact as possible while respecting node and group containments, thus maximising space for, and hence readability of node labels (R1). When node area is maximised in this way, we are able to include additional explanatory content for each node and the diagram becomes a more complete, stand-alone description of the state-machine. <ref type="figure">Fig. 4</ref> demonstrates the possibility to provide a very compact layout for a graph with nodes that require more than a single grid-cell to fit their content (R3). The network is a section of the "Composers Graph" that was one of the challenges for the 2014 Graph Drawing Conference contest <ref type="bibr">[1]</ref>. Each node is a composer for whom we want to show both biographical details and a portrait. We allow the textual biographical details to fill one grid-cell, while the portrait can go in an adjacent cell, either beside or below the text. The solver automatically chooses the orientation of each node that permits layout that is optimal with respect to the other layout requirements. <ref type="figure" target="#fig_2">Fig. 3</ref> is an Euler Diagram representing the research interests of members of our lab (anonymised). Set labels are also treated as nodes and laid out within the same grid system. Note that the containment (R4) is no longer a strict hierarchy yet our general layout model is still applicable. Drawing Euler diagrams under certain constraints such as convexity of the regions is not always possible. Actually realising the drawing in an aesthetic way is a further challenge. Both of these problems have seen a lot of interest from computer-scientists and mathematicians and sophisticated algorithms have been developed <ref type="bibr" target="#b39">[44,</ref><ref type="bibr" target="#b42">47]</ref>. Here, we have defined the layout for rectangular boxes with a relatively simple declarative model, and left both the problems of determining feasibility and (if possible) layout to the solver.</p><p>In <ref type="figure" target="#fig_6">Fig. 5</ref> we compare two different arrangements of a biological pathway network. In such pathways the direction of the edges is often very important, for example, indicating the direction of a reaction. It is therefore a common convention to show flow in such diagrams from top-to-bottom or from left-to-right. <ref type="figure" target="#fig_6">Fig. 5</ref>(a) uses a standard Sugiyama style <ref type="bibr" target="#b43">[48]</ref> layout obtained, again, with yFiles. This method assigns nodes to layers such that edges exclusively span layers. By contrast, <ref type="figure" target="#fig_6">Fig. 5</ref>(b) introduces a disjunction constraint which allows edges to flow either left-to-right or top-to-bottom. <ref type="figure" target="#fig_8">Fig. 6</ref>(b) shows a software-dependency graph. This network shows dependencies between types, methods and properties in C ♯ code and was obtained in a debugging scenario using the Visual Studio Code Map tool. This layout neatly illustrates the cause of the bug: that Square is the only sub-class of Figure not created by the GetNextFigure method. Code snippets and icons on each of the nodes give added context, again illustrating the need for node content emphasis (R1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">LAYOUT MODEL</head><p>In this section we present a high-level declarative model for placing grouped nodes in a grid layout that formulates the problem as a constrained optimisation problem 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Node-Placement Model</head><p>The high-level model for node-placement takes the following as input: 1. The set of leaf or base nodes B = {1, ..., n B } and the set of container nodes C = {n B + 1, .., n C } which contain groups of other nodes. 2. A fixed width w u and height h u for every base node u ∈ B. These are positive integers. 3. Every container node has a set of nodes that are contained inside it. These can be container or base nodes. This is specified by the Boolean matrix con <ref type="bibr">[u, v]</ref> which is true iff v ∈ B ∪ C is inside u ∈ C. The containment relationship need not be hierarchical. 4. The containment relationship gives rise to a non-overlap relationship between nodes. For convenience this is pre-computed and passed into the model. It is given by the symmetric Boolean matrix disj <ref type="bibr">[u, v]</ref> which is true if u, v ∈ B ∪C should not overlap. 5. For each pair of nodes u, v ∈ B ∪ C there is a non-negative desired distance dd <ref type="bibr">[u, v]</ref> between them with a non-negative weight ddw <ref type="bibr">[u, v]</ref>. The weight ddw <ref type="bibr">[u, v]</ref> is 0 if u is contained in v or vice versa. 6. A maximum grid size, g x and g y , both of which are positive integers big enough to ensure that they contain the optimal layout.</p><p>Neither con nor disj need to contain redundant constraints: for efficiency they should be minimal.</p><p>We experimented with different desired distances and weights. Following stress-based methods <ref type="bibr" target="#b21">[26]</ref>, we tried setting the desired distance between two nodes to the graph-theoretic-distance taking into account containment <ref type="bibr" target="#b1">2</ref> . We also tried simply setting the desired distance and weight to the edge adjacency matrix. Observing similar results for both approaches, we opted for the latter. 3. We require that the whole node fits on the grid: ∀u ∈ B, xf [u] ≤ g x and yf [u] ≤ g y . 4. The position, width, and height of the container nodes are also functionally dependent on the position of the base nodes; as the containers are just the bounding box of their constituents, so ∀u ∈ C, v ∈ B ∪C: <ref type="bibr">[u]</ref> and similar in the y-dimension. 5. The following disjunction ensures that nodes do not overlap: Objective function to be minimised: stress + αcc + βoc where α and β are fixed weights and the functions stress, cc and oc measure different aesthetic criteria, as follows.</p><formula xml:id="formula_0">xs[u] = min{xs[v] | v ∈ B ∪C ∧ con[u, v]} xf [u] = max{xf [v] | v ∈ B ∪C ∧ con[u, v]} w[u] = xf [u] − xs</formula><formula xml:id="formula_1">∀u &lt; v ∈ C s.t. disj[u, v], xf [u] ≤ xs[v] ∨ xf [v] ≤ xs[u] ∨ yf [u] ≤ ys[v] ∨ yf [v] ≤ ys[u].</formula><p>The stress term is the difference between the desired and actual distance between the nodes. Because we are using orthogonal connectors and grid layout we use Manhattan distance. We measure the distance between the closest points on the perimeter of the nodes rather than between the center of the nodes as this leads to considerably better layout in the case that the nodes are not squares. To compute this we use the functionally dependent variables:</p><formula xml:id="formula_2">dx[u, v] =      xs[v] − xf [u] + 1, if xf [u] ≤ xs[v] xs[u] − xf [v] + 1, if xf [v] ≤ xs[u] 0,</formula><p>otherwise.</p><p>We define dy <ref type="bibr">[u, v]</ref> symmetrically. Now,</p><formula xml:id="formula_3">stress = ∑ u,v∈B∪C ddw[u, v] • |dx[u, v] + dy[u, v] − dd[u, v]| .</formula><p>The other components of the objective function are designed to ensure ∀u ∈ B ∪C that compartments are compact cc = ∑ u∈C w[u] + h <ref type="bibr">[u]</ref>, that the entire layout is compact oc ≥ xf <ref type="bibr">[u]</ref>, and that it fits inside a rectangle with a given aspect ratio ar:</p><formula xml:id="formula_4">yf [u] ≤ ar • oc.</formula><p>A great advantage of using a constrained optimisation approach is that it is straight-forward to add additional constraint encodings based on additional aesthetic criteria. Thus, for the example presented in <ref type="figure">Fig. 4</ref> we add a constraint to dictate a fixed perimeter of size 2x1 for base nodes; placed either horizontally or vertically. In the flow layout in <ref type="figure" target="#fig_6">Fig. 5</ref> each source node should be either above or to the left of the destination node -another disjunction. Note that the optimisation problem that we tackle with our model is NP-hard as can be shown by reduction from the rectangle packing problem <ref type="bibr" target="#b30">[35]</ref>.</p><p>Initially we tried to use a single constrained optimisation model for both node-placement and edge routing. This modelled each edge using a fixed number of horizontal and vertical segments (some of which could be 0 length) and including a penalty term for each pair of segments to penalize possible edge crossings. However, this proved too slow for any but very small networks and so is currently still not practical. We therefore developed a separate heuristic algorithm for edge routing given the positions of the nodes on a grid.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Routing</head><p>The grid-aesthetic naturally suggests routing connectors between base and container nodes in an orthogonal-style, i.e. with straight-line segments aligned to the grid. Obviously, intersections between these orthogonal edge paths and node boundaries (other than the source/target of the edge) should be avoided. Edge paths should only intersect container boundary rectangles if the container is the source or target, or is an ancestor of the source or target.</p><p>Currently the standard for orthogonal connector routing is to route over an orthogonal visibility graph, followed by a "nudging" phase to centre edge segments in channels between nodes <ref type="bibr" target="#b45">[50]</ref>. Strict grid placement of nodes simplifies this problem considerably as we can route over the graph formed by the grid itself, intersected with the centre lines between each column and row of nodes, see <ref type="figure" target="#fig_8">Fig. 6</ref>. When we route an individual edge, we remove any edge segments which intersect nodes other than the start and end nodes, or segments intersecting containers which are not ancestors of the start and end nodes.</p><p>We also connect ports on the start and end nodes to each other. These port connections have zero cost in the subsequent shortest path finding problem between the start and end nodes. Thus, the shortest path will always run through the ports providing the shortest path between source and target. Otherwise, the cost of traversing each segment in the shortest path traversal (Dijkstra) is simply the length of that segment plus an additional penalty if traversing the edge would add a bend to the current path.</p><p>Finally, bundles of co-linear edge segments are constructed and an ordering within bundles that avoids unnecessary crossings is found  as suggested by Nöllenburg <ref type="bibr" target="#b35">[40]</ref>. This ordering is used to generate constraints for a simple quadratic program subject to separation constraints (with solution as per <ref type="bibr" target="#b16">[21]</ref>) to neatly space the edge segments in the available channels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">OPTIMAL NODE-PLACEMENT</head><p>The declarative model is a complete and precise mathematical formulation of the node-placement problem. In this section we evaluate three of the most widely-used generic techniques for solving such discrete constrained optimisation problems: Mixed-Integer Programming (MIP), SAT, and constraint programming (CP). These are all guaranteed to find an optimal solution to the problem. In this section we detail the exact encodings used as well as the experimental evaluation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Constraint Programming</head><p>Subject to minor syntactic changes the model given in Sect. 3 is a MiniZinc <ref type="bibr" target="#b34">[39]</ref> model. The actual MiniZinc is shown in Appendix A. Thus it can be directly executed and solved using any of the underlying solvers supported by MiniZinc.</p><p>For our evaluation we used a state-of-the-art constraint programming solver, G12 CPX <ref type="bibr" target="#b19">[24]</ref> which utilises lazy clause generation. CPX like most constraint programming solvers provides global constraints for finding the minimum and maximum elements in a list or array and a predicate or function to compute the absolute value of a function and disjunctions of constraints. The calculation of distance between two nodes u, v in a given dimension was encoded as the expression</p><formula xml:id="formula_5">dx[u, v] = max([0, xs[v] − xf [u] + 1, xs[u] − xf [v] + 1])</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">SAT</head><p>SAT solvers are designed to find values for Boolean variables that satisfy conjunctions of clauses, i.e. disjunctions of Boolean literals. When encoding an integer problem into SAT, each integer variable x ∈ [1,..., n] is usually encoded as a set of Boolean variables [x 1 ,...,x n ]. There are two standard encodings for integer variables with small domains.</p><p>The sparse encoding requires that exactly one of the n variables is true; this gives the semantics</p><formula xml:id="formula_6">x i ≡ [[x = i]]</formula><p>where this is read as the Boolean variable x i in the encoded SAT model is true iff x = i holds in the original integer programming model. The direct encoding of this semantic requires O(n 2 ) clauses, since in addition to the set of disjunctions that ensure that at least one is true, it also requires an encoding that ensures that at most one value holds. Each pair of distinct values (i, j) requires a disjunction. There are n(n−1)/2 such pairs, resulting in 1 + n(n − 1)/2 clauses.</p><p>The alternative unary encoding of integer variables instead ensures that the x i are ordered; that is, x i ⇒ x i−1 . These literals then have the semantics</p><formula xml:id="formula_7">x i ≡ [[x ≥ i]]</formula><p>. In addition to requiring only O(n) clauses, the unary encoding is convenient for encoding a range of arithmetic constraints.</p><p>Example 1 Using the unary encoding, x ≤ y can be encoded as</p><formula xml:id="formula_8">∧ i [[x ≥ i]] → [[y ≥ i]] ≡ ∧ i ¬x i ∨ y i .</formula><p>Example 2 Using the unary encoding, x = |y| can be encoded as</p><formula xml:id="formula_9">∧ i≥0 [[x ≥ i]] ↔ ([[y ≥ i]] ∨ [[y ≤ −i]]) ≡ ∧ i≥0 x i ↔ (y i ∨ ¬y 1−i ).</formula><p>Example 3 x = max(y 1 ,...,y n ) can be encoded as:</p><formula xml:id="formula_10">∧ i ([[x ≥ i]] ↔ ∨ j [[y j ≥ i]]) ≡ ∧ i (x i ↔ ∨ j y i j ).</formula><p>Because of these advantages we use the unary encoding. Linear arithmetic constraints, such as x = ∑ c i y i can be implemented using a range of encodings, such as BDDs, adders or cardinality networks <ref type="bibr" target="#b5">[10,</ref><ref type="bibr" target="#b11">16,</ref><ref type="bibr" target="#b18">23]</ref>.</p><p>Reified versions of these constraints can also be easily constructed. A reified constraint is of form b ↔ C and constrains the Boolean b to be true iff the constraint C holds in the model. Reification is a standard technique used to encode disjunctions of constraints: the disjunction C 1 ∨C 2 is encoded as</p><formula xml:id="formula_11">(b 1 ↔ C 1 ) ∧ (b 2 ↔ C 2 ) ∧ (b 1 ∨ b 2 ).</formula><p>Given these primitives, we can straightforwardly encode the model into SAT. For example, the non-overlap of nodes u and v becomes:</p><formula xml:id="formula_12">     (b left ∨ b right ∨ b above ∨ b below ) ∧ b left ↔ xf [u] ≤ xs[v] ∧ b right ↔ xf [v] ≤ xs[u] ∧ b above ↔ yf [u] ≤ ys[v] ∧ b below ↔ yf [v] ≤ ys[u]     </formula><p>The encoding of the problem into SAT was performed using the Ben-Gurion University Equi-Propagation Encoder (BEE) <ref type="bibr" target="#b32">[37]</ref>, which compiles a declarative specification to SAT. Primitive arithmetic constraints are encoded using direct unary adders; whereas, larger sums, such as the objective value, are encoded with odd-even sorting networks. The optimization is handled by solving a sequence of SAT instances. The solver initially solves the problem P and returns a solution o = k. Then it adds the constraint (o &lt; k) to the model and solves again. This is repeated until the resulting problem is found to be unsatisfiable. Hence the last solution found is optimal.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">MIP</head><p>The MIP encoding is the most complex among the approaches we compare. We use the standard MIP encoding of minimum and maximum and absolute value <ref type="bibr" target="#b44">[49]</ref>. We used six matrices of binary variables to keep track of the relative position of each pair of vertices u, v. The arrays left <ref type="bibr">[u, v]</ref>, xoverlap <ref type="bibr">[u, v]</ref>, right <ref type="bibr">[u, v]</ref> encode that u must be to the left, horizontally overlap, or must be to the right of v; and analogously in the y direction we have below <ref type="bibr">[u, v]</ref>, yoverlap <ref type="bibr">[u, v]</ref>, above <ref type="bibr">[u, v]</ref>. The following constraint enforces the desired relationships in the x-direction, a similar constraint is used for the y-direction:</p><formula xml:id="formula_13">∀u &lt; v ∈ B ∪C lt(x f [u], xs[v], left[u, v]) ∧ lt(x f [v], xs[u], right[u, v]) ∧ lt(xs[u], x f [v], xoverlap[u, v]) ∧ lt(xs[v], x f [u], xoverlap[u, v])</formula><p>where lt(x 1 , x 2 , b) enforces that b → x 1 ≤ x 2 and has the standard MIP encoding −M * (1 − b) + x 1 ≤ x 2 where M is a sufficiently large constant.</p><p>Using these it is simple to encode non-overlap and compute the distance between nodes:</p><p>1. The relative positions are mutually exclusive in each direction:</p><formula xml:id="formula_14">∀u &lt; v ∈ B ∪C, (left[u, v] + xoverlap[u, v] + right[u, v] = 1) ∧ (above[u, v] + yoverlap[u, v] + below[u, v] = 1)</formula><p>2. If there is a containment relationship between two nodes then they overlap in both directions: </p><formula xml:id="formula_15">∀u &lt; v ∈ B ∪ C s.t. con[u, v] ∨ con[v</formula><formula xml:id="formula_16">(dx[u, v] ≥ 0.0) ∧ (dx[u, v] ≥ xs[v] − x f [u] + 1) ∧ (dx[u, v] ≥ xs[u] − x f [v] + 1)</formula><p>and:</p><formula xml:id="formula_17">lt(dx[u, v], 0.0, xoverlap[u, v]) ∧ lt(dx[u, v], (xs[v] − x f [u] + 1), left[u, v]) ∧ lt(dx[u, v], (xs[u] − x f [v] + 1), right[u, v])</formula><p>and similarly for the y-direction.</p><p>We used the C++ implementation of IBM ILOG Concert Technology <ref type="bibr" target="#b2">[5]</ref> and MiniZinc to encode our MIP model. We solved them using the state-of-the-art CPlex MIP solver <ref type="bibr" target="#b1">[2]</ref>, for the MiniZinc model we used the flatzinc compatible CPlex interface. Both encodings yielded similar results. We show the results of the first.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Evaluation</head><p>In order to study the performance of our model encodings for CP, MIP and SAT on different graph characteristics we ran experiments on different types of input graphs. Experiments were run on a standard desktop machine with an Intel Core i7-4771 3.50GHz processor and 32GB RAM. Solvers were restricted to run on a single thread with a timeout of 300 seconds. The results were drawn using HTML5, javascript, D3.js [3] and Cola.js <ref type="bibr">[7]</ref>.</p><p>Our graph corpus consists of graphs from two sources, a set of randomly generated scale-free graphs, and a set of graphs derived from real-world instances. For the latter set, we use a selection of 100 graphs from the well-established Rome graph set <ref type="bibr" target="#b3">[6]</ref>, as already used in <ref type="bibr" target="#b24">[29]</ref>. This sample contains 10 graphs from each group of graphs with sizes |nodes| = 10, 20,...,100 and covers the Rome set well <ref type="bibr" target="#b24">[29]</ref>. Density (|edges|/|nodes|) ranges from tree-like (∼ 1) to quite dense (1.61). We generated the flat scale-free graphs based on the model proposed by Bollobás et al. <ref type="bibr" target="#b13">[18]</ref>, with 10 graphs for each graph size from 7 to 100 nodes. In these generated graphs we controlled for edge density such that |edges|/|nodes| is up to 1.22. Our decision to use scale-free graphs is motivated by the fact that scale-freeness is often observed in graphs stemming from important application areas like biology and the social sciences. To obtain a grouping for each of these graphs an edge-compression heuristic <ref type="bibr" target="#b17">[22]</ref> was applied. Thus, our full corpus consists of 940 flat-graphs, 100 Rome graphs, and the corresponding 1040 grouped graphs, called power-graphs in the sequel. We then attempted to obtain a layout for each graph using our MIP, CP and SAT For our experiments, the components of the objective function were weighed in the following order. The stress component was given a weight of four, the compartment compactness was given a weight of two (α = 1/2), and the entire layout compactness was given a weight of three (β = 3/4). These values yielded the most desirable results, and can be modified to fit the needs and expectations of the users.</p><p>Running the solvers on graphs of different sizes showed that the SAT solver was able to solve graphs of larger sizes, while CP and MIP solvers were slower. <ref type="figure" target="#fig_9">Fig. 7</ref> shows the median running time for all graphs up to the largest solved instance with 57 nodes. The results of <ref type="figure" target="#fig_9">Fig. 7</ref> are presented in <ref type="table">Table 1</ref>. While these results tend to favor SAT over MIP we cannot say definitively under what conditions such layout models are better suited to one solver over the other. Our intuition here is that SAT is typically well suited to problems with small variable domains and highly disjunctive constraints, whereas MIP can handle large domains gracefully only when a linear relaxation gives a good approximation to disjunctions.  <ref type="table">Table 1</ref>: The highest nodes count of graphs solved by MIP, CP, and SAT; categorized into three timeframes. It is clear that SAT performed best, followed by CP, with MIP having the worst performance for both power-graphs and flat-graphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">HEURISTIC FOR LARGER NETWORKS</head><p>The results presented in Sect. 4.4 indicate that SAT may be used to find optimal ultra-compact grid layout for small grouped graphs reliably in around a second, which may be suitable-for example-for a web-service. It can be argued that interactive visualizations of small neighborhoods are useful in exploring very large graphs, through filtering or semantic zooming that restricts the view to a subgraph or aggregated overview. Still, being able to reliably visualize networks with hundreds of nodes gives a lot more flexibility. We use large neighbourhood search (LNS), which is currently the method of choice for solving various transportation and scheduling problems. The basic approach is to explore a large neighbourhood around the current solution and iteratively move to a high-quality neighbouring solution until no improvement is possible. One way in which the search can be done is to use a generic constrained optimisation technique to search the neighbourhood for the best solution. The advantage of this is that the search is then guaranteed to only find solutions that respect the problem constraints. This is why we decided  to use LNS; with other meta-heuristic techniques like simulated annealing it would have been difficult to ensure that the containment and non-overlap constraints were satisfied during the search.</p><p>The LNS heuristic is intuitively simple: find an initial solution and then iteratively improve it by choosing a set of nodes for improvement. The space of their possible positions forms the neighbourhood for the search. Their new position is found by using MIP to solve the model given in Section 3 with some additional constraints fixing the relative position of the other nodes. The reason that we used MIP is that while MIP was slower than both CP and SAT for solving the original model we found that it was the fastest method for solving this more constrained subproblem. We believe this is for two reasons. The first is that the addition of relative position constraints removes most of the disjunctions from the model so that the linear relaxation gives a good approximation to the underlying problem. The second is that MIP solvers such as Cplex support warm start when solving similar problems. Algorithm 1 gives an overview of our heuristic.</p><p>The first step is to find an initial layout for the grouped network with a constraint-based force-directed approach. We implemented the "grid-snap" technique described by Kieffer et al. <ref type="bibr" target="#b26">[31]</ref> in the cola.js [7] browser-based constraint-layout library. We extended this method to handle group-hierarchy containment inside rectangular regions using separation constraints as described in <ref type="bibr" target="#b14">[19]</ref>. The layout obtained by this heuristic Force-Directed Grid Snap (FDGS) approach for a 45node graph is shown in <ref type="figure">Fig. 11(a)</ref>.</p><p>From this initial layout two types of additional constraints are added to the model (Sect. 3) to massively reduce the search space. First, we generate inequality constraints over the x-and y-positions for pairs of nodes <ref type="figure" target="#fig_12">(Fig. 9)</ref> locking their horizontal and vertical order. To allow the solver to move a neighbourhood of nodes these constraints are selectively relaxed, as described below. Additional constraints on edgelength further restrict the search to only equal or shorter edges. This is done by bounding the manhattan distance between adjacent nodes by their manhattan separation from the FDGS layout.</p><p>In order to obtain improvements in reasonable time, we iteratively relax the ordering constraints for a subset δ of nodes and run the solver on this relaxed model. New ordering constraints for the nodes in δ and Algorithm 1 Grid Layout Heuristic 1: procedure GRID LAYOUT ( Graph g, Model m ) 2:</p><p>l ← getForceDirectedLayoutWithGridSnap(g) 3:</p><p>d ← getDataWithTightConstraints(l) 4:</p><formula xml:id="formula_18">SolverLoad(m, d) 5:</formula><p>b ← 10, c ← nil, t ← |B|/5 seconds 6:</p><p>for each c ← getNextNodeOrContainer(g, c) do 7:</p><p>relaxOrderingConstraints(c) 8:</p><p>δ ← δ ∪ getContainedNodes(c) 9:</p><p>lc1 ← getFreeLeavesDirectlyConnected(c) 10:</p><p>δ ← δ ∪ lc1 11:</p><p>δ ← δ ∪ getFreeLeavesDirectlyConnected(lc1) 12:</p><p>δ ← δ ∪ getContainedLeavesDirectlyConnected(c) 13:</p><p>relaxUpTo_b_nodes(δ, b) 14:</p><p>val ← runCPLEXsolver(timeout=t) 15:</p><p>setWarmStart(val) 16:</p><p>updateConstraints(val) 17:</p><p>end for 18:</p><p>for each leaves ← getUpTo(FreeLeaves(g), b) do 19:</p><p>relax(leaves) 20:</p><p>repeat 12-15 21:</p><p>end for 22:</p><p>return val 23: end procedure  A B (b) Result: Nodes moved to a new position are highlighted with red outline. Node 3 was repositioned within container B, decreasing the container size, and container A was assigned a more horizontal shape, allowing the drawing to fit into a much smaller grid, moving all relaxed nodes. The length of the edge between nodes 4 and 7 was decreased from 4 to 3. Grid size has been reduced from 5x5 to 5x3. <ref type="figure">Fig. 10</ref>: A step in the Large-Neighborhood-Search heuristic.</p><p>potentially tightened bounds on the edge-lengths are derived from the resulting layout and added to the model for the next iteration, where a solver warmstart is used to speed up the computation. The relaxation is divided into two main parts, represented by the for loops in Algorithm 1, lines 6 and 18. The first part processes neighborhoods of nodes, the second is a postprocessing to find the best placement for free leaves, i.e. leaf nodes not contained in any other node.</p><p>In each iteration of part one the selection of nodes for relaxation is as follows: first, we select a node c, whose neighborhood will be relaxed, to be included in δ (Function getNextNodeOrContainer in Algorithm 1). In case there are contained nodes, we first simply pick c from the list of containers ordered by size, i.e. the largest container in the first iteration, followed by the second largest, and so on. Otherwise we consider each node as an empty container, and in each iteration select one of them, in random order. We now add further nodes to δ up to a small bound b on the size of δ. In our implementation b = 10 gave a good tradeoff between running time and quality improvement. First, we randomly select up to b nodes in c. If c has fewer nodes than b, we add further nodes in the following order until |δ| = b: The group lc1 of free leaves that are adjacent to c. The group of free leaves that are adjacent to nodes in lc1. Contained leaf nodes adjacent to c.</p><p>After relaxing the ordering constraints for the nodes in δ, we run the solver for a limited time t. <ref type="figure">Fig. 10</ref> illustrates such a step of the heuristic. We choose t = |B|/5 such that the total run-time for the algorithm is always bounded proportionally to the size of the graph. The result is used to initialize the next iteration and the solver warmstart.</p><p>We iterate until each container (or each node in case there are no containers) has been selected once (for-loop at Line 6 of Alg. 1). Afterwards, we relax sets of free leaves independent of a container, and rerun the solver, until all free leaves have been relaxed once (for-loop at Line 18 of Algorithm 1). The final layout is shown in <ref type="figure">Fig. 11(b)</ref>.</p><p>We evaluated the LNS heuristic on our graph corpus. The reduction in search space leads to significantly faster solves as can be seen in <ref type="figure" target="#fig_9">Fig. 7. Fig. 8</ref> compares the layout quality of LNS and FDGS with the optimal as obtained by SAT. Across all graphs in our corpus the mean quality ratio for FDGS was ∼ 1.24 while for LNS it was ∼ 1.1, i.e. LNS was typically twice as close to the optimal as FDGS. Visually, FDGS gives a much less compact layout with a significantly larger total edge length compared to layout refined by LNS as evidenced by the side-by-side comparisons in <ref type="figure" target="#fig_1">Figs. 11 and 12</ref> 3 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RELATED WORK</head><p>The most widely-used family of automatic layout methods for undirected graphs are based on force-directed layout <ref type="bibr" target="#b28">[33]</ref>. These methods iteratively place nodes such that edge-lengths become relatively uniform while disconnected nodes are spaced further apart. This approach is attractive because the basic variants are easy to implement, it does a reasonable job of untangling the structure of small graphs and clustering nodes so that proximity implies connectivity (R2). However, the results are very organic -the antithesis of grid layout.</p><p>Rohrschneider et al. tried to overcome that problem for biological networks by first computing a stress-based node-placement on a grid, followed by an edge routing heuristic <ref type="bibr" target="#b40">[45]</ref>. This approach does not allow group information to be taken into account, and the graph structure is hard to conceive from the layouts. Recent work from Kieffer et al. <ref type="bibr" target="#b26">[31]</ref> explored augmenting the objective function of a constrainedforce-directed technique to prefer nodes placed at grid-points, thereby creating a compromise between a grid-aesthetic and R2. This method (extended to grouped graphs) provides the starting point for our LNS.</p><p>A layout exploration in the specific domain of Metro-map layout from Nöllenburg and Wolff <ref type="bibr" target="#b36">[41]</ref> was similar to ours in spirit in its attempt to obtain high-quality layout through the use of optimal (MIP) techniques. However, the metro-map layout problem is significantly constrained in that the topology is already given by the geographical positions of the stations. As a layout adjustment problem rather than   <ref type="figure">Fig. 11</ref>: A network with 45 nodes arranged in four ways: the forcedirected approach that forms the basis of our LNS approach; the gridsnap approach that allows us to derive the constraints for the LNS approach; the final outcome of the LNS approach; the final optimal outcome of the SAT. completely free arrangement of nodes, it is therefore more similar in terms of tractability to the LNS approach explored in Sect. 5.</p><p>Orthogonal layout approaches seek to represent edges with axisparallel segments, preferably with only a small number of right-angle bends. From the approaches that were proposed, the planarisationbased Topology-Shape-Metrics (TSM) framework <ref type="bibr" target="#b7">[12]</ref> has proven to be by far the most successful in practice. TSM first fixes an embedding for the planarized input graph, then solves bend minimization for this embedding to achieve an orthogonal shape, and in the final compaction step computes node positions for this shape.</p><p>However TSM has limitations that inspire the work presented in this paper: Primacy is given to minimizing edge crossings, prohibiting a good compromise between aesthetic criteria, and even optimal solutions for a single phase (e.g. calculated using ILP, MIP or SAT strategies <ref type="bibr" target="#b8">[13,</ref><ref type="bibr" target="#b20">25,</ref><ref type="bibr" target="#b27">32]</ref>), will generally not lead to a solution close to the optimum with respect to all optimisation criteria, see <ref type="figure" target="#fig_1">Fig. 2(a)</ref>. Orthogonal methods also typically do a poor job of handling nodes of widely varying dimensions, and they are difficult to extend for main constraints in applications, in particular grouping of nodes and flow direction. An exploration of applying optimal methods (ILP and SAT) to particular graph-theoretical problems related to orthogonal-drawings was considered by Biedl et al. <ref type="bibr" target="#b10">[15]</ref> but their results are not readily applicable to practical layout. Betz et al. <ref type="bibr" target="#b9">[14]</ref> integrate upward crossing minimization into a TSM approach to support non-uniform node heights for layouts of directed graphs.</p><p>A number of other researchers have investigated the use of metaheuristic approaches to graph layout. Davidson and Harel <ref type="bibr" target="#b12">[17]</ref> investigated the use of simulated annealing (SA) for undirected graphs. Harel and Sardas <ref type="bibr" target="#b22">[27]</ref> used SA to beautify a layout drawn with a planarisation-based approach. Barsky et al. <ref type="bibr" target="#b6">[11]</ref> and Kojima et al. <ref type="bibr" target="#b29">[34]</ref> propose methods based on SA and local-search (respectively) for biological networks. The work of Barsky et al. is the most similar because they layout the nodes on a grid, however the layout is not particularly compact and does not use rectangular compartments. To our knowledge, ours is the first use of LNS in graph layout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSION AND FURTHER WORK</head><p>We have introduced a new ultra-compact, grid-like layout aesthetic for node-link diagrams with arbitrary containment that is motivated by the grid arrangements that are used almost universally by designers in typographical layout. We have explored whether generic constrained optimisation techniques (MIP, CP and SAT) are now fast enough to be used for high-quality drawings of this kind. We found that SAT was the most effective, and quite practical for producing high-quality layouts for graphs of up to 20 nodes in under a second -useful, for example in interactive contexts where it is possible to obtain an aggregated or partial view of a larger network and graphs of up to 50 nodes in a few minutes may be useful for producing canonical offline views. Although this paper is about solving a set of models for network layout to optimality, it is open for debate whether our particular model represents the "best possible visualisation" and we do not claim this. Rather, this is precisely the point of this paper: by rapidly modeling different types of layout through declarative techniques we are able to rapidly experiment with different approaches to the layout problem. A number of the ideas for layout presented here (e.g. reorientable nodes, ultra-compactness, multi-directional flow layout; all while respecting arbitrary group containments) are to our knowledge very novel and very difficult to experiment with by any other means.</p><p>Another use of the optimal techniques, however, is in finding a baseline against which approximate methods may be compared to assess quality. This was demonstrated in our evaluation of the LNS metaheuristic approach. Our evaluation showed that the LNS method could produce compact layouts for graphs with up to 100 nodes in a few minutes that are usually within 20% of the objective function's optimum.</p><p>In general, the ease of experimenting with different layouts through simple edits to the declarative model opens up a world of possibilities that we hope to explore in future before embarking on engineering faster heuristics. A significant open challenge is a layout model that somehow incorporates routing in a way that is efficiently solvable to optimality. To us, this remains the "holy grail".</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>(a) A traditional TSM-based orthogonal layout of the flat network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 :</head><label>2</label><figDesc>Drawings of the state machine for a travel-booking system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 :</head><label>3</label><figDesc>An Euler diagram showing the intersecting sets of interests of researchers in a lab (anonymised). Solved in 0.047 seconds using the SAT solver.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Variables and constraints: 1. The core decision variable in our model is the position (xs[u], ys[u]) of the top-left corner of each base node u ∈ B. This must be a point on the grid: xs[u] ∈ {1, ..., g x } and ys[u] ∈ {1, ..., g y } where g x and g y give the size of the grid. 2. The position of the bottom-right corner of each base node is functionally dependent upon this: ∀u ∈ B, xf [u] = xs[u] + w[u] and yf [u] = ys[u] + h[u].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>1</head><label></label><figDesc>The full model in MiniZinc is available under an open-source license<ref type="bibr" target="#b34">[39]</ref> 2 This is the length of the shortest path between the nodes in an extended graph where there is an edge between two nodes x, y in this extended graph if there is an edge in the original graph or if con[x, y] or con[y, x] holds.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Sugiyama style layered-layout with six layers and flow direction strictly left-to-right. (b) Compact grid layout obtained with relaxed flow direction; solved in 2.035 seconds using the SAT solver.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 :</head><label>5</label><figDesc>A directed biological pathway from http://www.pathwaycommons.org.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>(a) Detail of routing graph. The example shows an edge being routed from "DrawPreview" to "Figure". Nodes with thick borders are obstacles to be avoided by the current path. Segments intersecting such nodes are removed from the routing graph. On the source and target nodes 0-cost port connections are visible.(b) After routing, edge paths are bundled and separated within the available channel space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 6 :</head><label>6</label><figDesc>An example software-dependency graph with routing detail and the final result. Solved in 0.732 seconds with the SAT solver. This network shows dependencies between types, methods and properties in C ♯ code and was obtained in a debugging scenario using the Visual Studio Code Map tool. This layout neatly illustrates the cause of the bug: that Square is the only sub-class of Figure not created by the GetNextFigure method. Code snippets and icons on each of the nodes give added context.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 7 :</head><label>7</label><figDesc>Median solve times for flat-graphs (top) and power-graphs (bottom). Filled marks represent instances for which optimal results were found in under 5 minutes. Hollow marks indicate not all instances were solved in that time. Size of the marks indicate number of instances solved.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 8 :</head><label>8</label><figDesc>Average quality of objective obtained with the Large Neighbourhood Search (LNS) heuristic and the starting layout computed using Force-Directed Grid-Snap (FDGS) compared to the optimal objective for flat-graphs (top) and power-graphs (bottom). This is shown with respect to graph size.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 9 :</head><label>9</label><figDesc>Constraints types derived from the grid-snap layout to be added to the layout model. Ordering constraints for the pairwise relative positions between nodes in x and y dimension are added for all nodes pairs. (a) shows the horizontal ordering constraints for node 3, which restrict its x position to be less or equal to those of 6 and 10, and larger or equal than those of 9, 5, and 2. The constraints for the y position are obtained in the same way. (b) shows the edge-length constraints for node 3, in this case all distances to adjacent nodes have bound 1. Starting layout: container A is selected for neighborhood detection. Nodes with a blue fill are selected for relaxation. This includes the nodes contained in A, nodes 2 and 7 as directly connected free leaves, and node 3 as directly connected contained node.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>Left: Force-directed layout with containment. Right: Force-directed layout with grid-snap. Solve time: 2.2 seconds. Grid size: 10x11. Total Edge Length: 33. Edge Crossings: 4. Objective 35.89% higher than optimum. The first neighbourhood considered by the LNS search is highlighted. LNS outcome. Highlighted nodes are the last neighbourhood with relaxed constraints, the node with pink outline was the only one moved by the solver. Solve time: 43 seconds. Grid size: 9x8. Total Edge Length: 29. Crossings: 4. Objective 17.94% higher than optimum.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head></head><label></label><figDesc>Optimum. Only one edge has more than unit length. Grid size is optimal at 7x7. Total Edge Length: 25. Crossings: 0. Solved by SAT in 99.2 seconds.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 12 :</head><label>12</label><figDesc>Force-directed layout with grid-snap. Grid size: 16x14. Total Edge Length: 138. Crossings: 52. Solve time: 14.4 seconds. The first neighbourhood considered by the LNS search is highlighted. LNS. Highlighted nodes are the last neighbourhood with relaxed constraints, the node with pink outline was the only one moved by the solver. Grid size: 13x14. Total Edge Length: 135. Crossings: 50. Solve time: 348 seconds. A network with 100 nodes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Vahan Yoghourdjian, Tim Dwyer, Steve Kieffer, Karsten Klein, and Kim Marriott are with Monash University.</figDesc><table /><note>E-mail: {Vahan.Yoghourdjian, Tim.Dwyer, Steve.Kieffer, Karsten.Klein, Kim.Marriott}@monash.edu.• Graeme Gange is with The University of Melbourne. E-mail: ggange@csse.unimelb.edu.au. Manuscript received 31 Mar. 2015; accepted 1 Aug. 2015; date of publication xx Aug. 2015; date of current version 25 Oct. 2015. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Manuscript received 31 Mar. 2015; accepted 1 Aug. 2015; date of publication 20 Aug. 2015; date of current version 25 Oct. 2015. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org. Digital Object Identifier no. 10.1109/TVCG.2015.2467251</figDesc><table /><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">More examples highlighting the difference in quality between FDGS layout and that obtained by FDGS with LNS refinement are available online [4].</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We acknowledge the support of the Australian Research Council through Discovery Project DP140100077</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="http://graphdrawing.de/contest2014/topic2.html" />
		<title level="m">Graph Drawing Conference contest</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cplex Mip Solver</surname></persName>
		</author>
		<ptr target="http://www.ibm.com/software/commerce/optimization/cplex-optimizer" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ilog Concert Technology</surname></persName>
		</author>
		<ptr target="http://www.ibm.com/software/commerce/optimization/interfaces" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rome</forename><surname>Graphs</surname></persName>
		</author>
		<ptr target="http://www.graphdrawing.org/data/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A survey of very large-scale neighborhood search techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Ahuja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ö</forename><surname>Ergun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Orlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Punnen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">123</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="75" to="102" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Cardinality networks: a theoretical and empirical study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Asín</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Nieuwenhuis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Oliveras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rodríguez-Carbonell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Constraints</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="195" to="221" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Cerebral: Visualizing multiple experimental conditions on a graph with biological context. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Barsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gardy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kincaid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1253" to="1260" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A layout algorithm for data flow diagrams. Software Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Batini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Nardelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="538" to="546" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Computing orthogonal drawings with the minimum number of bends. Computers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bertolazzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">Di</forename><surname>Battista</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Didimo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="826" to="840" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Columnbased graph layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Betz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gemsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mathies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Rutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Algorithms and Applications</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="677" to="708" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Using ilp/sat to determine pathwidth, visibility representations, and other grid-based graph drawings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Biedl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bläsius</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Niedermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nöllenburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Prutkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Rutter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="460" to="471" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Pairwise cardinality networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Codish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zazon-Ivry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">16th International Conference on Logic for Programming</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">6355</biblScope>
			<biblScope unit="page" from="154" to="172" />
		</imprint>
	</monogr>
	<note>LNCS</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Drawing graphs nicely using simulated annealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics (TOG)</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="301" to="331" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Edge compression techniques for visualization of dense directed graphs. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Henry Riche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mears</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2596" to="2605" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Ipsep-cola: An incremental procedure for separation constraint layout of graphs. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="821" to="828" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A comparison of user-generated and automatic graph layouts. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Quinn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Isenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>North</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="961" to="968" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast node overlap removal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Stuckey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">3843</biblScope>
			<biblScope unit="page" from="153" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Improved optimal and approximate power graph compression for clearer visualisation of dense graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mears</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Morgan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Niven</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wallace</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pacific Visualization Symposium (Paci-ficVis)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="105" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Translating pseudo-boolean constraints into SAT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Eén</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sörensson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Boolean Modeling and Computation</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1" to="26" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
	<note>Journal on Satisfiability</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Semantic learning for lazy clause generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Feydy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schutt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Stuckey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TRICS workshop, held alongside CP</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Optimal k-level planarization and crossing minimization. Graph Drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gange</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Stuckey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="238" to="249" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Graph drawing by stress majorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>North</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3383</biblScope>
			<biblScope unit="page" from="239" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Randomized graph drawing with heavy-duty preprocessing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sardas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="233" to="253" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Moiregraphs: Radial focus+ context visualization and interaction for graphs with visual nodes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jankun-Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Information Visualization, 2003. INFOVIS 2003. IEEE Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="59" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The graph landscape -a concept for the visual analysis of graph set properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Nguyen</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Submission</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Hola: Human-like orthogonal network layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kieffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>In submission</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Incremental grid-like layout using soft and hard constraints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kieffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="448" to="459" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Optimal compaction of orthogonal grid drawings. Integer Programming and Combinatorial Optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Klau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mutzel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="304" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Force-directed drawing algorithms. Handbook of Graph Drawing and Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="383" to="408" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">An efficient grid layout algorithm for biological networks utilizing various biological attributes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kojima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nagasaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Miyano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC bioinformatics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">76</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Optimal rectangle packing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Korf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Moffitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Pollack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Operations Research</title>
		<imprint>
			<biblScope unit="volume">179</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="261" to="295" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Memorability of visual features in network diagrams. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Purchase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Goncu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2477" to="2485" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Compiling finite domain constraints to sat with bee</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Metodi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Codish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theory and Practice of Logic Programming</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4-5</biblScope>
			<biblScope unit="page" from="465" to="483" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Grid Systems in Graphic Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Müller-Brockmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Minizinc: Towards a standard CP modelling language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nethercote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Stuckey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Becket</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Duck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Tack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Constraint Programming</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4741</biblScope>
			<biblScope unit="page" from="529" to="543" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">An improved algorithm for the metro-line crossing minimization problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nöllenburg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="381" to="392" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A mixed-integer program for drawing highquality metro maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nöllenburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wolff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">3843</biblScope>
			<biblScope unit="page" from="321" to="333" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Large neighborhood search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pisinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ropke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbook of metaheuristics</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="399" to="419" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Graph drawing aesthetics created by users, not algorithms. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Purchase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pilcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Plimmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="81" to="92" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A survey of euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="134" to="155" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">A novel grid-based visualization approach for metabolic networks with advanced focus&amp;context view</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rohrschneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Heine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Reichenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kerren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="268" to="279" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Unraveling protein networks with power graph analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Royer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reimann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Andreopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schroeder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS computational biology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page">1000108</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Layout of directed hypergraphs with orthogonal hyperedges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sander</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">2912</biblScope>
			<biblScope unit="page" from="381" to="386" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Methods for visual understanding of hierarchical system structures. Systems, Man and Cybernetics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sugiyama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tagawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Toda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="109" to="125" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Model building in mathematical programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">P</forename><surname>Williams</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Orthogonal connector routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Stuckey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="219" to="231" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
