<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Simple Approach for Boundary Improvement of Euler Diagrams</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Simonetto</surname></persName>
							<email>paolosimonetto@email.arizona.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Archambault</surname></persName>
							<email>d.w.archambault@swansea.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Scheidegger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Simple Approach for Boundary Improvement of Euler Diagrams</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2015.2467992</idno>
					<note type="submission">received 31 Mar. 2015; accepted 1 Aug. 2015; date of publication xx Aug. 2015; date of current version 25 Oct. 2015.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:15+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Euler diagrams</term>
					<term>Boundary Improvement</term>
					<term>Force-Directed Approaches</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1: Boundary smoothing for existing Euler diagrams. (a) General Euler diagram [21, Figure 6b] reproduced. (b) The result of the improvement (c) An Untangled diagram [20, Fig. 5b] reproduced. (d) The result of the improvement.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Euler diagrams <ref type="bibr" target="#b11">[12]</ref> are an intuitive way to visualize sets and their contents, because they visualize this information in the most straightforward way possible: sets in these diagrams are regions; if the regions overlap, the sets intersect. Recent techniques aim at automating the process of drawing Euler diagrams with closed curves to directly visualize the intersections between sets. Given a list of sets and their intersections, these general techniques produce a drawing for any input instance <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25]</ref>. Euler diagrams have been applied in various fields, such as bioinformatics <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b12">13]</ref>, digital humanities <ref type="bibr" target="#b31">[32]</ref>, social networks <ref type="bibr" target="#b17">[18]</ref>, multimedia database queries <ref type="bibr" target="#b30">[31]</ref>, and others.</p><p>These general techniques are powerful, but the shape of the regions that they generate can often be jagged and elongated due to the large number of constraints that the drawing must satisfy to be valid. At the same time, smoother regions are more aesthetically pleasing, and there is empirical evidence that smooth closed curves pop out visually <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b29">30]</ref>. Also, early empirical evidence indicates that Euler diagrams are more readable when they have smooth set contours <ref type="bibr" target="#b6">[7]</ref>. Thus, an approach able to improve diagrams in general can make these techniques more applicable and practical.</p><p>In this paper, we introduce a simple method that can improve the boundaries of any Euler diagram drawing approach (or any other method using polygons and their overlap to indicate the relationship between sets). The approach proposed is a form of curve shortening flow for shape improvement <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b34">35]</ref> applied to the problem of Euler diagram drawing. These techniques are commonplace in geometry processing, graphics, and scientific visualization. However, to the best of our knowledge, curve shortening flow has not been applied to the problem of Euler diagram drawing and is not as well known in information visualization. The essence of our approach is a novel force system based on boundary curvature. This force system can be applied in conjunction with diagram constraints to greatly improve the appearance of the Euler diagrams while ensuring a correct drawing.</p><p>The primary contribution of this paper is an algorithm that combines a form of curve shortening flow with Euler diagram drawing methods to improve the smoothness of any Euler diagram drawn with curves. The approach we propose is general and can be applied to the output of all Euler diagram drawing methods (as well as related methods). Our approach is more scalable than existing techniques that improve the smoothness of Euler diagrams. More importantly, the refined drawing has the same topology as the Euler diagram provided as input, and at no point are intersections between the polygons created or destroyed during refinement. Finally, the approach is easy to implement, consisting of only four forces, greatly simplifying the algorithm when compared to competitive approaches. We demonstrate the effectiveness of this method through case studies and metric evaluations that compare our proposed technique to those in the state-of-the-art.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>There are two main areas of research that are related to our proposed technique: shape improvement and Euler diagram drawing. In this section, we describe this related work and how these areas relate to each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Shape Improvement and Mean Curvature Flow</head><p>Mean curvature flow is a classic method for smoothing shapes. Each point on the curve (in two dimensions) or the surface (in three dimensions) is moved in the direction of the normal in a way that is proportional to its curvature. This process flattens the object <ref type="bibr" target="#b9">[10]</ref>. Unfortunately, mean curvature flow also tends to shrink the object (in fact, differential geometers refer to this process as a curve-shortening flow), and this shortening may not be desired. Taubin's λ -µ smoothing is a classic method to avoid surface shrinking <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b28">29]</ref>. The approach works by alternating the direction of improvement at every other step. Taubin shows that his proposed algorithm can smooth out rough parts of the model while preserving volume through an elegant analogy to Fourier space operations -the algorithm essentially reduces the amount of energy in high-frequency components while preserving the total amount of energy in the system. In this paper, we use the principle behind λ -µ smoothing to move vertices of the boundary along the direction of curvature. However, as set elements are located inside the diagram, we can use the repulsive forces of the elements for area preservation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Euler Diagram Drawing</head><p>Methods for visualizing sets and their intersections has been an active area of research in recent years with many novel visualization approaches developed for this purpose <ref type="bibr" target="#b2">[3]</ref>. As the algorithm we propose in this work improves diagrams that represent sets as polygons, we focus on these methods for set visualization in this section. However, it is important to note that other approaches exist for visualizing sets and their intersections that are based on circles <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b32">33]</ref>, ellipses <ref type="bibr" target="#b15">[16]</ref>, and approaches that are not based on closed curves at all <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b22">23]</ref>.</p><p>A number of approaches are able to produce a drawing for every input instance. Rodgers et al. introduce a method for drawing a subclass of Euler diagrams <ref type="bibr" target="#b21">[22]</ref> and then extend this research to work on any input instance <ref type="bibr" target="#b20">[21]</ref>. In these approaches, the dual graph of the Euler diagram is transformed into a planar graph for drawing. Then, a triangulation is used to route set contours, creating a diagram. Simonetto et al. <ref type="bibr" target="#b24">[25]</ref> propose a force-directed solution that is guaranteed to produce a correct drawing, if one exists. In this approach, a planar representation of the Euler diagram is computed and drawn initially with a planar graph drawing algorithm. Subsequently, the drawing is improved using a modification of the PrEd <ref type="bibr" target="#b5">[6]</ref> algorithm to ensure that the structure of the Euler diagram does not change, nodes and edges do not cross boundaries during force-directed refinement, and that elements of the sets stay in their proper zones. This approach was further improved in ImPrEd <ref type="bibr" target="#b23">[24]</ref>, allowing for boundaries with adaptive complexities and faster convergence. Collins et al. <ref type="bibr" target="#b8">[9]</ref> describe a method for drawing Euler diagrams when the elements of the sets have fixed positions. The approach relies on marching squares and implicit curves to derive the boundaries for each set. Riche and Dwyer <ref type="bibr" target="#b19">[20]</ref> describe a method that prioritizes the containment of sets and splits sets in the diagram, when required, connecting them with edges. Stapleton et al. <ref type="bibr" target="#b26">[27]</ref> present a method for inductively adding curves to a diagram and preserving wellformedness properties in the drawing. We demonstrate our technique operating on the output of many of these algorithms <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b24">25]</ref>.</p><p>Dwyer et al. <ref type="bibr" target="#b10">[11]</ref> propose a method for topology-preserving constrained layout, improving a variant of stress by alternated coordinatewise gradient projection steps. This method is notable in that their stress variant is measured by the length of the connector, rather than the distance between vertex pairs. This allows polyline edges to be optimized, potentially shortening them. As we have already pointed out above that "smoothing is curve shortening", this would appear to be a method for smoothing curves. However, the presence of nondifferentiable shapes (from the node boxes) in their method means that in their setting, "jagged" polylines that route around node corners can be considered "smooth". Because our method uses forces as soft constraints, it tends to create shapes without sharp angles, which we argue are closer to our intuitive understanding of smoothness.</p><p>The closest work to our own is eulerForce <ref type="bibr" target="#b16">[17]</ref> where boundaries and curve positions have been modified to improve the readability of the Euler diagram. This approach is based on a force system, consisting of fourteen forces, to optimize the shape of the curves in the diagram, driving them towards circular shapes.</p><p>In contrast, the approach presented in this paper is fundamentally different than this approach. Our force system is simpler, consisting of only four forces, which helps improve complexity in terms of execution speed and implementation. The results are more scalable and able to refine Euler diagrams of realistic complexity beyond the five or so sets of eulerForce. Finally, and most importantly, our approach can be configured to never produce an invalid drawing when it starts from a valid one -that is, we can impose constraints such that no new zones are created or destroyed by the refinement procedure. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHOD</head><p>In this section, we present a description of the proposed approach. Firstly, we describe how our simplified version of curve shortening flow can be adapted in order to optimize the smoothness of polygons. Then, we will analyse differences and similarities between the original and the adapted formulation of this method. Finally, we identify additional requirements needed in order to successfully apply this method to the optimisation of Euler diagrams.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Discrete Curve Shortening Flow</head><p>Curve shortening flow is defined on a continuous curve and in continuous time, ideally requiring the computation of infinite number of points for infinitesimal increments of time (see <ref type="figure" target="#fig_0">Fig. 2a</ref>). However, this algorithm operates in discrete time and space, as vertex positions can only be optimized on a discrete basis and the curves are modelled as polylines. Thus, we must adapt the original method to:</p><p>• Discrete Space. The concept of curvature, which is well defined for a sufficiently smooth curve, cannot be directly applied to a vertex u of a polygon ...tuv .... The centre of curvature should be placed perpendicular to the line normal at u, but this line is not uniquely defined as the slope of the secant for a left and right increment from u only correspond when t, u, v are collinear.</p><p>• Discrete Time. In continuous curve shortening flow, the movement speed of a point can approach infinity when the radius of the osculating circle approaches zero. In continuous time, this problem is instantaneously corrected, as the speed of the vertex is re-calculated after an infinitesimally small period of time in the new lower stress position of the vertex. However, in discrete time, the time period t cannot be infinitesimally small, and therefore points with high speed will cause abrupt movements. Put simply, we require a more conservative approach to node movement in order to reduce the impact of large movements.</p><p>When defining our method for computing direction and intensity of movement, the properties of the original formulation must be preserved as much as possible. This formulation should be easy to implement and fast to compute. A solution that adequately satisfies all of these requirements computes the movement of a vertex u in ...tuv ... along the vector that connects u to the centroid of the triangle tuv (see <ref type="figure" target="#fig_0">Fig. 2b</ref>). Definition 1. Given a polygon p = p 0 ... p n , we define smoothing on p i as the operation that transforms p into p</p><formula xml:id="formula_0">= p 0 p i−1 bp i+1 ... p n where b is the centroid of p i−1 p i p i+1 .</formula><p>Definition 2. Given a polygon p = p 0 ... p n , we define smoothing on p as the application of smoothing on each polygon vertex p i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Comparison with Curve Shortening Flow</head><p>We now describe properties of the centroid smoothing technique defined above and discuss similarities and differences between the definitions of discrete and continuous curve shortening flow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 1. Given a convex polygon p, by performing smoothing on any of its vertices, we obtain a polygon p that is still convex.</head><p>Proof. A polygon is convex iff all its internal angles are equal or less than 180°. Let p = ...tuv ... and u be the vertex selected for smoothing. Since p is convex, the internal angles of t, u and v are equal or less than 180°. By performing smoothing on u, we substitute u with the centroid b of tuv. This operation does not increase the internal angle of vertices t and v, which will still be equal or less than 180°. Also, since the centroid of tuv is contained in tuv, the angle ∠tbv is not greater than 180°. Since all other internal angles remain unchanged, all the internal angles of the polygon are not greater than 180°, which means p is still convex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 1. Given a convex polygon p, by performing smoothing on any of its vertices, we obtain a polygon p whose boundary do not self-intersect.</head><p>Proof. As p is convex, p is also convex and therefore simple.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 2. Each polygon p asymptotically converges to a single point by repeatedly applying smoothing on p.</head><p>Proof. Let us consider a vertex u of a polygon ...tuv .... If u is not collinear with t and v, by moving u to the centroid b of tuv, the polygon edge tu becomes tb and the polygon edge uv becomes bv, both of which are shorter than the original edges (or tu + uv &gt; tb + bv). If u collinear with t and v, the edges computed after smoothing u will have a total length equal to the original edges (tu + uv = tb + bv). Since not all polygon vertices p i can be collinear with the line defined by p i−1 and p i+1 , repeated application of smoothing on the polygon results in a sequence of polygons p, p , p ... of strictly decreasing perimeter. Since the polygon edges have positive lengths, the perimeter tends to zero or exactly one point.</p><p>The previous theorems show that discrete curve shortening preserves the non-crossing properties for convex polygons, and that the asymptotic results of the two flows correspond for any polygon. However, the first property does not hold for concave polygons, as shown in <ref type="figure" target="#fig_1">Fig. 3a</ref>.</p><formula xml:id="formula_1">Algorithm 1 EulerSmooth. for numberOfIterations do for all v ∈ V do force v ← 0 constraint v ← +∞ FORCE COMPUTATION for all ForceDef in ForceSystem do force ← force + ForceDef.compute() CONSTRAINT COMPUTATION for all ConstraintDef in ConstraintSystem do constraint ← min constraint, ConstraintDef.compute() NODE MOVEMENT for all v ∈ V do if magnitude force(u) &gt; constraint(u) then force(u) ← force(u) * constraint/magnitude force(u) position(u) ← position(u) + force(u) POST-ITERATION for all PostIteration in PostIterationSteps do</formula><p>PostIteration.compute() By re-sampling the polygon boundaries the chance of self intersection is reduced, as shown in <ref type="figure" target="#fig_1">Fig. 3b</ref>. The re-sampling procedure is sufficient to avoid self-intersections in all of our tested cases. However, we can enable an algorithm <ref type="bibr" target="#b23">[24]</ref> used in previous approaches to provably avoid self-intersections. This algorithm checks for these intersections and reduces node movement to a safe distance. In practice, these checks are not required in most cases, causing an increase in computational complexity and running time. However, they can provide other benefits in a broad application scenario, motivating their inclusion in our algorithm (see Surrounding Edges in Section 4.3).</p><p>Boundary re-sampling provides a second, crucial advantage. When a polygon is over-sampled, the refinement of the boundaries is impeded. In fact, if a vertex u is very close to neighbours t and v, the triangle tuv is small and therefore its centroid is close to u. Therefore, the re-sampling can reduce curve complexity, improving the speed of the computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Preservation of Diagram Properties</head><p>Discrete curve shortening flow provides a method for curve simplification. However, it cannot be used directly for Euler diagrams improvement without first ensuring that it will preserve fundamental diagram properties such as the presence or absence of set intersections and element containment. First, boundaries should not shrink to a point. As Euler diagrams contain set elements inside the curves, we use these elements as a backstop, allowing set boundaries to nicely shrink around the elements they contain. These elements prevent the diagram from collapsing to a single point. In section 4, we discuss this in further detail.</p><p>Secondly, sufficient spacing between set elements as well as between set elements and set boundaries needs to be ensured. Therefore, we propose to model discrete curve shortening flow using a force-directed algorithm, allowing us to use other forces to ensure proper spacing.</p><p>Finally, we must prevent set elements from crossing boundaries and ensure that set intersections in the diagram are neither created nor destroyed. This property is accomplished by constraining node movement using ImPrEd <ref type="bibr" target="#b23">[24]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">IMPLEMENTATION</head><p>In this section, we describe the implementation of a force-directed algorithm that can be used to improve the appearance of Euler diagrams The diagram is modelled as a graph. In green, the junctions. Polyline edges define the set boundaries. (c) For each set, we identify a subgraph containing all graph elements contained by that set. This subfigure shows the subgraph for set C. (d) We can choose to use independent boundaries, allowing for a less constrained refinement. Junctions and edges shared between subgraphs are duplicated (e.g. u is duplicated in u B and u C ), allowing for separate refinement. through discrete curve shortening flow. First, we explain how the input diagram, the output of any Euler diagram drawing method, is encoded into a graph. Then, we present the algorithm itself, EulerSmooth. Finally, we discuss how the algorithm can be configured to improve the diagrams presented in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Input Diagram</head><p>The input diagrams are modelled as graphs with polyline edges. These graphs have two sets of nodes: the set elements and the boundary junctions. The set elements have zero degree and have position, colour, size and labels. The junctions identify crossing points between boundaries of the original diagram. These nodes are connected with polyline edges that follow the boundary contours with arbitrary precision. Sets with no boundary crossings still have a singular junction that is placed on a random point of the set boundary, closing a polyline loop (see Figs. 4a and 4b). For each set, we identify a subgraph formed by all the elements contained in that set, and all junctions and edges that compose its boundary (see <ref type="figure" target="#fig_2">Fig. 4c</ref>).</p><p>This construction ensures that any crossings and concurrent boundaries are modified simultaneously over all sets, preserving the original topology of the graph. We define this condition as dependent boundaries. Whenever this behaviour is considered too restrictive, is it possible relax these constraints, duplicating junctions and shared edges. The duplicated elements share the same initial position but are free to evolve separately. We define this configuration as independent boundaries (see <ref type="figure" target="#fig_2">Fig. 4d</ref>). In this paper, all the input diagrams have been constructed by manually tracing over output images, constructing the input graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">EulerSmooth</head><p>The proposed algorithm can be considered a modular version a forcedirected approach. In the implementation (see Algorithm 1), forces, constraints, and post-iterations steps are modules that can be plugged into or removed from the algorithm.</p><p>The input corresponds to the Euler diagram represented as a graph composed of polyline edges. Polyline bends and segments are treated by most modules as if they were standard nodes and edges. However, we support polyline edges to differentiate elements of the drawing that can be added/removed (polyline bends and segments) versus those that must remain in the drawing (nodes and whole edges). All modules use a QuadTree data structure to accelerate the computation time.</p><p>We now discuss these modules, starting with the forces, then the constraints, and finally the post processing steps. Certain modules derive directly from ImPrEd, (EdgeContraction, NodeNodeRepulsion, SurroundingEdges, FlexibleEdges). Others have been substantially modified (EdgeNodeRepulsion). All remaining forces are new to EulerSmooth. Furthermore, the modular nature of the algorithm allows for greater flexibility than in ImPrEd. It is now possible, for example, to insert multiple instances of the same force as is done for EdgeNodeRepulsion in Section 4.3.</p><p>Most modules contain parameters that are fixed to constants. These constants were chosen empirically and based on common sense. They can be modified depending on the application. Further experiments should be run in order to determine appropriate values given a class of input or the desired properties of the output.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Forces</head><p>EulerSmooth allows flexibility in defining the force system to be used. In particular, for all the forces it is possible to indicate subsets of the graph elements to which the force is applied. Multiple instances of the same force can be loaded, allowing for different ideal distances to be enforced between different pairs of elements in the drawing.</p><p>In the following, we indicate with p p p u ∈ R </p><formula xml:id="formula_2">F c u (e, d) = p p p u − p p p v d (p p p v − p p p u )</formula><p>NodeNodeRepulsion(d) This force repels two nodes from each other. The parameter d is the ideal distance between nodes. As is typical for force-directed algorithms, the edge contraction and extremities repulsion forces balance in d. The repulsive force F r u is:</p><formula xml:id="formula_3">F r u (u, v, d) = d p p p u − p p p v 2 (p p p u − p p p v ) EdgeNodeRepulsion(d)</formula><p>This force repels nodes from nearby edges. The parameter d is the ideal distance between a node and a edge. This force has been modified from its original formulation in ImPrEd to improve its stability when nodes are not contained in the projection of an edge <ref type="figure" target="#fig_4">(Fig. 5</ref>). Let u be a node and e = (v, w) be an non-incident edge (u / ∈ e). Let p be the projection of u onto the line defined by e. We define v as the closest edge extremity to u. The repulsive force F e u is:</p><formula xml:id="formula_4">F e u (u, e, d) =        d p p p u − p p p p 2 (p p p u − p p p p ) if p ∈ p p p e F r u (u, v, d) otherwise</formula><p>The forces on the segment extremities are:   </p><formula xml:id="formula_5">F e v (u, e, d) =      −F e u (u, e, d) p p p p − p p p w p p p v − p p p w if p ∈ p p p e −F r u (u, v, d) if p / ∈ p p p e</formula><formula xml:id="formula_6">     −F e u (u, e, d) p p p p − p p p v p p p v − p p p w if p ∈ p p p e 0 0 0 if p / ∈ p p p e</formula><p>The factor introduced in the first equation intensifies the repulsive force on the closest edge extremity and decreases it on the furthest one, better approximating the analogue physical system (see <ref type="figure" target="#fig_4">Fig. 5b</ref>).</p><p>CurveSmoothing This force applies the smoothing effect of the discrete curve shortening flow. The force moves a node toward the centroid of the triangle formed by its neighbours. Therefore, the force F s u that acts on a node u with neighbours t and v is:</p><formula xml:id="formula_7">F s u = 2 3 p p p t + p p p v 2 − p p p u</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Constraints</head><p>These modules control node movements and/or avoid movements that could compromise diagram properties that we want to preserve. In this section, we describe these constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DecreasingMaxMovement(d)</head><p>This constraint gradually decreases the maximal movement a node can take in a time period, allowing for more precise final positioning. The initial value for this movement is set to d for all nodes and linearly decreases as the computation progresses. </p><formula xml:id="formula_8">c i (u) =          d if i = 0 c i−1 (1 + 2(1 − a 60°) ) if a &lt; 60°c i−1 if 60 ≤ a &lt; 90°c i−1 /(1 + 4( a 90°− 1)) if a ≥ 90°T</formula><p>hus, the constraint is multiplied by a factor in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref> for movement in the same direction and divided by a factor in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b4">5]</ref> for movement in an opposite direction.</p><p>PinnedNodes This module constrains nodes to their input positions by setting their movement constraint to 0 throughout the computation.</p><p>SurroundingEdges This module constrains node movement so that nodes cannot cross edges denoted as surrounding edges. More specifically, given a set of nodes V and a set of edges E, this module ensures no u ∈ V crosses any edge e ∈ E. For a node u and e = (v, w), the module computes a line l that divides the plane into two halves. If the projection p of u lies in the edge (p ∈ p p p e ), the line l is identified as the axis of symmetry for the segment up. If the projection lies outside the edge, l is the axis of symmetry of the segment uv, with v being the closest endpoint to u. This module ensures that u does not cross e by limiting movement to a distance between u and l where they cannot collide along the direction of movement (see <ref type="figure" target="#fig_5">Fig. 6</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Post-Iteration Steps</head><p>Post-iteration modules can process the the output of an iteration.</p><p>FlexibleEdges <ref type="figure">(d c , d e</ref> ) This module re-samples the set boundaries. This re-sampling allows for set boundaries to grow and shrink, depending on the space required. Given an edge set E, the module increases or decreases the number of bends, depending on the stress of its edge segments. Given an edge e, the module first tries to remove bends or contract the edge, and then it tries to add bends or expand the edge. When contracting an edge, the module marks b 1 ...b n for removal. The bend b i is removed if the distance between its previous bend b i−1 (edge source, if i = 1) and the next bend b i+1 (edge target, if i = n) is less than a distance d c and the triangle formed by the three bends is empty (see <ref type="figure" target="#fig_7">Fig. 7a</ref>). When expanding an edge, the segments e 1 ...e n are checked for expansion. A segment is expanded when its length is greater than a distance d e by inserting a new bend at its midpoint (see <ref type="figure" target="#fig_7">Fig. 7b</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Algorithm Configuration</head><p>In order to ensure comparable results, we run the same configuration of EulerSmooth for all the diagrams in the paper. We select a single distance parameter d * and set three Boolean variables. The parameter d * can be thought of as an ideal distance between set elements and between set elements and boundaries. This parameter is proportional to the scale of the imported diagram.</p><p>The core modules used for diagram improvement in this paper are: CurveSmoothing EdgeNodeRepulsion(d * ) between elements and boundary edges EdgeContraction(0.7 d * ) for boundary edges</p><formula xml:id="formula_9">DecreasingMaxMovement(d * ) MovementAcceleration(d * ) FlexibleEdges(1.45 d * , 1.5 d * )</formula><p>The first Boolean parameter sets whether dependent or independent boundaries are required (see Section 4.1). We denote Dep to indicate dependant boundaries and Ind to indicate independent boundaries:</p><p>if Dep then SurroundingEdges between all nodes and boundaries. else SurroundingEdges between elements and boundaries.</p><p>Surrounding edges prevent set elements from crossing boundaries. For boundary nodes, we can relax this constraint, allowing for the creation or destruction of new zones not present in the input diagram. The result is generally a smoother diagram, where new empty zones are created. To our knowledge, no human centred experimentation exists that evaluates if these empty zones impede diagram readability. However, if this behaviour is not desired and the zones in the input diagram need to be preserved exactly, the surrounding edge constraint can be applied to all nodes in the drawing, including boundary nodes, ensuring that no new zone is created or destroyed during refinement.</p><p>The second Boolean parameter pins element movement. We use Fix to indicate the position of all set elements are fixed and Mov to indicate if they can move freely:</p><p>if Fix then PinnedNodes on set elements else NodeNodeRepulsion(d * ) between set elements</p><p>Pinning elements is particularly useful when refining drawings where elements are specific locations, as in Bubble Sets <ref type="bibr" target="#b8">[9]</ref>. Otherwise, the positions of set elements can be optimized for better distribution.</p><p>The final Boolean parameter allows concurrent boundaries to be relaxed. We use Sep to indicate the activation of this parameter:</p><p>if Sep then EdgeNodeRepulsion(d * / 15) between boundary nodes and edges When set, a local repulsive force is inserted between nodes and unrelated boundary edges, separating collinear boundaries. This option improves the readability of diagram but can generate stress and boundary irregularity on diagrams that do not contain concurrent boundaries.   <ref type="figure" target="#fig_10">Fig. 10e</ref> shows how this option causes this separation between boundaries to form. Unnecessary tension is present top part of the turquoise set. Without separation enabled, the boundaries would almost overlap, similar to <ref type="figure" target="#fig_10">Fig. 10f</ref>, between the bottom of the green and grey sets.</p><p>For all images, we specify which Booleans are set to generate them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Number of Iterations</head><p>A final parameter is the number of iterations applied. A larger number of iterations is usually required for larger input. For all the examples, the number of iterations has been empirically determined. However, it is possible to modify the implementation to iterate until the user is satisfied or when a global graph improvement metric is reached.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">ANALYSIS</head><p>To evaluate the effectiveness of EulerSmooth, we extracted diagrams published in previous work and improved them with our technique. The initial diagrams have been created by tracing contours and adding set elements as prescribed by the output images. Then, these diagrams have been optimized using appropriate parameters for the given case. For example, when improving the Manhattan Bubble Sets diagram (see <ref type="figure" target="#fig_1">Fig. 13</ref>), we use fixed node positions as they correspond to locations on the map. Whenever applicable, we show the variety of outputs possible with EulerSmooth.</p><p>Contour Based Diagrams Euler diagrams drawing approaches might or might not show set elements, causing significant differences in how a diagram is created and interpreted. For example, in a diagram that does not represent set elements (contour based), the existence of a overlap in the diagram implies that the given intersection contains elements. On the other hand, this requirement is not imposed for element based approaches as the elements are either visible in the region or the region is empty.</p><p>For this reason, contour and element based approaches are not always directly comparable. In our case, since the algorithm assumes the diagram is element based and requires set elements to limit shrinking, we add dummy elements into the regions of contour-based approaches as shown in <ref type="figure" target="#fig_10">Fig. 10</ref>.</p><p>Testing Hardware and Software All images and results in this section are generated by a Java implementation of EulerSmooth, which includes a testing GUI that animates diagram smoothing, computes diagram statistics, and records running times. The source code of the application has been made available <ref type="bibr" target="#b0">1</ref> .</p><p>All of our diagrams were created on a desktop machine equipped with an Intel Core i7-2600 processor, 8GB of RAM, and running KDE 4.14 on Arch Linux. <ref type="figure" target="#fig_8">Fig. 8</ref> shows the results of EulerSmooth on two basic diagrams: one with a single set and a second with two overlapping sets. We notice how the contour regularity is improved regardless, but EulerSmooth achieves a better result when node movement is enabled. <ref type="figure" target="#fig_9">Fig. 9</ref> shows an improved version of a diagram generated with Set Visualiser <ref type="bibr" target="#b33">[34]</ref>. By using independent boundaries, we can eliminate empty zones (blue-only region in the top-centre) which might make the original diagram less readable. We notice little difference between the results obtained with fixed versus movable elements as the initial positions of set elements do not require much refinement. <ref type="figure" target="#fig_10">Fig. 10</ref> shows the same input diagram improved with EulerSmooth and eulerForce. The diagrams improved with eulerForce appear more regular as our quantitative analysis in the next section can confirm. However, the shapes obtained with EulerSmooth are smooth and readable. <ref type="figure" target="#fig_11">Fig. 11</ref> shows the optimization of a diagram from Euler Representation [25, <ref type="figure" target="#fig_9">Figure 9a</ref>] consisting of twenty sets. This figure illustrates the difference between dependent and independent boundaries. In the first case, all regions of the original diagrams are preserved throughout the smoothing process, meaning that no new zones are created or destroyed. This forces concurrent boundaries to be preserved, limiting improvement. In particular, consider the blue set at the top of <ref type="figure" target="#fig_11">Fig. 11b</ref>: on the right side, the set crosses two other boundaries (green and red) at a single point. Since the point is required to satisfy the constraints of three different curves simultaneously, sharp angles are present in the drawing (blue and green).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Qualitative Evaluation</head><p>If there is flexibility in preserving the exact topology of the input diagram, we enable independent boundaries and obtain the result in <ref type="figure" target="#fig_11">Fig. 11c</ref>. By enabling this option, we introduce new regions not present in input drawing (in <ref type="figure" target="#fig_11">Fig. 11c</ref>, the blue-only triangular region in the centre of the drawing). However, none of these new regions will contain elements and the boundaries are much easier to follow.</p><p>In <ref type="figure" target="#fig_0">Fig. 12</ref>, EulerSmooth is applied to an Untangled Euler diagram [20, <ref type="figure">Figure 1a]</ref>. The algorithm transforms it into a more classical looking diagram with regular boundaries.</p><p>Finally, <ref type="figure" target="#fig_1">Fig. 13</ref> shows application of our method to the Manhattan Bubble Sets [9, <ref type="figure" target="#fig_9">Figure 9</ref>]. Although the shape of the sets in the final drawing are not circles, EulerSmooth can simplify boundaries even in these constrained circumstances, improving the readability of contours at the expense of additional occlusion of the background map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Quantitative Evaluation</head><p>We evaluated the effectiveness of EulerSmooth by computing the average initial and final isoperimetric quotient for all set boundaries Iterations shows the number of smoothing cycles performed. Q i is the initial average isoperimetric quotient. Q s is the average isoperimetric quotient for the improved diagram. The running time is the average running time over five runs of the approach.</p><p>in the diagrams. Given a closed curve , the isoperimetric quotient computes the ratio between the area enclosed by the line and that of a circle with equal circumference: Q = 4π area( ) / length( ) 2 . Since a circle is the shape that maximizes the closed area for a given perimeter, all simple closed curves will have an isoperimetric quotient between 0 and 1. One can view the isoperimetric quotient as an indication of how close the closed curve is to a circle. We employ the average isoperimetric quotient to evaluate the quality of the contours as previous work reports that smooth shapes <ref type="bibr" target="#b4">[5]</ref>, and circles in particular <ref type="bibr" target="#b6">[7]</ref>, increase diagram readability. <ref type="table" target="#tab_1">Table 1</ref> reports the enabled options, running time, and initial and final average isoperimetric quotient for the diagrams in this paper. We notice that our approach improves Q for all cases with larger improvements when less restrictive options are enabled (Mov instead of Fix, Ind instead of Dep). A low value is obtained for Bubble Sets <ref type="figure" target="#fig_1">(Fig. 13)</ref>, as the diagram is heavily constrained and difficult to improve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Improvements over Various Techniques</head><p>Running time and Complexity The reported running times are averaged over five executions and are in the range of one to twelve seconds. Times of this magnitude are acceptable for an interactive environment, as long as the data is only updated every few seconds. As expected, larger diagrams and independent boundaries are generally responsible for increased computation times. However, relatively simple diagrams might still require a high number of iterations. When observing the smoothing over time, we notice that boundary shapes are rapidly smoothed, but that a large amount of time is spent shrinking the contours to snugly fit the set elements. In fact, the shrinking process is slower on regular shapes.</p><p>Comparison with eulerForce We run a direct comparison between EulerSmooth and eulerForce. The authors of eulerForce provide a software that can generate an initial random diagram consisting of three, four, or five sets. We generate five diagrams for each (a total of 15 diagrams) and optimize them using EulerSmooth and eulerForce. We compare the resulting average isoperimetric quotient and record the average running time for both algorithms. <ref type="table" target="#tab_3">Table 2</ref> reports this data.</p><p>The computed metrics indicate a higher set boundary regularity for eulerForce, as suggested by visual inspection. The values are high and about the same for both EulerSmooth and       <ref type="table">Table 3</ref>: Scalability of the approach in terms of the change in running time and isoperimetric quotient. We tested five levels of sampling where the number of points on the boundary is multiplied by factors of 20% (1.2 i for i ∈ {−2, −1, 0, 1, 2}). The first two factors increase whereas the last two factors reduce the number of samples with respect to the original input diagram. All changes are normalized relative to the original input diagram, and all levels are run for a total of 350 iterations. This data quantifies running time and drawing quality trade-offs for finer and coarser sampling of the boundary.</p><p>eulerForce, indicating that all output diagrams are of high quality. However, eulerForce does not always produce a valid diagram. eulerForce produces invalid diagrams (zones are created or destroyed during execution) for three out of five instances of the five set data set. The authors explain that an increase in diagram complexity increases the probability of invalid diagrams, resulting in a success rate of 61% for diagrams of five sets. As seen in this paper, we can scale to diagrams of twenty sets.</p><p>EulerSmooth, due to its simple force system, can generate correct and pleasant diagrams even for the instances not supported by eulerForce (see <ref type="figure" target="#fig_2">Fig. 14)</ref>. Also, the running time of EulerSmooth is faster than eulerForce for diagrams of four to five sets, indicating that it has increased scalability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Scalability of EulerSmooth An algorithmic complexity for</head><p>EulerSmooth is difficult to formalize as the number of boundary nodes, and thus the number of nodes in the diagram, are constantly changed by re-sampling. Typically, the computation time per iteration decreases as the algorithm progresses, as boundaries are usually simplified by the approach and fewer points are necessary to define them. When the algorithm converges, often the boundaries are as simple as possible.</p><p>To quantify the scalability of our approach, along with the tradeoff between drawing quality and running time, we test a number of sampling levels for three Euler diagrams. <ref type="table">Table 3</ref> reports these results. These results are obtained by first increasing and then decreasing the number of points on the boundaries. Finer boundary sampling leads to a much higher running time with a slight increase in drawing quality. On the other hand, coarser boundary sampling drastically reduces running time at the expense of diagram quality.</p><p>In order to provide a fair comparison between all levels, we run 350 iterations for each level. This number of iterations is not always sufficient to reach a stable drawing for boundaries with a finer sampling and is more than enough for boundaries with a coarser sampling. Therefore, in the first case, we can run more iterations of the algorithm to increase diagram quality. Conversely, we can run fewer iterations in the second case to further improve the running time. For these reasons, the level of sampling can be used to mitigate scalability issues. In particular, when the standard sampling level leads to excessive running times in large diagrams.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>In this paper, we present a simple approach for Euler diagram improvement based on a simplification of curve shortening flow. We translate this method into a force system that can be used to improve the output of any Euler diagram drawing method using polygonal curves and set elements. The approach has been demonstrated on a variety of methods <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b24">25]</ref> for drawing Euler diagrams and evaluated against competitive approaches.</p><p>As future work, it would be interesting to see if we can extend other aspects of curve shortening flow and vector field design to the improvement of Euler diagrams in general. As methods exist that do not use a force system to optimize the input shape, it may be beneficial, in terms of computation time, to use these methods instead of a force system to optimize Euler diagrams.</p><p>Furthermore, an area of future work would be to provide evidence of effectiveness of this refinement through human centred experimentation. Although curves with high isoperimetric quotients often correspond to more readable curves, our contour optimization technique can affect other aesthetic criteria in the diagram, influencing the readability of the drawing.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 :</head><label>2</label><figDesc>Curve Shortening Flow. (a) In the original formulation of the problem, each point of the curve moves towards the centre of its osculating circle with speed proportional to the curvature at that point. (b) We adapt this problem to polylines by moving each point u of a boundary to the centroid of the triangle tuv, where t and v are the neighbour bends of u. (c) and (d) An evolution of the above curves after three iterations. The curves are smoothed from their initial to their final configuration (increasing saturation).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 :</head><label>3</label><figDesc>Smoothing a concave polygon. (a) The smoothing operation of a vertex u would cause a self-intersection. (b) The chance of creating a self intersection is reduced by re-sampling the polygon to obtain smaller edges with uniform length. By adding the new bends (purple circles), the previous smoothing operation has no self intersections.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 :</head><label>4</label><figDesc>The input diagram. (a) The original diagram the algorithm aims to improve. (b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>2 the position of the node u. If e = (u, v) is an edge, we denote the line segment between p p p u and p p p v as p p p e . EdgeContraction(d) This force attracts the extremities of an edge toward each other, decreasing the length of the edge. The parameter d is the ideal edge length. The force F c u acting on node u by the edge e = (u, v) is:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 :</head><label>5</label><figDesc>Edge repulsion force modifications. (a) The related ImPrEd force is null if the node projection is not contained in the edge. As a result, a node might alternate between being affected or not by edge repulsion even with the slightest modification of position. The problem is solved by incorporating a repulsion force between the node and the closest edge extremity when the node projection is not contained in the edge. (b) The forces exerted on the edge extremities depend on their distance to p, providing a balancing effect on the forces.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 :</head><label>6</label><figDesc>Surrounding edge constraint. The module defines a line l that separates a node and and edge that should not be crossed. We ensure crossings will not occur by restricting the nodes movements to be smaller than the collision distance between c x with l. When the force does not point towards l, no constraint is necessary. (a) Constraint computation for p when it lies on the edge. (b) Constraint computation for p when it lies outside the edge. Note that inverting the edge (v, w) is impossible when the edge forms part of a boundary as either v or w would need to cross an adjacent edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>F</head><label></label><figDesc>e w (u, e, d) =</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 :</head><label>7</label><figDesc>Flexible edges contraction and expansion. (a) Contraction. Since b 1 previous bend (u) and following bend (b 2 ) are closer than d c and no nodes are in the triangle ub 1 b 2 , the bend b 1 and its incident segments are substituted by the green segment. (b) Expansion. Since the first edge segment is longer than d e , a new bend b * is introduced and the segment is substituted by the two green ones. MovementAcceleration(d) This constraint increases or decreases the speed of node movement according to consistency with the previous iteration, reducing oscillations. For a node v, the c i (u) is updated according to the angle a between consecutive iterations:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 8 :</head><label>8</label><figDesc>Example diagrams optimised with EulerSmooth. (a,d) The original diagrams. (b,e) The diagrams optimised while keeping the nodes in their original position (Fix,Dep). (c,f) The diagrams optimised while allowing elements move (Mov,Dep).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 9 :</head><label>9</label><figDesc>Optimization of a Set Visualiser diagram [34]. (a) The input diagram. (b) The diagram optimised while keeping the nodes in their original position (Fix,Ind). (c) The diagram optimised while allowing elements move (Mov,Ind).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 10 :</head><label>10</label><figDesc>Comparison of diagrams optimised with EulerSmooth and with eulerForce. In order to preserve the zone spacing with EulerSmooth, a dummy node have been inserted in each depicted zone. First row, example diagram with three sets (instance ID 1). Second row, example diagram with four sets (instance ID 1). Third row, example diagram with five sets (instance ID 2). (a,d,g) The input diagrams. (b,e,h) The diagrams optimised with EulerSmooth (Mov,Dep,Sep). (c,f,i) The diagrams optimised with eulerForce.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 11 :</head><label>11</label><figDesc>Optimization of the Imdb20 Euler diagram [25, Figure 9a]. (a) The input diagram. (b) The diagram optimised while allowing elements to move (Mov,Dep). (f) The diagram optimised allowing elements move and sets evolve independently (Mov,Ind).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 12 :</head><label>12</label><figDesc>Optimization of an Untangled Euler Diagram [20, Figure 1a]. (a) The input diagram. (b) The diagram optimised while pinning elements in their input positions (Fix,Ind). (c) The diagram optimised while allowing elements to move (Mov,Ind).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 13 :</head><label>13</label><figDesc>Improvement of the Bubble Sets diagram over the Manhattan map [9, Figure 9]. (a) The input diagram. (b) The diagram optimised with EulerSmooth (Fix,Ind).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 14 :</head><label>14</label><figDesc>Optimization of two five-set diagrams unsupported by eulerForce. (a,c) The input diagrams. (b,d) The diagrams optimised with EulerSmooth (Mov,Dep,Sep</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Statistics for the execution of EulerSmooth over the diagrams in this paper. The statistics for EulerForce diagrams (Figs. 10 and 14) are collected inTable 2. Constraints activated are indicated by their first letter (F for Fix, M for Mov, D for Dep, I for Ind).</figDesc><table><row><cell>Diagram</cell><cell cols="4">Fig. Opt. Iter. Q i</cell><cell>Q s Time</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>%</cell><cell>%</cell><cell>(s)</cell></row><row><cell>General Euler</cell><cell>1b</cell><cell cols="4">MD 300 75.3 96.5 3.35</cell></row><row><cell>Untangled Small</cell><cell>1d</cell><cell>MI</cell><cell cols="3">100 36.7 76.3 2.42</cell></row><row><cell>Single</cell><cell>8b</cell><cell>FD</cell><cell cols="3">120 39.7 90.3 1.83</cell></row><row><cell></cell><cell>8c</cell><cell>MD</cell><cell></cell><cell></cell><cell>99.6 1.96</cell></row><row><cell>Double</cell><cell>8e</cell><cell>FD</cell><cell cols="3">120 45.7 85.3 1.88</cell></row><row><cell></cell><cell>8f</cell><cell>MD</cell><cell></cell><cell></cell><cell>98.5 2.07</cell></row><row><cell>Imdb20</cell><cell>-</cell><cell>FD</cell><cell cols="3">25 56.9 74.6 6.52</cell></row><row><cell></cell><cell>-</cell><cell>FI</cell><cell>40</cell><cell></cell><cell>84.6 9.67</cell></row><row><cell></cell><cell cols="2">11b MD</cell><cell>25</cell><cell></cell><cell>73.9 6.71</cell></row><row><cell></cell><cell>11c</cell><cell>MI</cell><cell>40</cell><cell></cell><cell>86.0 10.15</cell></row><row><cell>BubbleSet</cell><cell>13b</cell><cell>FI</cell><cell>50</cell><cell cols="2">4.5 10.2 6.43</cell></row><row><cell>Untangled</cell><cell>12b</cell><cell>FI</cell><cell cols="3">100 47.1 79.2 5.25</cell></row><row><cell></cell><cell>12c</cell><cell>MI</cell><cell></cell><cell></cell><cell>82.8 5.21</cell></row><row><cell>SetVis</cell><cell>9b</cell><cell>FI</cell><cell cols="3">50 77.3 92.3 1.22</cell></row><row><cell></cell><cell>9c</cell><cell>MI</cell><cell></cell><cell></cell><cell>93.3 1.19</cell></row></table><note>1 http://hdc-arizona.github.io/EulerSmooth/</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>). The dummy elements have been removed to create a contour based diagram.</figDesc><table><row><cell cols="2">Sets Id Q i</cell><cell>Q s</cell><cell>Q f</cell><cell cols="2">Time s Time f</cell></row><row><cell></cell><cell>%</cell><cell>%</cell><cell>%</cell><cell>(s)</cell><cell>(s)</cell></row><row><cell>3</cell><cell cols="2">1 58.3 95.5</cell><cell>99.0</cell><cell>3.6</cell><cell>2.35</cell></row><row><cell></cell><cell cols="2">2 57.0 95.6</cell><cell>98.5</cell><cell>3.5</cell><cell>3.48</cell></row><row><cell></cell><cell cols="2">3 51.3 96.1</cell><cell>98.6</cell><cell>3.6</cell><cell>2.25</cell></row><row><cell></cell><cell cols="2">4 51.0 96.2</cell><cell>97.4</cell><cell>4.6</cell><cell>2.57</cell></row><row><cell></cell><cell cols="2">5 58.5 95.5</cell><cell>98.8</cell><cell>5.9</cell><cell>2.57</cell></row><row><cell>4</cell><cell cols="2">1 53.6 96.2</cell><cell>98.1</cell><cell>5.4</cell><cell>4.85</cell></row><row><cell></cell><cell cols="2">2 38.4 93.9</cell><cell>94.0</cell><cell>5.7</cell><cell>5.85</cell></row><row><cell></cell><cell cols="2">3 45.5 94.9</cell><cell>97.2</cell><cell>6.2</cell><cell>4.63</cell></row><row><cell></cell><cell cols="2">4 41.9 93.3</cell><cell>93.0</cell><cell>4.5</cell><cell>6.14</cell></row><row><cell></cell><cell cols="2">5 53.6 95.6</cell><cell>98.5</cell><cell>5.1</cell><cell>5.85</cell></row><row><cell>5</cell><cell cols="3">1 36.5 84.9 Invalid</cell><cell>8.6</cell><cell>32.89</cell></row><row><cell></cell><cell cols="2">2 41.7 95.2</cell><cell>98.2</cell><cell>8.2</cell><cell>16.64</cell></row><row><cell></cell><cell cols="2">3 43.0 95.6</cell><cell>95.0</cell><cell>8.2</cell><cell>14.53</cell></row><row><cell></cell><cell cols="4">4 44.3 86.2 Invalid 13.9</cell><cell>25.67</cell></row><row><cell></cell><cell cols="4">5 42.6 85.6 Invalid 13.5</cell><cell>22.47</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Statistics for the improvement of diagrams with EulerSmooth and eulerForce. Q x is the average isoperimetric quotient. Subscript i indicates initial, s indicates EulerSmooth, f indicates eulerForce. Q f has not been computed for the three 5-sets instances (ID 1, 4 and 5) as eulerForce produced invalid drawings. On all diagrams, we run EulerSmooth with the option Mov, Dep and Sep. For 3 and 4 sets, 350 iterations were sufficient. For 5 sets, we ran 500 iterations.</figDesc><table><row><cell cols="2">Sets Fig.</cell><cell cols="4">1.2 −2 1.2 −1 1.2 1 1.2 2</cell></row><row><cell></cell><cell></cell><cell>%</cell><cell>%</cell><cell>%</cell><cell>%</cell></row><row><cell>3</cell><cell>10a Time</cell><cell>181</cell><cell>126</cell><cell>73</cell><cell>57</cell></row><row><cell></cell><cell>Q s</cell><cell>103</cell><cell>102</cell><cell>97</cell><cell>89</cell></row><row><cell>4</cell><cell>10d Time</cell><cell>188</cell><cell>137</cell><cell>77</cell><cell>57</cell></row><row><cell></cell><cell>Q s</cell><cell>99</cell><cell>100</cell><cell>99</cell><cell>97</cell></row><row><cell>5</cell><cell>10g Time</cell><cell>223</cell><cell>147</cell><cell>70</cell><cell>52</cell></row><row><cell></cell><cell>Q s</cell><cell>101</cell><cell>101</cell><cell>96</cell><cell>87</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Design study of linesets, a novel set visualization technique</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Alper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">H</forename><surname>Riche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ramos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Czerwinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2259" to="2267" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note>InfoVis &apos;11</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Radial sets: Interactive visual analysis of large overlapping sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Alsallakh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Aigner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Miksch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Trans. on Visualization and Computer Graphics (InfoVis &apos;13)</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="2496" to="2505" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Visualizing sets and set-typed data: State-of-the-art and future challenges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Alsallakh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Micallef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Aigner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Miksch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Eurographics Conference on Visualization (EuroVis &apos;14) STAR Reports</title>
		<meeting>of Eurographics Conference on Visualization (EuroVis &apos;14) STAR Reports</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An automated method for finding molecular complexes in large protein interaction networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Bader</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">W V</forename><surname>Hogue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Evaluating the comprehension of Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Benoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><forename type="middle">E</forename><surname>Banissi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Burkhard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Grinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Information Visualisation (IV07)</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="771" to="780" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A force-directed algorithm that preserves edge crossing properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Bertault</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="7" to="13" />
			<date type="published" when="2000-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The impact of shape on the perception of Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Blake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stapleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Cheek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 8th International Conference on the Theory and Application of Diagrams</title>
		<meeting>of the 8th International Conference on the Theory and Application of Diagrams</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">8578</biblScope>
			<biblScope unit="page" from="124" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Vector field editing and periodic orbit extraction using morse decomposition. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mischaikow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pilarczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="769" to="785" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Bubble Sets: Revealing set relations with isocontours over existing visualizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Penn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Carpendale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1009" to="1016" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
	<note>InfoVis &apos;09</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Implicit fairing of irregular meshes using diffusion and curvature flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th annual conference on Computer graphics and interactive techniques</title>
		<meeting>the 26th annual conference on Computer graphics and interactive techniques</meeting>
		<imprint>
			<publisher>ACM Press/Addison-Wesley Publishing Co</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="317" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Topology preserving constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing (GD08)</title>
		<editor>I. G. Tollis and M. Patrignani</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5417</biblScope>
			<biblScope unit="page" from="230" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Lettresà une princesse d&apos;Allemagne</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Euler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1761" />
			<biblScope unit="page" from="102" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">VennMaster: Areaproportional Euler diagrams for functional go analysis of microarrays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">A</forename><surname>Kestler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Buchholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>Gress</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Kane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">R</forename><surname>Zeeberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">N</forename><surname>Weinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Principles of Gestalt Psychology. Harcourt Brace</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Koffka</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1935" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">UpSet: Visualization of intersecting sets. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lex</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gehlenborg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Strobelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Vuillemot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1983" to="1992" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">eulerAPE: Drawing area-proportional 3-Venn diagrams using ellipses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Micallef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS One</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page">101717</biblScope>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">eulerForce: Force-directed layout for Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Micallef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="924" to="934" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Uncovering the overlapping community structure of complex networks in nature and society</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Palla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Derényi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Farkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Vicsek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">435</biblScope>
			<biblScope unit="page" from="814" to="818" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Common region: a new principle of perceptual grouping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Palmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cognitive Psychology</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="436" to="447" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Untangling Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">H</forename><surname>Riche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1090" to="1099" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>InfoVis &apos;10</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">General Euler diagram generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Diagrammatic Representation and Inference</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5223</biblScope>
			<biblScope unit="page" from="13" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Embedding wellformed Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stapleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th International Conference on Information Visualisation</title>
		<meeting>of the 12th International Conference on Information Visualisation</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="585" to="593" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">OnSet: Visualizing Boolean set-typed data using direct manipulation. Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sadana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Major</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dove</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1993" to="2002" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">ImPrEd: An improved force-directed algorithm that prevents nodes from crossing edges. Computer Graphics Forum (EuroVis &apos;11)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Simonetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Auber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bourqui</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1071" to="1080" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Fully automatic visualisation of overlapping sets. Computer Graphics Forum (EuroVis &apos;09)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Simonetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Auber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="967" to="974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Automatically drawing Euler diagrams with circles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stapleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Flower</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="163" to="193" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Inductively generating Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stapleton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rodgers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="88" to="100" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Curve and surface smoothing without shrinkage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Fifth International Conference on Computer Vision</title>
		<meeting>of the Fifth International Conference on Computer Vision</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="852" to="857" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A signal processing approach to fair surface design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd annual conference on Computer graphics and interactive techniques</title>
		<meeting>the 22nd annual conference on Computer graphics and interactive techniques</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="351" to="358" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Search asymmetry: a diagnostic for preattentive processing of separable features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Treisman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Souther</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Experimental Psychology: General</title>
		<imprint>
			<biblScope unit="volume">114</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="285" to="310" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Ensuring the drawability of extended Euler diagrams for up to 8 sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Verroust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-L</forename><surname>Viaud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Diagrammatic Representation and Inference</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">2980</biblScope>
			<biblScope unit="page" from="128" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Identifying representative textual sources in blog networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wade</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Greene</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cunningham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International Conference on Weblogs and Social Media (AAAI ICWSM)</title>
		<meeting>of the International Conference on Weblogs and Social Media (AAAI ICWSM)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="393" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Exact and approximate area-proportional circular Venn and Euler diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wilkinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="321" to="331" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Set visualiser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wyatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wynn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Clarkson</surname></persName>
		</author>
		<ptr target="https://www-edc.eng.cam.ac.uk/tools/set_visualiser/" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Region-based line field design using harmonic functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-Y</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-T</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-Y.</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ju</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="902" to="913" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
	<note>Visualization and Computer Graphics</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
