<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Construction of Simplified Boundary Surfaces from Serial-sectioned Metal Micrographs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><forename type="middle">E</forename><surname>Dillard</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">F</forename><surname>Bingert</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Thoma</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
						</author>
						<title level="a" type="main">Construction of Simplified Boundary Surfaces from Serial-sectioned Metal Micrographs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Surface extraction</term>
					<term>Polygonal meshes</term>
					<term>Visualization in Physical Sciences</term>
					<term>Life Sciences and Engineering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a method for extracting boundary surfaces from segmented cross-section image data. We use a constrained Potts model to interpolate an arbitrary number of region boundaries between segmented images. This produces a segmented volume from which we extract a triangulated boundary surface using well-known marching tetrahedra methods. This surface contains staircase-like artifacts and an abundance of unnecessary triangles. We describe an approach that addresses these problems with a voxel-accurate simplification algorithm that reduces surface complexity by an order of magnitude. Our boundary interpolation and simplification methods are novel contributions to the study of surface extraction from segmented cross-sections. We have applied our method to construct polycrystal grain boundary surfaces from micrographs of a sample of the metal tantalum.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Triangle meshes are a common representation of surface structures. They are convenient for visualizing surfaces using computer graphics hardware, and they provide a succinct and precise representation of a surface which can be used for further applications, such as simulations. In many imaging applications, a triangle mesh must be constructed from some other representation of the structure, such as a volume image (voxels) or a stack of planar curves. The problem of extracting a surface from either form of data has been studied extensively in the computer graphics and visualization fields. In this paper we make novel contributions to the study of constructing surfaces from planar boundary curves and extracting separating surfaces from segmented volumes. We describe a method for interpolating segmented region boundaries between planar sections which can track an arbitrary number of regions, and we introduce an algorithm to extract a simplified, voxel-accurate triangle mesh from the resulting segmented volume.</p><p>Our method extracts crystal grain boundaries of polycrystalline materials, given serially sectioned micrographs as input. The configuration of most materials of technological importance consists of polycrystalline aggregates. The properties possessed by these polycrystals are a function of the size, morphology, phase, and spatial correlation of the constituent crystals, along with any additional constituents such as precipitates and inclusions, and defects such as voids and cracks. The spatial relationship of these features is therefore important toward understanding the relationship between structure and property that is central to the materials science discipline. The development of predictive material models also relies on accurate representations of structure. Although two-dimensional sections reveal many microstructural features that may be statistically captured through stereological approaches, for many cases a three-dimensional reconstruction is necessary to fully interpret the structure.</p><p>A sample of the metal tantalum was ground and imaged at intervals of 5 microns, and each image has sub-micron resolution. Two types of images were captured, a gray-valued optical image and an electron back-scatter diffraction (EBSD) image which measures the crystallographic lattice orientation of the metal <ref type="bibr" target="#b0">[1]</ref>. These images can been seen in <ref type="figure">Figure 1</ref>. Because the EBSD images capture more information than the optical images, automatic segmentation of these images produces more accurate crystal grain boundaries. However, the EBSD scanner takes considerably more time to capture an image than the optical scanner. For this reason, EBSD images are taken only every fifth section, at a spacing of 25 microns. This difference in sampling densities, between the in-slice imaging directions and the through-slice sectioning direction, makes it difficult to stack the segmented images into a coherent volume. Grain boundaries vary significantly between segmented slices, as one can see in <ref type="figure">Figure 1</ref></p><formula xml:id="formula_0">(d).</formula><p>Our problem is closely related to a common problem and practice in medical image processing: tomographic images are hand-segmented to identify features of interest, but due to the time it takes to segment by hand, these segmentations are only performed on a relatively small subset of the given sections. Binary segmentations can be smoothly interpolated using distance fields, and if there are multiple segmented features, each feature can be smoothed individually and then the collection of smoothed boundaries can be patched together to form a multi-labeled volume <ref type="bibr" target="#b1">[2]</ref>. If, however, there exist several hundred or thousand features whose boundaries need to be interpolated, it may not be practical to treat each feature individually.</p><p>We present a boundary interpolation method that can track an arbitrary number of boundaries. This interpolation is accomplished using a simple physical model, called the Potts model. Each voxel in the volume is given some segmentation label, and a local energy function is defined using the segmentation labels and optical gray-values of a neighborhood of voxels. Voxels with known segmentation labels are kept fixed while we attempt to find a labeling of unknown voxels which minimizes the total energy of the segmentation.</p><p>After interpolating the planar boundary curves, we extract a boundary surface between regions. We use the well-known marching tetrahedra method of Nielson and Franke <ref type="bibr" target="#b23">[24]</ref>. This algorithm constructs a surface by considering a small number of segmentation configurations in a tetrahedral domain. These cases are illustrated in <ref type="figure" target="#fig_2">Figure 2</ref>. Without any additional information (such as a scalar field) to define the surface geometry, we start with the midpoint surface, halfway between differently labeled voxels. The midpoint surface exhibits staircase artifacts which must be smoothed, and it contains many more triangles than are necessary to represent the boundary surface. To mitigate both of these issues, we use a combination smooth-and-simplify algorithm. In order for materials scientists to evaluate the results of the boundary interpolation, we would like for the smooth-and-simplify algorithm to change the boundary surface as little as possible. On complex datasets, the marching tetrahedra algorithm can produce triangle  . Two types of imagery: (a) electron backscatter diffraction or EBSD, and (b) optical. The high fidelity of EBSD images allows for robust automatic segmentation (c), but because they take significantly longer to acquire, EBSD images may be captured sparsely. In such cases, segmentation boundaries can vary dramatically between slices (d).</p><p>meshes consisting of several million triangles, so some mesh simplification is desired to allow for interactive exploration of the results. To balance these two goals, we have developed a smooth-and-simplify algorithm which guarantees that the boundary surfaces remain confined to those tetrahedra which generate them, while reducing the number of triangles by an order of magnitude.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>The problem of creating surfaces from planar cross-sectional curves has been studied extensively. There are various solutions to the problem that rely on graph optimization <ref type="bibr" target="#b8">[9]</ref>, Delaunay triangulations <ref type="bibr" target="#b3">[4]</ref>, implicit surfaces <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b25">26]</ref> and other techniques. The paper by Braude et al. <ref type="bibr" target="#b5">[6]</ref> contains a brief survey of the field. We follow the approach of Weinstein's scanline-surfacing algorithm <ref type="bibr" target="#b27">[28]</ref>, solving the surface reconstruction problem in a voxelized space using a separating surface algorithm. Separating surfaces can be extracted from a segmented volume in one of two ways, either by first decomposing the hexahedral voxel cells into five or six tetrahedral cells, or by operating directly on the hexahedral cells. Both approaches then create triangle surfaces in the interiors of cells which separate differently labeled cell vertices. Tetrahedral methods were developed independently by Müller <ref type="bibr" target="#b21">[22]</ref> and Nielson &amp; Franke <ref type="bibr" target="#b23">[24]</ref>. Hexahedral methods can be considered multiregion generalizations of marching cubes <ref type="bibr" target="#b18">[19]</ref>, and thus import similar topological ambiguities. Hege solved these ambiguities with detailed case analysis <ref type="bibr" target="#b11">[12]</ref>, as did Wu and Sullivan <ref type="bibr" target="#b29">[30]</ref>, while Bischoff and Kobbelt subdivided ambiguous voxels <ref type="bibr" target="#b2">[3]</ref>. Bischoff and Kobbelt allow the user some control over the topology inside a cell, while all other methods, ours included, arbitrarily decide the topology a priori, which could lead to unwanted artifacts.</p><p>If there are no additional geometric constraints, such as volume fraction information, then one has to choose arbitrarily where to place surface vertices. An obvious choice is to place them at the midpoints of edges of the underlying hexahedral voxel mesh. However, this leads to aliasing artifacts. In a binary segmentation, these artifacts can be smoothed before a surface is extracted by filtering a scalar function defined by the segmentation <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b22">23]</ref>, or the separating surfaces can be smoothed after they are created, using some form of constrained smoothing <ref type="bibr" target="#b24">[25]</ref>. Reitinger paid special attention to smoothing across the non-manifold edges in a multi-region separating surface <ref type="bibr" target="#b26">[27]</ref>.</p><p>In large volumes it may be desirable to simplify the smoothed surface. Numerous methods for simplifying triangle surfaces have been developed. Luebke surveyed the field with an emphasis on practical applications <ref type="bibr" target="#b19">[20]</ref>. In scientific applications, considering the geometric error caused by simplification is important. Kalvin and Taylor provided error bounds by merging nearly-coplanar faces into so-called superfaces, and bounding the distance between a superface and its constituent triangles <ref type="bibr" target="#b15">[16]</ref>. Guéziec descibed a method that tracks error bounds at vertices and preserves volume by carefully placing new vertices when an edge is collapsed <ref type="bibr" target="#b10">[11]</ref>. The error-bounded simplification methods most similar to our own are the simplification envelopes of Cohen et al. <ref type="bibr" target="#b6">[7]</ref> and the permission grids of Zelinka and Garland <ref type="bibr" target="#b30">[31]</ref>. Both methods create a tolerance volume around the initial mesh and forbid any modification which moves the mesh outside of this volume. Simplification envelopes are created by an offset surface from the original mesh, and permission grids are created by rasterizing the mesh onto a voxel grid.</p><p>Bertram et al. considered an application that poses many of the same challenges as ours: constructing non-manifold separating surfaces from segmented, time-varying magnetic resonance images of the human heart <ref type="bibr" target="#b1">[2]</ref>. Multiple regions (anatomical features of the heart) are manually segmented in sparsely distributed slices of the volume image. Region boundaries are interpolated between segmented slices by interpolating the signed distance fields of these boundaries. The interpolated signed distance field of every region is considered, and a voxel is assigned the segmentation label of the closest region. Separating surfaces are extracted on the dual voxel grid, placing surface vertices inside cells of the primal grid. The surface is smoothed with a Laplacian filter, subject to the constraint that each vertex remain in the voxel that generated it.</p><p>Our method offers two main advantages over some of the methods mentioned above. First, whereas the method of Bertram et al. calculates the distance field separately for each region boundary, the computational effort required for our boundary interpolation is independent of the number of regions. This is highly desirable in situations when the number of regions is very large, such as in our metal micrograph application. Second, our surface smoothing and simplification approach eliminates both sampling artifacts and excess triangles without introducing error. If smoothing and simplification are treated as separate steps, as done by Reitinger et al. <ref type="bibr" target="#b26">[27]</ref> and Wu &amp; Sullivan <ref type="bibr" target="#b29">[30]</ref>, there is a possibility that surface simplification will be hindered by aliasing artifacts which are not completely removed in the smoothing step. This effect is illustrated in <ref type="figure">Figure 7</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BACKGROUND</head><p>We are given a stack of segmented images which represent serial crosssections of some volume. We call the segmented features regions, and each pixel of each image is given a label to associate it with a region. The boundary between two regions forms a planar boundary curve, and where three or more regions meet, multiple planar curves come together at a boundary vertex. In our application, regions are crystal grains, which are polyhedron-like structures with nearly planar facets and nearly straight edges. When a sectioning plane intersects a grain, facets appear as planar boundary curves, and grain edges appear as vertices of these curves. Grain vertices, however, are rarely captured in the sectioning plane and their locations can only be inferred.</p><p>In three-dimensional space, two adjacent regions are separated by a surface which we refer to as a boundary facet, although it need not be planar. Two facets between the same two regions are distinct if the facets are disjoint, i.e., the regions touch at two separate places. Three or more facets meet at a boundary edge, and multiple edges meet at a boundary vertex. We refer to the collection of boundary facets, edges and vertices as the boundary surface. Topologically, the boundary surface is part of a cell complex, with the region interiors being the three-dimensional cells. We assume this complex is closed so that all facets are bounded by edges if they are bounded at all, and all edges are bounded by vertices unless they form closed loops. We can ensure this property by extending the segmented volume with a layer of "void" labels.</p><p>Avoiding topological ambiguities is a concern for any boundary extraction method. We take the approach of imposing a tetrahedral domain over the rectilinear voxel grid, following Nielson and Franke <ref type="bibr" target="#b23">[24]</ref>. Each hexahedral cell of the voxel grid is subdivided into five tetrahedra. Vertices of the tetrahedra are labeled with their region identifier. To avoid confusion between a tetrahedral vertex of the voxel grid and a triangular vertex of the separating surface, we refer to the former as a domain vertex and the latter as a surface vertex, and we use the same convention for edges and triangles.</p><p>We classify tetrahedra and triangles of the domain by counting the number of distinct labels at their vertices. <ref type="figure" target="#fig_2">Figure 2</ref> illustrates these cases. If a domain tetrahedron has two labels among its four vertices, then it is a facet-type tetrahedron and some patch of a facet passes through its interior. This patch intersects three or four faces of the tetrahedron, and these faces are also referred to as facet-type faces. If a tetrahedron has three labels, then it is an edge-type tetrahedron and some boundary edge passes through the interior. This boundary edge enters the tetrahedron at one face, and leaves it at another face. These two faces are also edge-type, and the remaining two faces are facet-type. A tetrahedron with four distinct labels is a vertex-type tetrahedron. It joins four boundary edges and six boundary facets, and all four of the tetrahedral faces are edge-type. Any tetrahedron, triangle or edge of the domain with vertices that are all similarly labeled is called interior-type.</p><p>A triangle mesh is a collection of vertices, pairs of the vertices (edges) and triplets of vertices (triangles). It is called a manifold triangle mesh without boundary if for every point on the surface we can find a small enough ball, centered on this point, which contains a piece of the surface that is homeomorphic to a plane. If the local area around some point is homeomorphic to a half-plane, then the surface has a boundary. In the subsequent discussion, a manifold triangle mesh is one in which every edge is shared by exactly two triangles. If an edge is incident on only one triangle, it is a boundary edge. If every edge is incident on one or two triangles, and every vertex is incident on zero or two boundary edges, then the mesh is manifold-with-boundary. A vertex which is incident on a non-manifold edge is a non-manifold vertex. We ignore other degenerate cases, such as a singular vertex shared by the tips of two cones, because the separating surface algorithm does not produce surfaces in these configurations.</p><p>We represent the boundary surface as a non-manifold triangle mesh. It can be decomposed into manifold pieces which are the facets. These facets are represented by manifold-with-boundary triangle meshes. The boundaries of the facets meet at non-manifold boundary edges. A property of the marching tetrahedra surface extraction algorithm is that three boundary facets meet at every boundary edge, and four boundary edges will meet at every boundary vertex. (It is a coincidence that these are the same numbers of faces and edges meeting in a three-dimensional Voronoi diagram, which looks very much like our polycrystal microstructure, and indeed many cellular structures in nature.) <ref type="figure">Figure 3</ref> illustrates a simple boundary surface example with three regions, plus a void region for the surroundings. <ref type="figure">Fig. 3</ref>. Boundary surface for a three-region segmentation with one sphere and two boxes. The non-manifold boundary edges are shown by red tubes and the boundary vertices are shown by black spheres. There are two vertices, four edges and six facets -one between each pair of regions, and one between each region and the surroundings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">BOUNDARY INTERPOLATION</head><p>We start with a rasterized representation of the planar boundary curves for each slice, i.e., a segmented image. These images have been registered, and correspondences have been made between regions in adjacent slices, so that the same feature has the same label throughout the entire stack. At this point, a separating surface can already be extracted from the segmented volume using Weinstein's scanline-surface algorithm <ref type="bibr" target="#b27">[28]</ref>, which we call "nearest-neighbor" boundary interpolation. If the spacing between segmented slices is adequately small, this will suffice and we can move on to extracting and simplifying the surface. However, if the spacing is large, then the segmentation may change dramatically from one slice to the next, and we want to smoothly interpolate the boundary curves between slices. We accomplish this using the Potts model.</p><p>The Potts model has received attention from the computer vision community as a model for early vision, as a special case of Markov random fields <ref type="bibr" target="#b4">[5]</ref>. It has also been studied by materials scientists as a model of the formation and motion of crystal grain boundaries from thermally activated grain growth processes <ref type="bibr" target="#b12">[13]</ref>. Indeed it is this overlap between computer vision and materials science that makes the Potts model particularly attractive for our application. In the computer vision setting, the Potts energy of a pixel i in a labeled image L is</p><formula xml:id="formula_1">E P (i) = ∑ j∈N i U(i, j) • T (L i = L j ).<label>(1)</label></formula><p>N is the neighborhood of pixels -in 3D we use a 26-voxel neighborhood. U is some image-dependent function and T (true) = 1, T (false) = 0. Without an image-dependent weight, the Potts energy simply penalizes any neighboring pair of pixels which are labeled differently. In computer vision applications, a labeling which minimizes the Potts energy for the whole image is sought as a discontinuitypreserving restoration or segmentation of the image, so that all regions with similar gray values are compactly clustered. <ref type="bibr">Boykov et al.</ref> showed that minimizing the Potts energy is NP-hard and provided an efficient graph-cut algorithm which approximates the minimum within a factor of two <ref type="bibr" target="#b4">[5]</ref>. However, the complexity of their algorithm depends on the number of segmentation labels, which we consider to be unbounded. To trade guaranteed optimization results for scalability we use a Monte Carlo method, such as simulated annealing <ref type="bibr" target="#b16">[17]</ref>, the complexity of which is independent of the number of labels.</p><p>We use the Potts model to find likely region boundaries between slices in which the boundaries are known. The stack of segmented images is resampled onto a segmented volume L, where each image occupies a slice of the voxel grid according to its physical location within the material volume. Slices of the volume which do not have any boundary information are initialized with random segmentation labels. We then iterate the following Monte Carlo procedure:  Here, t is the temperature parameter in simulated annealing. We restrict the procedure to those voxels whose segmentation labels are not already known, but the voxels with known grain labels participate in the energy function E P . The entire system is therefore in a state that is very close to the local minimum we are searching for, and since those fixed voxels do not change their labels, the system consistently converges to the desired minimum. Because of the strong influence that fixed voxels have on the system, it is not necessary to use a complicated cooling schedule for simulated annealing. Instead we use a constant non-zero temperature which is smaller than the expected Potts energy of a random labeling. We find that, for the energy scale given by Equation 1 and a 26 voxel neighborhood, t = 0.9 is a good choice. Segmentation labels aggregate into smoothly varying regions which agree with the known segmentation, but borders between regions may fluctuate due to the non-zero temperature. To fix borders we "quench" the simulation by setting t = 0, causing the system to monotonically transition into a local minimum. We monitor the process visually in order to determine when to quench the system, but fully automatic cooling schedules can be used if automation is required. Convergence can be detected by monitoring the rate at which voxel labels change, and stopping when it falls below a threshold. If additional information is known about the space between fixed slices, we can incorporate that into the Potts energy through the imagedependent function U in Equation 1, or optical coefficient. If we have a scalar function B(i) ∈ [0, 1] that tells us the likelihood that a voxel i is on a boundary, we can set U(i, j) = 1 − B( j). This will reduce the influence that voxel j has on the Potts energy of voxel i, so that the energy will be lower when boundaries of the segmentation coincide with boundaries of B. Since our optical micrographs are brighter in grain interiors and darker on grain boundaries <ref type="figure">(Figure 1(b)</ref>), we simply take the negative image as B, or more simply, the positive image as U. <ref type="figure" target="#fig_3">Figure 4</ref> shows the effect of incorporating this optical coefficient into the Potts energy. <ref type="figure" target="#fig_6">Figure 5</ref> shows the Potts interpolation of a synthetic segmentation. These results are discussed in Section 6.  . The boundaries of every fifth slice have been interpolated using nearest-neighbor (c) and Potts interpolation without and with an optical coefficient (d,e). One slice of the optical volume dataset is shown in (f), corrupted by Gaussian noise. Notice that near the center of the spiral, where the boundaries move more slowly, the Potts interpolation can adequately smooth the surface without an optical coefficient, but on the outer edge of the spiral the boundary moves too fast and the information from the gray image is needed. In all images, the surface has been smoothed but not simplified. The separating surface from the segmentation in (a) is extracted by imposing a triangular domain over the pixels and finding the midpoint surface (b). We attempt to simplify all possible edges of the surface subject to the constraint that the surface remains in the triangles between differently labeled pixels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Pick a random number</head><formula xml:id="formula_2">x ∈ [0, 1]. If x &lt; exp(−(p 1 − p 0 )/t), or if p 1 &lt; p 0 ,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">SURFACE EXTRACTION</head><p>After boundary interpolation we move on to extracting the boundary surface. If the volume is small it may be sufficient to first build the entire separating surface, smooth it and then simplify it. In large datasets with many regions and facets, we can save considerable memory by treating each facet separately. The triangle surface of a facet is first constructed, and then smoothed and simplified using the algorithm described in Section 5.1, with the constraint that the triangles adjacent to non-manifold boundary edges cannot be removed. These triangles serve as "hooks" which will be later used to glue the facets together along the edges. We keep references to these triangles in a hash table keyed on the edge-type tetrahedra that generated them. Since each facet surface is simplified before the next is built, we can reclaim the memory used for the surface vertices and edges. After all facet surfaces have been built and simplified, we glue them together at the boundary edges and then further simplify the entire mesh.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Smooth-and-simplify Algorithm</head><p>Rather than first smoothing the surface and then simplifying it, we perform both simultaneously by iteratively collapsing an edge and then immediately smoothing the neighborhood around the remaining vertex, while constraining the surface to remain in the domain tetrahedra that generated it. <ref type="figure" target="#fig_7">Figure 6</ref> illustrates this for a simple 2D case. Our smooth-and-simplify algorithm is guided by the following intuition: Any surface which correctly separates voxels of different regions is "correct" with respect to the data. Among all such surfaces, we would like the one with the fewest triangles. Finding this minimal surface is NP-hard <ref type="bibr" target="#b20">[21]</ref>, so we approach the problem in a greedy manner -we try to collapse every edge, and if an edge cannot be collapsed, try to collapse it again later after the geometry of the local neighborhood has changed. A simplification step follows the following procedure:</p><p>1. Remove the shortest edge from the queue. We maintain a priority queue of surface edges. There are numerous methods for defining the edge priority, and many of them favor an edge whose collapse will cause the least deviation from the starting mesh, as indicated by some measure of geometric error. We start with the midpoint surface, which is full of aliasing artifacts that we do not wish to preserve, so we avoid any effort to maintain fidelity to the starting mesh. Instead we rely on the constraining domain tetrahedra to guide the surface geometry. We choose the shortest surface edge to collapse first.</p><p>When collapsing an edge we must choose a location for the new surface vertex. If both edge vertices are manifold, we choose the new vertex by minimizing the sum of squared distances to all of the triangle planes incident on both vertices. We find this vertex using the quadric error optimization of Garland and Heckbert <ref type="bibr" target="#b9">[10]</ref>. Note that estimates of error from the original surface are not propagated through mesh modifications, as is commonly done. Instead, the quadric is computed "from scratch" for each edge collapse. Placing new vertices in this way, rather than simply using the midpoint of the collapsed edge, prevents the surface from shrinking and keeps it farther away from the constraining domain tetrahedra. Additionally, sharp features of the surface are enhanced, as can be seen in <ref type="figure">Figure 8</ref>. If one of the edge vertices is non-manifold, we pick this as the new vertex. Manifold edges which connect two non-manifold vertices are not allowed to collapse. When collapsing a non-manifold edge, we again place the new vertex by minimizing the quadric error of the set of triangle planes incident on both vertices. When a non-manifold edge is incident on a boundary vertex (a vertex which connects four non-manifold edges) we pick the new vertex to be that boundary vertex. Boundary vertices are kept fixed.</p><p>Smoothing is performed using a bilaplacian filter, also called the recursive "umbrella operator" by Kobbelt et al. <ref type="bibr" target="#b17">[18]</ref>, with the added constraint of the collision test in Section 5.2. We do not smooth only to improve the visual appearance of the mesh, but to allow for more edges to be collapsed. The domain tetrahedra form a simplification envelope that constrains the surface, but this envelope is jagged and the surface will come into contact with it in many configurations that might be avoided. By applying a smoothing operator after each edge collapse, we redistribute the surface vertices so that edges which may not have been able to collapse are given another chance to do so.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Surface Modification Tests</head><p>The first test, called the topology test, ensures that we do not alter the topology of the mesh. Following Dey et al. <ref type="bibr" target="#b7">[8]</ref>, let the link of a vertex, Lk v, be the set of edges and vertices which intersect some triangle incident on v, but which do not intersect v. Let the link of an edge, Lk uv, be similarly defined. Then the topology test for contracting edge ab is Lk a ∩ Lk b = Lk ab. Some variations of this test, such as in Hoppe et al. <ref type="bibr" target="#b13">[14]</ref>, additionally check for the case of a tetrahedron collapsing into a degenerate triangle. We note that this additional check is subsumed by the collision test mentioned below. The second test, inversion test, prevents triangles from inverting. We check the normal direction of the oriented triangle before and after the modification, and if the normal flips, the modification is not allowed. The third test, collision test, prevents surface triangles from leaving the volume spanned by domain tetrahedra which define the facet. This ensures that the surface correctly separates the segmented regions. There are two versions of this test, one for manifold edges and one for non-manifold edges.</p><p>For manifold edges within a facet, a simplification envelope is formed by exterior faces of the interior-type tetrahedra on either side of the facet. One such envelope is shown in <ref type="figure">Figure 7</ref>(c). It may be the case, however, that the interior of a region is made up of domain edges and vertices, but not of whole domain tetrahedra and triangles. This can happen, for instance, if the region consists of one or two voxels, or if it contains two large volumes connected by a thread-like structure. To handle these cases we also check for collision with domain edges and vertices.</p><p>Triangle-triangle and triangle-edge collisions are tested using standard static collision detection methods. However, to check for collision with a domain vertex we need to use a triangle-point dynamic collision test. When performing an edge collapse, two or three surface triangles are removed, and the remaining triangles in the neighborhood each have one of their vertices moved to a new location. We sweep out a tetrahedron formed by the old triangle and its new vertex. If this tetrahedron contains a domain vertex, the modification is not permitted. We enumerate all domain tetrahedra that might intersect a given surface triangle with a flood-fill. First we locate a domain tetrahedron that intersects the surface triangle, then flood all neighbors of this tetrahedron as long as their faces intersect the surface triangle. This might also be accomplished with more sophisticated triangle-voxel rasterization, however we find the flood-fill is simple and robust, if not optimally efficient.</p><p>For non-manifold edges, we restrict the polyline of non-manifold vertices to only intersect edge-type tetrahedra. Before a non-manifold edge is modified, we follow the line segment of the edge through the tetrahedral mesh. If this segment intersects any tetrahedron that is not edge-type or vertex-type, the modification is not permitted. <ref type="figure" target="#fig_6">Figure 5</ref> shows the results of Potts boundary interpolation on a synthetic dataset. A five-region spiral was rendered on to a 128 3 voxel grid. <ref type="figure" target="#fig_6">Figure 5</ref>(b) shows one of these regions. To simulate a sparse sampling of the segmentation in one dimension, we removed all segmentation information except for every fifth slice. <ref type="figure" target="#fig_6">Figure 5(c)</ref> shows the reconstruction of the full volume using only every fifth slice. In this image the surface has been extracted from the 128 2 ×25 voxel volume, then stretched out in the slicing direction. <ref type="figure" target="#fig_6">Figure 5(d)</ref> shows the results of Potts interpolation without an optical coefficient. Clearly the Potts energy defined in Equation 1 penalizes boundary surface area, and therefor segmentations with minimal surface area are favored. Further, it is known that an unconstrained Potts model simulation moves boundaries by mean curvature motion <ref type="bibr" target="#b12">[13]</ref>. However, since the Potts energy is defined over a small neighborhood of a regular lattice, we are only minimizing discrete approximations of surface area and curvature. When boundaries vary only slightly between slices, this discrete approximation suffices, but if boundaries change drastically then smooth boundaries will have an insignificant energetic advantage over staircase-like boundaries, due to discretization effects. Notice in <ref type="figure" target="#fig_6">Figure 5(d)</ref> how the boundary becomes progressively less smooth as we move from the center of the spiral outward, since the segmentation boundary is moving faster along the outer edge of the spiral. By including an optical coefficient in the Potts energy, we can coerce the boundary into regions which are believed to be more appropriate, by offering it an energetic advantage in these regions. This boundary belief is quantified by the optical image, which may be noisy. (Surely, if it was a high-quality image we could segment it automatically.) <ref type="figure" target="#fig_6">Figure 5(f)</ref> shows one slice of the spiral boundary image, which has been corrupted by Gaussian noise, and <ref type="figure" target="#fig_6">Figure 5</ref>(e) shows the segmentation produced by incorporating this boundary image into the Potts energy. <ref type="figure">Figure 7</ref> shows a comparison between two separating surfaces: one which has been smoothed with a Laplacian filter (7(a)) and then simplified using quadric error metrics (7(b)), and another produced by our smooth-and-simplify algorithm (7(d)). We compare our method to quadric error-based simplification because it is a common simplification method and it has been used before to simplify separating surfaces of segmented data <ref type="bibr" target="#b26">[27]</ref>. Both simplified surfaces in <ref type="figure">Figure 7</ref> have been reduced from 8912 triangles to 242. In <ref type="figure">Figure 7</ref>(a) we can see that sampling artifacts from the voxel grid have not been completely smoothed. Any simplification method that attempts to preserve mesh geometry will also preserve these artifacts, as can be seen in <ref type="figure">Figure 7(b)</ref>. The inner simplification envelope is shown in <ref type="figure">Figure 7</ref>(c). When simplified using the quadric error metric, the result surface does not stay entirely to one side of the simplification envelope, causing errors where voxels lie on the wrong side of the separating surface. It is true that we could prevent these errors by not simplifying so aggressively, but there is no way to know how many triangles can be simplified before errors occur, without using some kind of error bound. Since our smooth-and-simplify algorithm incorporates the envelope as a hard constraint, we do not need to specify a target surface mesh size, rather we let it remove all the triangles it can without causing errors. <ref type="figure">Figure 8</ref> illustrates the simplification results on a simple nonmanifold separating surface. The surface is simplified from 133,534 triangles down to 986. This large reduction is the result of the many co-planar triangles on the sides of the boxes, which can be aggregated into very large triangles, similar to superfaces <ref type="bibr" target="#b15">[16]</ref>. Placing new vertices by quadric optimization enhances sharp edges of the boxes. In  <ref type="figure">Fig. 7</ref>. A sphere in a 32 3 segmented volume. In (a) we see the smoothed midpoint surface, and in (b) it has been simplified according to quadric error metrics. In (c) we see the inner simplification envelope of the sphere. Notice how the quadric error metric attempts to preserve highlighted sampling artifacts that were not completely smoothed. Our method (d) ignores these artifacts, and guarantees that the simplified surface does not cross the envelope. The surface in (a) contains 8912 triangles, and the surfaces in (b) and (e) both contain 242 triangles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RESULTS AND DISCUSSION</head><p>smooth areas of the volume, such as on the surface of the sphere, the smoothing operator tends to evenly distribute vertices and triangles have nice aspect ratios. However, near sharp features and nonmanifold edges, topological and geometric constraints can cause long, thin triangles to form. We acknowledge that, in certain applications, these "bad" triangles can cause problems. We currently make no effort to avoid such triangles. <ref type="figure">Figure 9</ref> shows the microstructure of a sample of tantalum measuring approximately 1.6mm along the longest dimension. <ref type="figure">Figure 10</ref> shows a closer view where grains on the sample boundary have been removed. The Potts model boundary interpolation was performed on an 800 × 213 × 71 voxel grid. The segmentation consists of 19,037 grains and 93,554 facets. The unsimplified surface contains 23,754,424 triangles, and the simplified surface contains 2,303,982 triangles. Because facets were simplified as they were extracted, using the two-stage algorithm described in Section 5, no more than 8,149,974 triangles were in memory at any point in the process. Table 1 lists the running times for the boundary interpolation and surface extraction, performed on an Intel Core Duo (single-threaded) 2.16GHz computer with 2GB RAM. Profiling reveals that the majority of time is spent in the triangle-triangle intersection collision test, which checks for collisions between surface triangles and domain triangles. We believe that using a hexhedral domain combined with one of the more complicated separating surface algorithms <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b1">2]</ref> is likely to reduce the computational cost of these collision tests, since this could allow for fast triangle-to-voxel rasterization to be used for collision detection, similar to permission grids <ref type="bibr" target="#b30">[31]</ref>. Further research into this area could improve performance significantly. Additionally, even though few of the other surface reconstruction methods are designed to handle the datasets we consider here, a critical comparison between our method and others is needed, using datasets with fewer regions, in order to determine where our method fits in the rich taxonomy of surface reconstruction methods. <ref type="figure">Fig. 9</ref>. A sample of tantalum with 19,000 grains. On the right, each grain has been scaled down 50% about its centroid. The initial mesh contained 23,700,000 triangles, and the simplified mesh contains 2,300,000 triangles. <ref type="figure">Fig. 10</ref>. Shaded and wireframe views of the constructed boundary surface in the interior of the sample. Grains have been scaled down slightly to emphasize their edges and vertices. <ref type="figure">Fig. 8</ref>. A synthetic 64 3 dataset with one sphere superimposed over two abutting boxes. The midpoint surface contains over 133,000 triangles, and the simplified surface contains less than 1,000. Using quadric optimization to place new vertices enhances sharp features in the manifold facet surfaces, such as the sides of the boxes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dataset</head><p>BI M NM Tantalum, (800×213×71), <ref type="figure">Fig. 9</ref> 10 min. 1 hr. 5 min. 12 min. Spiral, (128 3 ), <ref type="figure" target="#fig_6">Fig. 5</ref> 90 sec. Sphere and two boxes, (64 3 ), <ref type="figure">Fig. 8</ref> 40 sec. 3 sec. <ref type="table">Table 1</ref>. Running times for boundary interpolation (BI), manifold facet extraction (M) and non-manifold simplification (NM)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSION</head><p>We have described a new method for extracting smooth, simplified separating surfaces from segmented cross-sections. The first step of our method interpolates segmentation boundaries between crosssections using a constrained Potts model. The second step is a voxelaccurate mesh simplification algorithm that both reduces the excessive triangle count of marching-tetrahedra and smooths artifacts that result from the underlying hexahedral mesh. Both of these goals are achieved by attempting to find the simplest triangle surface that separates segmented regions. Our boundary interpolation and surface simplification methods are novel contributions to the state of the art in three-dimensional image data processing and analysis. Our boundary interpolation method contributes to the study of surface reconstruction from planar contours, especially in the case of surfaces which partition 3D space into a large number of small regions. The results of our simplification algorithm make it clear that marching-based surface extraction for segmented volumes produces an over-abundance of triangles which are not necessary to correctly represent the separating surface.</p><p>We have applied our method to construct the crystal grain boundary surface of a serial-sectioned sample of the metal tantalum. The sample is dense with surface geometry, containing over 19,000 segmented regions. Our boundary interpolation accurately tracks grain boundaries between sparse segmented slices, and our simplification algorithm reduces the number of triangles in the initial separating surface by a fac-tor of ten without introducing any error. Our methods can be applied to other imaging tasks which involve tracking hundreds or thousands of features using sparse segmentation information, which is the case in cellular microscopy and other bio-medical imaging applications.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Published 14</head><label>14</label><figDesc>September 2007.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>One segmented slice (d) Three consecutive slices Fig. 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Tetrahedral cases of the separating surface extraction algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Incorporating optical data into the Potts energy function improves fidelity of the boundary reconstruction in the regions with unknown labels. In this image, the segmentation labels are represented by color and the optical data is mapped to brightness.1. Pick a voxel i at random from a slice which does not have segmentation information. Save its label l 0 = L(i). Calculate p 0 = E P (i), the Potts energy for that voxel. 2. Calculate the set L N = {L( j)| j ∈ N(i)}, the set of all labels of voxels adjacent to voxel i. 3. Pick at random a label l 1 from L N . Assign voxel i the label l 1 and recalculate the new Potts energy p 1 = E P (i).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>accept the new label l 1 , otherwise reject it and restore the old label l 0 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 .</head><label>5</label><figDesc>A synthetic segmentation on a 128 3 voxel grid (a), with one region distinguished (b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 6 .</head><label>6</label><figDesc>A simple 2D example illustrating our surface extraction approach.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>2 .</head><label>2</label><figDesc>If the edge cannot be collapsed, go to step 1. Section 5.2 describes the tests used here. 3. Collapse the edge, producing a new vertex v. 4. Smooth all vertices adjacent to v. 5. Update the priorities of all edges adjacent to v. 6. If any edge adjacent to v is not in the queue, then put it in the queue.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Scott E. Dillard is with the Institute for Data Analysis and Visualization (IDAV), University of California, Davis, E-mail: sedillard@ucdavis.edu. • John F. Bingert is with the Materials Science and Technology Division, Los Alamos National Laboratory, E-mail: bingert@lanl.gov.</figDesc><table /><note>• Dan Thoma is with the Materials Design Institute, Los Alamos National Laboratory, E-mail: thoma@lanl.gov.• Bernd Hamann is with the Institute for Data Analysis and Visualization (IDAV), and the Department of Computer Science, University of California, Davis, E-mail: hamann@cs.ucdavis.edu. Manuscript received 31 March 2007; accepted 1 August 2007; posted online 27 October 2007. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org.</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>The authors wish to thank Taylor Holliday, Sung Park and John C. Anderson for their help and input. We also express our thanks to our colleagues in the Visualization and Computer Graphics Research Group, at the Institute for Data Analysis and Visualization (IDAV), UC Davis, and the Materials Design Institute (MDI) at the Los Alamos National Laboratory. This work was supported by the Materials Design Institute, an educational research collaboration between the University of California, Davis and the Los Alamos National Laboratory (subcontract # 25110-002-06).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Orientation imaging: the emergence of a new microscopy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Adams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kunze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Metall. Trans. A</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="819" to="831" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Nonmanifold Mesh Extraction from Time-varying Segmented Volumes used for Modeling a Human Heart</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bertram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Reis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Van Lengen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Köhn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics / IEEE VGTC Symposium on Visualization</title>
		<editor>K. Brodlie, D. Duke, and K. Joy</editor>
		<imprint>
			<publisher>Eurographics Association</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="199" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Extracting Consistent and Manifold Interfaces from Multi-valued Volume Data Sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bischoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Springer</publisher>
			<biblScope unit="page" from="281" to="285" />
			<pubPlace>Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Shape reconstruction from planar cross sections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Boissonnat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Vision Graph. Image Process</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="29" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast approximate energy minimization via graph cuts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Boykov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Veksler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zabih</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Mach. Intell</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1222" to="1239" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Contourbased surface reconstruction using mpu implicit models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Braude</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Marker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Museth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nissanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Breen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Graphical Models</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="139" to="157" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simplification envelopes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brooks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wright</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;96: Proc. of the 23rd annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Topology preserving edge contraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nekhayev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Publ. Inst. Math</title>
		<imprint>
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="page" from="23" to="45" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Optimal surface reconstruction from planar contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Kedem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Uselton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="693" to="702" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;97: Proc. of the 24th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press/Addison-Wesley Publishing Co</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Locally toleranced surface simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guéziec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="168" to="189" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">A generalized marching cubes algorithm based on nonbinary classifications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-C</forename><surname>Hege</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seebass</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stalling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zöckler</surname></persName>
		</author>
		<idno>SC 97-05</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
		<respStmt>
			<orgName>Zuse Institute Berlin</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The computer simulation of microstructural evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Holm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Battaile</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of The Minerals, Metals and Materials Society</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="20" to="23" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
	<note>JOM)</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Mesh optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;93: Proc. of the 20th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="19" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A new approach to the construction of surfaces from contour data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="75" to="84" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Superfaces: Polygonal mesh simplification with bounded error</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Kalvin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comp. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="64" to="77" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Optimization by simulated annealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Gelatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Vecchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">220</biblScope>
			<biblScope unit="issue">4598</biblScope>
			<biblScope unit="page" from="671" to="680" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Interactive multiresolution modeling on arbitrary meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Campagna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vorsatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;98: Proc. of the 25th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="105" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;87: Proc. of the 14th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A developer&apos;s survey of polygonal simplification algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Luebke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comp. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="24" to="35" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Separation and approximation of polyhedral objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S B</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Suri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="95" to="114" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Boundary extraction for rasterized motion planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Müller</surname></persName>
		</author>
		<idno>566</idno>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>University of Dortmund</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Featurepreserving volume filtering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Csébfalvi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Viola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mlejnek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VISSYM &apos;02: Proc. of the symposium on Data Visualisation</title>
		<meeting><address><addrLine>Aire-la-Ville, Switzerland, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>Eurographics Association</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page">105</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Computing the separating surface for segmented data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Franke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;97: Proc. of the 8th conference on Visualization &apos;97</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="229" to="233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Shrouds: optimal separating surfaces for enumerated volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Graf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Holmes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Phielipp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VISSYM &apos;03: Proc. of the symposium on Data visualisation 2003</title>
		<meeting><address><addrLine>Airela-Ville, Switzerland, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>Eurographics Association</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="75" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Surface reconstruction via contour metamorphosis: An eulerian approach with lagrangian particle tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Nilsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Breen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Museth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Visualization</title>
		<meeting>Visualization</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="407" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Constructing smooth nonmanifold meshes of multi-labeled volumetric datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Reitinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bornik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Beichel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision, WSCG 2005</title>
		<meeting>International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision, WSCG 2005</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="227" to="234" />
		</imprint>
		<respStmt>
			<orgName>University of West Bohemia</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Scanline surfacing: building separating surfaces from planar contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;00: Proc. of the conference on Visualization &apos;00</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="283" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Reducing aliasing artifacts in iso-surfaces of binary volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">T</forename><surname>Whitaker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VVS &apos;00: Proc. of the 2000 IEEE symposium on Volume visualization</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="23" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Multiple material marching cubes algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Sullivan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal for Numerical Methods in Engineering</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="189" to="207" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Permission grids: practical, error-bounded simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Zelinka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="207" to="229" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
