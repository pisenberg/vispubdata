<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Interactive Isosurface Ray Tracing of Time-Varying Tetrahedral Volumes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ingo</forename><surname>Wald</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heiko</forename><surname>Friedrich</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Knoll</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
						</author>
						<title level="a" type="main">Interactive Isosurface Ray Tracing of Time-Varying Tetrahedral Volumes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Ray Tracing</term>
					<term>Isosurfaces</term>
					<term>Unstructured meshes</term>
					<term>Tetrahedra</term>
					<term>Scalar Fields</term>
					<term>Time-varying data</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We describe a system for interactively rendering isosurfaces of tetrahedral finite-element scalar fields using coherent ray tracing techniques on the CPU. By employing state-of-the art methods in polygonal ray tracing, namely aggressive packet/frustum traversal of a bounding volume hierarchy, we can accomodate large and time-varying unstructured data. In conjunction with this efficiency structure, we introduce a novel technique for intersecting ray packets with tetrahedral primitives. Ray tracing is flexible, allowing for dynamic changes in isovalue and time step, visualization of multiple isosurfaces, shadows, and depth-peeling transparency effects. The resulting system offers the intuitive simplicity of isosurfacing, guaranteed-correct visual results, and ultimately a scalable, dynamic and consistently interactive solution for visualizing unstructured volumes.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Visualization of large unstructured volumes is a persistent challenge in data analysis. Due to its adaptive nature and simplicity, finite element (FE) analysis has experienced widespread adoption in simulations for numerous computational scientific and engineering disciplines such as CFD, meteorology, geology, and astronomy. With increasingly sophisticated simulation techniques and powerful parallel computing environments, the effective size of finite element fields is quickly outpacing the memory capacity of commodity graphics processors (GPUs). Nonetheless, scientists generally desire accurate visualization of these data sets in their entirety, with few, if any, compromises. Ideally, the visualization system should allow for dynamic changes in camera, lighting, isovalue and time step, without sacrifice in interactivity.</p><p>A conventional method of rendering isosurfaces of volume data has been extraction via marching cubes or marching tetrahedra, followed by Z-buffer rasterization on GPU hardware. While more than adequate for small data, this approach faces difficulties for large, high-frequency volumes, where significant amounts of geometry must be extracted to faithfully reproduce a surface. View-dependent and multiresolution extraction methods can reduce the amount of geometry, but ultimately extraction is bound by geometric complexity.</p><p>Recent techniques for rendering unstructured data have leveraged the power of GPU hardware, applying direct volume rendering (DVR) techniques to depth-sorted tetrahedra. Large data has been addressed through multiresolution and progressive rendering techniques, as well as out-of-core mechanisms. While powerful, these methods incur limitations, as interactivity is realized through simplification or temporary omission of the full data set. Conversely, ray tracing methods on CPU workstations can directly address large memory, and are inherently scalable to multiple processors and large data.</p><p>Multi-core CPU's are increasingly prevalent. Large-scale multicore architectures, such as Terascale <ref type="bibr">[14]</ref>, are clearly on the horizon. Current cc-NUMA workstations support 16 to 32 cores, and can directly address nearly two orders of magnitude more memory than a GPU. Algorithmic flexibility and SIMD instructions on the CPU encourage coherent ray tracing techniques, which amortize the costs of acceleration structure traversal and primitive intersection across multiple rays. Unstructured tetrahedral volumes encourage adaptive acceleration structures, such as bounding volume hierarchies (BVHs), that have proven efficient for dynamic triangle mesh ray tracing. Isosurfaces for first-order FE are inherently polygonal, allowing for fast ray tracing via simple geometric intersection tests.</p><p>In this paper, we propose a new approach to directly ray-trace isosurfaces defined over tetrahedral domains by combining recent advancements in polygonal ray tracing with existing techniques for unstructured isosurface extraction. We detail a novel packet-tetrahedron intersection algorithm inspired by marching tetrahedra, and its integration with a coherent implicit BVH traversal. We extend this technique to practical shading and visualization features such as multiple transparent isosurfaces and dynamic shadows. Ultimately, we find that ray tracing unstructured data on the CPU allows for interactive performance on current laptop hardware, flexible and correct visualization of isosurfaces, and the ability to render large time-varying unstructured data, limited only by the size of CPU main memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Isosurface Extraction</head><p>Marching cubes was first applied to isosurface extraction of structured data by Wyvill et al. <ref type="bibr" target="#b39">[41]</ref>, and Lorensen &amp; Cline <ref type="bibr" target="#b19">[21]</ref>. Doi &amp; Koide <ref type="bibr" target="#b7">[8]</ref> developed a similar and arguably simpler algorithm based on marching tetrahedra for isosurfacing unstructured scalar fields. Nonetheless, na√Øve extraction of surfaces is bound by data complexity, and often slow. Recent works have accelerated marching tet extraction on the GPU. Pascucci <ref type="bibr" target="#b23">[25]</ref> showed that the vertex processor can be utilized to create appropriate quadrilaterals for the isosurface within a tetrahedron. Similarly, Klein et al. <ref type="bibr" target="#b13">[15]</ref> exploit fragment programs for their quadrilateral computation. These GPU approaches yield overall rendering frame rates from 1 fps for million-tet data to 60 fps for smaller data sets. Though not implemented for dynamic unstructured extraction, techniques exist to improve performance on complex geometry, such as view-dependent frustum culling <ref type="bibr" target="#b18">[20]</ref>, adaptive extraction <ref type="bibr" target="#b36">[38]</ref>, and implicit occlusion culling <ref type="bibr" target="#b24">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Unstructured Volume Rendering</head><p>Garrity <ref type="bibr" target="#b8">[9]</ref> first applied ray casting to unstructured meshes, by computing the entry and exit points of each ray with a face of the tet mesh, and accumulating opacity as in volume ray casting. Shirley &amp; Tuchman <ref type="bibr" target="#b27">[29]</ref> presented an approach similar to splatting, based on rasterization of depth-sorted projected tetrahedra (PT). Due to the power of rasterization hardware, methods involving projection and sorting have become popular, such as vertex shader methods for performing PT classification <ref type="bibr" target="#b38">[40]</ref>. Callahan et al. <ref type="bibr" target="#b4">[5]</ref> proposed an extremely efficient GPU method of partially ordering projected tet fragments by depth in both image and object space. The HAVS method has been extended to handle large data using LOD <ref type="bibr" target="#b3">[4]</ref>, progressive rendering, and out-ofcore streaming <ref type="bibr" target="#b2">[3]</ref>. Their system allows for direct volume rendering  of unstructured data at real-time rates, albeit with minor artifacts and delayed full visualization of large data. Bernardon et al. <ref type="bibr" target="#b0">[1]</ref> modified HAVS to visualize isosurfaces. GPU fragment-program ray casting approaches, as first proposed by Weiler et al. <ref type="bibr" target="#b35">[37]</ref> have also proven feasible. Georgii &amp; Westermann <ref type="bibr" target="#b9">[10]</ref> perform ray-casting through projected cells on the GPU, and demonstrate performance gains over <ref type="bibr" target="#b2">[3]</ref>. However, for all rasterization-based GPU techniques, interactivity degrades significantly for larger datasets over 1 million tets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Interactive Ray Tracing on the CPU</head><p>Instead of using rasterization techniques, our system builds on fast ray tracing. Interactive ray tracing was first proven feasible on commodity CPU's by Wald et al. <ref type="bibr" target="#b34">[36]</ref>, using SIMD instructions on coherent ray packets in a kd-tree. More aggressive coherent methods involve culling geometry outside the packet bounding frustum (e.g. Dimitriev et al. <ref type="bibr" target="#b6">[7]</ref>), or frustum traversal of wide packets (e.g. Reshetov et al. <ref type="bibr" target="#b25">[27]</ref>, or Wald et al. <ref type="bibr" target="#b30">[32]</ref>), both of which ideas we will employ. Ray tracing today can easily trace millions of rays on desktop PCs, and animated scenes (the counterpart to time-varying data) have successfully been addressed <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b32">34,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b33">35]</ref>. Of particular interest to our approach is the dynamic BVH traversal proposed by Wald et al. <ref type="bibr" target="#b30">[32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Interactive Isosurface Ray Tracing</head><p>Isosurface ray tracing on the CPU has been explored before, particularly for large data applications. Parker et al. <ref type="bibr" target="#b22">[24]</ref> employed a hierarchical grid to ray trace isosurfaces on a small supercomputer; De-Marle et al. <ref type="bibr" target="#b5">[6]</ref> extended this implementation to clusters. Knoll et al. <ref type="bibr" target="#b14">[16]</ref> proposed losslessly compressed octree volumes for rendering larger data. Wald et al. <ref type="bibr" target="#b31">[33]</ref> showed how coherent optimizations could be applied to ray trace isosurfaces interactively on small workstations, using implicit min-max kd-trees; our method is heavily inspired by this work. Marmitt &amp; Slusallek <ref type="bibr" target="#b20">[22]</ref> proposed a new ray marching algorithm for directly traversing tet meshes using Pl√ºcker coordinates. Optimized coherent ray tracing has not yet been applied to unstructured isosurfacing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">COHERENT RAY TRACING OF TETRAHEDRAL ISOSURFACES</head><p>Our core approach to ray tracing unstructured scalar fields is an implicit dynamic bounding volume hierarchy in the spirit of implicit kdtrees <ref type="bibr" target="#b31">[33]</ref>, combined with aggressive large-packet coherent ray traversal; and a specially designed packet-isopolygon intersection technique inspired by fast packet-triangle intersectors and the Marching Tetrahedra algorithm. In unstructured grids, the scalar field is defined through linear interpolation over tetrahedral primitives; each such isotetrahedron can then contain one or more more isosurfaces given user-specified iso values. As with implicit kd-trees <ref type="bibr" target="#b31">[33]</ref>, we build a hierarchical data structure over these primitives such that each node in the hierarchy contains the minimum and maximum of the scalar field below that node's subtree; these isoranges can then be used during traversal to discard subtrees that cannot contain the isovalue. Instead of kd-trees, we opt for bounding volume hierarchies. In practice, they are at least as fast, equally efficient for time-varying data, and better suited to the irregular, overlapping geometry of unstructured volumes.</p><p>The implicit bounding volume hierarchy encourages a variation of the aggressive packet-frustum BVH traversal that was recently proposed for polygonal ray tracing <ref type="bibr" target="#b30">[32]</ref>. This operates on much larger packets (typically 8x8 or 16x16 rays) than the 4-ray SIMD traversal proposed for implicit kd-trees, and uses frustum culling and speculative descent to minimize the number of ray-node traversal steps. Larger packets also imply better amortization of per-packet costs, and thus help in hiding the overhead induced through implicit culling. Since the implicit BVH is built over the space of all isovalues, the isovalue(s) of interest can be changed interactively any time, and even multiple isovalues can be trivially supported. A BVH also allows for easily updating the data structure once the scalar field or even vertex positions change, and thus allows for naturally supporting timevarying data.</p><p>When a packet reaches a leaf of the BVH, we intersect the isotetrahedra contained in that leaf using a new technique inspired both by marching tetrahedra <ref type="bibr" target="#b7">[8]</ref> and fast packet-polygon tests. In both intersection and traversal, we will make heavy use of large-packet/frustum techniques recently developed in polygonal ray tracing. Unless otherwise specified, both intersection and traversal are assumed to operate on packets of 16 √ó 16 rays.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ISOSURFACE INTERSECTION</head><p>An isosurface is the implicit surface f ( x) = v where a scalar field f ( x) takes on a given isovalue v. For conventional first-order finite elements, the scalar field is given as a tetrahedral mesh in which the scalar values are specified at the vertices A, B, C, and D; the scalar field inside each isotetrahedron, or isotet, is defined by linear interpolation</p><formula xml:id="formula_0">f ( x) = f (Œ±, Œ≤, Œ≥, Œ¥) = Œ±A + Œ≤B + Œ≥C + Œ¥D,</formula><p>where Œ±, Œ≤, Œ≥, Œ¥ are the barycentric coordinates of x.</p><p>To intersect a ray x(t) = o + t d with any isosurface f ( x) = v one can immediately substitute the ray equation into the linear interpolation, solve a linear system for t, and check that the solution lies within the isotet. However, we can also observe that for linear interpolation the isosurface must be planar. This plane is bounded by line segments along the edges of the isotet in which it exists, forming either a triangular or quadrilateral polygon as shown in the various cases of Marching Tetrahedra, and illustrated in <ref type="figure" target="#fig_3">Figure 3</ref>. We denote this polygon an isopolygon (or isopoly), as it represents the base geometric primitive we seek to ray-trace. Unlike solving the ray-parametrized implicit, this isopolygon must only be computed once per isotet traversed; that cost is amortized over all rays in the packet, and the full array of fast ray-polygon techniques can be applied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Extracting the Isopolygon</head><p>To compute the plane equation and bounding edges of the isopolygon, we turn to the Marching Tetrahedra algorithm <ref type="bibr" target="#b7">[8]</ref>. Vertices of the isopolygon lie on edges of the isotet, and isopolygon edges lie on the tet faces. Polygon vertices will lie only on those tet edges for which one vertex is greater and one is smaller than the isovalue. Having four vertices, there are only 16 cases for which a given vertex is either larger or smaller than the isovalue. For each of these cases, we can store how many vertices the resulting polygon will have, and the indices of the two tet vertices that span the edge on which that polygon vertex must lie. In SSE, this lookup is particularly simple: after loading the four vertices' isovalues into a SIMD register, an SSE comparison followed by a movemask operation will return the desired case. The result is conveniently returned in a 4-bit integer (one bit for each comparison) that can be directly used to index into the aforementioned table of 16 cases. Once we know which tet edges contain isopolygon vertices, each isopoly vertex can be computed by linear interpolation along the two vertices of the corresponding tet edge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Ray-Isopolygon Intersection</head><p>Once the vertices of our polygon are known, we can use an extension of Wald's triangle test <ref type="bibr" target="#b29">[31]</ref> to intersect it. As shown in <ref type="figure" target="#fig_3">Figure 3</ref> (left), ray-isopolygon intersection first computes the distance to the precomputed plane, then projects the ray hit point onto a suitable 2D coordinate plane. Here, each of the edges defines a (2D) half-space, which we orient to point towards the inside of the isopolygon. Since the isopolygon must be convex, we can then take the projected hit point and perform a 2D half-space test with each of the edges, rejecting the hit point as soon as any of these tests fails. This test can be performed efficiently for four rays in SSE for both triangle and quad cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">SIMD Frustum Culling</head><p>In addition to fast SIMD intersection, we also apply conservative "full miss" and "full hit" tests for the entire packet, using packet frustum culling, e.g. <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b1">2]</ref>. These tests require computation of the four corner rays bounding the packet frustum in SSE. For a given isopolygon, we can forgo individual ray intersections when all four bounding rays fail for the same 2D half-space test <ref type="figure" target="#fig_3">(Figure 3, right)</ref>. Similarly, if all four rays pass all half-space tests, the entire packet passes through the triangle, and we must only perform a distance test for our component rays. Knowing that the isosurface inside the tetrahedron is a plane, we first extract an isopolygon. We then compute the point where the ray pierces that polygon's supporting plane, and project both the polygon and that hit point to a 2D coordinate plane. In 2D, we then perform a point in (convex) polygon test by considering if the point is on each of the edges' positive half-spaces. The test can trivially be extended to support frustum culling: If all corner rays of the bounding frustum fail at the same edge, all the rays inside the frustum must fail.</p><p>Thus, intersection tests for individual rays are only required when the frustum neither fully misses nor fully hits.</p><p>The efficiency of frustum culling depends on the relative areas of the frustum and isopolygon within the plane. For complex scenes, tets are too small to have full hits, and frustum culling rarely succeeds. However, full misses are quite common due to the loose nature of the implicit BVH, making this test highly effective overall. Typically, frustum culling can reject 40-60% of the packet-isopolygon tests, though this ratio declines for larger models. Every time SIMD frustum culling rejects a packet test, all individual ray-isopolygon tests are avoided, e.g. 256 for a 16 √ó 16 ray packet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Isopolygon Pre-Computation</head><p>Isopolygon computation can be executed in three ways:</p><p>1. Full pre-computation. Pre-compute all isopolys every time the user changes the isovalue(s) of interest.</p><p>2. On-the-fly computation from scratch on demand.</p><p>3. On-the-fly computation with caching. Compute isopolys only when needed, but keep a cache of already computed isotets; clear the cache every time the user changes the isovalue(s) or time step.</p><p>Full precomputation maximizes performance for navigation with static isovalues, but requires larger memory footprint and incurs delays when the user changes isovalue or time step. On-the-fly computation is slower during rendering, but offers greater flexibility with scene interaction. Caching in theory offers a compromise, but in practice is quite complicated in a multi-core environment, as it requires the resolution of cache conflicts in a thread-safe manner, requiring significant synchronization overhead. We therefore opt for pure on-the-fly computation by default. Due to the use of large packets -which allow for amortizing the on-the-fly computations over all rays in the packetthe overhead is in the range of 5-8%, which we believe is a tolerable price for the ability to arbitrarily change the time step or isovalue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">THE IMPLICIT BOUNDING VOLUME HIERARCHY</head><p>The concept of the implicit BVH is similar to that of the implicit kdtree <ref type="bibr" target="#b31">[33]</ref> in that the acceleration structure is not built for a single isovalue, but rather as a tree of min-max isovalue ranges (e.g. Wilhelms &amp; Van Gelder <ref type="bibr" target="#b37">[39]</ref>). Each node stores the minimum and maximum of all scalar field values contained within that subtree. During traversal, we can consequently cull all BVH nodes that do not contain our desired isovalue. Once built, the implicit BVH structure is valid for all isovalues, and thus allows for simultaneously rendering multiple isosurfaces from the entire range of isovalues. As subtrees that do not contain the isovalue are never traversed, the only effective cost of supporting arbitrary isovalues is a slightly looser-fitting BVH.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Building the BVH</head><p>Building an implicit BVH for tets in fact is similar to building a BVH for triangle meshes. Most mesh-BVH builds rely on bounding boxes or centroids of their primitives as construction metrics <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b28">30]</ref>, and tets behave similarly to triangles in this regard. Traditional bottom-up BVH builds (e.g. <ref type="bibr" target="#b10">[11]</ref>) generally result in inefficient BVHs <ref type="bibr" target="#b12">[13]</ref>. Recent BVH literature has favored top-down builds, which recursively partition primitives into two subgroups. Two partitioning strategies are of particular interest: Wald et al.'s sweep surface area heuristic (SAH) build <ref type="bibr" target="#b30">[32]</ref>, and W√§chter et al.'s fast spatial median build as proposed in his bounding interval hierarchy (BIH) paper <ref type="bibr" target="#b28">[30]</ref>. The SAH build employs a surface area heuristic <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b12">13]</ref> to select a partition with lowest expected cost, but is costly to build. The BIH-style build is closer in spirit to spatial median builds and, as it requires no cost function evaluation, it builds significantly faster than SAH methods. In both constructions, nodes are partitioned until leaves contain 12 or fewer tet primitives. Empirically, we have found this fixed value to work best.</p><p>BVH Structure. Our BVH node employs the same structure as <ref type="bibr" target="#b30">[32]</ref>, with a crucial modification: we interpret the isovalue v as a 4th dimension of the bounding volume, leading to 4D bounds {x, y, z, v}. This can then be stored and processed as SSE vectors. Integers for the child node index and traversal bookkeeping follow, padded to ensure SSEfriendly 16-byte alignment. Storing isovalues alongside geometric extents allow all dimensions to be processed simultaneously in SSE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Implicit BVH Traversal</head><p>Having constructed the implicit BVH, we now proceed to traversal. As previously mentioned, we employ the coherent traversal algorithm of Wald et al. <ref type="bibr" target="#b30">[32]</ref>, and extend it to implicit iso range culling. In general, this algorithm operates on large packets of rays, and tracks both a bounding frustum and the first "active" ray in the packet that intersects a current BVH node. Instead of intersecting each traversed node with all the rays in the packet, it employs optimizations such as speculative descent and frustum culling of nodes. With the implicit BVH, nodes not containing an isovalue in their min-max range are culled. I) Implicit culling.. At the heart of implicit BVH traversal lies the concept of culling subtrees that are known to be inactive -those whose isorange does not contain an isovalue. As this test is very cheap, we naturally perform it first. In addition, we observe that each active node must have at least one active child, and if the first child is inactive, we can proceed to its active sibling. Only at bifurcation nodes -where both children are active -do we actually revert to the geometric tests outlined below. In the worst case, this behavior causes us to descend several times into a subtree that is not actually visible. Since these speculative descents are fast, however, this is still quicker than testing all the nodes for visibility; and even if the fast descent led to a subtree that is outside the packet's bounding frustum, this node would be immediately rejected by the frustum test outlined below.</p><p>II) Speculative first-active descent.. For our first geometric traversal test, we examine the first active ray in the packet. If that hits the current node, we can immediately descend without performing any more raybox tests, as illustrated in <ref type="figure">Figure 6</ref>(a). Since we never test whether any of the other rays actually hit the current node, this test is speculative. Though it may cause modest extra work when few rays in the packet are also active, this strategy allows many ray-box tests to be skipped when numerous consecutive rays are active.</p><p>III) Frustum test.. If the first active test fails, we know that the packet at least partially misses the box, and can perform a frustum test to conservatively determine if the entire packet misses. Technically we employ an interval arithmetic (e.g. <ref type="bibr" target="#b25">[27,</ref><ref type="bibr" target="#b1">2]</ref>) test instead of a geometric frustum test, but the effect is similar in behavior. If the full packet missed, we reject the current node and go to the next node on the stack (see <ref type="figure">Figure 6</ref>(b)).</p><p>IV) First-active ray tracking.. If both the speculative descent and frustum tests fail, we test all remaining rays until we find the first active one that hits the current node. Those rays that failed the test are marked inactive by tracking the index of the first active ray in the packet (all rays with a smaller index are known to be inactive). If no active ray could be found, we reject the node and pop the next subtree from the stack. Rays with indices higher than the first active one we found are not tested, and are speculatively descended into the subtree as well.</p><p>V) Leaf traversal.. When encountering a leaf, we first perform a frustum test as for all other nodes. If that test passes, we iterate over all the tets referenced in that node, then determine that tet's isorange (which may be smaller than the node's isorange), test that range, and finally either reject the tet or intersect it as described above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">TIME-VARYING DATA</head><p>Time-varying data is extremely common in FE simulations. In the simplest time-varying tet meshes, geometry remains constant and only scalar values change. More complex scenarios include changing geometry and topology, and potentially dynamic addition and removal of elements from one time step to the next. To address these possibilities, we propose two schema for BVH construction, balancing performance and memory footprint. Results are analyzed in Sec. 8.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Schema I: Unique BVH Per-Step</head><p>The na√Øve way of accommodating time-varying data is to compute a unique BVH for each time step. No render-time computation is necessary to progress from one time step to the next, regardless of changes in geometry or scalar element values. As we operate completely in host memory, this approach is in fact very efficient. However, for large data sets with many time steps such as the fusion data set in <ref type="figure" target="#fig_4">Figure 4</ref>, this approach may entail a considerable memory footprint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Schema II: Dynamic Refitting</head><p>Fully computing a new BVH on-the-fly during rendering is too costly for large data, even using the fast BIH-style build. However, we observe that when tet mesh vertices change position but connectivity remains constant, the BVH structure will not change between time steps. Thus, simply refitting the nodes' bounding extents will yield a correct BVH. This technique has been successfully applied to ray tracing dynamic triangle meshes <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b17">19]</ref>. The main drawback is that, particularly in cases of extreme geometric deformation, the refit BVH may perform worse than a BVH built from scratch for that particular time step. Fortunately, for tet meshes and our BVH, this method works extremely well due to the continuous nature of tet deformations in FE simulation, particularly for rigid bodies. Moreover, when vertices remain constant but the scalar field changes, the BVH is identical for all time steps, as only the min-max isovalues must be updated.</p><p>As previously mentioned, minimum and maximum geometric bounds and isovalues are stored adjacently in 4D SSE vectors. Refitting the 4D extents can thus be accomplished with one SSE min and one SSE max per BVH node. Tet vertices and scalars are also stored as 4D points; thus computing the 4D bounds of a tet is also extremely efficient, requiring only 3 SSE min and max operations each per tet. It is straightforward to parallelize the update process. After the initial BVH has been built we find all the subtrees for a given level in the BVH hierarchy, and store their indices. During a refit, we can then update these subtrees in parallel. Once all subtrees are updated, a single thread refits the remaining few nodes close to the root node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">SHADING AND INTERACTION MODALITIES</head><p>Having leveraged these algorithms for efficient unstructured volume ray tracing, we describe several visualization modalities that can assist in understanding our data sets.</p><p>Shadows. Shadows add important visual cues in understanding shape (see <ref type="figure" target="#fig_5">Figure 7)</ref>. In casting shadow packets, rays are generally coherent and share a common origin in the case of point lights. Unlike primary rays, shadow rays do not inherently form a regular beam, and thus have no concept of "corner rays" for SIMD frustum culling. Fortunately, shadow packets may still employ the Reshetov et al. <ref type="bibr" target="#b25">[27]</ref> frustum-culling technique at traversal, as this requires no actual geometric frustum. The overall speed impact of shadow rays varies, but is typically lower than 2√ó (see <ref type="figure" target="#fig_5">Figure 7a-b)</ref>.</p><p>Multiple Isosurfaces. Supporting multiple isosurfaces in an implicit BVH is straightforward, by simply testing whether a BVH subtree overlaps any of the isovalues before descending it. To follow the SIMD paradigm, we currently support up to four different isosurfaces, though it would be trivial to add more. Keeping the four isovalues in a SIMD vector, we can test when a BVH node's or isotetrahedron's iso range contains any of these four isovalues in parallel. These are in turn intersected with all the rays that actually hit the leaf node. Though rendering multiple surfaces can require tracing more rays per image, particularly when transparency is enabled, it causes no significant computation penalty in and of itself.</p><p>Clipping Planes and Boxes. While isosurfaces provide an intuitive way of visualizing a data set, one of their drawbacks is that the surface often occludes the data set's interior. For that reason, visualization systems often employ clipping planes (or boxes) that allow for cropping certain parts of the model to expose its interior. We currently allow for a single box that may or may not extend to infinity (to simulate a plane), and use this to clip BVH sub-trees. During traversal, if a node's subtree is completely enclosed in the crop box, we skip the subtree just as if it was out of the isorange. In SIMD, a box-in-box test is very cheap and can be amortized per packet, incurring negligible cost. An example of this feature is shown in <ref type="figure" target="#fig_5">Figure 7</ref>.</p><p>Transparent Depth Peeling. Rendering transparent isosurfaces also provides better understanding of the dataset. Though straightforward to implement, transparency multiplies the complexity of rendering an image by the number of transparent hits required. Though it is possible to implement by recording multiple hits per ray, in our packet architecture it is more elegant to implement as a shader via secondary rays. By simply specifying a minimum hit distance for each transparency ray, we can re-use the origin, corner rays and frustum of the original ray packet. Rays that do not require a transparency ray are disabled, sometimes leading to partially-filled packets, but incurring no additional traversal steps or isopolygon intersections. As shading is performed front-to-back, shadows and transparency are always computed accurately <ref type="figure" target="#fig_5">(Figure 7</ref>). In this section, we evaluate the system as a whole, and the overall success of coherent BVH ray tracing for tet-volume isosurfaces. For our benchmarks, we consider three representative machines: a laptop equipped with an Intel Core (1) Duo 2.33 GHz and 1 GB RAM; a 4-core dual Intel Xeon 2.33 GHz desktop with 4 GB RAM; and a 8-CPU dual-core (16 cores total) Opteron 3.0 GHz workstation with 64 GB RAM. Unless otherwise stated, all examples run at 1024 √ó 1024 pixels, and use packets of 16 √ó 16 rays. The data sets and scenes we used for our comparisons are depicted in <ref type="figure" target="#fig_2">Figures 2 and 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Build Time and Performance</head><p>Because a tetrahedral mesh has far less geometric variation than a polygonal model (i.e., tets form a partition of space, and never overlap or self-intersect), the qualitative difference between a SAH and a BIH build is virtually nonexistent ( <ref type="table">Table 1</ref>). Because of the lower build times, we default to the BIH-style build. With the fast BIH-style build, most of the smaller data sets could in fact be rebuilt from scratch per frame.  <ref type="table">Table 1</ref>. BIH-style build vs SAH for building the implicit BVH. Because the tetrahedra are distributed over space more evenly than triangles in a polygonal model, the render performance for between BIH-style build and SAH build is very similar, but executing the BIH-style build is much faster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Rendering Performance</head><p>As seen in <ref type="table">Table 1</ref> and <ref type="figure" target="#fig_2">Figure 2</ref>, all of the static examples can be rendered at multiple frames per second even on the dual-core laptop. For static scenes, performance is typically linear in the number of CPU cores. Empirically, we found our application scales roughly linearly with respect to the number of pixels per frame. Thus, a frame buffer of 512 √ó 512 generally renders four times faster than at 1024 √ó 1024, enabling interactive rates for difficult scenes on the laptop.   <ref type="figure" target="#fig_2">Figure 2</ref> for images.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Scalability in model size</head><p>Performance degrades gracefully when increasing model size, dropping only by 4x from from the smallest model (feok, 121k tets) to the most complex one (sf1, 14M tets). This is largely due to the logarithmic complexity of ray tracing efficiency structures, and the packetamortized cost of memory access. To further evaluate scalability to large models, we have synthetically replicated a bucky ball n √ó n √ó n times without instancing. As evident in Tab. 3, performance drops moderately even for hugely complex models of up to nearly a billion tets. Though they require workstation-class memory capacity, large unstructured data such as the STP bullet simulation (36m tets) render equally efficiently <ref type="figure" target="#fig_6">(Fig. 8</ref>).  <ref type="table">Table 3</ref>. Performance in frames per second on four Opteron 3.0GHz cores, for varying numbers of replication of the bucky ball scene (no instancing is used). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Traversal Efficiency</head><p>The key to this interactive performance lies in the aggressive largepacket traversal scheme, as seen in <ref type="table" target="#tab_6">Table 4</ref>. Speculative descent and frustum culling greatly reduce the number of individual ray-box tests during traversal by roughly a factor of 18-51 compared to tracing 2√ó2 packets (the smallest an SSE-based system can trace). Using packets allows for traversal and intersection code in SSE, which is crucial to realizing the performance potential of modern CPU's. Because we have transformed the ray-isotet intersection to a polygonal problem, the same frustum culling techniques can also be used to significantly reduce the number of individual ray-isopolygon tests, by about 2-3√ó, though for the most complex scene the number of ray-isopolygon tests actually increases (see <ref type="table" target="#tab_6">Table 4</ref>). Finally, larger packets allow for amortizing per-packet operations like isorange culling and isotet extraction over the entire packet, thus reducing the total number of these operations per frame. As evident in  Isopolygon caching vs on-the-fly recomputation. Because the large packets reduce the number of isopolygon extractions, caching the isopolygons has a relatively low impact. Even when using only a single CPU and a large enough cache (so no conflicts occur, and all synchronization can be disabled), caching only increases total frame rate by 5-8% over on-the-fly recomputation, thus we opt for the onthe-fly recomputation by default.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.5">Multiple Isosurfaces, Shadows, and Transparency</head><p>Rendering multiple isosurfaces in itself does not significantly raise the cost of an image, due to the ray tracer's implicit occlusion cullingthe 2√ó drop in framerate in <ref type="figure" target="#fig_5">Figure 7</ref> is due to the 2√ó higher projected area of the model after adding the outer isosurface. However, as mentioned in Section 7, advanced shading bears a significant cost due to the higher number of rays traced. Shadows usually increase the render cost by about 2x if the rendered object covers the entire screen, and somewhat less, otherwise (also see <ref type="figure" target="#fig_5">Figure 7</ref>). Transparency similarly increases to the total number of rays traced per-frame, and thus increases the render cost. We typically limit the number of transparency rays to a user-specified maximum (2 by default), which can be changed interactively. All these effects can be supported simultaneously, even for large time-varying data sets (see <ref type="figure" target="#fig_4">Figures 4 and 7)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.6">Time-Varying Data Sets</head><p>Precomputing a BVH and replicating vertex arrays for each timestep, as in Sec. 6.1, is only practical for small data or workstations with copious memory. For the fusion dataset this requires over 22 GB in memory footprint. Nevertheless, this scheme remains desirable, as moving across timesteps incurs no noticeable penalty in frame rate. Conversely, by employing a single BVH and refitting it per-frame (Sec. 6.2), the BVH and all 116 time steps of the fusion data occupy only 538 MB, allowing us to render that model on the laptop. However, refitting requires updating the vertex array, all the BVH nodes, and some precomputed shading data (e.g., per-tet gradients) per frame. This update is fully parallelized, but scales poorly due to intensive and asymmetrical memory access on our workstation's cc-NUMA architecture. Effectively, refitting adds a significant per-frame cost that limits maximum performance to 3.5 fps on the workstation. Moreover, precomputation and refitting offer a classical trade-off between performance and memory consumption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.7">Memory Overhead</head><p>The bounding volume hierarchy structure occupies a significant footprint in main memory. In our implementation, the BVH requires two arrays: one for BVH nodes, at 32 bytes per node, and another for storing the lists of tet IDs that the leaf nodes refer to. The tetID list uses a constant amount of memory, requiring exactly 4 bytes per tet. The size of the node array depends on how many nodes are allocated, which in turn depends on the data and build strategy. In the worst case, a BVH would always split until each tet is contained in exactly one leaf, in which case a total of 2N ‚àí 1 nodes, (i.e., roughly 64 √ó N bytes) would be allocated for the node array. In practice, the optimal BVH is much shallower, and uses only a fraction of that memory ( 1 / 4 th -1 / 6 th ). For that worst-case assumption, however, table 5 shows that for static scenes, memory overhead is around 4√ó that of the raw input data. For the time-varying deformed bucky and fusion data sets, this overhead increases to a significant 18√ó and 20√ó if a separate BVH is stored per time step. If the BVH is shared over time, the overhead drops to 92% for the deformed bucky while for the fusion data set the overhead is only 18%. In general, more time steps reduce the relative overhead, as they amortize input tet data footprint.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.8">Comparison to Existing CPU based Approaches</head><p>Our results compare favorably to the performance achieved by Marmitt et al.'s Pl√ºcker-based tet marching algorithm <ref type="bibr" target="#b20">[22]</ref>, which reported 1.67 and 0.92 fps at 512 √ó 512 on a dual-Opteron for isosurfaces on the bluntfin and buckyball, respectively. On comparable hardware and frame buffer size, our system performs around 40 times faster. However, it is important to note that the Marmitt et al. method also supports semi-transparent volume ray-casting, which ours does not.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.9">Comparison to Existing GPU based Approaches</head><p>GPU hardware is continually changing, so comparing to previously published results would be an unfair comparison to already-outdated hardware. For that reason, we have decided to base our comparisons mainly on HAVS <ref type="bibr" target="#b3">[4]</ref> and its isosurface extension <ref type="bibr" target="#b0">[1]</ref>, running on a state-of-the-art nVidia 8800 GTX. HAVS is well-known and freely available, thus an appropriate system for benchmarking GPU performance. As seen in <ref type="table" target="#tab_10">Table 6</ref>, when isosurfacing small and moderatesized datasets (less than 1M), ray tracing achieves roughly equivalent performance on a 4-core Xeon as rasterization on the nVidia 8800 GTX in the same desktop. For larger data sets, however, our method can outperform HAVS significantly, even for models that fit comfortably in GPU memory.</p><p>For small data such as the bluntfin, isosurfacing via the GPU raycasting method of Georgii &amp; Westermann <ref type="bibr" target="#b9">[10]</ref> reports 175 fps at 512 √ó 512 on an nVidia 7900 GTX; our system achieves 160 fps on the 4-core Xeon desktop at the same resolution. However, their performance degrades significantly for larger datasets over 1M tets. We refrain from absolute comparison, but our system achieves similar performance for small data, and is substantially faster for large data. Again, it should be noted these GPU methods are designed for objectorder volume rendering without acceleration structures, whereas our technique relies on logarithmic-order BVH traversal and is restricted to isosurface visualization. Nonetheless, these results suggest that CPU ray tracing is roughly competitive in performance with GPU methods for isosurface visualization of unstructured grids, and exhibits better overall scalability. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">CONCLUSION</head><p>In this paper we have shown it is possible to ray trace isosurfaces of tetrahedral scalar fields at interactive to real-time frame rates, purely on the CPU. In doing so, we are able to correctly visualize large unstructured volumes, interactively manipulate isovalues and shader modalities, and handle time-varying data with hundreds of steps. The main algorithmic contributions of this paper are the fast packetisotetrahedron intersection test and extension of the coherent BVH to an implicit min-max tree over the tetrahedral volume. Our implementation naturally supports multiple isosurfaces, on-the-fly clipping, semi-transparent depth peeling, and shadows. Accommodation of large data is limited only by host memory capacity, though the overhead of the BVH must be taken into consideration. Time-varying data can be handled by either precomputing an implicit BVH per time step, or by building a single BVH that is updated on the fly.</p><p>Compared to existing GPU methods, our system exhibits better scalability to large data, and is not limited by the GPU memory capacity. However, our current system is limited to isosurfacing, whereas existing GPU methods support direct volume rendering. Moreover, multi-core CPUs are increasingly mainstream, and future GPUs will likely evolve to run a ray-tracing system similar ours. Ultimately, the question is not one of GPU vs CPU, but rather which rendering algorithm is used.</p><p>Our approach opens several avenues for future work. We could extend BVH traversal to direct volume rendering methods, such as maximum intensity projection (MIP) or full transfer-function methods. Though the latter suffer from high traversal complexity, the BVH could still be useful for space-skipping when the transfer function is sufficiently sparse, as in <ref type="bibr" target="#b15">[17]</ref>. Another intriguing extension would be support for higher-order finite elements in the spirit of Nelson &amp; Kirby <ref type="bibr" target="#b21">[23]</ref> or R√∂ssl et al. <ref type="bibr" target="#b26">[28]</ref>. This would require a completely different intersection routine, but the BVH traversal would remain unchanged. Also of interest would be more advanced lighting effects such as soft shadows, ambient occlusion, or global illumination, which can significantly improve understanding of data sets <ref type="bibr" target="#b11">[12]</ref>. Finally, investigating scalable build algorithms could allow for rendering even complex data with arbitrary deformations without precomputation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Published 14 September 2007.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Several samples of our interactive system running at 1024 √ó 1024 pixels: a) tjet (1m tets) with shadows, transparent depth-peeling, and multiple isosurfaces b) SF1 (14m tets) with four isosurfaces. c) buckyball with two a clip-box, multiple isosurfaces and shadows, d) Time step 60 of the time-varying fusion data set (3m tets, 116 time steps), rendered with four isosurfaces, clip box, shadows, and transparency. With a 1024 √ó 1024 frame buffer, these examples render at 2.0, 3.1 5.4, and 0.8 fps, respectively, on an Intel Core 1 Duo 2.33 GHz laptop with 1 GB RAM; and and 11, 18, 52, and 10 fps, respectively, on a 16-core 3.0 GHz Opteron workstation with 64 GB RAM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>From left to right: ell32P (149k tets), bucky ball (177k tets), bluntfin (225k tets, two isosurfaces), tjet (1m tets), timestep 50 of the fusion data (3m tets), and the sf1 seismic data (14m tets). With simple shading, these examples run at 14.2, 13.3, 18.9, 10.1, 4.0 and 3.3 frames per second (1024 √ó 1024 pixels) on an Intel Core 1 Duo 2.33 GHz laptop with 1GB RAM, and at 116, 112, 95, 66, 57, and 32 frames per second on a 16-core 3.0 GHz Opteron workstation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Ray-Isopolygon Intersection in an Isotetrahedron.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Two examples of time-varying data sets, rendered at 1024 √ó 1024 pixels, using a 16-core 3.0 GHz Opteron workstation. Top: An artificially created deforming bucky ball that shows severe deformation of its 226K tets, running at 50+ frames per second including shadows from a point light source. Bottom: The fusion data set with a time-varying scalar field (3m tets, 116 time steps), rendered with four layers of isosurfaces, a crop box, shadows, and transparency, running at 7 to 15 frames per second. Camera and light positions, time step, and number and parameters of the isosurfaces can be changed interactively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Impact of adding additional shading effects: a) A bucky ball rendered with a single isosurface, and diffuse shading. b) After turning on diffuse shading with shadows. c) With a second isosurface and an interactive clip-box to expose the interior. d) Adding transparency as well. At 1024 √ó 1024 pixels on a Intel Core 1 duo laptop, these screenshots render at 15.6, 10.2, 5.4, and 2.6 frames per second, respectively. On our 16-core Opteron 3.0 GHz workstation, they render at 90, 70, 42, and 19 frames per second, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 .</head><label>8</label><figDesc>Left: 4<ref type="bibr" target="#b2">3</ref> replicated buckyballs with 11.3m tets. Right: STP dataset with 36m tets. With simple shading, these datasets perform at 27.8 and and 26.9 fps respectively on a 16-core 3.0 GHz Opteron workstation with 64 GB RAM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>‚Ä¢</head><label></label><figDesc>Ingo Wald is with the SCI Institute, University of Utah, as well as with Intel Corp, Santa Clara, CA; E-mail: wald@sci.utah.edu. ‚Ä¢ Heiko Friedrich is with the Computer Graphics Group at Saarland University, Saarbr√ºcken, Germany; E-mail: heiko@graphics.cs.uni-sb.de. ‚Ä¢ Aaron Knoll is with the SCI Institute, University of Utah; E-mail: knolla@sci.utah.edu. ‚Ä¢ Charles D. Hansen is with the SCI Institute, University of Utah; E-mail: hansen@cs.utah.edu.</figDesc><table /><note>Manuscript received 31 March 2007; accepted 1 August 2007; posted online 27 October 2007. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>First-active descent, frustum test, and active ray tracking. Given a BVH node, we speculatively test the first "active" ray in the packet against the bounding box, and immediately descend if it hits (left). If this test fails, we perform a frustum test to reject nodes completely outside the frustum (center). If neither of these tests prove successful, we test all rays sequentially in a packet until one hits; rays that missed are deactivated for future traversal steps (right).</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell cols="2">isovalue = 39</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>0,100</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>0</cell><cell></cell><cell>4</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0,60</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>20,100</cell><cell></cell></row><row><cell></cell><cell></cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>5</cell><cell></cell></row><row><cell>0,30</cell><cell></cell><cell>20,60</cell><cell></cell><cell>20,30</cell><cell></cell><cell cols="2">30,100</cell></row><row><cell></cell><cell></cell><cell>2</cell><cell>3</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>0,20</cell><cell>20,30</cell><cell>20,40</cell><cell>38,60</cell><cell>20,22</cell><cell>21,30</cell><cell>30,60</cell><cell>40,100</cell></row></table><note>6 Fig. 5. Implicit Culling. The implicit BVH is a min-max tree containing only a subset of BVH nodes containing our desired isovalue(s). We can speculatively descend the min-max tree until we reach a leaf, or an intersection test fails. Only at bifurcation nodes (dark blue) must we resort immediately to geometric packet-BVH traversal computation. Thus, geometric tests are performed as if the BVH had only been built over active nodes for a single isovalue. Fig. 6.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 2 .</head><label>2</label><figDesc>Performance in frames per second for various data sets and platforms. Laptop is an Intel Core Duo 2.33 GHz, 1 GB RAM. Desktop is a 4-core dual Intel Xeon 2.33 GHz, 4 GB RAM. Workstation is a 16-core cc-NUMA 3.0 GHz Opteron, with 64 GB RAM. Refer to</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 4</head><label>4</label><figDesc></figDesc><table><row><cell>, this reduces the number of</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 .</head><label>4</label><figDesc>Traversal statistics of using our aggressive packet-frustum traversal scheme (using 16 √ó 16 rays) vs. standard 2 √ó 2 packet traversal.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>Table 5 .</head><label>5</label><figDesc>Memory usage and BVH overhead. Note that we report a worst-case upper bound on BVH memory (2 √ó N ‚àí 1 nodes for N tets), as this is what our system actually pre-allocates memory for. In practice, only about one fourth to one sixth of that pre-allocated memory is actually used (i.e., memory overhead could be reduced rather easily should that ever become an issue).</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>Table 6 .</head><label>6</label><figDesc>GPU Performance Comparison, in frames per second, with HAVS [4, 1], running on an nVidia 8800 GTX, and our method on a 4-core Intel Xeon 2.33 GHz, at 1024 √ó 1024 resolution.</figDesc><table><row><cell>scene</cell><cell>ell32P</cell><cell>bucky</cell><cell>bluntfin</cell><cell>tjet</cell><cell>fusion</cell><cell>SF1</cell></row><row><cell># Tetrahedra</cell><cell>149k</cell><cell>177k</cell><cell>225k</cell><cell>1m</cell><cell>3m</cell><cell>14m</cell></row><row><cell>BVH</cell><cell>48</cell><cell>39.4</cell><cell>53.8</cell><cell>28.5</cell><cell>11.8</cell><cell>13.1</cell></row><row><cell>HAVS</cell><cell>50</cell><cell>50</cell><cell>30</cell><cell>3.0</cell><cell>1.5</cell><cell>0.3</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This work was supported by the U.S. Department of Energy through the Center for the Simulation of Accidental Fires and Explosions, under grant W-7405-ENG-48, and by the National Science Foundation under CISE grants number CRI-0513212, CCF-0541113, and SEII-0513212. It was also supported by the Director, Office of Advanced Scientific Computing Research, Office of Science, of the U.S. Department of Energy under Contract No. DE-FC02-06ER25781 through the SciDAC Visualization and Analytics Center for Enabling Technologies (VACET), as well as through a visiting professorship by Intel Corp. The fusion simulation was originally performed by Kruger et al. <ref type="bibr" target="#b16">[18]</ref>; the data set was made available to us by Allen Sanderson from the SCI Institute. We would like to thank Steve Callahan for his assistance in comparing performance with GPU rendering using HAVS, and the anonymous reviewers for their constructive comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An adaptive framework for visualizing unstructured grids with time-varying scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">F</forename><surname>Bernardon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L D</forename><surname>Comba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Parallel Computing</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Geometric and Arithmetic Culling Methods for Entire Ray Packets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<idno>UUCS-06-010</idno>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>SCI Institute, University of Utah</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Progressive volume rendering of large unstructured grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bavoil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1307" to="1314" />
			<date type="published" when="2006-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interactive rendering of large unstructured grids using dynamic level-of-detail</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L D</forename><surname>Comba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;05</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="199" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Hardwareassisted visibility sorting for unstructured volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ikits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L D</forename><surname>Comba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="285" to="295" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Distributed Interactive Ray Tracing for Large Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Demarle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hartner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE PVG</title>
		<meeting>the IEEE PVG</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="87" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Faster Ray Tracing with SIMD Shaft Culling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Dmitriev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Havran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<pubPlace>Saarbr√ºcken, Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Max-Planck-Institut f√ºr Informatik</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Research Report MPI-I-2004-4-006</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An efficient method of triangulating equi-valued surfaces by using tetrahedral cells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Doi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Koide</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEICE Trans Commun. Elec. Inf. Syst, E</title>
		<imprint>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="213" to="224" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Raytracing Irregular Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Garrity</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Generic and Scalable Pipeline for GPU Tetrahedral Grid Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Georgii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1345" to="1352" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Automatic Creation of Object Hierarchies for Ray Tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goldsmith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Salmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="14" to="20" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Interactive Methods for Effective Particle Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gribble</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>University of Utah</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Heuristic Ray Shooting Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Havran</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
		<respStmt>
			<orgName>Faculty of Electrical Engineering, Czech Technical University in Prague</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Hardware-accelerated Reconstruction of Polygonal Isosurface Representations on Unstructured Grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stegmaier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Pacific Graphics &apos;04</title>
		<meeting>Pacific Graphics &apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="186" to="195" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interactive Isosurface Ray Tracing of Large Octree Volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Knoll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 IEEE Symposium on Interactive Ray Tracing</title>
		<meeting>the 2006 IEEE Symposium on Interactive Ray Tracing</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="115" to="124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Acceleration Techniques for GPU-based Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kr√ºger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization 2003</title>
		<meeting>IEEE Visualization 2003</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="257" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Dynamics of the major disruption of a DIII-D plasma</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Kruger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">D</forename><surname>Schnack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Sovinec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physics of Plasmas</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">RT-DEFORM: Interactive Ray Tracing of Dynamic Scenes using BVHs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lauterbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-E</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tuft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 IEEE Symposium on Interactive Ray Tracing</title>
		<meeting>the 2006 IEEE Symposium on Interactive Ray Tracing</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="39" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">View Dependent Isosurface Extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;98</title>
		<meeting>IEEE Visualization &apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="175" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics (Proceedings of ACM SIGGRAPH)</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Fast Ray Traversal of Tetrahedral and Hexahedral Meshes for Direct Volume Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Marmitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Slusallek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics/IEEE-VGTC Symposium on Visualization (EuroVIS)</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="235" to="242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Ray-tracing polymorphic multi-domain spectral/hp elements for isosurface rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Kirby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="114" to="125" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Interactive Ray Tracing for Isosurface Rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-P</forename><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;98</title>
		<imprint>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="233" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Isosurface Computation Made Simple: Hardware Acceleration, Adaptive Refinement and Tetrahedral Stripping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics -IEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="293" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Implicit Occluders</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pesco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/SIGGRAPH Symposium on Volume Visualization</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="47" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Multi-Level Ray Tracing Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Reshetov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Soupikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hurley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="1176" to="1185" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Reconstruction of Volume Data with Quadratic Super Splines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>R√∂ssl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zeilfelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>N√ºrnberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="397" to="409" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A polygonal approximation to direct scalar volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tuchman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings San Diego Workshop on Vlume Visualization</title>
		<meeting>San Diego Workshop on Vlume Visualization</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="63" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Instant Ray Tracing: The Bounding Interval Hierarchy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>W√§chter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Keller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Rendering Techniques 2006 -Proceedings of the 17th Eurographics Symposium on Rendering</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="139" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Realtime Ray Tracing and Interactive Global Illumination</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
		<respStmt>
			<orgName>Saarland University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Ray Tracing Deformable Scenes using Dynamic Bounding Volume Hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="18" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Faster Isosurface Ray Tracing using Implicit KD-Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Friedrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Marmitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Slusallek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="562" to="573" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Ray Tracing Animated Scenes using Coherent Grid Traversal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ize</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kensler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Knoll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Parker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="485" to="493" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">State of the Art in Ray Tracing Animated Scenes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>G√ºnther</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ize</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics 2007 State of the Art Reports</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Interactive Rendering with Coherent Ray Tracing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Wald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Slusallek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Benthin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="153" to="164" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
	<note>Proceedings of Eurographics</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Hardware-based ray casting for tetrahedral meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Merz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="333" to="340" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Real-time Exploration of Regular Volume Data by Adaptive Reconstruction of Iso-Surfaces. The Visual Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="100" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Octrees for faster isosurface generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Tetrahedral Projection using Vertex Shaders</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wylie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Moreland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Fisk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Crossno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Volume Visualization and Graphics Symposium</title>
		<meeting>IEEE Volume Visualization and Graphics Symposium</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Data structure for soft objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mcpheeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="227" to="234" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
