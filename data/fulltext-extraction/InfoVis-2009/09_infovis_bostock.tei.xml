<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Protovis: A Graphical Toolkit for Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2009-10-11">11 October 2009</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Bostock</surname></persName>
							<email>mbostock@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Heer</surname></persName>
							<email>jheer@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Protovis: A Graphical Toolkit for Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2009-10-11">11 October 2009</date>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2009; accepted 27 July 2009; posted online</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:56+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Information visualization</term>
					<term>user interfaces</term>
					<term>toolkits</term>
					<term>2D graphics</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Despite myriad tools for visualizing data, there remains a gap between the notational efficiency of high-level visualization systems and the expressiveness and accessibility of low-level graphical systems. Powerful visualization systems may be inflexible or impose abstractions foreign to visual thinking, while graphical systems such as rendering APIs and vector-based drawing programs are tedious for complex work. We argue that an easy-to-use graphical system tailored for visualization is needed. In response, we contribute Protovis, an extensible toolkit for constructing visualizations by composing simple graphical primitives. In Protovis, designers specify visualizations as a hierarchy of marks with visual properties defined as functions of data. This representation achieves a level of expressiveness comparable to low-level graphics systems, while improving efficiency-the effort required to specify a visualization-and accessibility-the effort required to learn and modify the representation. We substantiate this claim through a diverse collection of examples and comparative analysis with popular visualization tools.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>A popular approach to visualization is to import data into charting software, specify a desired chart type, and then tweak visual parameters as needed to produce the final graphic. Modern charting software may support a dozen or more chart types, such as pie and line, while supporting numerous customizable visual parameters, such as color and font. As noted by <ref type="bibr">Wilkinson [37]</ref>, this approach is especially popular in user interfaces, where often a chart can be produced in a few clicks.</p><p>Chart typologies are successful because they are quick and easy to use, but suffer simultaneously because they are highly restrictive. Many visualizations cannot be made simply because they are not one of the supported types. In addition, despite customization, designers may be unable to control the precise graphical output. A typological grammar limits the space of possible visualizations, as compared to what is possible in more general graphical systems.</p><p>As a result, designers may resort to vector-based drawing programs to realize their intent <ref type="bibr" target="#b29">[31]</ref>. This is unfortunate; while such programs offer the utmost flexibility, they are not tailored for visualization. Drawing vector graphics by hand is time-consuming and error-prone, and even with the ability to import or generate simple graphics from data, the process often cannot support interaction and live data.</p><p>High-level chart types and low-level vector drawing represent two extremes, but in practice designers choose between many different systems, considering expressiveness ("Can I build it?"), efficiency ("How long will it take?") and accessibility ("Do I know how?"). The choice of tool affects the resulting work, as it biases designers towards visualizations that are easier to produce in the given tool. As Maslow <ref type="bibr" target="#b21">[23]</ref> famously quipped, "I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail."</p><p>The interfaces of these tools, as well as their underlying models, vary substantially. Heer &amp; Agrawala <ref type="bibr" target="#b13">[15]</ref> noted the difficulty in identifying common design patterns within existing visualization tools, and consequently the high cost for users to learn and evaluate unfamiliar systems. A tool that is both expressive and efficient, if difficult to learn, may be inaccessible to users and of diminished practical value.</p><p>Despite the diversity of existing tools, surveyed in Section 2, we argue that there is still a gap between low-level graphical systems and high-level visualization systems. Many direct manipulation graphical systems are easy to learn but tedious for complex work, while powerful visualization systems can be intimidating to novices or inflexible.</p><p>Moreover, the abstractions used by visualization systems may be foreign to designers. While vector graphics editors allow designers to think concretely in terms of graphical marks, most expressive visualization tools make use of abstract specifications of data processing and visual encoding operators. Such systems require that designers translate their intended visual design into toolkit abstractions, often hindering accessibility.</p><p>In response, we contribute Protovis, an embedded domain-specific language <ref type="bibr" target="#b17">[19]</ref> for constructing visualizations by composing simple graphical marks such as bars, lines and labels. In Protovis, designers specify visualizations as a hierarchy of marks with visual properties defined as functions of data. Inheritance of properties across composed marks-similar to cascading of style sheets used in web design-enables concise visualization definitions with a large expressive range and a minimum of intervening abstractions. Protovis is implemented in JavaScript, with rendering support for HTML 5 canvas, SVG, and Flash.</p><p>To evaluate Protovis, we built example applications demonstrating the toolkit's expressiveness and notational efficiency. We use these examples as points of comparison with Processing and Flare, two popular visualization tools. To assess accessibility, we present a comparative analysis using the Cognitive Dimensions of Notation framework <ref type="bibr" target="#b11">[13]</ref> and share feedback from designers using Protovis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>For the purpose of comparison we divide tools used to visualize data into two categories: visualization systems based on high-level abstractions tailored to data visualization, and graphical systems using only low-level graphical primitives. This dichotomy is not strict; indeed, Protovis is intended to fall somewhere in-between.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Graphical Systems</head><p>Formal visualization systems are not required to construct visualizations; with enough effort any graphical tool can be used. Vector-based drawing programs such as Adobe Illustrator are popular, especially for print. One benefit of these systems is the close cognitive mapping between the representations employed by the tool and the desired result: designers directly manipulate graphical marks to create and customize their visualization. This improves accessibility and reduces the gulf of execution <ref type="bibr" target="#b23">[25]</ref>-the gap between designer's goals and the actions needed to attain them.</p><p>For total control, as well as to support interaction and live data, any number of low-level rendering APIs are available, such as OpenGL, Java2D, and Processing <ref type="bibr" target="#b24">[26]</ref>. Processing was designed to be accessible to new users and non-programmers, to "teach fundamentals of computer programming within a visual context." Although these libraries are general purpose, they typically support only imperative methods for rendering graphical primitives such as ellipses and polygons. Higher-level tools such as Flash and Piccolo <ref type="bibr" target="#b0">[1]</ref> further provide a scene graph abstraction to simplify tasks such as interaction and animation. Still, without any visualization abstractions, the construction of even simple charts is tedious.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Visualization Systems</head><p>Visualization systems are tools designed for the explicit purpose of data visualization, employing abstractions and mathematical models suited to this task. Such tools also commonly support data management, layout algorithms, interaction, and animation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Consumer Software</head><p>By far the most widely-used visualization tools are those integrated into consumer software, often spreadsheet applications, such as Microsoft Excel and Google Spreadsheets. Although features vary, the underlying representation in these applications is uniform: a chart typology. A user simply selects the cells of data to visualize and then picks the desired chart type. The user may further customize the chart configuration to make minor adjustments to the chart's appearance. Some research systems, including IBM's Many-Eyes <ref type="bibr" target="#b31">[33]</ref>, fit this model.</p><p>Despite the shortcomings noted by <ref type="bibr">Wilkinson [37]</ref> and Tufte <ref type="bibr" target="#b29">[31]</ref> (not to mention questionable default chart configurations <ref type="bibr" target="#b10">[11]</ref>), these tools must be recognized for their success in user adoption: they are easy to use, provided the user's needs are immediately satisfied by the built-in types. Creating a chart involves only a few quick actions; the process is more selection than creation.</p><p>The main drawback of this approach is that it requires a small, closed system. If the desired chart type is not supported, or the desired visual parameter is not exposed in the interface, no recourse is available to the user and either the visualization design must be compromised or another tool adopted. Given the high cost of switching tools, and the iterative nature of visualization design <ref type="bibr" target="#b5">[6]</ref>, frequent compromise is likely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Analytical and Exploratory Tools</head><p>A number of tools have originated in the visualization research community, establishing theoretical underpinnings and providing richer options for visual data exploration. Tableau and its predecessor Polaris <ref type="bibr" target="#b27">[29]</ref> integrate data manipulation with visualization, automatically deriving database queries from the visual specification. Wilkinson's Grammar of Graphics <ref type="bibr" target="#b35">[37]</ref> is an elegant language for specifying visualizations as statistical graphs, "shunning chart typology" and offering greater flexibility. These systems both benefit from metadata, for example choosing appropriate default visual encodings for ordinal versus quantitative fields <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b20">22]</ref>.</p><p>Despite the expressive power of these tools relative to chart typologies, control over graphical output is still limited, making them less compelling for presentation and often unsuited for the design of novel, customized visualizations. These are closed systems; it may not be possible for the designer to customize all visual aspects if desired or introduce new forms of visual encoding. In addition, the complexity of the underlying model may be a barrier to entry for new users, due to a steep learning curve. Although high-level abstractions allow concise specifications, 1 they may appear magical if the user does not fully understand how the specification translates to the resulting visualization. This lack of understanding worsens the gulf of execution, as the necessary actions to correct the specification may be unclear.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Programming Toolkits</head><p>Programming toolkits are popular for presenting live data or allowing user interaction. Many support only a limited number of chart types, such as the Google Chart API, JFreeChart and PlotKit. Such toolkits offer similar trade-offs to the simple facilities built into consumer software, as discussed previously.</p><p>More expressive visualization toolkits include the InfoVis Toolkit <ref type="bibr" target="#b9">[10]</ref>, Improvise <ref type="bibr" target="#b33">[35]</ref>, and the Prefuse and Flare toolkits <ref type="bibr" target="#b15">[17,</ref><ref type="bibr">12]</ref>. (See <ref type="bibr" target="#b13">[15]</ref> for a more thorough list of existing toolkits.) Each toolkit provides an integrated data management framework coupled with visualization and interaction components. The InfoVis Toolkit and Improvise provide a collection of visualization "widgets" that encapsulate visualizations into monolithic units. Such systems can be extended by creating new components from scratch or subclassing existing components. As a result the model of these toolkits is quite similar to the aforementioned chart typologies, and inherit many of the corresponding limitations: customized visualizations may require significant software engineering.</p><p>In contrast, visualizations in Prefuse and Flare are defined over a collection of parameterized visual objects associated with data. Following the data state model of Chi et al. <ref type="bibr" target="#b6">[7]</ref>, designers determine the properties of these visual objects (e.g., position, shape, color) by specifying a series of configurable operators that perform common actions such as layout and color encoding. By composing a visualization from fine-grained operators, Prefuse and Flare allow the construction of custom visualizations. Developers can further extend the system by defining new operators and visual primitives. To use these tools effectively developers must become steeped in the workings of the toolkit, including the library of provided operators and the stack of abstractions (e.g., axes, scales, visual objects, and renderers). While these tools can simplify many hard visualization tasks, they may also make easy tasks unnecessarily complex.</p><p>The web offers many possibilities for system architectures, ranging from thin clients running natively in the browser <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b18">20]</ref> to "fat servers" where most computation occurs on the server, and hybrid approaches in-between <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b36">38]</ref>. Our approach is partly agnostic to system architecture: while our initial implementation uses a thin client approach, the declarative specification is portable to other rendering engines (e.g., Java 2D, Flash), and data transformations and parts of the display could potentially be performed on the server. Our initial focus is only to improve the language designers use to specify visualizations; however, future research could determine whether this declarative approach allows optimization of the visualization pipeline, for example through lazy evaluation of visual properties <ref type="bibr" target="#b22">[24]</ref> with large datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">DESIGN</head><p>In designing Protovis, our goal was not to replace existing systems, but rather to support a missing point in the design space of visualization tools. Both charting software and analytical tools such as Tableau are successful in practice, but their expressiveness is limited. We wanted to provide tools that enable more low-level control of the design. Unlike existing toolkits primarily suited to software engineers, we created Protovis to make interactive visualization more accessible to web and interaction designers. Thus we attempted to minimize the number of intervening abstractions, allowing designers to focus on the composition of data-representative graphic elements using a notation that is concise and easy to learn.</p><p>Protovis uses a simple grammar of graphical primitives to compose visualizations. These primitives are called marks, and include familiar elements such as bars, lines and labels. Although a bar mark may be used to construct a bar chart, marks know nothing about charts; it is only through their specification and composition that charts are produced. These building blocks permit many combinatorial possibilities.</p><p>Marks are associated with data: a mark is generated once per associated datum, mapping the datum to visual properties such as position and color. Thus, a single mark specification represents a set of visual elements that share the same data and visual encoding. The type of mark defines the names of properties and their meaning. A property may be static, ignoring the associated datum and returning a constant; or, it may be dynamic, derived from the associated datum or index. Such dynamic encodings can be specified succinctly using anonymous functions, as shown in <ref type="figure" target="#fig_2">Figures 2 &amp; 4</ref>. Special properties called event handlers can be registered to add interactivity.</p><p>Protovis uses inheritance to simplify the specification of related marks: a new mark can be derived from an existing mark, inheriting its properties. The new mark can then override properties to specify new behavior, potentially in terms of the old behavior. In this way, the old mark serves as the prototype for the new mark. Prototypal inheritance is familiar to web developers, as it is a feature of the JavaScript language and Cascading Style Sheets. It is also similar to Prefuse's Cascaded Table design pattern <ref type="bibr" target="#b13">[15]</ref>. Most mark types share the same basic properties for consistency and to facilitate inheritance.</p><p>Marks may have associated anchors, which are named positions inside or nearby. Anchors can be used to position related marks, such as labels for grid lines. Likewise, panels can be used to offset positions and to replicate marks in small multiple displays <ref type="bibr" target="#b28">[30]</ref>. An example of these features working together is shown in <ref type="figure" target="#fig_2">Figure 4</ref>. The specification of marks, properties and panels is detailed in Subsections 3.1-3.3.</p><p>Data can be imported using JavaScript Object Notation <ref type="bibr" target="#b19">[21]</ref>, which allows integration with many existing web services. Data can be atomic (e.g., numbers) or hierarchical (e.g., nested arrays, objects). Data transformations are performed using JavaScript language features and additional methods provided by Protovis, described in Subsection 3.4. Alternatively, transformations can be pushed to the server.</p><p>Finally, Protovis includes additional features to simplify the specification of marks, such as date formatting, scale transformations, gradients and color palettes. These features are not discussed, but documentation is online at protovis.org.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Marks</head><p>The first task when using Protovis is to decompose the desired visualization into its constituent marks, as in <ref type="figure">Figure 1</ref>. A bar chart might consist of one or more bars, a rule, and a label; a pie chart might include only a wedge. In this way, we divide the problem of constructing a complex visualization into a series of smaller, easier problems.</p><p>Once the initial set of marks is decided-it is always possible to add or remove marks later-the remaining task is to define the properties of each mark. Of course, this is the crux of visualization, so it is critical that the built-in mark types and properties are intuitive and useful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Properties</head><p>Properties control how marks are rendered by mapping a given datum to a named rendering parameter. For example, the bar in <ref type="figure">Figure 2</ref> is defined in terms of its left margin, bottom margin, width and height.</p><p>As marks are generated, Protovis internally builds a scene graph recording the computed property values for each. The scene graph serves two purposes. First, it facilitates the definition of related marks through property chaining, where one mark's properties are defined in terms of another's. The property value is retrieved from the scene graph rather than recomputed. It is also needed if property functions depend on transient state, such as the current time or random variables. Second, the scene graph supports interaction and animation.</p><p>Property functions can access the scene graph through the this object, as well as globals or bound variables outside the function. Protovis uses a family tree convention for scene graph navigation: property functions can refer to the parent panel that encloses the current mark, the previous sibling, or the cousin in the previous instantiation of the parent panel, as in <ref type="figure">Figure 2</ref>. A zero-based index attribute can be used to compute a regularly-spaced left position, sufficing as a trivial scale transformation.</p><p>Interactivity can be added by registering event handlers on marks. Handlers respond to mouse or keyboard input events and mutate the scene graph or underlying data to update the display. For example, a handler might recolor a mark red in response to a mouse click event: event("click",function()this.fillStyle("red")).</p><p>All marks share two fundamental properties, data and visible. The data property is typically a static array, though in the case of nested panels, a function can be used to dereference hierarchical data, as in small multiple displays. Visibility determines whether or not a mark is rendered; if false, the other properties are not evaluated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Box Model</head><p>Many graphical systems use a Cartesian coordinate system where the location of graphical elements is specified with a two-dimensional vector x, y . Protovis takes a slightly different approach, adapting the CSS box model <ref type="bibr" target="#b7">[8]</ref>. This is consistent with the layout of visual elements in web pages, and allows the specification of right-facing or top-facing charts (akin to bidirectional text), simply by changing left to right or bottom to top.</p><p>Points are specified with two orthogonal properties; using left and top is equivalent to placing the origin in the top-left corner of the viewport. If redundant properties are specified, left takes priority over right and top takes priority over bottom. Boxes (axis-aligned rectangles) can be specified using four orthogonal properties, such as left, top, width and height, as shown in <ref type="figure" target="#fig_1">Figure 3</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Panels</head><p>Panels allow repeated or nested structures, commonly used in small multiple displays <ref type="bibr" target="#b28">[30]</ref> where a small visualization is tiled to facilitate comparison across one or more dimensions. Other types of visualizations may benefit from repeated and possibly overlapping structure as well, such as the stacked area chart in <ref type="figure">Figure 2</ref>. Panels can also offset the position of marks to provide padding from surrounding content. All Protovis displays have at least one panel; this is the root panel to which marks are rendered. The box model properties (four margins, width and height) are used to offset the positions of contained marks. The data property determines the panel count: a panel is generated var panel = new pv.Panel() .width(160).height(160) .bottom <ref type="bibr" target="#b9">(10)</ref>.left <ref type="bibr" target="#b9">(10)</ref>.right <ref type="formula">30</ref> once per associated datum. When nested panels are used, property functions can declare additional arguments to access the data associated with enclosing panels. Panels can be rendered inline, facilitating the creation of sparklines <ref type="bibr" target="#b30">[32]</ref> such as , , or . This allows designers to reuse browser layout features, such as text flow and tables; designers can also overlay HTML elements such as rich text and images.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Built-in Mark Types</head><p>We now describe the initial set of graphical primitives provided by Protovis. Protovis is extensible, and we expect to introduce new mark types in the future. At the same time, it is desirable to keep the set of supported marks small, so as to avoid overwhelming users with a cornucopia of similar options.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Shapes</head><p>The Line mark type represents a series of connected line segments, or polyline, that can be stroked with a configurable color and thickness. By default, a distinct stroke color is allocated from a stock color palette. Each articulation point in the line corresponds to a datum; for n points, n -1 connected line segments are drawn. The point is positioned using the box model. Arbitrary paths are also possible, allowing radar plots and other custom visualizations.</p><p>Just as a line represents a polyline, the Area mark type represents a polygon. However, an area is not an arbitrary polygon; vertices are paired either horizontally or vertically into parallel spans, and each span corresponds to an associated datum. Either the width or the height must be specified, but not both; this determines whether the area is horizontally-oriented or vertically-oriented. Like lines, areas can be stroked and filled with arbitrary colors.</p><p>The Bar mark type is an axis-aligned rectangle that can be stroked and filled. Bars are used for many chart types, including bar charts, histograms and Gantt charts. Bars can also be used as decorations, for example to draw a frame border around a panel.</p><p>A Dot is simply a sized glyph (e.g., , , , , ) centered at a given point that can also be stroked and filled. The size property is proportional to the area of the rendered glyph to encourage meaningful visual encodings. Dots can visually encode up to eight dimensions of data, though this may be unwise due to integrality <ref type="bibr" target="#b32">[34]</ref>. No visualization system would be complete without the ability to render the ubiquitous pie chart, so a Wedge mark type is provided. Specified in terms of start and end angle, inner and outer radius, wedges can be used to construct donut charts and polar bar charts as well. If the angle property is used, the end angle is implied by adding this value to start angle. By default, the start angle is the previouslygenerated wedge's end angle. This design allows explicit control over the wedge placement if desired, while offering convenient defaults for the construction of radial graphs.</p><p>The Rule mark type is provided to render horizontal and vertical rules that are frequently needed for axes and grid lines. For example, specifying only the bottom margin draws horizontal rules, while specifying only the left draws vertical rules. Rules can also be used as thin bars. The visual style is controlled in the same manner as lines.</p><p>The Link mark type enables construction of node-link diagrams by specifying connections between mark instances. The nodes property determines a mark collection to use as nodes. Nodes are then indexed according to values returned by the nodeKey property. By default, a link's prototype mark provides the nodes (i.e., links "inherit" their nodes) and each node's zero-based mark index serves as its key. For each datum, the sourceKey and targetKey properties specify the link end points in terms of node keys. The specification can accomodate multiple graph and tree data structures, including separate node and edge tables, single tables with parent keys, pointer-based tree structures, and adjacency lists. Currently links are drawn as straight lines styled identically to line marks, with optional arrows specified by the sourceEnd and targetEnd properties. The optional anchor properties sourceAnchor and targetAnchor afford more precise positioning of end points with respect to nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Text and Images</head><p>The Label mark type allows textual annotation, such as labeling points in a scatterplot, axis ticks and legends. A number of text placement properties are available in addition to box model positioning: rotation angle, horizontal and vertical alignment. The text itself is set with the text property, whose default value is the identity function. Finally, the Image mark type supports static images and the generation of dynamic images such as heat maps. For the latter, the color of each pixel is specified using a function. <ref type="figure" target="#fig_3">Figure 5(d)</ref> shows an example image that visually encodes elevation using a color gradient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Data Transformation</head><p>Data is rarely in the exact format needed to produce the desired visualization. Much of the work involved in producing a visualization is finding data, munging it into a consistent format, deriving additional fields, and refolding it to match the structure of the visualization specification. Furthermore, knowledge gained from preliminary visualizations can motivate new visualizations, possibly requiring changes to the data format or new data from different sources <ref type="bibr" target="#b5">[6]</ref>; making this process easy encourages users to make the right visualization, rather than compromising the design to suit the arbitrary format of the data.</p><p>A frequently-needed data transformation is to group relational data into a tree; this is accomplished using the nest operator <ref type="bibr" target="#b27">[29,</ref><ref type="bibr" target="#b35">37]</ref>. Given a key function, which returns the key value for a given datum, the nest operator groups data with the same key value. Multiple key functions can be specified to produce nested groups.</p><p>The nest operator also provides sorting and rollup functionality. Elements in the tree can be sorted by keys or values, using either default lexicographic ordering or a custom comparator function. The rollup method returns a map with entries for each key, whose values are the results of applying a function to each group of elements. For example, rollup can be used to compute the median value for each group, which can then be used to sort groups (as in <ref type="figure" target="#fig_4">Figure 6(c)</ref>).</p><p>Protovis includes a number of summary statistics, such as count, sum, max, min, mean, median, and quantile. We also provide several methods for arrays, such as number range generation, scaling, permutation, and cross and blend operators <ref type="bibr" target="#b35">[37]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EVALUATION</head><p>As we developed Protovis, we sought to meet our design goals of creating an expressive, efficient, and accessible visualization tool. Here we present findings from early-stage evaluations. To evaluate expressiveness and efficiency, we built a variety of example applications. To evaluate accessibility, we analyzed Protovis using the Cognitive Dimensions of Notation framework <ref type="bibr" target="#b11">[13]</ref> and solicited feedback from designers. Where applicable, we compare Protovis with Processing and Flare, popular tools that serve as exemplars of low-level graphics programming and high-level visualization systems, respectively. To evaluate system performance, we used profiling tools to measure the load time and memory usage of several example charts. The results are shown in <ref type="table" target="#tab_0">Table 1</ref>. The data was collected using SVG in Safari 4 on Mac OS X 10.5.7, with a 2.8 GHz Intel Core 2 Duo processor and 4 GB of RAM. The numbers for each chart are shown relative to the baseline time and memory for a blank page. Also included are standard line and scatterplots for datasets ranging from 10 to 100,000 points. Although the thin-client SVG renderer is usable with up to 10,000 data points, larger datasets likely require a different system architecture-though not necessarily a different specification language.</p><p>We now present a pair of in-depth comparisons: a simple pie chart specification and the Job Voyager, an interactive stream graph <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Pie Charts</head><p>The specifications for a simple pie chart ( ) in Protovis, Processing and Flare are shown in <ref type="figure" target="#fig_5">Figure 7</ref>. Although the pie chart is a trivial instantiation of a standard chart type (neither custom nor interactive), differences between the three systems are apparent.</p><p>Processing uses an imperative specification where most instructions either render a shape immediately or have a side-effect on the drawing environment. For instance, noStroke disables stroking of paths, so that calls to arc are only filled. Like Protovis, Processing uses simple graphical primitives; each pie wedge is specified literally in terms of radii and angles. However, the exact mapping of data to visual properties is arguably less clear. While the impact on this simple example is minor, problems of accessibility accrue as complexity increases.</p><p>The Flare specification employs two visualization abstractions that simplify chart construction. The first is PieLayout, which translates the univariate data into the dimensions of each pie slice. The second is ColorEncoder, which translates the same data into a suitable quantitative color encoding with a light-to-dark blue gradient. The higherlevel abstractions of Flare arguably result in less effort, thanks to the automatic layout and color encoding. However, the user must understand these abstractions in order to use them ("How do I reference the data values? What are 'nodes'?"), and they may not be suitable for custom visualizations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Job Voyager</head><p>The Job Voyager by Heer et al. <ref type="bibr" target="#b16">[18]</ref> shows U.S. census data for occupation and gender over 150 years. The dataset has over 6,000 data points. The display is interactive, allowing the user to filter the visible occupations according to a search query. <ref type="figure" target="#fig_4">Figure 6</ref>(e) shows jobs with the suffix "-ist". The data is visualized as a stacked area chart using a ThemeRiver layout <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b12">14]</ref>. A single area mark is enclosed by a panel that is repeated for each job-sex pair. This is a refinement of the technique shown in <ref type="figure">Figure 2</ref>; the area's cousin determines the bottom position. The nest operator groups the relational data by both sex and occupation, and then sorts alphabetically by occupation.</p><p>The Protovis version is notably more concise than the Flare original: with comments and import statements removed, the Flare version remains over twice as long. However, the Flare version uses pre-built operators for performing area and label layout, whereas the Protovis version directly specifies the stacking and labeling rules; a more balanced comparison including the size of Flare operators increases the code size ratio from 2:1 to 5:1. Of course, to developers familiar with Flare, these toolkit abstractions may make the specification easier to implement due to encapsulation. Furthermore, they facilitate niceties such as animated transitions between states. We plan to add similar support to future versions of Protovis, though such abstractions would be optional, and not required learning for all users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Cognitive Dimensions of Notation</head><p>Though counting lines of code provides some insight into the effort required to specify a visualization, it alone is hardly a satisfactory measure. As an initial assessment of Protovis' accessibility, we performed an analysis using the Cognitive Dimensions of Notation (CDN) framework <ref type="bibr" target="#b11">[13]</ref>, an inspection method for evaluating the effectiveness of notational systems such as programming languages and visual interfaces.</p><p>CDN provides a collection of cognitive dimensions: useful heuristics for evaluating a notation system and the environment in which it is manipulated. Due to space limitations, we briefly discuss only a relevant subset of the 14 cognitive dimensions; we draw comparisons to other tools where appropriate.</p><p>Closeness of mapping (closeness of representation to domain) • In Protovis, the notation and problem domain are closely linked: visualizations are defined directly in terms of graphical marks, though one has to map from textual specification to visual output. Furthermore, Protovis uses existing web conventions such as the CSS box model to leverage existing knowledge. In contrast, rendering APIs such as Processing provide imperative rendering commands that also correspond to graphic marks, but lack both direct specification of marks in terms of properties and a scene graph that allows object-level manipulation of marks. Flare instead requires conceptualizing the visualization in terms of encoding operators, which in turn have a number of effects (and side-effects) upon visual properties.</p><p>Hidden dependencies (important links between entities are not visible) • Protovis provides a few "behind-the-scenes" facilities such as parent, sibling, and cousin scene graph accessors, and inheritance may at times result in unintended property settings. Flare uses a host of abstractions including operators, axes, scale bindings, renderers, and animators, few of which are visible in the visualization specification. As a result, designers often report that it is frustrating to determine the provenance of visual properties ("Is the axis layout overwriting my manual scale range settings?").</p><p>Role-expressiveness (the purpose of a component is readily inferred) and Visibility (ability to view components easily) • Protovis specifications directly denote the mark types and their visual properties, enabling identification of each visual mapping. However, as discussed above, inheritance hampers this visibility. In Flare, the operators are typically identified by their name and constructor parameters; in many cases documentation or code-inspection is required to understand the effects of running the operator.</p><p>Consistency (similar semantics are expressed in similar syntactic forms) • Protovis reuses the semantics of mark properties as much as possible to facilitate consistency and improve learning. Some inconsistencies do occur: for example Marks do not inherit Panel properties. In Flare, most operators are idiosyncratic but are instantiated and composed in a consistent fashion. However, the relation between visual properties and the actual appearance is indirect: Flare uses pluggable renderers that can use or ignore visual object properties.</p><p>Viscosity (resistance to change) • Protovis allows rapid iteration by changing property settings, and the visibility and consistency of properties facilitates rapid switching between mark types (except when switching between Cartesian and radial marks). Flare allows quick changes to operator settings and composition, but there are little consistency guarantees of properties across operators. Processing requires direct modification of imperative code, and so viscosity is largely determined by the developer's own engineering skill.</p><p>Hard mental operations (high demand on cognitive resources) • By directly surfacing visual property values, Protovis may incur more mental effort regarding the mathematics of visual encoding, e.g., multiplying index and data values rather than simply invoking an axis encoding as in Flare. Protovis provides scale transforms to aid this process, at the cost of learning an additional, through relatively straightforward, abstraction. In Flare, the most common taxing operations are search tasks due to lack of visibility or hidden dependencies: how to configure an operator, override a buried default value, or access an intermediate abstraction.</p><p>Diffuseness (verbosity of language) • Section 4.1 discusses tool verbosity. We have found Protovis to be concise in practice, though this may be complicated by the incorporation of additional libraries or interaction with the browser. Flare descriptions are also concise so long as an operator for the desired task is already defined.</p><p>Abstraction (types and availability of abstraction mechanism) • Protovis does not yet provide toolkit mechanisms for abstraction, such as template definitions. However, akin to Processing, programming language abstractions such as functions and classes can be used. Flare enables abstraction via operator and interactor classes, though these require significant toolkit knowledge to author.</p><p>In summary, we have found that Protovis rates favorably in terms of closeness of mapping, hidden dependencies, visibility, consistency, viscosity, and diffuseness-lending credence to our claim of toolkit accessibility. The analysis also points to some areas for potential innovation, e.g., promoting visibility across inheritance relations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Designer Feedback</head><p>We are also actively seeking feedback from visualization designers and tool builders to inform the iterative design of Protovis. Initial feedback has been quite positive; respondents have particularly praised the direct and concise nature of Protovis specifications. For example, one toolkit author wrote, "You've captured the basics in a concise and elegant manner," while another designer noted that Protovis "gives us a lot of flexibility with a shallow learning curve. Great things might come from this." Others surprised us by quickly responding with demos they had built, including the first "mash-up" of Protovis with mapping libraries and a bar chart of live posting activity on Twitter; see <ref type="figure" target="#fig_4">Figure 6</ref>(f,g). Mozilla Messaging is working to include Protovis with Thunderbird 3, calling it "delightful" and "useful to add-on authors."</p><p>Respondents also pointed out important areas for improvement. Most feedback noted the need for higher-level support for scale transforms and axis labeling; we subsequently added scale facilities for computing ranges, setting mark properties, and generating tick and label values. We have maintained an "opt-in" design philosophy for such higher-level abstractions: we support various statistical and charting features in a way that complements our mark-based specifications, ensuring that higher-level abstractions can be easily added, but also easily removed or stubbed-out. Other requests included richer support for interaction and animation, which we are now implementing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION AND FUTURE WORK</head><p>The previous sections give some indication of the effort required to construct "real-world" custom visualizations in our system, as well as the system's capabilities and performance. While it is true that other systems are more concise, few simultaneously provide the same degree of flexibility and control. And, because our system uses only simple shapes with explicit visual encodings, its behavior is transparent: there is not a lot of "magic" behind the scenes. We posit that the directness of the specification makes the system more accessible to new users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Evaluation</head><p>Of course, our hypotheses require further inquiry. While we have applied the Cognitive Dimensions of Notation framework in an initial usability evaluation, both user studies and observed real-world usage will further evaluate our claims. There are many questions to ask:</p><p>• Is the system easy to learn for new users? How quickly can novice users learn to develop nontrivial, original works?</p><p>• Is the system accessible to non-programmers? Are the features modeled after web page layout useful, or is the traditional mathematical graph approach more effective?</p><p>• Is the system suitable for complex visualizations? Are existing features sufficiently expressive, or are new graphical primitives and abstractions necessary?</p><p>• What impact does the system have on the creative process? Will users produce better visualizations with a more expressive system, or are errors, missing features and meaningless encodings more likely?</p><p>The last of these questions are perhaps the most important, since they are relevant not just to producers of visualizations, but to consumers. By taking a bottom-up approach, every visual element in Protovis is specified explicitly in contrast to top-down approaches where visual elements are inherited from a template. As a result, our system favors minimalist designs. This may discourage chartjunk and raise the data-ink ratio <ref type="bibr" target="#b28">[30]</ref>, but at the same time it risks the omission of helpful marks that are cumbersome to specify.</p><p>In the same vein, by requiring that the user specify the visualization explicitly and by making all visual properties equally dynamic, it may be more likely that an inappropriate visual encoding is used. Compare this to a system such as Polaris or Mackinlay's APT <ref type="bibr" target="#b20">[22]</ref>, which intelligently suggest meaningful designs based on metadata. The corollary is that high-level visualization systems may inadvertently make the wrong automatic decision, and not allow the user to compensate. If we can encourage users to produce the right visualization by example and with appropriate low-level building blocks, we may help users construct effective visualizations without artificially restricting the design space. Furthermore, automatic presentation tools may be adapted to generate Protovis specifications, combining the benefits of high-level tools with low-level design control.</p><p>Going forward, we plan to refine and extend the design of Protovis. These plans include the design of a development environment to assist visualization creation (a strategy that has proven effective for tools such as Processing), potentially including a visual editor. We also intend to conduct a formal evaluation of Protovis development. We consider such work to be largely formative; we believe the true measure of the toolkit's value lies in the creation and dissemination of successful visualization by others. We will accordingly continue to monitor and respond to the needs and insights of Protovis users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">An Ecology of Visualization</head><p>One of the most exciting features of our system is that visualizations become open source: since specifications are concise and are not compiled, but instead interpreted at runtime by the web browser, users can easily view the source code and data behind any visualization. In addition to learning by example, visualizations are constructed from modular primitives which make it easier for designers to incorporate discovered techniques into their own work through copy-and-paste <ref type="bibr" target="#b3">[4]</ref>.</p><p>Open source also facilitates some degree of collaboration <ref type="bibr" target="#b14">[16]</ref>, since users can more easily create derivative works to show different views or fix mistakes. For example, in our recreation of Burtin's antibiotic effectiveness chart <ref type="figure">(Figure 1</ref>) <ref type="bibr" target="#b25">[27]</ref>, we discovered a missing grid line for the minimum inhibitory concentration of 0.01, as well as an exaggeration of some values for Penicillin.</p><p>Systems such as sense.us <ref type="bibr" target="#b16">[18]</ref> and Many Eyes <ref type="bibr" target="#b31">[33]</ref> have helped demonstrate the value of collaborative sharing of data, visualizations, and insights gained from an analysis. The Google Visualization API, meanwhile, lets developers package chart templates as "gadgets" for reuse by others. However, one component of the visualization pipeline that is not well addressed by these systems is the collaborative construction of novel, interactive visualizations. Just as HTML enables "everyday programmers" <ref type="bibr" target="#b26">[28]</ref> to author web pages, by balancing expressiveness, efficiency, and accessibility, we hope that Protovis will help foster a greater diversity of customized web-based visualizations.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .Fig. 2 .</head><label>12</label><figDesc>Decomposing a visualization into marks. new pv.Panel().canvas("fig3b") .data([[1, 1.2, 1.7, 1.5, .7], [.5, 1, .8, 1.1, 1.3], [.2, .5, .8, .9, 1]]) .add(pv.Area) .data(function(d) d) .fillStyle(pv.Colors.category19.parent) .bottom(function() let (c = this.cousin()) c ? (c.bottom + c.height) : 0) .height(function(d) d * 40) .left(function() this.index * 35) .root.render(); b new pv.Panel().canvas("fig3a").add(pv.Bar) .data([1, 1.2, 1.7, 1.5, .7, .2]) .bottom(0).width<ref type="bibr" target="#b18">(20)</ref> .height(function(d) d * 80) .left(function() this.index * 25) .root.render(); a Specifying two simple charts. (a) Bar. (b) Stacked area.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Specifying position and dimension using the box model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>; panel.add(pv.Area) .data([1, 1.2, 1.7, 1.5, .7, .5, .2]) .bottom(0) .height(function(d) d * 80) .left(function() this.index * 25) .fillStyle("lightblue") .anchor("top").add(pv.Line) .strokeStyle("black") .add(pv.Dot); panel.add(pv.Rule) .bottom(0) .add(pv.Rule) .data(pv.range(.5, 2, .5)) .bottom(function(d) d * 80) .strokeStyle("white") .anchor("right").add(pv.Label); panel.render(); Dissection of an area chart specification in Protovis. The first three lines set the dimensions and margins of the root panel. (a) Next, an area mark visually encodes the array of numbers with height. (b) A black line is added to the area's top anchor for emphasis. (c) A dot is derived from the line to indicate samples; note that it inherits the fill color from the area. (d) A horizontal rule, added to the panel, serves as the x-axis. (e) A second rule implements white grid lines. (f) Finally, a label is added to the rule's right anchor to show reference values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Examples of built-in mark types. (a-h) Area; Bar; Dot; Image; Line; Label and Bar; Rule and Bar; Wedge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Example applications. (a) Jacques Bertin's analysis of hotel patterns. (b) Florence Nightingale's chart of deaths in the Crimean War. (c) A trellis display of barley yields. (d) William Playfair's chart comparing the price of wheat and wages. (e) The Job Voyager. (f) Charles Minard's flow map of Napoleon's march to Moscow, as a Google Maps "mash-up". (g) Live Twitter updates containing the word "oakland".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>cFig. 7 .</head><label>7</label><figDesc>vis = new Visualization( Data.fromArray([{value: 1}, ...])); vis.bounds = new Rectangle(0, 0, 150, 150); vis.operators.add(new PieLayout( "data.value", 0.9)); vis.operators.add(new ColorEncoder( "data.value", "nodes", "fillColor")); vis.update(); addChild(vis); new pv.Panel().width(150).height(150) .add(pv.Wedge) .left(75).bottom(75) .outerRadius(70) .angle(function(d) d * 2 * Math.PI) .data(pv.normalize([1, 1.2, 1.7, 1.5, .7])) .root.render(); a size(150, 150); background(255); smooth(); noStroke(); int diameter = 140; float[] data = {1, 1.2, 1.7, 1.5, .7}; float lastAng = 0, sum = 0; for (int i = 0; i &lt; data.length; i++) { sum += data[i]; } for (int i = 0; i &lt; data.length; i++) { fill(data[i] * 120); float ang = data[i] / sum * 2 * PI; arc(width / 2, height / 2, diameter, diameter, lastAng, lastAng + ang); lastAng += ang; }b Specifying a simple pie chart. (a-c) Protovis; Processing; Flare.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Load time and memory usage on example charts (n=10).</figDesc><table><row><cell>Chart</cell><cell cols="2">Time (ms)</cell><cell cols="2">Memory (MB)</cell></row><row><cell></cell><cell>µ</cell><cell>σ</cell><cell>µ</cell><cell>σ</cell></row><row><cell>blank page</cell><cell>19</cell><cell>1</cell><cell cols="2">3.94 0.03</cell></row><row><cell>crimea-rose</cell><cell>38</cell><cell>4</cell><cell cols="2">0.25 0.04</cell></row><row><cell>barley-trellis</cell><cell>52</cell><cell>3</cell><cell cols="2">0.37 0.04</cell></row><row><cell cols="2">wheat-playfair 55</cell><cell>8</cell><cell cols="2">0.26 0.04</cell></row><row><cell>hotels-bertin</cell><cell>61</cell><cell>5</cell><cell cols="2">0.62 0.04</cell></row><row><cell>job-voyager</cell><cell>499</cell><cell>10</cell><cell cols="2">0.73 0.05</cell></row><row><cell>line-10</cell><cell>32</cell><cell>3</cell><cell cols="2">0.14 0.08</cell></row><row><cell>line-100</cell><cell>34</cell><cell>1</cell><cell cols="2">0.20 0.05</cell></row><row><cell>line-1,000</cell><cell>55</cell><cell>2</cell><cell cols="2">0.19 0.04</cell></row><row><cell>line-10,000</cell><cell>271</cell><cell>10</cell><cell cols="2">0.40 0.05</cell></row><row><cell>line-100,000</cell><cell cols="2">2,630 22</cell><cell cols="2">2.01 0.04</cell></row><row><cell>dot-10</cell><cell>32</cell><cell>2</cell><cell cols="2">0.12 0.04</cell></row><row><cell>dot-100</cell><cell>36</cell><cell>2</cell><cell cols="2">0.18 0.06</cell></row><row><cell>dot-1,000</cell><cell>94</cell><cell>2</cell><cell cols="2">1.08 0.05</cell></row><row><cell>dot-10,000</cell><cell>692</cell><cell>8</cell><cell cols="2">10.1 0.06</cell></row><row><cell>dot-100,000</cell><cell cols="2">7,370 66</cell><cell>102</cell><cell>1.83</cell></row></table><note>4.1 Applications and Performance Using Protovis, we were able to quickly and concisely specify a di- verse set of visualizations. A subset of these examples is shown in Fig- ure 6, including classic visualizations originally drawn by hand juxta- posed with more modern examples, such as a "mash-up" with online mapping tools and interactive stacked graphs. We indeed found that Protovis facilitated design and implementation: Bertin's permutation matrix of hotel visits required only 38 lines of JavaScript, Nightin- gale's coxcomb 55, and Becker et al.'s trellis display (complete with main-effects ordering) only 45.</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">In ggplot2, an implementation of Wilkinson's Grammar in R, an example grouped bar chart is specified as ggplot(diamonds, aes(x=clarity, fill=cut)) + geom bar(position="dodge")<ref type="bibr" target="#b34">[36]</ref>.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Toolkit design for interactive structured graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Grosjean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Meyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="535" to="546" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A functional framework for web-based information visualization systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Disch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ebert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="8" to="23" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Semiology of graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bertin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983" />
			<publisher>University of Wisconsin Press</publisher>
			<pubPlace>Madison, WI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Opportunistic programming: how rapid ideation and prototyping occur in practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lewenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WEUSE &apos;08: Proc. 4th Workshop on End-User Software Engineering</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Stacked graphs -geometry &amp; aesthetics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Byron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1245" to="1252" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Readings in information visualization: using vision to think</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Morgan Kaufmann</publisher>
			<pubPlace>San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An operator interaction framework for visualization systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">H</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE InfoVis</title>
		<meeting>IEEE InfoVis</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="63" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Css Box Model</surname></persName>
		</author>
		<ptr target="http://w3.org/TR/CSS2/box.html" />
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Thin client visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Eick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Eick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Fugitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Horst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Khailo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Lankenau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VAST &apos;07: Proceedings of the 2007 IEEE Symposium on Visual Analytics Science and Technology</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="51" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The InfoVis Toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE InfoVis</title>
		<meeting>IEEE InfoVis</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="167" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Show Me the Numbers: Designing Tables and graphs to Enlighten</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Few</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Analytics Press</publisher>
			<pubPlace>Berkeley, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Cognitive dimensions of notations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">R G</forename><surname>Green</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the fifth conference of the British Computer Society, Human-Computer Interaction Specialist Group on People and computers V</title>
		<meeting>the fifth conference of the British Computer Society, Human-Computer Interaction Specialist Group on People and computers V<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="443" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">ThemeRiver: Visualizing thematic changes in large document collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Havre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hetzler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Whitney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nowell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="9" to="20" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Software design patterns for information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Agrawala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="853" to="860" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Design considerations for collaborative visual analytics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Agrawala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Visualization</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="49" to="62" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">prefuse: a toolkit for interactive information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Landay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM CHI</title>
		<meeting>ACM CHI</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="421" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Voyager and voyeurs: Supporting asynchronous collaborative information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Viégas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM CHI</title>
		<meeting>ACM CHI</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1029" to="1038" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Building domain-specific embedded languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hudak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page">196</biblScope>
			<date type="published" when="1996-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A scalability study of web-native information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Jankun-Kelly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GI &apos;08: Proceedings of graphics interface 2008</title>
		<meeting><address><addrLine>Toronto, Ont., Canada, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>Canadian Information Processing Society</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="163" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<ptr target="http://json.org" />
		<title level="m">JSON</title>
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Automating the design of graphical presentations of relational information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="110" to="141" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The Pyschology of Science: A Reconnaissance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maslow</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1966" />
			<publisher>Harper &amp; Row</publisher>
			<pubPlace>Madison, WI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Large field visualization with demand-driven calculation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Henze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;99: Proc. Visualization &apos;99</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">The Psychology of Everyday Things</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Norman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>Basic Books</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<ptr target="http://processing.org" />
		<title level="m">Processing</title>
		<meeting>essing</meeting>
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Design and Science: The Life and Work of Will Burtin. Ashgate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Remington</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fripp</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Everyday programming: Challenges and opportunities for informal web development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Rosson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ballin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Nash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLHCC &apos;04: Proceedings of the 2004 IEEE Symposium on Visual Languages -Human Centric Computing</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="123" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Polaris: A system for query, analysis, and visualization of multidimensional relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="52" to="65" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The Visual Display of Quantitative Information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tufte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Graphics Press</publisher>
			<pubPlace>Cheshire, CT</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tufte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Ask</surname></persName>
		</author>
		<ptr target="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=00000p" />
		<title level="m">Graphing Software</title>
		<imprint>
			<date type="published" when="2001-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Beautiful Evidence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tufte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Graphics Press</publisher>
			<pubPlace>Cheshire, CT</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Many Eyes: a site for visualization at internet scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Viégas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kriss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mckeon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1121" to="1128" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Information visualization: perception for design. Morgan Kaufmann</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ware</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<pubPlace>San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Building highly-coordinated visualizations in Improvise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE InfoVis</title>
		<meeting>IEEE InfoVis</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="159" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wickham</surname></persName>
		</author>
		<ptr target="http://had.co.nz/ggplot2/" />
		<title level="m">ggplot2</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">The Grammar of Graphics (Statistics and Computing)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wilkinson</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A web services architecture for visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Brodlie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Duke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Walton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="volume">0</biblScope>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
