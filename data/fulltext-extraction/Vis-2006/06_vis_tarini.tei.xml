<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Ambient occlusion and edge cueing to enhance real time molecular visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Tarini</surname></persName>
							<email>m.tarini@isti.cnr.it</email>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><forename type="middle">•</forename><surname>Cignoni</surname></persName>
							<email>p.cignoni@isti.cnr.it</email>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claudio</forename><surname>Montani</surname></persName>
							<email>c.montani@isti.cnr.it</email>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="institution">Università dell&apos;Insubria</orgName>
								<address>
									<settlement>Varese</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Ambient occlusion and edge cueing to enhance real time molecular visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2006; accepted 1 August 2006; posted online 6 November 2006.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Fig. 1. Good molecular rendering can be more informative, clearer, and more capable of communicating a shape when it is the combined result of several effects and techniques. Top row: base atom colors, direct Lambertian and Phong illumination, self-shadowing, depth cueing. Bottom row (the topics of this paper): ambient occlusion, depth-aware halos, depth-revealing contour lines, and intersection-revealing contour lines.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Interactive protein visualization is an important application with harder requirements every year: public databases like RCBS Protein Data Bank <ref type="bibr" target="#b0">[1]</ref> are storing a large number of molecular structures of ever-increasing complexity. It is essential to be able to visualize the shape of these proteins in an interactive, meaningful and insightful way so that users can correctly understand the three-dimensional structure of these shapes.</p><p>Many software systems, such as for example RasMol <ref type="bibr" target="#b27">[28]</ref>, CN3D <ref type="bibr" target="#b5">[6]</ref> or Chimera <ref type="bibr" target="#b4">[5]</ref>, are available to help scientists in this task. These systems offer various visualization modalities that map the inner structure of the molecules into 3D shapes according to an almost standard set of paradigms as Balls-and-Sticks, Space-Fill, Licorice, Ribbons and various kinds of accessibility surfaces. These approaches are able to describe local geometrical and chemical properties of the inspected structure and to provide insights on chemical traits of the molecule. An emerging problem is that, due to the growing size and complexity of the analyzed proteins, all of these visualization modes map proteins into three dimensional structures that, when rendered with standard local shading techniques, fail to produce a high-level comprehensible picture to the user. In other words, for complex molecules it is very difficult to perceive the overall 3D structure of the protein from a single image. This problem is only diminished, but not solved, when other common visualization techniques, as ribbons, provide a higher level description of the structure.</p><p>From a rendering oriented point of view, the problem is closely related to the use of local lighting models, since global illumination effects are usually not available in a handy interactive way. Sometimes more sophisticated approaches are used by means of off-line tools like raytracers for generating high quality images for important presentation cases (like journal or web covers); but these tools never aid the research during the interactive visualization process.</p><p>The most common (non-local) effects that are used for enhancing the rendering are cast shadows and depth cueing. Both of them are available in most of the well-known molecular visualization systems, but these approaches often fail to create an easily comprehensible image. For example, consider the molecule shown in <ref type="figure" target="#fig_4">Fig. 7</ref> lower left: while it is clearly better than the plain rendering (top left), the shape of some portions of the protein is still very ambiguous. Other common techniques adopted to overcome this problem are interactivity and the use of stereoscopic displays.</p><p>In recent years much of the research efforts on large protein vi-sualization has targeted efficient rendering of these large 3D structures, to achieve real interactivity. Various systems were presented with this purpose, both relying on existing 3D API <ref type="bibr" target="#b3">[4]</ref> or trying to exploit features of recent graphics hardware or multiresolution techniques <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b9">10]</ref>. Importantly, while the focus of this paper is to raise the quality of the perception of the shapes through sophisticated shading and edge cueing effects, the interactivity of the whole system is a fundamental feature of our approach: all presented techniques work in realtime for very large proteins like the 1AON depicted in <ref type="figure" target="#fig_4">Fig. 7</ref> (around 60K atoms) and do not need any preprocessing phase of significant length. The main contributions of this paper can be summarized as follows:</p><p>• the use of advanced shading techniques for enhancing the perception of the 3D shape of large proteins; • a novel technique for parameterizing the surface of molecules represented as SpaceFill or Ball and Sticks models (sec. 3.3); • a novel technique for efficiently computing ambient occlusion information for molecules (sec. 4); • an efficient approach for the rendering of molecular models using GPU based procedural textured impostors. (sec. 3.1); • two interactive techniques for enhancing edges in molecular renderings (sec. 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK.</head><p>We aim to enhance the shape perception process during molecular visualization by means of stylistic rendering techniques combined with a more sophisticated shading model. In other words, we are defining an illustrative visualization approach <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b7">8]</ref> for enhancing the information-effectiveness of the rendered images of molecules. We adopt more a sophisticated shading model that approximates the light coming from an uniformly diffusing lighting environment. This was shown to be useful in <ref type="bibr" target="#b16">[17]</ref>, where the authors report the results of perceptual experiments showing that depth discrimination under diffuse lighting is superior to that predicted by a classical sunny day/direct lighting model, and by a model in which perceived luminance varies with depth. The inadequacy of local lighting models was already noted in <ref type="bibr" target="#b29">[30]</ref>, where the use of a vicinity shading, a variant of the obscurance term proposed in <ref type="bibr" target="#b31">[32]</ref>, was proposed to enhance the visualization of volumetric datasets. Similarly in <ref type="bibr" target="#b20">[21]</ref> the accessibility shading approach was introduced, where the geometric local (and global) accessibility of a point is used to modify the Lambertian shading of the surface in order to darken deep, difficultly accessible areas.</p><p>Enhancing edges and silhouette As was shown in <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b13">14]</ref> finding and displaying silhouette edges is an important task that is used by illustrative rendering approaches to improve the readability of a 3D scene. Many different techniques have been proposed and a good survey on this matter can be found in <ref type="bibr" target="#b12">[13]</ref>. Some of the proposed approaches, like <ref type="bibr" target="#b25">[26]</ref>, work directly in image space, by processing the rendered depth buffer of the scene; others works on the mesh representation finding edges of the mesh that are part of the silhouette for the current viewpoint. Other authors exploit graphics hardware rendering features to perform this task, such as the z-offsetting technique presented in <ref type="bibr" target="#b24">[25]</ref> that produces borders by rendering front and back faces of a scene with a different z-offset. Recent approaches, like ours, exploit the programmability of the graphics hardware to implement directly on the GPU most of these approaches. A more detailed comparison between our approaches for enhancing the edges of a molecule and the existing approaches is reported in section 5.</p><p>Enhancing the ambient term In local shading models the effect light which does not come directly from the primary light source has to be approximated. Otherwise, the portion of the scene which is not directly lit will come out entirely dark. Even without resorting to more correct (and complex) global illumination solutions, shortcuts are possible. The commonest and cheapest solution <ref type="bibr" target="#b22">[23]</ref> is to use a simple per-scene constant term, but this approach leads to a notable flatness in the portions of the scene which are not directly lit.</p><p>The approach has been improved by explicitly computing for each point of the surface its accessibility value, which is the percentage of the hemisphere above each surface point not occluded by geometry <ref type="bibr" target="#b15">[16]</ref>. This useful technique is commonly known as ambient occlusion and it is used in many production environments to add an approximation of the shadowing of diffuse objects lit with environment lighting. For example, ambient occlusion is precomputed in the interactive visualization system described in <ref type="bibr" target="#b1">[2]</ref>.</p><p>Variants of the ambient occlusion term called obscurance have been introduced in <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b11">12]</ref>, where the authors propose to exponentially weight the occlusion factor according to the distance of the occluders in order to enhance the shadowing effects of near occluding surfaces. In all of the above proposals, the computation of this extended ambient term is performed using a traditional ray-traced approach. In <ref type="bibr" target="#b26">[27]</ref> graphics hardware is exploited to efficiently compute a per vertex ambient occlusion term. They render all geometry as seen from a light source direction into the depth buffer. Then, all vertices are rendered again as a point set. For each vertex an individual hardware based occlusion query is used to find vertices that passed the depth test and which are therefore visible for the considered light source; finally a visibility matrix M is stored per vertex. A similar approach, based on the use of the GPU for the computation of the ambient occlusion term, has been proposed in <ref type="bibr" target="#b21">[22]</ref>, and extended to the computation of a first bounce of the diffuse interreflection of light in <ref type="bibr" target="#b2">[3]</ref>. Our approach for computing the ambient occlusion term is somewhat similar to the above techniques, but it exploits a different parametrization and access strategy for storing the computed results relying on the procedural nature of the molecular datasets; moreover, we add two significant optimizations: one exploiting the structure of molecular shapes, the other extendible to the general case.</p><p>As a final note, 'accessibility' itself is quite an important concept in chemistry: introduced by Lee and Richards <ref type="bibr" target="#b17">[18]</ref> it is used to determine which parts of a given molecule are accessible to (the spherical atoms of) another molecule. Note that this paper does not discuss the direct visualization of this chemical property but focuses on the improvements on 3D shape perception triggered by (approximate) non-local shading models and other illustrative rendering techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Ambient Occlusion Definitions</head><p>Let us consider a point p on the surface with surface normal n p . According to <ref type="bibr" target="#b14">[15]</ref> we can define the irradiance, E, arriving at p as:</p><formula xml:id="formula_0">E(p) = Ω n p • ωL(ω)dω (1)</formula><p>where L(ω) is a scalar with magnitude equal to the radiance arriving from direction ω, and Ω is the set of directions above the surface, i.e. the direction for which n p • ω &gt; 0. This can be approximately evaluated by discretizing the domain Ω into k sectors ω i with a possibly uniform solid angle measure |ω i |, and, for each sector, evaluating the radiance L only for a sample direction ω i :</p><formula xml:id="formula_1">E(p) = k ∑ i=1 n p • ω i L(ω i )|ω i | (2)</formula><p>The above equation becomes simpler if we consider a uniform lighting environment (where light comes uniformly from every direction, as under a cloudy sky). In this case, if we discard diffuse interreflection effects and therefore we take into account only direct lighting, L(ω) can be substituted by a simple binary function O(ω) valued 0 if the ray shoot from p along ω intersects our surface (and therefore the light coming from the sky is obscured) and 1 otherwise. The result can be considered a simple first order approximation of the whole rendering equation.</p><p>With the assumption of a uniform sampling of the ω directions,</p><formula xml:id="formula_2">E(p) = 1 4π k ∑ i=1 n p • ω i O(ω i )<label>(3)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">EFFICIENT RENDERING OF BALL AND STICK AND SPACE FILL</head><p>In our scenario the scene is composed by two simple types of primitives: cylinders (side area only) and spheres. We use 2D impostors for both primitives. One impostor is dedicated to each occurrence of cylinder or sphere in the scene, and it is rendered as a 2D rectangular quad in the viewing plane which encapsulates the projection of the primitive it stands for (see <ref type="figure" target="#fig_2">Fig. 5</ref>).</p><p>The rationale is that impostors can be made much more renderingefficient than a triangular tessellations, both during pre-computation of global illumination and in the final rendering. This is critical because we need to target large (&gt; 50k atoms) organic molecules as well. This is also memory-efficient, as the surface of the molecule is succinctly defined in an implicit way. The result is visually better, as the triangle tessellations are just linear approximations bound to produce shading and intersection artifacts.</p><p>Another advantage of the impostor approach is that, working on image space, a number of rendering effects (in particular border-oriented ones) become straightforward and computation-friendly (see Sec. 5).</p><p>However, this approach poses the problem of how to store a signal, defined over the implicit surface, to record the precomputed ambient occlusion terms. This problem is addressed in Sec. 3.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Procedural impostors</head><p>We need our impostors to be z-, normal-, αand u, v-mapped. For a given view, each 2D point q inside an impostor represents a 3D point p on the primitive P (the point visible through it), and has the following attributes:</p><p>• the Boolean membership of q inside the projection of P -in order to discard the corresponding fragment otherwise;</p><p>• the normal p n of p -in order to apply direct illumination;</p><p>• the depth z of the fragment -in order to correctly compute the intersections between primitives, and also to compute shadowmaps;</p><p>• the texture position u, v for the corresponding visible 3D point on the primitive -in order to access any attribute previously stored for p.</p><p>The last point is crucial, because we need to store per-position information for our primitives (in particular, a value for ambient occlusion, see Sec. 4). In practice we are resorting to a global 2D parameterization of the entire surface of the molecule, intended as the set of the surfaces of all its primitives (see Sec. <ref type="bibr" target="#b2">3</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.3).</head><p>A solution could be to store the listed attributes in a set of fixed textures accessed for each fragment. This could impact performance because of the additional texture bandwidth consumption, and would cause aliasing problems (especially around borders, as presence of semitransparent interpolated texels makes the rendering sortdependent). On the contrary, our impostors are procedural, meaning that all attributes are synthesized on the fly. This greatly helps aliasing problems, and also improves flexibility and adaptability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">General schema</head><p>For each impostor, we send four vertices with appropriate values.</p><p>A vertex program is dedicated to expand the impostor around the processed primitive, aiming at producing the least number of fragments outside the impostor (but producing all the fragments relative to the front facing part of the primitive). The initial vertex position is projected and the impostor is then expanded in image space.This happens differently for the two primitives (see Sec. 3.3).</p><p>Another objective of the vertex shader is to perform as many precomputations as possible in order to minimize residual per-fragment workload (for this reason we prefer not to use the Point Sprites extension). This general optimization technique is, in our case, particularly fruitful because our impostors represent large, high-level primitives, and the pixel-to-vertex ratio is accordingly larger than usual.</p><p>Constant per-primitive parameters (e.g. base atom color) are passed down unchanged by the vertex program to the fragment processor.</p><p>The fragment program computes and then processes the required fields, including membership, u − v texture position, depth, or lighting (according to need of the current rendering mode and rendering pass). Depending on the rendering technique, the final values are written either in the current screen buffers or in intermediate textures for subsequent passes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Parameterizing the surface of a molecule</head><p>Our visualization algorithm requires a data structure to store the computed ambient occlusion terms. This can be assumed to be a low frequency signal, i.e. to vary smoothly over the surface of the molecule. For the case of atoms, this signal is defined over spheres, so it would be possible to store it, in a conveniently compact way, as a small set of spherical harmonic coefficients <ref type="bibr" target="#b28">[29]</ref> per atom. However compact this representation would be, we choose a direct sampling representation because it is more local in nature and therefore more efficient during rendering: only few samples need to be read and interpolated to reconstruct the signal in a specific location.</p><p>Now we need a way to store a sampling over spheres and cylinders. Since the surfaces are implicit, we resort to a specially formatted texture that is to be coherently accessed during the rendering of the impostors.</p><p>We assign to each instance of sphere or cylinder a unique rectangular (non necessarily squared) patch of texture space. All patches have the same height so that they can be trivially packed in a single global texture. During any rendering that requires texture accesses, the 2D offset of the patch, relative to the origin of the the global texture, is sent as an additional attribute.</p><p>Depending on the size of the molecule (number of atoms) the sizes of texture patches vary from as few as 4 to hundreds of texels per side; for example, for a molecule with around 1K atoms 32 × 32 patches can be packed in a 1024 × 1024 texture, while the surface of up to 64K atoms can be sampled into 4 × 4 large patches of a 1024 × 1024 texture (when many atoms are present, the radius of the molecule is probably very large as well, reducing atom average screen size and which means that fewer texels per atom will suffice).</p><p>For both kinds of primitive we define a mapping M between every point on its area and a position inside the corresponding texture patch. The function M needs to be simple, as it will be computed both ways within the fragment shader: during scene rendering, given a point inside the impostor q, we need to compute M(P(q)) = (u, v) to find texture coordinates for current fragment; during ambient occlusion computation (see later in sec 4), we will need to compute M −1 for each fragment. Naturally we seek functions M that exhibit low distortions, so that texture mapping artifacts are minimized.</p><p>We use one of two alternative parametrization schemas M s1 and M s2 for spheres, and one schema M c for cylinders.</p><p>Spheres: parameterization The mapping M s1 is a gnomonic projection over a cube, followed by packing of its 6 faces in a rectangular patch with a 2 × 3 aspect ratio. Following <ref type="bibr" target="#b23">[24]</ref>, M s2 is a gnomonic projection over an octahedron, which is unfolded into a square. The mapping M s2 and its inverse are easier to compute, taking fewer operations in the fragment shader (in our implementation, 9 ARB low level fragment operation instead of 16), whereas M s1 presents a minor stretch energy ( <ref type="bibr" target="#b23">[24]</ref>). Another advantage of M s2 over M s1 is that it requires less duplicated texels (see later in Sec 3.5), so no choice fully dominates the other. This choice is orthogonal with the rest of any of the algorithm discussed here.</p><p>M s1 and its inverse are well known. We report the exact version that we use for M s2 , that goes from the surface the unit, origin centered sphere to the patch parameterized as the square [−1.. + 1] 2 (we will use a GPU friendly formulation, with the fewest possible cases): <ref type="figure">Fig. 2</ref>. Applying a small 2D texture map over a sphere impostor, using a 10 × 10 octahedron mapping M s2 . In order to show the behavior of M s2 the virtual sphere (impostor) is rotated from left to right by 180 o . For illustration purposes bilinear interpolation is disabled and random values are assigned to texels, so that they are clearly visible. Duplicated texels are assigned to the same color (see later). Refer to <ref type="figure">fig. 6</ref> to see the used 2D texture.</p><formula xml:id="formula_3">M s2 (x, y, z) = ( x d , y d ) if z ≤ 0 , (sign(x)(1 − |y| d ), sign(y)(1 − |x| d )) if z &gt; 0 (4)</formula><p>where d = |x| + |y| + |z|. The inverse, up to a normalization, is:</p><formula xml:id="formula_4">M −1 s2 (u, v) = (u, v, h) if h ≥ 0 , (sign(u)(1 − |v|), sign(u)(1 − |v|), h) if h &lt; 0 (5) where h = 1 − |u| − |v|</formula><p>Note that the mapping M s1 , being gnomonic, does not need its argument to be normalized prior to use.</p><p>Spheres: impostors (see <ref type="figure">Fig. 2</ref>). Four vertices are sent at the position of the sphere center, distinguished by the value of a special attribute (s,t) assigned respectively to (±1, ±1) to designate each vertex to one different corner of the impostor quad.</p><p>Each vertex is displaced in screen coordinates after projection to produce a screen aligned quad. The displacement is given by (s</p><formula xml:id="formula_5">• r • S g ,t • r • S g , ),</formula><p>where r is the radius of the sphere (passed as an attribute) and S g is the global scale factor, extracted once per frame from the current view matrix (as the cubic root of its determinant) and stored in a environment parameter.</p><p>Interpolated values for s and t are passed down to the rasterizer, so each fragment inside the screen quad is produced with an assigned relative position (s,t) ∈ [−1.. + 1] 2 . We call this 2D space impostor space. Fragments with |(s,t)| &gt; 1 are immediately discarded. For every surviving fragment, the original z value is decreased by (1 − |(s,t)|) * r and its normal in screen space is assigned to n = (s,t, (1 − |(s,t)|)). The normal is then transformed in object space with n ′ = A −1 MV (n) (i.e. by a multiplication with the inverse -i.e. the transpose -of the current model-view matrix), and the result is fed to the chosen mapping (u, v) = M s (n ′ ). Texture is fetched at the position (u, v) plus the offset for the current patch.</p><p>Cylinders: parametrization Let us consider the normalized, zaxis aligned cylinder centered in the origin defined as the set of points {(x, y, z)|x 2 + y</p><formula xml:id="formula_6">2 = 1, x ∈ [−1.. + 1]}.</formula><p>The side area of cylinders is developable, so it would be naturally parameterizedwith the zero-stretch parametrization M(x, y, z) = (atan2(x, y)/π, z).</p><p>However computing it in the fragment shader (either direction) would be very demanding, since it requires trigonometric functions (direct and inverse) which are not supported in the typical GPU. These functions could be either approximated (e.g. with Taylor formulas), which is time consuming, or sampled from a 1D texture, which requires additional texture accesses. We prefer a cheaper alternative, consisting in the adoption of a simplified mapping M c , which is a projection over a square-based prism and is defined by:</p><formula xml:id="formula_7">M c (x, y, z) = ( y 2(|x|+|y|) − 0.5, z) if x ≥ 0 , −( y 2(|x|+|y|) + 0.5, z) if x &lt; 0 (6)</formula><p>Note: the prism sides are defined on the |x| ± |y| = ±1 planes rather than the |x| = ±1 and |y| = ±1 to simplify the number of cases; this, of course, does not affect the quality of the parametrization. The inverse, up to a re-normalization of first two components of the result, is given by:  Cylinders: impostors (see <ref type="figure" target="#fig_0">fig.3</ref>) To draw a cylinder impostor we send two pairs of vertices, each located at either end of the axis of the cylinder. After projection the points are displaced in a direction parallel to the image plane and orthogonal to the cylinder axis, to form a rectangular quad.As before, each vertex is assigned a coordinate (s,t) ∈ (±1, ±1), which will be interpolated for the fragments.</p><formula xml:id="formula_8">M −1 c (u, v) = (1 − |2u − 1|, 2u − 1, v) if u ≥ 0 , (|2u − 1| − 1, 2u − 1, v) if u &lt; 0<label>(7)</label></formula><p>To lift the burden off the fragment program, the vertex program computes a set of (signed) intermediate values which are constant over all the impostors and will be reused by all the fragments. Some of these values are found in cylinder plane, which is defined as the plane embedding the cylinder axis and orthogonal to the viewing plane (see <ref type="figure" target="#fig_1">fig.4</ref>).</p><p>In particular , we compute the values of dz, da and (nx, ny) which are, respectively, the offset in the z direction, the offset in v texture position, and the normal, for a fragment in impostor space at s = 0, i.e. on the projection of the cylinder axis. For all other fragments, these values must be multiplied by (1 − √ s). The normal, in impostor space, will simply be given by (s, nx, nz).</p><p>After adding da, fragments with v lying outside [−1..1] are discarded.</p><p>Another task performed by the vertex shader is to extend the position of the projected vertices also along the axis direction to accommodate for the part of the cylinder extruding from the original impostor space (dotted blue line in <ref type="figure" target="#fig_1">fig. 4</ref>), only for vertices for which da • s is positive. Finally, the vertex shader also computes the offset of the texture position u (the one varying along the diameter of the cylinder). This data consists of an offset angle and is stored and sent to the fragment shader as the unit-length complex number (roti, rotr), because that is a space-and computation-efficient way to store a 2D rotation (we cannot send a single scalar value because of the distortions introduced by the mapping M c ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Patch packing and determination of patch size</head><p>Thanks to the low-frequency nature of the stored signal, we can use a sparse sampling: every visible texel will cover in most cases multiple screen pixels. This means that minification filters are not needed: MIP-mapping is disabled, and so texture patches can be of arbitrary (non power of 2) sizes without causing any artifact. We are free to choose the best fitting patches size, according to the number of patches and available texture size. Consequently unused space (at right and bottom borders of the global texture) is usually small.</p><p>For simplicity we choose to ignore differences in the sizes of atoms, devoting squared patches the same size s p for each one. If sticks are present, we pack two (optionally three) rectangular stick patches into a s p × s p meta-patch. If k is the total number of patches and metapatches, and we plan to use a s t × s t texture, we choose s p simply as ⌊s t /⌈ √ k⌉⌋.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Accessing texture</head><p>Because of the same reason, it is mandatory for us to interpolate between samples. While it would be possible to adopt an ad-hoc texel interpolation schema that accesses several non necessarily adjacent texels, in order to increase performance we prefer to perform a single, standard bilinearly interpolated texture access per fragment (an heavily optimized operation in graphic cards). If this is done without care, discontinuity of M would became visible as discontinuity artifacts in the corresponding parts of the primitive (see <ref type="figure">Fig. 6</ref>). We solve the problem by offsetting all texture coordinates by half a texel and by replicating some of the texel in each patch: <ref type="figure">fig. 6</ref>) shows how the problem is fixed for M s2 ; similar solutions are adopted for M s1 and M c . The amount of texel replication needed by the two sampling is different. With M s1 , a texture patch of size 3n × 2n texels contains (n 3 − (n − 2) 3 ) unique texels out of 6 * n 2 . For M s2 , a n × n texture has n 2 − 2n + 1 unique texels out of n 2 . From this point of view M s2 is therefore advantageous.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">GPU COMPUTATED AMBIENT OCCLUSION</head><p>In order to compute ambient occlusion, we first build a set of directions sampling ω. To make it well distributed, we start with a tetrahedron or octahedron and we subdivide it until the desired number of directions is reached, then we apply a Laplacian smoothing to the set of found directions.</p><p>Similarly to <ref type="bibr" target="#b26">[27]</ref>, we perform a pair of off-screen rendering passes for each direction d i in the set. In the first pass a "shadow-map" is produced rendering the z-buffer of molecule using d i as view direction.</p><p>The next pass is a rendering that writes over the texture for the molecule, and accesses the shadow-map produced in the previous pass. For each primitive we send a quad covering the corresponding texture patch, complete with attributes encoding the position and shape of that primitive. For each produced fragment at position (u, v), we compute p = M −1 (u, v), then we transform p with the same viewing conditions used during the first pass, and comparing the resulting depth with the one extracted from the shadow-map to determine whether p is lit by light coming from d i . If so, the light contribution for d i , according to equation 2, is accumulated at the corresponding pixel/texel through alpha blending.</p><p>Note that replicated texels (see Sec. 6) are dealt with correctly because both copies will be mapped by M −1 in the same 3D position and therefore will produce the same result.  <ref type="figure">6</ref>. The continuity problem when using bilinear interpolation to access texture. In the left column the texture patch is shown in u − v parameter space. The second and third column show a rendering of the impostor, with the sphere rotated to show the most problematic region, which is its "back" part, where the four corners of the texture patch meet. For illustration purposes, in the middle column we use a closest-sample filter; in the right column a standard bilinear-interpolation filter is used. Top row: when the entire surface of the texture patch is used, bilinear interpolation shows discontinuity lines across cuts. To solve this problem, the texture patch is shrunk in texture space by half a texel in every direction (middle row), and in all four sides of the patch texels values are mirrored around the middle of the edge (bottom row). Texture is never accessed at positions outside the outlined square. The resulting impostor is smooth (bottom right). In this case, a total of 81 out of 100 texels are unique.</p><p>Shadow-map computation is particularly undemanding in our case. It is known that shadow-map, in the case of closed blockers, is more robust if the mid-surfaces (half-way between front-facing and backfacing ones) are drawn. In our case (sphere and cylinders), the midsurfaces are flat and can be rendered by simply disabling per-fragment depth displacement during impostor rendering. The fragment programs stops being depth-replacing, and, since shading is disabled as well, reduces to a simple membership test (for spheres) or to a single output operation (for cylinder).</p><p>We add another optimization, which works for general shapes, consisting in the computation of the contributions of two opposed light directions d i and −d i at a time. The two corresponding shadow-maps are drawn side to side into a single texture. In the second pass, each 3D point p can be lit by only one of d i and −d i , according to normal of p (see equation 2), so a single texture access is performed in any case from the appropriate half of the shadow-map. This effectively halves the processing time for the second passes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Applications</head><p>We found that ambient occlusion adds dramatically to the clarity of the molecular rendering, in all visualization modes. This is true for small molecules (few dozens or few hundreds atoms, <ref type="figure" target="#fig_5">fig. 8</ref>), for medium molecules (few thousands atoms, <ref type="figure" target="#fig_5">fig. 8</ref>), and even more so for larger ones (several tenths of thousands of atoms, <ref type="figure" target="#fig_4">fig. 7</ref>). In the last case, standard direct shading alone, even when enhanced with depth cueing and shadows, can fail to produce an intelligible still image, while the 3D structure becomes evident when ambient occlusion is used, even without any other contribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">FURTHER ENHANCING VISUAL QUALITY</head><p>There are a number of visual effects that are easy to add in our impostor-based framework.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Depth aware contour lines</head><p>Since we work in image space, contour lines can be easily added.</p><p>The first effect consists in drawing a solid line around each primitive. Since these lines do not affect the depth value of fragments, they naturally disappear at the intersections of atoms, ad occur only to separate actually detached atoms, boosting the clarity of rendered images (see <ref type="figure" target="#fig_6">fig. 9</ref>). Less importantly, the border can help to tell the difference between larger vs. just nearer atoms when perspective views are used.</p><p>To achieve solid lines, fragments detected to be just outside the range R of the impostor (namely with a distance d from the center with d between R and R + ξ , for a given parameter ξ ) are overwritten with black color rather then discarded. The internal border of the lines can be interpolated between line color and color of the primitive (using (d − R)/ξ as weight) to eliminate pixel aliasing on the internal part of the contour.</p><p>For a more informative rendering, the thickness of the lines can be made dependent on the jump in depth between the primitives separated by the contour line (see <ref type="figure" target="#fig_6">fig. 9</ref>). This effect proved useful in illustrative rendering (in the different context of pen-and-ink illustrations of trees) in <ref type="bibr" target="#b6">[7]</ref>.</p><p>In our approach this can be cheaply done in a singlepass rendering: fragments at a 2D distance d between R and R + ξ are pushed back, increasing their depth by the value η(ξ − R).</p><p>This produces a truncated cone topped with a semi-sphere, and the depth buffer ensures the desired effect.</p><p>To explain why, here we see a 2D "side view" of the depth buffer after that atoms A B C are drawn. Depth-culled fragments are shown in green. In the final screen buffer (represented by a line), the black segment separating A and B appears shorter than the one separating B and C, signalling to the viewer that the depth jump between A and B is smaller. The parameter η dictates how strongly depth jumps affect thickness (ξ 2 is the maximal depth jump after which the line thickness stops increasing). Relying solely on the depth buffer, this algorithm is independent of the order of rendering of the primitives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Halo Effect</head><p>The very common way to suggest depth for 2D images (especially useful when they represent unfamiliar objects like molecules) is to resort to depth-cueing, where fragments are darkened -or more generally pushed towards a given background color -according to their depth. This, however, has drawbacks: the vision of the furthest parts of an object is hindered by the artificial "fog", which is bound to reduce contrast. Even worst, this effect is distributed over all the images, also far from difficult to visualize depth steps.</p><p>We propose here to achieve a similar effect, but without unnecessary losing contrast over the entire image: we draw transparent "halos" around each atom. Each point in the halo is more opaque the bigger the distance between it and its background. The halo fades to zero also with the distance from the atom border (see <ref type="figure" target="#fig_7">fig. 10</ref>). Both darkening and lightening halos can be used.</p><p>Not only this helps identifying depth discontinuities, but it also helps when it comes to immediately recognize the general slope of "walls" of atoms (wall slopes cannot be easily identified by direct shading alone because they are composed by primitives). When a wall composed by several atoms is seen from grazing angles, the cumulated effect of their halos communicates so to the viewer.</p><p>A similar use of brightening/darkening halos to improve the perception of depth discontinuities for general scenes was proposed, in a totally independent way, by Luft et al. <ref type="bibr" target="#b18">[19]</ref>.</p><p>In our approach halos are rendered in a second pass, after the depth buffer is set, and stored in a separate texture. Larger circles are drawn around each atom, as flat rendering impostors passing through the atom. In this pass we do not affect the zeta of the produced fragments. Only a color is produced according to z-difference and distance from the center. The depth test is enabled but we do not write on the depth buffer. Every rendered fragment darkens (or brightens when white halos are used) the color of the corresponding screen pixel, in an order independent way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Z-clipping of impostors</head><p>When the near clipping plane cuts through an atom, the top part of the atom is clipped out of view, leaving visible whatever is behind the atom (background, or other intersecting atoms). The effect harms the clarity of the scene because most people intuitively imagine the atom modeled as "full" solid spheres rather than as thin empty shells. To solve this, when a fragment of an impostor (after z computation) is nearer to the eye than the near clipping plane, we test the depth of the other intersection of the current view ray with the sphere (which is trivially found inverting the z displacement). If also this point falls on the viewer's side of the clipping plane than the fragment must be discarded. Otherwise, the fragment is moved onto the clipping plane, its normal is overwritten to (0, 0, −1), to suggest a flat surface of a "cut" atom, and the ambient occlusion term is also set to a full lit value.</p><p>If the new depths of clipped fragments were all set to the same value, the second of two clipped, intersecting primitives would be drawn over the first. To show a plausible intersection inside the atoms, we set the new depth value of capped atoms to to a small positive value dependent on their original computed depth z. We use ε(K + z) for a small ε and a constant K. This way, depth-test correctly computes the intersection (see <ref type="figure" target="#fig_8">Fig. 11</ref>).</p><p>We also lighten the ambient occlusion term for fragments close to the clipping plane, to roughly simulate the temporary culling of lightblocker in front of them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RESULTS</head><p>We presented a set of rendering techniques that, in our opinion, effectively extends the ability to produce real time molecular renderings which clearly communicate 3D shapes. Some of these techniques, like edge-cueing ones, have not been presented before (to our knowledge), whereas the occlusion culling consisted in the adaptation and optimization for the case of impostor-based rendering of a class of methodologies developed for polygonal meshes. These visual effects are not mutually exclusive and are designed to be combined in the same rendering.</p><p>The ambient occlusion computation time is always very short, averaging 233 light directions per second for a medium model of 2219 atoms and around 900K effectively used texels, and 15 views per sec for the largest we tried of around 60K atoms (on a Athlon -2.6 GHz, with an ATI X1600). This means that ambient occlusion can be computed interactively if the application requires it.</p><p>The proposed impostor based rendering approach proved very effective. In our tests the frame-rate kept in sync with the monitor refresh rate in all but the most demanding scenarios (full screen, very large molecules, all effects combined), and it never dropped below 20 frames per sec. The main weakness of our approach lies in the depth complexity. Use of hierarchical depth buffer structures for quick culling of entire primitives could further accelerate the rendering.</p><p>One key advancement proposed here is the ability to combine the flexibility of texture with the efficiency of 2D impostors, admittedly only for the special case of spheres and cylinders. This can probably be exploited in other ways as well.</p><p>A simple, molecule visualization tool that opens PDB files and delivers what is described in this paper is publicly available at the project home-page: http://qutemol.sourceforge.net.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 3 .</head><label>3</label><figDesc>Applying a 8 × 16 texture over a cylinder impostor, using a prism mapping M c . For illustration purposes, bilinear interpolation is disabled, except in the last image, and random color values are assigned to texels. Duplicated texels are assigned to the same color.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 4 .</head><label>4</label><figDesc>Processing for the corners of cylinder impostors. See text.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 5 .</head><label>5</label><figDesc>Rendering a molecule with impostors. Top left: the actual impostors used are shown as wireframed quads. Cylinders impostors are parallel to the projection of their axis, and ball impostors are screen aligned. Top right: cylindrical impostors have been processed. Bottom: ball impostors have been projected. Intersections between primitives are correctly computed via the zeta-buffer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig.</head><label></label><figDesc>Fig. 6. The continuity problem when using bilinear interpolation to access texture. In the left column the texture patch is shown in u − v parameter space. The second and third column show a rendering of the impostor, with the sphere rotated to show the most problematic region, which is its "back" part, where the four corners of the texture patch meet. For illustration purposes, in the middle column we use a closest-sample filter; in the right column a standard bilinear-interpolation filter is used. Top row: when the entire surface of the texture patch is used, bilinear interpolation shows discontinuity lines across cuts. To solve this problem, the texture patch is shrunk in texture space by half a texel in every direction (middle row), and in all four sides of the patch texels values are mirrored around the middle of the edge (bottom row). Texture is never accessed at positions outside the outlined square. The resulting impostor is smooth (bottom right). In this case, a total of 81 out of 100 texels are unique.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 7 .</head><label>7</label><figDesc>Example of the efficacy of Ambient Occlusion to deliver impression of 3D shape in still images for large molecules. A molecule of 1AON (model taken from<ref type="bibr" target="#b0">[1]</ref>), consisting of 58688 atoms is shown with (from top left, in Z order): standard direct lighting, direct lighting with depth cueing, direct lighting with cast shadows and depth cueing, and Ambient Occlusion alone. The last image uses a 1024 × 1024 texture with 4 × 4 sized octahedron based patches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Other comparisons between direct illumination (left) and ambient occlusion (right) for small (above) and medium (below) molecules. Above: testosterone (49 atoms) and, below, porin (2219 atoms). Models taken from<ref type="bibr" target="#b0">[1]</ref>.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>Above, left: a rendering with constant width, anti-aliased lines. Above, right: thinker, depth aware lines. Bottom (for comparisons): direct illumination, cast shadows, Ambient occlusion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .</head><label>10</label><figDesc>Halos drawn around molecules to communicate a sense of depth. Left: for illustrative purposes, black halos alone are drawn. Right: a dimly lit rendering combined with white halos.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 11 .</head><label>11</label><figDesc>A detail of a rendering showing a molecule cut by the near clipping plane.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We wish to thank Enrico Gobbetti and Mario Valle for insightful discussions, on importance of high quality shading in the three dimensional perception of complex shapes in space and Monica Zoppè for having introduced us to the field of Molecular Visualization.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The protein data bank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Westbrook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">N</forename><surname>Gilliland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bhat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Weissig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">N</forename><surname>Shindyalov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Bourne</surname></persName>
		</author>
		<ptr target="http://www.pdb.org" />
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Res</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page">235242</biblScope>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An easy to use visualization system for huge cultural heritage meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Borgo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VAST 2001 Conference Proc</title>
		<editor>D. Arnold, A. Chalmers, and D. Fellner</editor>
		<meeting><address><addrLine>Athens, Greece</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Siggraph</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="121" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">GPU Gems 2, chapter Dynamic Ambient Occlusion and Indirect Lighting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Bunnell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Addison-Wesley</publisher>
			<biblScope unit="page" from="223" to="233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Fpv: fast protein visualization using java 3d</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tolga</forename><surname>Can</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yujun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan-Fang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianwen</forename><surname>Su</surname></persName>
		</author>
		<ptr target="http://www.pdb.org" />
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="913" to="922" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Uscf Chimera</surname></persName>
		</author>
		<ptr target="http://www.cgl.ucsf.edu/chimera/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<ptr target="http://ncbi.nih.gov/structure/cn3d/cn3d.shtml" />
		<title level="m">Cn3D</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Computer-generated pen-and-ink illustration of trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Deussen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Strothotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="13" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Volume illustration: nonphotorealistic rendering of volume models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">S</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Penny</forename><surname>Rheingans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="195" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Interactive technical illustration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><surname>Gooch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Peter-Pike</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amy</forename><surname>Sloan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Gooch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">F</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Riesenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SI3D</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="31" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Biobrowser a framework for fast protein visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Halm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lars</forename><surname>Offen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dieter</forename><surname>Fellner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROVIS 2005: Eurographics / IEEE VGTC Symposium on Visualization</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="287" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Visualization of complex molecular ribbon structures at interactive rates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Halm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lars</forename><surname>Offen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dieter</forename><forename type="middle">W</forename><surname>Fellner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IV</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="737" to="744" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fast, realistic lighting for video games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrey</forename><surname>Iones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anton</forename><surname>Krupkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mateu</forename><surname>Sbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergey</forename><surname>Zhukov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="54" to="64" />
			<date type="published" when="2003-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A developer&apos;s guide to silhouette algorithms for polygonal models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tobias</forename><surname>Isenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bert</forename><surname>Freudenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Halper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Schlechtweg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Strothotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="28" to="37" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">3D Illustrative Effects for Animating Line Drawings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tobias</forename><surname>Isenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maic</forename><surname>Masuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Strothotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Info-Vis</title>
		<meeting>the IEEE Info-Vis<address><addrLine>London, England; Los Alamitos, California</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="413" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The rendering equation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">T</forename><surname>Kajiya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics (SIG-GRAPH)</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="143" to="150" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Production ready global illumination</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hayden</forename><surname>Landis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Siggraph 2002 Course Notes</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="331" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Perception of shape from shading on a cloudy day</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heinrich</forename><forename type="middle">H</forename><surname>Langer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bulthoff</surname></persName>
		</author>
		<idno>No. 73</idno>
		<imprint>
			<date type="published" when="1999-10" />
		</imprint>
		<respStmt>
			<orgName>Max-Planck-Institut fur biologische Kybernetik</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report Technical Report</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The interpretation of protein structures: estimation of static accessibility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><forename type="middle">M</forename><surname>Richards</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Mol Biol</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="379" to="400" />
			<date type="published" when="1971-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Image enhancement by unsharp masking the depth buffer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Luft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Colditz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Deussen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics (Siggraph Proc.)</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2006-07" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Real-time nonphotorealistic rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename><surname>Markosian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">A</forename><surname>Kowalski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Goldstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><forename type="middle">J</forename><surname>Trychin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">F</forename><surname>Hughes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lubomir</forename><forename type="middle">D</forename><surname>Bourdev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="415" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Efficient algorithms for local and global accessibility shading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gavin</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH &apos;94</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="319" to="326" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">GPU Gems, chapter Ambient occlusion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Pharr</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Addison-Wesley</publisher>
			<biblScope unit="page">667692</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Illumination for computer generated pictures. Commun</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phong</forename><surname>Bui Tuong</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975" />
			<publisher>ACM</publisher>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="311" to="317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Spherical parametrization and remeshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emil</forename><surname>Praun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="340" to="349" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Image precision silhouette edges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramesh</forename><surname>Raskar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SI3D</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="135" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Comprehensible rendering of 3-d shapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takafumi</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tokiichiro</forename><surname>Takahashi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="197" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Hardware-accelerated ambient occlusion computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mirko</forename><surname>Sattler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf</forename><surname>Sarlette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gabriel</forename><surname>Zachmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reinhard</forename><surname>Klein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VMV</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="331" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Rasmol: biomolecular graphics for all</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Sayle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Milner-White</surname></persName>
		</author>
		<ptr target="http://www.umass.edu/microbio/rasmol/" />
	</analytic>
	<monogr>
		<title level="j">Trends Biochem. Sci</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page">374376</biblScope>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Precomputed radiance transfer for real-time rendering in dynamic, low-frequency lighting environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter-Pike</forename><surname>Sloan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Kautz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Snyder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 2002</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="527" to="536" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Vicinity shading for enhanced perception of volumetric data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">James</forename><surname>Stewart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization 2003 (VIS&apos;03)</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page">47</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Illustrative visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Viola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Eduard</forename><surname>Gröller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Hadwiger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katja</forename><surname>Bühler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Preim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><forename type="middle">Costa</forename><surname>Sousa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">S</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Don</forename><surname>Stredney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page">124</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">An ambient light illumination model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergej</forename><surname>Zhukov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrej</forename><surname>Inoes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grigorij</forename><surname>Kronin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Rendering Techniques &apos;98, Eurographics</title>
		<editor>George Drettakis and Nelson Max</editor>
		<meeting><address><addrLine>Wien New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="45" to="56" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
