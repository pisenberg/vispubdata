<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Practical Approach to Morse-Smale Complex Computation: Scalability and Generality</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Peer-Timo</roleName><forename type="first">Attila</forename><surname>Gyulassy</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Bernd</forename><surname>Bremer</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Valerio</forename><surname>Hamann</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><surname>Pascucci</surname></persName>
						</author>
						<title level="a" type="main">A Practical Approach to Morse-Smale Complex Computation: Scalability and Generality</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Topology-based analysis</term>
					<term>Morse-Smale complex</term>
					<term>large scale data</term>
				</keywords>
			</textClass>
			<abstract>
				<p>The Morse-Smale (MS) complex has proven to be a useful tool in extracting and visualizing features from scalar-valued data. However, efficient computation of the MS complex for large scale data remains a challenging problem. We describe a new algorithm and easily extensible framework for computing MS complexes for large scale data of any dimension where scalar values are given at the vertices of a closure-finite and weak topology (CW) complex, therefore enabling computation on a wide variety of meshes such as regular grids, simplicial meshes, and adaptive multiresolution (AMR) meshes. A new divide-and-conquer strategy allows for memory-efficient computation of the MS complex and simplification on-the-fly to control the size of the output. In addition to being able to handle various data formats, the framework supports implementation-specific optimizations, for example, for regular data. We present the complete characterization of critical point cancellations in all dimensions. This technique enables the topology based analysis of large data on off-the-shelf computers. In particular we demonstrate the first full computation of the MS complex for a 1 billion/1024 3 node grid on a laptop computer with 2Gb memory.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Scientific data is becoming increasingly complex, and sophisticated techniques are required for its effective analysis and visualization. Additionally, data size increases accordingly with the size of memory, therefore analysis techniques must also be scalable. Topology-based visualization has become a useful technique in extracting features for a wide range applications, primarily due to its ability to simplify features in a controlled manner. The MS complex is a structure that represents the gradient flow behavior and completely encapsulates the topology of level sets of a scalar function. It has been shown to be effective in identifying, ordering, and selectively removing features. Computing a combinatorially correct MS complex is very challenging, and previous algorithms are memory-intensive and computationally expensive, restricting their use to smaller datasets.</p><p>We present a new algorithm for constructing a consistent MS complex: a framework which utilizes a divide-and-conquer strategy for dealing with large scale data in a variety of data formats and of any dimension. The kernel of our algorithm computes the discrete gradient on a parcel of the input data, generates an MS complex from the gradient on the parcel, and then merges the MS complexes together across the boundaries of the parcels. We use the discrete formulation of Morse theory as opposed to the continuous formulation for two reasons: it is simpler to implement because there are no special cases when dealing with higher dimensional components of the MS complex; and it makes it possible to fix the gradient flow on the boundary of parcels to enable a stratified approach. The discrete gradient and MS complex are computed independently on each parcel, and only the MS complex and gradient on the boundary of the parcel are necessary to merge parcels. We can control the size of the parcels and size of the MS complex through simplification to obtain a memory-efficient algorithm. We resolve degeneracies in the scalar function, such as flat regions and multi-saddles, in a consistent manner and construct the discrete gradient field and associated MS complex to agree with the scalar flow wherever possible. We characterize cancellation operations for MS complexes of any dimensions. We present the algorithm in a framework that makes it possible to implement multiple data formats by means of simple query functions, and also permits format-specific optimizations, for example, for regular grids. We show that this approach is comparable in performance to the fastest previous algorithm, but applicable to significantly larger data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Related work</head><p>Often, features in a scalar field correspond to topological changes in the isosurface during a sweep of the domain. The life-cycle of a topological feature during this sweep is indicated by a pair of critical points, one indicating the creation of the feature and the other the feature's destruction. Topology-aware methods have proven to be effective in controlled simplification of scalar functions and hence in the creation of multiresolution representations. As opposed to geometry simplification using mesh decimation operators like edge contraction <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b29">30]</ref>, which result in unpredictable simplification of topological features, topology-aware methods either monitor changes to the topology <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b12">13]</ref> or explicitly compute the topological features and perform necessary geometric operations to remove small features.</p><p>The Reeb graph <ref type="bibr" target="#b25">[26]</ref> traces components of isosurfaces (or contours) as one sweeps through the allowed range of isovalues. In the case of simply connected domains, the Reeb graph has no cycles and is called a contour tree. Reeb graphs, contour trees, and their variants have been used successfully to guide the removal of topological features <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b2">3]</ref>. Of particular note is the approach by Pascucci et al. <ref type="bibr" target="#b23">[24]</ref>, which shows how the Reeb graph can be constructed in a streaming manner for large datasets. Reeb graphs and contour trees have been used to trace the construction, merging, and destruction of isosurface components. The MS complex, however, is a more complete description, since it also detects genus changes in isosurfaces.</p><p>Partitions of surfaces induced by a piecewise-linear function have been studied in different fields, under different names, motivated by the need for an efficient data structure to store surface features. Cayley <ref type="bibr" target="#b4">[5]</ref> and Maxwell <ref type="bibr" target="#b21">[22]</ref> proposed a subdivision of surfaces using peaks, pits, and saddles along with curves between them. The development of various data structures for representing topographical features was discussed by Rana <ref type="bibr" target="#b24">[25]</ref>.</p><p>The MS complex is a topological data structure that provides an abstract representation of the gradient flow behavior of a scalar field <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b27">28]</ref>. Edelsbrunner et al. <ref type="bibr" target="#b8">[9]</ref> defined the MS complex for piecewise-linear 2-manifolds by considering the PL function as the limit of a series of smooth functions and used this intuition to transfer ideas from the smooth case. They also provided an efficient algorithm to compute the MS complex, restricted to edges of the input triangulation, and to build a hierarchical representation by repeated cancellation of pairs of critical points.</p><p>Bremer et al. <ref type="bibr" target="#b1">[2]</ref> improved on the algorithm and described a multiresolution representation of the scalar field. Both algorithms trace paths of steepest ascent and descent beginning at saddle points. These paths constitute boundaries of 2D cells of the MS complex. Cells in the MS complex of a 3D scalar field can be of dimension 0, 1, 2, or 3. Tracing boundaries of the 3D cells while maintaining a combinatorial valid complex is a non-trivial task and a practical implementation of such an algorithm remains a challenge <ref type="bibr" target="#b7">[8]</ref>. Nevertheless, the MS complex has been computed for volumetric data and successfully used to identify features through repeated application of atomic cancellation operations <ref type="bibr" target="#b14">[15]</ref>. Computation of the complex in this manner requires a preprocessing step that subdivides every voxel by inserting "dummy" critical points, and therefore has a large computational overhead. This approach was improved by using a sweeping plane <ref type="bibr" target="#b15">[16]</ref>, but data size and computational overhead still proved to be a limiting factor. An algorithm based on region-growing <ref type="bibr" target="#b16">[17]</ref> similar to the watershed transform <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b0">1]</ref> was introduced for simplicial meshes of three dimensions, with a tenfold improvement in efficiency, however, the need to store several fields at each cell of the input, and the requirement to represent the entire output explicitly limits the scalability of this approach. In each of these approaches, the MS complex computed is consistent, meaning that the structure of the complex is combinatorially correct. Degenerecies in the data are overcome by consistent combinatorial decisions, resulting in MS complexes that reflect a particular interpretation of the input.</p><p>In our approach, we utilize discrete Morse theory as presented by Forman <ref type="bibr" target="#b9">[10]</ref>. Lewiner et al. <ref type="bibr" target="#b20">[21]</ref> showed how a discrete gradient field can be constructed and used to identify the MS complex, however, this construction requires modification of the input mesh and an explicit representation of gradient paths, restricting the applicability of the method. King et al. <ref type="bibr" target="#b18">[19]</ref> presented a method for constructing a discrete gradient field that agrees with the large-scale flow behavior of the data defined at vertices of the input mesh. All of these algorithms for constructing the MS complex have a critical shortcoming: they require processing of the entire dataset and a representation of the complex at the finest level of detail before any simplification can be done. In practice, this imposes limits on both the size, and the complexity of the data that can be handled.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Contributions</head><p>We present the following new contributions:</p><p>• a complete characterization of cancellations of critical points of an MS complex of any dimensions in terms of how the cancellation affects the 1-skeleton and cells of the complex;</p><p>• a new algorithm for computing the discrete gradient field associated with a function with discrete samples at vertices of a mesh;</p><p>• a memory-efficient divide-and-conquer approach for constructing MS complexes, which computes portions of the complex independently and "glues" them back together; and</p><p>• a simple framework that supports large data of many formats and of any dimensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND</head><p>Morse theory has been well-studied in the context of smooth scalar functions. However, scientific data is often presented as a set of discrete samples over a domain, often also involving a volumetric grid or a tetrahedralization, which necessitates an adaptation of the smooth theory. Discrete Morse theory is a parallel theory which is specially designed to operate on meshes. are the minimum and maximum respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Morse Functions and the Morse-Smale Complex</head><p>A real-valued smooth map f : Each critical point of index n is the origin of a set of integral lines that forms an ascending d − n-manifold. Symmetrically, it is the destination of a set of integral lines that forms a descending n-manifold. All ascending and descending manifolds of a Morse-Smale function intersect transversally. Therefore, given two critical points a and b, where the index of a is one less than the index of b, the intersection of the ascending manifold of a and the descending manifold of b is either empty or a 1-manifold. The critical points and these 1-manifolds are called nodes and arcs. The one-skeleton formed by the nodes and arcs forms the combinatorial structure of the MS complex. The combinatorial structure contains much of the semantic information of f , and is useful for simplification and feature identification. The neighborhood of a node a of an MS complex Γ is the set of nodes N a that are connected to a by an arc in Γ.</p><formula xml:id="formula_0">M → R defined</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Discrete Morse Theory</head><p>The discrete Morse theory introduced by Forman <ref type="bibr" target="#b9">[10]</ref>, is a parallel theory to smooth Morse theory, and shows how to apply principles from smooth theory to the discrete setting. We present some basic definitions from discrete Morse theory. A d-cell is a topological space that is homeomorphic to a d-ball B d = {x ∈ E d : |x| ≤ 1}. For cells α and β , α &lt; β means that α is a face of β and β is a co-face of α, i.e., the vertices of α are a proper subset of the vertices of β . If dim(α) = dim(β ) − 1, we say α is a facet of β , and β is a co-facet of α. A cell α has dimension d, and we denote this as α <ref type="bibr">(d)</ref> .</p><p>A finite CW-complex is a topological space X such that there exists a finite-nested sequence</p><formula xml:id="formula_1">/ 0 ⊂ X 0 ⊂ X 1 ⊂ • • • ⊂ X n = X</formula><p>such that for each i = 0, 1, 2, ... , n, X i is the result of attaching a cell to X (i−1) . A regular CW complex is a finite CW-complex, where any two incident cells ρ and τ with dim(τ) = dim(ρ) − 2, there are exactly two cells σ 1 and σ 2 such that τ &lt; σ 1 &lt; ρ and τ &lt; σ 2 &lt; ρ. This requirement imposes restrictions on the attaching map, forcing  <ref type="figure">Fig. 2</ref>. The circled arc connects a saddle l to a maximum u (a). Cancellation of (l,u) removes all arcs attached to l or u, and creates new arcs from the lower neighbors of u to the upper neighbors of l (b). In the two-dimensional case, this connects all the saddles neighboring u to the maximum neighboring l, in effect, merging l and u with the maximum).</p><p>the entire boundary of an attached cell to be glued to the topological space, and restricting the boundary of a d-cell to be homeomorphic to a (d − 1)-sphere.</p><p>Let K be a regular complex that is a mesh representation of M. A function f : K → R that assigns scalar values to every cell of K is a discrete Morse function if for every α (d) ∈ K, its number of co-faces |{β (d+1) &gt; α| f (β ) ≤ f (α)}| ≤ 1, and its number of faces <ref type="figure" target="#fig_0">Figure 1</ref> illustrates these configurations.</p><formula xml:id="formula_2">|{γ (d−1) &lt; α| f (γ) ≥ f (α)}| ≤ 1. A cell α (d) is critical if its number of co-faces |{β (d+1) &gt; α| f (β ) ≤ f (α)}| = 0 and its number of faces |{γ (d−1) &lt; α| f (γ) ≥ f (α)}| = 0.</formula><p>A vector in the discrete sense is a pair of cells {α (d) &lt; β (d+1) }, where we say that an arrow points from</p><formula xml:id="formula_3">α (d) to β (d+1) . Intuitively, this simulates a direction of flow. A discrete vector field V on K is a collection of pairs {α (d) &lt; β (d+1) } of cells of K such that each cell is in at most one pair of V .</formula><p>Given a discrete vector field V on K, a V -path is a sequence of cells</p><formula xml:id="formula_4">α (d) 0 , β (d+1) 0 , α (d) 1 , β (d+1) 1 , α (d) 2 , . . . , β (d+1) r , α (d) r+1</formula><p>such that for each i = 0,..., r, the pair</p><formula xml:id="formula_5">{α (d) &lt; β (d+1) } ∈ V , and {β (d+1) i &gt; α (d) i+1 = α (d) i }. A V</formula><p>-path is the discrete equivalent of a streamline in a smooth vector field. A discrete vector field in which all V -paths are monotonic and do not contain any loops is a discrete gradient field. We will use V -paths to compute the MS complex of a discrete gradient field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Persistence-based Simplification</head><p>A function f is simplified by repeated cancellation of pairs of critical points. The local change in the MS complex indicates the smoothening of the gradient vector field and hence of the function f . The ordering of critical point pairs is defined by persistence, which quantifies the importance of the topological feature associated with a pair. The persistence of a critical point pair is the absolute difference in value of f between the two points. We use the ordering given by persistence to reduce the number of critical points and hence remove topological features from f . A cancellation operation is valid (i.e., it can be realized by a local perturbation of the gradient vector field) on a pair of critical points if and only if there is exactly one arc connecting them in the complex. Therefore, the indices of the two critical points must differ by one. Also, any critical point pair that is connected by multiple arcs represents a configuration known as a strangulation or a pouch, for which there is no direct perturbation of the gradient that removes the critical point pair.</p><p>We characterize the cancellation operation for MS complexes of any dimensions in terms of a change in the combinatorial structure of the complex. The geometric change in the manifolds of critical points can be derived from this combinatorial change.</p><p>Cancellation: Let Γ be an MS complex for a scalar function defined on a closed d-manifold M. Let l and u be the lower and upper nodes of an arc a in Γ, with index i and i + 1 respectively. Let A l be the set of arcs that have l as one end point, A u the set of arcs that have u as one end point, N l the set of nodes in the neighborhood of l, and N u the set of nodes in the neighborhood of u.</p><p>The combinatorial cancellation of (l, u) changes the combinatorial structure of the MS complex and is characterized as follows:</p><p>1. Create a new arc connecting every critical point of index i + 1 in N l to every critical point of index i in N u , and add them to Γ. 2. All arcs in A l , A u are removed from the complex, and l and u are also removed from the complex.</p><p>This operation changes the 1-skeleton of the MS complex, however, it also represents a change in the embedding. This change can be derived from the combinatorial cancellation, and one simple way to maintain a valid embedding is to characterize it as a merging of the manifolds of the nodes involved in the cancellation. We call the change in the embedding the geometric realization of the cancellation and it is characterized as follows:</p><p>1. For every node of index i + 1 in N l , merge its descending manifold with the descending manifold of u. 2. For every node of index i in N u , merge its ascending manifold with the ascending manifold of l.</p><p>The cells of Γ after the cancellation are only different where there are new intersections of the changed ascending and descending manifolds. These intersections are represented by the new arcs in the combinatorial structure of the MS complex. Although there are potentially |N l | × |N u | new arcs and cells created in the complex, the number of nodes in the complex is reduced by two, and eventually all the new arcs are also removed in saddle-extremum cancellations. <ref type="figure">Figure 2</ref> illustrates this cancellation operation in the case of two-dimensional complexes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ALGORITHM</head><p>OVERVIEW: Our algorithm for computing the MS complex relies on a divide-and-conquer approach. <ref type="figure" target="#fig_3">Figure 3</ref> shows an overview of the algorithm. The divide-and-conquer approach divides the dataset into parcels where the discrete gradient and MS complex are computed locally on the boundary and in the interior. The boundary flow is fixed such that any flow passing through the boundary must pass through critical points restricted to the boundary. When two parcels are merged, the gradient and MS complex on the new interior is updated. In particular, the steps in this process are the following: the dataset is split into parcels, and cells are classified as interior, boundary, or exterior; the discrete gradient is computed on the boundary and interior of each parcel, and then an MS complex is computed on the interior of each parcel; the parcels are glued back together, merging the MS complexes; and finally, the artifacts introduced by the merging are removed by cancellation of the ε-persistence pairs of the MS complex. We describe each step in detail in the following.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Splitting and Classifying</head><p>A dataset may be given in any number of formats. It is partitioned into parcels during a pre-processing stage. Each parcel is a set of cells with certain attributes, which will be discussed in section 4.1. Logically, a parcel P is a collection of spatially coherent cells which form a regular CW complex, and is a subset of the input complex, P ⊆ K. The complex P has scalar values defined at its vertices.</p><p>The cells of a parcel P are categorized as interior, exterior, or boundary according to the following conditions:</p><p>1. A cell in P with all its faces and co-faces also in P is considered interior to P. 2. A cell with one or more of its faces in K − P is considered exterior to P. 3. A cell with a co-face in K − P or exterior to P is considered boundary.</p><p>The boundary cells form a closed manifold of dimension less than d for any input mesh P, where the highest dimension of any cell in P is d. The steps of partitioning the data, and classifying interior, exterior, or boundary cells are illustrated in <ref type="figure" target="#fig_3">Figure 3</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Computing the Discrete Gradient</head><p>Given a regular CW-complex K with scalar values defined at the vertices and cells of dimension d and lower, we compute the discrete gradient by assigning gradient arrows in a greedy manner in ordered sweeps over cells of K of increasing dimension, done by this algorithm:</p><formula xml:id="formula_6">1: for i ∈ [0, .., d] do 2: Iter = K →sortedCellIterator(i) 3:</formula><p>while Iter→hasNext() do The discrete vector field that is produced is a discrete gradient field, since each cell is paired exactly once, and no loops can be created in V -paths, since each V -path has a critical cell as a source that cannot be further paired. The flow across cells in a discrete Morse function does not necessarily correspond to scalar flow. However, we assign function values to all cells in a manner that allows gradient arrows to agree with the scalar flow. The particular sorting order of the cells of a dimension given by sorted cell iterator (line 2) and the lowest facet selected for pairing (line 7) determine the shape of the discrete gradient flow. If the sorting is done from lowest to highest, and the facet selected is in the direction of steepest descent, the discrete gradient flow generated will mostly agree with the scalar gradient.</p><p>Augmented Function The sorting of all the cells of a particular dimension requires function values to be assigned to every cell. We use the augmented function F, where each cell has a function value slightly larger than the highest value of its faces:</p><formula xml:id="formula_7">F(α) = MAX{σ : σ &lt; α} + ε</formula><p>In this manner, every cell is a critical cell in the discrete sense, and the formation of pairs performed by the algorithmic kernel corresponds to an ε-persistence cancellation of adjacent critical cells. We use symbolic perturbation to resolve the sorting order of two cells with the same function value.</p><p>Gradient on a Parcel Although the gradient computation kernel operates on any regular CW-complex, when computing the discrete gradient of a parcel we impose some restrictions. The boundary cells of a parcel represent the interface where flow can pass from one parcel to the next when the parcels are merged later on. To keep this interface as simple as possible, we first compute the discrete gradient on the boundary of a parcel and then on the interior. This re-ordering ensures that no boundary cell will be paired with an interior cell. The motivation behind this reordering is to restrict the number of places where flow can enter/exit the parcel from/to another parcel to the critical points on the boundary. This is an important property that will make merging parcels possible in subsequent steps of the algorithm. The computation of a gradient is a step in the algorithm shown in <ref type="figure" target="#fig_3">Figure 3(c)</ref>, where the gradient is first computed on each parcel, and then the gradient is computed in the interior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The MS Complex on a Parcel</head><p>The MS complex of a discrete gradient vector field is uniquely determined by the gradient paths. To compute an MS complex from the discrete gradient vector field produced by the algorithm kernel, we find the critical cells, and compute the ascending and descending manifolds by following the gradient paths. All the cells of a path whose origin is a critical cell α belong to the ascending manifold of α. Symmetrically, all the cells of a path whose destination is a critical cell β belong to the descending manifold of β . These paths are computed using a depth-first search through the discrete gradient field. The cells of the MS complex are attained as the intersection of ascending and descending manifolds. The nodes and arcs forming the combinatorial structure of the complex are the critical cells and the gradient paths connecting the critical cells.</p><p>Computing the ascending and descending manifolds requires a complete traversal of the gradient paths. Our algorithm computes all cells of the MS complex. However, many cases arise where analysis of the data only requires the combinatorial structure (1-skeleton) of the MS complex. In this case, we can perform a more efficient computation by only tracing ascending manifolds. Nevertheless, computing the ascending manifolds of all minima requires a complete traversal of the entire gradient field. If we are only interested in the combinatorial structure of the complex, this traversal is not necessary, and we compute 1-saddle-minima connections by tracing gradient paths downwards from the 1-saddles. It is guaranteed that there are exactly two paths that terminate at a minimum for each 1-saddle, and the paths cannot split. This makes the computation of 1-saddle minimum connections efficient.</p><p>In general, ascending and descending manifolds can merge in a discrete gradient field. We maintain the MS complex by simulating a separation between ascending manifolds and descending manifolds. The result of computing the MS complex on a parcel is shown in <ref type="figure" target="#fig_3">Figure 3(d)</ref>. Note that one major advantage of using discrete Morse theory is that special rules for identifying manifolds of different dimensions are not required, as was the case in <ref type="bibr" target="#b16">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Merging Parcels</head><p>Merging two parcels is a three-step process that involves gluing the two meshes together and updating and classification of cells, computing the discrete gradient on the new boundary and interior, and finally merging the two MS complexes. Two meshes are glued together by updating the interior, boundary, or exterior classification on its cells. The interior cells remain interior, while the boundary cells can become interior cells or remain boundary, and the exterior cells can become interior or boundary or remain exterior. The same rules apply that were presented in section 3.1 for determining this classification. <ref type="figure" target="#fig_3">Figure 3</ref> (e) shows the new classification of cells after this first step in the merging process.</p><p>We repeat the algorithmic kernel for finding the discrete gradient field on the merged parcels. First the gradient is computed for the cells that became boundary in the first step of the merging process, and then the gradient is computed for the cells that became interior in the first step of the merging process. <ref type="figure" target="#fig_3">Figure 3 (f)</ref> shows the discrete gradient computed on the new boundary and in the interior cells.</p><p>Finally, the MS complexes of each parcel are merged. Due to the way we first computed the discrete gradient on the boundary and then in the interior in section 3.3, flow can only enter or leave a parcel through its boundary critical points. Therefore, we extend the MS complex in each parcel by tracing gradient paths from all the newly classified interior and boundary critical cells. The only possible new connections in the merged MS complex are between newly classified interior critical cells. This fact makes it possible to remove the discrete gradient on the interior of each parcel from memory prior to the merging process, allowing for the memory-efficiency of the divideand-conquer approach. <ref type="figure" target="#fig_3">Figure 3 (g)</ref> shows how the complexes are merged by connecting them with critical cells in the new boundary and in the interior.</p><p>Artifact Removal The merging of two parcels results in an MS complex on the new parcel with "extra" nodes and arcs where the old boundaries were. These extra nodes and arcs have low persistence, and are removed by canceling all ε-persistence pairs in the MS complex of a parcel. <ref type="figure" target="#fig_3">Figure 3 (h)</ref> shows how the MS complex in the interior is cleaned up by canceling low-persistence arcs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">A FRAMEWORK FOR GENERALITY</head><p>The algorithm described in the previous section relies on queries that are supported by a wide range of data formats. The internal representation of a parcel can vary based on the needs or optimizations possible for any particular data format. For example, for regular data, the connectivity and classification of cells is attainable directly from their indices and the extents of the parcel, therefore the queries can be resolved in an efficient manner. A more general data format, such as an AMR grid, or simplicial complex, may require a more elaborate storage mechanism. The data format handles queries regarding characteristics of the cells in a parcel as well as the connectivity of the cells within that parcel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Queries on the Parcel</head><p>To compute the discrete gradient, certain queries must be implemented for the data structure. Given a unique identifier id for a cell, our implementation supports these functions:</p><p>• dimension(id): returns the dimension of the cell • isPaired(id): returns true if the cell has been paired • isPairable(id): returns true if the cell has one unpaired facet • greaterThan(id 1 , id 2 ): returns true if id 1 has higher function value than id 2 A parcel must also be able to provide iterators that access cells and their neighbors, which are implemented by these functions:  • neighborIterator(id): returns an iterator over the facets and cofacets of a cell</p><p>Finally, a parcel must also be able to change the state of some of its cells, which is enabled by the following functions:</p><p>• markCritical(id): marks the particular cell as a critical cell • markAndPair(id 1 , id 2 ): marks both as paired, and sets the pair of each to the other</p><p>To compute the MS complex from the discrete gradient field, the following queries must be supported:</p><p>• criticalPointIterator(): returns an iterator over the critical points in a parcel • getPair(id): returns the identifier of the cell that id is paired with Finally, the queries necessary for visualization of the complex require that the geometric information of a cell can be recovered from its identifier:</p><p>• getGeometry(id): returns an array of vertices that are the 0dimensional faces of id</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Flow of Control</head><p>The basic steps of the algorithm discussed in section 3 are used to compute and merge the MS complex on parcels, however, the order in which computation and merging take place are regulated by the data manager. The data manager is a data-format-specific module that organizes the flow of computation for maximal efficiency. In fact, each dataset may have its own data manager to optimize for any structural properties of the data format or feature queries in the function. The details of dividing the data into parcels, ordering the computation of the gradient and MS complex on parcels, ordering the merging of parcels, and any on-the-fly simplification of the MS complex are left to the implementation. The interface with the algorithm is defined by the following functions:</p><p>1. computeGradAndComplex(Parcel p): computes the gradient and MS complex on boundary of a parcel; the results are stored in the state of p. Additionally, the parcel is prepared for merging, by removing the interior cells from memory. A parcel may only be merged with another if the gradient and MS complex have been computed on its boundary and in its interior, or if it composed entirely of exterior cells. It is the responsibility of the data manager to create parcels and load the data.</p><p>Case Study: Slices on a Grid The implicit structure of data defined on a regular grid (with inherent indices i, j, and k) can be exploited to achieve an efficient implementation. For example, the dimension, geometric location, and neighbors of a cell can be derived from its index in the cases of simple Cartesian or uniformly spaced rectilinear grids. Also, rectangular parcels can be defined as lower and upper extents in each dimension. In this case, the extents determine whether a cell is interior, exterior, or boundary. Merging the meshes of two aligned parcels can be accomplished by simply modifying the extents. All these properties make it possible to devise highly efficient implementations of the queries on the parcel and its cells.</p><p>In the following, we consider the simple case of a dataset defined on a rectilinear grid with uniform spacing, aligned with the three coordinate axes. The simplest possible data manager creates a parcel for every slice along one axis of the data. For example, in a 3D uniform rectilinear axis-aligned grid of size X × Y × Z, the data manager creates an X ×Y parcel for every z value. Although there are many ways to order the creation and merging of parcels, the simplest way is to accumulate them in a growing parcel along one axis. In this case the data manager would operate as follows:</p><p>1: Parcel pbase = empty 2: for z ∈ [0, .., Z − 1] do</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3:</head><p>Parcel slice = createXYSlice(z) simplify(pbase, filters) 7: end for Here the createXYSlice(z) reads the data from the input file corresponding the the XY slice at z and initializes state variables in the slice. The slice that is created is an array of size X ×Y × 8, required for storing the eight cells for every vertex of the data. The slices are merged with pbase, until pbase contains the complex of the entire mesh. <ref type="figure" target="#fig_6">Figure 4</ref> shows the addition of a slice onto pbase. The simplification step controls the size of the complex as each slice is added on.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>We provide results for data given on a uniform rectilinear grid, using the slicing data manager. The results were generated on an off-theshelf 2.21GHz AMD Athlon with 2.0Gb memory, the same hardware configuration used in <ref type="bibr" target="#b16">[17]</ref>. We compare the performance of our algorithm to the previously fastest approach <ref type="bibr" target="#b16">[17]</ref> in <ref type="table">Table 1</ref>. Our run times are similar, however, while the approach in <ref type="bibr" target="#b16">[17]</ref> has a dataset size limit of 256 × 256 × 256, we also have produce results for one timestep of a simulation of a Raleigh-Taylor instability, which has a resolution of 1152 × 1152 × 1000, shown in <ref type="figure" target="#fig_8">Figure 5</ref>. In Laney et al. <ref type="bibr" target="#b19">[20]</ref>, a parameter was used to select a 2-manifold level set, and the two-dimensional MS complex used on the height map to identify bubbles in the turbulent mixing layer. A similar kind of analysis is possible using the full complex we computed of the three-dimensional data without the need for parameter selection, nevertheless, performing this kind of in-depth analysis is beyond the scope of this paper. Our run times are larger for the small data set sizes because we simplify ε-persistence arcs on the fly, incorporating some of the post-processing into the construction time. The results of <ref type="bibr" target="#b16">[17]</ref> do not include this extra time needed for simplification, and the complex extracted by that method must be simplified to remove noise and attain an MS complex comparable to the result of our approach. Nevertheless, the optimizations made possible by our general framework make the run times similar. The size of the memory footprint was controlled by the on-the-fly simplification, with the overhead for storing parcels being 42Mb, and the size of the complex kept under 1.3Gb.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ANALYSIS OF THE ALGORITHM</head><p>RUN TIME ANALYSIS The run time analysis of the complete algorithm is heavily dependent on the particular implementation of parcels and the data manager. The run time analysis of the particular steps of the algorithm can be performed using certain reasonable assumptions, such as access to the faces and co-faces of a cell requiring  We analyze the run time for the particular implementation used for generating the results, where slices are attached to a growing base for regular data. Let n be the total size of the data. For each of n 1/3 slices, a slice is read from the data, and cells are created and initialized in a traversal of the slice taking n 2/3 time. The gradient and complex are computed on the slice taking n 2/3 logn 2/3 + n 2/3 time. Each slice is then merged in n 2/3 logn 2/3 + n 2/3 time, and simplified in i k 2 time for a total run time of O(nlogn) + n 1/3 i k 2 . We do not remove the constant final term, since in the worst case this can lead to a total number of n 2 operations.</p><p>The memory requirements of our method are determined mainly by  <ref type="table">Table 1</ref>. An MS complex is computed for well-known datasets. We compare the run time of our algorithm (a) to the fastest previously published algorithm presented in <ref type="bibr" target="#b16">[17]</ref> (b).</p><p>two parts: the overhead required for storing the gradient on a parcel, and the storage required for the computed MS complex. Once the MS complex has been computed on a parcel, the interior cells can be removed from memory. In fact, a parcel, with its boundary gradient, external cells, and MS complex, only needs to be kept in memory during a merge operation. Let a parcel P have n interior cells and m boundary cells. During computation of the discrete gradient field, the total footprint of P is (n + m) × |α| + |K| + |Γ|, where |α| is the size of a single cell, |K| is the memory overhead of the data structures storing the CW complex, and |Γ| is the size of the MS complex computed on the parcel. During the merging of two parcels P 1 and P 2 , the total amount of memory required is (m 1 + m 2 ) × |α|</p><formula xml:id="formula_8">+ |K 1 | + |K 2 | + |Γ 1 | + |Γ 2 |.</formula><p>The MS complexes Γ 1 and Γ 2 can be simplified independently prior to the merging operation to reduce their sizes. For regular data, the mesh connectivity is defined implicitly, therefore K = 0. In the particular implementation we used for generating the results, given a dataset of size x × y × z, each parcel is a slice of the data requiring x × y × 8 × |α| space, and only two parcels (the base and the new slice) were kept in memory.</p><p>Implications of Divide-and-Conquer The discrete gradient is first computed on the boundary of a parcel and then in the interior, and the restriction of the flow on the boundary potentially creates different MS complexes for the same data if the data is divided in different ways. In simulation of simplicity, order-dependence determines the structures identified whenever degeneracies are encountered, such as flat regions and multi-saddles. The augmented function and the flexible ordering of the pairing of cells allow us to pick a particular ordering such that the flow can be fixed first on the boundary, then on the interior of a parcel, while maintaining consistency. In practice, a subset of the cells of the d − 1-dimensional MS complex restricted to the boundary of a parcel form the intersection of the cells of the ddimensional MS complex with the boundary. As a result, after merging parcels and simplifying the artifacts introduced in the process, the choices made in dividing the data result in only slight geometrical differences in the computed MS complexes. Most significantly, however, the complexes extracted are consistent, which means that they repre- <ref type="figure" target="#fig_4">Fig. 6</ref>. The critical points of the tetrahedrane are identified using slicing across the z axis (left) and across the x axis (right). The locations of the critical points vary up to a cell, as do the shape of the arcs connecting them. However, the fundamental structure that is found by both methods is the same. Note that the MS complexes found with each slicing direction are consistent with one another, and both are consistent with the MS complex found for the same dataset in <ref type="bibr" target="#b14">[15]</ref>. sent a Morse function arbitrarily close to the function defined by the scalar values at vertices. <ref type="figure" target="#fig_4">Figure 6</ref> shows the difference when slicing the same data across the z axis and across the x axis. The discrete gradient produced is always a valid gradient field with monotonically descending V -paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSIONS</head><p>The algorithm we presented in this paper is robust and efficient, and the framework is general and works for various data formats of any dimension. Our divide-and-conquer strategy allows for memoryefficient computation of the MS complex and simplification on the fly to control the size of the output. We sacrifice some time efficiency to gain relatively more storage efficiency and scalability. Furthermore, the operations on each parcel are independent and can be computed in parallel, and our future work will be directed at a parallel implementation. The algorithm works for data of any dimension, and we will investigate using slicing across the time axis in 3D + time data to track features over time. The majority of time in computing the MS complex is spent on simplification. Future work will involve finding a more efficient representation of the MS complex to further accelerate the cancellation process, and also finding an order of cancellations which leads to highly efficient execution.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>A discrete Morse function (left) assigned to the simplices of a simple circle. The associated discrete gradient field (right) is a pairing of the vertices and edges. Note that the critical simplices of the discrete Morse function correspond exactly to the unpaired simplices of the discrete gradient field. In both cases, the vertex f −1 (0) and the edge f −1 (7)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>(a) and (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>An overview of the algorithm. The dataset (a) is broken up (b) into parcels, and cells are classified as interior (grey), exterior (green), or boundary (orange). The discrete gradient is found on the boundary and interior of each parcel (c) and the MS complex is computed (d). The parcels are merged, reclassifying boundary and exterior cells (e), and the discrete gradient is computed on the newly introduced boundary and interior cells (f). The complex is computed in these cells to complete the merging process (g). Simplification of ε-persistence pairs removes artifacts that have resulted from merging (h).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>6 :</head><label>6</label><figDesc>if K →hasPairableCoFacet(cellID) then 7: pairID = K →lowestPairableCoFacet(cellID) 8: K →pair(cellID,pairID ) 9: K →mark(cellID); K →mark(pairID) end for This algorithm iterates through all cells in increasing order of dimension and function value, assigning gradient pairs in a greedy manner. The sortedCellIterator(i) iterates through the i-cells of K in order of increasing function value. The lowest cell of dimension i that has not been paired or set as critical is cellID, and its co-facets are searched for a possible pair. The function hasPairableCoFacet(cellID) returns true if there is a co-facet with exactly one facet that is not marked. If there are multiple such co-facets lowestPairableCoFacet(cellID) will return the lowest one. While any pairable co-facet could be paired with the cell, we select the one in the direction of steepest descent to represent gradient flow of the function. When pair(cellID, pairID) forms a gradient arrow, the cell is set as the head and the co-facet is marked as the tail.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>•</head><label></label><figDesc>d-cellIterator(): returns an iterator over all d-dimensional cells in the parcel in sorted order • boundary-d-cellIterator(): returns an iterator over all ddimensional cells on the boundary of a parcel in sorted order</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 4 .</head><label>4</label><figDesc>A new slice is created to be merged with pbase. The orange cells mark boundary, the green mark exterior, and the grey area indicates the processed interior of pbase.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>2. merge(Parcel p1, Parcel p2): combines p1 and p2 into p1, internally updating interior, boundary, and exterior classifications, computing the discrete gradient on the new boundary and interior cells, merging the MS complexes, and performing an εpersistence simplification. After merging, p2 is empty. 3. simplify(Parcel p, Filters f ): performs simplification of the MS complex on p according to filters defined in f .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 5 .</head><label>5</label><figDesc>A single timestep of a dataset of a simulated Raleigh-Taylor instability simulating the mixing of two fluids. This timestep has a resolution of 1152 × 1152 × 1000 and is an early timestep of the simulation. The data is noisy, therefore we perform a 5% persistence simplification to remove "excess features." We compute the complex for the entire dataset, and the inset shows a small subsection of the data with selected nodes and arcs of the complex. Minima and maxima (blue and red spheres) and their saddle connections trace out the bubble structure in the data. The maxima represent isolated pockets of high-density fluid that have crossed the boundary between the two fluids. The structural complexity is overwhelming, but our prototype allows interactive exploration and visualization, and selective inclusion/omission of user-specified components of the MS complex.constant-time processing. The discrete gradient computation on a parcel with n cells uses a sorted ordering provided by the parcel, which is of complexity O(nlogn). The computation of the MS complex on a parcel performs a depth-first search from each critical cell which will cover its entire ascending manifold. Since the ascending manifolds can merge, if there are O(n) critical cells, in the worst case, this step can require O(n 2 ) time. However, in practice, the number of critical points can be modeled as a constant k, and tracing the ascending and descending manifolds requires O(n) time. Merging two parcels with m cells on the interface is accomplished in O(mlogm) time, as the gradient computatation again requires O(nlogn), and the merging of the complexes requires O(m) time. The cancellation of a pair of nodes where the number of neighbors of each is bounded by some value i requires at most O(i 2 ) time. Therefore, removing the artifacts introduced in a merge operation requires O(k i 2 ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Attila Gyulassy is with UC Davis and Lawrence Livermore National Laboratory, E-mail: aggyulassy@ucdavis.edu. • Peer-Timo Bremer is with Lawrence Livermore National Laboratory, E-mail: ptbremer@acm.org. • Bernd Hamann is with University of California, Davis, E-mail: hamann@cs.ucdavis.edu. • Valerio Pascucci is with University of Utah, E-mail: pascucci@acm.org. Manuscript received 31 March 2008; accepted 1 August 2008; posted online 19 October 2008; mailed on 13 October 2008. For information on obtaining reprints of this article, please send e-mailto:tvcg@computer.org.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>Attila Gyulassy was supported by the Lawrence Scholar Program (LSP). In addition, this research was supported in part by the National Science Foundation, under grant CCF-0702817. We would like to thank the members of the Center for Applied Scientific Computing (CASC), at LLNL, and the members of the Visualization and Computer Graphics Research Group of the Institute for Data Analysis and Visualization (IDAV), at UC Davis. This work performed under the auspices of the U.S. Department of Energy by Lawrence Livermore National Laboratory under Contract DE-AC52-07NA27344.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Watershed, heirarchical segmentation and waterfall algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Beucher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mathematical Morphology and its Applications to Image Processing</title>
		<editor>J. Serra and P. Soille</editor>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="69" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A topological hierarchy for functions on triangulated surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="385" to="396" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Computing contour trees in all dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Axen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Discrete Algorithms</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="918" to="926" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Simplifying flexible isosurfaces using local geometric measures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van De Panne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="497" to="504" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">On contour and slope lines. The London, Edinburgh and Dublin Philosophical Magazine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cayley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Science</title>
		<imprint>
			<biblScope unit="volume">XVII</biblScope>
			<biblScope unit="page" from="264" to="268" />
			<date type="published" when="1859" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Progressive simplification of tetrahedral meshes preserving all isosurface topologies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-J</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="493" to="504" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simplification of tetrahedral meshes with accurate error evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Constanza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="85" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Morse-Smale complexes for piecewise linear 3-manifolds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Harer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 19th Ann. Sympos</title>
		<meeting>19th Ann. Sympos</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="361" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Hierarchical Morse-Smale complexes for piecewise linear 2-manifolds. Discrete and Computational Geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Harer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zomorodian</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="87" to="107" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">A user&apos;s guide to discrete morse theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Forman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Simplifying surfaces with color and texture using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="263" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Quadric-based simplification in any dimension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="209" to="239" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Topology preserving and controlled topology simplifying multiresolution isosurface extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gerstner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pajarola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="259" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Topological noise removal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Guskov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="19" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Topology-based simplification for feature extraction from 3d scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gyulassy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="535" to="542" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A topological approach to simplification of three-dimensional scalar fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gyulassy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics (special issue IEEE Visualization 2005)</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="474" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Efficient computation of morse-smale complexes for three-dimensional scalar functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gyulassy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1440" to="1447" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="99" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Generating discrete morse functions from point data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Knudson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mramor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Experimental Mathematics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="435" to="444" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Understanding the structure of the turbulent mixing layer in hydrodynamic instabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mascarenhas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1053" to="1060" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Applications of forman&apos;s discrete morse theory to topology visualization and mesh compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lewiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lopes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Tavares</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="499" to="508" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On hills and dales. The London, Edinburgh and Dublin Philosophical Magazine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Maxwell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Science</title>
		<imprint>
			<biblScope unit="page" from="421" to="427" />
			<date type="published" when="1870" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Simplification of three-dimensional density maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="587" to="597" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Robust on-line computation of reeb graphs: simplicity and speed</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scorzelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-T</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mascarenhas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">58</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Topological Data Structures for Surfaces: An Introduction to Geographical Information Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rana</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Sur les points singuliers d&apos;une forme de Pfaff complètement intégrable ou d&apos;une fonction numérique. Comptes Rendus de L&apos;Académie ses Séances</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Reeb</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1946" />
			<biblScope unit="volume">222</biblScope>
			<biblScope unit="page" from="847" to="849" />
			<pubPlace>Paris</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">The watershed transform: Definitions, algorithms and parallelization techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Roerdink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Meijster</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Generalized Poincaré&apos;s conjecture in dimensions greater than four</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Smale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. of Math</title>
		<imprint>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="page" from="391" to="406" />
			<date type="published" when="1961" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">On gradient dynamical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Smale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. of Math</title>
		<imprint>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="page" from="199" to="206" />
			<date type="published" when="1961" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Progressive tetrahedralizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">G</forename><surname>Staadt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Visualization</title>
		<meeting>IEEE Conf. Visualization</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="397" to="402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Topological volume skeletonization using adaptive tetrahedralization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Takahashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Takeshima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Geometric Modeling and Processing</title>
		<meeting>Geometric Modeling and essing</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="227" to="236" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Topological volume skeletonization and its application to transfer function design. Graphical Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Takahashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Takeshima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fujishiro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="page" from="24" to="49" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Removing excess topology from isosurfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="190" to="208" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
