<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">IRIS: Illustrative Rendering of Integral Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathias</forename><surname>Hummel</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Garth</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
						</author>
						<title level="a" type="main">IRIS: Illustrative Rendering of Integral Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:56+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Flow visualization</term>
					<term>integral surfaces</term>
					<term>illustrative rendering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. A path surface generated from a turbulent jet dataset, rendered in two different styles using the framework proposed in this paper. In the left image, the surface is opaque, and the front and back side are rendered with yellow and blue, respectively. An adaptive stripe pattern visualizes individual pathlines on the surface and provides the orientation of the flow. On the right, the surface is rendered transparently with a denser stripes to give a hatching-like appearance. Both figures emphasize surface silhouettes for better distinction of individual surface layers.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Integral curves have a long standing tradition in vector field visualization as a powerful tool for providing insight into complex vector fields. They are built on the intuition of moving particles and the representation of their trajectories. A number of different variants exist; while streamlines and pathlines directly depict single particle trajectories, other curves visualize the evolution of particles that are seeded coherently in space (time lines) or time (streak lines). These curves imitate experimental flow visualization and correspond to smoke or dye released into a flow field. Generalizing on these concepts, integral surfaces extend the depiction by one additional dimension. Stream and path surfaces aim to show the evolution of a line of particles, seeded simultaneously, over its entire lifetime. These surfaces have been shown to provide great illustrative capabilities and much improved visualization over simple integral curves, and increase the visual insight into flow structures encountered during their evolution. Time surfaces increase the dimensionality further by showing the evolution of a twodimensional sheet of particles. Finally, streak surfaces borrow from both path surfaces and time surfaces by portraying an evolving sheet of particles that grows during the evolution at a seeding curve as new particles are added to the surface. They are analogous to streak lines in that they originate from wind tunnel experiments with line-shaped nozzles and are therefore, in a sense, a very natural surface visualization primitive for time-varying flows.</p><p>In recent years, several new algorithms have been proposed for the computation of such integral surfaces, and techniques are now available that address a wide spectrum of visualization scenarios from realtime interaction and computation for smaller datasets using GPUs to very-complex large and time-dependent datasets using parallel algorithms. While surface computation is already quite complex, using integral surfaces for effective visualization can be quite difficult. Such surfaces often have a very high visual complexity (see e.g. <ref type="figure">Figure 1</ref>) that results from the shearing, twisting, and curling of the flow behavior they capture and describe. Thus, care must be taken when combining transparent rendering, texture mapping, and other illustrative techniques to preserve or enhance the understanding of the flow as conveyed through the surface. Different rendering and illustration approaches have been proposed previously, but as of yet it remains unclear which of these choices systematically work well for general integral surfaces, and how different techniques can be effectively and efficiently combined.</p><p>In this paper, we address the issues of transparency and texture mapping on integral surfaces by examining and adapting several existing visualization techniques (Sections 3 and 4). Furthermore, we present a rendering framework that combines these with other approaches from the field of illustrative rendering, described in Section 5. The system we describe is fully interactive, and all visualizations can be generated without laborious preprocessing. Our framework can thus be coupled with both interactive and non-interactive computation techniques in static or dynamic settings. We demonstrate the resulting visualization in application to complex examples from CFD simulation in Section 6 and briefly evaluate our results (Section 7), before we conclude in Section 8.</p><p>The benefits of the methods we discuss here with respect to integral surface visualization are twofold. First, the methods we describe are able to convey the full information contained in an integral surface by providing solutions to the problems of occlusion, complex three-dimensional structure, flow orientation, and dynamics. Second, by providing a framework that combines the different approaches, the complexity of choosing a specific visualization style is vastly reduced, and makes integral surface visualization accessible to visualization users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">CONCEPTS AND RELATED WORK</head><p>Before we survey previous work on integral surface visualization, we briefly describe the basic concepts underlying integral surfaces as applied to flow visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Basic Setting</head><p>If v(t, x) is a (possibly time-dependent) three-dimensional vector field that describes a flow, then an integral curve I of v is the solution to the ordinary differential equation</p><formula xml:id="formula_0">I (t) = v(t, I(t)),</formula><p>and</p><formula xml:id="formula_1">I(t 0 ) = x 0 ,<label>(1)</label></formula><p>where v(t, x) is the vector at time t and location x. Technically, it is a curve that originates at a point (t 0 , x 0 ) and is tangent to the vector field at every point over time. Intuitively, it describes the path of a massless particle that is advected by v. In the typical case that v is given in discrete form (e.g. as an interpolated variable on regular or unstructured grids), such integral curves can be approximated using numerical integration techniques. In the case where v is independent of time, such integral curves are called streamlines, and pathlines in the time-dependent case.</p><p>An integral surface is the union of the trajectories of a one or twodimensional family of integral curves, originating from a common seed curve or surface. Three specific instances of such surfaces are commonly distinguished:</p><p>• A path surface P originates from a one-dimensional seed curve.</p><p>The surface consists of the positions of all particles during their entire lifetime.</p><p>• A time surface T is a two-dimensional family of integral curves that originate from a common seed surface, or alternatively, the surface formed by a dense set of particles that are located on the seed surface at the initial time and jointly traverse the flow.</p><p>• A streak surface S is the union of all particles emanating continuously over time from a common seed curve and move with the flow from the time of seeding.</p><p>If v is not time-dependent, a path surface is customarily labelled stream surface in analogy to integral curves. Furthermore, streak surfaces and stream surfaces are identical in this case. In this paper, we will generally use the term path surface, however, all discussion applies equally to stream surfaces. Integral surfaces possess a natural parameterization. For path surfaces, it is given by the parameter s that indicates the starting location on the seed curve, and the advection time t of the corresponding particle to reach the given surface point. Lines of constant s-parameter are hence pathlines, and constant t-lines are called time lines. For streak surfaces, the situation is similar, but s-lines are streaklines. Time surfaces directly inherit the parameterization of their seed surface, i.e. the parameters (typically called u and v) at each particle on the time surface correspond to the parameter of its seed location.</p><p>After establishing these basic notions, we will next briefly consider previous and related work on integral surfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Integral Surface Generation</head><p>Integral surfaces were first investigated by Hultquist <ref type="bibr" target="#b16">[17]</ref>, who proposed a stream surface algorithm that propagates a front of particles forming a surface through a flow. Particle trajectories are integrated as needed and triangulation of the surface is performed on-the-fly using a greedy approach. Divergence and convergence of particles in the advancing front is treated using a simple distance criterion that inserts and removes particles to ensure a balanced resolution of the surface. Advanced visualization of integral surfaces was introduced by Löffelmann <ref type="bibr" target="#b25">[26]</ref> in proposing texture mapping of arrows on stream surfaces (stream arrows), with the goal of conveying the local direction of the flow. This original work did not address stretching and divergence of the surface, which distorts the parameterization and consequently can result in very large or small arrows. The same authors subsequently addressed this by a regular, hierarchical tiling of texture space that results in adjusted arrows <ref type="bibr" target="#b24">[25]</ref>. However, stream arrows are rarely used in integral surface visualization from CFD data due to the high visual complexity of the resulting surfaces.</p><p>Garth et al. <ref type="bibr" target="#b10">[11]</ref> built on the work of Hultquist by employing arclength particle propagation and additional curvature-based front refinement, which results in a better surface triangulation if the surface strongly shears, twists, or folds. They also considered visualization options such as color mapping of vector field-related variables going beyond straightforward surface rendering. A different computational strategy was employed by van Wijk <ref type="bibr" target="#b32">[33]</ref>, who reformulated stream surfaces as isosurfaces; however, his method requires increased computational effort to advect a boundary-defined scalar field throughout the flow domain. Scheuermann et al. <ref type="bibr" target="#b29">[30]</ref> presented a method for tetrahedral meshes that solves the surface integration exactly per tetrahedron. Improving visualization <ref type="bibr" target="#b22">[23]</ref>, Laramee et al. employed the Image-Space Advection technique <ref type="bibr" target="#b23">[24]</ref> to generate a visual impression of the flow direction on the surface. This depiction is naturally resolution-independent, but does require costly computation and a full representation of the vector field on the surface.</p><p>More recently, Garth et al. <ref type="bibr" target="#b9">[10]</ref> replaced the advancing front paradigm by an incremental time line approximation scheme, allowing them to keep particle integration localized in time. They applied this algorithm to compute stream surfaces and path surfaces in large and time-varying CFD datasets. Using a GPU-based approach, Schafhitzel et al. <ref type="bibr" target="#b28">[29]</ref> presented a point-based algorithm that does not compute an explicit mesh representation but rather uses a very dense set of particles, advected at interactive speeds, in combination with point-based rendering. Recently, Krishnan et al. <ref type="bibr" target="#b20">[21]</ref>, Bürger et al. <ref type="bibr" target="#b4">[5]</ref> and von Funck et al. <ref type="bibr" target="#b33">[34]</ref> presented approaches for time and streak surface computation. While the former authors focused on the CPU treatment of large CFD datasets, the latter designed their approach for GPUs with the aim of real-time visualization for smaller datasets. All three papers present various visualization options, including striped textures and advanced transparency though depth peeling (see e.g. <ref type="bibr" target="#b0">[1]</ref>), but do not discuss these visualization choices and their realization in detail. The intent of this work is in part to adopt a systematic approach to integral surface visualization by discussing available visualization choices in detail, and to describe their implementation in sufficient detail to be easily reproducible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Illustrative Rendering and Integral Surfaces</head><p>Computer graphics offers many techniques to realistically render objects in static and animated representation, and to create new scenes under the same environmental conditions; for an overview, we refer the reader to the works by Gooch and Gooch <ref type="bibr" target="#b12">[13]</ref> and Strothotte and Schlechtweg <ref type="bibr" target="#b31">[32]</ref>. For non-photorealistic rendering, approaches have been presented to reproduce numerous artistic techniques, such as tone shading <ref type="bibr" target="#b11">[12]</ref>, pencil drawing <ref type="bibr" target="#b3">[4]</ref>, hatching <ref type="bibr" target="#b26">[27]</ref>, or ink drawing <ref type="bibr" target="#b30">[31]</ref>. In the context of integral surfaces, however, artistic representation plays a secondary role to an accurate depiction the structure of the flow as captured by the surface. For example, while hatching techniques providing shape cues for a depicted surface, the hatching pattern introduces directional information which is at risk of being confused with flow direction. Gorla et al. <ref type="bibr" target="#b13">[14]</ref> study the effect of directional surface patterns on shape perception. The use and combination of non-photorealistic techniques to highlight and illustrate specific aspects of a dataset has been examined in detail in its application to volume rendering, where similar constraints apply. Here, Ebert and Rheingans <ref type="bibr" target="#b7">[8]</ref> present several illustrative techniques such as boundary enhancement and sketch lines which enhance structures and add depth and orientation cues. Csebfalvi et al. <ref type="bibr" target="#b5">[6]</ref> visualize object contours based on the magnitude of local gradients as well as on the angle between viewing direction and gradient vector using depth-shaded maximum intensity projection. Krüger et al. <ref type="bibr" target="#b21">[22]</ref> use an interactive magic lens based on traditional illustration techniques to selectively vary the transparency in the visualization of iso-surfaces; this technique is termed ClearView.</p><p>In this context, one goal of this work is to apply and adapt specific techniques from illustrative rendering to the specific case of integral surface visualization. Evaluating the quite significant body of work on illustrative techniques for this scenario is beyond the scope of this work; rather, we focus on two core aspects of integral surface rendering: transparency and texturing. This choice is based on the authors' observation of typical problems that complicate integral surface visualization, and is discussed in more detail in Sections 3 and 4 below.</p><p>Furthermore, we consider the following characteristics to select techniques. First, we observe that integral surfaces can imply a significant computational burden in the presence of large and complex flow data sets. The surface representations resulting from such data can be comprised of millions of triangles and take minutes to hours to compute (cf. <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b20">21]</ref>), and interaction with the surface in a near real-time setting -possibly even during the surface computation -is highly desirable. For less complex data, the recent work of Bürger et al. <ref type="bibr" target="#b4">[5]</ref> describes a real-time computation approach that leverages the computing power of GPUs, and we aim at retaining the applicability of the methods described in this paper in such a scenario. Similarly, the dynamic and evolving nature of time and streak surfaces attractively captures the temporal characteristics of flows; as such, the ability to animate integral surfaces is pertinent to our considerations.</p><p>In the following sections, we describe approaches to transparency and texturing that fulfill these requirements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">TRANSPARENCY</head><p>Due to folding, twisting, and shearing of the flow traversed by them, integral surfaces often possess a very high depth complexity and one often finds that large parts of the surface are occluded by the surface's outer layer in an opaque depiction of the surface. Introducing transparency into the rendering can alleviate this; however, the number of layers is often so large that the straightforward choice of constant transparency produces unsatisfactory results. A low constant transparency over the entire surface typically results in good visibility of the outer layers, while the inner layers are occluded. Conversely, if the constant transparency is high to reveal the inner layers, the outer layers are hard to identify. As discussed previously by Diepstraten et al. <ref type="bibr" target="#b6">[7]</ref> among others, transparency in illustrations often applies the 100-percent-rule, stating that transparency should fall off towards the edges of an object. This results in a non-uniform decrease of the transparency of layers as the depicted surface curves away from the viewer.</p><p>The same authors propose an object-space algorithm to achieve this by varying the transparency of a surface point as a function of its distance to its outline. The outlines of an object projected onto a 2D screen consist of silhouettes lines (see also Section 3.4), and thus the distance computation entails the extraction of an explicit description of the view-dependent silhouette lines. To this purpose, an object space approach is proposed that is too costly for large surfaces with several millions of triangles. Moreover, this technique does not provide insight into the curvature of the transparent surface. Taking a different approach, the methods proposed by Kindlmann et al. <ref type="bibr" target="#b19">[20]</ref> and Hadwiger et al. <ref type="bibr" target="#b14">[15]</ref> for direct volume rendering and iso-surface rendering vary surface properties in dependence of the principal surface curvatures and are used to emphasize surface detail such as ridges and valleys. Thus, using such curvature measures to influence transparency of an integral surface seems appealing. Judd et al. <ref type="bibr" target="#b18">[19]</ref> used viewdependent curvature to extract so-called apparent ridges. However, none of these methods address transparency directly, and direct application to our problem would require the computation of high-quality curvature measures. For the interactive visualization of large triangle meshes such as integral surfaces, we consider such approaches too computationally expensive.</p><p>We instead propose two simple measures for transparency variation that are cheap to compute and give very good results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Angle-Based Transparency</head><p>If n is the surface normal at the considered point and v is the normalized view vector, then choosing the view-dependent transparency</p><formula xml:id="formula_2">α view := 2 π arccos(n • v)</formula><p>varies the transparency with the angle between n and v. This has the effect that surface regions orthogonal to the viewer become more transparent, while regions where the surface curves towards or away from the viewer are more opaque. This decreases the transparency as the object silhouette is approached, and surface curvature is indicated indirectly by the image-space extent of the opacity gradient, as shown in <ref type="figure">Figures 3(a)</ref> and <ref type="figure" target="#fig_0">Figure 2</ref>(c). A drawback of this approach is the dependence of the transparency gradient on the curvature radius of the surface. If the integral surface contains large, almost flat parts, their resulting high opacity can obscure the layers below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Normal-Variation Transparency</head><p>The second approach we propose is related to the work of Kindlmann et al. <ref type="bibr" target="#b19">[20]</ref> in controlling the transparency as a function of the surface curvature perpendicular to the viewer, as determined in image space. If n(i, j) denotes the surface normal at a pixel (i, j), we observe that the partial derivatives of the normal's z-component</p><formula xml:id="formula_3">∂ n z ∂ i and ∂ n z ∂ j</formula><p>provide a rough approximation of the curvature of the surface perpendicular to the image plane in view space. By letting</p><formula xml:id="formula_4">α view := ( ∂ n z ∂ i ) 2 + ( ∂ n z ∂ j ) 2 γ 2 ,<label>(2)</label></formula><p>assuming γ = 1 for now, we obtain a transparency function that is approximately proportional to the local surface curvature perpendicular to the viewer. As a result, the surface is more opaque where it curves away from the viewer and most transparent when it is oriented perpendicular to the viewer. Furthermore, this achieves the effect that for surface features with strong curvature such as creases or small features, the transparency is reduced, resulting in a better visual impression of such small details. Here, α view is not exclusively dependent on the view direction, such that strongly curved surface features can be well identified even if viewed frontally (see <ref type="figure" target="#fig_0">Figure 2(d)</ref>). We note that α view is not necessarily limited to the unit interval, and must be clamped before γ is applied. Secondly, for surface regions curving away from the viewer, n z varies fastest as the silhouette is approached, leading to quickly increasing transparency towards the boundary, as opposed to a slow gradation using the angle-based transparency. In the context of integral surface visualization, this aspect is important since it allows a clear visual understanding of nested flow tubes that are generated by the flow rolling the surface up into a nested set of tubes. Since curvature increases for the inner tubes, they are more prominently visible in the resulting image. This phenomenon and the visual differences of normal-variation transparency over angle-based transparency are illustrated in <ref type="figure">Figure 3</ref>.</p><p>The parameter γ in Equation 2, selected over the unit interval, allows a smooth control of the strength of the normal variation transparency, where we provide selection of γ over <ref type="bibr">[0,</ref><ref type="bibr" target="#b0">1]</ref>. Larger values emphasize the surface silhouettes and provide little additional insight. It is our experience that controlling α view exponentially provides more intuitive control over the effect strength than e.g. linear scaling. Furthermore, we found it helpful to constrain the overall resulting transparency range to a user-adjustable interval [α min , α max ] through </p><formula xml:id="formula_5">α = (1 − α view ) • α min + α view • α max .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Window transparency</head><p>Despite obtaining very good results for most integral surface visualization scenarios, we have nevertheless observed the occasional need to selectively increase the transparency of the visualized surface in certain regions. In the setting of iso-surfaces, Krüger et al. <ref type="bibr" target="#b21">[22]</ref>, inspired by the earlier work of Bier et al. <ref type="bibr" target="#b1">[2]</ref>, presented an innovative approach to allow a user to selectively vary the transparency of an occluding surface through a user-controlled window. We adopt a similar approach: we modulate the overall transparency of the rendering as a function of the surface pixel position in image space. Typically, we decrease this window transparency α window smoothly with the distance to a specified point in image space. This allows the easy creation of an interaction with "windows" that allow seeing through the context provided by an outer surface layer to reveal otherwise occluded details (see <ref type="figure" target="#fig_12">Figure 11</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Silhouettes</head><p>Silhouettes, described e.g. by Gooch et al. <ref type="bibr" target="#b11">[12]</ref>, are a popular technique for non-photorealistic rendering. Through visually emphasizing the transition between front-and back-facing surface layers, object shape is revealed, and sharp surface features such as creases are highlighted. In transparent depictions, distinguishing layers can be difficult. Here, silhouettes reveal the layer boundaries and provide hints at the surface's shape. Corresponding rendering approaches can be mainly divided into the object-space, image-space, and hybrid categories (cf. <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b17">18]</ref>). Isenberg et al. <ref type="bibr" target="#b17">[18]</ref> recommend using an image space technique for achieving interactive frame rates with huge or animated data sets. Object-space and hybrid algorithms rely on processing the mesh and thus we exclude them from consideration due to the high effort required for the large integral surfaces meshes we consider here.</p><p>In the framework presented here, we make use of an image space silhouette detection algorithm that is described in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">TEXTURES</head><p>When used correctly, textures are powerful tools that, in application to integral surfaces, serve a dual purpose. First, they can be employed to enhance shape perception, providing a better visual comprehension of the complex surface shape. Second, and specific to integral surfaces, they can indicate flow orientation on the surface, or specific streamlines, pathlines, streak lines, or time lines on a surface. Integral surfaces provide a natural surface parametrization by virtue of their construction (see Section 2). For path surfaces, unique s and t parameters correspond directly to pathlines and timelines, respectively. Time surfaces can inherit their parameterization from a parametric seed surface, and streak surfaces present a hybrid, where again constant t indicates time lines and fixing s provides streak lines. By carrying this parameterization from the surface computation stage to the rendering stage, textures can thus be applied to highlight flow behavior on the surface.</p><p>Regarding shape enhancement, several illustrative rendering techniques approximate a hatching-type depiction to improve shape perception (see e.g. the work of Freudenberg et al. <ref type="bibr" target="#b8">[9]</ref> and Strothotte and Schlechtweg <ref type="bibr" target="#b31">[32]</ref>). However, in this context, this introduction of directional information is at risk of being confused with flow direction. Thus, when applying such techniques, the pattern must be oriented along the existing parameterization.</p><p>Unfortunately, the natural integral surface parameterization is subject to strong and possibly anisotropic distortion that reflects the convergence or divergence of neighboring particles traversing the flow. In typical integral surfaces, it is not uncommon that the surface is stretched by a factor of 1000 or greater. Thus, if the intent is to highlight individual flow lines through a straightforward application of a stripe texture, large gaps may appear between stripes, and stripes grow strongly in width, thus obscuring the flow depiction in such areas (see e.g. <ref type="figure" target="#fig_3">Figure 6(a)</ref>). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Adaptive Patterns</head><p>Freudenberg et al. <ref type="bibr" target="#b8">[9]</ref> proposed an approach for real-time surface hatching by using a mipmap-like technique, so called hatch maps. In conventional mipmapping, the texture to be mapped onto an object is replaced by a stack of textures, where lower levels represents downsampled versions of the highest-resolution texture. Mipmapping then selects an appropriate level to sample from the stack by taking into account the image space variation of the texture coordinates, such that a roughly one-to-one reproduction of texels to pixels is achieved and smoothly blends between consecutive levels to avoid image discontinuities. Freudenberg et al. repurpose this mechanism by loading the stack with successively smaller images that contain lines exactly one pixel wide. Thus, they achieve a approximately constant image space line density, giving the impression of hatching. Our texturing approach is based on a similar idea; however, instead of using a finite set of textures with different resolutions, we reuse a single texture or pattern and adjust the sampling frequency to yield approximately constant image space pattern density. Furthermore, we compensate for highly anisotropic stretching by determining the sampling frequency independently for the parameter directions s and t.</p><p>The variation λ s,t in texture coordinate in image space at a pixel (i, j) is determined by the image-space partial derivative of the texture coordinates s and t at (i, j) as</p><formula xml:id="formula_6">λ s (i, j) = ∂ s ∂ i 2 + ∂ s ∂ j 2<label>(3)</label></formula><p>and</p><formula xml:id="formula_7">λ t (i, j) = ∂t ∂ i 2 + ∂t ∂ j 2<label>(4)</label></formula><p>If either of λ s,t doubles, the pattern frequency in the corresponding direction must be halved to yield the same image space frequency. If the pattern is described by a function P(s,t) over the unit square, we determine two integer resolution levels l s and l t via</p><formula xml:id="formula_8">l s = log 2 λ s and l t = log 2 λ t ,</formula><p>and define the frequency-adjusted patternP by evaluation of P with correspondingly compensated frequency througĥ</p><formula xml:id="formula_9">P l s ,l t (s,t) := P( s • 2 −l s ,t • 2 −l t ).</formula><p>Since resolution levels are discretely defined, we apply bilinear interpolation between neighboring resolution levels to obtain a smooth pattern frequency in image space:</p><formula xml:id="formula_10">c(s,t) = (1 −l s ) • (1 −l t ) •P l s , l t (s,t) +l t •P l s , l t (s,t) +l s • (1 −l t ) •P l s , l t (s,t) +l t •P l s , l t (s,t)<label>(5)</label></formula><p>wherel</p><formula xml:id="formula_11">s = l s − l s ,l t = l t − l t</formula><p>denote the fractional parts of l s and l t , respectively. This mapping counters the effect of surface stretching on the pattern representation, and additionally perspective foreshortening (similar to <ref type="bibr" target="#b8">[9]</ref>), by adapting the scale of the pattern reproduction (see <ref type="figure" target="#fig_3">Figures 5 and 6</ref>). As demonstrated below in Section 6, this allows the effective use of stripe textures and other texture variations to highlight surface shape and distortion as well as flow behavior directly. While Equations 3 and 4 seem difficult to evaluate at first glance, such evaluation can leverage built-in functionality of the rendering system as discussed below in Section 5 and is actually cheap to evaluate. Note that for the case described above, the pattern can either be procedural (such as stripes, see <ref type="figure">Figure 4</ref>) or originate from an arbitrary texture image.</p><p>Patterns and textures can be applied in various ways to modulate both opacity and color of the integral surface to achieve specific visualization styles. We will discuss a number of examples in Section 6. The rendering pipeline we describe in Section 5 specifically focuses on the straightforward cases of modulating surface transparency additively and multiplicatively, which covers a large variety of use cases. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RENDERING PIPELINE</head><p>In this section, we provide a description of our implementation of the integral surface rendering techniques discussed above. Our implementation is based on OpenGL, however, the concepts we make use of could be easily ported to DirectX. We make use of programmable shading via GLSL shader programs throughout the pipeline. As input for our techniques, we require for each frame a discrete representation of the integral surface (e.g. triangles or quadrilaterals), with a set of two texture coordinates associated with each vertex. This representation need not be connected and we explicitly accommodate some computation approaches (such as the method by Bürger et al. <ref type="bibr" target="#b4">[5]</ref>) that generate surfaces as (partial) primitive soup. The normal-variation transparency approach described in Section 3.2 requires continuously varying normals over the mesh; in this case, the normal must be specified per vertex. If uniform or angle-based transparency are to be applied, face-based normals are sufficient. In this case, no preprocessing is required at all, and illustrative integral surfaces can be rendered during the computation phase. Additionally, our approach supports the addition of context geometry such as flow domain boundaries that are rendered and shaded independently from the integral surface.</p><p>Since our approach makes heavy use of transparency, a primary concern is the correct representation of transparent surfaces. Typically, there are two approaches to achieve correct transparency rendering at interactive speeds. The first, depth sorting, is based on sorting all elementary primitives by distance from the camera; primitives are then rendered from back to front with over-blending to ensure correct transparency. This approach is conceptually simple, but requires implementation on the GPU to achieve competitive performance. While this is not a significant problem, it suffers from complications with surfaces that are self-intersecting. Thus, we cannot apply it in this context since path surfaces often self-intersect.</p><p>Conversely, the depth peeling approach (see e.g. <ref type="bibr" target="#b0">[1]</ref>) decomposes the rendering into layers of different depth. By rendering the primitives comprising the scene multiple times and discarding surface fragments that are closer to the viewer than those in the previous layer, one obtains incremental layers of depth. These layers are successively blended together to assemble the final image. This can be performed in both back-to-front order (using over blending) or in front-to-back order (using under blending). The peeling approach lends itself naturally to the image-based rendering techniques discussed above. Furthermore, since depth ordering is resolved per pixel, self-intersecting surfaces do not pose a problem. On the downside, this flexibility is balanced by the need to render a potentially large primitive set multiple times for a single frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Peeling Loop</head><p>For each frame, a depth peeling loop with on-the-fly front-to-back peeling is executed (for a detailed discussion, we refer the reader to the description by Bavoli and Myers <ref type="bibr" target="#b0">[1]</ref>). Each iteration of the loop consists of two stages. The first stage (peel stage) computes a new depth layer of the surface based on the previous depth layer, and the second stage (blend stage) blends it into the framebuffer. We adaptively terminate the peeling loop if no pixels are rendered during the first stage, which is determined using an occlusion query for each loop iteration. The total number of iterations is thus one greater than the number of surface layers for the current viewpoint.</p><p>During the peel stage, we perform full surface shading, i.e. lighting and texture evaluation of the integral surface.</p><p>Transparency If required, the view-dependent transparency term α view is directly computed from the normal vector of the rendered fragment; in the case of normal-variation transparency, the GLSL instructions dFdx and dFdy are used to evaluate the partial derivatives in Equation 2 directly and with little additional overhead. Otherwise, α view is assigned a constant uniform value.</p><p>Pattern or Texture In the case of adaptive patterns, l s and l t are again computed using dFdx and dFdy, and Equation 5 can be directly evaluated, using either a procedural pattern that is directly evaluated in the shader or through corresponding texture lookups. Overall, we obtain texture color c tex and α tex .</p><p>Lighting The diffuse color of the surface is evaluated according to the specified lighting model; currently, we employ Phong and Gooch models. The result is the diffuse surface color c diffuse . We also compute specular highlight terms (c, α) spec if specified by the user; however, we keep diffuse and specular components separate to ensure correct blending of the highlights with the surface and texture colors. in the case where surface opacity should be multiplicatively modulated by the texture opacity. If additive modulation is desired, the alpha term changes to α final = α view + α tex + α specular .</p><p>The final RGBA values are written to a color buffer and surface normals required in the blend stage are stored in a secondary floatingpoint RGBA buffer. Here, the secondary A-component contains a mask to that indicates whether a pixel belongs to the integral surface or the context. This allows the blend stage operations to apply to surface pixels only and to not affect the context geometry pixels. Note that the depth information of the current surface layer is already stored into a separate depth texture that is required by the depth peeling algorithm.</p><p>In the blend stage, we determine the silhouette strength by applying a Sobel edge detection filter to both normal and depth buffers (as first described by <ref type="bibr" target="#b27">[28]</ref>). Here, the mask is used to avoid generating silhouette pixels across surface-context and context-background pixels, by excluding pixels that have the mask flag set for one of the pixels contributing to the filter. Then, depending on the silhouette strength, the surface color is smoothly faded into a user-specified silhouette color.</p><p>We note silhouettes are essentially extracted twice -once per pair successive depth layers -by this approach, possibly resulting in inner silhouettes of increased width. However, since we use a relatively sharp and symmetric edge detection filter, this effect is reduced. While pixel-exact silhouettes are preferable, we have nevertheless opted to use this edge detection approach due to its purely image-space nature whose complexity is a function of the viewport size rather than the object-space mesh size, which can be very large in our case (cf. <ref type="bibr" target="#b17">[18]</ref> for a more detailed discussion).</p><p>In our implementation, instead of blending directly to the output framebuffer, we make use of a floating-point color buffer for improved blending accuracy in the presence of many surface layers since slight banding artifacts can appear otherwise.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Performance</head><p>The rendering speed of the above pipeline is largely a function of the surface geometry size, and overall rendering time is dominated by the requirement to submit the surface for rendering multiple times during the depth peeling. For small to medium meshes of below ≈500K triangles with medium depth complexity of 10 layers or less, we achieve interactive frame rates exceeding 15fps on moderately current graphics hardware (NVidia GTX280). An exact quantification is difficultand we do not attempt one in this paper -since the adaptive termination of the depth peeling implies that the number of peeling passes is a function of the depth complexity of the surface, the surface representation, and the currently chosen viewpoint. Larger meshes with many layers result in correspondingly smaller frame rates.</p><p>We experimented with a number of different implementation techniques, including fully deferred shading (cf. Saito and Takahashi <ref type="bibr" target="#b27">[28]</ref>), but did not observe a significant variation in rendering speeds in our experiments. Again, we conclude that the geometry overhead from the multiple peeling passes dominates all other factors such as shader runtime or memory bandwidth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">EXAMPLES</head><p>In the following, we briefly wish to discuss a number of sensible ways in which patterns and/or textures can be applied to enhance the visualization of integral surfaces.</p><p>While we did not consider lighting and color in the previous section, it can nevertheless play an important role in generating insightful integral surface visualizations. In general, we have found highquality lighting, such as e.g. per-pixel evaluation of the commonly used Phong lighting model using multiple light sources, to be conducive to the impression of surface shape obtained by the viewer. However, approximately photorealistic lighting is not optimal in some situations. Especially in cases where the surface texture has strongly varying intensity (such as LIC-like images or stripes), the added variation through diffuse shading can lead to confusing results, since both shape and texture are encoded using only luminance information <ref type="bibr" target="#b34">[35]</ref>. In these situations, it can be beneficial to adopt hue values such as found e.g. in Gooch shading <ref type="bibr" target="#b11">[12]</ref>, to convey either of the two channels of information. Furthermore, since integral surfaces are typically not closed, we have found it very helpful to choose different colors for the two sides of the surface. To provide example illustrations, we used the rendering pipeline described in Section 5 to produce renderings of several integral surfaces computed for different flow fields.  Plume We applied normal variation based transparency to a streak surface in a dataset containing a rising plume <ref type="figure" target="#fig_8">(Fig. 9)</ref>. The plume contains many strongly folded surface parts that result in sharp ridges. Here, normal-variation curvature is particularly effective in preserving the opacity of the folds. In <ref type="figure" target="#fig_8">figure 9(a)</ref>, a transparency window is used to preserve context.  <ref type="figure" target="#fig_11">(Figure 10</ref>). Normal-variation based transparency is used to reveal the shape of the entire surface including otherwise difficult to recognize inner tube-like structures. Recognition of these shapes is further facilitated by the application of silhouettes. The surface is rendered using different colors for front and back sides (blue and orange, respectively). Thus, the viewer can recognize areas where the surface reverses orientation. For <ref type="figure" target="#fig_11">Figure 10(b)</ref>, an adaptive rectangular grid pattern was used to visualize both streamlines and timelines simultaneously. To avoid overwhelming the viewer with excessive lines, the texture modulates the surface opacity multiplicatively and is thus subject to transparency modulation. This causes the texture to be highlighted only on curved surface parts.  Figures 7(a) and 7 demonstrate the effect of multiplicative versus additive opacity modulation. Constant opacity is used with a striped texture to visualize streamlines. With additive modulation, the streamlines are more clearly visible while multiplicative modulation causes slightly less occlusion. <ref type="figure" target="#fig_11">Figure 10</ref>(c) shows a rendering featuring an effect similar to Line Integral Convolution, obtained by mapping a pre-convoluted (in tdirection) noise texture onto the surface using the adaptive pattern technique. The texture consists of noise blurred in t-direction. Coolwarm shading is used together with silhouettes to convey shape information. <ref type="figure" target="#fig_12">Figure 11</ref> shows renderings of a stream surface in the delta wing dataset. To visualize the flow direction on the surface, a stripe pattern along the s-direction is used with our adaptive pattern approach ( <ref type="figure" target="#fig_12">Fig. 11 (a)</ref>). A user-defined window is used to restrict normalvariation based transparency to a small area. In <ref type="figure" target="#fig_12">Figure 11</ref> (b), front and back side of the mesh are colored differently to indicate regions where the surface is flipped. Both figures apply windowed transparency and provide insight on the shape of otherwise hidden inner structures while preserving the context in the scene.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Delta Wing</head><p>Furthermore, <ref type="figure" target="#fig_0">Figure 12</ref> (a) illustrates strong normal variation transparency in combination with light silhouettes applied to the visualization of a stream surface traversing a vortex breakdown bubble in the same dataset. Even though the surface is quite complex, many layers and tube structures can be well identified. For the same surface, a visualization resembling a set of dense particle trajectories similar to those generated from dye advection-type methods (e.g. <ref type="bibr" target="#b35">[36]</ref>) can be obtained with the adaptive pattern technique, shown in <ref type="figure" target="#fig_0">Figure 12</ref>) (b). Here, s-stripes that indicate individual streamlines on an otherwise opaque surface are further modulated in opacity and color to indicate direction and time. Note that even though the texture coordinates of the surface are highly distorted, stripes are somewhat evenly distributed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">EVALUATION</head><p>While we have not attempted a systematic evaluation of the different illustrative styles discussed above, we have shown the resulting depictions to a number of collaborators from the flow simulation community. In the informal feedback we have gathered, the adaptive transparency was rated highly for providing improved insight into the inner surface structures while maintaining the context and shape of the surrounding layers. Here, the silhouettes were regarded important in determining layer boundaries. Furthermore, the additional shape cues provided through the adaptive patterns were determined useful to gain insight into aspects of the flow not conveyed by shape alone. In general, a more photorealistic look, including high-quality lighting, was generally preferred over more abstract depictions. While the feedback was largely positive, a more systematic study is indicated as future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSION</head><p>We have discussed several rendering techniques with regard to their applicability for illustrative visualization of integral surfaces. The presented techniques are incorporated in an illustrative rendering framework for integral surface visualization. View-dependent transparency criteria provide improved visualization of deeply nested flow struc-   <ref type="figure" target="#fig_0">Fig. 12</ref>. A stream surface visualizes flow inside a vortex breakdown bubble. In (a), the surface is rendered with strong normal variation transparency and light silhouettes. The opaque red stripe illustrates the front of the surface. In (b), a modulated stripe texture conveys the impression of dense particles traces; here, flow direction is indicated by intensity modulation, and velocity is expressed as the length of the traces.</p><p>tures, and an adaptive pattern approach easily allows application of both shape-accentuating and flow-illustrating patterns and textures. Our framework is applicable to dynamic or animated surfaces. It does not require expensive preprocessing of the integral surface mesh, and can thus be applied to both interactive and exploratory settings for static as well as dynamic datasets. Furthermore, we have provided an in-depth overview of the combined realization of the presented rendering techniques in the form of a rendering framework, and have discussed specific steps in detail. We have demonstrated the capabilities of our framework on several examples involving very complex integral surfaces from CFD applications.</p><p>In the future, we wish to examine incorporating the concept of style textures (described by Bruckner and Gröller <ref type="bibr" target="#b2">[3]</ref>) into our rendering pipeline to allow users to specify integral surface appearance by selecting a style. Furthermore, we wish to examine the efficient and effective mapping of glyphs onto the surface to allow users to annotate the surface. Last but not least, we plan to evaluate our approach through a formal user study.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>A comparison of different transparent rendering styles. Images (c) through (e) show the effect of view-dependent transparency modulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(a) Angle-based (b) Normal-variation Fig. 3. A comparison of angle-based and normal-variation viewdependent transparency rendering. In (b), the radius of the tubes affects the transparency; the thinnest tube is most opaque. Furthermore, the opacity gradient in (b) is stronger than in (a).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>(a) s-direction (b) t-direction(c) s-and t-direction (d) two-sided shading (e) cool-warm shading The adaptive pattern has a constant resolution in image space, regardless of the variation of the texture coordinates across the surface, as illustrated in (a), (b), and (c).Figure (d)demonstrates the effect of shading front and back sides of the surface in different colors, while (e) depicts cool-warm shading that substitutes color variation for surface brightness change for illumination.(a) Stripe pattern (b) Perspective view, adaptive stripe pattern Perspective distortion of texture density is addressed by adaptive pattern evaluation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 6 .</head><label>6</label><figDesc>(a) Regular stripe pattern.(b) Adaptive stripe pattern. Strong anisotropic surface texture coordinate stretching is addressed by an adaptive pattern.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 8 .</head><label>8</label><figDesc>Rendering pipeline overview.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>(a) Multiplicative modulation: opacity is not increased by the pattern (b) Additive modulation: the stripe pattern adds to the surface opacity Streamlines on a stream surface in the ellipsoid dataset are visualized by a stripe pattern.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Combination</head><label></label><figDesc>The final RGBA output (c, α) peel of the peel pass is computed as α final = α view • α tex + α specular and c final = c diffuse • c tex + c specular ,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>(a) Windowed transparency provides insight while preserving context.(b) Normal-variation transparency preserves folds.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>A rising plume streak surface is rendered using different styles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Ellipsoid</head><label></label><figDesc>Figures 10(a) and 10(b) show a stream surface of a flow field behind an ellipsoid</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>(a) Transparency based on normal variation conveys surface shape. (b) A grid pattern modulating opacity multiplicatively shows both streamlines and timelines. (c) Using a noise texture blurred in t-direction results in a LIC-like depiction of the flow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 10 .</head><label>10</label><figDesc>Flow behind an ellipsoid rendered using different styles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 11 .</head><label>11</label><figDesc>Stream surface in the delta wing dataset, with windowed transparency. In (a), a stripe texture is used to visualize streamlines, and deeper layers of a vortex are visible. (b) shows a front view with twosided surface coloring.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors wish to thank Markus Rütten from DLR Germany for the datasets used in this paper. We also thank our colleagues at the University of Kaiserslautern and at the Institute for Data Analysis and Visualization at UC Davis for discussion and support. This work was supported in part by the Director, Office of Advanced Scientific Computing Research, Office of Science, of the U.S. Department of Energy under Contract No. DE-FC02-06ER25780 through the Scientific Discovery through Advanced Computing (SciDAC) programs Visualization and Analytics Center for Enabling Technologies (VACET).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Order-independent transparency with dual depth peeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bavoli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NVIDIA Developer SDK</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Toolglass and magic lenses: the see-through interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Bier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Buxton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Derose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;93: Proceedings of the 20th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="73" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Style transfer functions for illustrative volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bruckner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="715" to="724" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Computergenerated graphite pencil rendering of 3d polygonal models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Brunet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Sousay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Buchananz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="195" to="207" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Interactive streak surface visualization on the gpu</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bürger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ferstl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Theisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1259" to="1266" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast visualization of object contours by non-photorealistic volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Csebfalvi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mroz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>König</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurographics</title>
		<meeting>Eurographics</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Transparency in interactive technical illustrations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Diepstraten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Volume illustration: non-photorealistic rendering of volume models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rheingans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;00: Proceedings of the conference on Visualization &apos;00</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="195" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Walk-through illustrations: Frame-coherent pen-and-ink style in a game engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Freudenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Masuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Strothotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurographics</title>
		<meeting>Eurographics</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="184" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Generation of accurate integral surfaces in time-dependent vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1404" to="1411" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Surface techniques for vortex visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Salzbrunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Eurographics -IEEE TCVG Symposium on Visualization</title>
		<meeting>Eurographics -IEEE TCVG Symposium on Visualization</meeting>
		<imprint>
			<date type="published" when="2004-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A non-photorealistic lighting model for automatic technical illustration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gooch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gooch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;98: Proceedings of the 25th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="447" to="452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Non-Photorealistic Rendering. A. K. Peters Ltd</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gooch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">A</forename><surname>Gooch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Texture synthesis for 3d shape representation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gorla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Interrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sapiro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="512" to="524" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Realtime ray-casting and advanced shading of discrete isosurfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hadwiger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sigg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Scharsach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bühler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="303" to="312" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Introduction to 3d non-photorealistic rendering: Silhouettes and outlines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hertzmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Non-Photorealistic Rendering (SIGGRAPH 99 Course Notes)</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Constructing stream surfaces in steady 3d vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P M</forename><surname>Hultquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization 1992</title>
		<editor>A. E. Kaufman and G. M. Nielson</editor>
		<meeting>IEEE Visualization 1992<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A developer&apos;s guide to silhouette algorithms for polygonal models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Isenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Freudenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Halper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schlechtweg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Strothotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Comput. Graph. Appl</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="28" to="37" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Apparent ridges for line drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Judd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Durand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">H</forename><surname>Adelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">19</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Curvaturebased transfer functions for direct volume rendering: Methods and applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kindlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Whitaker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Tasdizen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Möller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="513" to="520" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Time and streak surfaces for flow visualization in large time-varying data sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Joy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1267" to="1274" />
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">ClearView: An interactive context preserving hotspot visualization technique</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Krüger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics (Proceedings Visualization / Information Visualization</title>
		<imprint>
			<date type="published" when="2006-09" />
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Texture advection on stream surfaces: A novel hybrid visualization applied to CFD simulation results</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurovis 2006 (Eurographics / IEEE VGTC Symposium on Visualization)</title>
		<meeting>Eurovis 2006 (Eurographics / IEEE VGTC Symposium on Visualization)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="155" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">ISA and IBFVS: Image space-based visualization of flow on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jobard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="637" to="648" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Hierarchical streamarrows for the visualization of dynamical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Löffelmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mroz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Eurographics Workshop on Visualization in Scientific Computing</title>
		<meeting>the 8th Eurographics Workshop on Visualization in Scientific Computing</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="203" to="211" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Stream arrows: enhancing the use of stream surfaces for the visualization of dynamical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Löffelmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mroz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gröller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Purgathofer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="359" to="369" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Real-time hatching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Praun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Webb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Finkelstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;01: Proceedings of the 28th annual conference on Computer graphics and interactive techniques</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page">581</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Comprehensible rendering of 3-d shapes. SIG-GRAPH</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Takahashi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Graph</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="197" to="206" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Point-based stream surfaces and path surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schafhitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tejada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="289" to="296" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A tetrahedra-based stream surface algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bobach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mahrous</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kollmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization &apos;01 Conference</title>
		<meeting>IEEE Visualization &apos;01 Conference</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="151" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Sousa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Samavati</surname></persName>
		</author>
		<title level="m">Precise Ink Drawing of 3D Models. EUROGRAPHICS2003</title>
		<imprint>
			<date type="published" when="2003-09" />
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="369" to="379" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Non-Photorealistic Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Strothotte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schlechtweg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Implicit stream surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization &apos;93 Conference</title>
		<meeting>IEEE Visualization &apos;93 Conference</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="245" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Smoke surfaces: An interactive flow visualization technique inspired by real-world flow experiments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Funck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weinkauf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Theisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1396" to="1403" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A hybrid physical/device-space approach for spatio-temporally coherent interactive texture advection on curved surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GI &apos;04: Proceedings of Graphics Interface</title>
		<imprint>
			<publisher>Canadian Human-Computer Communications Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="263" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Real-time advection and volumetric illumination for the visualization of 3d unsteady flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schafhitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurovis (EG/IEEE TCVG Symp. Vis.)</title>
		<meeting>Eurovis (EG/IEEE TCVG Symp. Vis.)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="13" to="20" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
