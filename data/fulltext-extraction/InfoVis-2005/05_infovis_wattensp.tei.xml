<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Note on Space-Filling Visualizations and Space-Filling Curves</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Wattenberg</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ibm</forename><surname>Research</surname></persName>
						</author>
						<title level="a" type="main">A Note on Space-Filling Visualizations and Space-Filling Curves</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A recent line of treemap research has focused on layout algorithms that optimize properties such as stability, preservation of ordering information, and aspect ratio of rectangles. No ideal treemap layout algorithm has been found, and so it is natural to explore layouts that produce non-rectangular regions. This note describes a connection between space-filling visualizations and the mathematics of space-filling curves, and uses that connection to characterize a family of layout algorithms which produce nonrectangular regions but enjoy geometric continuity under changes to the data and legibility even for highly unbalanced trees.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Space-filling visualizations, such as treemaps <ref type="bibr" target="#b11">[12]</ref>, are a widely used type of information display. These techniques scale well, with the capacity to show thousands of items legibly. The key difference among various space-filling techniques is the method by which they partition the screen.</p><p>At the core of a space-filling visualization is a layout function L that takes as an argument a list of k non-negative real numbers, (x 1 , x 2 , …, x k ), and returns a corresponding partition of a rectangle into regions (r 1 , r 2 , …, r k ), where Area(r i ) is proportional to x i . Typically the regions are assumed to be disjoint or have zero-area intersection. For hierarchical data, one typically then divides the regions into subregions, based on an identical or similar layout function.</p><p>Unfortunately, not all functions L make for good displays. In the case of treemaps, while many layout functions have been proposed <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15]</ref>, all suggested functions have drawbacks: <ref type="bibr" target="#b2">[3]</ref> discusses various potential problems, such as lack of continuity of L or highly elongated shapes for the output regions. A natural question is whether these problems arise because treemaps are constrained to produce rectangular regions whose union is the unit square. For instance, in a treemap it is considered bad to have a rectangle that has a very high aspect ratio-yet to represent the list of numbers (999,1) a treemap must have an item whose aspect ratio is 1,000. While this may seem like a contrived example, it does arise in the real world; one case is in visualizing the highly unbalanced trees that are often produced by hierarchical agglomerative clustering.</p><p>Given the intrinsic limitations of rectangular layouts, one might ask what might be gained by giving up the condition that regions be rectangular. Indeed, several nonrectangular space-filling visualizations have been developed, including quantum bubblemaps <ref type="bibr" target="#b2">[3]</ref>, the polygonal maps of Nguyen and Huang <ref type="bibr" target="#b10">[11]</ref>, and Voronoi Treemaps <ref type="bibr" target="#b0">[1]</ref>. While these maps enjoy helpful visual attributes, their continuity properties are unclear.</p><p>In this note we write down a list of natural but strong conditions for a layout function L, and ask whether it is possible to meet these goals by allowing nonrectangular--even nonconvex-regions. Following an insight of Keim <ref type="bibr" target="#b7">[8]</ref>, we show that it is indeed possible, using a type of layout we term a jigsaw map due to the resemblance of its regions to jigsaw puzzle pieces, and we show examples of jigsaw maps applied to highly unbalanced trees that arise in bioinformatics.</p><p>Although their practical value still needs to be evaluated, jigsaw maps serve a theoretical purpose as well: We prove a theorem that any layout algorithm that meets every property in our list of desirable attributes is essentially a jigsaw map, thus providing a complete characterization of such layout functions in terms of discrete space-filling curves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PERFECT LAYOUT FUNCTIONS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Desirable layout properties</head><p>The efficacy of a space-filling visualization depends on the layout function L. Experience with treemaps has uncovered a variety of desirable attributes for a layout function. In this section we describe these properties informally and discuss why they are important; in the next section we make them mathematically precise.</p><p>The first treemap layout <ref type="bibr" target="#b11">[12]</ref> was known as the "slice and dice" method, and in practice led to layouts with rectangles with extremely high aspect ratios. Such long, skinny rectangles are difficult to see and select, and subsequent work on treemap layout algorithms discussed new algorithms which produced rectangles with a more compact shape, that is, aspect ratios closer to 1. See for example the squarified layouts of <ref type="bibr" target="#b3">[4]</ref> or the recursive "cluster" layout of the SmartMoney Map of the Market <ref type="bibr" target="#b14">[15]</ref>.</p><p>These new algorithms turn out to share some new drawbacks: as the sizes of items in the layout changed, the structure of the layout itself changes discontinuously. Since many treemaps are designed to show time-varying data, such instability can be a significant distraction. In addition, since both the cluster and squarified algorithms involve a step which sorts elements by size, any underlying ordering of the items is destroyed.</p><p>As items are added or removed from the input list, the layout can change dramatically. Because the structure of treemap data often changes over time as well (with, for example, companies in the stock market splitting and merging) it would be nice if, when an item splits into two smaller items of the same total size as the original, that the rest of the layout shouldn't be affected.</p><p>To sum up, four desirable properties of a layout function are nicely shaped regions, stability with regard to changing leaf values, stability with regard to changing tree structure, and preservation of ordering information. We now make these desiderata precise.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE Symposium on Information Visualization 2005</head><p>October 23-25, Minneapolis, MN, USA 0-7803-9464-X/05/$20.00 ©2005 IEEE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.2</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Discretizing the Problem</head><p>Layout functions are often defined in terms of real numbers. In what follows we consider instead a discrete version of the problem, defining layouts that partition a square mesh of pixels with integer coordinates. To be precise, we define a layout function L to be a function whose domain is sequences (x 1 , x 2 , …, x k ), of integers whose sum is n 2 , and whose range is sequences of disjoint connected subsets (r 1 , r 2 , …, r k ) of the mesh (1,2,…,n) x (1,2,..,n), such that |r i |= x i . For simplicity we have defined the layout function on a square mesh, but as discussed below we do not lose any generality by doing so. In practice it is unlikely that the item sizes x i will just happen to add up to n 2 , so the values will need to be normalized appropriately, with care taken so that round-off errors do not accumulate.</p><p>We shift to the discrete perspective partly because it simplifies the exposition and partly to more accurately model a computer screen made from individual pixels. Note that [3] discussed a similar "quantum" layout; there, the goal was to pack pictures into a readable grid. Since every space-filling algorithm must at least implicitly work this way in practice, even if only during the rasterization process, this is a reasonable perspective to take.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Perfect layouts</head><p>Based on the considerations described in the introduction, we can list four generally desirable properties for a layout function. In what follows, let L be a layout function and</p><formula xml:id="formula_0">x=(x 1 , x 2 , …, x k ) be an arbitrary input vector with L(x)=(r 1 ,r 2 ,…,r n ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Stability:</head><p>Let y be any input vector of the same length as x, differing only at two positions, i and j, with x i =y i +1 and x j = y j -1. Then corresponding regions in L(x) and L(y) should differ by at most two items. This may be viewed as a discrete version of a continuity condition, and says that the smallest possible change in inputs should yield the smallest possible change in outputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Split Neutrality:</head><p>Suppose y=(y 1 , y 2 , …, y k+1 ) is an input vector such that for some j&lt;=n we have x i =y i for i&lt;j, x i =y i +1 for i&gt;j+1, and</p><formula xml:id="formula_1">x j =y i +y j +1. Let L(y)=(s 1 ,s 2 ,,..s n+1 ).</formula><p>Then we require r i =s i for i&lt;j, r i =s i +1 for i&gt;j+1, and r j =y j union y j +1. Informally, this says that structural changes are handled smoothly: if we have a set of items, and one of those items is replaced by ("splits into") two items whose sum is the original one, then in the corresponding layouts, the region for the original item splits into two subregions, with no other region affected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Order Adjacency:</head><p>Because order is often important, r i should be adjacent to r i+1 for each i&lt;k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">c-Locality:</head><p>The diameter of a region r i should be bounded by a small constant c times the square root of the area of r i . In other words, layout regions should be relatively compact, rather than long and narrow, to aid in seeing and selecting regions. This is the analogue for nonrectangular shapes of the treemap criterion that aspect ratios should be close to 1. <ref type="bibr" target="#b2">(Bederson et al, 2002)</ref> Properties 1 and 2 ensure that small changes in the underlying data will lead to small changes in the corresponding layout. Property 1 has been discussed previously with regard to treemaps in <ref type="bibr" target="#b2">[3]</ref>. Property 2 is necessary to discuss smooth change as items are inserted or deleted in the input lists. Property 3 requires some sense of sequence to be preserved. It is an interesting question to what extent these properties are redundant. It is fairly easy to see that split-neutrality and order-adjacency imply stability (using an argument similar to the proof of Theorem 2, below) but a more challenging question is whether stability and order adjacency imply some type of split-neutrality.</p><p>Property 4 essentially says that the regions cannot be too long and skinny-one might think of this as an anti-gerrymandering provision. It is the analogue of the restrictions on aspect ratios that arise when discussing good treemap layouts.</p><p>If a layout function satisfies all four properties, we call it perfect. (Here "perfect" is used in a mathematical sense of completely satisfying the list of properties; we make no claim that a perfect layout is the best way to present any particular data set.) No layout algorithm in the literature satisfies all four properties. Most layout algorithms currently used in treemaps (squarified, cluster, and strip <ref type="bibr" target="#b2">[3]</ref>) are not continuous, for example. Squarified and cluster treemaps are not order-preserving and not splitneutral, since they rearrange items by size. The very simple algorithm used in each level of a slice-and-dice layout does satisfy the first three properties but does not enjoy the c-locality property.</p><p>In the introduction we discussed how the simple case of laying out two items with weights 1 and 999 with rectangles implies a high aspect ratio. Because of this simple obstacle (and others) to perfect rectangle-based layouts, one may ask whether any perfect layouts exist. The answer, as we now show, is yes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Space-filling curves and mesh indices</head><p>To construct a perfect layout, we require the concept of a spacefilling curve. A space-filling curve is a continuous function that, roughly speaking, maps a one-dimensional space onto a higher dimensional space. Such curves have been used in computer science for many applications due their good clustering properties; see for example <ref type="bibr" target="#b6">[7]</ref> and <ref type="bibr" target="#b8">[9]</ref>. They were introduced in the context of information visualization by <ref type="bibr">Keim [8]</ref> who proposed using these curves to help place related items near to each other in a pixel-oriented layout. (Keim's work differs from this paper in that he considers positioning large numbers of single-pixel items, rather than items of many different sizes.)</p><p>Keim uses a discrete version of a space-filling curve, which he terms a screen-filling curve. (Another term used in the literature is a mesh index.) We may define a screen-filling curve as a one-toone function h: (1, 2, …, n 2 ) (1, 2, …, n)x(1, 2, …, n) with the "continuity" property that h(i) and h(i+1) are adjacent.</p><p>Many screen-filling curves are known that enjoy an additional strong locality property:</p><formula xml:id="formula_2">Distance(h(i), h(j)) &lt; c|i-j| 1/2</formula><p>for some small constant c. It is this locality condition which we use to construct layout functions that satisfy property 4. The classical Hilbert curve has c= 6 (see <ref type="bibr" target="#b9">[10]</ref>) but better values are possible. The smallest known value of c, conjectured to be optimal, is 2, which holds for the so-called H-Curve <ref type="bibr" target="#b9">[10]</ref>. (The H-Curve can be constructed for rectangles of arbitrary dimensions, as well as squares, which is why we have lost no generality in assuming the mesh is square.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2. Some examples of H-Curves.</head><p>The diagram above shows three examples of H-Curves of different lengths on different meshes. Note that if there is a different number of items than grid elements-as must happen if there are a prime number iof leaf nodes--there may be empty space resulting in a little empty "notch" in the on corner; see <ref type="figure" target="#fig_3">Figure 5</ref> for an example of this discretization phenomenon.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">The Jigsaw Map: A Perfect Layout Function</head><p>We now define the jigsaw map and prove it is a perfect layout function. The idea behind a jigsaw map is to solve a trivial onedimensional layout problem and then map that one-dimensional layout into two dimensions using a screen-filling curve.</p><p>As before, let the input sequence be given by</p><formula xml:id="formula_3">x=(x 1 , x 2 , …, x k ), where x 1 + x 2 + … + x k . = n 2 .</formula><p>We define the jigsaw layout function J using two other functions: a screen-filling curve satisfying clocality, which we call H, and a trivial "one dimensional layout function," g.</p><p>To define this second function, let m i = x 1 + x 2 … + x i . Thus m 1 =x 1 and m k = n 2 . Let g be the function that maps x to the following sequences of subsets of {1,2, …, n 2 } :</p><formula xml:id="formula_4">g(x) = ({1, 2, …, m 1 }, {m 1 +1, …, m 2 }, …, {m k-1 +1, … m k }).</formula><p>Intuitively, we can think of g as a sort of "one dimensional" layout function that creates a perfect layout on a 1 x n 2 mesh. Now let</p><formula xml:id="formula_5">J(x) = H(g(x)),</formula><p>where the function composition is taken to mean:</p><formula xml:id="formula_6">J(x) = ({H(1), H(2), …, H(m 1 )}, … , {H(m k-1 ), H(m k-1 +1),…, H(m k )}). THEOREM 1.</formula><p>J is a perfect layout function.</p><p>PROOF. Because of the "continuity" property of the screen-filling curve H, J must have the stability property and order-adjacency property. The c-locality property of H implies c-locality of J. It is easy to see that g is "split-neutral," in the sense that splitting one of the x i will not affect the partitions of the others, and therefore J will also be split-neutral. Hence J is a perfect layout function.</p><p>The diagram below is a schematic version of the process of creating a jigsaw layout. At left is a one-dimensional layout corresponding to the function g, at center is the same layout extended to a screen-filling curve, and at right is the actual spacefilling result. Note that there is one point that we have skipped past in the construction, and that is how to use the function J to layout a hierarchy of objects, rather than a flat sequence. To do so is simple, however: simply create a one-dimensional layout using a depth-first ordering of leaf nodes, and then apply H.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.6</head><p>All Perfect Layout Functions are Jigsaw Maps Are there other perfect layouts besides the jigsaw construction described above? It turns out the answer is no: a converse to Theorem 1 holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THEOREM 2.</head><p>Any perfect layout function L can be written as L = H(g), where H is a screen-filling curve and g is the one-dimensional layout function defined in the previous section. If L satisfies the clocality property, the screen-filling curve H has the locality property that distance(H(i), H(j)) &lt; c|i-j| 1/2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF.</head><p>Consider the input sequence S of n 2 ones. That is, S = (1,1, …, 1) with n 2 entries. Then for some integers {a i }, L(S)=({a 1 }, {a 2 }, … ). Now we can "read off" the function H, and define:</p><formula xml:id="formula_7">H(i)=a i .</formula><p>We first show that L=H(g). This follows from split-neutrality: for an arbitrary input x=(x 1 , x 2 , …, x k ) we may first consider a sequence of "splits" of the input into y= <ref type="figure" target="#fig_0">(1,1,1..1, x 2 , …, x k )</ref> where there are x 1 1's at the beginning. We may then consider a second set of splits of y into the all-ones vector S. By definition, L maps the first x 1 1's in S to the sequence A=({a 1 }, {a 2 }, …, {a x1 }). By split-neutrality, L must also map the first x 1 1's in y to A. Finally, again by split-neutrality, the first element of L(x) must be {a 1 , a 2 , …, a x1 } = {H(1), H(2), …, H(x 1 )}.</p><p>In a similar fashion one can see the same is true for each x i , and thus L=H(g).</p><p>The remaining properties follow quickly. Because L is a layout function, h is one-to-one. By order-adjacency, H has the "continuity" property and is a screen-filling curve.</p><p>Finally, to see that H has the c-locality property, consider i&lt;j. Let d = j-i. Consider the input (i, d, n 2 -j). L will map the middle item onto a region of size d that contains H(i) and H(j), which by c-locality of L implies distance(H(i), H(j)) &lt; c|i-j| 1/2 . This completes the proof of the theorem.</p><p>DISCUSSION. Theorem 1 and Theorem 2 give a fairly complete characterization of perfect layout functions, and allow us to phrase questions about perfect layouts (a relatively unstudied concept) in terms of the better-investigated area of space-filling curves. For example, the H-Curve is conjectured to have the best possible value of the locality constant c. If this conjecture is proven, it means that 2 is the best compactness constant for a perfect layout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">APPLICATIONS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">An example using microarray data</head><p>The preceding discussion has been abstract, and the reader may be wondering whether the strong properties of a perfect layout function are more than just a mathematical curiosity. In this section we describe an application that was the inspiration for the jigsaw map method: creating a visualization of microarray data.</p><p>A detailed description of gene chip microarrays is beyond the scope of this paper, but generally speaking it is a technology for measuring the expression levels of many different genes under many different conditions. Microarray data typically takes the form of thousands of different vectors (one per gene) in a space with tens or even hundreds of dimensions (one per sample or experimental condition). Making sense of such data is difficult, but one standard technique is to organize the thousands of vectors using hierarchical clustering. The output of a hierarchical clustering is a binary tree, whose leaves correspond to particular vectors; such trees are usually highly unbalanced.</p><p>Visualizations of such trees have been standard among biologists since <ref type="bibr" target="#b4">[5]</ref> introduced a combination heatmap/dendrogram designed to create a "map" of an entire set of hierarchically clustered vectors. Because such diagrams attempt to show all the data on one screen, they quickly become unwieldy. It is natural to ask whether the tree structure produced by the clustering can be used as part of a space-filling layout to show expression levels of genes in one particular sample. To see how jigsaw maps might work in this context, we apply the technique to data from <ref type="bibr" target="#b5">[6]</ref>, consisting of statistics for approximately 6000 yeast genes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Treemap / Jigsaw Map Comparison</head><p>It is natural to use the tree structure as an input to a treemap, assigning each gene a weight of one. Unfortunately, the highly unbalanced binary trees produced by the hierarchical clustering represent a sort of perfect storm for traditional treemaps. Because the trees are binary, the traditional means of reducing aspect ratios-cluster, squarified, and strip layouts-all reduce to the slice-and-dice layout. The top row of <ref type="figure" target="#fig_3">Figure 5</ref> (at end of paper) shows a treemap version of the data from <ref type="bibr" target="#b5">[6]</ref>. At left is the "skeleton" of the layout, with higher-level branches outlined in darker colors; at right is a heatmap version of the same tree, showing expression level data with a red-black-green color scheme. It is clear that the treemap slice-and-dice layout produces many high-aspect ratio rectangles. What is not visible is even worse: almost 10% of the rectangles are so thin that they are not even able to be drawn on the screen (and obviously would also be impossible to select with the mouse).</p><p>By contrast, the jigsaw map is easily able to show all the data without any distortion of leaf nodes. The bottom row of <ref type="figure" target="#fig_3">Figure 5</ref> shows a jigsaw layout of the same data. The jigsaw layout allows every leaf node to be roughly square, and easily visible and selectable. In the heatmap version, the various regions with many genes that have been up-or down-regulated together are obvious.</p><p>At the same time, the irregular puzzle-piece shapes certainly look odd, and seem likely to make it more difficult to compare areas and understand the tree topology than a treemap does. Without further testing, it is hard to evaluate the tradeoffs. At the very least, due to Theorem 2, the jigsaw map can be viewed as an upper bound for visualizations based on perfect layouts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">CONCLUSION AND FUTURE DIRECTIONS</head><p>This paper has defined the notion of a "perfect" layout function: a layout method for a space-filling visualization that satisfies four desirable criteria. We constructed an example of such a layout, the jigsaw map, by using the notion of a screen-filling curve. We then proved that any perfect layout function is actually an instance of a jigsaw map, thus providing a complete characterization of perfect layouts in terms of screen-filling curves.</p><p>We finished by providing an example of the jigsaw map in action, displaying real-world data with a highly unbalanced tree structure derived from hierarchical agglomerative clustering. Such trees are common in the bioinformatics literature, and provide a natural application for jigsaw layouts. The example shows how jigsaw layouts do a significantly better job than a treemap at maintaining leaf nodes with decent aspect ratios.</p><p>There are several interesting future directions suggested by this work. One is to further explore the mathematics of perfect layouts. The criteria that define a perfect layout are extremely strict, and relaxing the criteria may make sense in certain cases. For example, we have adopted the strictest possible definition of stability, but it could easily be made less stringent. It is also unclear whether perfect layouts could be characterized by a simpler set of criteria than the ones given above. In particular, the split-neutrality condition seems very strong, but it may be unnecessary given stability and order-adjacency.</p><p>Another question is whether, if we look in the continuous domain, there is a related notion of perfect layout that allows for a layout function that creates convex polygons. It is likely that the split neutrality condition would need to be relaxed somewhat in this case.</p><p>More generally, it would be good to know more about how various layout criteria interact. For example, suppose that we relax the condition that all the space on the screen be used for data, but instead ask require that a fixed percentage be used? What if we allow slight overlaps between regions? Are there then good layouts with extremely regular regions such as circles and squares? A systematic investigation of the interplay between criteria for space-filling layouts promises to be fruitful. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Some examples of Hilbert Curves.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Using an H-Curve to Create a Jigsaw Map.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .</head><label>4</label><figDesc>Sample Jigsaw Map Layouts.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Top left: treemap skeleton layout (necessarily slice-and-dice, since the tree is binary. Top right: scalar data overlaid on this map. Bottom left: jigsaw skeleton of same tree. Bottom right: jigsaw map with scalar data.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">Rogers Street, Cambridge MA 02142 mwatten@us.ibm.com</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>Thanks to R. Niedermeyer for use of Java code to produce an H-Curve, and to the anonymous referees for useful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Voronoi Treemaps for the Visualization of Software Metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Balzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Deussen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2005 ACM Symposium on Software Visualization</title>
		<meeting>the 2005 ACM Symposium on Software Visualization</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="165" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">PhotoMesa: a zoomable image browser using quantum treemaps and bubblemaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th annual ACM symposium on User interface software and technology</title>
		<meeting>the 14th annual ACM symposium on User interface software and technology</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Ordered and quantum treemaps: Making effective use of 2D space to display hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bederson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page">4</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bruls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Huizing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<title level="m">Squarified treemaps. Proceedings of Joint Eurographics and IEEE TCVG</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Cluster analysis and display of genome-wide expression patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eisen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Spellman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Botstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the National Academy of Sciences</title>
		<meeting>the National Academy of Sciences</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Genomic expression programs in the response of yeast cells to environmental changes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gasch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Spellman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Carmel-Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eisen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Storz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Botstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Molecular Biology of the Cell</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="4241" to="4257" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">On the Metric Properties of Discrete Space-Filling Curves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gotsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lindenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Image Processing</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Enhancing the Visual Clustering of Query-Dependent Database Visualization Techniques Using Screen-Filling Curves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Keim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture Notes In Computer Science</title>
		<imprint>
			<biblScope unit="volume">1183</biblScope>
			<biblScope unit="page" from="101" to="110" />
			<date type="published" when="1995" />
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Analysis of the Clustering Properties of the Hilbert Space-Filling Curve</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Moon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">V</forename><surname>Jagadish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Saltz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Niedermeier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Reinhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sanders</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Towards Optimal Locality in Mesh-Indexings</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">1279</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Space-Optimized Tree Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Information Visualization 2002 Symposium on Visualization (TCVG 2000</title>
		<meeting>the IEEE Symposium on Information Visualization 2002 Symposium on Visualization (TCVG 2000</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="33" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Tree visualization with tree-maps: 2-d space-filling approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Ordered Treemap Layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Information Visualization</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Modifiable treemaps containing variable-shaped units Proceedings of Extended Abstracts of IEEE Information Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Vernier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nigay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Visualizing the stock market, CHI &apos;99 extended abstracts on Human factors in computing systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
