<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">VisMashup: Streamlining the Creation of Custom Visualization Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emanuele</forename><surname>Santos</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lauro</forename><surname>Lins</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">P</forename><surname>Ahrens</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juliana</forename><surname>Freire</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cl√°udio</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
						</author>
						<title level="a" type="main">VisMashup: Streamlining the Creation of Custom Visualization Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">Fig. 1: Creating an Astrophysics VisMashup to explore a binary star system.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:54+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Scientific Visualization</term>
					<term>Dataflow</term>
					<term>Visualization Systems</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Visualization is essential for understanding the increasing volumes of digital data. However, the process required to create insightful visualizations is involved and time consuming. Although several visualization tools are available, including tools with sophisticated visual interfaces, they are out of reach for users who have little or no knowledge of visualization techniques and/or who do not have programming expertise. In this paper, we propose VISMASHUP, a new framework for streamlining the creation of customized visualization applications. Because these applications can be customized for very specific tasks, they can hide much of the complexity in a visualization specification and make it easier for users to explore visualizations by manipulating a small set of parameters. We describe the framework and how it supports the various tasks a designer needs to carry out to develop an application, from mining and exploring a set of visualization specifications (pipelines), to the creation of simplified views of the pipelines, and the automatic generation of the application and its interface. We also describe the implementation of the system and demonstrate its use in two real application scenarios.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Data exploration through visualization is an effective means to understand and obtain insights from large collections of data. Not surprisingly, visualization has become a mature area with an established research agenda <ref type="bibr" target="#b19">[21]</ref>, and several systems have been developed that support the creation of complex visualizations <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr">20,</ref><ref type="bibr" target="#b20">22,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b33">35]</ref>. But even using systems that have sophisticated visual programming interfaces, such as AVS, DX, SCIRun, and VisTrails, the path from the raw data to insightful visualizations is laborious and error-prone. And this has hampered a wider adoption of visualization techniques.</p><p>Visual programming interfaces expose computational components as modules and allow the creation of complex visualization pipelines which combine these modules in a dataflow, where connections between modules express the flow of data through the pipeline <ref type="bibr" target="#b15">[16]</ref>. They also provide built-in constraint checking mechanisms (e.g., that disallow a connection between incompatible module ports) that simplify the creation of pipelines. Recently, new techniques have been proposed to simplify the creation and refinement of these pipelines, including recommendation systems <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b25">27]</ref> and a mechanism to refine pipelines by analogy <ref type="bibr" target="#b22">[24]</ref>. Notwithstanding, without detailed knowledge of the underlying computational components, it is difficult to understand what series of modules and connections ought to be added to obtain a desired result. Consequently, the generation of visualizations is a task that is best carried out by experts who are familiar with visualization techniques and tools. Recognizing this problem, there have been a number of efforts to create simpler visualization applications (e.g., <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b26">28,</ref><ref type="bibr" target="#b30">32]</ref>) that are customized to a particular task (e.g., <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b17">18]</ref>) and that use concepts that are more meaningful to domain experts than visualization primitives. Some systems <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b26">28,</ref><ref type="bibr" target="#b30">32]</ref> provide customized interfaces that allow users to control the parameters of a pipeline. These simplified interfaces are easier to use than the general systems and can be designed specifically for domain experts that do not have expertise in visualization. Nonetheless, they are expensive to create and maintain. The lifecycle for developing custom applications is often long, requiring several iterations until the application does what the end-user needs. Whereas such solutions can be (and have been) successfully applied in big scientific projects, they are out of reach for smaller-scale efforts. The costs involved in creating these applications make them unsuitable for one-of-a-kind, exploratory visualizations. Our Approach. In this paper we propose VISMASHUP, a new approach for simplifying the creation, maintenance, and use of customized visualization applications (or mashups). Because VIS-MASHUP uses dataflows as the underlying model, in principle, it can be combined with visualization systems that use dataflows to specify pipelines (e.g., VTK-based systems such as ParaView <ref type="bibr" target="#b13">[14]</ref> and VisTrails <ref type="bibr" target="#b33">[35]</ref>). In addition to pipelines defined as dataflows, VISMASHUP requires the visualization systems to provide access to pipeline specifications, the ability identify and change pipeline components, and to execute the pipelines. As shown in <ref type="figure" target="#fig_0">Figure 2</ref>, the VIS-MASHUP system consists of a set of components that support tasks an application designer has to perform to construct a custom application. The Pipeline acquisition and analysis component allows designers to query and mine pipeline collections and their provenance <ref type="bibr" target="#b8">[9]</ref>. This enables them to identify relevant pipelines, discover interesting parameters that should be exposed in the application, as well as a set of valid values that can be used for these parameters. Through a point-andclick interface, the Template/pipeline view creation component allows a designer to manipulate pipelines and create simplified views which expose only the pipeline components that are relevant for a given task. Pipeline views can then be combined into a medley (see Sec. 3.2) to create more complex, exploratory tasks (Medley creation). The App generation component uses the medley specification to automatically generate the application and associated user interface. VISMASHUP also maintains detailed provenance information of the application development process and use (Medley Provenance). As we discuss in Section 3, this information can be used to further refine and improve the derived apps.</p><p>While this infrastructure simplifies the job of an application designer, it gives an end-user the flexibility to create visualizations through a simple interface that hides unnecessary details of the underlying pipelines and how they are integrated. Furthermore, end-users also have the ability to customize a mashup, by hiding and showing components as well as moving them around in the interface. Outline. The remainder of the paper is organized as follows. We review related work in Sec. 2. In Sec. 3, we introduce the basic concepts and describe the main components of the VISMASHUP model. The implementation details of the VISMASHUP components and their interfaces are presented in Sec. 4. In Sec. 5, we present two case studies where we applied the VISMASHUP system: a mashup that allows users to interact with astrophysics analyses; and a mashup that allows neuroscientists to explore and compare complex visualizations for a study on the effects of repetitive Trans-cranial Magnetic Stimulation (rTMS) on working memory. We conclude in Sec. 6, where we outline directions for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>A number of visualization systems have been proposed that provide sophisticated visual programming interfaces. These interfaces aim to simplify the creation of visualizations by allowing users to create pipelines which combine computational components (modules) in a dataflow <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b20">22,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b33">35]</ref>. However, without detailed knowledge of the underlying computational components, it is difficult to understand what series of modules and connections ought to be added to obtain a desired result. Other systems, such as ParaView <ref type="bibr" target="#b13">[14]</ref>, go a step further and not only hide the details of the pipelines, but also provide abstractions that simplify the creation of visualizations. However, these systems are still very general and require detailed knowledge of visualization techniques. Similar to these tools, VISMASHUP relies on dataflows which describe a series of visualizations, and like ParaView, the derived applications hide the underlying pipelines. However, with VISMASHUP, customized (specific) applications can be derived that are targeted to end-users who do not necessarily have knowledge of visualization.</p><p>Another approach that has been used to simplify data exploration through visualization is the creation of custom applications. CDAT, for example, is a tool designed for climatologists that supports visual exploration of climate data <ref type="bibr" target="#b4">[5]</ref>. Because such applications are costly to develop, this approach is not scalable. Instead of building applications from scratch, some systems (e.g., AVS <ref type="bibr" target="#b30">[32]</ref>, IRIS Explorer <ref type="bibr" target="#b7">[8]</ref>, VISSION <ref type="bibr" target="#b26">[28]</ref> and SCIRun <ref type="bibr" target="#b17">[18]</ref>) allow the creation of customized interfaces for visualization pipelines. In SCIRun, these interfaces are called PowerApps. BioFEM, for example, is a PowerApp built atop of a SCIRun pipeline that solves a bioelectric forward problem using the finite element method provided by Biological Problem Solving Environment (BioPSE) tools <ref type="bibr" target="#b17">[18]</ref>. BioFEM consolidates all necessary user controls in a single UI, hiding other generic controls and the associated dataflow network. Unfortunately, a SCIRun PowerApp needs to be manually crafted for a given pipeline. IRIS Explorer provides a GUI to facilitate the layout and design of widgets representing parameters, but users need to manually create the interfaces. Similar to VISSION, VISMASHUP automatically derives the application interface from a dataflow network. But VISMASHUP goes a step further: it provides a comprehensive infrastructure that allows the application developer to explore collections of pipelines and combine them to create the applications. Another important distinction between our approach and previous systems is that it captures detailed provenance of both application development and use.</p><p>Several approaches have been proposed whose goal is to simplify application development, from high-level programming languages such as Ruby 1 and Python 2 , to visual programming tools such as Visual Basic. These, however, still require programming expertise. More recently, there have been a number of proposals for tools targeted to non-programmers. For example, Yang et al. <ref type="bibr" target="#b35">[37]</ref> proposed a WYSIWYG tool that aids in the development of data-driven Web applications; and Yahoo! Pipes <ref type="bibr" target="#b34">[36]</ref> provides a visual interface through which users can assemble pipelines for constructing Web mashups. Although VISMASHUP shares some of the same goals, our approach targets the construction of applications which use dataflows as basic building blocks.</p><p>Reduced-functionality interfaces, such as training wheels <ref type="bibr" target="#b3">[4]</ref>, have been used to help first-time and novice users of complex systems. In these interfaces, advanced features are disabled on the GUI to prevent user errors and confusion. Shneiderman <ref type="bibr" target="#b23">[25]</ref> proposed the design of layered interfaces, which provide a set of increasingly complex interfaces, allowing the user to select the interface that best suits her needs. VISMASHUP naturally supports both techniques-the designer can easily create several variations of an application through a series of pipeline views. In addition, because provenance is maintained, detailed information about how the different application versions were created and their differences is readily available. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MODEL</head><p>In what follows, we present the basic concepts underlying the model we propose for generating customized visualization apps. Dataflows. We assume that the dataflow <ref type="bibr" target="#b15">[16]</ref> model is used to specify visualization pipelines. In this model, a pipeline is represented as a directed acyclic graph (DAG) where nodes (modules) represent computations and arcs (connections) denote data dependencies. If there is an arc from node m to node n, n requires the output of m to execute. Besides the outputs of earlier computations, nodes can also have parameters (data values) as inputs. The dataflow model is widely-used in visualization systems, including ConMan <ref type="bibr" target="#b9">[10]</ref>, AVS <ref type="bibr" target="#b30">[32]</ref>, SCIRun <ref type="bibr" target="#b20">[22]</ref>, and VTK-based systems such as Paraview <ref type="bibr" target="#b13">[14]</ref>, VisIt <ref type="bibr" target="#b32">[34]</ref> and Vis-Trails <ref type="bibr" target="#b33">[35]</ref>. Basing VISMASHUP on dataflows enables our framework to be combined with virtually any system that uses dataflows to specify pipelines. A schematic representation of the model is depicted in <ref type="figure" target="#fig_1">Figure 3</ref>, and we describe its components below. </p><formula xml:id="formula_0">m 1 , m 2 ‚àà M s , then c ‚àà C s .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Pipeline Operations</head><p>The two basic operations our model applies to pipelines are: run, which executes a pipeline; and substitution, which manipulates pipeline components (i.e., parameter values and modules). These operations are used both during application design and to manipulate the pipeline through the application. Run. A pipeline run is the execution of a pipeline in the order determined by the network of modules and connections, in a demand-driven fashion. Each sink module ensures that its input ports have up-to-date data from incoming connections, causing the modules of the source ports of those connections to do the same. These data requests are propagated up (recursively) to the sources of the pipeline which will in turn execute and produce the output values required by the downstream modules. The downstream modules are executed, in turn, until the sinks located at the end of the pipeline are reached. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Templates, Views, Medleys and VisMashups</head><p>Visualization pipelines can be very complex, making it difficult for users other than the original developer to modify them. Consider for example, the relatively simple pipeline shown in <ref type="figure" target="#fig_4">Figure 4</ref>(a). This pipeline has 6 modules and tens of parameters. To explore the visualizations that can be derived by this pipeline, the user must be able to identify the relevant parameters that relate to a particular visualization feature, know the ranges of values that can be used for individual parameters as well as valid combinations of values for different parameters. This can be very challenging, in particular for users that do not have detailed knowledge of visualization techniques and of the individual VTK modules. An important goal of VISMASHUP is to simplify this task and provide the end-user the flexibility to explore different visualizations in a more intuitive way. Below, we introduce concepts and operations that allow a pipeline designer to create simplified views of pipelines and pipeline collections (medleys) which abstract away details that are not important for a given task. Using these operations, the designer may also select and expose configurable components of the pipelines which will guide the end user in providing valid inputs as well as experiment with different pipeline variations. Pipeline templates. We introduce the notion of a pipeline template as an extension of a pipeline that allows users to define reconfigurable pieces of the pipeline in a hierarchical way. Users can select and label parameters or subpipelines using a nomenclature that is meaningful for a given application or task. <ref type="figure" target="#fig_4">Figure 4</ref>(b) shows a pipeline template generated for the VTK pipeline in <ref type="figure" target="#fig_4">Figure 4</ref>(a). In order to give the end user the ability to modify the colors and rotations, the designer selected to expose the colors in the vtkProperty module with the parameter names color R, color G and color B; and the X and Y rotations in vtkActor as rotateX and rotateY, respectively. In addition, selecting the subpipeline containing the module vtkCylinderSource allows this subpipeline to be replaced by other pipelines through the customized application.</p><p>The root of the template hierarchy represents the pipeline, and its children and descendants correspond to configurable parameters and subpipelines. We refer to each element in the template hierarchy as a pipeline template node. Nodes that correspond to subpipelines are represented as rectangles and parameters as ellipses. Note that labels are unique in a given hierarchy level. By representing the template as a hierarchy, our approach is able to handle arbitrary nesting of pipelines.</p><p>Pipeline template nodes provide the same operations of a pipeline as well as other specific operations for labeling and removing labels, for creating, adding and removing child nodes, creating and removing connections between template nodes and between template nodes and modules, and for materializing a pipeline. Pipeline Views. Whereas in a pipeline template important and configurable elements (i.e., parameters and subpipelines) are selected, in a pipeline view, a new (abstract) module is created that hides all details of the underlying pipelines, including modules, connections and parameters that are deemed as unnecessary for deriving a set of visualizations required by an end user. <ref type="bibr" target="#b2">3</ref> As we describe below, we use medleys as a mechanism to synchronize pipeline parameters and combine multiple views. More formally, a pipeline view d v is a projection of a pipeline d, where only a subset of the pipeline elements (modules, parameters, and subpipelines) are exposed for direct interaction. For example, a user cannot change a parameter if that parameter is not exposed by the pipeline view. However, a pipeline view still keeps a reference to the original pipeline so the operations applied to the view can also be applied to the pipeline, including execution. We refer to the exposed elements as variables.</p><p>Notice that a pipeline view can be naturally built on top of a pipeline template. In fact, the view parameters and configurable subpipelines are also represented as a hierarchy that mirrors the one for the template hierarchy. Besides setting the visibility of template nodes and parameters, a developer can also specify a list of suggestions for the values a variable can take-these suggestions are used to derive application widgets that enable users to conveniently select a value from list and bind it to the variable (see Sec. 4). <ref type="figure" target="#fig_4">Figure 4</ref>(c) shows a view (DrawShape) derived from the template in <ref type="figure" target="#fig_4">Figure 4(b)</ref>. In addition, the view also contains suggestions for alternative subpipelines that can be used to bind the input variable, i.e., vtkCylinderSource and vtkCubeSource. When defining these suggestions for template nodes, the developer also specifies how these suggestions connect in the parent template. It is possible that a given template node can be bound in different ways and the presence of some variables in a pipeline view is determined by the bindings used for their parents. In the example shown in <ref type="figure" target="#fig_4">Figure 4(c)</ref>, the developer defined different types of source, each containing their own set of parameters. There are two possible bindings suggested for the variable input: the subpipelines Cylinder and Cube. In the pipeline view shown, where Cylinder is used, its parameter (i.e., resolution) is added to the view. If Cube were chosen, its parameters would be included instead.</p><p>Medleys. For exploratory visualization tasks, a user often needs to create and manipulate a set of pipelines. For example, to compare different isosurface extraction algorithms, several pipelines need to be created, including one pipeline per isosurface algorithm, and a pipeline that produces a histogram which accumulates the quality information for each mesh. <ref type="figure" target="#fig_6">Figure 5</ref> illustrates two visualizations and their corresponding quality histograms.</p><p>In order to support the construction of applications that require the combination of multiple pipelines, we introduce the notion of a medley: a medley M is a collection of (related) pipeline views. VIS-MASHUP supports a set of operations for manipulating the views in a medley. One such operation is synchronization. The ability to synchronize variables is useful, in particular, for tasks such as comparative visualization, since it helps ensure that all parameters across different pipelines whose values should be the same are indeed the same. Consider, again, the isosurface example. Given a medley that contains the views for the pipelines that use the different isosurface algorithms, by synchronizing their input file and contour values, in a single step, the user could set these parameters and they would be automatically propagated to the two pipelines. Furthermore, synchronization enables a user to efficiently try out different configurations. Instead of setting values for each pipeline individuallywhich can be both time consuming and error prone, the value for a parameter is set only once and it is automatically propagated to all synchronized variables in multiple views. Another possible operation that can be applied to a medley is composition. Composition can be achieved by synchronizing an output port of a view to the input port of another. In our example, composition could be used to pass the mesh derived by the two isosurface views to the view that derives the quality histograms. Note that because pipeline views reduce the number of components that are exposed for modification, they make it easier to identify how pipelines can be integrated and synchronized.</p><p>VisMashups. A vismashup (application) is a flexible GUI automatically generated from a medley specification. Instead of interacting directly with a dataflow network or a very general and complex GUI, users manipulate and execute a set of pipelines in a medley through a small number of graphical widgets. <ref type="figure" target="#fig_9">Figures 8 and 9</ref> show examples of vismashups. Application maintenance is simplified, since when the underlying medley changes, the GUI can be automatically updated. Furthermore, besides setting parameter values and synchronizing parameters, users can customize a mashup: they can hide, show, and move widgets around. Changes made to the pipeline views through the mashup are propagated down to the pipeline level and sent to the visualization system for execution. An important component of the mashup generation and execution sub-systems is that they maintain detailed provenance information. VISMASHUP maintains provenance of the mashup design process-it keeps all versions and variations of a mashup created as the visualization expert interacts with a user, using a model similar to the changebased provenance proposed in <ref type="bibr" target="#b18">[19]</ref>. Besides, log information of the use of a mashup is also kept (e.g., when the mashup was executed, the values provided). The log information can be used to further refine the views and medleys.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">THE VISMASHUP SYSTEM</head><p>We have built a prototype VISMASHUP system using Python, Qt, PyQt, and VisTrails as the underlying dataflow system. VisTrails supports a flexible set of libraries, including VTK, ITK, matplotlib, SciPy and Web services. As illustrated in <ref type="figure" target="#fig_0">Figure 2</ref>, the VISMASHUP system has four main components: pipeline acquisition and analysis; template and view creation; medley creation; and application generation. The implementation of these components and their user interfaces are described in detail below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Pipeline Acquisition and Analysis</head><p>Although the pipelines for a mashup can be built from scratch, often, as visualization experts (designers) interact with domain experts (users), they construct a series of pipelines to explore different aspects of a data set, or different ways to visualize the data. The actual pipelines and their provenance, including information about the different runs, parameters set and their values, can be useful for designing the views that serve as the basis for the custom application. The Pipeline Acquisition and Analysis component allows the designer to explore a pipeline collection to identify relevant pipelines as well as identify important parameters and associated values.</p><p>Based on the metadata and provenance associated with a pipeline, we provide a filtering mechanism for developers to select pipelines satisfying simple conditions (see <ref type="figure" target="#fig_7">Figure 6</ref>). These conditions can be based on time (when the pipeline was created), the user that created the pipeline, execution (whether a pipeline was successfully executed and when), tags and notes associated with a pipeline. These rules are compiled into a simple regular expression matching over the text descriptions of the pipelines. Note that it is also possible to integrate more advanced interfaces that allow structural queries over the pipelines (e.g., <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b22">24]</ref>). Besides filtering, this component also provides an algorithm to help organize the pipeline collection into groups and extract information about parameter changes (see below). If there is provenance information about parameters that have been set across different executions of a pipeline and their values, this information can be explored both to suggest which parameters to expose in the pipeline view as well as to create a range of values that can be used as suggestions for the exposed parameters (Sec. 3.2). Given a set of pipelines D, the procedure GROUP-AND-MINE-PARAMETERS initially groups together pipelines that have the same structure (modules and connections), i.e., isomorphic graphs (line 2). For each group, the parameters and values stored in the pipelines and in their provenance (if available) are extracted and attached to the group (lines 3-12). Finally a Hasse diagram <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b29">31]</ref> of the groups is generated by calling procedure BUILD-HASSE-GRAPH. The Hasse diagram is a tree where each node corresponds to a group of isomorphic graphs, and edges between a parent and a child node indicate containment. It shows how pipelines are related with respect to structure: the graph of a parent node is contained in the graph of the child node. <ref type="figure" target="#fig_8">Figure 7(a)</ref> shows an example of a Hasse diagram for a collection of 21 pipelines. Each pipeline is identified by a label and a thumbnail of the visualization it generates. Although the Hasse diagram resembles an image graph <ref type="bibr" target="#b16">[17]</ref>, the latter only captures the relationship between visualization parameter changes and are created for a single pipeline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GROUP-AND-MINE-PARAMETERS(D)</head><p>1 To discover the containment relationships, it is necessary to compute subgraph isomorphism between all pipeline group pairs. For our prototype, we implemented the algorithm proposed by Ullman <ref type="bibr" target="#b29">[31]</ref>. We note that, although computing subgraph isomorphism is computationally hard for general graphs, <ref type="bibr" target="#b3">4</ref> we have observed that, in practice, this computation can be efficient for pipelines represented as dataflows. Just to give an idea, for a collection of over 7,000 pipelines, it took 140 seconds to generate their Hasse diagram. Besides, even if this computation takes long, it can be done in an offline process once for a collection, and be re-used multiple times.</p><p>The interface for the Hasse diagram is interactive, with zoom and pan functionality. This diagram gives a developer an overview of the collection and shows which pipelines share the same structure but have different parameter values. By clicking on a node of the diagram, the developer has access to another screen that provides details about all the pipelines in that group. The pipeline is displayed together with all the parameters that were changed, the number of times they were changed, and the set of values used to bind them. If the pipeline stores information about its executions, a plot of the execution times is also shown. This information is then used to help the construction of pipeline templates and views <ref type="figure" target="#fig_8">(Figure 7(b)</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Template and Pipeline View Creation</head><p>After selecting the interesting pipelines and extracting information about important parameters and values, the developer can use the Pipeline Template Editor to define the configurable pieces of the pipelines, by labeling subpipelines and parameters. To select a pipeline to be used as a template, the designer simply clicks on the corresponding node in the Hasse diagram. This causes the Template Editor to be invoked. When the developer labels a parameter or a subpipeline, all the relevant information associated with these components that had been collected during the mining process is automatically added to the template (e.g., all the values associate with the parameter). This is illustrated in <ref type="figure" target="#fig_8">Figure 7</ref>(b), which shows a set of parameters extracted from one of the pipelines in <ref type="figure" target="#fig_8">Figure 7(a)</ref>.</p><p>Once a template is created, one of the operations supported by the Template Editor is view creation. While configuring a view, users can set the visibility of the parameters and configurable subpipelines, as well as select suggestions from the list stored in the template. Note that the information about both values as well as change frequency is very useful for configuring a view. Clearly, parameters that have had many different values are good candidates for being exposed. As shown in <ref type="figure" target="#fig_8">Figure 7</ref>(b), the value for parameter omega frame was modified 178 times, while the parameter propagation time changed 98 times. The values for these parameters can be used to create a list of suggestions for variables in the view. As we describe below, suggestions are included in the mashup to guide the user interaction, e.g., besides typing a value in the interface, the user can also select a value from a list of suggestions. Note that both templates and views are stored in a repository where they can be accessed at a later time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Medley Creation and Mashup Generation</head><p>To combine pipeline views in a medley, the designer uses the Medleys Editor. The views stored in the Pipeline View Repository are displayed on a panel and they can be dragged and dropped on a canvas. Once on the canvas, the medley operations (synchronization and composition) can be applied to the views. A screenshot of the Medleys Editor is shown in <ref type="figure" target="#fig_9">Figure 8</ref>.</p><p>Each variable in a view has an associated handle-the circles on the left and right of each variable name in the pipeline view in <ref type="figure" target="#fig_4">Figure 4(c)</ref>. By connecting the handles for two variables in distinct views, their values are synchronized. To simplify the task of identifying variables to be synchronized, when the designer starts a connection all the variables that are compatible with that variable are highlighted.</p><p>VISMASHUP uses the change-based provenance model <ref type="bibr" target="#b18">[19]</ref> to capture all the changes made to a medley. We designed and implemented a change algebra that captures the actions applied to a medley (e.g., synchronize variables) as well as to its components (e.g., hide/expose view variables).</p><p>A mashup is generated from a medley using the following algorithms: GENERATE-APP(medley) 1 widgets = TREE() 2 window = CREATE-WINDOW(medley) 3 for pipeline-view in medley. pipeline-views 4 BUILD-GUI-WIDGETS(pipeline-view .root, window, widgets) 5 for sync in medley .syncs 6 LINK-WIDGETS-FROM-SYNC(sync) BUILD-GUI-WIDGETS(template-node, parent, node) 1 widget = CREATE-CONTAINER(parent, template-node) 2 child = MAKE-TREE-NODE(widget) 3 node .ADD-CHILD(child) 4 for var in template-node .children 5 BUILD-GUI-WIDGETS(var, widget, child) 6</p><p>for par in var .parameters 7</p><p>widget-type ‚Üê GET-FROM-REGISTRY(par . type) 8</p><p>wp ‚Üê CREATE-WIDGET(widget-type, widget, par)</p><p>GENERATE-APP automatically derives a user interface for a given medley. The interface consists of a set of widgets represented as a tree whose root corresponds to the mashup window. For each view in the medley, the algorithm iterates through the view components and derives their widgets by invoking BUILD-GUI-WIDGETS (lines 3-4). After the widgets are created, the widgets that correspond to synchronized variables in the medley are linked (lines 5-6) -this ensures that when the value is set for a widget w, the same value is propagated to all widgets linked to w.</p><p>BUILD-GUI-WIDGETS generates the widgets for a pipeline view. It first creates a container for the view (line 1), and then recursively builds a widget tree following the view template tree (Sec. 3.2). The widget types associated to the types of the variables are stored in a Registry. A widget is selected for a variable based on the mapping stored in the Registry. In the current implementation, the Registry is populated based on the types available in VisTrails, where designers can define their custom types and widgets. A planned extension to VISMASHUP is to allow the designer to edit the Registry and configure the choices independently of the underlying dataflow system. In addition to the widgets, canvases are created to display each of the outputs of a view. Note that the algorithms above are used to generate both client applications as well as Web-based mashups. The main differences between the two kinds of apps is that the communication between a Web app and a medley is done via a Web service and it provides a more limited interaction with the visualizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Mashup Interaction</head><p>When a mashup is created, a default layout is selected for the widgets. By activating the mashup edit mode, the user can move the widgets around, hide and show widgets, enable and disable synchronizations. The new custom layout is saved as an attribute of the medley associated with the mashup, and the next time the mashup is invoked, the custom layout is loaded.</p><p>When a container widget changes its value (e.g., changing from Cylinder to Cube in the pipeline view described in <ref type="figure" target="#fig_4">Figure 4</ref>), the mashup window needs to be updated accordingly. As the widgets in the window follow the hierarchy of the pipeline template, updates can be applied locally to that node-it is not necessary to update the other widgets in the window. The update procedure is shown below. UPDATE-APP(window,tree ‚àí node) 1 parent ‚Üê tree-node .parent 2 template-node ‚Üê tree-node .widget. template-node 3 BUILD-GUI-WIDGETS(template-node, parent.widget, parent) 4 REMOVE-LINKS-FROM-WIDGETS() 5 for sync in window.medley.syncs 6 LINK-WIDGETS-FROM-SYNC(sync)</p><p>Note that before UPDATE-APP is called, the medley associated with that window detects the change events and stores the corresponding provenance information. Since variables can be removed, the synchronization information may need to be updated as do the associated links between widgets. Finally, executing a mashup causes all pipeline views to update their corresponding pipelines using the values on the medley (the same as in the GUI) and trigger their execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CASE STUDIES 5.1 Sharing Astrophysics Analyses</head><p>Professor Joel Tohline's group at Louisiana State University (LSU) has been developing computational fluid dynamics (CFD) techniques to model various astrophysical phenomena, including simulation of mass-transfer instabilities in binary star systems <ref type="bibr" target="#b6">[7]</ref>. They use scientific visualization tools and techniques to help them explore the results of these complex CFD simulations. They use VisTrails to construct complex pipelines that involve VTK modules to generate streamlines within each binary mass-transfer simulation, and custom analysis modules for identifying values for important parameters associated with the flows <ref type="bibr" target="#b27">[29,</ref><ref type="bibr" target="#b28">30]</ref>. A binary star system consists of two stars orbiting around a common center of mass with an orbital period P. When the system is viewed from a frame that is rotating with an angular frequency ‚Ñ¶ f rame = 2œÄ/P, the system will appear to be stationary. During a simulation, as mass and angular momentum are transferred from one star to the other, the binary system's orbital period together with the value of ‚Ñ¶ f rame is expected to vary. Using the most recent pipelines they developed <ref type="bibr" target="#b27">[29]</ref>, the scientists are able to examine the properties of binary mass-transfer flows from reference frames having a range of different angular frequencies ‚Ñ¶ f rame = (‚Ñ¶ 0 + ‚àÜ‚Ñ¶), where ‚Ñ¶ 0 is the frame of reference's angular frequency at the beginning of the simulation. As a result, they are able to determine which value of ‚àÜ‚Ñ¶ provides the best measure of the true orbital period of the binary star system.</p><p>The LSU group has published these pipelines on their Web site <ref type="bibr" target="#b27">[29]</ref>, where they encourage people to try the different values of ‚Ñ¶ f rame and examine the behavior of the streamlines. Together with the pipelines, they provide annotations where they describe the relevant parameters and values. But to try these pipelines, users must download and install VisTrails, and also learn to use the system. In contrast, using VIS-MASHUP, a simple mashup can be created based on the LSU pipelines and deployed as a Web application. Users can then conveniently try the different ‚Ñ¶ f rame values using simple form-based interface in a Web browser.</p><p>The first mashup we developed was based on the pipeline shown in <ref type="figure" target="#fig_2">Figure 1</ref>. A limitation of this mashup is that, since it contains a single <ref type="figure">Fig. 9</ref>: Neuroscience VISMASHUP. This mashup combines two pipelines-one that produces a plot of a single EEG sensor's raw data and its S-Transformed representation, and another that creates a volume rendered visualization. To ensure that the plots and the visualization are derived for the same patient, the variables in the pipeline views corresponding to the patient (i.e., the input data set) are synchronized.</p><p>3D view, it does not easily support the comparison of different parameters. To address this problem, we added more views of this same pipeline to the medley and synchronized the parameters œÅ min and propagation time in all of them (see <ref type="figure" target="#fig_9">Figure 8(a)</ref>). The new mashup is more suitable for the exploration of the ‚Ñ¶ f rame parameter, allowing multiple visualizations to be displayed and compared side by side. The app, shown in <ref type="figure" target="#fig_9">Figure 8</ref>(b), has three 3D views with a set of widgets for manipulating the parameters of each view. Users can then set a different value for ‚Ñ¶ f rame in each window and compare the streamlines. This comparison is facilitated by the synchronization of the 3D view cameras.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Visualization in Neuroscience</head><p>The study of cognition and memory in humans has been an area of intense study in recent years. Current literature shows that a wide variety of psychological disorders have a marked decrease in working memory performance and that a primary indicator of working memory is the spectral properties of the alpha band <ref type="bibr" target="#b7">(8)</ref><ref type="bibr" target="#b8">(9)</ref><ref type="bibr" target="#b9">(10)</ref><ref type="bibr" target="#b10">(11)</ref><ref type="bibr" target="#b11">(12)</ref> in the dorsal lateral pre-frontal cortex (DLPFC) <ref type="bibr" target="#b24">[26]</ref>. One method under development to help improve working memory performance is repetitive Trans-cranial Magnetic Stimulation (rTMS). rTMS has shown to be capable of positively manipulating the underlying spectral dynamics of human alpha rhythms to influence working memory performance <ref type="bibr" target="#b0">[1]</ref>.</p><p>In order to adequately measure the effects of rTMS on individual alpha-band spectral dynamics and explore signal patterns in the desired region of the brain, Electro-encephalography (EEG) and Magneto-encephalography (MEG) are employed in conjunction with Magnetic Resonance Imaging (MRI). Commonly in collaborative studies, the data processing and visualization experts are unable to adequately analyze the results and implications of the analysis pipelines they create. Likewise, the scientists who can analyze the spectral properties of cognitive dynamics do not have the experience required to write the robust pipelines needed in the study.</p><p>VISMASHUP supports collaboration among the different experts. Experts in data processing and visualization generate a series of pipeline views which expose only the functionality the scientists need. The scientists analyzing the results can then explore these views without having to deal with complexities of the corresponding pipelines. <ref type="figure">Figure 9</ref> shows a mashup constructed from a medley that consists of two pipelines: one that generates a plot of a single EEG sensor's raw data and its S-Transformed representation, and another that creates a volume rendered image of a patient's brain. By using vismashups like this, the psychiatrist conducting this study was able to explore the patients' data more freely and more extensively without having to learn how to use the underlying visualization system. The visualization experts working on this study also benefited from using VISMASHUP because it allowed them to generate the final apps more quickly, requiring less time spent training the scientist to manipulate complex pipelines.</p><p>Before having access to VISMASHUP, the expert responsible for creating the multi-modal visualizations needed in this study had designed had a single pipeline consisting of several disjoint subpipelines. Each of these sub-pipelines handled a single data modality or processing technique. But for medleys to be effective, it is im-portant that the pipelines are modularized. Since medleys are composed by distinct pipeline views, a medley consisting of composite pipelines is inherently difficult to manipulate. By enforcing stricter modularization on the development of pipelines, medley-enabled systems can benefit not only from more concise pipeline descriptions, but from more flexible display of the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>We have described VISMASHUP, a new framework that simplifies the creation of custom visualization applications. Using VISMASHUP, an application developer can quickly assemble custom applications by leveraging an existing collection of visualization pipelines and their provenance. The mashups produced by VISMASHUP are not a substitute for more comprehensive, domain-specific applications such as CDAT. Instead, our target are simpler, exploratory applications.</p><p>Although VISMASHUP simplifies the development of one-of-akind, domain-specific visualization applications, it has some limitations. The integration of different libraries can sometimes be complicated by a number of practical issues, such as compatibility of underlying interface toolkit (e.g., Tk vs Qt). Also, while we try to make sensible choices on the automatic layout of the interface, and we allow the users to fine tune it, this does not guarantee that the most appropriate and intuitive interface for the task at hand is created.</p><p>There are several areas of future work that we would like to pursue. First and foremost, we need to perform a more detailed evaluation of the effectiveness and usability of VISMASHUP. To do so, we will carry out user studies. To provide more flexibility in filtering and selecting relevant pipelines, we plan to integrate more sophisticated interfaces that allows structural queries to be specified by example <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b22">24]</ref>. We also plan to explore alternative techniques for mining the pipeline collection. For example, it can be useful to support different grouping/clustering strategies <ref type="bibr" target="#b21">[23]</ref>. Last, but not least, we would like to investigate environments where users can share and collaboratively develop applications. Such environments have been successfully deployed for Web mashups (see e.g., http://www.programmableweb.com). But we believe that the ability to share visualization applications, in addition to data, will help advance existing efforts on collaborative data analysis <ref type="bibr" target="#b31">[33]</ref> and it also has the potential to broaden the use of visualization techniques.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 :</head><label>2</label><figDesc>The VisMashup Architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 :</head><label>3</label><figDesc>Conceptual schema of the main concepts in VISMASHUP.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Definition 1 .</head><label>1</label><figDesc>A pipeline (or dataflow) d is defined by a tuple (M,C), where M is a set of modules and C a set of connections. Each module m ‚àà M, in turn, is associated with a tuple (I m , O m , P m ), where I m corresponds to a set of input ports, O m corresponds to a set of output ports, and P m is a list of parameters. Each parameter p ‚àà P m is associated with a value v. In a connection (o, i) ‚àà C connecting module m to module n, o ‚àà O m and i ‚àà I n , o is called the source port and i is called the target port. Sources are modules that do not have target ports and sinks are modules not containing source ports. Additionally, ports and parameters have a type; and if there is a connection (o, i) ‚àà C, the types of o and i must be compatible. Definition 2. A subpipeline d s (M s ,C s ) of a pipeline d(M,C) is the pipeline induced by the set of modules M s ‚äÇ M. For each connection c ‚àà C, if c connects two modules m 1 and m 2 , and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Substitution. Substitution allows parameter values and modules to be replaced within a pipeline. Let d = (M,C) and d = (M ,C ) be two pipelines. The operation substituteParameter d (p, v) assigns value v to parameter p in pipeline d, provided that the types of v and p are compatible. The operation substitutePipeline d (M s , d , f ) replaces the subpipeline induced by the modules in M s ‚äÇ M by the pipeline d , using the mapping function f to rebuild the connections from d to M. Let C s ‚äÇ C be the set of connections which connect modules in M to modules in M s . Given a connection (o s , i s ) ‚àà C s , where o s is an output port of a module m source in M, and m source ‚àà M s , i s is replaced by the appropriate port in d , f (i s ), provided the types are compatible. For connections (o s , i s ) ‚àà C s , where i s is an input port of a module m source in M, and m source ‚àà M s , o s is replaced by the appropriate port in d , f (o s ), provided the types are compatible.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 :</head><label>4</label><figDesc>Example of how pipeline views are created. (a) Original VTK pipeline that draws a simple cylinder. (b) The user marks configurable pieces of the pipeline to create a template. (c) A pipeline view is created based on the pipeline template. The user defines template node Cube as another suggestion for variable input and Cylinder as the default value.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>A variable x in a pipeline view d v ‚àà M can be synchronized with any variable x in another view d v ‚àà M if x and x have the same type. If x and x are synchronized, binding either to a value v sets both variables to v.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 :</head><label>5</label><figDesc>Comparing visualizations derived by two different isosurface algorithms and their associated quality histograms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 6 :</head><label>6</label><figDesc>Window to control the mining options and filtering conditions to select pipelines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 7 :</head><label>7</label><figDesc>VisMashup Mining Interface: (a) Relevant pipelines organized in a Hasse Diagram; (b) Examining the parameters returned from the mining process using the Template/Pipeline View Editor.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 8 :</head><label>8</label><figDesc>Astrophysics VisMashup for comparing different visualizations. (a) Medley created for the VisMashup using 3 instances of a pipeline view with parameters œÅ min and propagation time synchronized. (b) Using the VisMashup interface, the user explores different values for ‚Ñ¶ f rame . From top to bottom, the values used are ‚àí0.06, ‚àí0.041, and 0.0.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>‚Ä¢</head><label></label><figDesc>Emanuele Santos, Lauro Lins, Juliana Freire, and Cl√°udio T. Silva are with the Scientific Computing and Imaging (SCI) Institute at the University of Utah. email: {emanuele, lauro, juliana, csilva}@sci.utah.edu. ‚Ä¢ James P. Ahrens is with Los Alamos National Lab in Los Alamos, NM.</figDesc><table /><note>email: ahrens@lanl.gov. Manuscript received 31 March 2009; accepted 27 July 2009; posted online 11 October 2009; mailed on 5 October 2009. For information on obtaining reprints of this article, please send email to: tvcg@computer.org .</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>. name not in n . param-list .KEYS() 10 n . param-list[ p . name] = [ ] 11 n . param-list[ p . name] ‚Üê p . value) 12 BUILD-HASSE-GRAPH(hasse-nodes)</figDesc><table><row><cell></cell><cell>hasse-nodes ‚Üê MAKE-NODES-FROM-PIPELINES(D)</cell></row><row><cell cols="2">2 hasse-nodes ‚Üê MERGE-WITH-SAME-STRUCTURE(hasse-nodes)</cell></row><row><cell cols="2">3 for n in hasse-nodes</cell></row><row><cell>4</cell><cell>n . param-list ‚Üê DICTIONARY()</cell></row><row><cell>5</cell><cell>for d in n . pipelines</cell></row><row><cell>6</cell><cell>params ‚Üê GET-PARAMS-FROM-PROVENANCE(d)</cell></row><row><cell>7</cell><cell>params ‚Üê params + d . parameters</cell></row><row><cell>8</cell><cell>for p in params</cell></row><row><cell>9</cell><cell>if p</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">http://www.ruby-lang.org 2 http://www.python.org</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">Pipeline views in VISMASHUP are similar to macro pipelines in AVS<ref type="bibr" target="#b30">[32]</ref>.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">This problem is trivially reducible from the MAX-CLIQUE problem, a well-known NP-complete problem<ref type="bibr" target="#b10">[11]</ref>.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank Joel Tohline for the astrophysics, and Erik Anderson and Gil Preston for the neuroscience case study. We thank the Vis-Trails team members for their help with this work. Our research has been funded by the National Science Foundation (grants IIS-0905385, IIS-0746500, ATM-0835821, IIS-0844546, CNS-0751152, IIS-0713637, OCE-0424602, IIS-0534628, CNS-0514485, IIS-0513692, CNS-0524096, CCF-0401498, OISE-0405402, CCF-0528201, CNS-0551724), the Department of Energy SciDAC (VACET and SDM centers), and IBM Faculty Awards (2005, 2006, 2007, and 2008). E. Santos is partially supported by a CAPES/Fulbright fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards development of a circuit based treatment for impaired memory: A multidisciplinary approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Preston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE EMBS Conf. on Neural Engineering</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="302" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Querying business processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Beeri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamenkovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Milo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="343" to="354" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Lattice theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Birkhoff</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1948" />
			<publisher>American mathematical society</publisher>
			<pubPlace>Providence, RI</pubPlace>
		</imprint>
	</monogr>
	<note>revised edition</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Training wheels in a user interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Carroll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Carrithers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="800" to="806" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<ptr target="http://www-pcmdi.llnl.gov/software-portal/cdat" />
		<title level="m">Climate Data Analysis Tools (CDAT)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A contract-based system for large data visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Childs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">S</forename><surname>Brugger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Bonnell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Meredith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">J</forename><surname>Whitlock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Max</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="190" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Numerical Simulations of the Onset and Stability of Dynamical Mass transfer in Binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Souza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Motl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tohline</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Frank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Astrophysical Journal</title>
		<imprint>
			<biblScope unit="volume">643</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="381" to="401" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">IRIS Explorer: A framework for investigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Foulser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIG-GRAPH Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="13" to="16" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Provenance for computational tasks: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing in Science &amp; Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="11" to="21" />
			<date type="published" when="2008-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">ConMan: A Visual Programming Language for Interactive Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Haeberli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH&apos;88</title>
		<meeting>SIGGRAPH&apos;88</meeting>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="page" from="103" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Clique is hard to approximate within n 1‚àíŒµ</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hastad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Mathematica</title>
		<imprint>
			<biblScope unit="volume">182</biblScope>
			<biblScope unit="page" from="105" to="142" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ibm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Opendx</surname></persName>
		</author>
		<ptr target="http://www.research.ibm.com/dx" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Biomedical computing and visualization software environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Macleod</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="64" to="71" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kitware</surname></persName>
		</author>
		<title level="m">The Visualization Toolkit (VTK) and Paraview</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Viscomplete: Data-driven suggestions for visualization systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1691" to="1698" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Dataflow Process Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>Parks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE</title>
		<meeting>the IEEE</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="page" from="773" to="801" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Image graphs-a novel interface for visual data exploration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="81" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">SCIRun/BioPSE: Integrated problem solving environment for bioelectric field problems and visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Macleod</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weinstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>St</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Germain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Brooks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Parker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Int. Symp. on Biomed. Imag</title>
		<meeting>the Int. Symp. on Biomed. Imag</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="640" to="643" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Managing rapidly-evolving scientific workflows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Vo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Provenance and Annotation Workshop (IPAW)</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">4145</biblScope>
			<biblScope unit="page" from="10" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">NIH-NSF visualization research challenges report summary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Moorhead</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rheingans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Yoo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="20" to="24" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">SCIRun: a scientific programming environment for computational steering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Supercomputing</title>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A first study on clustering collections of workflow graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPAW</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="160" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Querying and creating visualizations by analogy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Vo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1560" to="1567" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Promoting universal usability with multi-layer interface design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conf. on Universal Usability</title>
		<meeting>the Conf. on Universal Usability</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Neuropsychological performance in schizotypal personality disorder: Importance of working memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Choo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The American Journal of Psychiatry</title>
		<imprint>
			<biblScope unit="volume">162</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="1896" to="1903" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">SMARTLINK: An agent for supporting dataflow application construction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Telea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE VisSym</title>
		<meeting>IEEE VisSym</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="189" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">VISSION: An Object Oriented Dataflow System for Simulation and Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Telea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE VisSym</title>
		<meeting>IEEE VisSym</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="95" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tohline</surname></persName>
		</author>
		<ptr target="http://www.phys.lsu.edu/tohline/vistrails/" />
		<title level="m">LSU using VisTrails</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A customized python module for CFD flow analysis within VisTrails</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tohline</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Even</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing in Science &amp; Engineering</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="68" to="73" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">An algorithm for subgraph isomorphism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Ullmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="42" />
			<date type="published" when="1976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">The Application Visualization System: A Computational Environment for Scientific Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Upson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Thomas</forename><surname>Faulhaber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kamins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Laidlaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schlegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vroom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gurwitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="30" to="42" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">ManyEyes: A site for visualization at internet scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Viegas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kriss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mckeon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1121" to="1128" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<ptr target="https://wci.llnl.gov/codes/visit" />
		<title level="m">VisIt Visualization Tool</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<ptr target="http://www.vistrails.org" />
		<title level="m">The VisTrails Project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">!</forename><surname>Yahoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pipes</surname></persName>
		</author>
		<ptr target="http://pipes.yahoo.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Wysiwyg development of data driven web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Botev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">F</forename><surname>Churchill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Levchenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shanmugasundaram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment</title>
		<meeting>the VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="163" to="175" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
