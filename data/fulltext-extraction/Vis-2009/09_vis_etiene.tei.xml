<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Verifiable Visualization for Isosurface Extraction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiago</forename><surname>Etiene</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Scheidegger</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">Gustavo</forename><surname>Nonato</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Robert</forename><forename type="middle">M</forename><surname>Kirby</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cláudio</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
						</author>
						<title level="a" type="main">Verifiable Visualization for Isosurface Extraction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Verification</term>
					<term>V&amp;V</term>
					<term>Isosurface Extraction</term>
					<term>Marching Cubes</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Through the verification methodology presented on this paper we were able to uncover a convergence problem within a publicly available marching-based isosurfacing code (top left) and fix it (top right). The problem causes the mesh normals to disagree with the known gradient field when refining the voxel size h (bottom row). The two graphs show the convergence of the normals before and after fixing the code.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>In this age of scientific computing, the simulation science pipeline of mathematical modeling, simulation and evaluation is a rendition of the scientific method as commonly employed as the traditional experimental pipeline. Critical to this simulation approach is the evaluation stage in which numerical data are post-processed, visualized and then examined in order to answer the original queries that instigated the investigation. In fact, visualization of scientific results has become as much a part of the scientific process as mathematical modeling or numerical simulation. Despite its growing importance in the scientific computing process, visualization has not fallen under the same rigorous scrutiny as other components of the pipeline like mathematical modeling and numerical simulation. Unlike in traditional computational science and engineering areas, there is no commonly accepted framework for verifying the accuracy, reliability, and robustness of visualization tools. This precludes a precise quantification of the visualization error budget in the larger scientific pipeline. Furthermore, very few investigations have focused on how the error originating from other components of the computational pipeline impacts visualization algorithms.</p><p>In this paper, we advocate the use of techniques from the verification and validation process used in the engineering community (Section 2 presents V&amp;V in more detail). While the lack of a wellestablished framework for verifying visualization tools has meant that a variety of analysis techniques have been developed <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b28">29]</ref>, we believe that visualization has achieved sufficient importance to warrant investigation of stricter verification methodologies. Several authors have already asserted this need <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b11">12]</ref>, and in this paper we present techniques that are a concrete step towards reducing the gap between best practices in simulation science and visualization.</p><p>The purpose of this work is to present a verification methodology for visualization tools that has comparable rigor to that of other components of the computational scientific pipeline. More specifically, we set out to define a verification methodology in the mold of the area of V&amp;V, in the context of visualization. Furthermore, we illustrate our proposal by testing several publicly available isosurface extraction codes to the verification procedure, giving a detailed description of the steps involved in the process.</p><p>It is important to emphasize that the point of verification procedures is not to compare algorithms to one other with the hope of finding the best alternative. This procedure equips developers of new algorithms and/or implementations with a process that provides a systematic way of identifying and correcting errors in both algorithms and implementations. The goal is to provide users with a methodology that will give them a more concrete model for the behavior of the implementation, which will increase confidence in the visualization tools. As we will show, a fair verification analysis can bring out unforeseen behavior, and quickly detect implementation problems that might not be caught through standard comparisons or visual inspection.</p><p>The contributions of this work are threefold. To the best of our knowledge, we, for the first time, apply the framework of verification to assess the correctness of visualization tools. Furthermore, we provide a detailed description of how to accomplish the verification procedure by subjecting different isosurfacing tools to the battery of tests comprising the V&amp;V process. Our second contribution is the underlying mathematical analysis and associated manufactured solutions developed to analyze the isosurfacing methods. We should clarify that when applying MMS for other techniques (even in the case of isosurface extraction), the theoretical analysis should be tailored to the particular features of these algorithms. The manufactured solutions presented here are simple but general enough to be promptly employed for evaluating other visualization tools besides isosurfacing. Our third contribution is a comprehensive set of results obtained using the technique, including the finding of implementation errors in two publicly available isosurface extraction codes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">VALIDATION AND VERIFICATION</head><p>In this section we provide a brief introduction to the idea of verification and validation (V&amp;V), and in particular, its application in visualization scenarios. We will also review efforts to verify implementations in the specific context of isosurface extraction.</p><p>Babuška and Oden define verification as "the process of determining if a computational model obtained by discretizing a mathematical model of a physical event and the code implementing the computational model can be used to represent the mathematical model of the event with sufficient accuracy" <ref type="bibr" target="#b0">[1]</ref>. Although they review the concept only in the context of computational science and engineering applications, it is important to appreciate that the same idea applies to scientific visualization. Verification is about investigating to what extent a (numerical) approximation scheme -both in algorithm and corresponding implementation -represents the desired mathematical model. Validation, on the other hand, is about ensuring that the model represents physical reality. In this paper, we will concern ourselves only with verification, under the assumption that the model has been validated by the user of the technique. This is the perspective Kirby and Silva suggest for "Verifiable Visualization" <ref type="bibr" target="#b11">[12]</ref>.</p><p>One of the main requirements for verifiable visualization is to have a rigorous analysis which predicts the results of the algorithm and its implementation when evaluating it on a known model problem. The more complete this analysis is, the more thorough the testing procedures can be. This continuous process of verification through refinement of key controllable input parameters of the method (such as grid spacing) and testing is different from a one-shot process. The verification process should involve a suite of tests with corresponding results from which one can progressively increase reliance on the method under analysis. When appropriately applied, verification provides ways to appreciate the nuances of the applicability of the method. As we will see in this paper, writing down the analysis for the expected result of isosurface extraction gives us concrete bounds on what features we can expect the resulting surface to have, and these are extremely important for users.</p><p>A common practice in the visualization community is to test implementations by using complicated, "real-world" datasets. The value of these tests is that they provide evidence of the algorithm's applicability. We advocate a complementary approach: developers should carefully manufacture test cases that can be mathematically modeled and analyzed, called manufactured solutions. These manufactured solutions can then be used to test the implementations. In this paper, we present analysis that describe the expected rate of convergence of several isosurface features, and test implementations acting on our model problems using simple analytical volumes. As we show in Sections 3 and 4, this method helps pin down the mathematical characteristics of the technique, and, more practically, it is quite effective at uncovering implementation bugs.</p><p>The challenge behind manufactured solutions is to construct them in a way that allows us to predict the expected behavior of the method under investigation. Moreover, the manufactured solutions should tax the method vigorously, bringing out potential problems. In Section 5, we will present some situations where incorrectly chosen manufactured solutions have a big impact in the results. We do so to emphasize that all components of the pipeline, even the construction and evaluation of the manufactured solutions, must be meticulously handled to maintain the rigor of the verification process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Isosurface Extraction Algorithms</head><p>Isosurface extraction is a popular visualization technique, being a tool currently used in science, engineering, and applications. This popularity makes it a natural target for this first application of verification mechanisms in the context of visualization. This same popularity has also driven a large body of work comparing different isosurface extraction algorithms.</p><p>Previous researchers have examined topological issues <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b17">18]</ref>, mesh quality <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b22">23]</ref>, accuracy <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b28">29]</ref>, and performance <ref type="bibr" target="#b23">[24]</ref>. The influence of different reconstruction schemes and filters in scalar visualization has also been examined <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b19">20]</ref>. In this paper, we focus on techniques to verify the correctness of algorithms and their corresponding implementations. In particular, we provide mathematical tools that other researchers and developers can use to increase their confidence in the correctness of their own isosurface extraction codes. A traditional way to test implementations in scientific visualization is to perform a visual inspection of the results of the Marschner-Lobb dataset <ref type="bibr" target="#b15">[16]</ref>. In the context of isosurface extraction, researchers routinely use tools such as Metro <ref type="bibr" target="#b3">[4]</ref> to quantitatively measure the distance between a single pair of surfaces. We argue that the methodology presented here is more effective and more explicit at elucidating a technique's limitations. In particular, our proposal pays closer attention to the interplay between a theoretical convergence analysis and the experimental result of a sequence of approximations.</p><p>Globus and Uselton <ref type="bibr" target="#b7">[8]</ref> and more recently Kirby and Silva <ref type="bibr" target="#b11">[12]</ref> have pointed out the need for verifying both visualization techniques and the corresponding software implementations. In this paper, we provide concrete tools for the specific case of isosurface extraction. Although this is only one particular technique in visualization, we expect the general technique to generalize.</p><p>It is important to again stress that verification is a process: even when successfully applied to an algorithm and its implementation, one can only concretely claim that the implementation behaves correctly (in the sense of analyzed predicted behavior) for all test cases to which it has been applied. Because the test set, both in terms of model problems and analyzed properties, is open-ended and ever increasing, the verification process must continually be applied to previous and new algorithms as new test sets become available. This does not, however, preclude us from formulating a basic set of metrics against which isosurface extraction methods should be tested, as this is the starting point of the process. This is what we turn to in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">VERIFYING ISOSURFACE EXTRACTION ALGORITHMS</head><p>In this section, we describe the technique we use for verifying isosurface extraction algorithms, namely the method of manufactured solutions (MMS). We illustrate a possible implementation of MMS in <ref type="figure" target="#fig_0">Figures 2 and 3</ref>. This technique requires us to write down the expected MMS( f , u, h 1 ) 1 Let f be a scalar field containing the solution surface S 2 Let u be a given property ( f , normals, area, etc.) 3</p><p>Let h 1 be the initial grid size behavior of particular features of interest of the object (or model problem) being generated. In our case, we are generating triangular approximations of smooth isosurfaces, and the features of interest are geometric surface convergence, convergence of normals, area and curvature.</p><formula xml:id="formula_0">4 for i ← 1 to n 5 do G h i ← an approximation of f at grid size h i 6 S h i ← an approximation of S computed from G h i 7 E h i ← ||u(S h i ) − u(S)|| u 8 x i ← log h i , y i ← log E h i 9 h i+1 ← h i /2 10q ← slope of best-fit linear regression of (x i , y i ) 11 Compareq and q</formula><p>To use MMS, we first accomplish a mathematical analysis of the expected convergence rate of the features (or characteristics) of interest, known in the numerical literature as the formal order of accuracy of the characteristic. This analysis is done for solutions of the problem that can be conveniently described and analyzed (these are the manufactured solutions). Then, the code is executed with progressively refined versions of the data that is used in the generation or sampling of the manufactured solution. Finally, the empirical convergence rate is compared to the one predicted by the analysis. When the convergence rates are comparable, we increase our confidence in the algorithm. If the realizable behavior disagrees with the analysis, either (1) the analysis does not correspond to the correct behavior of the algorithm, (2) the assumptions upon which the analysis was build were violated by the input data and hence the predicted behavior is not valid for the circumstances under investigation, or (3) there are issues with the algorithm or with the implementation of the algorithm (depending on access to source code and algorithmic details, one may not be able to distinguish between these two -algorithmic or implementationand hence we in this work always consider them together. Given sufficient information, the verification process can help further delineate between these two issues). Notice, however, that all three situations warrant further investigation. In the following sections, we will discuss these issues in more detail. Let us first clarify how we will arrive at theoretical and empirical convergence rates.</p><p>For a fixed grid size, we will strive to write the approximation error between the desired isosurface property and its approximation by:</p><formula xml:id="formula_1">E = |u approx − u exact | u = O(h p ) = αh p (1)</formula><p>where u approx , u exact are the approximated and exact values of a property u, | • | u is the norm used to compare the approximate and exact property, p is the order of accuracy and α is a constant. Practically speaking, the polynomial expression (1) is not very convenient for numerical experimentation, as it is hard to find the value of p from the direct plot of h against E. The standard technique to estimate p is to linearize by working on a log-log scale:</p><formula xml:id="formula_2">log E = log(αh p ) = log α + p log h.<label>(2)</label></formula><p>Using this linearized version, we estimate p from the slope of the line that best fits the points (log h, log E) in a least-squares sense. We use this technique in Section 4 when testing the isosurface codes.</p><p>MMS critically depends on an analysis of the order of accuracy of expected solutions. Although this seems quite simple, the order of accuracy under a sensitive norm like || • || ∞ has shown in practice to be very effective in bringing out implementation errors in numerical approximation schemes <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b21">22]</ref>. In this paper, we show that this analysis is just as effective for isosurface extraction. In addition, we believe the convergence analysis required by MMS is interesting in its own right. As we will discuss in Section 5, it helps to shed light on the consequences of implementation choices. In the context of isosurface methods, manufactured solutions can be built by specifying a "solution surface" to be the exact solution and deriving a scalar field that contains such a solution surface as a level set. The verification methodology then proceeds as following: (1) use the manufactured scalar field as input for the isosurfacing methods, <ref type="bibr" target="#b1">(2)</ref> run the methods, and (3) check the output surface against the solution surface (sometimes called the ansatz solution within the mathematical verification literature). In many cases, the manufactured scalar field can be derived analytically, making the observed order of accuracy tractable (we give examples in next section).</p><p>In what follows, we will derive expected orders of accuracy for several features of surfaces produced by isosurface extraction codes. We keep our assumptions about the actual algorithms to a minimum to maximize the applicability of the arguments given. We essentially only assume that the maximum triangle size can be bounded above at any time, and use Taylor series arguments (under assumptions of smoothness) to derive convergence rates. It is important to point out that order of accuracy analysis of polyhedral surfaces has been studied by many researchers <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b27">28]</ref>. In fact, the results presented below are in agreement with the ones reported in the literature. However, because we are considering isosurface extraction, some of our arguments benefit by being able to be condensed to simpler statements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Convergence of Vertex Position</head><p>We start our analysis of isosurface extraction by studying the convergence of vertex positions. We analyze this convergence indirectly by relating the values of the scalar field at the vertex points and the distance between the vertices and the correct isosurface. Given a value λ such that the exact isosurface S is defined by f (x, y, z) = f ( v) = λ , the algebraic distance of v to S is defined as | f ( v) − λ | <ref type="bibr" target="#b24">[25]</ref>. Notice that algebraic distances only makes sense for implicit surfaces: it requires a scalar field. In addition, we restrict ourselves to regular isosurfaces, ones where for every point x in S, |∇ f (x)| exists and is nonzero. Then, the geometric distance between v and S is approximated <ref type="bibr" target="#b24">[25]</ref>. We illustrate this relation in <ref type="figure" target="#fig_2">Figure  4</ref>. Since, by assumption, |∇ f (x)| &gt; k for some k &gt; 0, and all x in S, convergence in algebraic distance implies convergence in geometric distance. Convergence in algebraic distance, however, is much more tractable mathematically, and this is the item to which we turn our focus.</p><formula xml:id="formula_3">by | f ( v) − λ |/|∇ f ( v)|</formula><p>Many isosurface methods estimate vertex positions through linear interpolation along edges of a grid. Let f : U ⊂ R 3 → R be the a smooth real function defined in a subset</p><formula xml:id="formula_4">U = [a x , b x ] × [a y , b y ] × [a z , b z ], where [a i , b i ], i ∈</formula><p>x, y, z are real intervals. We assume the intervals [a i , b i ] have the same length and let a x = x 0 , . . . , x n = b x , a y = y 0 , . . . , y n = b y , and a z = z 0 , . . . , z n = b z be subdivisions for the intervals such that x i = x 0 + ih, y i = y 0 + ih, z i = z 0 + ih, i = 0, . . . , n, where h is the grid size and c i jk</p><formula xml:id="formula_5">= [x i , x i+1 ] × [y j , y j+1 ] × [z k , z k+1</formula><p>] is a grid cell. Through a Taylor series expansion of f , one can evaluate f at a point p ∈ c i jk as:</p><formula xml:id="formula_6">f ( p) = f i jk + ∇ f i jk • δ + 1 2 δ T H( ξ ) δ<label>(3)</label></formula><p>where</p><formula xml:id="formula_7">f i jk = f (x i , y j , z k ), ∇ f i jk is the gradient of f in (x i , y j , z k ), H( ξ )</formula><p>is the Hessian of f at a point ξ connecting (x i , y j , z k ) and p, and δ = (u, v, w) T is such that p = (x i + uh, y j + vh, z k + wh) T . </p><formula xml:id="formula_8">v, | f ( v) − λ |/|∇ f ( v)|.</formula><p>In the figure, the thick circle represents the isosurface S and the fainter isolines illustrate changes in gradient magnitude: in regions of small gradient magnitude, the algebraic distance is small but geometric distance is large, and vice-versa for large gradient magnitude. Let the linear approximation of f in p be defined bỹ</p><formula xml:id="formula_9">f ( p) = f i jk + ∇ f i jk • δ<label>(4)</label></formula><p>and consider a point x λ such thatf ( x λ ) = λ , that is, x λ is a point on the isosurface λ off . The algebraic distance between the exact isosurface f (x, y, z) = λ and the linearly approximated isosurface can be measured by | f ( x λ ) − λ |. From Equations 3 and 4 one can see that</p><formula xml:id="formula_10">| f ( x λ ) − λ | = | f i jk + ∇ f i jk • δ + 1 2 δ T H( ξ ) δ − λ | = |f ( x λ ) + O(h 2 ) − λ | = O(h 2 ) (5)</formula><p>thus, the linearly approximated isosurface is of second-order accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Convergence of Normals</head><p>Assume, generally, that the scalar field f (x, y, z) = λ can be locally written as a graph of a function in two-variables g(</p><formula xml:id="formula_11">x(u, v), y(u, v)) = λ − f (x(u, v), y(u, v), z k )</formula><p>, as illustrated in <ref type="figure" target="#fig_3">Figure 5</ref>, where x(u, v) = x i + uh and y(u, v) = y j + vh. This is acceptable because we have already assumed the isosurface to be regular. Still without losing generality we write g(x(0, 0), y(0, 0)) = 0, that is, the isosurface contains the point (</p><formula xml:id="formula_12">x i , y j , z k ). Let Φ(u, v) = (x(u, v), y(u, v), g(x(u, v), y(u, v))) be a parametrization for the isosurface f (x, y, z) = λ in c i jk and ∂ Φ ∂ u × ∂ Φ ∂ v = h 2 − ∂ g ∂ x , − ∂ g ∂ y , 1 T = h 2 n 0<label>(6)</label></formula><p>be the normal vector in Φ(0, 0) = (x i , y j , g(x i , y j )) (the partial derivatives of g are evaluated at (x(0, 0), y(0, 0)) = (x i , y j )).</p><p>Consider now the triangle defined by the points p 1 , p 2 , and p 3 approximating the isosurface f (x, y, z) = λ in the grid cell c i jk (see <ref type="figure" target="#fig_3">Figure 5)</ref>. Let p 1 be the grid point (</p><formula xml:id="formula_13">x i , y j , z k ), so p 1 = Φ(0, 0), p 2 = Φ(u 2 , v 2 )</formula><p>, and p 3 = Φ(u 3 , v 3 ). Using the cross product in R 3 , the normal of the triangle p 1 p 2 p 3 can be computed by:</p><formula xml:id="formula_14">n p 1 p 2 p 3 =( p 2 − p 1 ) × ( p 3 − p 1 )=   h(v 2 g(x(u 3 , v 3 ), y(u 3 , v 3 )) − v 3 g(x(u 2 , v 2 ), y(u 2 , v 2 ))) h(u 3 g(x(u 2 , v 2 ), y(u 2 , v 2 )) − u 2 g(x(u 3 , v 3 ), y(u 3 , v 3 ))) h 2 (u 2 v 3 − u 3 v 2 ))   .<label>(7)</label></formula><p>Expanding</p><formula xml:id="formula_15">g(x(u i , v i ), y(u i , v i )), i ∈ {2, 3}</formula><p>in a Taylor series, some terms cancel and the normal n p 1 p 2 p 3 becomes: </p><formula xml:id="formula_16">n p 1 p 2 p 3 = rh 2 − ∂ g ∂ x + O(h), − ∂ g ∂ y + O(h), 1 T<label>(8)</label></formula><p>where</p><formula xml:id="formula_17">r = u 2 v 3 −u 3 v 2 .</formula><p>Comparing the exact normal vector n 0 in Equation 6 with n p 1 p 2 p 3 above, we recover first-order of accuracy for normals. In addition, notice that the usual scheme of estimating vertex normals by the arithmetic mean of triangle normals does not decrease the order of accuracy; that is, vertex normals (computed by arithmetic mean) are at least first-order accurate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Convergence of Area</head><p>Currently, much less is known about convergence in area, compared to convergence of vertices or normals. To illustrate the difficulty involved in approximating lengths and areas, consider the sequence of approximations to a straight line shown in <ref type="figure" target="#fig_4">Figure 6</ref>. Even though the function sequence converges uniformly to the line, the length of the approximation stays constant.</p><p>To the best of our knowledge, the only relevant results establish convergence in area given convergence in vertex positions and convergence in normals, such as in Hildebrandt et al. <ref type="bibr" target="#b8">[9]</ref>. However, the authors only establish asymptotic convergence, with no order of accuracy associated with it. The argument is more mathematically involved than space allows here, so we refer the reader to that paper. Currently, this means that the only information the observed order of accuracy provides to us is that if we expect convergence in normals, we should also expect convergence in area, and vice-versa.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Convergence of Curvature</head><p>The following formula gives an estimate of the curvature at a vertex p:</p><formula xml:id="formula_18">K(p) = 2π − ∑ θ i i+1 1 3 A i i+1<label>(9)</label></formula><p>where θ i i+1 and A i i+1 are the angle ∠p i pp i+1 and area of the triangle p i pp i+1 respectively (summation is over all triangles comprising the star of p) <ref type="bibr" target="#b16">[17]</ref>. Meek and Walton <ref type="bibr" target="#b16">[17]</ref> showed that the curvature computed via Equation 9 does not converge in general; that is, if the vertices of the star of p are arbitrarily distributed around p, one cannot expect curvature convergence. In fact, they described a more general result stating that O(h) accuracy can only be obtained if the normals are known to have accuracy O(h 2 ). Subsequently, Xu <ref type="bibr" target="#b26">[27]</ref> presented a very particular distribution of vertices around p under which the curvature estimated by Equation 9 has accuracy O(h 2 ). Curvature discretization schemes other than the one given in Equation 9 such as the quadratic-fit and spherical-image method (see Meek and Walton <ref type="bibr" target="#b16">[17]</ref> for details) also demand particular vertex distributions to ensure convergence. In our context of keeping the analysis applicable for many isosurfacing algorithms, this means we cannot use the lack of observed curvature convergence as an indication of problematic behavior. Based on the results mentioned above, one should actually expect curvature not to converge for most isosurface extraction algorithms. More generally, this indicates a weakness of MMS, namely that some features of interest (such as curvature) will not have sufficient theoretical order of accuracy to be used in numerical measurements. Notice, in addition, that if we had not written down the theoretical model for curvature convergence, we might have expected some sort of curvature approximation. Even a negative result such as the one presented in this section can increase the confidence in the results generated by an implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EXPERIMENTAL RESULTS</head><p>In this section we present the results of applying the afore-described methodology. We use the framework to verify six different isosurface extraction codes, namely: VTK Marching Cubes <ref type="bibr" target="#b14">[15]</ref>, SnapMC <ref type="bibr" target="#b20">[21]</ref>, Macet <ref type="bibr" target="#b5">[6]</ref>, Dual Contouring <ref type="bibr" target="#b10">[11]</ref>, Afront <ref type="bibr" target="#b22">[23]</ref>, and DelIso <ref type="bibr" target="#b4">[5]</ref>. All these implementations are open source and/or publicly available 1 . Before presenting the actual results of subjecting these implementations to the verification process, we briefly review their salient features. VTK Marching Cubes: Marching Cubes <ref type="bibr" target="#b14">[15]</ref> (MC) is arguably the most popular isosurface extraction algorithm. It reduces the problem of generating an isosurface triangulation to a finite set of cases by considering the signs of how the isosurface intersects each cell of a regular background grid. As there are only 256 different types of intersections between the isosurface and a regular Cartesian 3D cell, a template of triangles is set to each case, making the implementation quite simple through a look-up table. The vertices of the triangles lie on the edges of the cubic cells, and they are computed by linearly interpolating the implicit function values stored at the corners of the grid cell. SnapMC: SnapMC <ref type="bibr" target="#b20">[21]</ref> is a recently proposed algorithm that extends the original Marching Cubes look-up table to cases where the isosurface goes exactly through the corners of the background grid. The new look-up table is automatically built by an adaptation of the convex hull scheme proposed by Bhaniramka et al. <ref type="bibr" target="#b1">[2]</ref>. Even though the traditional Marching Cubes algorithm can easily handle these cases by some kind of symbolic perturbation, SnapMC perturbs the scalar field to avoid edge intersections close to grid corners. In particular, it changes the values on the grid so that the surface is "snapped" to the grid corners. Macet: Macet <ref type="bibr" target="#b5">[6]</ref> is another variant of Marching Cubes that tries to improve the shape of the triangles in a mesh. Unlike SnapMC, it perturbs the active edges of Marching Cubes cases by moving the vertices before the triangulation step. The motivation behind Macet is that poorly-shaped triangles tend to be generated when the intersection between the isosurface and a grid cell is approximately parallel to an edge of the grid cell. Therefore, some corners of the background grid are displaced so as to avoid the parallel-like intersections. Dual Contouring: Dual Contouring <ref type="bibr" target="#b10">[11]</ref> is a feature-preserving isosurfacing method to extract crack-free surfaces from both uniform and adaptive octree grids. This technique can be seen as a combination of Extended Marching Cubes <ref type="bibr" target="#b12">[13]</ref> and SurfaceNets <ref type="bibr" target="#b6">[7]</ref> as it makes use of Hermite data and quadratic error function minimization to position the vertices of the surface mesh (as Extended Marching Cubes) and the dual topology to connect such vertices (as SurfaceNets). Dual Contouring tends to generate better quality triangles than Marching Cubes while still being very effective in representing sharp features, rendering this implicit polygonalization method a good alternative to the popular Marching Cubes. Afront: Afront <ref type="bibr" target="#b22">[23]</ref> is an advancing-front method for surface extraction. Although we focus on applying Afront to isosurface extraction, it can also be used for remeshing and triangulating point-set surfaces. The outstanding feature of Afront is that it generates triangles adapted to the local details of a surface, namely its maximum absolute curvature. In this sense, Afront is fundamentally different from the other algorithms we analyze. In lieu of grid refinement, we will use its ρ parameter to control triangulation size. Because the manufactured solution we use is a sphere, reducing ρ by half is roughly equivalent to reducing the maximum triangle size by half. A full analysis of Afront (and, in particular, the influence of the other main parameter η) warrants further investigation, but is beyond the scope of this paper. DelIso: DelIso <ref type="bibr" target="#b4">[5]</ref> is a Delaunay-based approach for isosurfacing. It computes the restricted Delaunay triangulation from a 3D Voronoi Diagram. We run our tests on a customized version of DelIso 16 bit, and our examples use the default set of parameter.</p><p>In what follows, we present the results of applying the verification process to these algorithms. We will describe the manufactured solutions we use and their observed convergence rate on the isosurface extraction algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Observed order of accuracy</head><p>We start by investigating the behavior of the algorithms under the manufactured solution given by the scalar field f (x, y, z) = x 2 + y 2 + z 2 − 1 and isosurface f (x, y, z) = 0 in the domain D = [−4, 4] 3 . LetS k be a simplicial complex that approximates S for a given discretization parameter k (cell size h for marching cubes-based methods, accuracy ρ for Afront and maximum edge size ι for DelIso). The order of accuracy for VTK Marching Cubes, SnapMC, Macet and Dual Contouring depends on the cell size h. We run our tests with grid refinement h i+1 = h i /2 and initial condition h 1 . For Afront, the order of accuracy depends on parameter ρ thus the refinement is given by ρ i+1 = ρ i /2 with initial condition ρ 1 . Our customized version of DelIso has an additional parameter ι that controls the largest edge on the output mesh. In this case, the refinement formula is ι i+1 = ι i /2. In the particular case of SnapMC, we set the snap parameter γ to its maximum value (γ = 1/2). Even though the manufactured solution we selected is about as simple as can be imagined, comparing the formal order of accuracy with the observed one was enough to suggest bugs in two implementations. The observed order of accuracy of the examined properties is presented on <ref type="table" target="#tab_1">Table 1</ref>. 4.1.1 Algebraic distance Section 3.1 shows that one expects second-order convergence for function value on vertices if linear interpolation is used. We define the following approximation error on L ∞ norm:</p><formula xml:id="formula_19">E k = max j=1•••n |λ − f (v j )| (10)</formula><p>where λ is the isovalue of interest, v j is a vertex ofS and n the number of vertices. <ref type="figure" target="#fig_5">Figure 7(a)</ref> shows the vertex observed order of accuracy. VTK Marching Cubes, SnapMC have nearly quadratic convergence rates as shown in <ref type="figure" target="#fig_5">Figure 7</ref>(a). Afront shows a zero-order of accuracy though it presents very low error (in fact, the lowest in <ref type="figure" target="#fig_5">Figure 7(a)</ref>). This is due to the Catmull-Rom spline that is being used for surface approximation on the voxelized grid. Since it has cubic-order of accuracy, even for large values of ρ it can approximate with high precision the manufactured solution f . Next section shows that this is due to a poor choice for a manufactured solution. DelIso implementation has non-zero order of accuracy due to an outlier. Large values of ι causes bad approximations of the manufactured solution. The Macet and Dual Contouring curves suggest that the algorithms converge to a fixed value. In fact, there was indeed a problem in the implementation that was affecting the convergence of Macet and Dual Contouring (specifically, we found a hard-coded limit in the number of steps in a root-finding procedure that was being triggered by the high resolution of the volume). Once fixed, we obtain the results shown in <ref type="figure" target="#fig_6">Figure 8</ref>(a). Macet and Afront now have similar behavior in the observed order of accuracy of vertex position <ref type="figure" target="#fig_6">(Figure 8(a)</ref>). This is because both methods use high-order interpolation with splines, not linear interpolation as assumed before (see Section 5). 4.1.2 Normals Section 3.2 shows that one expects first-order of accuracy for normal computations. We define the following approximation error using L ∞ norm:</p><formula xml:id="formula_20">E k = max j=1•••n |θ σ j |<label>(11)</label></formula><p>where θ σ j is the angle between the normal of the triangle σ j and the normal of the point in S closest to the centroid of σ j . As shown in <ref type="figure" target="#fig_5">Figure 7</ref>(b), VTK Marching Cubes, Afront, SnapMC and DelIso have good observed order of accuracy above 0.8. However, only VTK Marching Cubes and DelIso present close proximity to linear. Macet and Dual Contouring once again do not present a consistent order. <ref type="figure" target="#fig_6">Figure 8(b)</ref> shows the results after fixing both codes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Area</head><p>Although there is no formal order of accuracy for area, one expects some convergence for it (Section 3.3). We define the following approximation error:</p><formula xml:id="formula_21">E k = |A(S) − A(S k )| (12)</formula><p>where A is the area function of a continuous or piecewise-linear surface. The results are shown in <ref type="figure" target="#fig_5">Figure 7</ref>(c). VTK Marching Cubes, Afront and DelIso present second-order of accuracy as shown in <ref type="figure" target="#fig_5">Figure 7(c)</ref>. SnapMC accuracy is slightly better than quadratic due to poor approximation for large h. The error dropped faster than quadratic when the grid was refined for the first time. Macet and Dual Contouring exhibit once again unexpected behavior. Unlike the previous time, the curves now seem to diverge when h is too small. Once the bug is fixed the convergence curves changes, and they become quadratic <ref type="figure" target="#fig_6">(Figure 8(c)</ref>). 4.1.4 Curvature Section 3.4 shows that one expects zero-th order of accuracy for curvature computation. We define the approximation error using L ∞ norm:</p><formula xml:id="formula_22">E k = max j=1•••n |K(v j ) −K(v j )|<label>(13)</label></formula><p>where K(v) is the Gaussian curvature at v ∈ S andK(v) is the Gaussian curvature at v ∈S. In this particular case where S is a sphere, K(v) = 1 for every v ∈ S. The results are shown in <ref type="figure" target="#fig_5">Figure 7(d)</ref>. DelIso, Afront and SnapMC are close to zeroth-order accuracy. The curvature order of accuracy for VTK Marching Cubes, on the other hand, diverges significantly. This unexpected behavior might deserve further investigation which we leave for future work. Although the curves shown in <ref type="figure" target="#fig_5">Figure 7</ref>(d) for Macet and Dual Contouring diverge, they change after fixing the code <ref type="figure" target="#fig_6">(Figure 8(d)</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Detected Bugs</head><p>We were able to find and fix bugs in two of the implementations under verification, namely, Macet and Dual Contouring, using as manufactured solution a sphere centered at origin with radius 1. The new result curves are shown in <ref type="figure" target="#fig_6">Figure 8</ref>. Contouring is quite satisfactory for all manufactured solution. In particular, the normal order of accuracy has the best rate among the methods. Macet improved for its results for area. On the other hand, it still has some issues related to normals, which perhaps indicates a need for more tests and verification. The new order of accuracy for algebraic distance <ref type="figure" target="#fig_6">(Figure 8</ref>(a)) does not tell us much about the correctness of the code because of the zero-th order of accuracy (same for Afront).</p><p>The zero-th order of accuracy might happen if the formal order of accuracy is zero-th order, in which case the observed order matches the formal order. It might also happen due to a poor choice for manufactured solution. If it is not complex enough, the implementation being tested may approximate exactly the solution and therefore there is no error within the approximation although another error source (truncation error, for instance) may show up. The next section presents a detailed discussion concerning MMS.</p><p>Although we managed to fix the Macet convergence problem, we were not able to do so in a way that preserves triangle quality ( <ref type="figure">Figure  1</ref>). Two were the problems we found in the source code, and we proposed two solutions for one of them. <ref type="table" target="#tab_2">Table 2</ref> shows that we could not find any combination that both fixed the convergence problem and preserved the triangle quality simultaneously. This sort of behavior raises the question if there is a theoretical problem that prevents both from being satisfied simultaneously, or it is just a matter of finding a better algorithmic fix. In both cases, further study and subsequent tests must be accomplished.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION</head><p>As we have shown, MMS is an effective means of diagnosing problems within the algorithms and implementations of isosurface extraction algorithms. In this work we have considered the two -algorithm and implementation -as one unit as one cannot always distinguish between the two if only limited information (source code and algorithmic details) is available. In this section, we present a more thorough discussion of the use of MMS, particularly for isosurface extraction. On the implementation and use of MMS. One of the primary advantages of verifying simulation codes using MMS is that it is a nonintrusive method. MMS treats the code being verified as a blackbox, and so can be easily integrated into an existing test suite with little to no impact. However, MMS does not "see" the implementation, and so provides little direct information about where a particular bug might be when there is a discrepancy between the formal and observed orders of accuracy. In our experience, there are three main places where mistakes can happen: (1) in the design and construction of the manufactured solution, (2) in the coding of the algorithm being tested, and (3) in the evaluation and interpretation of the results. Mistakes on the evaluation of results have two flavors: misinterpretation or poor formal order of accuracy. The first heavily depends on testers' and experts' experience and ability to judge what a good result is. For example, should the normal observed order of accuracy for Afront and Macet on <ref type="figure" target="#fig_5">Figure 7</ref>(b) be considered linear (p = 0.80 and p = 0.75 respectively)? The latter depends on a rigorous formal order of accuracy analysis of the algorithm considering all sorts of errors; even round-off errors may be significant. In fact, we spent more time on writing out rigorously the analysis of the formal order of accuracy and on searching for possible sources of error than on the tests themselves. This again highlights the fact that verification using MMS is a process: it is typical to go back to the white board and refine formal analyses before arriving at conclusive answers. Although the formal order of accuracy analysis might be a painful process, the literature has many results that can be promptly used. As a consequence, if one wishes to writes his own MC technique, for instance, his only concern is to write a test which exploits the results available within the literature. On the complexity of the manufactured solution. The complexity of the manufactured solution can have a large influence on the effectiveness of verification. Suppose one chooses the manufactured solution to be f (x, y, z) = x + y + k, k constant, instead of a sphere. Since MCbased techniques use linear interpolation, one expects the approximation to be exact regardless of any discretization parameter h, i.e., p = 0 (notice that the evaluated error might be non-zero, implying there is some other error source that does not depend on h). Since such a func- <ref type="figure">Fig. 9</ref>. Order of accuracy for a transcendental function f (x, y, z) = x 2 + y 2 + z 2 + cos(Ax) 2 + cos(Ay) 2 + cos(Az) 2 , A is a constant. The observed orders of accuracy for all implementations are relative to the voxel size h. We expect third-order accuracy for Afront and Macet due to their use of high-order spline approximations. Both have the expected convergence rate for all but the last two values.</p><p>tion f is extremely simple, it might not trigger bugs that would otherwise reduce the observed order of accuracy. In our experiments, the (problematic) implementation of Dual Contouring achieved the formal order of accuracy for this particularly simple function (p = 0).</p><p>Another example on the influence of manufactured solution arose with in our examination of Afront. Because Afront uses Catmull-Rom splines, some simple isosurfaces will converge to within numerical error for very rough volumes, and the numerically observed order of accuracy will be much lower than expected. With an implicit function whose isosurfaces are spheres, we observed zero-th order of accuracy for Afront for algebraic distance. With a modified implicit function that included transcendental functions, MMS reveals that Afront does not have the expected convergence rate on the full interval, as shown in <ref type="figure">Figure 9</ref>. Notice that Macet has similar behavior. Additional tests are needed to determine the source of this behavior within both codes. On the order of accuracy. In this paper, we have chosen to make our formal analysis as generic as possible to accommodate as many implementations under verification as possible. Although we are able to evaluate many codes using the same manufactured solution, when using MMS for a particular code, it is best to exploit as much detail about the algorithm as necessary. If the goal is to design a manufactured solution for verifying Marching Cubes-based techniques the manufactured solution should exercise all possible cases. Additionally, particular aspects of the manufactured solutions can be incorporated into the formal analysis. For example, the analysis for Afront becomes much more complicated if curvatures are not constant over the surface (in that case, its additional parameter η comes into play <ref type="bibr" target="#b22">[23]</ref>, and accurately bounding the triangle size is not practical).</p><p>The errors in Section 4.1 were measured at different locations on the mesh. Vertex convergence and Gaussian curvature were measured on triangle vertices, while normals were measured on the triangle centroid. More importantly, measurements performed at different locations may have different orders of accuracy. For example, Macet has cubic formal order of accuracy on vertices due to the spline approximation but quadratic formal order of accuracy on centroids.</p><p>In Section 3, we define the error using a pessimistic L ∞ norm. This makes MMS a very sensitive technique. In fact, it can detect subtle offby-one mistakes in grid sizes and interactions between node-centric and cell-centric reconstructions, even for simple manufactured solutions. In these cases, it is important not to infer incorrect conclusions.</p><p>The numerical estimates for MMS should be performed on as wide a range of parameter values as possible. In our tests, we used h ∈ (0.001, 1.0) and observed that both faulty implementations performed appropriately for large values of h. Just as the implementations might only enter the asymptotic regime and achieve the formal convergences for small values of h, it might be that (as we have experienced) bugs only manifest themselves on sufficiently small values of h. On the limitations of the test. MMS does not cover every aspect of verification for isosurface extraction. For example, an important aspect we do not know how to test with MMS is the topological correctness of an extracted mesh. This is challenging because there does not seem to be a good measure of convergence for topological properties such as the Euler characteristic or Betti numbers. A proper study of these issues is a natural avenue for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>Because of its simplicity and effectiveness, we believe MMS could become a standard tool in the verification of scientific visualization software in the same that it has been adopted by the scientific simulation community as a trustworthy tool for assess code correctness. Using a simple manufactured solution, we were able to reveal bugs that prevented the convergence of some mesh properties of two publicly available isosurfacing codes. In particular, the by-products of the verification process, namely a continuous refinement of mathematical analysis of the algorithm's behavior and a numerical comparison of the results of the implementation against a known solution are valuable in their own right, and should be published together with new algorithms.</p><p>We are investigating the applicability of MMS to other visualization techniques such as streamline generation and volume rendering. In particular, MMS should clarify assumptions and errors intrinsic in these visualizations, a topic that has received recent attention <ref type="bibr" target="#b9">[10]</ref>. More importantly, we hope the examples presented here will encourage the adoption of MMS by the visualization community at large, increasing the impact of its contributions to a wider audience.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Overview of the method of manufactured solutions (MMS).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Workflow for the method of manufactured solution(Figure 2), clockwise from the top left.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>The distance between a point v and the isosurface S with isovalue λ can be approximated by the algebraic distance divided by the gradient magnitude of the scalar field at</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Isosurface local parametrization and approximation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Uniform convergence does not imply convergence in area. The sequence of curves converges uniformly to a straight line, but the length of the curves does not change.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Observed order of accuracy. The implementations of Macet and Dual Contouring have a bug that causes the deviation on errors. The black continuous line represents the expected behavior. p is the slope of the linear regression for each curve.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 .</head><label>8</label><figDesc>Observed order of accuracy after fixing Macet and Dual Contouring code (other curves remain the same). The black continuous line represents the expected behavior. p is the slope of the linear regression for each curve.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Etiene, Scheidegger, Kirby and Silva are with the School of Computing and Scientific Computing and Imaging Institute, University of Utah, Salt Lake City, UT, 84112, USA. E-mail: {tetiene,cscheid,kirby,csilva}@cs.utah.edu. • Nonato is with Universidade de São Paulo, Brazil. E-mail: gnonato@icmc.usp.br.</figDesc><table /><note>Manuscript received 31 March 2009; accepted 27 July 2009; posted online 11 October 2009; mailed on 5 October 2009. For information on obtaining reprints of this article, please send email to: tvcg@computer.org .</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Comparison between formal order of accuracy and observed order of accuracy using f (x, y, z) = x 2 + y 2 + z 2 − 1 as a manufactured solution and for different algorithms.<ref type="bibr" target="#b0">1</ref> indicates the original source code and 2 our fixed version. * indicates that a high-order spline was used instead of a linear interpolation (Section 3).</figDesc><table><row><cell></cell><cell cols="4">Vertex Normal Area Curvature</cell></row><row><cell></cell><cell>O(h 2 )</cell><cell>O(h)</cell><cell>-</cell><cell>O(1)</cell></row><row><cell>VTK MC</cell><cell>1.94</cell><cell cols="2">0.93 2.00</cell><cell>−3.35</cell></row><row><cell>SnapMC</cell><cell>1.93</cell><cell cols="2">0.82 2.14</cell><cell>−0.29</cell></row><row><cell>Afront  *</cell><cell>−0.06</cell><cell cols="2">0.80 1.93</cell><cell>−0.27</cell></row><row><cell>Macet 1, *</cell><cell>0.98</cell><cell cols="2">−0.12 0.29</cell><cell>−2.41</cell></row><row><cell>Macet 2, *</cell><cell>0.03</cell><cell cols="2">0.75 2.02</cell><cell>−0.61</cell></row><row><cell>DC 1</cell><cell>1.02</cell><cell cols="2">−0.11 0.69</cell><cell>−2.08</cell></row><row><cell>DC 2</cell><cell>1.96</cell><cell cols="2">0.96 1.89</cell><cell>−0.15</cell></row><row><cell>DellIso</cell><cell>1.49</cell><cell cols="2">1.07 2.04</cell><cell>0.07</cell></row></table><note>1 Links at http://www.sci.utah.edu/˜etiene/</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 .</head><label>2</label><figDesc>Tableof results for Macet. Triangle quality versus convergence. We were not able to find a solution that provides both triangle quality and convergence.</figDesc><table><row><cell>The observed order of accuracy for Dual</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank Lauro Lins and Tom Peters for help with the paper, João Comba for help with the Macet code, and Tamal Dey and Joshua Levine for the customized version of DelIso used in this work. This work was supported in part by grants from NSF (grants IIS-0905385, IIS-0844546, ATM-0835821, CNS-0751152, OCE-0424602, CNS-0514485, IIS-0513692, CNS-0524096, CCF-0401498, OISE-0405402, CCF-0528201, CNS-0551724), DOE, IBM Faculty Awards and PhD Fellowship, the US ARO under grant W911NF0810517, ExxonMobil, and Fapesp-Brazil (#2008/03349-6).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Verification and validation in computational engineering and science: basic concepts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Babuska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Methods in Applied Mechanics and Engineering</title>
		<imprint>
			<biblScope unit="volume">193</biblScope>
			<biblScope unit="page" from="4057" to="4066" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Isosurface construction in any dimension using convex hulls</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhaniramka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wenger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Crawfis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="130" to="141" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Artifacts caused by simplicial subdivision</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="231" to="242" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Metro: measuring error on simplified surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="167" to="174" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Delaunay meshing of isosurfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">K</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Levine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SMI &apos;07: Proceedings of the IEEE International Conference on Shape Modeling and Applications</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="241" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Edge transformations for improving mesh quality of marching cubes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Dietrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schreiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L D</forename><surname>Comba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Nedel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="150" to="159" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Using distance maps for accurate surface representation in sampled volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gibson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Evaluation of visualization software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Globus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Uselton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIG-GRAPH Comp. Graph</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="41" to="44" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On the convergence of metric and geometric properties of polyhedral surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hildebrandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Polthier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wardetzky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Geometriae Dediacata</title>
		<imprint>
			<biblScope unit="issue">123</biblScope>
			<biblScope unit="page" from="89" to="112" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A next step: Visualizing errors and uncertainty</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Sanderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE CG&amp;A</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="6" to="10" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Dual contouring of hermite data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Losasso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schaefer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH&apos;02</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="339" to="346" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The need for verifiable visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kirby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="78" to="83" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Feature sensitive surface extraction from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Schwanecke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;01</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="57" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Efficient implementation of marching cubes cases with topological guarantees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lewiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lopes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Vieira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Tavares</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graphics Tools</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="15" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Marching cubes: A high resolution 3d surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGGRAPH Comp. Graph</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">An evaluation of reconstruction filters for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Marschner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Lobb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="100" to="107" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On surface normal and gaussian curvature approximation given data sampled from a smooth surface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Meek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Walton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="521" to="543" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An evaluation of implicit surface tilers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="33" to="41" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A comparison of fundamental methods for iso surface extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Skala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Machine Graphics &amp; Vision International Journal</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="329" to="343" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On the accuracy of isosurfaces in tomographic volume visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pommert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Tiede</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Höhne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MICCAI&apos;02</title>
		<meeting><address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="623" to="630" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Quality isosurface mesh generation using an extended marching cubes lookup table</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Raman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wenger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="791" to="798" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Review of code and solution verification procedures for computational simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Roy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Phys</title>
		<imprint>
			<biblScope unit="volume">205</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="131" to="156" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">High-quality extraction of isosurfaces from regular and irregular grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schreiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1205" to="1212" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A case study of isosurface extraction algorithm performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Visualization</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="259" to="268" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Parameterized families of polynomials for bounded algebraic curve and surface fitting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Cukierman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ponce</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kriegman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE PAMI</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="287" to="303" />
			<date type="published" when="1994-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Human factors in visualization research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tory</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVCG</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="72" to="84" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Convergence analysis of a discretization scheme for gaussian curvature over triangular surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Aided Geom. Des</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="193" to="207" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Convergence analysis of discrete differential geometry operators over surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-G</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mathematics of Surfaces XI</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3604</biblScope>
			<biblScope unit="page" from="448" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Metrics and visualization tools for surface mesh comparison</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE -Visual Data Exploration and Analysis VIII</title>
		<meeting>SPIE -Visual Data Exploration and Analysis VIII</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">4302</biblScope>
			<biblScope unit="page" from="99" to="110" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
