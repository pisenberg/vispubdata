<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Time and Streak Surfaces for Flow Visualization in Large Time-Varying Data Sets</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hari</forename><surname>Krishnan</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Garth</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Kenneth</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
						</author>
						<title level="a" type="main">Time and Streak Surfaces for Flow Visualization in Large Time-Varying Data Sets</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-20T19:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>3D vector field visualization</term>
					<term>flow visualization</term>
					<term>time-varying</term>
					<term>time and streak surfaces</term>
					<term>surface extraction</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Time and streak surfaces are ideal tools to illustrate time-varying vector fields since they directly appeal to the intuition about coherently moving particles. However, efficient generation of high-quality time and streak surfaces for complex, large and time-varying vector field data has been elusive due to the computational effort involved. In this work, we propose a novel algorithm for computing such surfaces. Our approach is based on a decoupling of surface advection and surface adaptation and yields improved efficiency over other surface tracking methods, and allows us to leverage inherent parallelization opportunities in the surface advection, resulting in more rapid parallel computation. Moreover, we obtain as a result of our algorithm the entire evolution of a time or streak surface in a compact representation, allowing for interactive, high-quality rendering, visualization and exploration of the evolving surface. Finally, we discuss a number of ways to improve surface depiction through advanced rendering and texturing, while preserving interactivity, and provide a number of examples for real-world datasets and analyze the behavior of our algorithm on them.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Integral curves have a long standing tradition in vector field visualization as a powerful tool for providing insight into complex vector fields. They are built on the intuition of moving particles and the representation of their trajectories. A number of different variants exist; while streamlines and pathlines directly depict single particle trajectories, other curves visualize the evolution of particles that are seeded coherently in space (time lines) or time (streak lines). These curves have their roots in experimental flow visualization and correspond to smoke or dye released into a flow field. Generalizing on these concepts, integral surfaces extend the depiction by one additional dimension.</p><p>Stream and path surfaces aim to show the evolution of a line of particles, seeded simultaneously, over its entire lifetime. These surfaces have been shown to provide great illustrative capabilities and much improved visualization over simple integral curves, due to improved depth perception and lighting, and increase the visual insight into flow structures encountered during their evolution. Time surfaces increase the dimensionality further by showing the evolution of a twodimensional sheet of particles. Finally, streak surfaces borrow from both path surface and time surfaces by portraying an evolving sheet of particles that grows during the evolution at a seeding curve as new particles are added to the surface. They are analogous to streak lines in that they originate from wind tunnel experiments with line-shaped nozzles, and are therefore in a sense a very natural surface visualization primitive for time-varying flows.</p><p>Application of integral surface visualization to large, complex and time-varying flow is not without complication. Typical algorithms for the approximation of stream and path surfaces make use of a form of discretization to deduce the evolution of the surface from a finite set of particles representing it. The required integral curve computation is costly for large vector fields, and most algorithms make use of adaptive techniques to keep the number of required particles small, while preserving the geometric quality of the resulting surface discretization. Such methods typically require pre-computation of the integral surface, which can then be viewed interactively as a triangle mesh. Unfortunately, such methods do not generalize well to time or streak surfaces because they cannot provide interaction with the temporal com- ponent of the surface evolution. For small to medium-sized rectilinear datasets, GPU-based implementations have shown the tremendous potential for insight that can be obtained from interaction with time in time and streak surface visualization.</p><p>Here, we contribute a novel method for the computation of time and streak surfaces that captures the temporal evolution of such surfaces for visualization. Our algorithm is based on decoupling the adaptation of the surface representation from the integration of particle trajectories. As a result, we obtain a set of curves that describe the trajectories of surface vertices, and an incremental description of the surface mesh based on these particles trajectories. This allows us to faithfully recreate a surface in a visualization stage and provide full interactive capabilities in both space and time. Furthermore, by isolating particle advection from surface adaptation, we are able to leverage the full parallelization potential inherent in the mutually independent trajectories of individual surface particles and significantly speed up the computation in the presence of multiple CPUs or clusters. Moreover, noting that for very large datasets interactive seeding of time and streak surfaces remains elusive due to the computational overhead of their approximation, we propose the concept of generalized streak surfaces seeded from a moving seed curve. We show that through this, we are able to mitigate some of the difficulties of surface seeding in large vector fields by essentially prescribing an exploratory path for the seed curve prior to computation.</p><p>The surfaces we obtain in complex datasets are often highly complex, due to their folding and twisting nature, and warrant the use of advanced rendering techniques to increase the visual insight resulting from them. Here, we investigate a number of typical complications, such as self-occlusion, and analyze possibilities on how to mitigate them to achieve maximal visualization value from time and streak surfaces.</p><p>The paper is structured as follows: We start out by discussing previous work that related to the ideas presented here in Section 2. After revisiting the basic surface concepts we make use of in Section 3, we describe our algorithm for the computation of time and streak surfaces in Section 4. We then proceed to describe application examples and investigate the behavior and performance of our method in Section 7. Following, we examine visualization aspects of time and streak surfaces in Section 6, before we conclude on the presented material in Section 8 and look ahead to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK</head><p>Among integral surfaces, stream surfaces have been most heavily investigated in the visualization community. The first algorithm for stream surface computation was given by Hultquist <ref type="bibr" target="#b6">[7]</ref>, who described an advancing front paradigm that traverses the surface, integrating particle trajectories as needed and triangulating the surface on-the-fly using a greedy approach. In his algorithm, divergence and convergence of particles in the advancing front is treated using a distance criterion that inserts and removes particles from the advancing front if they grow too far apart or too close, respectively. The resulting surfaces are of good visual quality. Garth et al. <ref type="bibr" target="#b4">[5]</ref> improved upon Hultquist's work by employing arc-length particle integration and additional curvaturebased front refinement, which results in a better surface triangulation if the surface strongly shears, twists, or folds. They also considered visualization options such as color mapping of vector field-related variables going beyond straightforward surface rendering. Texture mapping on stream surfaces was first proposed by LÃ¶ffelmann <ref type="bibr" target="#b9">[10]</ref>, and several improvements were presented later <ref type="bibr" target="#b8">[9]</ref>. A different computational strategy was employed by van Wijk <ref type="bibr" target="#b14">[15]</ref>, who reformulated stream surfaces as isosurfaces; however, his method requires increased computational effort to advect a boundary-defined scalar field throughout the flow domain. Scheuermann et al. <ref type="bibr" target="#b12">[13]</ref> presented a method for tetrahedral meshes that solves the surface integration exactly per tetrahedron. More recently, Garth et al. <ref type="bibr" target="#b3">[4]</ref> replaced the advancing front paradigm by an incremental time line approximation scheme, allowing them to keep particle integration localized in time. They applied this algorithm to compute stream surfaces and path surfaces in large and time-varying datasets. Using a GPU-based approach, Schafhitzel et al. <ref type="bibr" target="#b11">[12]</ref> presented a point-based algorithm that does not compute an explicit mesh representation but rather uses a very dense set of particles, advected at interactive speeds, in combination with point-based rendering.</p><p>The increased complexity of time and streak surface computation over stream and path surfaces can be traced back to two main factors: first, many more particles are required for adequate discretization, and second, instead of an advancing (piecewise linear) front or time line a surface discretization has to be maintained and adapted. In the literature, the first problem is usually addressed by GPU implementations, allowing for fast or even interactive computation of the required particles. Westermann et al. <ref type="bibr" target="#b16">[17]</ref> approached the visualization of time surfaces in stationary flow using a level-set approach, where the surface is described as the level set of a scalar field that is advected at interactive speeds on a GPU. This allows for interactive computation and display, and avoids the explicit surface adaptation. A slightly different approach was presented recently by Funck et al. <ref type="bibr" target="#b15">[16]</ref>: they represent time and streak surfaces using a triangle mesh which is propagated along the trajectories of particles at the vertices of the triangulation, integrated on the CPU. Instead of performing surface adaptation, the mesh remains unchanged, and loss of mesh quality is compensated by fading out triangles according to a number of quality criteria, mimicking the appearance of smoke. While they achieve aesthetically pleasing visualization in combination with interactive framerates and seeding, the resulting surfaces are of limited use in complex flows where the initial triangulation quickly degenerates. All methods that make use of GPUs to compute time and streak surfaces possess the common drawback that they are unsuitable for very-large time-varying data, due to the limitation to regularly sampled data, the reduced amount of memory available on GPUs, and the restriction to floating-point precision during the integration phase. In contrast to these approaches for time and streak surfaces, the algorithm we present here is explicitly aimed at a CPU-based treatment of very large, time-varying vector fields. We maintain an explicit triangulation for the surface and adapt it as the surface is advected through the flow. To increase computational speed, however, we separate this mesh adaptation from the actual particle integration, allowing us to parallelize particle tracing.</p><p>The dynamic adaptation of deforming and moving triangle meshes has a long record in the computer graphics community where it is applied among other applications to track and render fluid surfaces and to simulate cloth and elastic objects (cf. <ref type="bibr" target="#b1">[2]</ref> and references contained therein). The basic objective of such surface tracking methods is to maintain a well-conditioned triangulation in the face of strong deformations of the surface, by using edge split, edge flip and edge collapse operations to return a mesh to good form after an advection step has been performed. While such tracking algorithms are theoretically a good match to the adaptation of time surfaces, a straightforward application encounters several problems that stem from the simulated and numerical nature of the datasets under consideration such as noise and limited accuracy of interpolation. Furthermore, these methods require to advect the mesh by very small time steps, such that the deformation incurred during advection is not too great; this represents a serious performance impediment for large datasets, where the use of adaptive numerical integration for particle advection is essential to both performance and accuracy. Here, we propose a modified approach that decouples the surface adaptation from the particle advection, thereby avoiding the performance penalty of small adaptation time steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">TIME AND STREAK SURFACES</head><p>We assume that v is a three-dimensional vector field, defined over a domain â¦ â R 3 and a time interval [T min , T max ]. An integral curve I of v is the solution to the ordinary differential equation</p><formula xml:id="formula_0">d dt I (t 0 ,x 0 ) (t) t=Ï = v Ï, I (t 0 ,x 0 ) (Ï) , with I (t 0 ,x 0 ) (t 0 ) = x 0 . (1)</formula><p>Simply put, it is a curve that originates at the point (t 0 , x 0 ) and is tangent to the vector field at every point over time. The intuitive understanding associated with such integral curves is that of massless particles that are advected through a domain by a vector field v. For the category of Lipschitz-continuous vector fields existence and uniqueness of I is guaranteed and numerical integration methods can be used to approximate the solution. Note that for the overwhelming majority of application data sets, this condition holds true.</p><p>A time surface S time is a two-dimensional family of integral curves that originate from a common seed surface S(u, v) â â¦, or alternatively, the surface formed by a dense set of particles that are located on S at time t 0 and jointly traverse the flow over a time interval [t 0 ,t].</p><p>It is mathematically described as</p><formula xml:id="formula_1">S time (u, v ; t) := I (t 0 ,S(u,v)) (t) for t â¥ t 0 .<label>(2)</label></formula><p>Furthermore, let C(u) be a curve, parameterized over u and contained in â¦. Then, a streak surface S streak is the union of all particles emanating continuously from C over a time interval [t 0 ,t] and moving with the flow from the time of their seeding t s . In terms of individual integral curves, it is described as</p><formula xml:id="formula_2">S streak (u,t s ; t) := I (t s ,C(u)) (t) for t â¥ t s â¥ t 0 .<label>(3)</label></formula><p>It is again a two-dimensional surface, but in contrast to time surfaces, the second parameter t s refers to the seeding time. Clearly, a streak surface consists only of the curve C at time t 0 and "grows" over time as more integral curves are seeded from C; the intuition behind streak surfaces builds upon the notion of dye continuously injected into a flow from a curve-shaped nozzle, described by C. Following Wiebel et al. <ref type="bibr" target="#b17">[18]</ref>, we extend the above definition of streak surfaces slightly to allow C to vary with time. The above definition is then generalized by replacing C(u) with C(u;t s ), and the resulting surfaces are called generalized streak surfaces.</p><p>Note that if the vector field is stationary, i.e. v is constant in t, then the path of particle does not depend on the seeding time t 0 . As a consequence, streak surfaces are identical to path surfaces (cf. <ref type="bibr" target="#b3">[4]</ref>) in such settings. However, this does not hold for generalized streak surfaces. Both surface types are continuous and differentiable almost everywhere over their respecitve parameter domains. However, as is often the case in application vector field data, if â¦ is finite or contains holes, the resulting surfaces may not include points for all parameters tuples (u, v ; t) and (u,t s ; t), respectively.</p><p>We proceed to describe an algorithm to construct approximations to both S time and S streak using a finite number of integral curves and triangulated surface adaptation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">METHOD</head><p>In the following, we first give an overview about our algorithm in general, before we detail integration, adaption, and surface growing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Basic Algorithm</head><p>In general, we assume that the vector field dataset under consideration is provided in the form of a finite number of time steps corresponding to time values t 0 , . . . ,t n , and that the seeding curve C or surface S is provided in the form of either a functional description or as a discrete representation as polyline or triangulated surface. From this, we construct an initial triangulation T that is successively advected and adapted. Our algorithm thereby makes use of two distinct time stepping approaches. Every vertex of T corresponds to an integral curve, and we advect vertices over an interval [t i , . . . ,t i+1 ] using adaptive numerical integration, obtaining a description of the integral curves over the entire interval (cf. 4.2). In contrast to this dataset timestep ât, we prescribe an adaptation timestep ât sub . Beginning at t i , the vertices of T are moved in ât sub increments, and after every step, the adaptation process is carried out. Should the insertion of a new vertex become necessary, the seed point of the corresponding integral point is determined at t i , and the curve is numerically propagated over [t i ,t i+1 ]; this serves to minimize the error during the insertion. If the vertices arrive at t i+1 , the process is restarted, with T as the new initial surface. <ref type="figure" target="#fig_2">Figure 2</ref> provides an overview of this algorithm is pseudocode form.</p><p>We observe two basic properties of the above algorithm:</p><p>â¢ Most integral curve computations are performed at the beginning of a new time interval [t i ,t i+1 ]. Hence, these mutually independent computations are trivially parallel and can be carried out in a distributed fashion using multiple CPUs or cluster nodes.</p><p>â¢ The surface approximation is sequential in time, and thus successive pairs of timesteps can be treated in a streaming fashion. This enables the treatment of very large datasets on smaller hardware, subject only to the constraints that two timesteps fit into main memory simultaneously.</p><p>We will first describe the numerical implementation we use to approximate integral curves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Integral Curve Computation</head><p>In large vector fields with complex structures, high-order adaptive numerical integration is the key to efficient approximation of integral curves. In our surface approximation, we make use of the DOPRI5 scheme, an adaptive Runge-Kutta scheme of fifth order <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b10">11]</ref>. This scheme was first used for visualization purposes by Stalling <ref type="bibr" target="#b13">[14]</ref>, and its appeal for our application is founded on its ability to provide dense output, i.e. to represent the numerically approximated particle trajectory as a sequence of fourth-order polynomials that form a C1continuous curve. From this curve, any point in the interim evolution of the integral curve is readily computed, and the numerical scheme can perform its task with optimal adaptive stepsize control and is unconstrained by a limit on the maximal distance between two consecutive points on the integral curve (as is the case with other adaptive schemes).</p><p>After the integral for all vertices of T have been computed over [t i ,t i+1 ], T is advanced towards t i+1 using the much smaller step ât sub .</p><p>The new vertex positions are interpolated from the piecewise polynomial representations of the corresponding integral curves. We next describe the surface adaptation that is applied after every such advancement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Surface Adaptation</head><p>During the adaptation phase, the three basic operations edge split, edge flip, and edge collapse (see <ref type="figure" target="#fig_1">Figure 1</ref>) are applied to the triangulation T to improve the quality of the tracked surface. We next describe each of these in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Edge Split</head><p>Since the approximation quality of a triangle mesh is, among other factors, a function of the maximal edge length, we split all triangle edges that are longer than a prescribed threshold d max . Here, a new vertex is inserted at the center of the edge together with a new integral curve seeded at the center of the edge corresponding to the beginning of the dataset timestep, t i . The integral curve is then propagated to t i+1 , and the position of the inserted vertex determined from the integral curve at the current adaptation time. The resulting mesh depends on the order of splits, and we split the longest edge first to keep the mesh well conditioned (refer also to Jiao et al. <ref type="bibr" target="#b7">[8]</ref>). Splits of boundary edges require no special treatment and are performed analogously to interior edges.</p><p>Two exceptional situations can occur during a split operation. First, the new integral curve may not reach the current adaptation time because it intersected a boundary or numerical integration failed. Second, the modified triangulation can contain triangles with inverted normals, since an inserted vertex moved outside the area covered by the original triangles neighboring the edge. In both cases, we insert the vertex at the geometric midpoint of the edge at the current time, and  seed a new integral curve from this point at the current time. If, again, the current point is not contained within the flow domain, we consider the insertion attempt as failed and remove the edge-adjacent triangles from the triangulation. While we could simply keep these triangles in place and not perform the split, we have found this to quickly produce degenerate triangulations. Furthermore, the accuracy of the surface in such a region is questionable, since the necessary refinement could not take place.</p><p>To make the adaptation more robust with respect to erratic numerical integration that is often encountered in simulation datasets (cf. Section 7), we place a very small lower bound A min on the area of triangles that result from the edge split and do not carry it out if this bound is not fulfilled to prevent infinite refinement.</p><p>In addition to linear edge midpoint insertion, there are other schemes to determine the placement of newly inserted edge midpoints, such as the quadratic error minimizing insertion scheme <ref type="bibr" target="#b2">[3]</ref> and the general subdivision schemes such as Butterfly-or â 3-subdivision. We have found however that these methods do not perform very well in our algorithm since they tend to emphasize small scale oscillations, which then quickly lead to large approximation errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Edge Flip</head><p>Edge flipping is commonly used in meshing algorithms such as e.g. Delaunay triangulation. Here, it serves the purpose of improving the local quality of the mesh by maximizing the minimum angle, increasing the approximation quality of the surface triangulation and making it geometrically more well-conditioned. An edge is considered flippable if its potential length after a flip decreases by at least a fixed ratio, which we generally chose as 0.9 to balance excessive flipping with mesh improvement. Again, to avoid degeneracies such as very small or inverted triangles (cf. <ref type="figure" target="#fig_3">Figure 3)</ref>, we compute the triangle area and normals of the edge-adjacent triangles, and do not proceed with the flip operation if the normals are inverted or the resulting triangles do not surpass the small area bound. To prevent flipping of edges that are located on relatively sharp ridges of the surface, we compute the volume of the tetrahedron spanned by the edge vertices and the two opposing vertices; this models the local change of volume enclosed by the surface incurred by flipping. If this volume exceeds a threshold V max , the edge is considered unflippable. We have observed this additional criterion to markedly increase the representation of ridges where the surface folds strongly. While other criteria such as e.g. the dihedral angle can be used to identify such creases, we prefer volume change as a more robust criterion since it is scale-dependent and avoids over-refinement in the presence of small-scale noise.</p><p>Applying the above criteria, we traverse all edges of the triangulation (except the boundary edges) and flip any edge that is considered flippable. As in some regions, several flip operations can be required to achieve optimal quality, we repeat this flipping traversal a small number of times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">Edge Collapse</head><p>In the case of strong convergence of integral curves, the triangulation will come to contain very small triangles, and the number of vertices in such regions becomes excessive. To improve the surface triangulation and reduce the number of integral curves to be propagated in further time steps, we perform edge collapse operations. As opposed to splits and flips, we perform this operation only at the end of the current data timestep t i+1 such that we do not lose approximation accuracy when it is required to perform a split and consequently insertion at t i .</p><p>We consider edges whose length is below a prescribed minimum edge length d min as eligible for collapse. For each such edge, we determine the vertex to be deleted from the triangulation by determining the volume change incurred by the removal of either vertex, and removing the vertex that represents the smaller volume change. This penalizes the removal of edges that are located along ridge-like regions of the surface and improves the approximation of strongly folding surfaces. If the volume change exceeds V max , the collapse is aborted. In similarity to the split operation, we collapse eligible edges in order of ascending edge length. We have again found that replacing an edge by a new midpoint as chosen from quadratic error minimization or subdivision does not yield good results, especially in regions where the surface is ridge-shaped or otherwise non-smooth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.4">Parameters</head><p>The adaptation phase detailed above makes use of a variety of parameters that have to be carefully chosen to balance triangle mesh refinement, coarsening, and approximation quality. We reduce the number of parameters that have to be chosen by coupling them to d max , using d min = 0.1d max , A min = 0.1d <ref type="bibr" target="#b1">2</ref> min , and V max = d 3 min . We have applied this heuristic in all of our experiments and have observed the resulting surfaces to be of good quality, as demonstrated in <ref type="figure">Figure 4</ref> and Section 7. Hence, the remaining parameter d max takes the form of a scaling parameter that must be chosen to roughly reflect the scale of the smallest structures that the surface must resolve correctly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.5">Step Size Estimation</head><p>In order to guarantee that the surface can be adapted correctly, the adaptation timestep ât sub must be chosen such that the triangulation does not undergo irreparable changes in between adaptations. Typically, such a timestep is chosen much smaller than the dataset timestep ât. To avoid burdening the user with the choice of this timestep, we select it automatically by requiring that no vertex of the triangulation moves further than d max from its current position. As a consequence, no edge can grow to more than twice d max in length, and has to be split no more than once per adaptation step.</p><p>Using the piecewise polynomial integral curve representation described above, this criterion is easily approximated by evaluating the current speed of any vertex in the triangulation by evaluating the derivative magnitude of the integral curves through interpolation. This avoids the overhead of additional costly vector field evaluations at every vertex position. Then, if the maximal determined vertex velocity is denoted by v max , we select the next adaptation time step as <ref type="figure">Fig. 4</ref>. Time surface mesh in the Ellipsoid dataset. Although the surface has undergone strong deformation, the mesh remains in good condition.</p><formula xml:id="formula_3">ât sub := d max /v max .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Streak Surface Growing</head><p>So far, we have discussed an algorithm that is able to propagate and adapt a time surface as it is advected by a given vector field. To apply the same algorithm to streak surfaces and generalized streak surfaces, the surface must be extended to reflect the new particles seeded continuously at the (moving) seeding curve. To guarantee adequate discretization of this small part of the surface, we apply the following scheme.</p><p>At the initial time, a number of vertices and edges connecting them into a polyline are placed on the seeding curve C such that they fulfill the maximum edge length criterion. Then, the vertex positions and the seeding curve C are advanced in time, and the resolution is maintained using edge splitting. If any surface vertex moves more than d max away from the seeding curve, two triangles connecting the surface edge to the seeding curve are generated by placing two new vertices on the seeding curve C. This straightforward scheme works well even in the presence of a rapidly moving seeding curve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Output</head><p>After a time or streak surface has been approximated, the evolution of the surface can be completely recreated from the initial mesh using the following observations:</p><p>â¢ The position of any vertex with respect to time can be interpolated from the piecewise representation of its corresponding integral curve.</p><p>â¢ The evolution of the topology of the triangle mesh describing the surface can be recreated at any given point in time by sequentially applying all edge operations (splits, flips, and collapses) that were applied during surface adaptation up to the desired time.</p><p>Consequently, we record the topological changes to the mesh together with the time at which they were performed in a list. Both the list and all integral curve representations are saved during and after the surface computation. With this representation, we do not require to store a triangle mesh for every step at which the surface changes; this would be prohibitively expensive as the number of changes to the mesh can be very large for complex surfaces. Hence we obtain a very compact representation of the full surface evolution which serves as input to our surface visualization, as described in the Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">PRACTICAL CONSIDERATIONS</head><p>We now detail some aspects of the behavior of our algorithm when applied to extract integral surfaces from large, complex simulation datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Numerical Aspects</head><p>In general, there are two sources of error in the surface approximation: first, approximation error is incurred by the discrete nature of the surface. Here, the approximation accuracy crucially depends on the maximal length of the surface mesh edges, as well as on the shape of the triangles, where skinny triangles must be avoided to achieve good approximation. A secondary source of error is the insertion of new vertices into the surface triangulation. Since edge midpoints do not exactly represent the curvature of the surface, the inserted vertex is not exactly located on the surface, and in a worst case scenario, small errors introduced by this may be exponentially magnified by the integral nature of the surface. However, both errors tend to zero as the maximum edge length is decreased. This fact is leveraged by the longest edge bisection criterion, as is customary in surface refinement. To investigate the correctness and accuracy of our adaptive algorithm, we have compared select surfaces against non-adaptive, high-resolution surfaces propagated from the same seed surface or curve and verified that the error is reduced with decreasing maximum edge length. A different source of errors stems from the use of numerical integration. In significantly complex simulation data, such interpolation can be unreliable; this problem is encountered especially in the close vicinity of domain boundaries. As described above, we have added a number of criteria to our algorithm to make it more robust in the face of such difficulties. In the worst cases, instead of continuing with a possibly incorrect surface, we opt to rather remove the corresponding vertices or edges from the triangulation. Fortunately, such missing triangles are relatively rare and do not have a significant impact on the resulting surface visualizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Performance</head><p>The performance of our algorithm depends strongly on the number of vertices in the surface triangulation and, correspondingly, on the number of integral curves that must be computed for any given surface. Performing such computations in highly resolved complex data is an expensive task. Especially the unstructured datasets consisting of mixed element types that we have used to evaluate our method (Section 7) requires careful cell location and interpolation. This is reflected in substantial running times of our algorithm. While significantly better performance could be easily achieved for rectilinear datasets, such as those produced by DNS simulations, our goal is to document the performance of our algorithm on the finite-element meshes that are ubiquitous in CFD practice. <ref type="table">Table 1</ref> provides the performance figures corresponding to the surfaces shown in <ref type="figure">Figures 4-9</ref>. We observe that in all cases, more than 90% of computation time is spent in integration. However, this computational effort is rewarded with a surface that accurately reflects the vector field under consideration. Furthermore, we maximize the visualization result by not only providing a final surface, but also making accessible to visualization the entire surface evolution in compact form. Finally, the ability of our algorithm to compute generalized streak surfaces alleviates the problem of iterative seeding refinement. By letting a streak surface seed curve traverse a region of interest, an entire volume of flow can be investigated in one computational pass. Furthermore, the observed scaling factors on an 8-way SMP system indicates that we have managed to leverage the inherently parallel nature of massive integral curve computation in the parallel implementation of our algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">VISUALIZATION</head><p>The computation times incurred by our algorithm are significant if complex surfaces are to be accurately approximated. Presenting the user with a final mesh is unsuitable, since the ability to depict the evolution of the surface is crucial to comprehend the behavior of the flow it depicts. Providing the ability to navigate freely in time when visualizing the surface is helpful in understanding how certain parts of a surface evolve. Our approximation algorithm is ideally suited to this purpose since we can trivially and efficiently recreate the surface at any given point during its advection.</p><p>High-quality rendering is a crucial aspect of graphically depicting highly complex time and streak surfaces. This has recently been documented independently by Garth et al. <ref type="bibr" target="#b3">[4]</ref> and von Funck et al. <ref type="bibr" target="#b15">[16]</ref>. Correct surface lighting and shading provide important depth cues to the viewer, and we have found that multiple light sources can further enhance the spatial perception of the surfaces we visualize. Since the surfaces we compute and visualize are often self-occluding, correct  <ref type="table">Table 1</ref>. Performance measurements for the five test problems described in Section 7 (TS = time surface, (G)SS = (generalized) streak surface). All measurements were performed on a quad-core AMD Opteron 2.4GHz with 8GB RAM. "Data" refers to the amout of data streamed during the computation. "Int" denotes the fraction of computation time spent on integral curve computation. handling of transparency is important. Furthermore, texturing of the surface can further help to orient a viewer looking at such a surface. As is apparent from Equations 2 and 3 above, both types of surfaces offer natural texture coordinates from their two-dimensional parameterization. While for time surfaces the parameters do not possess special meaning, streak surfaces allow texture mapping to depict both time lines (lines of constant t 0 ) and streak ribbons (lines of constant u), as depicted in <ref type="figure">Figure 7</ref>. We make use of these mappings to depict the surfaces using stripes of relatively high opacity interleaved by areas of low opacity that provide surface context. In cases where the stripes do not work well, such as when many surface layers are nested very closely, we still apply a simple two-dimensional color map to the surface; this helps in distinguishing different surface parts visually (see e.g. <ref type="figure">Figure 8</ref>).</p><p>To allow for interactive visualization under these constraints, we have implemented a visualization tool that incorporates all the discussed options. Good performance in the presence of transparency and high depth complexity is achieved by using the dual depth peeling technique described by Bavoli and Myers <ref type="bibr" target="#b0">[1]</ref>, and high-quality lighting and texture mapping is achieved through the use of pixel shaders. Reconstructing the surface at a given point in time is performed on the CPU; our implementation is fast enough to handle quick and interactive temporal navigation even for large surfaces. The surfaces shown in <ref type="figure">Figures 4-9</ref> are rendered and animated at interactive speeds of 20-60 fps on commodity hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">EXAMPLES</head><p>To demonstrate our method, we have applied it to compute various surfaces in three different application datasets. Here we show the resulting surfaces as rendered by our visualization tool.</p><p>Ellipsoid The Ellipsoid dataset results from an unsteady simulation of the flow around an ellipsoid, where the angle of the surrounding flow changes over time. Vortex formation near the downstream boundary of the embedded ellipsoid can be observed. The data consists of am unstructured mesh of 2.6 million hexahedral cells, over which the flow field is given in 600 time steps. This dataset is very well resolved and represents a relatively well behaved and smooth case with very good temporal resolution. <ref type="figure">Figure 7</ref> depicts a single streak surface seeded and computed over ca. 70% of the temporal extent of the dataset. Seeding was initialized at the initial timestep on the upstream side of the ellipsoid, and the streak surface nicely captures the transitionary stage during the vortex formation that forms a bubble shaped structure. In the upper image of <ref type="figure">Figure 7</ref>, time line texturing has been applied, and it is straightforward to distinguish parts of the surface that were seeded later (greener stripes) from those that were seeded earlier (redder stripes), allowing good temporal orientation. In the lower left image, streak line texturing has been applied to illustrate the paths of different streaks. Again, a variation in the color of the stripes provides both spatial and temporal context. For comparison, the lower right image does not make use of texturing; there, no correlation between surface points and seeding time or origin can be made. To integrate the surface, 30,028 integral curves were traced and 268,171 mesh adaptation operations were performed.</p><p>A time surface in the same dataset seeded on a rectangle just downstream of the ellipsoid in the initial timestep and traced over ca. 50% of the dataset extent in time is shown in <ref type="figure">Figure 8</ref>. The surface consists of 102,764 pathlines and required 691,916 adaptation operations. In this figure, we have opted for a simple two-dimensional color map since there is no natural texturing for time surfaces. During the evolution of the surface, it wraps around the nascent, forming vortex system, and encounters strong deformation when it is laterally drawn into the forming vortices. The resulting final surface mesh is illustrated in <ref type="figure">Figure 4</ref>. Both surfaces demonstrate the ability of our algorithm to deal with data set sizes strongly exceeding available main memory.</p><p>Car This steady simulation models the flow of air around a car. Vortex shedding can be observed on various parts of the car. The flow vector field is represented on an unstructured mesh with 15 million elements of mixed type. Since the flow is assumed symmetric with respect to the symmetry axis of the car, the computational domain contains only the right side of the car. <ref type="figure" target="#fig_4">Figure 5</ref> illustrates a time surface seeded just downstream of the rear end. The upper part of the surface moves away from the car quickly, but the lower part is drawn into a large vortex emanating from the edge of the rear bumper. A striped texture has been applied to the surface to provide better spatial orientation.</p><p>Since this dataset is stationary, streak surfaces with a fixed (constant in time) seeding curve are identical to stream surfaces, and thus our method is computationally more exhaustive than a dedicated stream surface algorithm (e.g. <ref type="bibr" target="#b4">[5]</ref>). However, we demonstrate a generalized streak surface in <ref type="figure">Figure 6</ref>, where the seeding curve is moving downwards parallel to the rear window. Since the complexity of this dataset requires long computation times, such a moving seeding curve possesses exploratory character without involving interactive seeding; here, the region behind the rear window is explored. The surface is textured with a streak stripe pattern. Again, as the streak reaches the lower part of the window, the surface is drawn into the vortex behind the car. While seeding is terminated as the seed curve reaches the lower end of the window, the surface advection is continued, and this illustrates an interesting velocity profile just above the surface of the trunk, and a zone near the window center where the flow moves much slower than further out.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Delta Wing</head><p>In order to study the effects of vortex breakdown in aviation, an unsteady simulation of a delta wing configuration exhibiting vortex breakdown was performed. We have selected this dataset since it has proven difficult from a numerical perspective in previous work. It represents an ideal numerical test case for the robustness of our method. The dataset consists of several hundred time steps over a grid with 19 million tetrahedral elements. A time surface was seeded above the wing, and parallel to it, near the wing tip. The flow is violent in this area as surrounding air is forced around the wing and twisted into several vortices above the wing. This region of the dataset is very highly resolved; to obtain an accurate surface, 187,645 integral curves had to be traced. Here, the integration time is rather short, but the numerical integration scheme has to take very small steps to compute the <ref type="figure">Fig. 6</ref>. Three frames from an animation showing the evolution of a generalized streak surface in the Car dataset. The surfaces is seeded on a curve moving parallel to the rear window. After seeding is terminated, some parts of the surface remain attached to the rear window. The surface is depicted using a streak ribbon texture.</p><p>integral curves. <ref type="figure">Figure 9</ref> shows the evolution of the surface at early and late stages of evolution. The surface is well resolved, and the right image illustrates the mesh obtained from our algorithm. To provide spatial context, we have applied a striped texture to this time surface, where the stripes indicate radial distance on the seed surface to the wing tip. The surface demonstrates how several vortices are formed and interact near the wing's leading edge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSION</head><p>In this work, we have made the following contributions:</p><p>â¢ We have presented a novel approach for the computation of time and streak surfaces in large and time-varying datasets. Our approach decouples mesh advection and adaptation from integral curve computation, allowing to achieve optimal precision and performance in the computation of the latter and exploit inherent parallelism.</p><p>â¢ To maximize the visualization gain from time and streak surface computation, we make use of a compact representation of the surface evolution that allows full real-time interaction with the temporal component of the surface for visualization.</p><p>â¢ We have described several aspects of graphical representation such as transparency and texturing of time and streak surfaces that benefit their visualization, and the visualization of flows using them.</p><p>â¢ Furthermore, we have demonstrated and discussed the behavior of our algorithms with respect to robustness, accuracy, and performance, and shown it able to approximate very complex surfaces in large time-varying vector fields.</p><p>For future research, we plan to address a number of limitations of our method. In order to enable more interactive seeding, we envision computing time and streak surface in an incremental, progressive manner, that quickly generates low quality results from downsampled vector field data; once an interesting surface is found, it may then be computed in high quality. To further reduce computation times and gain the ability to treat largest-scale datasets, we plan on exploiting additional parallelization options. Concerning visualization, further rendering and texturing options should be explored to give the surfaces even more of an illustrative character. <ref type="figure">Fig. 7</ref>. A streak surface in the Ellipsoid dataset as depicted in our interactive visualization tool. The surfaces is seeded upstream of the ellipsoid in the initial timestep and shows a prominent bubble that precedes the vortex formation. Top: Overview; a time line texture provides temporal orientation. Bottom left: Surface textured with streak ribbons. Bottom right: Without texturing, spatial and temporal orientation on the surface is lost. <ref type="figure">Fig. 8</ref>. Evolution of a time surface in the Ellipsoid dataset. The surface is seeded on rectangle located immediately downstream from the ellipsoid near the temporal beginning of the dataset and illustrates parts of the flow that remain close to the ellipsoid and twist to envelop the nascent vortex system as it forms. A two-dimensional color map helps identify distinct parts of the surface despite heavy overlap. <ref type="figure">Fig. 9</ref>. Left images: Evolution of a time surface in the delta wing dataset, seeded parallel to the wing tip. The texture provides radial distance stripes to the wing tip for spatial orientation. Right image: Despite numerical difficulties, the surface mesh remains well-conditioned.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>â¢</head><label></label><figDesc>Hari Krishnan, Christoph Garth and Ken Joy are with the Institute of Data Analysis and Visualization, University of California, Davis, E-mail: {hkrishnan|cgarth|kijoy}@ucdavis.edu. Manuscript received 31 March 2009; accepted 27 July 2009; posted online 11 October 2009; mailed on 5 October 2009. For information on obtaining reprints of this article, please send email to: tvcg@computer.org .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Three types of surface mesh operations used to adapt the surface resolution during advection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>while( t_current &lt; t_stop ); collapse_pass( T ); t_stop = min( t_end, load_next_timestep( t_current ) ); } while( t_stop &gt; t_current ); } Pseudocode of the surface tracking algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Degenerate cases to be avoided when flipping an edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Three frames from an animation showing the evolution of a time surface in the BMW dataset. The surfaces is seeded on a square at the rear end of the car and illustrates the recirculation of air in this region of the flow. A streak ribbon texture provides additional depth cues.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors wish to thank Markus RÃ¼tten from DLR GÃ¶ttingen for supplying some of the data sets treated here and insightful discussion. We are also very much indebted to our colleagues at the Institute for Data Analysis and Visualization and to Xavier Tricoche at Purdue University for discussion and feedback. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Order-independent transparency with dual depth peeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bavoli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NVIDIA Developer SDK</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Computational Aspects of Dynamic Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Bridson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<pubPlace>Stanford, CA, USA</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Generation of accurate integral surfaces in time-dependent vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1404" to="1411" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Surface techniques for vortex visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Salzbrunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VisSym, Symposium on Visualization</title>
		<meeting>VisSym, Symposium on Visualization</meeting>
		<imprint>
			<date type="published" when="2004-05" />
			<biblScope unit="page" from="155" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Solving Ordinary Differential Equations I, second edition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hairer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>NÃ¸rsett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wanner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Springer Series in Computational Mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<date type="published" when="1993" />
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Constructing stream surfaces in steady 3D vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P M</forename><surname>Hultquist</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization 1992</title>
		<editor>A. E. Kaufman and G. M. Nielson</editor>
		<meeting>IEEE Visualization 1992<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Anisotropic mesh adaptation for evolving triangulated surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Jiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Colombi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 15th International Meshing Roundtable</title>
		<meeting>15th International Meshing Roundtable</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="173" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Texture advection on stream surfaces: A novel hybrid visualization applied to CFD simulation results</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Laramee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eurovis 2006 (Eurographics / IEEE VGTC Symposium on Visualization)</title>
		<meeting>Eurovis 2006 (Eurographics / IEEE VGTC Symposium on Visualization)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="155" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Stream arrows: enhancing the use of stream surfaces for the visualization of dynamical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>LÃ¶ffelmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mroz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>GrÃ¶ller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Purgathofer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="359" to="369" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">High order embedded Runge-Kutta formulae</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Prince</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Dormand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational and Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Point-based stream surfaces and path surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schafhitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tejada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="289" to="296" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A tetrahedra-based stream surface algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bobach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mahrous</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kollmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="151" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Fast Texture-Based Algorithms for Vector Field Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stalling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
		<respStmt>
			<orgName>Freie UniversitÃ¤t Berlin</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Implicit stream surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="245" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Smoke surfaces: An interactive flow visualization technique inspired by real-world flow experiments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Funck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weinkauf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Theisel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1396" to="1403" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A level-set method for flow visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Visualization</title>
		<meeting>IEEE Visualization</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="147" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Generalized streak lines: Analysis and visualization of boundary induced vortices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wiebel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tricoche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>JÃ¤nicke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1735" to="1742" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
