<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visual Analysis of Multivariate State Transition Graphs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">Johannes</forename><surname>Pretorius</surname></persName>
							<email>a.j.pretorius@tue.nl</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
								<address>
									<postBox>PO Box 513</postBox>
									<postCode>5600 MB</postCode>
									<settlement>Eindhoven</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Jarke</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
							<email>vanwijk@win.tue.nl</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">Technische Universiteit Eindhoven</orgName>
								<address>
									<postBox>PO Box 513</postBox>
									<postCode>5600 MB</postCode>
									<settlement>Eindhoven</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Visual Analysis of Multivariate State Transition Graphs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2006; accepted 1 August 2006; posted online 6 November 2006.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph visualization</term>
					<term>multivariate visualization</term>
					<term>interactive clustering</term>
					<term>state spaces</term>
					<term>transition systems</term>
					<term>finite state machines</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a new approach for the visual analysis of state transition graphs. We deal with multivariate graphs where a number of attributes are associated with every node. Our method provides an interactive attribute-based clustering facility. Clustering results in metric, hierarchical and relational data, represented in a single visualization. To visualize hierarchically structured quantitative data, we introduce a novel technique: the bar tree. We combine this with a node-link diagram to visualize the hierarchy and an arc diagram to visualize relational data. Our method enables the user to gain significant insight into large state transition graphs containing tens of thousands of nodes. We illustrate the effectiveness of our approach by applying it to a real-world use case. The graph we consider models the behavior of an industrial wafer stepper and contains 55 043 nodes and 289 443 edges.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>State transition systems form the semantic framework underlying contemporary specification and programming languages <ref type="bibr" target="#b0">[1]</ref>. As a result, many analysis techniques for computer-based systems involve the translation of behavioral specifications or programs into transition systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>A transition system consists of a set of states and a set of transitions. Transitions are source-action-target triples. The execution of an action triggers a change of state. The corresponding state transition graph is defined as G = (V, E) where a node s ∈ V represents a state and a directed edge t = (s, s ) ∈ E represents a transition from state s (source) to state s (target). Such graphs are formalisms that describe the behavior of systems whose states evolve over time.</p><p>Conceptually, transition graphs are simple structures. However, for modern computer-based systems they tend to be large, often containing tens of thousands of nodes, or more. This increases their complexity and hinders analysis of the systems they model. For example, it is hard to tell if, when and why undesirable states are reached.</p><p>There are two popular approaches for addressing the complexity of large transition graphs. The traditional tactic is to derive and analyze an abstracted, much smaller variant (typically with fewer than 100 nodes). Although easier to study, these are incomplete static descriptions. Potentially interesting behavior is lost. The second approach is to formulate and check requirements formally (using model checking, for instance <ref type="bibr" target="#b1">[2]</ref>). This assumes that all requirements are known in advance. If this is not the case, the system cannot be verified.</p><p>Interactive visualization is a third technique for studying large state transition graphs. We argue that the advantage is threefold:</p><p>1. We have observed that by giving visual form to an abstract notion, communication between analysts themselves and between analysts and other stakeholders is substantially enhanced.</p><p>2. Users often do not have precise questions regarding the system at hand, they simply want to "get a feel" for it. Visualization allows them to start formulating hypotheses about system behavior <ref type="bibr" target="#b14">[15]</ref>.</p><p>3. Interactivity provides the user with a mechanism for analyzing particular features and for answering particular questions about transition graphs and the behavior they describe <ref type="bibr" target="#b11">[12]</ref>.</p><p>This paper introduces a new method for the interactive visualization of state transition graphs. In Section 2 we discuss related research before introducing our approach in Section 3. To illustrate its merit, we discuss a real-world use case in Section 4. Finally, in Section 5 we conclude by providing a summary of our results and by identifying opportunities for future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Most attempts at visualizing state transition graphs use off-the-shelf graph drawing tools <ref type="bibr" target="#b3">[4]</ref>. Results do not scale well and are not effective for highlighting interesting aspects of system behavior. A few tools specifically for the visualization of transition graphs have been developed <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b7">8]</ref>. Since user interaction is rather limited, they do not readily allow for interactive analysis. We know of two tools that cater for richer user interaction: FSMView <ref type="bibr" target="#b14">[15]</ref> and StateVis <ref type="bibr" target="#b11">[12]</ref>. FSMView was conceived to show global structural symmetries in transition graphs. Pre-processing generates a structural backbone on which nodes and edges are positioned. Ranking and clustering result in layers and branches from which phases of system behavior are discernable. However, once interesting aspects have been identified, FSMView offers limited facilities for analyzing these further. Also, for systems that contain little parallelism, or where states are highly connected, the backbone often contains no symmetrical branches. Since such symmetries are generally taken as departure points for analysis, these cases are problematic.</p><p>StateVis approaches the visualization of transition graphs from a multidimensional perspective. Every node consists of a vector of data values. These are the union of all data variables in the original behavioral specification, the so-called state variables <ref type="bibr" target="#b2">[3]</ref>. In combination with a visual overview of the values these variables assume, StateVis offers different methods for projecting the (high-dimensional) nodes to 2D. It is possible to answer questions related to state variables, but analyzing correlations between variables and behavior requires some effort. Although suggestive behavioral patterns are often shown, it is difficult to gain a full understanding of these.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">APPROACH</head><p>State attributes generalize the notion of state variables (see Section 2) and also allow for derived attributes to be associated with nodes. Examples include graph-structural properties (fan-in and fan-out, for example) and equivalence classes (a concept from operational semantics <ref type="bibr" target="#b0">[1]</ref>). A crucial observation is that users associate precise meaning with state attributes. They know what aspect of the modeled system an attribute describes and what it means when it assumes different values. This observation is based on users at our institution and at CWI, the Dutch Institute for Mathematics and Computer Science.</p><p>Formally, with a state transition graph G = (V, E) we associate n attribute:type pairs, [a 1 : τ 1 , ..., a n : </p><formula xml:id="formula_0">τ n ]. D i = {d i,1 , ..., d i,k i } is the domain</formula><formula xml:id="formula_1">= [s 1 , ..., s n ] with s i ∈ D i .</formula><p>We note that for transition graphs, the domain D i of attribute a i is usually discrete with a small cardinality (typically, 1 ≤ k i ≤ 30). It could be argued that these data features limit the generality of our approach. However, for larger or continuous domains, this can be addressed by partitioning the domain into a smaller number of discrete clusters (a practice known as binning). We therefore argue that our results are also applicable in the wider context of multivariate graph visualization.</p><p>Within our current scope, we exploit the multivariate nature of state transition graphs in order to:</p><p>1. Enable the user to reduce the complexity of transition graphs in a semantically rich way.</p><p>2. Have the reduction technique itself serve as a powerful mechanism or tool with which to conduct analysis.</p><p>The above strategy is supported by providing the user with a visual representation of the reduction results. To do so, we integrate the representation of three different types of data (hierarchical, metric and relational) in a single visualization. The objective is to enable the user to perceive and analyze correlations between these different elements. Below, we explain how our visualization is built by integrating different visualization techniques. To validate our approach, we have implemented it in a prototype to which we refer here and in subsequent sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Interactive hierarchical clustering</head><p>Provided we have a state transition graph, our prototype enables the user to select a subset of attributes (see <ref type="figure" target="#fig_0">Figure 1</ref> (a)). The order of the attributes in this subset can be adjusted. The user is also given an overview of the associated attribute types and their value domains (see <ref type="figure" target="#fig_0">Figure 1</ref> (b) and (c)). Once a subset of attributes has been selected, the next step is to cluster the transition graph based on this selection. The complete set of nodes is considered as the root of a clustering hierarchy. The set is then partitioned based on the different values that nodes assume for the first attribute. This gives rise to a number of child nodes branching from the root (see <ref type="figure" target="#fig_1">Figure 2</ref> (a)). Each of the resulting partitions is sub-partitioned in a similar fashion, based on the second attribute. This results in a third level of nodes in the clustering hierarchy (see <ref type="figure" target="#fig_1">Figure 2</ref> (b)). Continuing in this fashion, a tree consisting of p + 1 levels is generated for a subset of p attributes. Since the cardinalities of our domains are known, clustering has a complexity of O(p • q), with p as above and q the number of nodes. This is efficient enough for clustering to be used as interaction mechanism, as we illustrate in Section 4.</p><p>Attribute-based clustering results in a tree structure that represents a recursive sub-partitioning of the original set of nodes. It also produces a less complex abstraction of the original transition graph which we discuss further in Section 3.3. We use the clustering hierarchy as the starting point of our visualization and show it as a node-link diagram in the top half of our visualization (see <ref type="figure" target="#fig_0">Figure 1</ref> (d)). Parent-child relations are represented by triangles. We use subtle cushioning to differentiate levels better (see <ref type="figure" target="#fig_0">Figure 1</ref> (g)) <ref type="bibr" target="#b16">[17]</ref>. The different values assumed in a particular level are coded with distinct colors. The objective is not to facilitate exact matches between values and colors, but to enable the identification of recurring patterns. Feedback from users suggests that our straight-forward color mapping scheme suffices for this. In our prototype, we experimented with three other graphical representations for the hierarchy (see <ref type="figure" target="#fig_2">Figure 3</ref>). Users were unanimously in favor of triangles, citing that this strikes the best balance between effectively representing the hierarchy and highlighting repeated patterns in terms of the color-coded values that different attributes assume.</p><p>As an additional feature, the user is also enabled to cluster values of domains, thereby reducing their cardinality. This corresponds to the notion of data abstraction, as used by the formal methods community <ref type="bibr" target="#b1">[2]</ref>. As we show in Section 4, this results in reduced complexity and is a powerful analysis technique in itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Metric data -bar trees</head><p>It is possible to compute quantitative values for every node in the clustering hierarchy. Such metrics are often cumulative: the values of non-leaf nodes can be obtained by summing the values of their children. As we show in Section 4, an elementary and useful example is  the number of nodes contained in the corresponding cluster. To visualize such metrics we developed a new technique that uses nesting and layering to represent the hierarchy with which metrics are associated. We refer to this visualization as a bar tree.</p><p>Bar trees are constructed as follows (see <ref type="figure" target="#fig_3">Figure 4</ref> (a) -(c)). Starting with the leaf nodes and working our way back to the root, we encode the metrics associated with nodes in every successive level as a bar chart. The bar chart associated with level i is positioned behind that of level i + 1. For all levels, except the leaves, the widths of individual bars in level i are calculated to span the bars corresponding to its child nodes in level i + 1. This results in a layered nesting that reflects the clustering hierarchy.</p><p>As with many other visualization techniques for hierarchical metric data (for example, <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b15">16]</ref>) the aim is not to provide the user with a depiction from which exact values can be directly deduced. Rather, bar trees allow for the identification of patterns at different levels of the hierarchy. (In our prototype, exact values can be viewed by selecting the bars.) We position the bar tree directly below the clustering hierarchy in the bottom half of our visualization (see <ref type="figure" target="#fig_0">Figure 1</ref> (f)). This further emphasizes the relationship between the bar tree and the clustering hierarchy. We color bars the same as matching nodes in the hierarchy and enable users to show or hide layers corresponding to different levels of this hierarchy. To amplify the layered effect, we use cushioning (see <ref type="figure" target="#fig_0">Figure 1</ref> (h)).</p><p>Since the emphasis is on identifying patterns, particularly for lower levels of the hierarchy, a logarithmic distribution can be used on the yaxis. In <ref type="figure" target="#fig_4">Figure 5</ref> (b), where this is done, much more detail of the lower levels of the bar tree is visible compared to <ref type="figure" target="#fig_4">Figure 5</ref> (c), where the distribution is linear. In our prototype, the bar tree encodes cluster size. Users have indicated that the combination of selecting which levels to visualize in the bar tree and having control over the distribution function is an effective way to learn more about the partitioning of nodes resulting from hierarchical clustering. We experimented with fully nested bar trees, but users indicated that the hierarchy is not as clearly discernable (for instance, compare Figures 5 (a) and (b)).</p><p>Fully nested bar trees bear some resemblance to the "sum rendering method" proposed by Mihalisin et al. <ref type="bibr" target="#b8">[9]</ref>. In general, the two methods differ in terms of their appearance, application and aim, however. As mentioned above, we visually emphasise the layered nature of the bar tree using depth cues <ref type="bibr" target="#b16">[17]</ref>. Mihalisin et al. use their technique to conduct a visual statistical analysis of multivariate data items. Users  are enabled to interactively permute the order of the variables in order to impose a hierarchy on the data. The actual values assumed for the different variables are then visually depicted. In terms of utility, this more closely resembles our hierarchical clustering facility. Finally, we are interested in representing summary information of an existing hierarchy and not the actual data dimensions themselves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Abstract graph</head><p>The third and final element of our visualization represents the abstracted, less complex, transition graph that results from hierarchical clustering. It can be argued that this is the most important part of our visualization: an encoding of the behavior of the system being studied.</p><p>The leaves of the clustering hierarchy contain collections of nodes that are interconnected by a number of directed edges. It is important that the user is enabled to identify repeated behavioral patterns and symmetries represented by these edges (or by their absence). We capitalize on the fact that our leaf nodes are positioned on a horizontal line by visualizing behavior using an arc diagram positioned in the center of our visualization (see <ref type="figure" target="#fig_0">Figure 1</ref> (e)). It has been shown that arc diagrams are well suited for identifying repeated patterns in relational data <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b6">7]</ref>.</p><p>We proceed as follows. Firstly, we bundle co-directional transitions. These bundles are represented by semi-circular arcs that span from the source to the target cluster (see <ref type="figure" target="#fig_5">Figure 6</ref>). The thickness of an arc is proportional to the number of bundled edges. Additionally, we encode  the direction of these bundles in the orientation of the arcs: arcs are always interpreted in a clockwise fashion. User feedback from this and previous experiments has been quite positive in this regard and users seem to have little trouble adopting this convention <ref type="bibr" target="#b11">[12]</ref>. This makes visual pattern detection more meaningful since the directions of transitions play an important role in understanding the behavior that the transition graph describes. It also makes it unnecessary to clutter the screen with other visual cues such as arrow heads.</p><p>To deal with larger data sets, the user can define a number of vertical focus bands (see <ref type="figure" target="#fig_6">Figure 7)</ref>. The visualization is magnified at these positions and compressed further away <ref type="bibr" target="#b12">[13]</ref>. Although distortionoriented techniques can be confusing, our users found it useful when applied in only one dimension. Since the magnification factor varies continuously, repeated patterns and symmetries are still discernable. Users did prefer a single focus band, though.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">USE CASE</head><p>To show how our approach can assist users in the visual analysis of state transition graphs we present a real-world use case. More concretely, we apply our prototype to analyze the state transition graph of a generalization of the wafer handling of an industrial wafer stepper <ref type="bibr" target="#b4">[5]</ref>.</p><p>The wafer stepper we consider is used to manufacture integrated circuits as follows (see <ref type="figure" target="#fig_7">Figure 8</ref>). Fresh, unprocessed wafers enter the system via the tray, which can hold six wafers. From here they are moved to one of four locks that have a capacity of one wafer each. Wafers wait here to be transported by one of two robots. Robot 1 is allocated to locks 1 and 2 while robot 2 serves locks 3 and 4. The robots have two arms, A and B, that can pick up a single wafer each. When stationary, a robot has one arm facing the locks and one arm facing the wafer stage. To transport a wafer, a robot rotates on its axis. Wafers are first prepared on the preparation stage and then processed on the processing stage. Both have a capacity of one wafer. To exit the system, wafers follow a similar path in reverse.</p><p>The state transition graph that describes the wafer stepper contains 55 043 states and 289 443 transitions. It has 15 associated attributes,  of which we consider the following:</p><p>• fresh wafer list: a list of fresh wafers on the tray;</p><p>• wafers in system: the number of wafers in the system;</p><p>• prep stage: the contents of the preparation stage;</p><p>• proc stage: the contents of the processing stage;</p><p>• lock 1 through -4: the contents of the four locks;</p><p>• robot 1 arm a and -b: the contents of the two arms of robot 1;</p><p>• robot 2 arm a and -b: the same as above, but for robot 2;</p><p>• fan out: a derived attribute that represents the number of outgoing edges for every node.</p><p>All attributes describing the contents of a particular component have the domain {empty, f resh, prepared, processed}. When visualized using some of the more conventional graph drawing techniques, this transition graph basically resembles a "tangled ball of yarn". Consequently, very little can be learned. The visualization generated with FSMView <ref type="bibr" target="#b14">[15]</ref> does not branch into symmetrical substructures (see <ref type="figure" target="#fig_8">Figure 9 (a)</ref>). That is, we are dealing with an example of the problematic graphs we referred to in Section 2. When viewed with StateVis <ref type="bibr" target="#b11">[12]</ref>, some suggestive behavioral patterns are seen (see <ref type="figure" target="#fig_8">Figure 9</ref> (b)), but it is difficult to relate these back to concrete insights.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Taking different perspectives</head><p>Using our technique, it is possible to take specific perspectives on the system being studied. Below, we view the wafer stepper from three perspectives. This enables us to make important observations regarding system behavior and to check specific requirements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tray's perspective</head><p>To view the system from the tray's perspective we select the fresh wafer list and wafers in system attributes, in this order. Clustering results in <ref type="figure" target="#fig_0">Figure 10</ref> (a). Our first observation is that there are three types of transitions: (i) those internal to fresh wafer list clusters and between wafers in system clusters, (ii) those between fresh wafer list clusters and (iii) self-loops. The latter, self-loops, can be thought of as internal actions. This is a notion borrowed from process algebra and refers to the hiding of certain actions with the aim of highlighting the influence of the remaining ones <ref type="bibr" target="#b2">[3]</ref>. In this sense, our approach allows for dynamic action hiding.</p><p>An important insight from <ref type="figure" target="#fig_0">Figure 10 (a)</ref> is that from the tray's perspective, the system displays a clear determinism: there is a clear forward progression from an initial cluster (far left) to a final cluster (far right), where all wafers have been processed. This is seen by observing that there are no "back-pointing" arcs. By selecting corresponding bars in the bar tree visualization, we can confirm that the initial and final clusters contain a single node each. Along the way, the system gets exponentially more complex, but then starts tapering off toward the final node. Again, the bar tree visualization supports and strengthens this observation. We are now in a position to say something about the liveness of the system. This term, from the model checking literature <ref type="bibr" target="#b1">[2]</ref>, expresses that "a desirable state should eventually be reached".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Wafer stage's perspective</head><p>Clustering on the attributes prep stage and proc stage lets us consider the system from the perspective of the wafer stage (see <ref type="figure" target="#fig_0">Figure 10</ref> (b)). With this result, we can validate important requirements.</p><p>Firstly, it is impossible for an unprepared wafer to be processed. If we consider the third level of the clustering hierarchy (corresponding to proc stage), we see that only three values occur and that fresh is not one of them. (The same three colors are repeated and it suffices to check the values they encode only once.) This means that if the processing stage is not empty, it can only contain a prepared or a processed wafer. A second important and related requirement is that it should never be possible for the contents of the preparation and processing stages to be swapped when the preparation stage contains a fresh wafer. This is confirmed by noting that there are no arcs connecting (i) clusters where prep stage has the value fresh to (ii) clusters where it assumes the value processed.</p><p>These requirements would call for significant effort to validate using other techniques. For instance, using formal methods, they would have to be meticulously formulated and their validity proved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Locks' perspective</head><p>The final perspective that we consider is that of the locks. To do so, we select the attributes lock 1 through lock 4. <ref type="figure" target="#fig_0">Figure 10 (c)</ref> shows the result after clustering. There is a clear recurring nested pattern in the visualization. Although it is most striking in terms of the arc diagram, we also see that there are corresponding regular patterns in the clustering hierarchy and bar tree. This illustrates our claim that our technique makes it possible to match correlating patterns in the three types of data being visualized.</p><p>Since the behavior of any one lock is independent of any other lock (the same behavioral pattern is present at all four corresponding levels), we can speak of behavioral symmetry. Furthermore, it possible to check that for similar permutations of values assumed by the attributes <ref type="figure" target="#fig_0">Fig. 11</ref>. Deadlock detection. (a) By clustering on fan out, all deadlock nodes are in a single cluster on the far left. (b) To simplify the remaining analysis, the domain of fan out is clustered to only distinguish between deadlock (left) and non-deadlock nodes (right). (c) Combining fan out with attributes related to the tray suggests that deadlock can be prevented by limiting the number of wafers in the system. (d) Combining fan out with attributes related to the robots reveals that deadlock only occurs when the robots have specific configurations.</p><p>(for example, (i) when locks 1-3 are empty and lock 4 fresh versus (ii) when lock 1 contains a fresh wafer and locks 2-4 are empty), the system contains an equal number of nodes (using the bar tree visualization). From this we can deduce that the four locks exhibit identical behavior. We put this to good use during the more detailed analysis in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Focused analysis</head><p>We now illustrate how our method can assist in a more in-depth, focused analysis. A common objective of system analysis is to identify deadlock states. These are occasions when a computer-based system "hangs" or ceases to function. In our state transition graph, these are nodes that do not have any outgoing edges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Deadlock detection</head><p>The first step of deadlock analysis is to detect deadlock nodes. To do so, we utilize the attribute fan out. When we cluster the wafer stepper transition graph on fan out, we get the visualization in <ref type="figure" target="#fig_0">Figure 11 (a)</ref> where we can immediately detect the cluster of deadlock nodes on the far left. By interaction with the bar tree, we determine that there are exactly eight deadlock nodes in our system. In this respect, although FSMView <ref type="bibr" target="#b14">[15]</ref> offers deadlock detection and highlighting facilities, the user still has to scan the visualization, panning and zooming, to identify such nodes. This does not guarantee that all such nodes are found. During a comparative study, we were only able to identify three deadlock nodes.</p><p>We also note that there are many (non-visual) tools that offer ways to detect deadlock. However, after detection, the user has to perform complicated analysis in order to learn more about the conditions that give rise to these occurrences. This includes scanning many lines of unformatted text output. With our technique it is much easier, as we show below.</p><p>Starting with the results in <ref type="figure" target="#fig_0">Figure 11</ref> (a), we greatly simplify our analysis by noting that we are only interested in deadlock. We cluster the domain values of the fan out attribute accordingly. When we now reapply hierarchical clustering, this results in a binary partitioning of our nodes as illustrated in <ref type="figure" target="#fig_0">Figure 11</ref> (b) where all deadlock nodes are in the cluster on the left and all non-deadlock nodes are in the cluster on the right.</p><p>As suggested above, we want to learn more about the occurrence of deadlock in relation to other attributes. To see if there is any relation to the state of the tray, we cluster the transition graph on fan out, fresh wafer list and wafers in system, in that order and with the domain of fan out still clustered. This provides us with an interesting result. In <ref type="figure" target="#fig_0">Figure 11</ref> (c) we see that deadlock nodes can only occur from nodes where there is a single or no unprocessed wafers left on the tray (this corresponds to the orange and pink triangles in the second level of the hierarchy). We observe this by noting the wide arcs at the bottom of the visualization (interpreted in clockwise fashion) leading to the deadlock nodes. Such transitions are only possible with four or more wafers in the system (consider the third level of the hierarchy). At this stage, we can already formulate a potential solution to prevent deadlock: limit the number of wafers inside the system at any point in time.</p><p>Another interesting observation can be made by clustering on the attributes fan out and the four robot arms (see <ref type="figure" target="#fig_0">Figure 11 (d)</ref>). Since we know that all deadlock nodes are clustered toward the left of the visualization, we can immediately determine that deadlock only occurs under very specific conditions. That is, when either:</p><p>1. One of the robots has a processed wafer in each arm while both arms of the other robot are free.</p><p>2. When both robots have fresh wafers in both arms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Deadlock analysis</head><p>Finally, we consider a specific deadlock occurrence. We assume that it suffices to analyze a single "wafer path". That is, we restrict our analysis to a single robot and the locks that it serves. This assumption is justified by our observation about the symmetric behavior of the locks in Section 4.1. In order to identify deadlock nodes, we also take fan out into account when clustering. Consequently, we are presented with the results depicted in <ref type="figure" target="#fig_0">Figure 12</ref> (a).</p><p>Notice at this stage, that we are dealing with a high-dimensional data set. However, despite the large size of our data, there is a clear visual structure due to the visualization of the clustering hierarchy. Also note that there are clear patterns visible in the arc diagram and bar tree. Even more interesting is the fact that the overriding regular pattern of the arc diagram is clearly disrupted by the arcs representing transitions to deadlock nodes.</p><p>When we zoom in on the deadlock nodes toward the left and select one of these (see <ref type="figure" target="#fig_0">Figure 12</ref> (b)), this results in a pop-up window with an overview of all the selected attributes and the values they assume. We can also select one of its incoming transitions, which consequently lights up. By right-clicking, we also get an overview of all actions bundled in the arc. It is easy to visually trace this transition and zoom in on its originating cluster (see <ref type="figure" target="#fig_0">Figure 12</ref> (c)).</p><p>Using this approach, we were able to identify the exact conditions that lead to this occurrence of deadlock. This is illustrated in <ref type="figure" target="#fig_0">Figure  13</ref> and is related to our earlier observation regarding the states of the robot arms when deadlock occurs. In the initial state, robot 1 contains two processed wafers, lock 1 contains a fresh wafer and there is one fresh wafer on the tray. This is illustrated in <ref type="figure" target="#fig_0">Figure 13 (a)</ref>. When a tray to lock action occurs, whereby this fresh wafer is transported to lock 2 (see <ref type="figure" target="#fig_0">Figure 13</ref> (b)) we have deadlock. The reason for this is that once wafers have been processed, they cannot move "forward" to the wafer stage a second time. Furthermore, fresh wafers cannot move "backward" to the tray without first having been processed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>We have presented a new method for the visual analysis of multivariate state transition graphs. Our technique is based on attribute-based clustering which results in a significant reduction in complexity and serves as a useful analysis mechanism. Clustering produces hierarchical, metric and relational data that we represent in a single visualization. Unlike approaches that focus on graph topology, our method allows the user to consider the data in terms of knowledge they already possess: the semantics associated with the node attributes. Based on this knowledge, they are able to gain further insight into other aspects, such as relations, associated with the data. We are not alone in advocating an attribute-based approach for visualizing multivariate relational data. Recent work by Wattenberg also focuses on node attributes and makes a strong case for such a line of attack <ref type="bibr" target="#b18">[19]</ref>.</p><p>We have demonstrated the advantages of our approach with a use case from industry (containing 55 043 nodes and 289 443 edges). To do so, we have implemented a prototype that can be downloaded at <ref type="bibr" target="#b10">[11]</ref>. Using our prototype, we have shown that for a number of problems our approach works better than existing visualization techniques for state transition graphs. To this end, we have introduced a novel visualization for encoding hierarchically structured quantitative data. We refer to it as the bar tree. We have also extended existing visualization techniques by combining arc diagrams with hierarchical information. We know of only one other approach that combines relational and hierarchical data using arc diagrams <ref type="bibr" target="#b9">[10]</ref>. However, this approach uses containment and is limited in the number of hierarchical levels and relations that can be effectively visualized. Additionally, we have illustrated how the encoding of direction in the orientation of arcs enhances the visual language of arc diagrams.</p><p>With the aid of our prototype and use-case we have demonstrated how the benefits introduced in Section 1 can be realized. Our technique enables users to get a better intuition for the system being studied by taking different perspectives. Our technique also enables the user to conduct more focused analysis. In this regard, we have shown that it is possible to check requirements and to identify and clarify scenarios that lead to deadlock. We can also report that we have observed users talking about transition graphs and the behavior they describe in terms of the visual results of our prototype, using terms such as "symmetry", "irregularity", "third level" and "green cluster". Users agree that this enhances communication between themselves and they expect that this will also hold for other stakeholders.</p><p>One open question is whether this approach is useful for arbitrary multivariate graphs (email traffic and citation networks, for example). In our graphs, nodes have multivariate attributes that are discrete and of low cardinality. Larger, possibly continuous domains can be handled with domain clustering (see Section 3). For instance, an age attribute associated with email users can be clustered into a small number of age groups. Our graphs are generated from system specifications <ref type="bibr" target="#b2">[3]</ref> and generally contain some degree of regularity in terms of their edges (representing behavior). To cater for more irregular cases our approach can be used to study higher level selections. For instance, to study the relations between gender and country in email traffic. Another interesting solution would be to extend our approach with edge filtering. Using such a facility, it would be possible to analyze email traffic between specific geographic regions, for instance. These are promising possibilities and we aim to apply our approach to data sets from other domains to test its general applicability.</p><p>As far as the visual analysis of state transition graphs is concerned, our results suggest a number of interesting opportunities for future research. We would like to incorporate more ideas from abstract interpretation <ref type="bibr" target="#b1">[2]</ref>. Details about so-called may-and must-transitions are high in our list of priorities. When edges between two clusters of nodes are bundled, a number of different actions are usually grouped together. Some of these actions are possible from all nodes in the originating cluster (must) while some are not (may). Related to this, is the notion of transition attributes. For instance, it is often the case that a number of data parameters are associated with actions. Although not straight-forward, we would like to investigate whether and how such multivariate edges could be accommodated in our approach.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Visualization of multivariate state transition graphs. The user can (a) select a subset of state attributes and (b) view their associated types. (c) Every type also has a domain of values. Attribute-based clustering results in three types of data: (d) a clustering hierarchy, visualized as a node-link diagram, (e) an abstract graph, visualized as an arc diagram and (f) metric data, visualized as a bar tree. All data are represented in a single visualization, enabling the identification of correlations. Subtle cushioning is used (g) to clearly distinguish levels in the hierarchy and (h) to give a layered effect illustrating the hierarchical nature of the bar tree. of type τ i . Every node s ∈ V is defined as an n-dimensional (multivariate) tuple of attribute values: s</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Hierarchical clustering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Alternative graphical representations of the clustering hierarchy. (a) Dendrogram, (b) icicle plot and (c) buttresses.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Bar trees.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Bar tree variations. (a) Fully nested, (b) logarithmic distribution and (c) linear distribution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Arc diagram.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Focus bands. (a) Compressed and (b) magnified regions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Wafer stepper.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Wafer stepper state transition graph visualized with (a) FSMView and (b) StateVis.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Taking different perspectives. (a) From the tray's perspective, the system exhibits deterministic "forward" behavior. (b) Important requirements can be checked by considering the system from the wafer stage's perspective. (c) The regular nested patterns of the arcs indicate "symmetrical" behavior from the locks' perspective.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 12 .</head><label>12</label><figDesc>Deadlock analysis. (a) As a result of attribute-based clustering, all deadlock nodes are positioned at the far left of the visualization. (b) The user can magnify the region containing deadlock nodes, view their attribute values and select incoming edges. (c) By locating the origin of such a highlighted edge and changing the focus position, the user can detect nodes leading to deadlock. The exact conditions resulting in deadlock are identified by analyzing the attributes of these nodes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 13 .</head><label>13</label><figDesc>Pre and post conditions of wafer stepper deadlock.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This research was funded by the Netherlands Organization for Scientific Research (NWO) under grant 612.065.410. We gratefully acknowledge ASML for granting us permission to present the wafer stepper use case. We also thank Jeroen van der Wulp (TU/e) who created the behavioral model from which our data set was generated. We thank the members of the TU/e VIS and OAS groups, particularly Lucian Voinea and Bas Ploeger, for their valuable suggestions and input. Finally, we thank the anonymous referees for their constructive feedback on an initial draft of this paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Finite Transition Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Arnold</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Abstract interpretation of reactive systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gerth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="253" to="291" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Introduction to Process Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Fokkink</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">An open graph visualization system and its applications to software engineering. Software -Practice and Experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1203" to="1233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Model checker aided design of a controller for a wafer scanner</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hendriks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Van Den Nieuwelaar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Vaandrager</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First International Symposium on Leveraging Applications of Formal Methods</title>
		<meeting>the First International Symposium on Leveraging Applications of Formal Methods</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="201" to="209" />
		</imprint>
	</monogr>
	<note>ISOLA &apos;04</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">3D layout of reachability graphs of communicating processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jeron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Jard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the DIMACS International Workshop on Graph Drawing (GD &apos;94)</title>
		<meeting>the DIMACS International Workshop on Graph Drawing (GD &apos;94)</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="25" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Thread Arcs: an email thread visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kerr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Information Visualization (InfoVis &apos;03)</title>
		<meeting>the IEEE Symposium on Information Visualization (InfoVis &apos;03)</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visualizing larger state spaces in ProB</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Leuschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference of B and Z Users</title>
		<meeting>the Fourth International Conference of B and Z Users</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="6" to="23" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Visualization and analysis of multi-variate data: a technique for all fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mihalisin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Timlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwegler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Visualization (Visualization &apos;91)</title>
		<meeting>IEEE Visualization (Visualization &apos;91)</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">ArcTrees: visualizing relations in hierarchical data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schlechtweg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Carpendale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eurographics IEEE VGTC Symposium on Visualization</title>
		<meeting>the Eurographics IEEE VGTC Symposium on Visualization</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="53" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Pretorius</surname></persName>
		</author>
		<ptr target="www.win.tue.nl/˜apretori/noodleview" />
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Multidimensional visualization of transition systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Pretorius</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Conference on Information Visualization (IV05)</title>
		<meeting>the Ninth International Conference on Information Visualization (IV05)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="323" to="328" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Graphical fisheye views of graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sarkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI &apos;92)</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems (CHI &apos;92)</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="83" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Tree visualization with Tree-Maps: 2-D space filling approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="92" to="99" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interactive visualization of state transition systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Van Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Van De Wetering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="329" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Beam Trees: compact visualization of large hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Van Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Information Visualization (InfoVis &apos;02)</title>
		<meeting>the IEEE Symposium on Information Visualization (InfoVis &apos;02)</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="93" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Designing with a 2 1/2D attitude</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ware</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Design Journal</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="255" to="262" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Arc Diagrams: visualizing structure in strings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Information Visualization (Info-Vis &apos;02)</title>
		<meeting>the IEEE Symposium on Information Visualization (Info-Vis &apos;02)</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="110" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Visual exploration of multivariate graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI &apos;06)</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems (CHI &apos;06)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="811" to="819" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
