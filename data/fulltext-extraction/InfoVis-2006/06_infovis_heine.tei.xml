<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of Barrier Tree Sequences</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Heine</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Christian Heine is with Image and Signal Processing Group</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Christian Heine is with Image and Signal Processing Group</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Flamm</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Christian Heine is with Image and Signal Processing Group</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivo</forename><forename type="middle">L</forename><surname>Hofacker</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Christian Heine is with Image and Signal Processing Group</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Department of Theoretical Chemistry and Structural Biology</orgName>
								<orgName type="institution">University of Vienna</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Christian Heine is with Image and Signal Processing Group</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
							<affiliation key="aff4">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Leipzig</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Visualization of Barrier Tree Sequences</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2006; accepted 1 August 2006; posted online 6 November 2006.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph drawing</term>
					<term>dynamic graph</term>
					<term>RNA folding</term>
					<term>energy landscape</term>
					<term>fitness landscape</term>
					<term>barrier tree</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Dynamical models that explain the formation of spatial structures of RNA molecules have reached a complexity that requires novel visualization methods that help to analyze the validity of these models. Here, we focus on the visualization of so-called folding landscapes of a growing RNA molecule. Folding landscapes describe the energy of a molecule as a function of its spatial configuration; thus they are huge and high dimensional. Their most salient features, however, are encapsulated by their so-called barrier tree that reflects the local minima and their connecting saddle points. For each length of the growing RNA chain there exists a folding landscape. We visualize the sequence of folding landscapes by an animation of the corresponding barrier trees. To generate the animation, we adapt the foresight layout with tolerance algorithm for general dynamic graph layout problems. Since it is very general, we give a detailed description of each phase: constructing a supergraph for the trees, layout of that supergraph using a modified DOT algorithm, and presentation techniques for the final animation.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Biological Background</head><p>Ribonucleic acid (RNA) is a linear biopolymer, i.e. a chain of covalently connected units (nucleotides) of which there are four types: adenine (A), guanine (G), cytosine (C), and uracil (U). RNA molecules play an important role in many biological contexts, e.g. protein synthesis. The biological function of an RNA molecule is determined predominantly by its spatial structure which in turn is determined by the sequence of nucleotides. When an RNA molecule is produced in the cell, it folds back to form double helical regions consisting of paired nucleotides. The list of helices or (equivalently) of base pairs is known as the secondary structure of the RNA molecule. Since helices stabilize the structure while the intervening unpaired loops are destabilizing, each secondary structure can be assigned a free energy equivalent to the energy released when the molecule folds. To a large extent, the secondary structure already determines the function of RNA.</p><p>Various methods have been proposed to explain and predict the structures of RNA molecules. Typically, one considers the structure with the lowest free energy, i.e. the one for which the folding process that starts from the completely unfolded state releases the maximum amount of energy. This structure is the most stable one, and according to the laws of statistical mechanics, the one that is most frequently attained in thermodynamic equilibrium. The folding process itself can, however, take a long time so that the equilibrium state that will be reached after an infinite waiting time may not be biologically relevant. Instead, the folding process may pause in metastable structures from which it is hard to escape due to high energy barriers. The folding process of an RNA molecule can be modeled as a Markov process whose states are the individual secondary structures <ref type="bibr" target="#b2">[3]</ref>. Transitions are allowed only between "neighboring configurations", i.e. those that differ by only one base pair <ref type="bibr" target="#b8">[9]</ref>, and transition rates are proportional to exp(ΔE/RT ), where ΔE is the difference in energy, T is the ambient temperature, and R is a constant. In practice, however, the transition matrix is much too large to solve the resulting master equation directly.</p><p>A refined model transforms the configuration space into a large graph, whose vertices are secondary structures and whose edges connect neighboring structures. The neighbor graph along with the energy specific to each configuration can be imagined as a discrete energy landscape. A folding or refolding process can then be described by a path in the graph or a walk in the energy landscape. For each such path there exists one structure of maximal free energy, the maximum of the path. The barrier between two configurations is the smallest maximum of all paths between the two configurations. If a structure refolds, it has to overcome at least this energy barrier. These barriers partition the graph into "basins" that are centered around local energy minima (secondary structures of which all neighbors are less stable). An approximate model is now obtained by considering the basins as effective states of the RNA molecules. Transition rates between basins can be derived from the more detailed model under the assumption that the folding process is nearly equilibrated locally within each basin <ref type="bibr" target="#b24">[25]</ref>. In contrast to normal trees, each vertex of a barrier is drawn at a height that reflects the free energy of the folding configuration it represents. To determine the energy barrier between two local minima, one has to find the barrier tree vertex that has both leaves representing the local minima as descendants and the greatest topological distance to the root of the tree.</p><p>The relevant information can now be stored in the so-called barrier tree T of the landscape. The leaves of T correspond to the local minima of the energy landscape together with their basins of attraction, while inner vertices represent the barriers (also called saddle-points) between the basins. <ref type="figure" target="#fig_0">Fig. 1</ref> shows an example of a barrier tree for a very simple landscape. This example is just for illustrative purposes; we consider mainly landscapes where individual points do have a high and varying number of neighbors, making the landscape a high dimensional object. Barrier trees are constructed by successively "flooding" the basins of the landscape. A barrier is found at the point where the lakes of two basins would join. The two joined basins are considered to be one, and the "flooding" is continued. See Flamm et al. <ref type="bibr" target="#b9">[10]</ref> for a detailed description.</p><p>In reality, however, RNA molecules are not "born" as a whole. Rather, they are "transcribed" nucleotide by nucleotide from their DNA template, so that the molecule is still growing while it already starts to fold <ref type="bibr" target="#b18">[19]</ref>. The structures that are formed are thus dependent upon the relative rates of folding and transcription. Similar effects are observed when an RNA molecule travels through a narrow pore, where it must unfold on one side and refolding on the other <ref type="bibr" target="#b14">[15]</ref>. Again the kinetics of folding is coupled to the speed with which the molecule is pulled through the pore. Instead of single static energy landscape, we thus have to deal with a situation where the energy landscape, and hence the rules of folding, changes with each step of the second dynamical process. Since the latter proceeds in small steps, it only causes moderate changes in the energy landscape. Thus there is a natural correspondence between a local energy minimum x before and a (unique) local minimum x after a step of the second dynamics: Structure x is modified to some structure x * i.e. by appending a single unpaired nucleotide. Then x * relaxes to the local minimum x to whose basin it belongs to. Note that multiple local minima can map to the same local minimum in the next step, and that local minima might arise that are not mapped from any local minimum of the previous step.</p><p>From the biophysical point of view, the problem is thus to understand the dynamics of folding combined with another process such as transcription of pore traversal. As in the static case, this can be done by approximating the folding energy landscape at each step by its barrier tree. The second dynamics is then represented by transitions between corresponding local minima. While the folding process in the static case is relatively easily interpreted as a movement on the barrier tree, we now have to consider a movement on a series of barrier trees whose vertices are connected in a specific way.</p><p>In numerical simulations, one observes, that for some RNAs the fraction of folding trajectories that reach the ground state of a certain fully grown chain depends in a non-trivial way on the relative speed of transcription. Both for very slow and very fast transcription the molecule reaches the ground state quickly, while in an intermediate regime most of the trajectories become trapped in a metastable, very different, secondary structure. In order to understand this phenomenon it is necessary to compare the trajectories in the barrier tree series and to pinpoint the step(s) in which escape from local minima occurs at the same time scales as chain elongation. The same type of questions naturally arise in other settings where the folding energy changes, i.e., whenever the temperature or salt concentration changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Visualization Problem</head><p>Without an appropriate visualization tool it is virtually impossible to find the time-steps and transition at which time-scale difference have a drastic effect, as there is little or no a priori coherence between the layouts of the individual barrier trees in a series. It is thus very tedious to actually follow a trajectory through a series and to determine the likely transitions. The mapping of local minima, however provides information that, as we shall see, can be utilized to enhance the coherence of adjacent trees in a series.</p><p>The barrier trees thus share common information that should be presented accordingly, i.e. it should not attract more attention than the parts that differ. Instead of visualizing a sequence of barrier trees that have some redundancy, one can also say that there is just one barrier tree that changes with time in a way that the barrier trees of the sequence are snapshots of the dynamic tree at certain points of time. In this work, we will thus view this problem as a dynamic graph drawing problem. As an abstraction, we define the problem as follows: Given a sequence of barrier trees and leaf mappings, where leaves of one tree are mapped on leaves of the following tree, determine the layout of all trees such that in a presentation the mental map is retained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Drawing a graph is the process of transforming topological properties of the graph to geometric objects in a graphical representation. This process is mostly determined by the generation of a layout for that graph, that places vertices in a vector space and routes edges to connect the vertices. The layout of a graph has properties that can be measured with certain cost functions, e.g., area of the layout, number of edge crossings, distribution of vertices and edges, congruency of isomorphic structures, etc. To make visually pleasing drawings, esthetic criteria have been defined. Such criteria often demand maximizing or minimizing one of the cost functions. As not all esthetic criteria can be obeyed simultaneously, a layout algorithm generally makes a tradeoff between them. The field of static graph layout creation has been intensively studied in the past decades. There exist good overviews for this topic ( <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b23">24]</ref>).</p><p>The first attempts towards dynamic graph drawing were very specific. Moen <ref type="bibr" target="#b20">[21]</ref> presented an algorithm that shows a part of an ordered tree. Although the tree itself stays the same, the selected subset may change through replacement of subtrees by leaves and vice versa. Cohen et al. <ref type="bibr" target="#b1">[2]</ref> gave detailed algorithms and data structures for a number of dynamic graph classes. These allow visualizing data structures like AVL-Trees and adjusting the layout of a graph, if it is being edited or browsed. Both approaches share a motivation: they reduce the computation time of the layout by reusing information about the previous layout. This has the side effect of making the layout of the changed graph similar to the unchanged, but accumulation of many elementary changes can result in an esthetically unpleasing drawing.</p><p>North <ref type="bibr" target="#b21">[22]</ref> measures the quality of an algorithm to make good dynamic drawings based on incremental or dynamic stability, i.e. , the property of an algorithm to produce very similar layouts for graphs that differ only slightly. He applies his concepts to the drawing of dynamic directed acyclic graphs. Misue et al. <ref type="bibr" target="#b19">[20]</ref> introduce the concept of mental distance. It formally describes the difference of two layouts and can be used to measure the perceived stability of a dynamic graph layout. They define the esthetic criterion "preservation the mental map" for any dynamic graph drawing problem, and refine it to three models. In the orthogonal ordering the left-to-right, and up-down order of vertices stays the same. Proximity relations are preserved, if the relative distances of vertices and edges do not change. The topology is preserved, if vertices and groups of vertices of one region stay in that region. The mental distance of two layouts is the number of times or the amount by which a rule is broken. Frishman and Tal <ref type="bibr" target="#b11">[12]</ref> present an algorithm that draws dynamic clustered general graphs using an incremental force directed method. Their algorithm generally preserves the mental map by reusing the earlier layout, but improves the layout slightly, if a static graph drawing esthetic criteria is not met anymore.</p><p>If the layout process cannot be formulated to minimize the mental distance between successive layouts, a local transition or morphing of the layouts has to take place. Friedrich and Eades <ref type="bibr" target="#b10">[11]</ref> describe a method to make sure that the transition preserves the mental map. To do that, an affine transformation that registers both layouts is determined and performed. Using a force-directed approach, vertices are moved to their final positions while avoiding occlusions and other visual artifacts linear interpolation would bring forth. Fortunately, our algorithm produces layouts that are stable enough not to require these forms of transition.</p><p>Erten et al. <ref type="bibr" target="#b6">[7]</ref> describe a method to layout general dynamic graphs using a force-directed method. Vertices of the evolving graph that are equivalent are connected by virtual springs that contract in the forcedirected method. As a result, vertices referring to the same instance at different times are positioned closely together. This ensures a good stability of the dynamic layout. We do not use this general approach, because we feel, that the final animation should at least resemble the look and feel of barrier trees.</p><p>Diehl and Görg <ref type="bibr" target="#b4">[5]</ref> propose a general scheme to layout dynamic graphs when all graphs of the sequence are known prior to layout creation. This scheme is independent of the class of the graphs and the layout algorithm used. Their Foresight Layout with Tolerance algorithm makes a trade-off between static and dynamic graph drawing esthetic criteria based on a tolerance parameter. In a first phase a supergraph is constructed that contains all graphs of the sequence as subgraphs. Then the layout of this (static) supergraph is determined and used as a blueprint for the layout of the subgraphs. The layout of the subgraphs can be further improved with respect to static graph drawing esthetic criteria, but its mental distance may not differ by more than the tolerance parameter from the blueprint layout. Presentation of the sequence is done using morphing geometry information between the single subgraphs. Görg et al. <ref type="bibr" target="#b15">[16]</ref> further improve the scheme with the notion of the importance of a vertex or edge. This importance is a measure for the number of times a vertex or edge is present in the graph sequence and is used to improve the visual quality of the layouts.</p><p>A similar idea is presented by Gaertler and Wagner <ref type="bibr" target="#b12">[13]</ref>. Instead of an animation, a 2 <ref type="bibr" target="#b0">1</ref> 2 D visualization, i.e. a 3D view of a stack of static 2D layouts-each showing the graph at a certain point of time-is generated. Brandes et al. <ref type="bibr" target="#b0">[1]</ref> also use 2 <ref type="bibr" target="#b0">1</ref> 2 D visualization to show a set of similar metabolic pathways. They create the layouts of the acyclic directed graphs representing the pathways using a layout of an union of all graphs, and also determine the optimal ordering of layouts. Both approaches share the notion of the supergraph, local adjustments like in the Foresight Layout with Tolerance algorithm are not performed. Dwyer and Schreiber [6] also use 2 <ref type="bibr" target="#b0">1</ref> 2 D to visualize a set of similar phylogenetic trees. Phylogenetic trees are very similar in structure to barrier trees. In contrast to the other two approaches instead of a supergraph only a minimal leaf ordering is determined. This neglects the identification of equivalent inner vertices, which we consider an important part of our trees.</p><p>In this work we adapted the Foresight Layout with Tolerance algorithm. Since it is very general, we optimized each of the phases to fit our dynamic barrier tree application. The supergraph we construct from the barrier tree sequence will be a directed acyclic graph (DAG). For the layout of this supergraph we implemented and modified the DOT algorithm by Gansner et al. <ref type="bibr" target="#b13">[14]</ref>.</p><p>The layouts of the subgraphs that is generated from the supergraph layout can also be used in a 2 <ref type="bibr" target="#b0">1</ref> 2 D visualization. However, we found this to be inappropriate, because the barrier tree sequences under consideration were highly dynamic. In our datasets we observed, that the tree at time t does not have much in common with the tree at time t +5. A 2 <ref type="bibr" target="#b0">1</ref> 2 D visualization would therefore exhibit much visual clutter. Also the energy of a vertex, and thus its vertical position, can change between subgraphs. In a 2 <ref type="bibr" target="#b0">1</ref> 2 D visualization one would have to indicate such events with edges between slices, we found it more natural to indicate that in an animation with a movement of the vertex. In general we think that the animation of transitions between subgraph layouts can be efficiently used to communicate the changes the barrier tree topology to the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CONSTRUCTING THE SUPERGRAPH</head><p>Definitions In the following, G = (V, E) denotes a directed graph, V the vertices and E ⊆ V × V the edges of G. In the edge e = (u, v) the vertex v is called the head and u is called the tail of e. A directed path in a graph G is a list of edges of G, where the head of each edge in this list is the tail of the edge that follows in the list. If the tail of the first edge equals the head of the last edge, the directed path is called a directed circle. A directed acyclic graph (DAG) is a directed graph that does not contain directed circles. path G (u, v) shall be true, if and only if there exists a directed path in G starting at u and ending at v. odeg G (v) denotes the number of edges of G, whose tail is v.</p><formula xml:id="formula_0">T i = (V i , E i )</formula><p>is a rooted tree and also a directed acyclic graph, where all edges are oriented to point away from the root toward the leaves. Note that each leaf v satisfies odeg T i (v) = 0. L i denotes the set of leaves of the tree T i and F i an arbitrary subset of L i . L G (v) is the set of all vertices w that satisfy both path G (v, w) and odeg G (w) = 0. In a tree, these vertices are leaves, in a directed acyclic graph, they are sinks. Thus L G (v) assigns the set of leaves/ sinks that can be reached from v to each vertex v. 2 M denotes the set of all subsets of M.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Problem Definition</head><p>The problem of the supergraph of a sequence of trees with leaf mappings is: given a sequence of rooted trees T 0 ,...,T n with</p><formula xml:id="formula_1">∀0 ≤ i, j ≤ n : i = j → V i ∩V j = / 0 and ∀0 ≤ i ≤ n : ∀v ∈ V i : odeg T i (v) = 1</formula><p>and a sequence of leaf mappings f 1 ,..., f n with f i : F i−1 → L i , find the smallest graph G = (V, E) and a global mapping of tree vertices on supergraph vertices</p><formula xml:id="formula_2">k = n i=0 k i , k i : V i → V , k i injective, such that 1</formula><p>. G contains all trees:</p><formula xml:id="formula_3">∀0 ≤ i ≤ n : (k i (V i ) ⊆ G ∧ ∀(u, v) ∈ E i : path G (k i (u), k i (v)))</formula><p>and each path from u to v does not visit vertices from k i (V i ) except u and v.</p><p>2. G conforms to the leaf mapping:</p><formula xml:id="formula_4">∀1 ≤ i ≤ n : ∀u, v ∈ V i−1 : ( f i (u) = f i (v) → k i ( f i (u)) = k i ( f i (v)))</formula><p>3. G conforms to the topological properties of all trees:</p><formula xml:id="formula_5">∀0 ≤ i ≤ n : ∀u, v ∈ V i : ¬ path T i (u, v) → ¬path G (k i (u), k i (v))</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Motivations</head><p>The first step of the Foresight Layout with Tolerance algorithm <ref type="bibr" target="#b4">[5]</ref> is to construct a supergraph of all the graphs in a sequence. The supergraph is the smallest graph that contains all graphs of the sequence as subgraphs. To accomplish this, it is necessary to know which vertices of the graphs should be considered equivalent. Leaf mappings between successive trees are used as a base for this process, however, this can only be applied directly to some of the leaves of the trees. The identification of equivalent inner vertices and leaves that result from merging leaves in the previous tree is non trivial. We did not motivate this identification by graph theoretic minimization, but decided that the supergraph should reflect properties of the corresponding landscapes. This has the advantage, that the supergraph may be used as an alternative and static representation of the barrier tree sequence. A barrier tree not only stores energy barriers between local minima, it also gives a rough and abstract view on the topology of a landscape. The shape of the barrier tree illustrates the order of the unification of basins. This unification order will be used to identify equivalent inner vertices. If, for instance, an inner vertex u has two leaves as its children that are mapped to two different leaves of the following tree having the same parent v, the inner vertex u and the parent v can be seen as topologically equivalent. If the leaf mapping is extended by this new information, further parts of the trees can be processed to further identify inner vertices as equivalent, and to quickly identify isomorphic structures between the barrier trees that conform to the leaf mapping. This takes only the topology of the barrier tree into account. The energy information about each vertex is neglected.</p><p>This procedure ends abruptly, as soon as there is the slightest topological difference in a barrier tree. In practice, this strict behavior results in a large number of vertices that are not considered to be equivalent. This can be avoided by identifying equivalent inner vertices based on the set of local minima that can be reached from the corresponding barrier by descending in the landscape. In <ref type="figure" target="#fig_1">Fig. 2a</ref>, vertex e and j are considered to be equivalent, because the sets of leaves that can be reached from them are equal considering the leaf mapping. Vertices d and i are not considered to be equivalent because the set of leaves that can be reached from them, {a, b} and {g, h} respectively, are not equal considering the leaf mapping. Such cases are very common and are generated mostly, when the the height of barriers between successive trees change. The supergraph is in that case no longer a tree, but a directed acyclic graph (DAG). This is unavoidable, but the supergraph will always be at most a DAG.</p><p>Imagine, that the barrier swap from <ref type="figure" target="#fig_1">Fig. 2a</ref> is reverted at time t + 2. The tree at time t + 2 conveys exactly the same information as the tree at time t + 0. It contains an inner vertex that is not equivalent to any vertex of tree t + 1, but equivalent to vertex d. This vertex should not be inserted in the supergraph, as it does not represent "new" information. But this fact cannot be concluded by looking at tree t + 1 alone. Considering all past trees can get quite complicated, it is much easier to just look into the supergraph for the past trees. The supergraph can and will be used as a data structure to quickly identify equivalent inner vertices of the barrier trees. It is efficient to construct the supergraph iteratively. To determine the supergraph for the trees T 0 to T n+1 , we use the supergraph of the trees T 0 to T n for identification of equal vertices and add any new information we gain from tree T n+1 . <ref type="figure" target="#fig_1">Fig. 2b</ref> shows another common case of change in the energy landscape. Often barriers disappear, and local minima get merged. Obviously our "set of leaves" approach fails in that case, the vertices c and d would not be considered equivalent ({a, b} vs. {d}). The solution is to temporarily add the mirror vertices a and b as children to d and modify the leaf mapping. This methodology is a must, if more than two leaves merge or the merging leaves do not share the same parent. Merged leaves must be marked as inactive in the supergraph, so they will not be considered for the "set of leaves" of other inner vertices.</p><p>In <ref type="figure" target="#fig_1">Fig. 2c</ref> a leaf vanishes, i.e. it is not part of the leaf mapping. This may happen, because the number of leaves is usually reduced to the most relevant ones, and a relevant leaf may have a non relevant successor. In such a case the leaf (d) is marked as inactive and is not considered for the set of leaves. This leaves us with the problem, that the vertices c and e of tree t +0 have the same set of leaves ({a, b}), and thus vertex j is considered equivalent to both vertices. In that case, the vertex farthest from the root (c) is selected. What becomes apparent now is, that the tree t + 1 is not really a subgraph of the supergraph, because it lacks an edge from g, i to c, j. The supergraph is still an expansion of tree t + 1.</p><p>In <ref type="figure" target="#fig_1">Fig. 2d</ref> a leaf is added to the tree. This is the inverse of the previous case. The edge from e to c is replaced by a path (i, j, h) and the new leaf is added at the appropriate location. Again the supergraph is an expansion of tree t + 0. The removal of transitive edges has little to no effect on the quality of the final presentation, but reduces the size of the supergraph and greatly improves the performance, when the layout of the supergraph is determined.</p><p>These four operations are considered elementary and are the only operations we observed in our datasets. However, it is expected that multiple elementary operations take place between successive trees of the sequence. Because creation, deletion, and merging cannot happen to the same leaf of a tree simultaneously, these operations and the supergraph modifications they imply do not affect each other. Also creation, deletion, and merging happen at or near the leaves, while barrier swaps only add inner vertices. So these operations also do not affect each other and can be done separately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Construction</head><p>For each directed graph G = (V, E) define the function mark G as:</p><formula xml:id="formula_6">mark G : 2 V → 2 V M → v| L G (v) ⊆ u∈M L G (u)</formula><p>The operation of this function may be described as this: Starting from the vertices of M, all incoming edges are marked. If all outgoing edges of a vertex get marked in that process, that vertex is added to M and the process continues. The process ends, if no more vertices can be added to M. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. Example for the mark G function</head><p>The result is illustrated by vertices with thick circles. top left to right:</p><formula xml:id="formula_7">mark G ( / 0), mark G ({1}), mark G ({2}), mark G ({3}). bottom left to right: mark G ({1, 2}), mark G ({1, 3}), mark G ({2, 3}), mark G ({1, 2, 3}).</formula><p>The function match G reduces a mark to the topmost layer:</p><formula xml:id="formula_8">match G : 2 V → 2 V M → mark G (M) ∩ { v| ∀(u, v) ∈ E : u / ∈ mark G (M)}</formula><p>For the example in <ref type="figure">Figure 3</ref>:</p><formula xml:id="formula_9">match G ( / 0) = / 0, match G ({1}) = {1}, match G ({3}) = {5}, match G ({1, 2}) = {4}, match G ({2, 3}) = {2, 5}, match G ({1, 2, 3}) = {6}.</formula><p>Construct G iteratively:</p><formula xml:id="formula_10">G 0 = T 0 , ∀v ∈ V 0 : k 0 (v) = v. Construct G i = (V i , E i ) and k i : V i → V i from G i−1 = (V i−1 , E i−1 ), k i−1 : V i−1 → V i−1 , T i = (V i , E i ) and f i as follows:</formula><p>Determine the active part of the Supergraph G i−1 , this is much easier than tracking inactive (deleted or merged) parts of the supergraph:</p><formula xml:id="formula_11">G i = (A i , K i ) A i = v| v ∈ V i−1 ∧ ∃l ∈ L i : path G i−1 (v, k i−1 (l)) K i = E i−1 ∩ A i × A i</formula><p>For each vertex of the tree T i determine the set of leaves of T i that can be reached from that vertex:</p><formula xml:id="formula_12">M i : V i → 2 L i u → v| v ∈ L i ∧ path T i (u, v)</formula><p>For each vertex of the tree determine its leaf set, i.e. the set of vertices of the active part of the supergraph, that map on a leaf in M i because of the leaf mapping:</p><formula xml:id="formula_13">B i : V i → 2 V i v → { k i−1 (w)| f i (w) ∈ M i (v)}</formula><p>Using the match G function find vertices of the active part of the supergraph with the most similar set of leaves:</p><formula xml:id="formula_14">l i (v) = match G i (B i (v))</formula><p>Determine all children of a tree vertex that have an empty leaf set. These children are vertices that are created in the current barrier tree. Note that, if all children of a tree vertex have an empty leaf set, that vertex will also have an empty leaf set also and is thus a newly created inner vertex of the barrier tree.</p><formula xml:id="formula_15">n i (v) = { w| (v, w) ∈ E i ∧ B i (w) = / 0}</formula><p>Barrier tree vertices can now be categorized:</p><formula xml:id="formula_16">• f resh(v), iff l i (v) = / 0. v</formula><p>is a new vertex in the current barrier tree.</p><formula xml:id="formula_17">• matching(v), iff |l i (v)| = 1 ∧ n i (v) = /</formula><p>0. In that case an equivalent vertex has been found in the supergraph. This vertex is the one element of l i (v) and no child of v is fresh.</p><formula xml:id="formula_18">• match f resh(v), iff |l i (v)| = 1 ∧ n i (v) = /</formula><p>0. An equivalent vertex has been found in the supergraph. At least one child of v is fresh.</p><formula xml:id="formula_19">• recomb(v), iff |l i (v)| &gt; 1.</formula><p>An equivalent vertex could not be found. l i (v) contains the most similar vertices.</p><p>Each vertex of the tree must be inserted in the supergraph, unless an equivalent vertex had been found.</p><formula xml:id="formula_20">V i = V i−1 ∪ { v| v ∈ V i ∧ ¬matching(v)} k i (v) = u l i (v) = {u} ∧ n i (v) = / 0 v l i (v) = {u} ∧ n i (v) = / 0</formula><p>The inserted edges are:</p><formula xml:id="formula_21">E i = E i−1 ∪ (u, v)| v ∈ V i ∧ (u, w) ∈ E i−1 ∧ matchfresh(v) ∪ { (v, w)| v ∈ V i ∧ l i (v) = {w} ∧ n i (v) = / 0} ∪ { (k i (v), w)| v ∈ V i ∧ w ∈ l(v) ∧ ¬matching(v)} ∪ { (k i (u), k i (v))| (u, v) ∈ E i }</formula><p>Transitive edges may be removed:</p><formula xml:id="formula_22">E i = (u, v)| (u, v) ∈ E i ∧ ¬∃path (V i ,E i ) (u, w) = (u, w)</formula><p>The final supergraph G is equal to the supergraph G n , i.e. the supergraph after inserting each tree of the sequence. Additional material to this article may be found on the accompanying DVD. It includes some algorithms that illustrate implementation details for the operations needed for this supergraph construction.  <ref type="figure">Fig. 4</ref>. Example construction of the supergraph of two trees left to right: the supergraph G i , the tree T i , the tree T i+1 , and the supergraph G i+1 . Arrows between T i and T i+1 indicate the leaf mapping. The dashed lines in G i+1 indicate edges that can be replaced by a path. The exact description, how the trees are embedded in the supergraph and how the supergraph is modified in this iteration, are found in the main text. <ref type="figure">Fig. 4</ref> shows a nontrivial example for one iteration of the supergraph construction process. It has been chosen to show all four elementary operations that can modify barrier trees. k i , mapping the vertices of T i to vertices of G i is:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Example</head><formula xml:id="formula_23">k i = {(a, 1), (b, 2), (c, 3), (d, 4)</formula><p>, (e, 5), ( f , 6), (g, 8), (h, 7), (i, 10)} T i is thus very similar to G i , only the edge (i, h) of the tree is represented by the path (10, 9, 7) in G i . The vertex f does not occur in the leaf mapping, i.e. , it is deleted. The active part of G i is thus: <ref type="figure" target="#fig_0">{1, 2, 3, 4, 5, 7, 8, 9, 10}</ref>. Because of the leaf mapping the leaf sets of the vertices of T i+1 are:</p><formula xml:id="formula_24">A i+1 =</formula><formula xml:id="formula_25">B i+1 = {( j, / 0), (k, / 0), (l, {1}), (m, {2, 4}), (n, {7})} ∪ {(o, / 0), (p, {1, 2, 4}), (q, {7}), (r, {1, 2, 4, 7})}</formula><p>After mark (A i+1 ,K i+1 ) and match (A i+1 ,K i+1 ) have been determined, l i+1 and n i+1 result to: Therefore the following vertices have to be added to the supergraph, and k i+1 results to:</p><formula xml:id="formula_26">l i+1 = {( j, / 0), (k, / 0), (l, {1}), (m, {2, 4}), (n, {9})} ∪ {(o, / 0), (p, {5}), (q, {9}), (r, {10})} n i+1 = {( j, / 0), (k, / 0), (l, / 0), (m, / 0)} ∪ {(n, / 0), (o, { j, k}), (p, / 0), (q,</formula><formula xml:id="formula_27">V i+1 = V i ∪ { j, k, m, o, q} k i+1 = {( j, j), (k, k), (l, 1), (m, m), (n, 9), (o, o), (p, 5), (q, q), (r, 10)}</formula><p>Insertion of the edges is left as an exercise to the reader. Some transitive edges may be removed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Post-processing</head><p>Unfortunately, the use of the supergraph as a data structure to find similar leaf sets often requires the insertion of edges that are not needed for the final solution. Some edges are inserted to ensure correct results for the match and mark functions, but are not required for the supergraph to be an expansion of all trees. Removal of these edges decreases both the possibility of edge crossings in and the running time of the layout process. These edges are identified as a side product in a post-processing phase. In this phase each edge of the supergraph is annotated with the set of all trees it occurs in. The motivation for this will be explained in the next section. Usually a tree edge corresponds to a path in the supergraph. Therefore, each edge of the path is annotated with the tree. Quite frequently, there are multiple possible paths for one tree edge. In such cases only the edges of the longest path are annotated. After annotation, there will be many edges which do not belong to any tree. These can be removed safely. Choosing the longest path is a simple and quick heuristic that favors edges with a high probability of reuse. In practice this removes 5-20 percent of all edges of the supergraph plus any transitive edge. However, a proper problem definition for this phase would be: find the largest set of edges that can be removed without violating the constraint, that the supergraph is an expansion to each tree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">LAYOUT 4.1 Supergraph Layout</head><p>The second step of the Foresight Layout with Tolerance algorithm creates the layout of the supergraph. In general, the supergraph will be a DAG. Sugiyama et al. <ref type="bibr" target="#b22">[23]</ref> proposed to split the task in three phases. In the first phase, the ranking, vertices are grouped in successive layers, such that the edges are oriented in one direction, usually from top to bottom. In the second phase, the ordering, an order of vertices in each layer is determined that minimizes edge crossings. In the final phase, the positioning, coordinates are assigned to each vertex, preserving the order inside the layers, but minimizing the overall edge length by shifting vertices inside the layers. In this work we used the heuristics presented Gansner et al. <ref type="bibr" target="#b13">[14]</ref> -also known as the DOT algorithmto lay out the supergraph and made slight modification.</p><p>The main esthetic goal for DAG layout is the removal of edge crossings. In practice, the supergraph contains a large number of edge crossings that do not matter, because these crossing edges are never be shown simultaneously. The annotation of the postprocessing phase allows us to weight the importance of an edge crossing. In the DOT algorithm, graphs are laid out respecting edge weights. Edges with a high weight are kept short and crossing free. in. In the ordering phase, the weight of an edge is replaced by the weight of an edge crossing. This weight is generated from the number of trees, that both edges actually cross.</p><p>In the original algorithm, crossing reduction is done by repeatedly iterating over and through all layers, switching the order of two successive vertices, if that locally improves the number of edge crossings. Sometimes, such a switch does neither improve nor deteriorate the number of edge crossings, but the switch may lead to further improvements. Gansner et al. <ref type="bibr" target="#b13">[14]</ref> suggest performing such switches only every other global iteration. In our case, many crossing weights will be zero and switches seldom improve the number of edge crossings immediately. As a result, the original formulation leads to long running times of the algorithm and changes periodically from one extreme to the other.</p><p>In our implementation, we perform the switch randomly in a simulated annealing process. Improvement is always and deterioration never accepted. A temperature, initially 1, is used as the probability of performing a switch that does not change the number of weighted edge crossings. Each global iteration the system cools down, the temperature decreases exponentially. The process terminates, if no more switches are performed. In practice this resulted in a higher number of edge crossings, but reduced the running time drastically.</p><p>The routing of edges is not relevant for the layout of the supergraph. The edges will be routed only in the subgraphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Tree Layout</head><p>Until now, the energy of a vertex has been ignored. Since a vertex of the supergraph may represent multiple vertices of the tree sequence and each of these vertices may have a different energy, a supergraph vertex may not have a single energy value. Because we want one of the coordinates to indicate the energy, it is not possible to do the third phase of the DAG-layout, the positioning, for the whole supergraph. Coordinate assignment is done for each tree separately, respecting the order generated in the ordering phase. This constraint preserves the mental map, specifically the orthogonal ordering. Positioning each tree separately allows us to locally improve the layout of the subgraphs. This corresponds to the third phase of the Foresight Layout with Tolerance algorithm.</p><p>The DOT algorithm may give two vertices the same horizontal position, if they are in different layers. If we assign these vertices their energy value as the vertical position it is possible, that they overlap. By assigning each vertex of the supergraph an unique horizontal position we can avoid this. However, if the layout is created in that way, the vertices of the subgraphs can be very unevenly distributed. We found it visually more appealing, if only sinks of the supergraph have an unique horizontal position. This can be achieved trivially, if all sinks are positioned in the same layer prior to the ordering phase.</p><p>After the vertices have been positioned, edges must be routed. For simplicity each tree edges consist just of one horizontal and one vertical line segment that directly connect the two adjacent vertices. Edges are routed independently of the supergraph, where an edge might have been replaced by a path. Because of the problem definition, vertices on that path would not be a part of the current tree and thus layout information of these vertices is not valid for this tree. In general, it is not always possible to draw the subgraphs without edge crossings, we sacrificed this property for the preservation of the mental map. Drawing the edges as orthogonal line segments conforms to the style, barrier trees are drawn usually. We also found, that a straight line drawing does not reduce the number of edge crossings and makes tracing the edges even harder than an orthogonal drawing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">ANIMATION</head><p>Now that the layout for each tree has been generated, the single trees could be presented using the generated layout. In practice, there can be quite a number of changes between consecutive trees. Vertices and edges may appear or disappear, and whole subtrees can change the energy of their vertices. We created methods to make the transition smooth and to indicate the type of change. Vertices that experience a change of energy are moved accordingly in the drawing area using linear interpolation of the coordinates. Barriers that appear or disappear are presented using blending. Edges are modified based on the changes of their adjacent vertices. Subtrees that are created or merged "grow" out of or into the vertices, where they are created or merged into, again using linear interpolation of the coordinates.</p><p>Usually the huge number of changes would require each change to be visualized separately. In our proof-of-concept implementation, all changes are shown simultaneously using the following scheme: Each transition is given a time interval [t i ,t i + Δt). Vertices that change their energy are moved during [t i + <ref type="bibr" target="#b2">3</ref> 8 Δt,t i + 7 8 Δt). Subtrees that grow into a vertex because of merging are scaled during [t i + <ref type="bibr" target="#b1">2</ref> 8 Δt,t i + 5 8 Δt), subtrees that grow out of a vertex, do so during [t i + <ref type="bibr" target="#b4">5</ref> 8 Δt,t i + 8 8 Δt). Fading out of barriers is done during [t i + <ref type="bibr" target="#b1">2</ref> 8 Δt,t i + <ref type="bibr" target="#b5">6</ref> 8 Δt) and fading in takes place during [t i + <ref type="bibr" target="#b3">4</ref> 8 Δt,t i + 8 8 Δt). The segments overlap intentionally, as we observed many changes to interior vertices. The remaining interval [t i ,t i + <ref type="bibr" target="#b1">2</ref> 8 Δt) is used for a static presentation of tree T i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RESULTS</head><p>To create and evaluate our algorithm we had three datasets at our disposal. The ATT dataset consists of 20 barrier trees, with at most 25 leaves per tree and a total of 894 vertices in all trees. It represents a small RNA molecule, with sequence length growing from 40 to 74 nucleotides with varying step size. This example was used to design and test the algorithm. <ref type="figure" target="#fig_5">Fig. 5</ref> shows the keyframes for this dataset, as well as some explanations from experts. The full animation can be found on the DVD proceedings. The LEPTO dataset consists of 47 barrier trees, with a maximum of 50 leaves per tree and a total of 3727 vertices in all trees. The sequence length of the molecule increases from 10 to 56 nucleotides. The largest example, the HOK dataset, consists of 65 trees with a maximum of 100 leaves and a total of 8635 vertices. The sequence length grows from 10 to 74 nucleotides. The inner vertices of all trees of these datasets satisfy odeg(v) = 2, i.e. , all inner vertices have exactly two children. All datasets present rather short RNA molecules.</p><p>One way to determine the quality of the algorithm is to look at properties of the supergraph. The number of vertices in the supergraph of the ATT, LEPTO, and HOK datasets are 392, 1874 and 4594 respectively. This means that only about half of the vertices of the trees were identified as redundant. This results from a property of the sequences that we have not yet mentioned. In each new tree of a sequence, leaves get deleted, merged, and added. The average number of leaves that are added is 5.00, 7.20 and 16.16 respectively. That means that up to 20 percent of each tree changes on average. It can be shown, however, that a graph-theoretic minimum supergraph would not be smaller than approximately half to one third of the size of our supergraphs.</p><p>More critical to the perceived quality of the layout is the number of edges. If this number is near the number of vertices, the supergraph is very similar to a tree and can thus be drawn with few edge crossings and (horizontally) short edges. Horizontally long edges in the supergraph layout are undesirable, because each edge is shown at least once. The amount of edges divided by the amount of vertices for the three datasets are 1.52, 1.69, and 1.61 respectively. Although these numbers seem to be close, the LEPTO and HOK datasets have a significantly larger number of edge crossings and long edges than the ATT dataset. This is because the edges are unevenly distributed among the layers of the supergraph layout. The animation suffers from long edges that are close together and are notoriously difficult to track.</p><p>Two preprocessing methods have been tested to determine, if a subset of the data still results in bad layouts. Surely, we do not want to reduce the number of trees, since we want to visualize the whole process.There are a number of barriers that are connected by an edge in the barrier tree, and whose energy differs only slightly. Such barriers are merged in a preprocessing step. This process reduces the probability of barrier swaps and the supergraph will have less vertices. In the LEPTO and HOK datasets, the merging of barriers that differ by 0.5 or less (which is approximately two percent of the overall energy range) reduced the total number of tree vertices to 2419 and 5863 respectively and the number of supergraph vertices to 853 and 2493 respectively. This means, that now nearly two third of the vertices were identified as redundant. Unfortunately this method does not reduce the number of edges as much as the number of vertices, thus the supergraph suffers from a huge number of edge crossings and long horizontal edges. After applying this method, the supergraph span less layers and the edges got distributed more equal over the layers. In the final animation long edges are still visible, but they are no longer close together, so it is easier to track them.</p><p>The second method is the reduction of leaves in the barrier trees. Local minima with a low energy are generally more stable and have a high probability of being present in the next barrier tree. They are also more interesting than local minima of higher energy. For each leaf that is removed, the one barrier connecting it to the rest of the tree is removed as well. By reducing the number of leaves in the LEPTO and HOK datasets to a maximum of 31 and 66 leaves per tree, the total number of tree vertices was reduced to 2409 and 5875 respectively. The number of supergraph vertices was reduced to 732 and 2528, so again almost two third of the tree vertices have been identified as redundant. This preprocessing method removed substantially more edges than vertices, and in the LEPTO and HOK datasets the number of edges divided by the number of vertices decreased to 1.50 and 1.44 respectively, which greatly improved the supergraph layout. There were a lot less edge crossings and only a few long edges. This directly resulted in a better layout of the barrier trees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSION AND FUTURE WORK</head><p>We showed that it is possible to generate readable layouts for sequences of barrier trees using the Foresight Layout with Tolerance algorithm. For larger datasets, preprocessing may have to be applied to the sequence. While reducing barriers decreases the height of the supergraph layout, a reduction of leaves decreases the width and greatly improves the perceived quality of the layout.</p><p>From the viewpoint of folding landscapes, often only a small number of leaves are of interest. These leaves and their history can be highlighted using colors. The layout of the single trees may be combined with additional information. The simulation of the folding process during the growing of the molecule under various temperatures and growing rates results in distribution functions for local minima. Because the animation of the barrier trees preserves the orthogonal ordering, annotating the barrier tree leaves with the density of the corresponding structure configurations preserves the mental map for the annotations. The change in the densities can be additionally indicated by a flow of liquid along the tree edges. Methods that combine tree layout and additional information are currently investigated.</p><p>The current methods to generate the animation leave room for further improvements. Different strategies for edge removal during the postprocessing of the supergraph construction can result in an improved layout, because fewer edges generally result in fewer edge crossings. Rather than overgenerating the edges of the supergraph and reducing it afterwards, a more constructive method could be proposed. In this article we did not pay much attention to local improvement of the subgraph layout. Especially in larger datasets this would be beneficial, because each subgraph only uses a small part of the drawing area and requires high resolution. A local improvement strategy based on a force-directed strategy is currently being implemented.</p><p>The constructed supergraph is a static visualization of the whole sequence, and presentation forms other than an animation, may be investigated. One idea is synthesizing a 2D landscape from all barrier trees, where the folding process is visualized as a walk. Terminator/anti-terminators are small RNA structure elements occurring in bacterial messenger RNAs (mRNAs) that modulate the translation of mRNA into a protein. They are switch-like elements that can form alternative structures with drastically different physiological function. In one state, the mRNA is translated and protein is produced, while the alternative RNA conformation suppresses this process. The speed of transcription determined, which of these two states in reached. The barrier-tree sequence of the growing RNA element can be used to understand the molecular mechanism for this behavior. The above panels show the leader sequence of the pheS-pheP operon of E. coli <ref type="bibr" target="#b7">[8]</ref>. In the first stages, i.e., when only the 5' (left) part of the molecule has been transcribed, the folding landscape is dominated by a single conformation (visible as the lowest-energy subtree in panels 5 and 6. As the molecule grows, an alternative basin of attraction (left subtree in rows 3 to 5) appears. In the first stages, this class of conformation is less stable than the r.h.s. sub-tree, which is initially populated as it corresponds to the stable conformations in the first folding stages. In the full-size element, however, a different conformation class is thermodynamically favored, which appears as the l.h.s. subtree in the last 7 panels. The important observation is that this class of conformations is reachable only by transversing a sizable energy barrier; hence the transition into this conformation is slow. The speed of translation thus determines, whether the growing chain has sufficient time to switch into the optimal subtree (approximately in panels 13-15), or whether it remains trapped in the r.h.s. subtree, as the barrier height (and hence the necessary transition time) increases with the chain length (panels <ref type="bibr" target="#b16">[17]</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>A very simple landscape and barrier tree</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Examples of elementary landscape and barrier tree changes Each figure shows, how the energy landscape changes, illustrates the barrier trees (only the topology is shown) and the leaf mappings and shows, how the supergraph should look like in the cases: barrier swap (a), leaf merging (b), leaf vanishing (c), leaf creation (d).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 Fig. 3</head><label>33</label><figDesc>illustrates this. Obviously M ⊆ mark G (M) and M = / 0, if and only if mark G (M) = / 0. Unlike the example, M does not have to contain leaves/ sinks only.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>{o}), (r, / 0)} The vertices of T i+1 are categorized as follows: f resh( j), f resh(k), match(l), recomb(m), match(n), f resh(o), matching(p), match f resh(q), matching(r).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>The 20 subgraph layouts of the ATT sequence.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Visualizing related metabolic pathways in two and a half dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Brandes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schreiber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Liotta</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="111" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A framework for dynamic graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Battista</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">G</forename><surname>Tollis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bertolazzi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Computational Geometry</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="261" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dynamic programming algorithm for the density of states of RNA secondary structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cupal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Hofacker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the German Conference on Bioinformatics)</title>
		<editor>R. Hofstädt, T. Lengauer, M. Löffler, and D. Schomburg</editor>
		<meeting>the German Conference on Bioinformatics)</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="page" from="184" to="186" />
		</imprint>
		<respStmt>
			<orgName>Universität Leipzig</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Algorithms for drawing graphs: An annotated bibliography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Di Battista</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">G</forename><surname>Tollis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry: Theory and Applications</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="235" to="282" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Graphs, they are changing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Diehl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Görg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>S. G. Kobourov and M. T. Goodrich</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="volume">2528</biblScope>
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Optimal leaf ordering for two and a half dimensional phylogenetic tree visualisation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schreiber</surname></persName>
		</author>
		<editor>N. Churcher and C. Churcher</editor>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Australian Computer Society</publisher>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="109" to="115" />
		</imprint>
		<respStmt>
			<orgName>CRPIT</orgName>
		</respStmt>
	</monogr>
	<note>InVis.au</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Graphael: Graph animations with evolving layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Erten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Harding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Kobourov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wampler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">V</forename><surname>Yee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Liotta</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="98" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Escherichia coli phenylalanyl-tRNA synthetase operon region : Evidence for an attenuation mechanism. Identification of the gene for the ribosomal protein L20</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fayat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-F</forename><surname>Mayaux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sacerdot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fromant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Springer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grunberg-Manago</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Blanquet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mol. Biol</title>
		<imprint>
			<biblScope unit="volume">171</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="239" to="352" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">RNA folding at elementary step resolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flamm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Fontana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Hofacker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schuster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RNA</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="325" to="338" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Barrier trees of degenerate landscapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flamm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Hofacker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Wolfinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Z. Phys. Chem</title>
		<imprint>
			<biblScope unit="volume">216</biblScope>
			<biblScope unit="page" from="1" to="19" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Graph drawing in motion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Friedrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Graph Algorithms Appl</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="353" to="370" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Dynamic drawing of clustered graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Frishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFO-VIS</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="191" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A hybrid model for drawing dynamic and evolving graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gaertler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>P. Healy and N. S. Nikolov</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3843</biblScope>
			<biblScope unit="page" from="189" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A technique for drawing directed graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-P</forename><surname>Vo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="214" to="230" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Translocation of structured polynucleotides through nanopores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Gerland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bundschuh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hwa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Biology</title>
		<imprint>
			<biblScope unit="page" from="19" to="26" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Dynamic graph drawing of sequences of orthogonal and hierarchical graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Görg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Birke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Diehl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<editor>J. Pach</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">3383</biblScope>
			<biblScope unit="page" from="228" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Graph visualization and navigation in information visualization: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Herman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Melançon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Marshall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">06</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="24" to="43" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing, 11th International Symposium</title>
		<editor>G. Liotta</editor>
		<meeting><address><addrLine>Perugia, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003-09-21" />
			<biblScope unit="volume">2912</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Co-transcriptional folding is encoded within RNA genes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">M</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Miklos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Molecular Biology</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">10</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Layout adjustment and the mental map</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Misue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sugiyama</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="183" to="210" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Drawing dynamic trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Moen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="21" to="28" />
			<date type="published" when="1990-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Incremental layout in dynadag</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Drawing</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="409" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Methods for visual understanding of hierarchical systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sugiyama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tagawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Toda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Systems, Man, and Cybernetics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="109" to="125" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Advances in the theory and practice of graph drawing. Theoretical Computer Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">217</biblScope>
			<biblScope unit="page" from="235" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Exact folding dynamics of RNA secondary structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Wolfinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">A</forename><surname>Svrcek-Seiler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flamm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Hofacker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Phys. A: Math. Gen</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="4731" to="4741" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
