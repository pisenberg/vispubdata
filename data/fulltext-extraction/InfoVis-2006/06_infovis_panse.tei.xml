<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of Geo-spatial Point Sets via Global Shape Transformation and Local Pixel Placement</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">Visualization of Geo-spatial Point Sets via Global Shape Transformation and Local Pixel Placement</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:53+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Geo-spatial Data</term>
					<term>Shape Transformation</term>
					<term>Cartogram</term>
					<term>Pixel Visualization</term>
				</keywords>
			</textClass>
			<abstract>
				<p>In many applications, data is collected and indexed by geo-spatial location. Discovering interesting patterns through visualization is an important way of gaining insight about such data. A previously proposed approach is to apply local placement functions such as PixelMaps that transform the input data set into a solution set that preserves certain constraints while making interesting patterns more obvious and avoid data loss from overplotting. In experience, this family of spatial transformations can reveal fine structures in large point sets, but it is sometimes difficult to relate those structures to basic geographic features such as cities and regional boundaries. Recent information visualization research has addressed other types of transformation functions that make spatially-transformed maps with recognizable shapes. These types of spatial-transformation are called global shape functions. In particular, cartogram-based map distortion has been studied. On the other hand, cartogram-based distortion does not handle point sets readily. In this study, we present a framework that allows the user to specify a global shape function and a local placement function. We combine cartogram-based layout (global shape) with PixelMaps (local placement), obtaining some of the benefits of each toward improved exploration of dense geo-spatial data sets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Many existing and emergent applications collect and reference data by geo-spatial location. Most electronic transactions of daily life, such as purchasing goods by credit card or making phone calls, are recorded for subsequent data analysis. Such event records usually include geographic locations and other attributes. For example, records of credit card transactions specify a purchaser (with an associated name and address), the point of sale, total amount, and possibly items and prices. Telephone call records also include locations of communication endpoints, billing accounts, and sometimes cell phone zones and other geo-coordinates. Census tables are another familiar example that incorporates geographic and statistical attributes. Large data sets, containing millions of records or more, are nearly impossible for people to understand quickly by inspecting the raw data. Visualization is essential to surveying and exploring them. Although geographic and statistical visualization have been studied for many decades, the scale of the data we have now presents new challenges. Displaying large point sets on conventional maps is problematic. Overplotting obscures data points in densely populated areas, while sparsely populated areas waste space and convey scant detailed information. Small clusters are difficult to find -they are not noticeable enough, and are sometimes even occluded by large clusters. <ref type="figure">Figure</ref> 2 illustrates these two problems on a traditional map. A common approach to visualization is to apply local placement functions that transform the input data set into a solution set that preserves certain constraints while making certain patterns more obvious. Previously we proposed a pixel-oriented method called PixelMaps for visualizing large spatial datasets <ref type="bibr" target="#b6">[8]</ref>. This approach combines kernel density-based clustering with a point relocation technique that pre- serves local clusters and avoids overplotting. It assigns each input data point to a unique 2-D screen pixel, trading off absolute and relative position against clustering to achieve pixel coherence. In practice, we noticed that PixelMaps can reveal fine structures, but it may be difficult to relate them to geographic features such as locations of cities or regional boundaries. Recent research has also addressed layout functions that optimize visualization constraints to preserve recognizable features in visualizations. In particular, cartograms are map transformations that preserve shapes and relationships between map regions <ref type="bibr" target="#b2">[3]</ref>. There exist several cartogram algorithms, see <ref type="bibr" target="#b9">[11]</ref> for an overview see. Classic cartograms preserve an input map's topology, while scaling polygonal elements according to an external parameter vector <ref type="bibr" target="#b4">[6]</ref>. Cartograms seem more easily interpreted than PixelMaps, though they do not address overlap problems or pixel coherence. In this study, we demonstrate how PixelMaps and cartogram layout may be composed to meet some of the challenges of large-scale geovisualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PROBLEM DEFINITION</head><p>We consider the display of point sets on maps. A map is represented by a polygonal mesh. The points of the input set are assumed to have one or more associated statistical attributes. Informally, our goal is to show clusters and other relationships between points, determined by both locations and statistical values. By considering just one statistical attribute at a time, we can interpret geo-spatial data sets as points in 3-D: the two geo-spatial dimensions and a third statistical dimension. We note that real-world data set distributions are often highly nonuniform, and data points form readily-identifiable 3-D point clouds. For example, figure 1 shows a household income distribution data set in the 3-D space spanned by longitude, latitude, and median household income. In this paper, we assume that every data point is important and does not replace, summarize, aggregate or overplot individual data points. For example it is of major importance in the detection of fraud where a data point represents a customer or in the analysis of networks where a data points is a server/router. In both cases, conclusions may be invalid if we overplot individual data points. The result could be that we suspect our best customers of fraud and may lose them, or we identify the wrong server as out of order and then shut down the whole network. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Synthesis of Global Shape and Local Placement</head><p>These issues identified in the previous section lead us to propose three constraints for point set visualization: Arbitrarily-distorted maps tend to hide geo-spatial relationships between clusters and other structures. Such visualizations show too much elementary information within an unusual geometry, and can potentially encourage wrong conclusions. The practical benefit of such visualizations seems low <ref type="bibr" target="#b7">[9]</ref>. Global properties can contribute toward accuracy and readability or interpretability of plots of large point sets. Our goal is to (a) represent dense areas so as to preserve some of the important structure of the original geographical space (global shape) and (b) allocate all data points to unique display pixels, even in dense regions (local placement). In other words, we seek to show as many data points as possible, close to their original positions, while determining a good tradeoff between shape distortion and the degree of overlap. We approach this by decomposing the problem into separate map transformation and point relocation problems. The solution assigns each point to a unique pixel location, with the objective of showing all the points, but making it possible to relate features to the original map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Input</head><p>The input is a point set, a global map, and the pixilated display space:</p><formula xml:id="formula_0">• Set of input points XY = xy 0 ,...,xy N−1 xy i = xy x i , xy y i</formula><p>is the original position of each point and S 1 (xy i ),...,S k (xy i ) are its associated statistical parameters. It is likely that we have many data points i and j whose positions are very close or even identical, i.e. xy i ≈ xy j if XY is large (see <ref type="figure" target="#fig_0">figure 1</ref>).</p><formula xml:id="formula_1">• Global Map M = {p 1 ,..., p k }</formula><p>defined by a set of connected simple polygons p 1 ,..., p k (a polygonal mesh)</p><formula xml:id="formula_2">• Display space DS ⊂ Z 2 DS = {0,...,x max − 1} × {0,...,y max − 1},</formula><p>where x max and y max are the extents of the pixel display window.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Output</head><p>The output contains the local placement of the data set XY , the global shape M and the synthesis of the global shape and local placement. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">GLOBAL SHAPE TRANSFORMATION π AND LOCAL PLACE-MENT ρ</head><p>The selection of a global shape function gs and a local placement function l p defines a generic transformation for geo-spatial point set visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Local Placement Function l p</head><p>Local Placement functions play an important role in visualizing large data sets. In general, a local placement function f transforms an input data set A into a solution set B, preserving important characteristics such as position, clustering and, in the case of multidimensional data, shapes of sub-windows. A reference explains further details <ref type="bibr" target="#b3">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Local Point Placement Constraints</head><p>• Overlap Elimination Constraint The highest priority constraint is that all data points be visible, which means assigning each to a unique output pixel position. Formally, this can be expressed</p><formula xml:id="formula_3">i = j ⇒ b i = b j ∀i, j ∈ {1,..</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.,N − 1}</head><p>• Position Preservation Constraint Another constraint is that the output positions should be close to the original ones. That distance can be measured by taking the absolute displacement of points from their original positions, or by finding their displacement relative to each other. The choice between relative and absolute position preservation may depend on the application. The distance function d can be defined by an L m -norm (m = 1 or 2) </p><formula xml:id="formula_4">-absolute position preservation min N−1 i=0 d(a i , b i ) -relative position preservation min N−1 i=0 N−1 j=0,i = j (d(b i , b j ) − d(a i , a j )) 2</formula><formula xml:id="formula_5">d(b i , b j ) = m (b x i − b x j ) m + (b y i − b y j ) m . • Clustering Constraint</formula><formula xml:id="formula_6">min N−1 i=0 b j ∈N H (b i ) d S (S(b i ), S(b j ))</formula><p>This neighborhood function sums up the differences in S between points and their neighbors, and may be defined</p><formula xml:id="formula_7">N H (b i ) = {b j |d(b i , b j ) &lt; ε}.</formula><p>Because S i may have a very non-uniform distribution, it may also be appropriate to apply non-linear scaling to S before computing distances d S .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Local Placement and PixelMaps</head><p>The local placement ρ can be seen as the yield of a local placement function l p that takes an input point set XY to unique positions (while fulfilling the local placement constraints defined above). Formally, we can express l p as follows:</p><formula xml:id="formula_8">l p : Point → Point with ρ(XY ) = l p(XY, π(XY, M))</formula><p>In this study, we focus on PixelMaps because they are intended for large data sets. PixelMaps assign input points to unique display pixels, mapping them to highlight clusters and avoid data loss from overplotting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Global Shape Function gs</head><p>Recent research has contributed new global shape methods for information visualization on maps. These methods optimize properties such as stability, preservation of ordering, and aspect ratio of shapes (see work on TreeMaps [4] for further readings). We define a global shape function π as follows. The input to the shape function π is a vector of k non-negative real numbers (l 1 ,...,l k ), and the output is a corresponding display space partitions (p 1 ,..., p k ) where Area(p i ) = l i ∀i ∈ 1,...,k . Good choices of π scale well to show large data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Global Shape Properties</head><p>PixelMaps avoid overplotting and the consequent loss of interesting patterns and other information. As mentioned, PixelMap transformations on typical land-covering maps often exhibit unwanted artifacts in dense areas. Potentially, pre-distortion of map regions to better fit 3-D point clouds to display space would reduce overlap without such drawbacks. The challenge is to find a layout function that preserves recognizable shapes of the input map, while reducing pixel overlap. Note that map distortion by itself does not preclude overplotting, so local placement methods are still needed. On the other hand, if we choose an arbitrary map distortion that is sufficient to avoid all pixel overlaps, it may be difficult for humans to easily comprehend the result (compare examples in references <ref type="bibr" target="#b7">[9]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Global Shape and Cartograms</head><p>The global shape π can be seen as the result of a global shape function gs applied to an input set XY , taking it to a new set XY of positions on the input map M. In this study, we focus on cartograms because they are intended to maintain recognizable global shapes in distortions of geo-spatial maps. In particular, we use the CartoDraw framework as the global shape function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Generic Framework</head><p>The selection of a global shape function gs and a local placement function l p defines a generic transformation for geo-spatial point set visualization. If we do not take shape into account, and allow only local point placement, we get a classical PixelMap visualization. We can express PixelMap PixelMap(XY, M) visualizations as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PixelMap(XY ) =l p(gs(XY, M)) gs(XY, M) =identity(XY, M)</head><p>A simple dot plot function DotPlot(XY, M) that handles neither global shape nor local placement and can be expressed as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DotPlot(XY, M) =l p(gs(XY, M)) gs(XY, M) = l p(XY, M) =identity(XY, M)</head><p>If we do not handle point set transformation, then we get classical cartogram visualizations. We can express cartogram visualizations Carto(XY, M) as follows:</p><formula xml:id="formula_9">Carto(M) =l p(gs(XY, M))</formula><p>XY, l p = / 0</p><p>The synthesis of both methods can be expressed as</p><formula xml:id="formula_10">π(XY, M) =gs(XY, M) ρ(XY, π(XY, M)) =l p(XY, π(XY, M))</formula><p>Obviously this framework encodes a vast range of possible geospatial visualization methods. In this study, gs is a cartogram transformation and l p is the PixelMap placement function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">SYNTHESIS OF CARTOGRAMS AND PIXELMAPS</head><p>Now we can give a detailed definition of the proposed algorithm. The overall approach is to compute a global shape using CartoDraw or RecMap, then place the data points into the global shape using Pix-elMap.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">CartoDraw</head><p>The CartoDraw heuristic <ref type="bibr" target="#b4">[6]</ref> incrementally repositions a map's vertices along a series of scan lines. A scan line is an arbitrary line segment. A scan line defines a set of scan sections orthogonal to the scan line, where the map's polygons are intersected by the scan line. For each section, a target scaling factor is determined according to the area error factors of the corresponding polygon. In each step of the heuristic, a scan line and scan sections are determined. Vertices are then repositioned according to the scaling factors and distances to the scan line. The repositioning may be parallel or orthogonal to the scan lines. If the shape error introduced by applying a scan line exceeds some threshold, the repositioning of its candidate vertices is discarded. To improve convergence toward a solution, scan lines should be applied to dense map regions. A simple approach to scan line generation is to use horizontal and vertical line segments positioned on a regular grid. Significantly better results, though, can be obtained with manual scan line placement guided by the shape of the input polygons and the local potential for improvement. Note that the incremental repositioning of vertices per scan line processing step is intentionally kept small, compared with the expected change in area. This means the same scan line may need to be applied many times to make large adjustments in a given part of the map. <ref type="figure" target="#fig_5">Figure 4(a)</ref> is an example. As an alternative to generation of cartograms through scanlines on a regular grid, CartoDraw can also compute cartograms iteratively through a modified medial axes transformation <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b8">10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">RecMap</head><p>Contiguous cartograms are made with the objective of minimizing the error in desired area while maintaining the input map's topology and preserving the shapes of its faces. Nevertheless, there exist combinations of maps and input parameter values such that it is impossible to eliminate area error <ref type="bibr" target="#b4">[6]</ref>. Also, despite the attempt to preserve shapes, some are necessarily distorted, and the resulting irregular shapes may be difficult to find and to compare with each other. As an alternative to contiguous cartograms, RecMap <ref type="bibr" target="#b1">[2]</ref> approximates familiar land covering map regions by rectangles. The areas of its rectangles are exactly proportional to given statistical values. To support the understanding of information represented by a cartogram, RecMap places the rectangles close to their original positions, and seeks to preserve their adjacencies. The RecMap construction algorithm works as follow. In the initialization step, we choose a specific polygon, called the core polygon, to be the center of the layout or cartogram. Then, in the main step, we construct a sequence of partial layouts or partial cartograms, i.e. starting with the core polygon, the remaining n − 1 polygons are placed around </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">PixelMap Placement</head><p>The PixelMap algorithm runs in three phases. First, it performs an array-based clustering of the input points, partitioning them into a fixed number of bins based on a statistical attribute. The number of bins depends on the application scenario. Second, a point placement algorithm seeks to place all cluster elements at free positions near cluster centroids, without overwriting alreadyoccupied pixels. To solve the pixel coherence problem and make small clusters visible, all cluster members are placed close to their centroids. This step is performed one cluster at a time, starting with the smallest. Small clusters need the fewest free positions, and in practice can often be placed optimally. If data points cannot be placed without overwriting already occupied pixels, the placement algorithm searches for another free region near the centroid where most of the data points can be placed. Finally, the placement algorithm continues with the smallest of the non-cluster bins, assigning the data points to free pixels. <ref type="figure" target="#fig_4">Figure 3</ref> shows a sketch of the placement step. <ref type="figure" target="#fig_4">Figure 3(b)</ref> is an example from the Manhattan, New York area. The red-blue bipolar colormap encodes income classes (blue is low). Color saturation encodes the number of class members. The color usage described above can be seen in figure 3(a).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Synthesis Algorithm</head><p>The synthesis (algorithm 1) has the following steps.</p><p>• Allocation and Scaling • Output to the screen space using WALDO <ref type="bibr" target="#b7">[9]</ref> In the following we describe these steps in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.5</head><p>Step 1: Allocation and Scaling 4.5.1 Step 1.1: Find Global Shape π(M)</p><p>First, we approximate the overall density λ in the two geographical dimensions (a x i , a y i ) by measuring the local density λ (r) in each map region r. The approximated overall density λ (r) is a second order property that identifies regional, or neighborhood patterns within the dense point distribution. The potential benefit is to use them in the identification and visualization of local patterns in the placement step. In our setting, we can efficiently approximate λ (r) by counting the number of data points in each map region r. This can be done with a simple point-in-polygon test, or a more efficient data structure to search planar subdivisions. Then, we scale the map's regions to help fit dense, non-uniformly distributed point sets to unique positions. The idea is scale each region so its area is proportional to its number of data points. Sparse regions will shrink, and dense areas will expand to enable point assignment with pixel coherence. The use of local densities λ (r) and CartoDraw <ref type="bibr" target="#b5">[7]</ref> enables the identification of location-based point patterns. The next step describes how PixelMap uses the global shape π(M).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.2">Step 1.2: Mapping to New Coordinates</head><p>Next, all data points within the original regions of M are relocated to new positions in the global shape π(M). We apply bilinear filtering, a technique previously studied to make photorealistic images with texture maps. Our bilinear filter b f maps a data point within a map region r to a corresponding point on π <ref type="figure">(M(r)</ref>). This is applied to each data point of each region a r i ∈ hl <ref type="bibr">[r]</ref>. we combine the bilinear filter with a member index hl. More specifically, we determine the map region in which the data point is located, and then apply the bilinear filter to the original boundary M(r) and the new boundary π(M(r)). The member index hl can be implemented efficiently as a hash list or as records in a table.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Step 2.1: Cluster and Pixel Placement</head><p>Finally, after rescaling data points to new positions, PixelMap categorizes each point as either an element of a cluster or noise. It then iteratively assigns data points to display space pixels. It processes the points from densest to least dense region. Within regions, it places clusters from smallest to largest <ref type="bibr" target="#b6">[8]</ref>. This yields the final assignment of points to display pixels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Step 2.2: Label Placement</head><p>Text labels are important in readable maps <ref type="bibr" target="#b0">[1]</ref>. We assume labels are text boxes placed with respect to a reference point. (If a reference point is not provided, there are strategies for inferring one, such as taking the centroid of the nearest cluster in the input point space.) Labels are placed on the output map by aligning them to the transformed reference point. For examples, see the figures in the following section. Although we do not deal with the problem of eliminating overlapping labels, this could be handled by applying a standard technique to the transformed labels. In the pixel plots of that paper we scaled the top most pixels of a county by a squar-root function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.8">Step 3: Presentation</head><p>We use our Wide Area Layout Data Observer (WALDO), a pixel-based visual exploration system that combines several relevant interaction techniques, to show the result to the data analyst. WALDO allows a data analyst to adjust visualizations interactively to satisfy data exploration objectives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">APPLICATION EXAMPLES</head><p>Some examples of the synthesis of cartograms and PixelMaps using application data help to illustrate its properties. <ref type="figure" target="#fig_3">Figure 2</ref> shows the United States Year 2000 Median Household Income database. A conventional map has many areas with a high degree of overlap. The output of the synthesis algorithm, see <ref type="figure">figure 5</ref>, shows its advantages. We can see detailed structures in Manhattan area and Los Angeles County not visible in the conventional map. Global shape preservation by cartogram preprocessing enhances visualization of these areas.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Census Demographics Analysis</head><p>The examples are based on U.S. Census Bureau demographics <ref type="bibr">[12]</ref>. These datasets are available for multiple census levels: states, counties, and blocks. For every census block, the total number and locations of households, median income, median gross rent and price index of vacant homes are listed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Median Household Income on USA National Level</head><p>The first examples, <ref type="figure">figure 5 and figure 6</ref>, shows U.S. Year 2000 Median Household Income. The plot shows that New York City and Los Angeles County are areas of high population. The densest regions are allocated enough space to place all data points without occlusion and to show clusters. Some details of the distribution of median incomes can be identified. For example, one can locate features such as Central Park in Manhattan. We observe on the U.S. National Level plot that there are high income clusters on the East Side of Central Park, and in suburbs of Chicago but not its downtown neighborhood. In the San Francisco area we can identify Silicon Valley; the income in this small area is significantly greater than average.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Housing on State Level</head><p>Figures 8 is a view of the State of New York. We can notice high gross rents ($1500-2000 USD per month) in areas of Manhattan and Queens, and low rents in the Bronx and Brooklyn. The gross rent is higher (around $1000 USD) than the rest of the state. Particularly, high income households are found on the east side of Central Park (recognizable as a rectangular void in the plot). The house price index indicates that it is expensive to buy a home in Manhattan, and it is slightly less expensive near Central Park than in the SoHo district (to its south). The example, figure 7, shows the Median Household Income of the State of New York. We observe that there are high income clusters on the East Side of Central Park.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION &amp; FUTURE WORK</head><p>In this study we proposed and demonstrated a method of visualizing large geo-spatial point sets. The method combines a global shape transformation function gs with a local point relocation function l p. Each of these functions can be selected to favor a particular set of constraints and objectives. Our study focused on the composition of cartograms (which reallocate area so as to preserve recognizable shapes) with PixelMaps that handle the assignment of individual points to unique pixels in 2-D screen space, trading off absolute and relative position preservation and clustering to achieve pixel coherence. This composition provides a capability that neither cartograms nor PixelMaps alone provide. Initial experiments show that a synthesis of cartograms with Pix-elMaps offers an improvement over standalone PixelMaps in avoiding artifacts and preserving recognizable features of the input map. The framework of global shape and local placement can be applied to classical infovis techniques. The aim is to solve some of the major problems such as overplotting in parallel coordinates. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Input XY = xy 0 ,...,xy N−1 often exhibits 3-D point clouds even in small real-world examples. This example shows 3000 data points (1%) from the U.S. Year 2000 Median Household Income [12])</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>•</head><label></label><figDesc>Overlap elimination • Preservation of point positions • Clustering of similar values • Preservation of map shapes and their relationships (see section 3.1.1 and section 3.2.1 for more details). In practice, simple heuristic placement of data points on land-covering maps that preserves positions and emphasizes clustering typically also exhibits artifacts, such as spiral effects, especially in dense areas (figure 2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>•</head><label></label><figDesc>Set of points XY = xy 0 ,...,xy N−1 xy i = xy x i , xy y i is the new position of each point and S 1 (xy i ),...,S k (xy i ) are the associated statistical parameters. All data points are visible, which means each is assigned to a unique pixel position. • M = {p 1 ,..., p k } defined by a set of connected simple polygons p 1 ,..., p k (a polygonal mesh) • Synthesis of the global shape transformation DS(XY , M ) = ρ(π(XY, M)) π = gs(XY, M) defines the global shape and ρ = l p(π(XY, M)) provides the local pixel placement.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 2 .</head><label>2</label><figDesc>Traditional map with simple repositioning -This dotplot map shows artifacts, such as spiral effects, especially in dense areas such as Los Angeles County, Cook County and Manhattan. The artifacts are caused by using a simple find next free pixel heuristics on conventional maps. The data set is U.S. Year 2000 Median Household Income [12]. Visualization transformation π(XY, M) = gs(XY, M) = identity(XY, M) and ρ(π(XY, M)) = l p(π(XY, M)) = f ind next f ree pixel(π(XY, M))))</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Formally, we can express gs as follows gs : (Point, Polygon) → Point with π(XY, M) = gs(XY, M) Histogram of eight median household income classes. (b) Pixel placement step, left to right starting with the smallest cluster. Color scale is the same as figure 3(a) Local Placement ρ -PixelMap Placement Heuristic is starting from left to right with the smallest cluster. (New York Median Household Income dataset)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 4 .</head><label>4</label><figDesc>Global Shape π -The graphics display two possible cartogram methods. In these particular visualizations, the areas of each region correspond to the U.S. state census population data. it one after the other until we have found the complete cartogram. An example of RecMap's output can be seen in figure 4(b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Algorithm 1 : 2 // Step 1 : find global shape 3 /-</head><label>1213</label><figDesc>synthesis algorithm input : PointSet XY , DisplaySpace DS, Map M, cartogramMethode cm; output: PointSet XY hashlist hl(M.numberOfRegions(),NULL); 1 array λ (M.numberOfRegions(), 0); / compute statistical value for each map region 4 for each region (r ∈ M) do 5 for each (xy ∈ XY ) =carto(M, λ , cm); 14 // find new coords for each data point 15 XY =b f (M,π(M),hl); 16 // Step 2: find local pixel placement 17 π • f (XY )=PixelMap(XY , DS); 18 // Step 3: output to the user 19 XY =WALDO(π • f (XY ),DS); 20 Find global shape π using cartogram transformation to equalize density across map regions -Find new coordinates of data points a i ∈ A using a bilinear filter • Cluster and Pixel Placement -Find PixelMap placement ρ to position data points as clusters within the cartogram layout</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 5 .Fig. 6 .Fig. 7 .Fig. 8 .</head><label>5678</label><figDesc>Census Demographic Analysis. United States, Year 2000 Median Household Income. π(XY, M) = gs(XY, M) = CartoDraw(XY, M) Census Demographic Analysis -United States, Year 2000 Median Household Income. (π(XY, M) = gs(XY, M) = RecMap(XY, M)) Census Demographic Analysis. New York State, Year 2000 Median Household Income. π(XY, M) = gs(XY, M) = RecMap(XY, M) Census Demographic Analysis. New York State, Year 2000 House Price Index. π(XY, M) = gs(XY, M) = CartoDraw(XY, M) (without labeling). The labeling can be switched off by the user.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>•</head><label></label><figDesc>Christian Panse is now with the Functional Genomics Center -Uni|ETH Zurich, Switzerland, E-mail: cp@fgcz.ethz.ch. • Mike Sips is now with the Max Planck Center for Visual Computing and Communication, Stanford University, USA, E-mail: ms@pixelmap.org • Daniel A. Keim is with University of Konstanz, Germany, E-mail: Daniel.Keim@uni-konstanz.de. • Stephen C. North is with AT&amp;T Research Labs, NJ, USA, E-mail: north@research.att.com.</figDesc><table /><note>Manuscript received 31 March 2006; accepted 1 August 2006; posted online 6 November 2006. For information on obtaining reprints of this article, please send e-mail to: tvcg@computer.org.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>The third constraint involves clustering on one of the statistical attributes S i , i ∈ {0,...,k}. The idea is to reposition data points so that those with high similarity in S i are near each other. In other words, points in the neighborhood of any given data point should have similar values, yielding pixel coherence. Formally, we need to define the neighborhood N H of a data point a i , and a distance function d S on the statistical attribute S.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ACKNOWLEDGMENTS</head><p>The authors thank the anonymous referees for their comments toward the improvement of this report. This work was supported by the Max Planck Center for Visual Computing and Communication.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An empirical study of algorithms for point-feature label placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Christensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Marks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shieber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="203" to="232" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Rectangular Map Approximations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Heilmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Panse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sips</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Recmap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">InfoVis 2004, IEEE Symposium on Information Visualization</title>
		<meeting><address><addrLine>Austin, Texas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-10" />
			<biblScope unit="page" from="33" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Continuous cartogram construction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>House</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Kocmoud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;98: Proceedings of the Conference on Visualization &apos;98</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="197" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Designing pixel-oriented visualization techniques: Theory and applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics (TVCG)</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="59" to="78" />
			<date type="published" when="2000-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Cartodraw: A fast algorithm for generating contiguous cartograms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Panse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics (TVCG)</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="95" to="110" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Medial-Axis-based Cartograms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Panse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="60" to="68" />
			<date type="published" when="2005-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Pixel based visual mining of geo-spatial data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sips</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Panse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics (CAG)</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="327" to="344" />
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visual data mining in large geo-spatial point sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sips</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Panse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Keim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications (CG&amp;A)</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="36" to="44" />
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Shape simplification based on the medial axis transform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Heidrich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;03: Proceedings of the Conference on Visualization &apos;03</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="481" to="488" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Thirty five years of computer cartograms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Tobler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals, Assoc. Am. Geographers</title>
		<imprint>
			<biblScope unit="volume">94</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="58" to="73" />
			<date type="published" when="2004-03" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
