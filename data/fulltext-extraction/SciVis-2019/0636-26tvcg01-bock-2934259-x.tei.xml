<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">OpenSpace: A System for Astrographics</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Bock</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emil</forename><surname>Axelsson</surname></persName>
							<email>emil.axelsson@liu.se</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathas</forename><surname>Costa</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gene</forename><surname>Payne</surname></persName>
							<email>gpayne@sci.utah.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Micah</forename><surname>Acinapura</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivian</forename><surname>Trakinski</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carter</forename><surname>Emmart</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cláudio</forename><surname>Silva</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Hansen</surname></persName>
							<email>hansen@cs.utah.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anders</forename><surname>Ynnerman</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Main</forename><forename type="middle">Openspace</forename><surname>Application</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">are with Linköping University</orgName>
								<orgName type="institution" key="instit2">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">OpenSpace: A System for Astrographics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2019.2934259</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Astrographics</term>
					<term>astronomy</term>
					<term>astrophysics</term>
					<term>system 4.2.5 4.2.3 4.1.4 FITS File Reader Gaia ... 4.1.1 4.3 Navigation 4.4 Property System 4.1.2 Asset System 4.1.3 Session Provenance 4.2.3 AstroCasting 4.2.2 Scripting 4.2.1 Scene Graph User Interface</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Using OpenSpace to depict astronomical phenomenae at different spatial scales. Visualization of the Apollo service module in front of Earth (left), volumetric rendering of a solar wind density simulation in the heliosphere (center), exploring galaxy clusters using data from the Sloan Digital Sky Survey including the missing data due to the shadow of the Milky Way (right).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The night sky has long piqued the imagination of humans and inspired our collective quest for knowledge. From ancient mariners to Galileo to modern day astronomers and astrophysicists, increases in knowledge have led to greater awareness and newly formed questions about the universe around us and our place in it. Visualization has played an enabling role in the development of our perception of the universe by providing tools for understanding and communication of these findings to our peers. This forms the foundation for the field of Astrographics which encompasses the use of visualization for exploration as well as explanation in the space and astronomical domain.</p><p>Despite many efforts to develop software for astrographics, the field is now facing serious challenges in terms of size and complexity of data from observations and simulations, and standard visualization tools are not providing the required capabilities. Additionally, the state-ofthe-art in visualization is progressing very rapidly and it is a challenge for these tools to capitalize on the development of visualization using new methodology and hardware solutions. We are also seeing a rapid confluence of visualization methods traditionally used in exploratory visualization and those used to explain scientific findings <ref type="bibr" target="#b32">[33]</ref>, which opens up new possibilities in science communication as well as enriching the scientific exploration of data.</p><p>In this paper we describe the open source effort, OpenSpace, with the mission to support the use of astrographics in science communication, space exploration, and astronomical research. One of its foundational requirements is the need for multi-platform support and provisioning of tailored tools for usage scenarios ranging from individual desktop systems to planetariums, as well as presentations and collaborative and distributed visualization across multiple sites world-wide.</p><p>The underlying idea behind OpenSpace is to develop and maintain a versatile system that lends itself to rapid development cycles for implementation of new functionality and features, thus shortening the time between scientific discovery and dissemination. While at the same time be robust enough for deployment in research and public use in museums, science centers, planetariums, and class rooms.</p><p>Previous efforts have resulted in extensions to a different planetarium software, Uniview <ref type="bibr" target="#b23">[24]</ref>, but due to the closed nature of proprietary software these extensions were not incorporated into the released version. This leads to the loss of rapid prototyping efforts, which an open source platform helps to mitigate. The open source approach also enables a curated community effort managed by a core team of developers.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Astrographics use cases</head><p>In this section we provide three use cases representing different contexts in which OpenSpace serves as an enabling software system in the field of Astrographics. The cases have been used throughout the development cycles of OpenSpace to define challenges and test solutions in an iterative participatory design process involving the core developer team, student projects, and domain experts in the astronomical sciences as well as in science communication and education.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1.1">Astrographics as a tool in astronomy research</head><p>Data generated through observation and simulation is rapidly growing in size and complexity. A recent example is the use of OpenSpace to visualize data from the Gaia instrument <ref type="bibr" target="#b9">[10]</ref> containing more than 1 billion stars in the Milky way, each with complex attribute data, ( <ref type="figure" target="#fig_1">Figure 2</ref>). Another example is simulation data ranging from MHD simulations of space weather in the heliosphere <ref type="bibr" target="#b7">[8]</ref>  <ref type="figure">(Figure 1</ref>(b) and <ref type="figure" target="#fig_2">Figure 3</ref>) to simulations of galaxy formation at cosmological spatial and temporal scales <ref type="bibr" target="#b8">[9]</ref>. The ambition to support interactive analysis of this data in a consistent representation of the whole universe, providing accurate context for the data, poses challenges in terms of handling of spatio-temporal data in complex scenes using mixed mode rendering of geometry, volumes, and point-based data. Additionally, tailored tools for interaction and navigation must also be available to support the workflow of the domain expert.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1.2">Astrographics in planetariums, exhibits, and classrooms</head><p>One of the core uses of OpenSpace is to support novel visualizations in planetariums and pave the way for new science communication paradigms in these immersive environments. A typical use case is a facilitated exploration of a curated set of astronomical objects and phenomenae <ref type="figure">(Figure 1(b)</ref> and <ref type="figure" target="#fig_1">Figure 2</ref>). This puts demands on rendering quality and speed, as well as use of intuitive visual metaphors to represent these complex and abstract concepts. User-friendly navigation tools that allow for smooth transitions in space and time and selection of objects are needed to support a planetarium presentation. Additionally, the same content can also engage the public in museum settings using display-walls built from multiple monitors and multi-user/multitouch table interfaces <ref type="bibr" target="#b5">[6]</ref>. Here the self explanatory, non-linear, and interactive story telling embedded in the installations becomes a central component in providing a rewarding visitor experience. It is also recognized that space exploration and astronomy are an integral part of school curricula and have served not only as a topic in itself, but also as a carrier of interest for mathematics and physics. The use of OpenSpace, data availability, and technical maturity provides new pedagogical opportunities for students to interactively explore these topics. The use of advanced software solutions in a class room setting do, however, require significant adaptation and integration of learning goals and interaction design principles tailored for educational situations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1.3">Mission visualization for communication and planning</head><p>Visualization is not only used for data visualization in astrographics, but also to visualize the space missions that capture this data. OpenSpace offers the possibility to provide the concurrency and details of spacecraft operations and instrumentation to the audience, as well as to tell stories of current and past space exploration to the general public. For example a recreation of the Apollo missions based on recently captured lunar surface data and historical data records of the missions make it possible to recreate the historical landings on the moon <ref type="figure">(Figure 1(a)</ref>). The same methodology can also serve the purpose of contextualizing spacecraft planning for teams of researchers and developers or indeed enable in-situ visualization of data from instruments on spacecraft <ref type="figure" target="#fig_3">(Figure 4)</ref> creating new opportunities in comprehensive and universal views of observed and simulated data. The use of space mission data calls for support of high precision location of spacecrafts and celestial bodies in space and time and interfaces to a range of data sources provided by space agencies and research institutes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>There are several planetarium vendors that supply software packages for the visualization of the solar system and the universe. One of these is a product from Sciss; Uniview <ref type="bibr" target="#b23">[24]</ref>. Uniview provides an interface to multiple data sources, such as the American Museum of Natural History's Digital Universe catalog. While Uniview grew from a research project, it has since been spun off into a company where  source code access was subsequently curtailed, leading to a closed software package without the ability for users to add completely new functionality. Since one of the goals of OpenSpace is to enable an extension of the capabilities of the system, a closed software package does not meet this goal. Another planetarium vendor supplied package from Evens and Sutherland is Digistar <ref type="bibr" target="#b14">[15]</ref>. Like Uniview, it is a closed software package without the ability for user extension. Skyskan delivers and supports the planetarium software package DigitalSky 2 <ref type="bibr" target="#b28">[29]</ref> that runs on Skyskan's Definiti theater systems. It, too, is a closed system where extensions are built and incorporated by the vendor, though limited capabilities for user-generated scripting is possible.</p><p>WorldWide Telescope <ref type="bibr" target="#b29">[30]</ref> was designed to be a rich virtual observatory for the visualization and sharing of data from major observatories, telescopes, and astronomy institutions. World Wide Telescope was developed by Microsoft Research and is now an open source project managed by the American Astronomical Society. It provides capability for visualizing the solar system, stars, guided tours of the universe, but focussed on presenting the data from Earth's viewpoint.</p><p>Celestia <ref type="bibr" target="#b11">[12]</ref> is an interactive visualization system showing the solar system and objects in the universe. Stellarium <ref type="bibr" target="#b30">[31]</ref> is an open source software in which the user can view the sky in 3D from the surface of any planet and the software provides a star catalog, deep space objects, time control, and the ability to add artificial satellites. Like Gaia Sky and World Wide Telescope, it is primarily a system for astronomy and allows users to add content.</p><p>NASA Eyes <ref type="bibr" target="#b21">[22]</ref> is a suite of applications developed by the Visualization Technology Applications and Development Team at NASA's Jet Propulsion Laboratory and California Institute of Technology. The various applications, which are based on WebGL, provide tools for exploring Earth, the Solar System, Exoplanets, and others. While providing rich content from NASA missions, unlike OpenSpace the Eyes executables are non-extensible applications.</p><p>Gaia Sky <ref type="bibr" target="#b27">[28]</ref> is an open source system designed to visualize and analyze the stars in the Milky Way gathered from the ESA Gaia mission. Currently, it can visualize 1.3 billion stars through the use of a novel, magnitude-space LOD octree data structure. Gaia Sky provides capabilities for visualizing the universe but lacks some of the features of OpenSpace such as globe browsing <ref type="bibr" target="#b3">[4]</ref>, the ability to read and use NASA SPICE kernels for space missions other than Gaia, and the ability to incorporate other data sources, such as volumetric data sets.</p><p>Another software that originated as a scientific collaboration is the CROSSDRIVE project, which focuses on the exploration of surface features on Mars <ref type="bibr" target="#b17">[18]</ref>. The software provides GIS tools to visualize elevation data, ability to define landing ellipses, and inspect volumetric data sets. Additionally, it has the ability to place surface rover models into the virtual terrain. The project is aimed at creating a distributed virtual environment for these rovers using telepresence technology that supports a collaborative decision-making process for scientists and engineers <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b26">27]</ref>. It produced results for three use cases, namely data analysis for Martian atmospheres, characterization of rover landing sites, and rover target selection during its real-time operations. CROSS-DRIVE provides high-resolution surface terrain rendering similar to OpenSpace's globe browsing, but uses the HEALPix map projection format instead <ref type="bibr" target="#b18">[19]</ref>. However, it lacks many of the other features of OpenSpace, such as rendering capabilities for the greater universe, and support for other planetary bodies in the solar system. Unlike OpenSpace, CROSSDRIVE is not open source.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CHALLENGES</head><p>There are several aspects and challenges that need to be addressed when designing and implementing a system for astrographics. Here, we give a summary of the key challenges addressed in the development of the OpenSpace system. Spatial and Temporal Scales Spatial scales range from millimeters on models of spacecrafts to billions of light years reaching out to the end of the universe. As the scales exceed the normal floating point representation, special care needs to be taken to avoid imprecision in rendering and navigation. The time scales of interest are also ranging from seconds in the changes of the solar wind to billions of years in the cosmological perspective. This calls for navigation and interaction aides to identify points of interest for both space and time and enable multiple representations of the same object/phenomenon. Variety of data sources The ability to dynamically load and access different types of data from varying sources is critical to depict past, current, and anticipated events in astrographics rendering. Data may range from raw observation data, such as imagery from satellites or space probes of planetary surfaces and star fields, to derived information originating from observations, such as positions and trajectories of celestial bodies including planets, stars, galaxies, and exoplanets. Moreover, the ability to incorporate simulation data is key for astrographics, for example simulations of solar wind or the simulation of galaxy formation. Trajectory and event data from space missions are necessary for mission planning and presentation. Collaborative Experiences The ability to share sessions between planetariums allows events, such New Horizons Pluto fly-by ( <ref type="figure" target="#fig_3">Figure 4)</ref>, to be shared between planetarium presenters, mission scientists, and the public. At times, it is important for scientists to remotely work together whether they are in different laboratories or in the same building, and an astrographics systems needs to account for this requirement. Flexibility and Robustness Given the wide scope of applications and data sources, a system for astrographics must be easily and dynamically configurable and extensible. This requires effective data management, and support for incorporation of new rendering modules and means of interaction. As OpenSpace is deployed in production at public venues, the demands on reliability and robustness are at the same level as any commercially available software product.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">THE OPENSPACE SYSTEM</head><p>To deal with the myriad of challenges that arise in astrographics, we designed the OpenSpace architecture to be flexible and extensible at multiple levels (Section 4.1). Developers are able to write new Modules (Section 4.1.1) that can implement entirely new features, interaction methods, or rendering techniques. Builders are able to use the Asset system (Section 4.1.3) to combine existing modules created by Developers to create new scenes and visualize new data sets using existing methods. OpenSpace addresses the challenge of supporting a variety of display devices from desktop displays to power walls to planetarium domes (Section 4.1.4). Lastly, Users can utilize existing scenes created by Builders to explore data and use the scripting (Section 4.2.2) and the user interfaces (Section 4.2.5) to manipulate available scenes and either explore the available data self-driven or use it as a presentation tool.</p><p>To enable collaborations, OpenSpace provides the ability of Astrocasting to link together shared sessions for collaborative experiences (Section 4.3). OpenSpace provides for session provenance and easy playback through the recording of scripting, control data, assets, and camera paths (Section 4.4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Architecture</head><p>There are four layers to the architecture of OpenSpace which were influenced by addressing the challenge of flexibility, see <ref type="figure" target="#fig_4">Figure 5</ref>. OpenSpace-Core The OpenSpace-Core software package contains components to manage the rendering, to define multiple orthogonal APIs to support extensibility, and determines the overall application flow. Included in this is support for command line parsing, OpenGL rendering, texture loading, font rendering, defining abstract base classes for the module interface, networking APIs, as well as, support for scripting components (Section 4.2.2), windowing configuration for display (Section 4.1.4), and infrastructure to load scenes at runtime (Section 4.1.3). Additionally, the core provides the scene graph handling (Section 4.1.2), handles user interaction (Section 4.2), and controls the flow of the rendering component. The OpenSpace-Core is written in C++ and is a monolithic subcomponent of the OpenSpace system. Modules Modules in OpenSpace are self-contained packages that provide specialized instances of C++ classes used for rendering and data management, provide scripts to influence the rendering of objects that are defined in a module, and respond to user input. The objects defined in a module are used to initialize scene graph nodes when loading a scene. Modules are described in greater detail in Section 4.1.1. OpenSpace applications The main OpenSpace application uses the OpenSpace-Core, the enabled modules, and the selected windowing framework and creates the actual executable file that is used by builders and users. Moreover, other utility applications use the same libraries to facilitate collaborative experiences (Section 4.3) and to provide command line tools for developers. External applications Through the definition of a network API, it is possible for external applications to communicate and control an OpenSpace session. For example, the OpenSpace user interface based on the Chromium Embedded Framework is using this API to communicate with the main application (Section 4.2.5). The network API allows customized third-party user interfaces to interact with OpenSpace. OpenSpace is combining these four building blocks into a modular architecture with customization that manifests on three levels. First, the software system has modularity at compilation time, where entirely new modules can be added by developers and are enabled and disabled independently. The selection of enabled modules results in an application that has a particular set of functionality, for instance determining whether there is support for volume rendering or not. The selection of enabled modules results in a single compiled program. <ref type="figure" target="#fig_6">Figure 6</ref> shows an overview of the remaining two customization methods available at the start of an OpenSpace session. The scene composition is defined through an asset graph specified by Asset files that determine the content of the underlying scene graph at runtime and determine which of the defined renderable objects is used in a particular instance of OpenSpace. Assets contain descriptions of scene graph nodes and also define scripts to be executed at initialization time to define key bindings, which data to load, determine visual properties, and other runtime attributes (Section 4.1.3). The display system configuration specifies the number of image generators in a rendering cluster, the number of windows per device, and the type of rendering for each window. This flexibility enables the same application to drive a single window on a desktop computer to a multi-pipeline rendering cluster displaying in a planetarium without the need for specialization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Assets</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Display system configuration</head><p>The main scripting language in OpenSpace is Lua, which is a simple, yet powerful language <ref type="bibr" target="#b20">[21]</ref> that is often used as a drop-in scripting language for games <ref type="bibr" target="#b19">[20]</ref>. We chose Lua as the scripting language, as opposed to Python, since it only possesses a reduced number of data structures and a simple syntax, which makes it possible for nonprogrammers to edit scripts that perform efficiently at the same time. OpenSpace provides a large number of Lua functions in a helper library that makes common operations easy for non-programmers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Modules</head><p>Additional functionality is added to OpenSpace through the use of an extensible module system. The usage of distinct, self-contained modules enables a separation of concerns that increases the resilience when distributing modules between developers and to the public. It also allows developers to extend the functionality of OpenSpace while requiring only minimal knowledge of the rest of the system, thus decreasing the effort required to incorporate new functionality. The trade-off is that modules can only perform the set of OpenSpace actions that are defined through the API in the OpenSpace-Core.</p><p>Modules provide this customization by adding additional functionality through an API defined by the OpenSpace-Core. Modules can only have a compile-time dependency on the OpenSpace-Core and other explicitly named modules. In addition, modules are allowed to have dependencies on third-party libraries, as those dependencies would only impact the module itself and other modules that depend on it. One such third-party library is GDAL, the Geospatial Data Abstraction Library <ref type="bibr" target="#b31">[32]</ref>, that is part of the pipeline used to render planetary surfaces and the globe browsing component <ref type="bibr" target="#b3">[4]</ref>. Apart from the explicit dependency between modules, all modules have to be optional and a requirement of OpenSpace is the ability to successfully compile without any modules enabled even though the resulting application would not be able to perform any visualization tasks.</p><p>Modules can combine the definition of new transformation classes, renderable classes, third-party dependencies, and utilization of multiple callbacks throughout the frame rendering exposed by the OpenSpace-Core to perform a large number of possible actions. Modules can provide new Lua functions (Section 4.2.2) that are available for users of OpenSpace. Once registered, these Lua functions are available to be called either though the built-in command line console or through integrated or external graphical user interfaces.</p><p>An example is the Gaia module that contains a Renderable subclass that renders an octree-based subdivision of a large star catalog, such as the Gaia dataset, contains Lua scripts to preprocess the data, and helper classes that are not used by OpenSpace-Core, but simplify the code and can be used by future dependent modules. Another example is the Webbrowser module that includes the Chromium Embedded Framework used to render OpenSpace's user interface (Section 4.2.5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Scene Graph</head><p>While the specification of the scene graph follows commonly used patterns, OpenSpace utilizes the approach presented by <ref type="bibr">Axelsson et al.</ref> to handle the large scale differences that occur in the universe by changing the traversal scheme of the scene graph nodes during the rendering step <ref type="bibr" target="#b2">[3]</ref>. This method is centered around a dynamic traversal strategy that treats the currently selected focus node (Section 4.2.4) as the origin of the transformation traversal. This method achieves high numerical precision for objects that are close to the focus node regardless of their location relative to the global scene graph origin.</p><p>OpenSpace maintains a single scene graph that represents the parent/child relationship of all loaded objects. As with a traditional scene graph, each node has a transformation component that consists of Translation, Rotation, and Scaling subcomponents, each of which are optional. In addition, each scene graph node has an optional Renderable subcomponent that implements an interface for rendering to screen. Each of the Translation, Rotation, Scaling, and Renderable subcomponents is part of the developer API and is specified in concrete modules using a factory pattern. Scene graph nodes that have a Renderable subcomponent are called Render Nodes. If they do not possess the subcomponent they are Internal Nodes that can be used to group transformations for child objects, for example satellites orbiting a co-rotating Earth. In either case, scene graph nodes are used to organize the spatial and logical relationships of all elements in the scene. This also means that if a scene graph node is disabled, all of its children will not be updated or rendered either and thus will only impact the system's performance minimally.</p><p>All scene graph nodes have a unique identifier that is used to identify an individual scene graph node as well as its subcomponents. This identifier is used as part of a URI system to change the rendering parameters of scene graph nodes (Section 4.2.1) as well as to specify the parent/child relationship used to construct the scene graph in the first place. In addition, scene graph nodes can also be tagged with any number of user-defined descriptors to group these in a user interface or provide access to a group of scene graph nodes in scripts, for example setting the scaling factor for all terrestrial planets. <ref type="figure" target="#fig_7">Figure 7</ref> shows an example of the specification for a single scene graph node using the Lua scripting language. When loading a scene, the Lua specification of all scene graph nodes will be used to create their C++ class representation based on the provided names using a factory pattern. In this example, the SpiceRotation is provided by a different module (Space) from the RenderableGlobe (GlobeBrowsing) and do not have any dependency on each other. The SpiceRotation is an example of the transformation classes that are based on the NASA SPICE library <ref type="bibr" target="#b1">[2]</ref>, which is used in the majority of celestial objects and spacecraft in OpenSpace. Another example of a transformation is the TLETranslation which utilizes two-line elements, a common representation of the six Keplerian elements used to describe a closed orbit; a representation that is computationally more efficient than using SPICE and thus used for satellites and space debris.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Asset System</head><p>While the Module system described above provides code customization, it is desirable to provide a flexible means of setting up scenes and settings for non-programmers. This functionality enables user to create content based on new data sets using existing rendering techniques.</p><p>To enable integration of heterogeneous data into the system and to provide a flexible means for setting up scenes and settings, OpenSpace provides a subsystem for declaring modular components of data and configuration. Such components are called Assets and are manifested as Lua scripts that provide methods for its initialization and deinitialization. Assets may declare dependencies towards other assets and thus create a directed acyclic graph that starts with an implicitly generated root asset. Assets can request both local and external resources, which are fetched from the internet. One type of external resource uses a custom server that uses version numbering so that the data sets only need to be downloaded once and are then cached locally. This mechanism enables support for delivering updates to users easily by increasing the locally requested version number and enables forcing a download of the latest data upon start-up regardless of version numbering. This is useful when loading data from services that are continuously updated such as the most current satellite data from CelesTrak <ref type="bibr" target="#b22">[23]</ref>.</p><p>In OpenSpace, a scene is created by initializing the complete acyclic graph of a root level asset and its dependencies recursively. The system guarantees that all dependencies are initialized in topological order and that any resources residing on external servers are downloaded before initialization can begin. As an example, two independent assets consisting of a planet and a spacecraft may both reference a third asset that is responsible for downloading a common set of SPICE kernels. Whenever a new revision of the SPICE kernels is made available, the common reference can be changed, which propagates to the other assets. This increases the reusability of components.</p><p>Assets have access to Lua functions defined by the OpenSpace-Core and the modules. For example, assets may use the Lua functions addSceneGraphNode and globebrowsing.addLayer to create new scene graph nodes or add new virtual textures to a planetary surface respectively, use bindKey to create a new keyboard shortcut that is available during a session, or setPropertyValue to influence the rendering parameters of the system (Section 4.2.1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.4">Simple Graphics Cluster Toolkit</head><p>A major design goal of OpenSpace is to support seamless execution of the same application on a variety of different display devices. This can be achieved through the introduction of an abstract windowing layer that hides the concrete rendering setup, for example whether the scene is rendered stereoscopically, from the rendering engine. In OpenSpace, this is achieved through an API defined by OpenSpace-Core that is implemented by a concrete windowing framework. The default windowing framework included with OpenSpace is the Simple Graphics Cluster Toolkit (SGCT) developed at Linköping University <ref type="bibr" target="#b10">[11]</ref>. It is a layer on top of the widely used GLFW library used to create and manage windows and rendering contexts. SGCT also provides the <ref type="figure">Fig. 8</ref>. A selection of display devices that are supported by OpenSpace use of the Simple Graphics Cluster Toolkit. Regular laptop and desktop systems with arbitrary number of displays (a), large-scale touch tables (b), and planetarium environments (c). In all three cases, the same executable is used with different configuration files to generate the images.</p><p>ability to synchronize data in a clustered environment using a network interface. Additionally, it provides support for performing the necessary computations to generate stereoscopic viewpoints, tiled display walls, as well as many other output rendering formats. SGCT also provides the ability to warp the output, thus enabling the support for non-planar projection methods, such as fisheye projections or spherical mirror projections. These projections are implemented by performing multiple render passes to create the required parts of a cube bounding box. These images are then reprojected as a post-processing step to create the desired output format, which can be a 180 degree fisheye projection, an equirectangular projection or any other custom format. This approach provides great flexibility as new output methods can be added easily.</p><p>In the case of SGCT's use for multi-pipeline display systems, each image generator is running the same OpenSpace application, but is rendering a different viewpoint as defined in the windowing configuration. A master node is used to process user input and modify the underlying state, which is then replicated to all connected image generators.</p><p>This solution makes OpenSpace flexible and solves the challenge of providing a visualization tool for many different presentation venues. This approach follows the "Compile once, run anywhere" paradigm as the system should not be aware of the display type that is used.</p><p>SGCT also provides built-in support for frame locking, which is a essential technique when using a mosaic projector tiling, in which different computers are responsible to render different elements of the mosaic. These setups are very common in power walls or planetarium environments. In those cases, if the timings of the projectors' frame output are not synchronized, tearing can occur on the border between two displays. For professional graphics hardware, hardware synchronization is available which forces the buffer swap to happen at the same time on the graphics driver level. For non-professional hardware, SGCT provides the ability to emulate this using light-weight network packages that are able to perform the same task.</p><p>It is possible to use other windowing frameworks. As an example, OpenSpace has been used with the MinVR windowing framework that has a stronger support for virtual reality hardware than SGCT <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b25">26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Interaction</head><p>A robust and flexible interaction scheme provided by a diverse set of input devices is vital to an effective astrographics tool. OpenSpace also supports a variety of interaction devices, among which are keyboard and mouse, joysticks, and gamepads. Additionally, the OpenSpace-Core defines a flexible API that can be used to add new interaction devices.</p><p>The main interaction facility is provided by the execution of Lua scripts. This defines a single common interface that makes it easy to serialize the user's interaction and thus enable reproducibility and replicability of the input (Section 4.3 and Section 4.4). However, as there is overhead when dealing with executing textual representations of scripts, the camera and global time in OpenSpace are typically handled without the use of the scripting system since these rendering parameters are expected to change potentially every frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Property System</head><p>User-changeable settings in OpenSpace are wrapped in a concept called a Property. Among the elements added in properties are an identifier that is unique to the owner of the property, a user-facing name and description, and a visibility setting that determines whether a property is user-facing, developer-facing, or an advanced feature.</p><p>Properties are implemented as an extension of class member variables and is thus strongly typed. Examples of properties include IntProperty, Vec4Property, TriggerProperty, and StringProperty. A property includes metadata that is used to automatically generate information for the user interfaces and the ability to access the properties from scripts (Section 4.2.2).</p><p>If the property represents a numeric value, there are options for an admissible minimum and maximum value and step value. This metadata is used by the graphical user interface to display the correct type of a component and provide the user with a reasonable interface. Additionally, properties can have views that ought to change the behavior of user interfaces when displaying the properties in a user interface. For example, the Vec4Property has a view option Color that is set by the developer for Vec4Propertys that semantically represent a color and the user interface can use that information to display a color picker instead of individual numeric values. However, the user interface is free to ignore this metadata depending on the use case, for example a developer interface might want to disable all checks about minimum and maximum values.</p><p>Propertys are owned by PropertyOwners, which, in turn, can be owned by other PropertyOwners. This organization leads to a tree structure, providing a unique identifier for each Property, that can be used by scripts to get and set property values. Scene graph nodes and its subcomponents described in Section 4.1.2 are all subclasses of PropertyOwner, thus contributing to this unique identifier.</p><p>In addition to using the property types provided by the OpenSpace-Core, modules can create their own property types that are accessible for classes within that module and its dependent modules. For example, the volume module defines a TransferFunctionProperty that encapsulates a transfer function used by a volume renderer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Scripting</head><p>Scripting is a fundamental aspect of OpenSpace's interaction design. Apart from being the only way to modify Property's from a user interface, scripting also provides access methods to change the scene graph structure, load and unload assets at runtime, defining keyboard shortcuts, change rendering parameters, providing input mapping for interaction devices, provide a programmatic interface to the camera and the time, and much more. One benefit is the achievement of a greater level of flexibility that a full programming language provides; by treating configuration as code, rather than data, it empowers a knowledgeable user to customize an OpenSpace session to a much greater extent. A drawback of this system compared to a more declarative approach is that it impossible to validate configurations before executing them as a script can contain arbitrary code that is executed by OpenSpace at start-up time. Additionally, writing a declarative-style text file for the configuration would be more intuitive for builders that do not have experience using a programming language.</p><p>Modules can create their own script functions either in C++ or as a Lua library that are placed in their own namespace. For the end user, the only visible distinction between scripts defined in the core and module-defined scripts is this namespacing.</p><p>Properties are set through the setPropertyValue Lua function, which requires the property's unique identifier as a parameter. Additionally, the function has support for regular expressions that can match parts of the property's unique identifier (URI). This can be used to edit a large number of property values simultaneously. For example, the script openspace.setPropertyValue('Scene.*.Renderable.Enabled', false) would disable all objects in the scene graph simultaneously.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Network API</head><p>Interoperability with other software systems is important for many astrographics use cases, including integration with other visualization tools and custom user interfaces for installations in exhibitions.</p><p>Based on the desire to support a diverse set of tools and languages, OpenSpace provides a network interface, that can be configured to accept connections from other applications using both TCP sockets and WebSockets. The protocol is based on JSON and the notion of Topics, which are independent communication channels, allowing multiple concurrent and asynchronous requests to the OpenSpace main application. For example, subscribing to a property value can be achieved by initializing a Topic of the type Subscription and specifying the property's unique identifier. Whenever the Property value updates, the client receives a message within that Topic, specifying the new value of the Property. Using a Topic of the type LuaScript, it is possible execute and acquire the return values of custom lua scripts. OpenSpace modules may add additional Topic types to provide additional sub-protocols for interacting with module specific functionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.4">Navigation</head><p>The default interaction mode in OpenSpace is based on the concept of an orbital navigation mode. In this mode, the user designates an arbitrary scene graph node as the Focus Node, which results in all interactions being performed relative to that node. The possible interactions include a circular (orbital) movement around the object, translation along the line connecting the camera and the center of the focus node, a roll rotation around the same connecting axis, and an additional local camera rotation that enables panning movements. The camera model also supports optional friction modes for each of these interaction components that slow down the camera over a period of a few seconds if no continuous interaction is performed.  <ref type="figure">Fig. 9</ref>. The scene graph is populated by instantiating classes provided in Modules. Scene graph objects expose properties, that are changeable through scripting, which in turn is exposed via a Network API. Navigation is controlled directly through input devices or using the Network API.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Scene Graph Property System Scripting</head><p>As the camera position is defined relative to the focus node, it will follow its movements. Otherwise, it would be cumbersome when focusing on a fast moving object, such as Earth in its orbit around the Sun. In addition to the relative position of the camera, OpenSpace also supports an automated co-rotation with the selected focus node if the camera is closer to the node than a user-defined distance threshold. If the distance is below the threshold, the object's rotation will also be applied to the camera, otherwise it will rotate underneath the camera. This enables the user to place the camera on the surface of a planetary body and see the movements of other objects when playing back time.</p><p>All interaction components are automatically scaled exponentially by the distance from the camera to the focus node. The exponential scaling addresses the challenge of large scales that are present in astrographics. For example, when navigating the surface of a planetary body, the user expects the camera to move in the velocity ranges of meters per second, whereas when navigating the Sloan Digital Sky Survey of galaxies, we need to be able to move in the velocity ranges of million light-years per second. The exponential factor and a multiplicative factor, can be changed by the user to customize the desired input sensitivity.</p><p>Modules can define their own interaction methods, such as functionality that specializes the interaction for multi-touch-capable input devices <ref type="bibr" target="#b5">[6]</ref> or devices using accelerometers, such as phones or tablets.</p><p>Temporal Navigation Every object in OpenSpace is using a single unified time provided by the OpenSpace-Core to synchronize data sets in order to help with contextualization. The Delta Time determines the speed at which time advances in the simulation in the units of simulation time wall clock time . The user can interactively change the delta time to inspect events that occur at different timescales, for example seconds in the case of rover motions on Mars, or tens of thousands of years in the case of stellar movement.</p><p>The time in OpenSpace is represented as the number of seconds past the 2000-01-01 epoch and is stored as a double precision floating point number. Although this poses limitations on the achievable possible precision (double machine ε is about 2 • 10 −16 ), this still provides nanosecond accuracy for contemporary data sets. The range of representable numbers in double precision format is ≈ 10 300 years, which is sufficient for astrographics data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.5">User Interface</head><p>The OpenSpace system provides a built-in graphical user interface (GUI) constructed with the Chromium Embedded Framework (CEF), which is a library used to render webpages <ref type="bibr" target="#b15">[16]</ref>. The user interface webpage uses the Facebook React and Redux libraries <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref> for a dynamic and responsive GUI. It is served by a local stand-alone webserver and rendered in OpenSpace in a separate module using CEF. The user interface communicates with the running OpenSpace instance on the local machine using a WebSocket connection <ref type="figure" target="#fig_1">(Section 4.2.3)</ref>.</p><p>Typically, the GUI is rendered on top of the visual output of the OpenSpace scene on the user's desktop. However, it is also possible to decouple the GUI from the OpenSpace instance by using an external browser instead. This is useful if the main rendering window is shown in a planetarium dome and the user interface would clutter the view. Furthermore, it enables access to the GUI from any device with a web browser, such as a tablet or smart phone.</p><p>This system is designed such that the rendered web page is determined by the scene that is loaded. This enables the use of specialized user interfaces for scenes and also enables the rapid prototyping of user interfaces without the need to recompile the OpenSpace application.</p><p>The development of OpenSpace started with a native, intermediatemode graphical user interface using the ImGUI C++ library. OpenSpace migrated to the Chromium Embedded Framework and React/Redux to increase the flexibility that comes with an easily editable user interface that does not require a recompilation and thus enables a faster iteration time. This enables a more rapid prototyping of new interface components. The separation of the underlying rendering component of OpenSpace from the generation of the user interface also reduces the required knowledge about the rendering that an interface designer has to possess in order to create new interface components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Collaborative Experiences / AstroCasting</head><p>One of the major potential benefits of astrographics in general and for OpenSpace in particular is the increase in potential collaborations across geographically distributed locations. There are two kinds of collaborations to be considered.</p><p>First, a domain expert speaker wishing to give a public presentation about their topic of interest using their own data. Instead of presenting to a single venue at a time, and thus limiting the number of people that can participate and learn from the presentation, it would be beneficial to include a greater number of other venues in this presentation. This includes streaming the audio and video feed of the presenter, as well as synchronizing the rendering that each venue is experiencing.</p><p>The second type of collaborative experiences involve groups of scientists that desire to share discovery sessions that include new data sets or new findings. This technique has the potential to increase the efficiency of these sessions as it allows for an immediate dissemination of the data sets. For this to be effective, it is essential to be able to pass session control between the different partners.</p><p>The synchronization of the rendering in OpenSpace is achieved by streaming the state changes to the camera and time, as well as all executed Lua scripts. This approach is superior to streaming video in two ways: 1) the required bandwidth to stream rendered video is much greater than streaming the state of an application like OpenSpace and 2) it is possible to hand-off control of the session to a client site increasing the collaborative aspect of the event.</p><p>A stand-alone server application called Wormhole is serving as the central hub to which individual OpenSpace instances connect. This can be password protected or open to the world. In the presentation case described above, the connecting partners might be planetariums or other public venues, but this also allows users on their own home computer to connect and join the collaborative session remotely. Each joint session has one host at a time and an arbitrary number of peers. All camera movements, time changes, and all Lua scripts that are executed by the host are sent to the Wormhole server and then automatically distributed to the connected peers that will update their own local OpenSpace instance according to their local display setup. This makes it possible to control various display devices such as spherical display devices in planetariums, power walls, warped projections, and home computers at the same time offering tremendous flexibility. If the creator of the joint sessions has enabled shared control, it is possible for a peer, knowing the correct password, to seemlessly assume control over the session becoming the host and continue the exploration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Session Provenance</head><p>We desire the ability to record and replay sessions to foster reproducibility, distribute sessions between planetariums, and address the challenge of collaboration between domain scientists using OpenSpace. While some of these use cases could be solved by recording regular videos of an OpenSpace session, there are other cases when a more elaborate solution is required. For example, it is desirable to be able to replay a session with a different set of configurations or on a different projection system. Furthermore, it is useful to be able to stop the playback, interact with the system, and resume the playback.</p><p>To address these scenarios, OpenSpace contains a subsystem that manages full session provenance. When enabled, the system records the camera position and orientation as well as the current time and delta time each frame. In addition, each executed Lua script is recorded. As described above, Lua scripts are the only way for the user to change the state of the OpenSpace system and, thus, it is guaranteed that this mechanism captures all possible changes during an OpenSpace session which can then be saved to a local file. When the provenance file is later played back, the session will be repeated automatically with exactly the same behavior as during the initial recording.</p><p>Capturing the state of the system has benefits over similar approaches. Capturing individual frames and storing the session as a video would not have the ability to stop the playback and interact with the system a posteriori; capturing the raw mouse and keyboard input would make it cumbersome to redistribute the resulting files to a different display setup, as the input might depend on the type of display and its resolution or the available input modalities and manually executed Lua scripts would be missed. Instead, by capturing the entire provenance, it becomes possible to distribute session files among researchers wishing to collaborate asynchronously or playback planetarium presentations as semi-interactive shows. Additionally, it is also possible to save a distributed collaborative session as described in the previous section to a provenance file that can be stored for prosperity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Performance</head><p>The performance measurements that are reported have been conducted on a 2.9 GHz Intel i9 CPU with an nVidia Geforce 2080 graphics card rendering a 3840×2160 resolution output image and the framerates are averaged over several hundred frames. All rendering parameters, including those which impact performance, are the same used for creating their respective images. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION AND UTILIZATION</head><p>This section discusses how OpenSpace is utilized in the context of the use cases for astrographics described in Section 1.1 and how its design contributes to these usage scenarios. Tool in astronomy research OpenSpace is being used by the Community Coordinated Modeling Center at NASA Goddard to visualize and analyze space weather simulations <ref type="bibr" target="#b7">[8]</ref>. <ref type="figure" target="#fig_2">Figure 3</ref> shows the Bastille day coronal mass ejection visualized using time-varying fieldlines depicting the induced magnetic field and a time-varying volumetric rendering of the plasma density. Additionally, OpenSpace has been used to render the Gaia data set <ref type="bibr" target="#b9">[10]</ref> to a meeting of leading Gaia researchers and was used in a large collaborative session investigating this data <ref type="figure" target="#fig_1">(Figure 2</ref>). Key OpenSpace components supporting these use cases are:</p><p>The Asset system described in Section 4.1.3 that enables the customization at start-up of an OpenSpace session needed to support dynamic data.</p><p>The use of a JSON-based interface for the networking API creates the possibility to use other programming languages, mostly Python and IDL in the case of heliophysics experts, to connect to OpenSpace and provide information over the socket interface.</p><p>The definition of a fixed data format for stellar measurements, in this case the SPECK format, made it possible for a selected number of researchers to provide their own custom data sets on short notice and include these in the collaborative session.</p><p>Tool for interactive planetarium shows OpenSpace has frequently been used for a number of years in an increasing number of planetariums around the world. Among many other topics, this includes presentations of the large scale structure of the Milky Way and universe using the Digital Universe data catalog <ref type="bibr" target="#b0">[1]</ref>. Some of components of OpenSpace enabling this are:</p><p>The Simple Graphics Cluster Toolkit which supports a number of different display systems. The ease of creating SGCT configuration files enabled the installation of OpenSpace on currently 20 informal science institutions around the world. The definition of a common interchange format in SGCT also fostered collaborations with all major planetarium hardware vendors.</p><p>The flexibility of the Asset system and the ability to dynamically load new content which has enabled many of the partners to create assets without the help of the core development team. <ref type="figure" target="#fig_8">Figure 10</ref> shows one result of this flexibility as a visualization of the landing site of Apollo 17.</p><p>The flexible user interface (Section 4.2.5) which makes it possible to expose the software to a greater number of facilitators at planetariums as well as novice users in the general public.</p><p>Tool for mission planning and communication OpenSpace was used in several linked planetariums to show the New Horizons fly-by in real-time <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b6">7]</ref> which was accompanied by descriptions from scientists on the mission team as the fly-by was occurring. The same techniques also enabled the visualization of the Rosetta <ref type="bibr" target="#b4">[5]</ref> and OSIRIS-REx <ref type="bibr" target="#b5">[6]</ref> missions. The enabling OpenSpace features include:</p><p>AstroCasting (Section 4.3), which has enabled a number of successful public presentations that included multiple planetariums, as well as live streams to video streaming services.</p><p>Local recording using the session provenance (Section 4.4) and the play back at a later time which creates the ability to include geographically distributed locations in different time zones.</p><p>Over the last four years, OpenSpace has been used in a large number of public presentations, which included local activities, presentations using the Astrocasting system, as well as productions for video streaming services. Through all these modalities, the system has reached over 500 000 members of the public, showing the impact that open source software can have on exposing these audiences to scientific data. Additionally, there has been an informal session with the Mars 2020 Science Definition Team inspecting CRISM data for the potential landing sites of the Mars 2020 rover. This collaboration was only possible due to the reliance on well-known third-party libraries which acted as a common interface to the mission science team.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">FUTURE WORK</head><p>As with any other long-term developed software system, the development will never reach the point where no more future work is left to be done and OpenSpace is no exception to this. However, from our experience of conducting public presentations in astrographics scenarios, we were able to distill potential additions to a number of features that would have the greatest impact on similar software systems. Offline rendering.</p><p>While OpenSpace is designed first and foremost for real-time usage, there are many situations where the creation of a high-resolution video is desirable. For example, when the required resolutions are not achievable yet in real-time or for producing movies to be shown in a planetarium without the hardware to operate an interactive software. To be able to support this, we are planning to extend the session provenance and rendering components of OpenSpace to be able to export individual frames at high-resolution when playing back a session recording. This technique also requires the extension of the rendering API for custom renderable objects to be able to wait until all available data has been downloaded before creating an image. With this method, the domain expert can record an OpenSpace session at low resolution at interactive frame rates on their own laptop and use the session provenance file to render the same sequence at a higher resolution a posteriori. Dynamic Modules.</p><p>Currently, all modules for a specific OpenSpace application have to be selected at compile time. This poses a limitation on Developers as they need to compile the entirety of all modules, OpenSpace-Core, and the application every time they want to add a new module. To be able to engage a greater number of developers and reduce the time required to add a new module, it would be beneficial to be able to refactor this using a plug-in architecture instead, where modules can be loaded and unloaded at runtime. This entails that developers can create new modules without requiring the source code other than their own module, which would, in turn, improve the efficiency of developing new modules. OpenSpace Content Builder.</p><p>To mitigate the complexity of using the Lua scripting language to specify assets, we are planning to create a graphical software tool that helps Builders to create new assets quickly. By analyzing which modules are currently available for an OpenSpace instance, it is possible to automatically create lists of available classes and provide a graph-based user interface to the user to drag and drop new asset trees and then export these as Lua-formatted assets. In addition to being able to quickly generate new assets, exporting them as Lua also enables the builder to further customize the assets after they have been created to retain the full ability to customize assets. Content database.</p><p>Utilizing the capabilities of a content builder tool, we expect builders all around the world to quickly create a large number of potentially useful assets that they would want to share with other users of OpenSpace. Similar sharing services exist for other software systems, such as Celestia, but using the ability to modify the scene graph at runtime enables OpenSpace to expand on these databases by being able to automatically download an asset and directly integrate it, so that the time between selection of an asset and inclusion in a public presentation would be minimal, furthering the ultimate goal of reducing the time between discovery and presentation. Other domains.</p><p>While OpenSpace was developed for astrographics, the OpenSpace system is flexible. It would be interesting to investigate how this could be applied to other domains with similar visualization challenges, such as molecular biology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSIONS</head><p>In this paper we have presented the OpenSpace system, an open source initiative in the area of interactive astrographics. The ambitious goal for OpenSpace is to serve as a platform for three different but connected areas: 1) Science communication 2) Research in astronomy and space science 3) Research in visualization. The underpinning idea is the confluence of exploratory and explanatory visualization and in particular the use of research data in science communication. We have described typical use cases of the system, each showing how OpenSpace meets the challenging mission of providing interactive visualization in a range of contexts, including planetarium shows, interactive installations at museums and science centers as well as supporting scientific discovery workflows. Over the years a participatory design process has been used in science to solution cycles to meet the challenges posed by interactive astrographics. The system architecture is modular and configurable, allowing developers, scientists, and science communicators to tailor OpenSpace to their needs, import their own data sets and share interactive sessions. The resulting OpenSpace system is a vehicle for the introduction of the next generation of interactive and data driven use of visualization in astronomy and space exploration.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Manuscript received 31</head><label>31</label><figDesc>Mar. 2019; accepted 1 Aug. 2019. Date of publication 16 Aug. 2019; date of current version 20 Oct. 2019. For information on obtaining reprints of this article, please send e-mail to: reprints@ieee.org, and reference the Digital Object Identifier below. Digital Object Identifier no. 10.1109/TVCG.2019.2934259</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>An interactive visualization session with astrophysics domain experts presenting the 1.3 billion stars of the Gaia DR2 data set during the 2018 NYC Gaia Sprint at the Hayden planetarium in New York.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Using OpenSpace as a tool for astronomy research, here in the use case of visualizing a time-varying coronal mass ejection simulation, combining a volumetric rendering and fieldlines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>The New Horizons spacecraft fly-by of Pluto in 2015 at around 20000 km (a) and its fly-by of MU69 (Ultima Thule) at about 6500 km in 2019. Pluto is about 2400 km in diameter, Ultima Thule is 31 km.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>The system architecture is divided into four layers. Arrows denote dependencies and rounded rectangles indicate sections in which the respective subsystems are described in detail. OpenSpace consists of a core component, multiple, each optional, modules which are combined to build an executable application.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>It provides virtual texturing for high-resolution imagery of planetary surfaces and accurate positioning of celestial bodies. Celestia is an open source system released under GPL and was started in 2001. Pre-compiled programs exist for Linux, MacOS, and Windows and are released in irregular cycles (average time between releases 16.5 months since May 2002). The last release occurred in 2011, but development activity recently restarted.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6 .</head><label>6</label><figDesc>Loading of display configuration and the asset graph involves a scripting language (Lua), which enables a simple, yet powerful, runtime configuration of the scene graph.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 .</head><label>7</label><figDesc>Specification of a scene graph node. A unique identifier for each scene graph node is used to explicitly specify the parentage of each node. The flexibility of Lua enables both the explicit definition of scene graph nodes as shown here, but also to create these programmatically.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 10 .</head><label>10</label><figDesc>Visualization of the excursions of the Apollo 17 astronauts using the Lunar Roving Vehicle in the context of satellite imagery of the landing site from Lunar Reconnaissance Orbiter.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Apollo capsule (Figure 1, left): 46 fps. Sloan Digital Sky Survey (Figure 1, right): 67 fps. Coronal Mass Ejection (Figure 3): 55 fps. New Horizons (Figure 4): 81 fps. Apollo 17 Landing site (Figure 10): 47 fps.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was supported by NASA Cooperative Agreement Notice under grant NNX16AB93A, the Knut &amp; Alice Wallenberg Foundation through the WISDOME project, VR grant number 2015-05462, the Swedish e-Science Research Center, the Moore-Sloan Data Science Environment at NYU, NSF awards: CNS-1229185, CCF-1533564, CNS-1544753, CNS-1626098, CNS-1730396, CNS-1828576. The presented software system source code is available at https://github.com/OpenSpace/OpenSpace.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The digital universe guide for partiview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Abbott</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Ancillary Data Services of NASA&apos;s Navigation and Ancillary Information Facility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">H</forename><surname>Acton</surname><genName>Jr</genName></persName>
		</author>
		<idno type="DOI">10.1016/0032-0633(95)00107-7</idno>
	</analytic>
	<monogr>
		<title level="j">Planetary and Space Science</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="70" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dynamic Scene Graph: Enabling Scaling, Positioning, and Navigation in the Universe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Axelsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno>doi: 10. 1111/cgf.13202</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="459" to="468" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Globe Browsing: Contextualized Spatio-Temporal Planetary Surface Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bladin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Axelsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Broberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ljung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2017.2743958</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="802" to="811" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">OpenSpace: Changing the Narrative of Public Disseminations in Astronomical Visualization from What to How</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kuznetsova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno type="DOI">10.1109/MCG.2018.032421653</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications, Special Issue -Applied Vis</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">OpenSpace: Bringing NASA Missions to the Public</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno type="DOI">10.1109/MCG.2018.053491735</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="112" to="118" />
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">OpenSpace: Public Dissemination of Space Mission Profiles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Marcinkowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kilby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno type="DOI">10.1109/SciVis.2015.7429503</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Scientific Visualization Conference (Poster)</title>
		<meeting>the Scientific Visualization Conference (Poster)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="141" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visual Verification of Space Weather Ensemble Simulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pembroke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Mays</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Rastaetter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ropinski</surname></persName>
		</author>
		<idno type="DOI">10.1109/SciVis.2015.7429487</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Scientific Visualization Conference</title>
		<meeting>the Scientific Visualization Conference</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Resolving cosmic structure formation with the Millennium-II Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Boylan-Kolchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Springel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jenkins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lemson</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1365-2966.2009.15191.x</idno>
	</analytic>
	<monogr>
		<title level="j">Monthly Notices of the Royal Astronomical Society</title>
		<imprint>
			<biblScope unit="volume">398</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1150" to="1164" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Gaia data release 2-summary of the contents and survey properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vallenari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Prusti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>De Bruijne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Babusiaux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bailer-Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Biermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Evans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Eyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jansen</surname></persName>
		</author>
		<idno type="DOI">10.1051/0004-6361/201833051</idno>
	</analytic>
	<monogr>
		<title level="j">Astronomy &amp; Astrophysics</title>
		<imprint>
			<biblScope unit="volume">616</biblScope>
			<date type="published" when="2018" />
			<publisher>A1</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C-Research</forename></persName>
		</author>
		<ptr target="http://sgct.itn.liu.se/" />
		<title level="m">Simple Graphics Cluster Toolkit</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Celestia -real-time 3D visualization of space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Celestia</forename></persName>
		</author>
		<ptr target="https://celestia.space/" />
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Community</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>React</surname></persName>
		</author>
		<ptr target="https://reactjs.org/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Community</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Redux</surname></persName>
		</author>
		<ptr target="https://redux.js.org/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sutherland</forename><surname>Evans</surname></persName>
		</author>
		<ptr target="https://www.es.com/Digistar/" />
		<title level="m">Digistar Planetarium Software</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Framework</surname></persName>
		</author>
		<ptr target="https://github.com/chromiumembedded/cef" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A collaborative workspace architecture for strengthening collaboration among space scientists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fernando</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wolff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dodiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Engelke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gerndt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE Aerospace Conference</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Collaborative Rover Operations and Planetary Science Analysis System based on Distributed Remote and Interactive Virtual Environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gerndt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Final Publishable Summary Report</title>
		<imprint>
			<biblScope unit="page">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Healpix: a framework for high-resolution discretization and fast analysis of data distributed on the sphere</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Gorski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hivon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Banday</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Wandelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">K</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reinecke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bartelmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Astrophysical Journal</title>
		<imprint>
			<biblScope unit="volume">622</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">759</biblScope>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Game Programming with Python, Lua, and Ruby</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gutschmidt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Premier Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Lua -An extensible extension language. Software: Practice and Experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ierusalimschy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">H</forename><surname>De Figueiredo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Filho</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="635" to="652" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jpl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nasa</surname></persName>
		</author>
		<ptr target="https://eyes.jpl.nasa.gov" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kelso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Celestrak</surname></persName>
		</author>
		<ptr target="https://celestrak.com/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Uniview -Visualizing the Universe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Klashed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hemingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<idno type="DOI">10.2312/ega.20101005</idno>
	</analytic>
	<monogr>
		<title level="m">Eurographics -Areas Papers. Eurographics Association</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Minvr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Minvr</surname></persName>
		</author>
		<ptr target="https://github.com/MinVR/MinVR" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Developing virtual reality visualizations for unsteady flow analysis of dinosaur track formation using scientic sketching. Transactions on Visualization and Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Novotny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Turner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gatesy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Drury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Falkingham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laidlaw</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="2145" to="2154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Collaborative telepresence workspaces for space operation and science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dodiya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wolff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Fairchild</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fernando</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Virtual Reality</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="275" to="276" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Gaia Sky: Navigating the Gaia Catalog</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sagristà</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sadlo</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2018.2864508</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1070" to="1079" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">DigitalSky 2 Software for Definiti Theaters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Skyskan</surname></persName>
		</author>
		<ptr target="https://www.skyskan.com/products/ds" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">A</forename></persName>
		</author>
		<ptr target="http://www.worldwidetelescope.org/home" />
	</analytic>
	<monogr>
		<title level="j">Society. World Wide Telescope</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title/>
		<ptr target="https://stellarium.org/" />
	</analytic>
	<monogr>
		<title level="j">Stellarium. Stellarium Astronomy Software</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The Geospatial Data Abstraction Library</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Warmerdam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Open Source Approaches in Spatial Data Handling</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="87" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Exploranation: A new science communication paradigm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ynnerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Löwgren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Tibell</surname></persName>
		</author>
		<idno type="DOI">10.1109/MCG.2018.032421649</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="13" to="20" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
