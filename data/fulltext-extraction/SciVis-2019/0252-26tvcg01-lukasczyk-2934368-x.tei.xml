<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Dynamic Nested Tracking Graphs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonas</forename><surname>Lukasczyk</surname></persName>
							<email>lukasczyk@cs.uni-kl.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Garth</surname></persName>
							<email>garth@cs.uni-kl.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heike</forename><surname>Leitte</surname></persName>
							<email>leitte@cs.uni-kl.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gunther</forename><surname>Weber</surname></persName>
							<email>ghweber@lbl.gov</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Biedert</surname></persName>
							<email>tbiedert@nvidia.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ross</forename><surname>Maciejewski</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Technische Universit√§t Kaiserslautern</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Davis</orgName>
								<orgName type="laboratory">Lawrence Berkeley National Laboratory and University of California</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Arizona State University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Dynamic Nested Tracking Graphs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2019.2934368</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Topological Data Analysis</term>
					<term>Nested Tracking Graphs</term>
					<term>Image Databases</term>
					<term>Feature Tracking</term>
					<term>Post Hoc Visual Analytics</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. The topology-based visual analytics framework supports the feature-centered navigation of Cinema databases consisting of image and analysis products generated during large-scale simulation runs, where numerous features are organized into a manageable amount of hierarchical groups that can be explored in a level-of-detail approach. Here, the interface shows an ensemble member of the viscous finger dataset, where colors encode individual fingers for salt concentration level 30. The prime interaction device of the framework is a nested tracking graph (NTG) that simultaneously displays the temporal evolution of superlevel set components for multiple levels (bottom). The NTG is used to navigate through time and retrieve component images from the database (top left), whereas the split tree (top center) and persistence diagram (top right) support the user in selecting important levels and filter criteria.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>In many applications, interesting features can be characterized via superlevel set components-i.e., connected areas within scalar fields that exceed a given threshold (level). Examples include highly turbulent regions in flow fields (vortices), areas in combustion simulations above a fuel consumption rate threshold (burning regions), and parts of the universe exceeding a certain dark matter density (halos). Large-scale simulations that model such physical processes pose additional challenges to the already complex task of feature identification, tracking, and visualization. Specifically, it is often infeasible to write every simulation state to disk due to bandwidth and disk space constrains. These limitations necessitate in situ algorithms that store the least amount of information needed to still support flexible post hoc analysis; including the capability to select, filter, track, and render features. Additionally, visual analytic interfaces for massive amounts of features require level-of-detail techniques that intelligently organize features in groups.</p><p>This work describes an approach that addresses these issues by combining and extending so-called Cinema databases <ref type="bibr" target="#b1">[2]</ref> (for in situ database generation) and nested tracking graphs (NTGs) <ref type="bibr" target="#b18">[19]</ref> (for post hoc database exploration). A NTG consists of layers of common tracking graphs, where the branches (tracks) of a layer visualize the evolution of individual superlevel set components for a fixed level, and branches of different layers are drawn inside each other based on the nesting hierarchy of the components <ref type="figure">(Fig. 1)</ref>. The presented approach is based  <ref type="figure">Fig. 2</ref>. Processing pipeline of the presented approach that consisits of the in situ database generation and the post hoc database exploration. During simulation runtime, the approach derives for each timestep the split tree and its associated domain segmentation to compute tracking information, images of feature groups, and refined split trees, which are stored in a Cinema database. During post hoc analysis, the database elements are used to dynamically compute nested tracking graphs, composite 3D views of feature groups, and to visualize the split trees and their corresponding persistence diagrams, which are all in turn integrated in a feature-centered visual analytics framework to effectively explore the underlying simulation.</p><p>on the fact that superlevel set components merge as the level decreases, and therefore lower-level branches of the NTG automatically bundle higher-level branches. Thus, NTGs can be used to control the maximum number of visible branch bundles that represent feature groups. This hierarchical decomposition is also used during database generation to store images of these groups instead of individual components, which reduces the amount of stored information while still supporting flexible post hoc analysis via linking and brushing. This work also describes a novel graph operation-based NTG algorithm (GO-NTG) that efficiently computes NTGs post hoc based on topological abstractions that are derived and stored at simulation runtime. Combining these contributions yields a scalable methodology for effective post hoc analysis of simulations containing numerous features. To summarize, the contributions of this work are:</p><p>A graph operation-based NTG algorithm (GO-NTG);</p><p>The topology-based generation and navigation of Cinema databases; A scalable visual analytics framework that enables the post hoc analysis of large-scale simulations with numerous features; and The implementation of all algorithms in the Topology ToolKit <ref type="bibr" target="#b31">[32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>This work primarily builds on the nested tracking graph (NTG) <ref type="bibr" target="#b18">[19]</ref>, a topological abstraction that records the evolution of superlevel set components across time and levels. Each layer of the NTG is a common tracking graph <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b33">34]</ref> that effectively illustrates the evolution of superlevel set components for a single level, where edges of different layers are drawn inside each other based on the nesting hierarchy of their associated components. However, the original algorithm proposed by Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref> requires access to the entire raw simulation data, as it explicitly computes and tracks for each timestep and a predefined set of levels the corresponding component geometries, which does not scale for increasing simulation sizes due to IO constraints <ref type="bibr" target="#b1">[2]</ref>. This work proposes a graph operation-based NTG algorithm (GO-NTG) that computes NTGs based on unaugmented merge trees <ref type="bibr" target="#b6">[7]</ref> and meta edges <ref type="bibr" target="#b33">[34]</ref>, i.e., topological abstractions that are much smaller than the raw simulation data they are derived from. At simulation runtime, the proposed approach first computes the augmented merge tree of the current timestep with the task-parallel algorithm proposed by Gueunet et al. <ref type="bibr" target="#b12">[13]</ref>, then adds so-called meta edges <ref type="bibr" target="#b33">[34]</ref> between vertices of the current and the previous merge tree that record the amount of overlap between the corresponding domain segments, and then stores the unaugmented merge tree together with the meta edges in a Cinema database <ref type="figure">(Fig. 2)</ref>. Specifically, Sect. 3.2.1 describes an adaption of the original meta edges algorithm <ref type="bibr" target="#b33">[34]</ref> that first refines the augmented merge tree into smaller scalar intervals to increase tracking accuracy, and then computes meta edges in parallel. The GO-NTG algorithm then processes these abstractions during post hoc analysis to compute NTGs, where the layout is derived with the algorithm of Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref>. Recently, K√∂pp et al. <ref type="bibr" target="#b15">[16]</ref> proposed an improved layout algorithm that could be used instead.</p><p>Several other authors have examined feature tracking based on topological abstractions. Oesterling et al. <ref type="bibr" target="#b19">[20]</ref> proposed an algorithm to compute the time-varying merge tree by deriving a sequence of local updates that iteratively transform the trees over time. These updates are extremely expensive to compute, which makes them currently unsuitable for interactive systems and large datasets. Recently, Soler et al. <ref type="bibr" target="#b29">[30]</ref> proposed to compute the newly introduced lifted Wasserstein distance between persistence diagrams to derive an optimal matching between critical point pairs. However, matched superlevel set components across different levels are not necessarily nested, which is why their method can not be trivially integrated into the proposed methodology. Yet, extending the method to ensure a nesting hierarchy appears fruitful, and can be addressed in future work. Bremer et al. <ref type="bibr" target="#b4">[5]</ref> analyzed and tracked flame fronts in combustion simulations by computing a four-dimensional space-time Reeb graph that spans the entire data set in time, where edges in this graph correspond to evolving features. This allows them to flexibly change feature parameters without laborious recomputation. In later work, Bremer et al. <ref type="bibr" target="#b5">[6]</ref> computed the overlap of static-threshold features based on a precomputed merge-tree segmentation that could be generated in situ. They combine this with presegmented data to build a visual analysis system.</p><p>The proposed methodology links edges of the NTGs to images of the corresponding component groups <ref type="bibr" target="#b7">[8]</ref> that have been stored during the simulation in a so-called Cinema database <ref type="bibr" target="#b1">[2]</ref>. Originally, these databases are structured image collections that enable the interactive post hoc visual analysis of extreme-scale simulations by simply browsing images that have been stored in situ for a fixed sampling of the parameter space. The current specification <ref type="bibr" target="#b24">[25]</ref> supports any kind of data product; in particular depth images that can be used to composite 3D renderings of the scene post hoc <ref type="bibr" target="#b17">[18]</ref>. Biedert et al. <ref type="bibr" target="#b3">[4]</ref> also investigated the Cinema-inspired idea of combining in situ topological analysis and simplification with compact image-based storage in socalled contour tree depth images, which record at each pixel the list of depth values of individual contours from front to back. The proposed methodology improves on this idea by storing images of feature groups that are determined by a branch decomposition of the merge tree <ref type="bibr" target="#b21">[22]</ref>. This makes it possible to use dynamic nested tracking graphs-whose edges are linked to the branch decompositions-as intelligent interaction devices to effectively navigate the massive databases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHOD</head><p>After introducing the necessary background (Sect. 3.1), this section describes the proposed approach outlined in <ref type="figure">Fig. 2</ref> that derives a database at simulation runtime (Sect. 3.2) which supports flexible post hoc analysis (Sect. 3.3). This includes robust methodologies to identify and track superlevel set components (Sect. 3.2.1), presciently generate images of component groups (Sect. 3.2.2), efficiently compute NTGs in real-time (Sect. 3.3.1), compose images from the database (Sect. 3.3.2), and effectively explore the underlying simulations using the described algorithms in a visual analytics interface (Sect. 3.3.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Background</head><p>This section provides the formal background of nested tracking graphs, split tree segmentations, and persistence-based branch decompositions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Nested Tracking Graphs</head><p>Common tracking graphs are one-dimensional simplicial complexes that effectively illustrate the evolution of superlevel set components for a fixed level. Their vertices represent individual components (white discs of <ref type="figure" target="#fig_0">Fig. 3, top)</ref>, and edges connect vertices of adjacent timesteps iff their corresponding components are deemed related, either via spatial overlap or more advanced feature tracking methods (blue edges in <ref type="figure" target="#fig_0">Fig. 3, top)</ref>. However, tracking graphs are limited to said level, and even slight variations can drastically change their structure, which makes it difficult to compare tracking graphs for different levels. Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref> addressed these issues by proposing a topological abstraction called the nested tracking graph (NTG), which can be used to draw edges of different levels inside each other based on the nesting hierarchy of the components (red edges in <ref type="figure" target="#fig_0">Fig. 3, top)</ref>. Formally, a NTG is a one-dimensional simplicial complex N = V ‚à™ E T ‚à™ E N whose vertices V represent individual components for multiple timesteps and levels (white discs of <ref type="figure" target="#fig_0">Fig. 3, top)</ref>, where the edges E T record the tracking relationship between vertices of the same level at adjacent timesteps (blue edges in <ref type="figure" target="#fig_0">Fig. 3, top)</ref>, and the edges E N record the nesting hierarchy of components at the same timestep for adjacent levels (red edges in <ref type="figure" target="#fig_0">Fig. 3, top)</ref>. The edges E T and E N are also referred to as tracking graphs and nesting trees, respectively. Thus, to compute a NTG, it is necessary to perform the following tasks:</p><p>Task 1: Identify the superlevel set components that are present for a set of levels (the vertices V). Task 2: Compute the nesting hierarchy of the components for adjacent levels (the nesting trees E N ). Task 3: Determine the relationship between components for adjacent timesteps (the tracking graphs E T ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Split Tree Segmentations</head><p>This work describes a graph operation-based NTG algorithm that solves all tasks by processing intermediate graph structures that are computed, at simulation runtime, based on merge tree segmentations, or-more precisely-on split tree segmentations as the proposed method focuses on superlevel sets. <ref type="figure" target="#fig_1">Fig. 4</ref> illustrates a split tree segmentation for one timestep, where scalar data f : K ‚Üí R is given on the vertices of a simply connected simplicial complex K, and values inside higher dimensional simplices are linearly interpolated. A split tree is then a one-dimensional simplicial complex T whose edges represent the evolution of individual superlevel set components during a positive level sweep <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b12">13]</ref>  <ref type="figure" target="#fig_1">(Fig. 4a</ref>). The tree also provides a domain partition œÜ : K ‚Üí T that maps any point of K to a vertex or edge of T <ref type="figure" target="#fig_1">(Fig. 4b)</ref>, and a new scalar field œà : T ‚Üí R that assigns to each point of T the corresponding scalar value of f (y-axis of <ref type="figure" target="#fig_1">Fig. 4, right)</ref>. To simplify notations, u, v ‚àà T denotes a split tree edge such that œà(u) &lt; œà(v), and the second vertex is called the edge representative as it can uniquely identify the edge. A crucial property of T and œà-which is the basis for all following algorithms-is that each individual superlevel set component for a given level l ‚àà R corresponds to a subtree of T where œà ‚â• l, which is referred to as a crown <ref type="figure" target="#fig_1">(Fig. 4c</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Persistence-Based Branch Decompositions</head><p>The simplices of a split tree T can be grouped into branches B by first sorting all maxima by value in descending order, and then growing a new branch from each maximum towards the root until it either reaches the root, or another branch with a larger maximum <ref type="figure" target="#fig_1">(Fig. 4d  right)</ref>. Each resulting branch B ‚àà B creates a so-called persistence pair consisting of the two endpoint vertices u = argmin x‚ààB (œà(x)) and v = argmax x‚ààB (œà(x)), where the corresponding value range œà(v) ‚àí œà(u) is called the persistence of the branch that measures its significance. Branch decompositions are used in the proposed approach to further group branches into a fixed number of bundles by assigning less persistent branches to the most persistent branch they are attached to; for example, to depict components in groups <ref type="figure" target="#fig_1">(Fig. 4d, left)</ref>. a) A persistence-based branch decomposition of T can be used to further group branches into bundles whose components can be depicted in one image (d).</p><formula xml:id="formula_0">A B C D 1 2 0 1 2 3 4 2 3 4 3 0- 1- 2- 3- 4- 5- R S 1 S 2 B S 3 C D A b) A B C D 0- 1- 2- 3- 4- 5- R S 1 S 2 B S 3 C D A c) A B C D 0- 1- 3- 4- 5- 2- R S 1 S 2 B S 3 C D A l d) A B C D B l D l 0- 1- 2- 3- 4- 5- R S 1 S 2 B S 3 C D A l</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">In Situ Database Generation</head><p>During the simulation, the proposed approach computes the complete split tree segmentation S = (T , œÜ , œà) for every timestep with the taskparallel algorithm proposed by Gueunet et al. <ref type="bibr" target="#b12">[13]</ref>, which is implemented in the Topology ToolKit <ref type="bibr" target="#b31">[32]</ref>. Optionally, the scalar field can be simplified by persistence to remove noise <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b32">33]</ref>. Next, the unaugmented split tree T and its scalar function œà are directly stored in a Cinema database to later solve Task 1 and 2 of the NTG computation, whereas S is used to derive in situ so-called meta edges between unaugmented merge trees of adjacent timesteps (Sect. 3.2.1) to efficiently solve Task 3 post hoc. S is also used to store, at simulation runtime, a reduced set of images of component groups <ref type="figure" target="#fig_1">(Fig. 4d</ref>) that can later be composed again into 3D scenes (Sect. 3.2.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Split Tree Segmentation-Based Tracking</head><p>To compute tracking graphs, it is necessary to solve the correspondence problem between superlevel set components of adjacent timesteps.</p><p>During post hoc analysis, it is no longer possible to explicitly compute component geometries and test them for overlap as the raw simulation data is no longer available. In situ algorithms address this problem by precomputing tracking information that can later be used to derive tracking graphs without reprocessing the original data <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b33">34]</ref>. A prime example of such an approach are so-called meta edges <ref type="bibr" target="#b33">[34]</ref> that record the overlap of component groups for discrete level intervals. Alg. 1 is an adaption of this approach that processes two split tree segmentations that are defined on the same simplicial complex K.</p><p>Recall, each segmentation partitions the domain into connected regions, called segments, that correspond to individual split tree edges <ref type="figure" target="#fig_1">(Fig. 4b</ref>), and each superlevel set component is completely contained in the domain segments of its crown <ref type="figure" target="#fig_1">(Fig. 4c</ref>). Alg. 1 uses these facts to collectively track components based on the segments they are contained in. As a direct consequence, the accuracy of the tracking depends on the level intervals of the split tree edges-i.e., the granularity of the segmentation-where the accuracy can be increased by introducing regular vertices on edges to further subdivide segments ( <ref type="figure">Fig. 5</ref>). If two segments of adjacent timesteps overlap at the same vertex v, then it is guaranteed that at least the components for the smallest level among both corresponding intervals-called the base level-intersect at v. Following this principle, Alg. 1 records the amount of spatial overlap between segments via meta edges M that connect the representatives of the corresponding split tree edges (all arrows of <ref type="figure">Fig. 5</ref>). Specifically, Alg. 1 initializes the set of meta edges M as an empty set, and then iterates over each vertex v of the complex K to add edges to M. <ref type="figure">Fig. 5</ref> illustrates this process for one iteration, where each iteration first retrieves the edges of both split trees that correspond to v via the domain segmentation functions œÜ t‚àí1 and œÜ t (split tree edges with white discs in <ref type="figure">Fig. 5</ref>, bottom). As explained earlier, this overlap only guarantees that the superlevel sets for the base level of both intervals intersect at v. Therefore, the algorithm determines the base level b using œà t‚àí1 and œà t , and then traverses both trees towards the root until it finds the so-called base edges whose intervals include b (thin split tree edges in <ref type="figure">Fig. 5, bottom)</ref>. Subsequently, the algorithm adds a meta edge to M between the representatives of the base edges. Furthermore, if components of these edges overlap, then so do the components of the edges towards the root. Thus, the algorithm also synchronously traverses both trees towards the root and adds meta edges to M between the representatives of the visited edges (red edges of <ref type="figure">Fig. 5</ref>). This procedure can additionally record the amount of spatial overlap between segments on the meta edges, and the size of segments on their respective split tree vertices. These properties are used during post hoc analysis to filter and scale NTG edges (Sect. 3.3.3). After all iterations, the set of meta edges M between the two segmentations is complete (all arrows of <ref type="figure">Fig. 5</ref>), and M is stored in the Cinema database.</p><p>This procedure is executed every time the simulation advances one timestep, and it is only necessary to keep the segmentation of the previous and current timestep in memory. Formalizing the algorithm in this fashion makes it also possible to execute iterations in parallel, and subsequently unify the generated meta edges. The stored meta edges are then processed post hoc by the GO-NTG algorithm (Sect. 3.3.1). <ref type="figure">Fig. 5</ref>. Illustration of the segmentation-based tracking approach that processes two split trees (bottom) and their respective domain segmentations (top) of two adjacent timesteps (left and right). From the previous to the current timestep, the maximum B splits into the two maxima D and E, and the maximum A (later labeled C) moves from the left to the right side of the domain. The overlap of segments are recorded by so-called meta edges between their corresponding representatives (all arrows). For example, the dark blue and dark green segments overlap, which justifies the meta edge A ,C . The light blue and the light green segments, however, do not overlap, and thus there exists no meta edge between A and C. The figure also highlights a single iteration of Alg. 1 for a vertex v of the domain. First, the algorithm retrieves for the segments in which v resides the corresponding edges of both split trees (split tree edges with white discs), then determines the corresponding base edges in both trees (thin split tree edges), and finally adds meta edges (red arrows) between the representatives of the base edges and all connected edges towards the root. Note, the complete set of meta edges (red and gray arrows) correctly record the overlap of segments across all intervals. Yet, the accuracy of the matching depends on the resolution of the intervals.</p><formula xml:id="formula_1">t ‚àí 1 t A B 1 2 0 1 2 3 v C D E 1 2 0 1 2 3 2 3 v f 0 0 1 1 2 2 3 3 4 4 R 0 S 0 B B B A A R 1 S 1 S 2 E E D D C C v v</formula><formula xml:id="formula_2">Algorithm 1: ComputeMetaEdges( K, (T t‚àí1 , œÜ t‚àí1 , œà t‚àí1 ), (T t ,œÜ t ,œà t ) ) 1 M ‚Üê / 0 // Set of Meta Edges 2 foreach vertex v ‚àà K do 3 // Get edges that correspond to segments 4 (e t‚àí1 , e t ) ‚Üê GetSegmentEdges( v, T t‚àí1 , œÜ t‚àí1 , T t , œÜ t ) 5</formula><p>// Get edges that include base level</p><formula xml:id="formula_3">6 b ‚Üê min( min œà t‚àí1 (e t‚àí1 ), min œà t (e t ) ) 7 (ƒì t‚àí1 ,ƒì t ) ‚Üê GetBaseEdges( b, T t‚àí1 , œà t‚àí1 , e t‚àí1 , T t , œà t , e t ) 8</formula><p>// Connect all representatives towards the root</p><formula xml:id="formula_4">9 AddMetaGraphEdges( M,ƒì t‚àí1 ,ƒì t , T t‚àí1 , œà t‚àí1 , T t , œà t )</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Image Generation</head><p>To provide an interactive 3D rendered view of the simulation post hoc, the proposed approach also stores, at simulation runtime, images of superlevel set component groups that can later be composed into 3D scenes. The following algorithm is built on top of the original Cinema approach <ref type="bibr" target="#b1">[2]</ref> that generates images for a Cartesian product of the parameter space; e.g., images of contours for three isovalues at every fifth timestep from 20 different camera angles. Database viewers then enable users to browse the structured image stores by selecting interesting parameter combinations from parallel coordinate plots <ref type="bibr" target="#b34">[35]</ref>, by performing queries <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b31">32]</ref>, or by snapping to the closest available camera locations while navigating an emulated 3D view <ref type="bibr" target="#b20">[21]</ref>. It is also possible to approximate the depicted surfaces to enable free camera movement <ref type="bibr" target="#b17">[18]</ref>. However, a limitation of Cinema databases is that the flexibility of the post hoc analysis is limited by the generated images. Thus, if the database does not contain individual feature images, it is not trivially possible to toggle their visibility. Storing an image of each feature is also problematic as this drastically increases the amount of database elements. Therefore, it is necessary to intelligently depict feature groups with common post hoc analysis tasks in mind.</p><p>In the context of tracking superlevel set components in large-scale simulations, analysts should at least be able to toggle the visibility of components that are locally clustered together, and further filter components based on persistence. To this end, the proposed approach partitions components into a predefined number of groups based on a branch decomposition B of the current split tree T t , and a list of persistence intervals. The algorithm then generates images for each component group <ref type="figure" target="#fig_2">(Fig. 6)</ref>. Specifically, the inputs of Alg. 2 are the entire simplicial complex K, its scalar function f , a split tree segmentation (T t , œÜ t , œà t ), a set of camera specifications C, a set of levels L, a sorted list of persistence thresholds P, and the maximum number of component groups n; i.e., each timestep yields at maximum |C| ‚Ä¢ |L| ‚Ä¢ |P| ‚Ä¢ n images. First, the algorithm sorts all branches by persistence in descending order, and then inserts the n most persistent branches into their own new group (line 1-6). Each remaining branch is then inserted into the group that contains the most persistent branch it is attached to (lines 7-11). Note, such a branch and the corresponding group must exist as the branches are processed in sorted order.</p><p>Next, the algorithm iterates over the groups G ‚àà G, and the persistence intervals defined by P, to determine in each iteration the branches B ‚äÜ G ‚àà G inside the current persistence interval (P i , P i+1 ]. Then, the algorithm derives for each level l ‚àà L the set of individual contours X of the current group, i.e., the borders of the superlevel set components. This is done by first determining the branches that include the current level, where each such branch B indicates the existence of an individual superlevel set component <ref type="figure" target="#fig_1">(Fig. 4c)</ref>. To derive the set of simplices K ‚äÜ K that together completely contain the component of B, the algorithm first collects the set of edges T that are connected to B above the current level (the crown of B that exceeds the level), and then retrieves all simplices of K that share at least one vertex with the subtree domain œÜ ‚àí1 (T ). It is necessary to include the tetrahedra adjacent to the subtree domain as they might contain parts of the linearly-interpolated contours.</p><p>Finally, the algorithm renders for all camera angles C a depth image and an ID mask of all group contours, where the depth images are used during post hoc analysis to compose 3D views, and a pixel of the ID mask stores the representative of the split tree edge that corresponds to the depicted contour. The images are then stored in the Cinema database, where they are also associated to the parameters that uniquely identify the images: their group ID, persistence interval, level, and camera angle. To efficiently retrieve during post hoc analysis an image that depicts a specific contour, the algorithm also stores, in line 28, the branch groups G of the current timestep in the Cinema database.</p><p>Note, the image generation is embarrassingly parallel as images for component groups and camera angles can be rendered independently. A limitation of this approach is that the sampling resolution of the parameter space is directly proportional to the resulting image database size. Moreover, the parameter sampling has to be determined beforehand, in which case adequate parameters might be unknown. Algorithm 2:</p><formula xml:id="formula_5">GenerateImages( K, f , T t , œÜ t , œà t , C, L, P, n ) 1 // Get branches sorted by persistence in descending order 2 B ‚Üê ComputeBranchDecomposition( T , œà t )</formula><p>3 // Create groups for the first n most persistent branches</p><formula xml:id="formula_6">4 G ‚Üê / 0 5 for i ‚Üê 0 to n ‚àí 1 do 6 NewGroup( G, B i ) 7 // Add remaining branches to closest group 8 for i ‚Üê n to |B| do 9 B ‚Üê GetMostPersistentAttachedBranch( B, B i , œà t ) 10 G ‚Üê GetGroup( G, B ) 11 AddToGroup( G, B i )</formula><p>12 // Generate group images for all persistence intervals and levels 13 foreach group G ‚àà G do 14 foreach threshold p i ‚àà P where p i = max(P) do 15 // Filter grouped branches by persistence  </p><formula xml:id="formula_7">16 B ‚Üê { B ‚àà G | p i &lt; (max œà t (B) ‚àí min œà t (B)) ‚â§ p i+1 } 17 foreach level l ‚àà L do</formula><formula xml:id="formula_8">min œà t (B) &lt; l ‚â§ max œà t (B) do 21 T ‚Üê GetUpperTreeOfBranch( B, T t , œà t , l ) 22 K ‚Üê { œÉ ‚àà K | œÉ ‚à© œÜ ‚àí1 t (T ) = / 0 } 23 AddContour( X, K , f , l )</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Post Hoc Database Exploration</head><p>This section describes the novel graph operation-based NTG algorithm (Sect. 3.3.1), the image compositing pipeline (Sect. 3.3.2), and the visual analytics framework (Sect. 3.3.3) that all use the generated Cinema database to effectively explore the underlying simulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Dynamic Nested Tracking Graphs</head><p>The core element of the post hoc analysis interface is a NTG that enables users to browse the simulation data across time and levels. Computing the NTG with the original algorithm <ref type="bibr" target="#b18">[19]</ref> would make it necessary to predefine a set of levels, explicitly compute the superlevel set components for those levels, and then test the resulting component geometries for spatial overlaps across time (to determine their evolution) and across levels (to determine their nesting hierarchy). Thus, updating the graph is inefficient and unsuitable for large-scale simulations and in situ use cases. Alg. 3 describes a novel graph operation-based NTG algorithm (GO-NTG) that efficiently solves the three tasks of the NTG computation for a sorted list of adjacent timesteps T , a sorted list of levels L, and the graph structures that have been stored in the Cinema database at simulation runtime: the split trees T , their scalar functions œà, and the meta edges M. First, the algorithm determines the superlevel set components that are present for all timesteps and levels based only on the split trees T and their corresponding scalar fields œà. Given a timestep t ‚àà T and a level l ‚àà L, the algorithm inserts a new vertex into the set V for each edge u, v ‚àà T t whose corresponding level interval includes l, as each such an edge represents an individual superlevel set component (red vertices in <ref type="figure" target="#fig_5">Fig. 7</ref>). In the following, each vertex of V is denoted as v l t to compactly indicate its corresponding timestep t, level l, and edge representative v in the split tree T t .</p><p>The nesting hierarchy E N (red edges in <ref type="figure" target="#fig_5">Fig. 7</ref>) of the computed vertices V follows immediately from the structure of the split trees (black edges in <ref type="figure" target="#fig_5">Fig. 7)</ref>. To identify the connections between vertices at level l i ‚àà L for i &gt; 0 (children) with vertices at level l i‚àí1 ‚àà L (parents), the algorithm simply traverses the tree from each child towards the root until it encounters a parent and then inserts a new edge into E N accordingly. Since the algorithm descends in a rooted tree, there always exists exactly one parent for each child.</p><p>The last task needs to establish the relationships between vertices at the same level for adjacent timesteps t and t + 1. This can be done efficiently via the meta edges M t of timestep t. Specifically, for each two vertices u l t and v l t+1 one can determine if their corresponding segments overlap by checking if M t contains the meta edge u, v . If it does, the algorithm adds the edge u l t , v l t+1 to E T . It is possible to filter tracking graph edges via an overlap threshold, or relax the tracking accuracy by adding edges if there exists an meta edge for a vertex pair further down in the split tree. Such a relaxation enables the tracking of fast moving components whose corresponding segments only overlap for lower levels. The advantage of the proposed algorithm is that such criteria can be chosen post hoc without access to the raw simulation data, and that all its steps can be trivially parallelized. Finally, the NTG is visualized according to the original approach of Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref>, where the width of edges can be linearly interpolated based on the segment sizes stored on the split tree vertices. Algorithm 3:</p><formula xml:id="formula_9">X Y B Z C D A X l 0 A l 1 Y l 1 A l 2 Z l 2 B l 2 D l 3 B l 3 l 0 l 1 l 2 l 3</formula><formula xml:id="formula_10">GO-NTG( T , L, T , œà, M ) 1 V, E N , E T ‚Üê / 0 // Vertices, Nesting Trees, Tracking Graphs 2 // Compute Vertices 3 foreach timestep t ‚àà T do 4 foreach level l ‚àà L do 5 foreach edge u, v ‚àà T t where œà t (u) &lt; l ‚â§ œà t (v) do 6 AddVertex( V, v, l, t ) 7 // Compute Nesting Trees 8 foreach vertex v l t ‚àà V where l = min(L) do 9 AddEdge( E N , v l t , GetParent(v l t , V, T t , œà t ) ) 10 // Compute Tracking Graphs 11 foreach vertex u l t ‚àà V where t = max(T ) do 12 foreach vertex v l t+1 ‚àà V do 13 if u, v ‚àà M t then 14 AddEdge( E T , u l t , v l t+1 ) 15 return V ‚à™ E N ‚à™ E T</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Image Retrieval and Compositing</head><p>To retrieve the image of a component corresponding to a vertex v l t ‚àà V of the NTG for a specific camera angle, one first determines its branch group G ‚àà G t , and then computes the persistence interval of the branch containing the edge represented by the vertex v ‚àà T t (Sect. 3.2.2). All parameters are then used to retrieve the closest available image in the database. <ref type="figure">Fig. 8</ref> illustrates the Depth Image Based Rendering (DIBR) pipeline that composes multiple depth images and ID masks into a single image. To improve spatial perception, the images are shaded based on approximated surface normals and screen space ambient occlusion <ref type="bibr" target="#b23">[24]</ref>, where components are colored based on the ID masks ( <ref type="figure">Fig. 8c-d</ref>). <ref type="figure">Fig. 1</ref> shows all linked views of the post hoc visual analytics framework that enable users to effectively explore the generated Cinema database: a composed 3D scene (top left), a split tree (top center), a persistence diagram (top right), and a nested tracking graph (bottom). User interface (UI) elements that correspond to an individual superlevel set component are consistently colored across all views, i.e., edges of the NTG, images of the components, branches of the split tree, and critical-point pairs of the persistence diagram. The core element of the interface is the NTG that illustrates the evolution of components for multiple levels, whereas the split tree shows their nesting hierarchy for the current timestep, and the persistence diagram shows their significance. The NTG is used to select time intervals, individual timesteps, and specific components, and the split tree and persistence diagram support analysts in choosing appropriate levels and persistence thresholds. The current persistence threshold is drawn as a diagonal red line in the persistence diagram, and levels of the NTG are drawn as horizontal lines in the split tree and persistence diagram, where the line of the currently selected level is also colored red. The 3D view is composed of images that are closest to the current parameter settings, i.e., the closest available database elements for a requested view angle, persistence interval, and selected level. Filtered components or components that do not exists for a selected level are grayed out in all views.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.3">Visual Analytics Framework</head><p>The interface provides three key mechanisms to handle numerous components: 1) before parameter updates the interface indicates the resulting numbers of components, split tree branches, and NTG edges; 2) components can be filtered based on size, persistence, and overlap thresholds; and 3) if numerous components have been chosen for visualization, the interface initially groups them together based on the nesting hierarchies and persistence values to generate a manageable amount of UI elements. Specifically, instead of rendering the entire split tree at once, the interface initially draws only a user-controlled number of the most persistent branches. Analysts then have the option to further expand individual branches, where the number of children is encoded by the width of the parent branch. Similarly, instead of rendering numerous tracks of the NTG for a certain level, these tracks are initially represented by their parent edges at the lower layers, and analysts can interactively toggle their visibility in a level-of-detail approach.</p><p>Layout updates of the graphs are only performed when necessary, or on request. For example, tightening the thresholds filters more components, which results in less NTG edges, split tree branches, and critical point pairs. Instead of updating the graph layouts immediately, the corresponding UI elements are simply removed, so that analysts can easily comprehend the updates without reorienting themselves within a new layout ( <ref type="figure" target="#fig_6">Fig. 9 middle and bottom)</ref>. However, analysts always have the option to recompute the layouts while ignoring the filtered components to generate smoother graphs. The interface also provides visual consistency when a new level is added to the NTG. Specifically, the layout algorithm described by Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref> processes the layers of the NTG individually, and then stacks them in a bottom-up approach. As a consequence, inserting a level does not effect the layers of levels smaller than the new level.</p><p>Overall, the interface enables analysts to follow the history of individual components and component groups, filter them based on various metrics, and explore the simulation in a focus+context approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>This section evaluates the proposed methodology based on three realworld examples. The first case study compares the post hoc tracking algorithm to the explicit approach <ref type="bibr" target="#b18">[19]</ref> by contrasting the resulting graphs for the 2016 scientific visualization contest dataset <ref type="bibr" target="#b13">[14]</ref> (Sect. 4.1). To substantiate the claim that the proposed approach can be used to effectively explore large-scale simulations with numerous components, the other two case studies deal with much larger and more complex datasets-i.e., the simulation ensemble of the 2018 scientific visualization contest <ref type="bibr" target="#b14">[15]</ref>  <ref type="figure" target="#fig_1">(Sect. 4.2)</ref>, and a computational fluid dynamics simulation with thousands of vortex features <ref type="figure" target="#fig_0">(Sect. 4.3)</ref>. NTGs generated with the split tree-based tracking approach, where the bottom graph is filtered by persistence, size, and overlap thresholds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Viscous Fingering</head><p>This case study compares the results of the graph operation-based tracking approach and the original overlap-based algorithm <ref type="bibr" target="#b18">[19]</ref> for the finite pointset method (FPM) simulation ensemble that was provided for the 2016 scientific visualization contest <ref type="bibr" target="#b13">[14]</ref>. This ensemble was generated to explore the process of viscous fingering: an instability phenomenon that occurs at the interface between two mixing fluids of different viscosity, and is prominent in many fields of science and engineeringincluding geology, hydrology, and chromatography. Specifically, the ensemble members model the mixing process of salt solutions inside a water filled cylinder with an infinite salt supply at its top (gray surface in <ref type="figure">Fig. 1)</ref>, where simulations incorporate stochastic effects to model the aleatoric uncertainty inherent in the strongly non-linear mixing process. While the solutions sink down to the bottom of the cylinder, they form characteristic structures with increased salt concentration values, called viscous fingers (colored components in <ref type="figure">Fig. 1</ref>). Fingers can be identified algorithmically by first sampling the salt concentration density of the pointsets on a regular grid and then deriving superlevel set components below the salt supply <ref type="bibr" target="#b16">[17]</ref>. Lukasczyk et al. <ref type="bibr" target="#b18">[19]</ref> demonstrated that NTGs can be used to effectively summarize shared properties of the fingers across different runs, timesteps, and initial parameters. The top and middle row of <ref type="figure" target="#fig_6">Fig. 9</ref> show two NTGs for the same simulation run, where the first graph is derived with the original approach that explicitly computes the overlap of superlevel set components, and the second graph is derived with the graph operation-based algorithm that processes meta edges and split trees. The graphs mostly match, except that the new algorithm adds more edges than the original approach. This is due to the segmentation-based tracking approach, as components inside a segment are collectively tracked based on the largest component <ref type="figure" target="#fig_0">(Sect. 3.2.1)</ref>. Thus, the new algorithm detects at least the same amount of overlaps as the old approach, but also matches components whose volumes not explicitly overlap, which has advantages and disadvantages. For instance, the volumes of a fast moving component might not overlap in time, and therefore the original algorithm identifies the components in each timestep as new emerging features, which is semantically incorrect. However, the corresponding domain segments are likely to overlap since they correspond to the same moving maximum, and therefore the segmentation-based algorithm identifies the components as a single moving feature (thin lines of <ref type="figure" target="#fig_6">Fig. 9</ref>). To increase the accuracy of this matching, it is necessary to choose an appropriate segmentation refinement level during the meta edge generation (Sect. 3.2.1). In all presented experiments, this refinement level was set to the persistence threshold that was used to remove noise, which yielded adequate results. In fact, choosing the refinement level in this way produces the same NTG as the explicit approach for the example shown in <ref type="figure" target="#fig_6">Fig. 9</ref>. The segmentation-based algorithm makes it also possible to interactively restrict or relax tracking criteria by respectively requiring a minimum amount of overlap, or by additionally matching segments that are connected via meta edges further down in trees. For instance, the bottom row of <ref type="figure" target="#fig_6">Fig. 9</ref> shows the NTG of the second row which has been aggressively filtered to reduce clutter.</p><p>The main advantage of the segmentation-based algorithm is that once the meta edges have been computed, the NTG algorithm no longer requires access to the volumetric simulation data. Processing the meta edges and split trees is also significantly faster than explicitly computing superlevel set components and their respective overlaps: deriving NTGs for one ensemble member for the same parameters on the same hardware takes on average ‚àº 6 seconds with the old approach, and ‚àº 0.1 seconds with the new algorithm. NTGs for the following jet and asteroid case studies can still be computed in milliseconds, whereas the explicit approach requires several minutes. This speedup enables analysts to interactively update level, persistence, overlap, and size constraints. To summarize, the post hoc tracking algorithm is capable of tracking even more features than the explicit approach, and enables users to interactively generate and filter NTGs.</p><p>Obviously, an image database for such a small dataset requires far more disc space than the original data ( <ref type="table">Table 1</ref>). In fact, storing images become only beneficial for extremely large datasets, since the primary advantage of an image database is that its size grows proportional to the parameter sampling, independent of the size of the depicted simulation <ref type="bibr" target="#b1">[2]</ref>. This can be observed in all presented experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Asteroid Impacts</head><p>This case study examines an ensemble of extreme-scale simulations that are part of a threat assessment study of asteroid ocean impacts <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b22">23]</ref>, where individual ensemble members correspond to various impact scenarios based on different asteroid sizes, impact angles, and airburst heights. Specifically, each simulation is labeled according to the following convention: the first letter is an ensemble index, the second letter corresponds to the airburst height above sea level (A: None, B: 5km, and C: 10km), the third letter represents the asteroid diameter (1: 100m, 3: 250m, and 5: 500m), and the fourth letter indicates the impact angle (0: 27.4 ‚Ä¢ , 1: 45 ‚Ä¢ , and 2: 60 ‚Ä¢ ). The main objective of the assessment is to explore the relationship between these parameters and the severeness of the tsunami they create upon impact. The following case study will demonstrate that the proposed approach enables analysts to efficiently explore and compare these different impact scenarios.</p><p>The original simulations advance an Eulerian grid that is adaptively refined at significant areas using the XRAGE simulation code <ref type="bibr" target="#b11">[12]</ref>. The simulations compute, among others, a temperature field on a regular grid with either 300 <ref type="bibr" target="#b2">3</ref> or 500 3 vertices. To generate a Cinema database according to the proposed approach, these temperature fields are streamed into an emulated in situ environment that processes each timestep. <ref type="table">Table 1</ref> shows the total computation time and size of analysis and image products on a cluster node with an Intel E5-2640v3 processor (16 cores) and 256GB memory. The stated time measurements include the computation of split tree segmentations <ref type="bibr" target="#b12">[13]</ref>, topological simplifications <ref type="bibr" target="#b32">[33]</ref>, and meta edges. Note, the image generation process is embarrassingly parallel, so the actual image generation time is much lower in practice. The provided image database contains 512 2 depth images and ID masks for 24 camera positions, 6 level values, 2 persistence intervals, and 4 component groups, which enables users to adequately rotate the 3D view and update parameters. Although the size of simulation yA31 is almost five times bigger on the 500 3 grid than on the 300 3 grid, their respective image databases are roughly the same size since components are depicted in a fixed number of groups. This demonstrates that the database size is decoupled from the size of the underlying data. Thus, the proposed approach can scale to very large data sizes with an acceptable trade-off in post hoc flexibility. <ref type="figure" target="#fig_7">Fig. 10</ref> shows for timestep 108 of simulation run yA31 (500 3 ) the split tree (bottom right), a composited 3D view (bottom left), and an NTG that is once colored by layer (top), and once colored by individual components for level 0.2eV (middle). Here, the NTG clearly illustrates that at the time of impact the entire region around the impact site is a single burning volume that disperses over time into four sub volumes (blue, red, orange, and green UI elements). The fact that NTG layers intelligently partition components into groups enables analysts to explore different levels and the corresponding components by expanding edges of the split tree and NTG. With this focus+context approach analysts can select individual components and their respective tracks for detailed examination, and further filter the graph based on size, overlap, and persistence thresholds, where the split tree and persistence diagram indicate important parameters. Based on a component selection, the interface then composes images from the Cinema database into a 3D rendering of the simulation. Note, although the database contains only two persistence intervals and therefore the visibility of some components can not be toggled off, they can at least be colored gray to indicate that they are filtered. All interface elements together guide users while examining specific components or component groups; e.g., the split tree indicates that the green component contains the global maximum, the NTG shows its temporal evolution, and the 3D view shows the component in the physical domain. The low overhead of the GO-NTG algorithm and the image compositing enable analysts to quickly update parameters and interactively cycle through the ensemble.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Jet Simulation</head><p>This case study focuses on a jet simulation and was chosen to illustrate the utility of the proposed approach for feature-rich datasets. The simulation describes a high-velocity fluid jet entering a medium at rest. Due to viscous effects, a large vortex ring is generated at the top of the jet that quickly breaks down into a large number of smaller vortices as the flow transitions towards turbulence. From the original velocity data, vorticity magnitude is computed and subjected to analysis to identify individual vortices as superlevel set components of high vorticity. <ref type="figure" target="#fig_2">Fig. 6</ref> shows the roughly five thousand superlevel set components that exist for level 500 at timestep 2000. Even after topological simplification, the split tree of that timestep still consists of more than 100k branches. As explained previously, the image database size only grows proportional to the parameter sampling and not to the feature complexity and quantity <ref type="table">(Table 1)</ref>. Moreover, grouping components based on split tree branches has the advantage that each group constitutes a local component cluster. Toggling the visibility of these groups therefore supports effective spatial peeling. As even hundreds of images can be composed at interactive framerates, the proposed analysis framework enables analysts to quickly browse through time and update parameters. However, to provide more flexibility, it is necessary to generate image databases for a larger number of component groups and persistence intervals, which significantly increases the databases sizes even further. To summarize, the demonstrated case studies show that image databases are not necessarily small, but seem to grow significantly smaller when moving towards extreme-scale simulations <ref type="bibr" target="#b1">[2]</ref>.  <ref type="table">Table 1</ref>. Statistics of the presented case studies. From left to right: name, cell count (all regular grids), number of timesteps, image sampling, total aggregated computation time of analysis and image products, and total sizes of simulations, analysis products, and images (512 2 pixels each). The 3D composited view and the merge tree at timestep 108 for level 0.2eV . The proposed approach naturally partitions the temperature volumes into groups: the asteroid trail (dark blue), the cloud that raises to the stratosphere (dark red), the flame front that thrusts forward over the ocean (dark orange), and the burning region at the impact site (dark green).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION AND FUTURE WORK</head><p>This paper described a scalable processing pipeline that enables the interactive visual analysis of large-scale scientific simulations where superlevel set components and their evolution are of primary interest. The approach first stores split trees, meta edges, and images of component groups at simulation runtime in a Cinema database, which is later used to explore post hoc the underlying simulation in a topology-based visual analytics framework. To this end, the paper described a split tree segmentation-based tracking algorithm (to correlate components over time), a branch decomposition-based image generation algorithm (to provide a rendering of component geometries), and a graph operationbased NTG algorithm (to derive NTGs post hoc by processing the stored topological abstractions). All algorithms have been implemented in the Topology ToolKit (TTK) <ref type="bibr" target="#b31">[32]</ref> and are therefore accessible as VTK filters <ref type="bibr" target="#b26">[27]</ref> inside ParaView <ref type="bibr" target="#b0">[1]</ref>. The proposed post hoc exploration framework enables users for the first time to navigate Cinema databases with a focus on features rather than along predetermined parameter axes. However, the experiments have shown that image databases are only advantageous if a) they are much smaller than the raw simulation data, and/or b) if accessing and rendering the raw data can not be done at interactive framerates. It also appears fruitful to replace-or supplement-the image database with downsampled volume data or simplified contour meshes. For instance, the volume data could be compressed while preserving the scalar field topology <ref type="bibr" target="#b30">[31]</ref>. Moreover, the image generation and the branch bundling are based on branch decompositions, which might vary drastically over time and are susceptible to noise. In the presented experiments, the branch bundling appears to be stable as long as there is a relatively small number of bundles which contain many branches. In the other extreme, i.e., many bundles consisting of few branches, it becomes apparent that branches frequently change bundles. In future work, this instability need to be explored further to mitigate its effect. Note, the branch decomposition has no effect on the tracking accuracy as Alg. 1 is based on segments and not on branches. However, the accuracy of Alg. 1 depends on the scalar interval resolution of the split tree segmentation, and a suitable resolution is often not known a priori.</p><p>It is also necessary to perform additional experiments that examine the database generation during massively parallel in situ execution to allow scaling to state-of-the-art, largest-scale simulations, which stand to benefit from the proposed methodology. This hinges crucially on the scalability of the split tree computation that is central to the approach; here, e.g., the parallel peak pruning <ref type="bibr" target="#b8">[9]</ref> approach could be used.</p><p>To facilitate practically usability, it appears possible to introduce automation of parameters (such as number of persistence intervals or camera angles stored) through heuristics or optimization techniques, to keep the generated database within a given budget while maximizing post hoc flexibility, or alternatively, to ensure a specified degree of flexibility while minimizing database size. For example, the integration of the VOIDGA approach <ref type="bibr" target="#b17">[18]</ref> could reduce the number of stored camera locations, which would allow to sample other parameters more densely. Finally, database generation could benefit from low-level technical improvements, such as different compression methods and data formats.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 3 .</head><label>3</label><figDesc>(Bottom) Superlevel set components of a time-varying scalarfield for three levels (dark to light blue). (Top) 3D illustration of a NTG where components are represented by vertices, and tracking graphs for each level are shown in shades of blue, and nesting hierarchies for each timestep in shades of red. (Middle) 2D NTG layout where tracking graph edges are drawn inside each other based on the nesting hierarchies.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 4 .</head><label>4</label><figDesc>Illustration of a split tree segmentation S = (T , œÜ , œà) for a scalar field (a, left) consisting of a split tree T (a, right), its scalar field œà (y-axis, right), and the domain segmentation œÜ (b). Each individual superlevel set component for a level l corresponds to one connected subtree of the split tree above the level threshold, and vice versa (c).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 6 .</head><label>6</label><figDesc>Illustration of the image generation process for ‚àº 5k vortices of the jet dataset at timestep 2000 based on two groups (cool and warm) and two persistence intervals (light and dark).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>18 //</head><label>18</label><figDesc>Add contour for each filtered branch that includes level 19 X ‚Üê / 0 // Set of contours 20 foreach B ‚àà B where</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>24 // 26 IFig. 8 .</head><label>24268</label><figDesc>Render depth and ID image of contours for each camera25 foreach camera c ‚àà C do ‚Üê RenderContours( X, c ) 27 StoreInCinemaDB( I, G, p i , p i+1 , l, c )28 StoreInCinemaDB( G, t ) Depth image-based rendering pipeline: multiple depth images and ID masks (a) are respectively composed into a single image (b), which are shaded based on approximated surface normals (c) and screen space ambient occlusion (d).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Vertex and nesting tree computation based on split trees. Vertices correspond to edge-cuts (red nodes) for a set of levels (dashed lines), where each vertex represents a single superlevel set component, and is labeled by its corresponding edge representative, level, and timestep (here omitted). To determine their nesting hierarchy (red edges), the algorithm traverses the split tree from each vertex at level l i with i &gt; 0 towards the root, until the algorithm reaches its parent at level l i‚àí1 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>NTGs of the viscous finger dataset for salt concentration levels 25, 30, and 35 (red to yellow). (Top) NTG generated with the explicit overlapbased tracking approach of Lukasczyk et al.<ref type="bibr" target="#b18">[19]</ref>. (Middle and Bottom)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .</head><label>10</label><figDesc>Analysis of the asteroid impact yA31 temperature field. (Top and Middle) NTGs visualizing the evolution of the temperature field for the levels 0.15eV , 0.2eV , and 0.28eV , where the second graph highlights level 0.2eV . (Bottom)</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This research was funded by the German research foundation (DFG) within the IRTG 2057 "Physical Modeling for Virtual Manufacturing Systems and Processes". This research was also supported by the Exascale Computing Project (17-SC-20-SC), a collaborative effort of the U.S. Department of Energy Office of Science and the National Nuclear Security Administration.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">ParaView: An End-User Tool for Large-Data Visualization. The Visualization Handbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Geveci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Law</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="717" to="731" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An Image-Based Approach to Extreme Scale In Situ Visualization and Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jourdain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>O'leary</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patchett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rogers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Petersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<meeting>the International Conference for High Performance Computing, Networking, Storage and Analysis</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="424" to="434" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Query-based Framework for Searching, Sorting, and Exploring Data Ensembles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Aldrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lukasczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Hyman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Viswanathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Leitte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing in Science &amp; Engineering</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Contour Tree Depth Images for Large Data Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Biedert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th Eurographics Symposium on Parallel Graphics and Visualization</title>
		<meeting>the 15th Eurographics Symposium on Parallel Graphics and Visualization</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="77" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Analyzing and Tracking Burning Structures in Lean Premixed Hydrogen Flames</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Day</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="248" to="260" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interactive Exploration and Analysis of Large-Scale Simulations Using Topology-Based Data Segmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Day</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1307" to="1324" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Computing Contour Trees in all Dimensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Axen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="75" to="94" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Flexible Isosurfaces: Simplifying and Displaying Scalar Topology using the Contour Tree. Computational Geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Snoeyink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van De Panne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="42" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Parallel Peak Pruning for Scalable SMP Contour Tree Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sewell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 6th Symposium on Large Data Analysis and Visualization (LDAV)</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="75" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Topological Persistence and Simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Letscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zomorodian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete &amp; Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="511" to="533" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Persistence-Sensitive Simplification Functions on 2-Manifolds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Edelsbrunner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Morozov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twentysecond annual symposium on Computational geometry</title>
		<meeting>the twentysecond annual symposium on Computational geometry</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="127" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The RAGE Radiation-Hydrodynamic Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gittings</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Weaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Clover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Betlach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Byrne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Coker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Dendy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hueckstaedt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>New</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Oakes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Science &amp; Discovery</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">63</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Task-Based Augmented Merge Trees with Fibonacci Heaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gueunet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fortin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jomier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Large Data Analysis and Visualization</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Scientific Visualization Contest</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ieee Vis</surname></persName>
		</author>
		<ptr target="http://www.uni-kl.de/sciviscontest/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ieee Vis</surname></persName>
		</author>
		<ptr target="http://sciviscontest2018.org/" />
		<title level="m">Scientific Visualization Contest</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Temporal Treemaps: Static Visualization of Evolving Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>K√∂pp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weinkauf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE transactions on visualization and computer graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="534" to="543" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lukasczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Aldrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Steptoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Favelier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gueunet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Maciejewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Leitte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Viscous Fingering: A Topological Visual Analytic Approach</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="volume">869</biblScope>
			<biblScope unit="page" from="9" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">VOIDGA: A View-Approximation Oriented Image Database Generation Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lukasczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kinner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Leitte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 8th Symposium on Large Data Analysis and Visualization (LDAV)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Nested tracking graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lukasczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Maciejewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Garth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Leitte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Forum</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="12" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Computing and Visualizing Time-Varying Merge Trees for High-Dimensional Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Oesterling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Heine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">H</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Morozov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topological Methods in Data Analysis and Visualization</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="87" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Open-Source Cinema Viewers</title>
		<ptr target="http://cinemaviewer.org/" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Multi-Resolution Computation and Presentation of Contour Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cole-Mclaughlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scorzelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IASTED Conference on Visualization, Imaging, and Image Processing</title>
		<meeting>IASTED Conference on Visualization, Imaging, and Image essing</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="452" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Visualization and Analysis of Threats from Asteroid Ocean Impacts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patchett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gisler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nouanesengsy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rogers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Abram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Samsel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Turton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
		<respStmt>
			<orgName>Los Alamos National Laboratory</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Approximating Dynamic Global Illumination in Image Space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ritschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Grosch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 Symposium on Interactive 3D Graphics and Games</title>
		<meeting>the 2009 Symposium on Interactive 3D Graphics and Games</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="75" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Cinema Database Specification -Dietrich Release v1.2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rogers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Woodring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patchett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lukasczyk</surname></persName>
		</author>
		<idno>LA-UR- 17-25072</idno>
		<imprint>
			<date type="published" when="2018" />
			<pubPlace>Los Alamos National Laboratory</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Visualizing Features and Tracking their Evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Samtaney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zabusky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="20" to="27" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<title level="m">The Visualization Toolkit: An Object Oriented Approach to 3D Graphics</title>
		<imprint>
			<publisher>Kitware, Inc</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Tracking Scalar Features in Unstructured Data Sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization &apos;98. Proceedings</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Time-Varying Contour Topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">S</forename><surname>Sohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bajaj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="14" to="25" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Lifted Wasserstein Matcher for Fast and Robust Topology Tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Soler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Plainchault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Conche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 8th Symposium on Large Data Analysis and Visualization (LDAV)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Topologically Controlled Lossy Compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Soler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Plainchault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Conche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Pacific Visualization Symposium (PacificVis)</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="46" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Favelier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Levine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gueunet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Michaux</surname></persName>
		</author>
		<title level="m">The Topology ToolKit. IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Generalized Topological Simplification of Scalar Fields on Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tierny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2005" to="2013" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Interactive Exploration of Large-Scale Time-Varying Data using Dynamic Tracking Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Widanagamaachchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Christensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bremer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Large Data Analysis and Visualization (LDAV)</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="9" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">High-Dimensional Scientific Data Exploration via Cinema</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Woodring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ahrens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patchett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tauxe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rogers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Workshop on Data Systems for Interactive Analysis (DSIA)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
