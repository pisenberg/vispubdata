<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">D 3 : Data-Driven Documents</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011-10-23">23 October 2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Bostock</surname></persName>
							<email>mbostock@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vadim</forename><surname>Ogievetsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Heer</surname></persName>
							<email>jheer@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">D 3 : Data-Driven Documents</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2011-10-23">23 October 2011</date>
						</imprint>
					</monogr>
					<note type="submission">received 31 March 2011; accepted 1 August 2011; posted online</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:01+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Information visualization</term>
					<term>user interfaces</term>
					<term>toolkits</term>
					<term>2D graphics</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Interactive visualizations built with D3, running inside Google Chrome. From left to right: calendar view, chord diagram, choropleth map, hierarchical edge bundling, scatterplot matrix, grouped &amp; stacked bars, force-directed graph clusters, Voronoi tessellation.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>When building visualizations, designers often employ multiple tools simultaneously. This is particularly true on the web, where interactive visualizations combine varied technologies: HTML for page content, CSS for aesthetics, JavaScript for interaction, SVG for vector graphics, and so on. One of the great successes of the web as a platform is the (mostly) seamless cooperation of such technologies, enabled by a shared representation of the page called the document object model (DOM). The DOM exposes the hierarchical structure of page content, such as paragraph and table elements, allowing reference and manipulation. In addition to programming interfaces, modern browsers include powerful graphical tools for developers that display the element tree, reveal inherited style values, and debug interactive scripts.</p><p>Unfortunately, this blissful interoperability is typically lost with visualization toolkits due to encapsulation of the DOM with more specialized forms. Rather than empowering direct manipulation of the existing model, such toolkits <ref type="bibr" target="#b1">[2,</ref><ref type="bibr">9,</ref><ref type="bibr" target="#b15">18]</ref> supplant it with custom scenegraph abstractions. This approach may provide substantial gains in efficiency-reducing the effort required to specify a visualization-but it incurs a high opportunity cost: it ignores developers' knowledge of standards, and the tools and resources that augment these standards.</p><p>The resulting cost to accessibility-the difficulty of learning the representation-may trump efficiency gains, at least for new users. Scarcity of documentation and ineffectual debugging exacerbate the problem, impeding users from gaining deeper understanding of toolkit abstractions and limiting the toolkit's potential. Systems with intermediate scenegraph abstractions and delayed property evaluation can be particularly difficult to debug: internal structures are exposed only when errors arise, often at unexpected times.</p><p>Furthermore, intermediate representations may diminish expressiveness-the diversity of possible visualizations-and introduce substantial runtime overhead. Certain tasks that could be offloaded to a more suitable tool, such as specifying fonts via CSS, may be stymied by encapsulation. Similarly, while graphical features such as clipping may be supported by the underlying representations, they may not be exposed by the toolkit. Even if extensibility is available as a means for greater expression, it requires in-depth knowledge of toolkit internals and poses a substantial barrier to the average user.</p><p>Our awareness of these issues comes in part from thousands of user observations over the two years since releasing Protovis <ref type="bibr" target="#b1">[2]</ref>, despite our attempt to balance expressiveness, efficiency and accessibility. We now refine these three goals with specific objectives:</p><p>Compatibility. Tools do not exist in isolation, but within an ecosystem of related components. Technology reuse utilizes prior knowledge and reference materials, improving accessibility. Offloading a subset of tasks to specialized tools can improve efficiency, avoiding the generality and complexity of a monolithic approach. And, full access to the native representation removes limits on expressiveness.</p><p>Debugging. Trial and error is a fundamental part of development and the learning process; accessible tools must be designed to support debugging when the inevitable occurs. Better tools facilitate poking and prodding to explore the side-effects of operations interactively. While encapsulation of control flow and representation often improves efficiency, it may also lead to an "impedance mismatch" if internal state is exposed, violating the user's mental model.</p><p>Performance. Visualizations can be greatly enhanced by interaction and animation <ref type="bibr" target="#b12">[15]</ref>. However, high-level abstractions may limit a developer's ability to execute fast incremental scene changes if the system lacks sufficient information (such as a dependency graph) to avoid redundant computation. Focusing on transformation rather than representation shifts this responsibility to the developer, improving performance while enabling animation and interaction.</p><p>To address these concerns, we contribute Data-Driven Documents (D3), an embedded domain-specific language <ref type="bibr" target="#b13">[16]</ref> for transforming the document object model based on data. With D3, designers selectively bind input data to arbitrary document elements, applying dynamic transforms to both generate and modify content; the document is the scenegraph. This is a generalization of Protovis, and through declarative helper modules built on top of these transforms, we can achieve specifications with comparable notational efficiency. And yet, D3's standardized representation improves expressiveness and accessibility, while transforms offer dramatic performance gains and enable animated transitions.</p><p>We argue these claims by comparing D3 to existing web-based methods for visualization, considering how language design achieves our objectives; we also describe several applications to convey representative usage. Through performance benchmarks, we demonstrate that D3 is at least twice as fast as Protovis. Lastly, we share anecdotes that suggest D3's potential for dynamic visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>D3 is not a traditional visualization framework. Rather than introduce a novel graphical grammar, D3 solves a different, smaller problem: efficient manipulation of documents based on data. Thus D3's core contribution is a visualization "kernel" rather than a framework, and its closest analogues are other document transformers such as jQuery, CSS and XSLT. As the document model directly specifies graphical primitives, D3 also bears a resemblance to low-level graphics libraries such as Processing and RaphaÃ«l. For high-level capability, D3 includes a collection of helper modules that sit on top of the selection-based kernel; these modules are heavily influenced by prior visualization systems, including Protovis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Document Transformers</head><p>Although browsers have built-in APIs for manipulating the DOM, these interfaces are verbose and cumbersome, likely due to standards bodies' emphasis on unambiguous designs that can be implemented consistently by vendors and survive future revision. As a result, JavaScript libraries <ref type="bibr">[19,</ref><ref type="bibr" target="#b19">23,</ref><ref type="bibr">29,</ref><ref type="bibr" target="#b27">33]</ref> that enable more convenient manipulation are hugely popular. Of these, jQuery, is so successful it is often considered synonymous with JavaScript among novices.</p><p>These libraries share the concept of a selection: identify a set of elements using simple predicates, then apply a series of operators that mutate the selected elements. The universality of this concept is no coincidence; the idea originates from Cascading Style Sheets <ref type="bibr" target="#b17">[21]</ref> (CSS): a declarative language for applying aesthetics (e.g., fonts and colors) to elements. JavaScript-based selections provide flexibility on top of CSS, as styles can be computed dynamically in response to user events or changing data.</p><p>var ps = document.getElementsByTagName("p"); for (var i = 0; i &lt; ps.length; i++) { var p = ps.item(i); p.style.setProperty("color", "white", null); } $("p").css("color", "white"); d3.selectAll("p").style("color", "white");  For data visualization, document transformers must handle the creation and deletion of elements, not just the styling of existing nodes. This is impossible with CSS, and tedious with jQuery as it lacks a mechanism for adding or removing elements to match a dataset; data must be bound to nodes individually (if at all), rather than through a high-level data join (see Â§3.2). This makes jQuery incapable of datadriven transformations, and thus ill-suited for dynamic visualizations involving complex transitions.</p><p>Extensible Stylesheet Language Transformations <ref type="bibr" target="#b35">[41]</ref> (XSLT) is another declarative approach to document transformation. Source data is encoded as XML, then transformed into HTML using an XSLT stylesheet consisting of template rules. Each rule pattern-matches the source data, directing the corresponding structure of the output document through recursive application. XSLT's approach is elegant, but only for simple transformations: without high-level visual abstractions, nor the flexibility of imperative programming, XSLT is cumbersome for any math-heavy visualization task (e.g., interpolation, geographic projection or statistical methods).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Graphics Libraries</head><p>Dealing directly with graphical marks provides a close cognitive mapping between the toolkit representation and the desired result, reducing the gulf of execution <ref type="bibr" target="#b20">[24]</ref> for designers and improving accessibility. Yet, as previously discussed <ref type="bibr" target="#b1">[2]</ref>, low-level graphics libraries such as Processing [28] and RaphaÃ«l <ref type="bibr" target="#b24">[30]</ref> are tedious for complex visualization tasks as they lack convenient abstractions.</p><p>Furthermore, many graphics libraries do not provide a scenegraph that can be inspected for debugging. For example, Processing uses immediate mode rendering, and RaphaÃ«l encapsulates SVG and Microsoft's proprietary Vector Markup Language (VML). Toolkitspecific scenegraph abstractions diminish compatibility and expressiveness: elements cannot be styled using external stylesheets, and graphical effects such as dashed strokes and composite filters may be unusable even if supported natively.</p><p>Minor variations in graphical abstractions also present a hurdle to new users. Consider drawing a wheel. In Processing, the ellipse operator draws a circle, which takes four arguments: x and y of the center, width and height. RaphaÃ«l provides a circle operator that takes three arguments, preferring radius. Protovis defines Dot and Wedge mark types, either of which can render circles, as well as the Line type with polar interpolation. Each abstraction differs slightly from the standard SVG circle element. Standards further benefit from a network effect: the more people that use a technology, the more demand for documentation, and thus the greater supply. Despite the efforts of developers to document their work, there are far more reference and training materials for standards than for custom libraries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Information Visualization Systems</head><p>Researchers have developed a variety of toolkits for facilitating visualization design. One class of framework <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b32">38]</ref> provides a hierarchy of visualization components. New visualizations are introduced either by authoring new components or subclassing existing ones. A second class of framework [9, 14] explicitly instantiates the InfoVis Reference Model <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b9">12]</ref> using a set of composable operators for data management, visual encoding, and interaction. Though new combinations of operators can enable customized views, we have observed in practice that most novel visualizations require programmers to author completely new operators. Thus both classes of framework work well when visualization creators have software engineering expertise, but are prohibitive to more general audiences such as web designers.</p><p>With our prior work on Protovis <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b10">13]</ref> we have instead advocated for declarative, domain specific languages (DSLs) for visualization design. By decoupling specification from execution details, declarative systems allow language users to focus on the specifics of their application domain, while freeing language developers to optimize processing. Similar to Protovis, D3 provides a declarative framework for mapping data to visual elements. However, unlike Protovis and other grammar-based declarative models <ref type="bibr" target="#b33">[39,</ref><ref type="bibr" target="#b34">40]</ref>, D3 does not strictly impose a toolkit-specific lexicon of graphical marks. Instead, D3 directly maps data attributes to elements in the document object model.</p><p>Whether or not this design move is advantageous-or even possible-depends on context: many programming environments do not provide a standardized scenegraph abstraction. Moreover, toolkitspecific scenegraph abstractions have compelling benefits. As demonstrated in prior work <ref type="bibr" target="#b10">[13]</ref>, custom abstractions can facilitate portability (cross-platform deployment) and performance optimization. A curated lexicon of graphical marks can also improve notational efficiency <ref type="bibr" target="#b1">[2]</ref>. Consequently, we maintain that toolkit-specific representations continue to be an important component of many visualization models, and we address this with D3's helper modules (see Â§3.4).</p><p>The technical constraints and entrenched standards of the web have led us to a different approach for browser-based visualization. The browser environment does not provide the same optimization opportunities as compiled programming languages; instead, the overhead of mapping an internal representation to the DOM introduces performance bottlenecks. Intermediate representations can also complicate debugging, as the mapping between code (written in terms of abstract graphical marks) and inspectable output (e.g., SVG elements in the DOM) is often unclear. Custom abstractions may additionally limit expressiveness: they must be revisited to take advantage of new browser features and due to encapsulation may be unable to exploit supporting technologies such as CSS.</p><p>D3 is designed to sidestep these problems and complement web standards. Critically, D3 also introduces features that may inform other visualization frameworks: query-driven selection and data binding to scenegraph elements, document transformation as an atomic operation, and immediate property evaluation semantics. In the next section, we describe the design of the D3 system. We then go on to review our design choices and their associated trade-offs in greater detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">DESIGN</head><p>D3's atomic operand is the selection: a filtered set of elements queried from the current document. Operators act on selections, modifying content. Data joins bind input data to elements, enabling functional operators that depend on data, and producing enter and exit subselections for the creation and destruction of elements in correspondence with data. While operators apply instantaneously by default, animated transitions interpolate attributes and styles smoothly over time. Special operators called event handlers respond to user input and enable interaction. Numerous helper modules, such as layouts and scales, simplify common visualization tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Selections</head><p>D3 adopts the W3C Selectors API to identify document elements for selection; this mini-language consists of predicates that filter elements by tag ("tag"), class (".class"), unique identifier ("#id"), attribute ("[name=value]"), containment ("parent child"), adjacency ("before â¼ after"), and various other facets. Predicates can be intersected (".a.b") or unioned (".a, .b"), resulting in a rich but concise selection method. .data(d3.range(0, 2, .5)) .enter().append("svg:g"); e g.append("svg:line") .attr("class", function(d) { return d ? "minor rule" : "rule"; }) .attr("x2", 160).attr("y1", y).attr("y2", y); f g.append("svg:text") .attr("x", 164).attr("y", y).attr("dy", ".3em") .text(d3.format(",.  The global d3, also serving as a namespace, exports select and selectAll methods for obtaining selections. These methods accept the selector mini-language; the former selects only the first element that matches the predicates, while the latter selects all matching elements in document traversal order. These methods also accept node references directly, for when nodes are accessed through external means such as a third-party library or developer tool.</p><p>Any number of operators can be applied to selected elements. These operators wrap the W3C DOM API, setting attributes (attr), styles (style), properties (property), HTML (html) and text (text) content. Operator values are specified either as constants or functions; the latter are evaluated for each element. While the built-in operators satisfy most needs, the each operator invokes an arbitrary JavaScript callback for total generality. Since each selection is simply an array, elements can also be accessed directly (e.g., [0]).</p><p>D3 supports method chaining for brevity when applying multiple operators: the operator return value is the selection. (For example, the pie chart in <ref type="figure" target="#fig_6">Figure 7</ref> is a single statement.) The append and insert operators add a new element for each element in the current selection, returning the added nodes, thus allowing the convenient creation of nested structures. The remove operator discards selected elements.</p><p>Whereas the top-level select methods query the entire document, a selection's select and selectAll operators restrict queries to descendants of each selected element; we call this subselection. For example, d3.selectAll("p").select("b") returns the first bold ("b") elements in every paragraph ("p") element.</p><p>Subselecting via selectAll groups elements by ancestor. Thus, d3.selectAll("p").selectAll("b") groups by paragraph, while d3.selectAll("p b") returns a flat selection. Subselecting via select is similar, but preserves groups and propagates data. Grouping plays an important role in the data join (see Â§3.2), and functional operators may depend on the numeric index of the current element within its group (as in the x scale of <ref type="figure" target="#fig_5">Figure 5</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Data</head><p>The data operator binds input data to selected nodes. D3 uses format agnostic processing <ref type="bibr" target="#b10">[13]</ref>: data is specified as an array of arbitrary values, such as numbers, strings or objects. Once data is bound to elements, it is passed to functional operators as the first argument (by convention, d), along with the numeric index (i). These arguments were chosen for parity with JavaScript's built-in array methods, and deviates from Protovis, which supplies extra arguments for any enclosing panel data. This approach simplifies D3's selection structure (requiring only one level of grouping) and avoids variable arguments.</p><p>By default, data is joined to elements by index: the first element to the first datum, and so on. For precise control over data-element correspondence, a key function <ref type="bibr" target="#b10">[13]</ref> can be passed to the data operator.</p><p>Matching key values preserve object constancy across transitions. <ref type="figure">Fig. 6</ref>. When new data (blue) are joined with old nodes (orange), three subselections result: enter, update and exit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data Nodes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Enter Update Exit</head><formula xml:id="formula_0">A B C D K J I H G F E E F G H L</formula><p>If data or elements are leftover after computing the data join, these are available in the enter and exit subselections, respectively. The entering data have no corresponding nodes; the exiting nodes have no corresponding data. For example, if data is joined to the empty selection, the enter operator returns placeholder nodes for each incoming datum; these nodes can then be instantiated via append or insert. Similarly, if new data is joined to an existing selection, the exit operator returns elements bound to outgoing data to allow removal. In terms of relational algebra, given data D and nodes N, the enter selection is D N (left), the exit selection is N D (right), and the update selection is D N (inner). The updating nodes are simply returned by the data operator, convenient for the common case where the enter and exit selections are empty.</p><p>The delineation of enter, update and exit allows precise control of the element lifecycle. Properties that are constant for the life of the element are set once on enter, while dynamic properties are recomputed per update. Animated transitions (see Â§3.3) can be defined for each of the three states. More generally, data joins enable exact data-element correspondence; although this is nonessential for static visualizations, it is crucial for efficient dynamic visualizations.</p><p>Data is "sticky"; once bound to nodes, it is available on subsequent re-selection without again requiring the data operator. This simplifies subsequent transforms, as well as the implementation of key functions: new data can be compared directly to old data, rather than requiring the data key to be serialized in the document. Data can also be used to reorder (sort) or cull elements (filter).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Interaction and Animation</head><p>The document object model supports event listeners: callback functions that receive user input events targeted at specific elements. D3's on operator exposes this functionality for native event types. For consistency with other functional operators, the callback receives the data and index as arguments <ref type="figure">(d, i)</ref>, allowing data-driven interaction. The targeted node is this, and the current event is d3.event. Listeners may coexist on elements through namespaces (e.g., "click.foo").</p><p>D3's focus on transformations simplifies the specification of scene changes in response to user events; the semantics are the same as initialization. Furthermore, animated transitions can be derived from selections using the transition operator. Transitions export the style and attr operators of selections with identical syntax, but interpolate from the current to specified value gradually over time. To stagger animation for individual elements, the delay and duration of transitions can be specified as functional operators. Easing can also be customized; standard easing functions <ref type="bibr" target="#b14">[17,</ref><ref type="bibr" target="#b22">26]</ref> such as "elastic", "cubic-in-out" and "linear" are specified by name.</p><p>Powering D3's transitions is a collection of interpolators for diverse types: numbers; strings with embedded numbers (e.g., font sizes, path data); RGB and HSL colors; and arbitrary nested arrays or objects. If needed, custom interpolators can be specified. An example of such customization is animating value changes in a pie chart; the bound arc data are interpolated in polar coordinates, rather than interpolating the Cartesian coordinates of the path strings.</p><p>Transitions dispatch events to registered listeners as each element finishes animating, allowing sequential transitions and post-animation cleanup such as removing exiting elements. Due to staggering, elements may finish at different times. D3 automatically manages transition scheduling, guaranteeing per-element exclusivity and efficient, consistent timing through a unified timer queue. This optimized design easily scales to thousands of concurrent timers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Modules</head><p>Layouts supply reusable, flexible visualization techniques by generating abstract data structures. The partition layout, for example, computes a two-dimensional spatial subdivision of a hierarchy; each node has a closed range in x and y. The nodes are bound to arcs for a sunburst <ref type="bibr" target="#b26">[32]</ref> (x â Î¸ , y â r), or rectangles for an icicle tree. The chord layout computes an angular partition from a weighted adjacency matrix, enabling radial diagrams in the style of Circos <ref type="bibr" target="#b16">[20]</ref>. The force layout combines physical simulation and iterative constraint relaxation <ref type="bibr" target="#b5">[7]</ref> for stable graph layout. The stack layout computes the y 0 baseline for stacked graphs <ref type="bibr" target="#b8">[11,</ref><ref type="bibr" target="#b3">4]</ref>, while the squarified treemap layout <ref type="bibr" target="#b25">[31,</ref><ref type="bibr" target="#b2">3]</ref> computes another spatial partition well-suited for animation (see Â§5.1). More layouts are in development.</p><p>Interaction techniques are reused through behaviors. The zoom behavior implements panning and zooming by listening to mouse events; on pan or zoom, a custom event is dispatched to report a twodimensional translation and scale. This event can be used for either geometric or semantic zooming <ref type="bibr" target="#b23">[27]</ref>.</p><p>Functional operators have surprising depth. For example, the geo module exports a path operator for projecting geographic data to pixel coordinates. The projection is configurable, such as Albers equal-area (for choropleth and cartograms where area conservation is required), or spherical Mercator for overlaying web-based tile maps. The path operator supports the GeoJSON format <ref type="bibr" target="#b28">[34]</ref>, including boundaries with disconnected areas and holes, as well as centroid and bounding box computation. The geom module exports various geometric operators, including Voronoi tessellation, marching squares, convex hulls, polygon clipping and quadtrees.</p><p>D3 also includes sundry data-processing utilities, such as nest and cross operators, a comma-separated values (CSV) parser, date and number formats, etc. These are extremely useful for visualization, but sufficiently distinct that we may bundle them separately in the future. Future work is needed in this area; a rich collection of statistical methods, as in R <ref type="bibr" target="#b29">[35]</ref>, would be particularly valuable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">DESIGN RATIONALE</head><p>D3 is most closely related to our prior work on Protovis <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b10">13]</ref>, a declarative language for visualization design. Although they seek similar goals, D3 and Protovis differ in the type of visualizations they enable and the method of implementation. To put the contributions of D3 in context, we describe our design rationale by focusing on three differentiating factors: implicit or explicit transformation, deferred or immediate evaluation, and access to a native representation. Whereas Protovis excels at concise specifications of static scenes, D3's transformations make dynamic visualizations easier to implement. By adopting immediate evaluation of operators and the browser's native representation, D3 improves compatibility and debugging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Transformation</head><p>Transformations happen implicitly in Protovis: the data or property definitions are changed, and a call to render updates the display by recomputing property values and regenerating the scenegraph. This is convenient but slow; without dependency information, Protovis must re-evaluate all properties, even those whose definitions or input data have not changed. In addition, Protovis must then propagate the changes to the intermediate scenegraph out to the native SVG.</p><p>In D3, designers specify transformations of scenes (scene changes), as opposed to representations (the scenes themselves). In both cases the specifications are data-driven, but transformations better enable dynamic visualizations through explicit control over which elements are mutated, added or removed, and how so. This eliminates redundant computation, touching only the elements and attributes that need updating, rather than the entire scenegraph.</p><p>Explicit transformations naturally extend to animated transitions, where attributes or styles are smoothly interpolated over time. We experimented with transitions in Protovis <ref type="bibr" target="#b10">[13]</ref>, influencing our design of enter and exit (see Â§3.2), but its high-level property descriptions make arbitrary scene changes difficult. This is apparent in how Protovis modifies internal state in response to user events, allowing localized changes to the representation.  for primitive modes of interaction, but not generalizable (for example, one cannot modify elements other than the one that received the user event). Additionally, the automatic context is a frequent source of user confusion as it temporarily overrides system behavior.</p><p>Transformations have an additional benefit that they can modify existing documents, decoupling manipulation from generation. This could enable a hybrid architecture where visualizations are initially constructed on the server and dynamic behavior is bound on the client.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Immediate Evaluation</head><p>By deferring evaluation of property functions to the rendering phase, Protovis allows implicit re-evaluation of properties. Although convenient, this can cause errors if references captured via closure change (or disappear). For example, a global variable may be inadvertently overwritten by another chart on the same page, remaining undetected until interaction triggers a redraw. This language weakness is exacerbated by pervasive misunderstanding of JavaScript's var keyword, which is scoped by function rather than by block, as is typical of other languages. To tighten the scope of reference capture, D3 applies operators immediately; for example, D3's attr operator immediately sets attributes on selected nodes and then returns.</p><p>Immediate evaluation reduces internal control flow, moving it up to user code. Protovis, in contrast, has hidden control flow that is revealed only when the system crashes-another confusing consequence of delayed evaluation. Immediacy is also more compatible with standard JavaScript organizational constructs, such as functions and loops. Protovis cannot generate arbitrary hierarchical scenegraphs because the hierarchy depth is fixed to the number of nested panels declared in code, whereas D3's stateless evaluation allows transforms to be refactored into functions invoked recursively by the each operator.</p><p>Internal mechanics complicate the implementation of Protovis layouts, as developers must understand the order in which properties are evaluated and the meaning of specialized, internal callbacks. D3's simplified control flow allows layouts to be decoupled from property evaluation. D3 layouts (see Â§3.4) are simply helper classes that create or modify arbitrary data structures, such as a description of a chord diagram <ref type="bibr" target="#b16">[20]</ref>, or positions of nodes in a force-directed graph. The user then binds the layout data to attributes and elements as desired.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Native Representation</head><p>One of the key contributions of Protovis is its choice of graphical primitives, called marks. These marks were chosen to satisfy the needs of common chart types: Line for line charts, Wedge for pie charts, and so on. Protovis achieves greater expressiveness than charting libraries because these simple shapes can be composed in various ways.</p><p>Protovis marks are intentionally homogeneous: properties have the same meaning across mark types. This enables prototypal inheritance, where derived marks reuse property definitions from existing marks, reducing verbosity. It also facilitates iterative design, as mark types can be changed without breaking related code. Related marks such as text labels are easy to specify in Protovis using anchors.</p><p>Abandoning a specialized representation for a standard one, such as SVG, relinquishes these advantages. For example, inheritance is not appropriate for SVG's heterogeneous shapes (e.g., attributes "cx" for circles vs. "x" for rectangles). On the other hand, the native representation supports CSS for sharing simple property definitions, and has advantages as previously discussed including interoperability, documentation and expressiveness.</p><p>Some of the benefits of specialization can be recovered through simple helper classes, without the cost of encapsulation. D3's arc class allows the convenient specification of pie chart wedges using SVG path elements and elliptical arc path segments (as in <ref type="figure" target="#fig_6">Figure 7)</ref>. The output is identical to the Protovis Wedge, except native elements improve tool compatibility and debugging. However, we note this decoupling does incur a slight decrease in notational efficiency.</p><p>Finally, a subtle yet significant advantage of native representation is that selections can be retrieved from the document at any time. In order to modify a Protovis visualization, one needs to modify the underlying data or property definitions, and then redraw. This requires bookkeeping (e.g., var) for affected marks in the scene. Shared property definitions make it difficult to change specific marks-such as the mark under the mouse cursor-without global side-effects. D3, in contrast, uses selectors to identify document elements through a variety of means (such as tag names, class attributes, and associated data), making local modifications trivial. Since selections are transient, they can also overlap for greater flexibility than single inheritance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXAMPLE APPLICATIONS</head><p>Over the course of development, we have built numerous visualizations with D3, including real-world applications, tests of the framework's capability, and pedagogical examples for new users. We now describe several example applications to convey representative usage and unique capabilities. For brevity, full source code is not included but is available online [6].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Animated HTML Treemaps</head><p>Using the treemap layout, we created a squarified treemap of classes in the Flare [9] package hierarchy. Each node is mapped to a rectangular HTML div element; although HTML is less expressive than SVG, it is supported on older browsers and demonstrates the framework's flexibility. The x, y, âx and ây computed by the layout are mapped to positional styles. For example, the style operator for "left" is defined as function(d) { return d.x+"px"; }. Similarly, the ordinal color scale d3.scale.category20 sets the background color of nodes by package, while the text operator generates labels for class names.</p><p>Two area encodings are specified via the value operator on the layout: by file size (d.value), and by file count <ref type="bibr" target="#b0">(1)</ref>. Thus, in the latter case, each leaf node has equal size. Buttons with click event handlers toggle between the two encodings, initiating animated transitions. The treemap layout is configured "sticky", such that the allocation of nodes into squarified horizontal and vertical rows is preserved across updates; this allows nodes to be resized smoothly, without shuffling or occlusion that would impede perception of changing values. Although this results in a suboptimal layout for one of the two states, the results are acceptable (see <ref type="figure" target="#fig_0">Figure 2</ref>). If desired, one could extend the layout to compromise multiple states (by averaging values prior to layout), or, a sequenced animation could resize and then reorient.</p><p>The static treemap is 21 lines of JavaScript-a negligible increase over the 17 lines required for Protovis. Adding interaction and animation expands the specification to 54 lines. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Noncontiguous Cartograms</head><p>D3's geo module simplifies the specification of geographic visualizations. To demonstrate this, we built a noncontiguous cartogram <ref type="bibr" target="#b21">[25]</ref> that encodes values for geographic regions as area by scaling each region around its projected centroid.</p><p>A discontinuous Albers equal-area projection shows the 48 states, Hawaii and Alaska as recommended by the USGS. The state boundaries are loaded asynchronously as GeoJSON, and then mapped to SVG path elements using the geo.path operator. The state boundaries were previously downloaded from the U.S. Census Bureau, simplified via MapShaper, and converted to GeoJSON using GDAL.</p><p>Three copies of the states are generated: one in the background with a thick gray stroke for a halo, one in the middle with white fill to mask internal strokes, and one in the foreground to encode data. The gray halo effect for the country outline is helpful to assist viewers in perceiving the distortion of area.</p><p>The states are scaled around their centroids using SVG's "transform" attribute. To scale around a position other than the origin, multiple transforms are concatenated: "translate(x, y) scale(k) translate(âx, ây)". The x and y values are computed by the centroid method of the path operator, while k is proportional to the square root of the input value-here the obesity rate reported by the CDC, as of 2008. To minimize overlap on adjacent states, k â¤ 1.</p><p>This example requires 34 lines of JavaScript, not including data or comments. Stroke widths and colors are specified using CSS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">BÃ©zier Curves Explained</head><p>D3 is not limited to standard data visualizations; mapping arbitrary data to DOM elements enables a wide variety of data-driven graphics. An interesting example comes from D3 contributor Jason Davies, who designed a tutorial on the construction of parametric BÃ©zier curves. The tutorial is both animated and interactive: as the parameter t animates from 0 to 1, control points can be moved to affect the curve. The intermediate interpolation steps are shown as colored spans (yellow for quadratic, blue for cubic and green for quartic). These animations illustrate how a parametric BÃ©zier curve is constructed. The parameter t ranges from 0 to 1. In the simplest case, a first-order BÃ©zier curve, the curve is a straight line between the control points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Jason Davies Â» Toys</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Animated BÃ©zier Curves</head><p>For a second-order or quadratic BÃ©zier curve, first we find two intermediate points that are t along the lines between the three control points. Then we perform the same interpolation step again and SVG path elements display the curves, lines connect the control and interpolation points, and circle elements show the control points. Event handlers on the circles respond to mouse events to allow drag-and-drop. The backing data is an array of five control points (in x and y); slices of this array generate small multiples for lower-order curves. Thus, moving a control point in one curve simultaneously updates the corresponding control point in the others. The red path is a piecewise linear discretization of the partial BÃ©zier curve for the current t. The path is incrementally constructed as t advances, and cached to optimize performance.</p><p>This example is 139 lines of JavaScript, not including comments. Some styles are set with CSS while others are set from JavaScript.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">PERFORMANCE BENCHMARKS</head><p>By using explicit transformations of a native representation, D3 can avoid unnecessary computation (transformations can be limited to selected attributes) and reduce overhead (the DOM is modified directly, eliminating the indirection of an intermediate scenegraph). These design decisions improve performance compared to a higher-level framework such as Protovis. We now substantiate this claim through a pair of performance benchmarks comparing equivalent visualizations constructed with D3 and Protovis.</p><p>In addition, much recent fanfare concerns the increasing graphical and interactive capabilities native to modern web browsers (typically under the mantle of "HTML5"). Previously, designers relied upon proprietary plug-ins, namely the Adobe Flash Player, to provide interactive graphics. To assess the current state-of-the-art, we include Flash-based visualizations in our benchmarks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Methods</head><p>We compared initialization times and frame rates for D3, Protovis, and Flash using two visualizations: an interactive scatterplot matrix supporting brushing and linking <ref type="bibr" target="#b0">[1]</ref> across four dimensions and an animated stacked graph <ref type="bibr" target="#b31">[37]</ref>. We thus compared a total of six different visualization designs. <ref type="figure" target="#fig_10">Figure 11</ref> shows examples of the two visualization types. Both benchmark metrics are important for web-based visualization: longer page load times have been shown to increase user attrition <ref type="bibr" target="#b18">[22]</ref>, while a sufficient frame rate is necessary for fluent interaction and animation.</p><p>We simulate interaction to benchmark the scatterplot matrix. On each frame we randomly select a constituent plot and two coordinates within it; these coordinates define a rectangular selection region for brushing and linking. In response, each scatterplot highlights the points contained within the selection. Both D3 and Protovis render points using SVG circle elements. Within Flash, we represent each point with its own underlying Flash Sprite object. Improved Flash rendering performance is possible by rendering multiple points within a single Sprite. However, this complicates mouse event processing for single points-one has to implement hit testing manually. SVG provides event callbacks for all shape elements. To provide a fair comparison, we maintain similar functionality across platforms.</p><p>For the stacked graph, we continuously animate between two fixed sets of data values. The D3 and Protovis implementations use the stacked graph layout routines bundled with each framework. The Protovis instance uses animated transition support introduced in version 3.3. In Flash, we use the stacked graph layout and animation support provided by the Flare toolkit <ref type="bibr">[9]</ref>.</p><p>For each visualization we measure both the initialization time (the time from page load to initial display of the visualization) and average frame rate. Initializations were repeated ten times and averaged. As the visualization cycles through simulated interactions or completed animations, we record average frame rates for 10-second intervals over a period of 5 minutes. We then compute the mean and variance of frame rate samples. We repeat this analysis over an increasing number of data points ranging from 500 to 20,000. In all cases the standard deviations are smaller than the means by 1-2 orders of magnitude, and so we omit them presently.</p><p>We performed our benchmarks on a MacBook Pro with a dual-core 2.66 GHz processor and 8GB RAM running MacOS X 10.6.7. We conducted the benchmarks inside the Google Chrome browser version 11.0 beta with the Adobe Flash Player 10.2 plug-in. <ref type="figure" target="#fig_9">Figure 10</ref> presents our benchmarking results. For both visualizations, the initialization time from page load to visualization view is typically faster for browser-native tools. D3 results in significantly faster page loads: twice as fast as Protovis and over three times as fast as Flash. Presumably this discrepancy is due to initialization of the Flash plugin. As we calculate load times by triggering a browser refresh, our results take into account time savings due to caching previously-loaded Flash libraries. We also note that our Flash visualizations do not make use of an application framework such as Adobe Flex; doing so further increases load times by over a second.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Results and Discussion</head><p>With respect to frame rate, Flash provides the best performance. As the number of data points increases, Flash-based visualizations exhibit 2-2.5 times more frames per second than D3. Meanwhile, D3 shows improved scalability among browser-native tools, exhibiting at least double Protovis' frame rate as the data set size increases. This matches performance gains "from 30 to around 90" frames per second reported by Davies, who previously implemented the BÃ©zier curve tutorial (see Â§5.3) in Protovis. Others have similarly observed "much faster" performance in D3.</p><p>Moreover, our comparison to Protovis is conservative, as in our benchmarks the majority of the scene must be redrawn on each frame. This provides a useful bound on performance, but obscures the common case of more localized updates. By limiting updates to the changing parts of a scene, D3 transforms provide greater scalability than Protovis. D3 also allows more control over document structure, allowing further optimization; for example, SVG's use element efficiently replicates shapes, while CSS3 provides hardware acceleration of certain animated transitions.</p><p>Our results confirm that D3's use of explicit transformations and native representation deliver improved performance: page load times and frame rates in D3 outperform Protovis by at least a factor of two. D3 visualizations load at least three times faster than equivalent Flashbased examples. However, our results also indicate that browser vendors still have some distance to cover in improving SVG rendering performance. Flash provides consistently higher frame rates as the number of data points increases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">FEEDBACK AND OBSERVATIONS</head><p>We (and our users) have solved diverse visualization tasks using D3 that would be difficult or impossible with Protovis. Examples include pure HTML displays ( Â§5.1), multi-stage animations <ref type="bibr" target="#b12">[15]</ref>, and interactive visualizations of complex structures, including a force-directed graph with "expand-on-demand" clusters and convex hulls around leaf nodes (see <ref type="figure">Figure 1</ref>). The ease with which transitions can be implemented is also evident. One designer chose D3 for a recent visualization contest, highlighting the emotional impact of dynamic graphics: "These transitions are amazing! Just playing around with them gives such great effects and inspiration for more."</p><p>While we can quantify performance, accessibility is far more difficult to measure. The true test of D3's design will be in user adoption; initial feedback has been positive. A Protovis expert writes, "The transformations are actually very easy to work with, perhaps even more simple than in Protovis. It's very straightforward." However, one user found the learning curve "much steeper than Protovis", while another writes, "It took me a little while to get my head around your interface and general philosophy, but that process has given me valuable insights into the nature and meaning of our data." Part of the issue may be the complexity of the SVG specification: "The key [to] learning D3 at this stage seems to be to study the SVG spec, and to inspect the SVG generated by D3 [emphasis added]. After a few iterations it all begins to make perfect sense." Users thus appreciate compatibility with developer tools.</p><p>We also find that post-hoc manipulation of visualizations through the developer console is a unique and compelling benefit of D3's design. Using "sticky" data, elements can be selected and new operators applied to change appearance or behavior. This facilitates rapid iteration: for example, we adjusted the color scale of one user's chart to improve differentiation <ref type="figure" target="#fig_3">(Figure 4)</ref>, and added event listeners to another's to coordinate views. Combined with the ability to view source on any visualization, we have high hopes for D3's collaborative potential.</p><p>By building on key standards, D3 keeps pace with the evolving technological ecosystem of the web, improving expressiveness and accessibility. We believe D3 is well-positioned to let designers immediately take advantage of new browser features as they are added. While work remains to expand our collection of specialized modules, D3's core language provides an efficient foundation for specifying rich, dynamic visualizations on the web. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Treemaps made with D3. The visualizations are implemented in pure HTML &amp; CSS, improving browser compatibility. A stable layout algorithm enables animated transitions for changing cell values (from left to right) without disorienting rearrangements.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>A simple document transformation that colors paragraphs white. (a) W3C DOM API; (b) CSS; (c) jQuery; (d) D3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Google Chrome's developer tools. The top regions inspect (a) the document hierarchy and (b) inherited style properties; underneath, (c) the console allows interactive evaluation of JavaScript. (d) The current document: an area chart. (e) The area chart modified through the console.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>JavaScript CSS var x = function(d, i) { return i * 25; }, y = function(d, i) { return 160 -d * 80; }; a var svg = d3.select("body").append("svg:svg") .data([[1, 1.2, 1.7, 1.5, .7, .5, .2]]); b c d var g = svg.selectAll("g")</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Specification of the area chart shown in Figure 4. (a) Define scale functions for position encoding. (b) Add an SVG container to the document body and bind data. (c) Add a path element for the area. (d) Add a path element to emphasize the top line. (e) Add containers for reference values. (f) Add reference lines. (g) Add reference labels. (h) Assign colors and other aesthetics with CSS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>A simple pie chart, . (a) Protovis; (b) D3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Noncontiguous cartogram of obesity rates (BMI â¥ 30) made with D3. Values range from 10.0% (Colorado) to 20.1% (Indiana).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Visual explanation of BÃ©zier curve interpolation by Jason Davies. From left to right: quadratic, cubic, and quartic curves with t=0.76.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Performance benchmarks. Initialization times (top) and frames rates (bottom) for a scatterplot matrix (left) and stacked graph (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 11 .</head><label>11</label><figDesc>Visualizations used in our benchmarks. (a) Scatterplot matrix with brushing &amp; linking. (b) Animated stacked graph.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>The "magic" local context is convenient</figDesc><table><row><cell>new pv.Panel()</cell></row><row><cell>.data([[1, 1.2, 1.7, 1.5, .7]])</cell></row><row><cell>.width(150)</cell></row><row><cell>.height(150)</cell></row><row><cell>.add(pv.Wedge)</cell></row><row><cell>.data(pv.normalize)</cell></row><row><cell>.left(75)</cell></row><row><cell>.bottom(75)</cell></row><row><cell>.outerRadius(70)</cell></row><row><cell>.angle(function(d) d * 2 * Math.PI)</cell></row><row><cell>.root.render();</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors thank Nelson Minar, Jason Davies, Vijay Chakravarthy, Jan Willem Tulp and Tom Carden for their insight and support. This work was partially supported by The Boeing Company.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Brushing scatterplots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">S</forename><surname>Cleveland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Technometrics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="127" to="142" />
			<date type="published" when="1987-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Protovis: A graphical toolkit for visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Vis and Comp Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1121" to="1128" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Squarified treemaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Bruls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huizing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Joint Eurographics and IEEE TCVG Symposium on Visualization</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="33" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Stacked graphs -geometry &amp; aesthetics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Byron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. and Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1245" to="1252" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Readings in information visualization: using vision to think</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Morgan Kaufmann</publisher>
			<pubPlace>San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Scalable, versatile and simple constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EuroVis</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The InfoVis Toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE InfoVis</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="167" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Colorbrewer.org: An online tool for selecting color schemes for maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Harrower</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Cartographic Journal</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="27" to="37" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">ThemeRiver: Visualizing theme changes over time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Havre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hetzler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Nowell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE InfoVis</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page">115</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Software design patterns for information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Agrawala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Vis and Comp Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="853" to="860" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Declarative language design for interactive visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Vis and Comp Graphics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1149" to="1156" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">prefuse: a toolkit for interactive information visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Landay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM CHI</title>
		<meeting>ACM CHI</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="421" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Animated transitions in statistical data graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Vis and Comp Graphics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1240" to="1247" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Building domain-specific embedded languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hudak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page">196</biblScope>
			<date type="published" when="1996-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Animation support in a user interface toolkit: Flexible, robust, and reusable abstractions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hudson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM UIST</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="57" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<ptr target="http://thejit.org/" />
		<title level="m">JavaScript InfoVis Toolkit</title>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Circos: An information aesthetic for comparative genomics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Krzywinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Birol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Connors</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gascoyne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Horsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Marra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Genome Research</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1639" to="1645" />
			<date type="published" when="2009-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Cascading Style Sheets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">W</forename><surname>Lie</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
		<respStmt>
			<orgName>University of Oslo</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mayer</surname></persName>
		</author>
		<ptr target="http://www.youtube.com/watch?v=6x0cAzQ7PVs" />
		<title level="m">Google I/O keynote</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<ptr target="http://mootools.net/" />
		<title level="m">MooTools</title>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">The Psychology of Everyday Things</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Norman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>Basic Books</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Noncontiguous area cartograms. The Professional Geographer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Olson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1976-11" />
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="371" to="380" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Robert penner&apos;s easing equations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Penner</surname></persName>
		</author>
		<ptr target="http://www.robertpenner.com/easing/" />
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Pad: an alternative approach to the computer interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH 93</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="57" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>RaphaÃ«l</surname></persName>
		</author>
		<ptr target="http://raphaeljs.com/" />
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Tree visualization with tree-maps: 2-d space-filling approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="92" to="99" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Focus+context display and navigation techniques for enhancing radial, space-filling hierarchy visualizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Info-Vis</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="57" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>The Dojo Toolkit</surname></persName>
		</author>
		<ptr target="http://dojotoolkit.org/" />
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title/>
		<ptr target="http://geojson.org/" />
	</analytic>
	<monogr>
		<title level="j">The GeoJSON Format Specification</title>
		<imprint>
			<date type="published" when="2008-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<ptr target="http://www.r-project.org/" />
		<title level="m">The R Project for Statistical Computing</title>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Graphing software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Tufte</surname></persName>
		</author>
		<ptr target="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=00000p" />
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Baby names, visualization, and social data analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wattenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE InfoVis</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Building highly-coordinated visualizations in Improvise</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE InfoVis</title>
		<meeting>IEEE InfoVis</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="159" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">ggplot2: Elegant Graphics for Data Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wickham</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The Grammar of Graphics (Statistics and Computing)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wilkinson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Secaucus, NJ</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Xsl Transformations</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/xslt" />
		<imprint>
			<date type="published" when="1999-11" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
