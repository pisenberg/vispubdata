<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Real-Time Visualization of Scalably Large Collections of Heterogeneous Objects</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglass</forename><surname>Davis</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">GVU Center Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">GVU Center Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Y</forename><surname>Jiang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">GVU Center Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolas</forename><surname>Faust</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">GVU Center Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Ho</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">GVU Center Georgia Institute of Technology</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Real-Time Visualization of Scalably Large Collections of Heterogeneous Objects</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>visualization</term>
					<term>3D objects</term>
					<term>terrain</term>
					<term>large scale data</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper presents results for real-time visualization of out-of-core collections of 3D objects. This is a significant extension of previous methods and shows the generality of hierarchical paging procedures applied both to global terrain and any objects that reside on it. Applied to buildings, the procedure shows the effectiveness of using a screen-based paging and display criterion within a hierarchical framework. The results demonstrate that the method is scalable since it is able to handle multiple collections of buildings (e.g., cities) placed around the earth with full interactivity and without extensive memory load. Further the method shows efficient handling of culling and is applicable to larger, extended collections of buildings. Finally, the method shows that levels of detail can be incorporated to provide improved detail management.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>We have recently shown how intent and perception can be used to significantly improve out-of-core visualization of large scale terrain <ref type="bibr" target="#b0">[1]</ref>. This paper demonstrates that these techniques can be generalized and applied to heterogeneous data. Although we deal here with geospatial objects, there is no reason why one could not employ a similar framework for time-dependent, 3D data. The importance of the present paper is that it lays out a general set of methods for effective out-of-core visualization and then applies them to discrete, static objects, such as buildings, that are quite different from the continuous terrain studied previously. In this paper we show how our techniques can be applied to large collections of buildings, several hundred or more in each collection, that may be distributed at many spots throughout the world. Efficient out-of-core visualization methods permit timely paging of building data in support of real-time navigation. Our approach uses an efficient ________________________ GVU Center, Georgia Tech, Atlanta, GA 30332-0280 Email:</p><p>{dougd, ribarsky, jiangf}@cc.gatech.edu, nick.faust@gtri.gatech.edu, sean@arl.mil quadtree hierarchical structure appropriate for global terrain <ref type="bibr" target="#b1">[2]</ref> at the top level followed by methods appropriate for 3D object detail management at lower levels. The quadtree level at which the change-over occurs from the quadtree hierarchy to the 3D object management structure will depend on the nature of the objects. The levels will be different, for example, for collections of buildings of a certain range of sizes versus vehicles. We provide a basis for determining this level.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>We have considered how out-of-core visualization applies to terrain datasets <ref type="bibr" target="#b0">[1]</ref>. We found that a combination of out-of-core visualization, which tends to focus on 3D data, and visual simulation, which places an emphasis on visual perception and real-time display of multiresolution data, results in interactive terrain visualization with significantly improved data access and quality of presentation. Davis et. al. <ref type="bibr" target="#b0">[1]</ref> consider only terrain whereas the present paper generalizes to collections of 3D objects and provides criteria for detail management based on density and size distribution of objects.</p><p>Over the years there have been several methods that have been developed and used to cope with large amounts of data <ref type="bibr" target="#b2">[3]</ref>. In early research, George and Rashwan used auxiliary storage methods to solve finite element problems <ref type="bibr" target="#b3">[4]</ref>. Liu <ref type="bibr" target="#b4">[5]</ref> applied an out-of-core multifrontal method for sparse factorization.</p><p>Recently there has been work that addresses interactive visualization of very large, out-of-core datasets. From what has been done so far, it is clear that applicationcontrol and domain-dependent data organization are essential to achieving good performance. Relying on system virtual memory, for example, frequently results in thrashing and abysmal performance. Ueng et. al. <ref type="bibr" target="#b5">[6]</ref> apply an application-controlled segmentation approach to outof-core visualization. They spatially and hierarchically partition the dataset into an octree and load only needed segments. One problem with their approach is how to determine segment boundaries. Cox and Ellsworth present application-controlled demand-paging <ref type="bibr" target="#b6">[7]</ref>, in which the system knows something about what data are needed and when. By considering operating system memory management, they minimize thrashing. Zyda and coworkers <ref type="bibr" target="#b7">[8]</ref> came up with a hierarchical quadtree data structure by evenly subdividing data into square quadnodes and rendering with regular grid polygonalizations. Based on this regular grid they develop a paging method that takes into account the viewpoint and speed of the user. Quite recently Chiang et. al. <ref type="bibr" target="#b8">[9]</ref> have developed an interactive technique for out-of-core isosurface extraction from volume data. They developed a meta-cell technique for partitioning the original data and an indexing scheme for efficiently making isosurface queries into the metacells, which reside on disk, to bring in the appropriate data for constructing the isosurface. All the above out-of-core techniques consider the paging of continuous volumetric or terrain data. None considers application to collections of discrete 3D objects, as we do here.</p><p>The need to handle scalably large collections of buildings has come to the fore because there are improved methods to extract such data <ref type="bibr" target="#b9">[10]</ref> and because applications requiring accurate display of urban data (such as emergency response, urban planning, or urban warfare) are growing in importance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PlACING 3D OBJECTS IN A GEOSPATIAL HIERARCHY</head><p>The forest of quadtrees has proven capability for handling global terrain <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. When considering buildings or other geospatial collections of objects, we would like to build on this structure, at least at the top level. If we have several cities in our global dataset, we want to quickly determine that the viewer is navigating towards, say, Los Angeles and does not need detailed data for Bombay, Houston, or even San Francisco. Further, as the user navigates the greater LA area and gets close enough to view individual blocks of buildings in, say, Anaheim, we don't want to page in and individually test buildings from Pasadena.</p><p>On the other hand, when the user can discern individual buildings or groups of buildings, it is more appropriate to use methods focused on managing detail for the individual buildings or groups. The question is: at what level should this change-over be made? We present below an analysis of when this should occur. In the following we show how large collections of buildings or other objects can efficiently fit into the geospatial hierarchy. A full exposition of detail management for the groups of buildings is beyond the scope of this paper, but we show where such methods would fit and implement some simple techniques.</p><p>The top level hierarchy is shown in <ref type="figure">Fig. 1</ref>. The earth is divided into 32 zones, with each zone containing a quadtree <ref type="bibr" target="#b1">[2]</ref>. For the buildings or other objects, the quadtree goes to a certain level after which there is a nonquadtree detail management scheme. What should this level be? Let us assume a quadcell of side L q. (The bounding box and bounding dimension in Figs. 1 and 2 would be of order L q .). Now let's assume an object with maximum dimension L o . If L o &lt; L q , then only the 8 surrounding quadcells might contain objects that would extend into a central quadcell. In fact if we divide the central cell into 4 quadrants and further assume that all objects are placed in the quadcells that contain their centers, the maximum number of quadcells whose objects could overlap this quadrant would be 4, the central cell plus the 3 nearest quadcells to the quadrant. Our approach is to go as deeply as possible using the very efficient quadtree but not to permit more than 4 neighboring (or "linked") cells for considering overlapping objects, since there will be increased overhead from keeping track of the links and from having to consider all the objects in the linked cells. The collection of objects in the linked cells would have to be considered in view frustum culling, collision detection, and many other operations. Thus we choose cells for which L o &lt; L q but these dimensions are close in size. For buildings in an urban setting, L o could be about 50 meters, the dimension of a typical city block. If a typical building is the size of a house, say 10 meters on a side, we would have to consider on average no more than 100 or so buildings for 4 linked cells. Note that occasionally we will have to consider linked cells that could be in multiple quadtrees.</p><p>The hierarchy permits a simple but effective detail management process. Object pointers are loaded at the quadlevel determined as described above. Accompanying the pointer is the object location and a bounding dimension obtained from the largest dimension of the object bounding box. Using the viewpoint, object location, and bounding dimension, the system finds a maximum size for the object in screen space in terms of pixels. (See <ref type="figure">Fig. 2.)</ref> However, what about extended objects such as a stadium, the Pentagon, the Vehicle Assembly Building at the Kennedy Space Center, or very large objects created via detail management? The latter might require considering several blocks as one object. If we use the largest such object in the database to determine the leaf node level of the quadtree, we might also end up with cells containing several hundred smaller objects. To obviate this problem we have discrete representations of such large objects at successive levels of the quadtree, each representation carrying its own list of linked cells. Thus if we flew from outer space down towards an urban area, we might first see a phototextured shape representing the downtown area, which would then be replaced by more detailed shapes representing collections of blocks and tall landmark buildings, and finally these would be replaced by shapes for individual buildings. Although the present system switches between discrete representations, one can imagine a more sophisticated process with more continuous switching of detail.</p><p>Since such large objects are relatively small in number, we can handle them reasonably efficiently even though they carry their own lists and descriptions. Also such representations usually occur before the appearance of large numbers of smaller objects. When considering small buildings at urban densities, however, we use our more automated and compact linked cell mechanism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">HIERARCHICAL STRUCTURE FOR OPTIMIZED PAGING</head><p>As discussed above our global structure is divided into 32 zones, each 45 o x 45 o <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. Each quadrant has its own quadtree; all are linked so that objects or terrain crossing quadrant boundaries can be rendered correctly. To improve performance, the system is divided into multiple threads that can run in parallel. In particular, there is an independent rendering thread, which has a "triple buffer" of display lists. One of the display lists contains what the renderer is currently drawing, one is used by the scene manager to buffer graphics commands, and the last contains data that are ready to be displayed.</p><p>Both the object and terrain paging threads have a server and manager. The object server loads pages from disk while the manager decides which cells should be loaded (taking into account user viewpoint and navigational speed) and passes it along to the scene manager. The object server and manager communicate with the scene manager and the rest of the system via shared caches, so that communication is limited to small request messages and acknowledgments. This communication path supports a demand-paging approach such as that of Cox and Ellsworth <ref type="bibr" target="#b6">[7]</ref>. When data are needed for a node in the quadtree, the scene manager allocates space in the shared cache and sends a message via a shared memory priority queue to the object manager. Message priorities in this queue are changed dynamically according to the importance of the associated request as determined by the terrain manager. Thus, requests that gradually become less important sift towards the end of the queue and get serviced only when no higher priority requests remain in the queue.</p><p>The underlying disk management system has a file structure with files aligned with the quadnodes in the set of linked quadtrees. Put together, all this makes the object and terrain visualization system quite scalable. Tens to hundreds of gigabytes of data may be made available for visualization, either locally or remotely.</p><p>Object Page Scheduling. We have found that the above page priority procedure sometimes falls short when handling global data. Users of such data frequently fly quickly from a global view where the terrain elevation and imagery data are at 8 Km resolution to views close to the ground where the data are at 1 M resolution or higher, and there may be hundreds or more buildings in view. If the user flies in too fast, the traversal of linked quadtrees by the terrain manager falls well behind the user's navigation. The process can stall in this case, and the pages for the scene currently in view can take quite long to arrive.</p><p>Unfortunately the system cannot just jump to the appropriate position in the quadtree. The quadtree has to be traversed to get important properties information, especially quadcell linking data but also geospatial bounding boxes and other data, that are necessary to determine if the object data should be displayed or not. To address this problem we created a modified version of the separate set of indexing trees used in the terrain paging system <ref type="bibr" target="#b0">[1]</ref>. This separate structure provides properties information but is lightweight so it can be traversed quickly. Large segments of the indexing trees reside in main memory for fast access. With the flexibility of this scheme we can skip one or more levels before paging in object data. A predictive mechanism is instituted based on user navigational speed and viewing direction to help predict where the terrain manager should skip.</p><p>Since the scene manager is receiving continuous updates from the user via the user interface, it can use these in its requests to the object manager. The scene manager can, for example, expend more detail on buildings or other objects in the center of the screen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">BUILDING DISPLAY RESULTS</head><p>We present results for a collection of 471 textured buildings on our global terrain database. The terrain has worldwide coverage at 8 Km, U.S. data at 1 Km, Georgia at 100 M, and several insets ranging from 10 M to 0.5 M. The total size of the terrain alone is 1.5 GB. The 471 buildings are for downtown Atlanta and are thus placed on top of high resolution terrain data at 1 M resolution. When buildings are added without the hierarchical paging structure, the frame rate drops from 15-20 frames per second to 7 frames per second, even on the SGI Infinite Reality. We have lately developed faster object rendering (not used in the results of this paper), but frame rate still slows considerably when buildings are loaded.</p><p>The frame rates indicated in <ref type="figure">Figs. 3-7</ref> (the first number in the lower left corner) were obtained on an SGI Infinite Reality with 4 R10000 processors, 1 GB of memory, and 27 GB of disk. All results depicted were obtained on continuous fly-in or fly-out with no pauses (except for the skyline in <ref type="figure">Fig. 7</ref> where there was a pause during switch from fly-in mode to parallel-to-the-earth mode). The fly-in rate was such that one could navigate from a whole earth view at over 10,000 Km to 10 M above the earth (in an area with high resolution data) in 30 seconds.</p><p>For the results presented in <ref type="figure">Fig. 4</ref>, any object with bounding dimension greater than 1 pixel is loaded and displayed, using the procedure in Sec. 3. This conservative approach works well; the largest buildings in the database don't appear until the user navigates to about 160 Km away from them. No buildings are paged in until this point, and frame speed does not slow perceptibly until the buildings are paged in. (See <ref type="figure" target="#fig_2">Figs. 4, 6</ref> and 7.) This shows the efficient scalability associated with our hierarchical paging process. Buildings in groups of any size could be placed all over the earth and neither performance nor memory load would be affected till the user is relatively close to them. Of course we could also apply a more sophisticated boundary dimension that would take into account orientation of the object.</p><p>Note that the hierarchical paging works for any objects including those representing collections of buildings. We have used this to do simple detail management. We have preprocessed the buildings to produce 3 levels of detail, a shape representing the extent and simplified skyline for the whole collection of buildings, and two other sets of objects representing portions of the building collection. These objects were placed at appropriate (higher) levels of the quadtree in <ref type="figure">Fig.1</ref>. A threshold of 1 pixel was set for these objects and 10 pixels for the individual buildings. When the underlying buildings are paged in the higher level objects disappear. By comparing Figs. 4 and 5, one sees that this permits significantly higher frame rates until the viewer is much closer to the buildings than before, while still retaining detail about the location and shape of the building collection.</p><p>Additionally, the hierarchy aids in culling when the viewer is panning or flying around the buildings. Comparing Figs. 6 and 7 with <ref type="figure">Fig. 4</ref> shows this clearly as the former have higher frame rates because some of the buildings are culled. Buildings not close to the view frustum are not even paged in. This makes feasible the handling of extended building collections that are much larger than the one considered here. In fact, we are planning to test such an extended collection by replicating the current set of buildings several times side-by-side.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>We have presented results for real-time visualization of out-of-core collections of 3D objects. This is a significant extension of previous methods and shows the generality of hierarchical paging procedures applied both to global terrain and any objects that reside on it. Applied to buildings, the procedure shows the effectiveness of using a screen-based paging and display criterion within a hierarchical framework. The screen-based tolerance is adjustable and directly provides a control for image quality.</p><p>The results demonstrate that our method is scalable since it is able to handle multiple collections of buildings (e.g., cities) placed around the earth with full interactivity and without extensive memory load. Further the method shows efficient handling of culling and is applicable to larger, extended collections of buildings. Finally, the method shows that levels of detail can be incorporated to provide improved detail management.</p><p>We plan to extend object detail management by providing more accurate levels of detail, as depicted in <ref type="figure">Fig. 1</ref>. Our goal will be automatic procedures that can be applied during preprocessing. We will also consider dynamic control of levels of detail for building and other features (such as streets and trees) beyond the quadtree hierarchy.   </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 Figure 3 Figure 5</head><label>135</label><figDesc>Hierarchical &amp; object levels of detail Overview with no buildings paged in View with highest level of detail replacing buildings. Frame rate is 29 frames per second.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 7 Figure 2 Figure 4</head><label>724</label><figDesc>View of buildings in flying modeBounding dimension Screen-based threshold using bounding dimension View with buildings at one pixel threshold (indicated by arrow). Frame rate is 8 frames per second.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 6</head><label>6</label><figDesc>Closer view with all buildings. Frame rate is 11 frames per second.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was performed in part under contract DAKF11-91-D-004-0034 from the U.S. Army Research Laboratory. We would like to thank Larry Tokarcik and his team at the Army Research Laboratory for supplying data used in this work. We would also like to thank the reviewers, whose comments improved the clarity of the paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Intent, Perception, and Out-of-Core Visualization Applied to Terrain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglass</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolas</forename><surname>Faust</surname></persName>
		</author>
		<idno>GIT-GVU- 98-12</idno>
		<imprint>
			<biblScope unit="page" from="455" to="458" />
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
	<note>IEEE Visualization &apos;98</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">An Integrated Global GIS and Visual Simulation System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larry</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Faust</surname></persName>
		</author>
		<idno>GIT-GVU-97-07</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Fast Fourier Transform of Externally Stored Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">M</forename><surname>Brenner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Audio and Electroacoustics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="128" to="132" />
			<date type="published" when="1969" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Auxiliary Storage Methods for Solving Finite Element Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>George</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rashwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J Scientific and Statistical Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="882" to="910" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">On the Storage Requirement in the Outof-Core Multifrontal Method for Sparse Factorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W H</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Math. Software</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="249" to="264" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Out-of-Core Streamline Visualization on Large Unstructured Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Ueng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sikorski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="370" to="379" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Application-Controlled Demand Paging for Out-of-Core Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ellsworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings, IEEE Visualization &apos;97</title>
		<meeting>IEEE Visualization &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="235" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">NPSNET: Hierarchical Data Structures for Real-Time Three-Dimensional Visual Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Falby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Zyda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Mackey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="69" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Interactive Out-of-Core Isosurface Extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;98</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="167" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Semi-Automated and Interactive Construction of 3D Urban Terrains. Accepted for publication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Wasilewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolas</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Ribarsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SPIE Aerospace/Defense Sensing, Simulation &amp; Controls Symposium</title>
		<meeting>the SPIE Aerospace/Defense Sensing, Simulation &amp; Controls Symposium</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
