<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multiresolution Techniques for Interactive Texture-Based Volume Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Lamar</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Center for Image Processing and Integrated Computing Department of Computer Science</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95616-8562</postCode>
									<settlement>Davis</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernd</forename><surname>Hamann</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Center for Image Processing and Integrated Computing Department of Computer Science</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95616-8562</postCode>
									<settlement>Davis</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">I</forename><surname>Joy</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Center for Image Processing and Integrated Computing Department of Computer Science</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95616-8562</postCode>
									<settlement>Davis</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Multiresolution Techniques for Interactive Texture-Based Volume Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:40+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>multiresolution rendering</term>
					<term>volume visualization</term>
					<term>hardware texture</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present a multiresolution technique for interactive texture-based volume visualization of very large data sets. This method uses an adaptive scheme that renders the volume in a region-of-interest at a high resolution and the volume away from this region at progressively lower resolutions. The algorithm is based on the segmentation of texture space into an octree, where the leaves of the tree define the original data and the internal nodes define lower-resolution versions. Rendering is done adaptively by selecting high-resolution cells close to a center of attention and low-resolution cells away from this area. We limit the artifacts introduced by this method by modifying the transfer functions in the lower-resolution data sets and utilizing spherical shells as a proxy geometry. It is possible to use this technique to produce viewpoint-dependent renderings of very large data sets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The capability of computing technology has steadily increased for more than four decades and continues to increase rapidly. These increased computing capabilities have enabled applications to scale accordingly in overall throughput and resulting data set sizes. However, current visualization techniques break down when operating in this environment due to the massive size of the data sets. New techniques are necessary to provide exploration of large, multidimensional data sets.</p><p>In this paper, we combine hardware-assisted texture mapping and multiresolution methods for rendering large volumetric data sets. The general idea is to assign priorities to different regions of the volume and to render the high-priority regions with highest accuracy, while lower-priority regions are rendered with progressively less accuracy, and progressively faster.</p><p>We use an octree to decompose texture space and produce several coarser levels of the original data set. Each level is associated with * {lamar,hamann,joy}@cs.ucdavis.edu a level in the octree and each level is half the resolution of the next level. The leaf nodes are associated with the original resolution, and the root node with the coarsest resolution. The interior nodes are created by subsampling the node's eight child nodes.</p><p>Rendering a volume involves traversing the octree and applying a selection filter to each node. Three results are possible: <ref type="bibr" target="#b0">(1)</ref> The node (and its children) are skipped entirely; (2) the node is skipped, but its children are visited; or (3) the node is rendered, and the children are skipped. The selected nodes are then sorted and rendered in back-to-front order. We use spherical shells for proxy geometries for accuracy under perspective projections.</p><p>Section 2 contains a survey of related work. Section 3 discusses data issues for the multiresolution representation of textures, and Section 4 addresses the rendering of these textures. Section 5 shows results of the method on a number of data sets and gives performance results. Conclusions and future work are presented in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>High-performance computer graphics systems are evolving rapidly. Silicon Graphics, Inc. (SGI) has been a primary developer of this rendering technology, introducing the RealityEngine graphics system <ref type="bibr" target="#b0">[1]</ref> in 1994 and the InfiniteReality graphics system <ref type="bibr" target="#b1">[2]</ref> in 1998. SGI has also extended its graphics library OpenGL <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref> to take advantage of this hardware. These systems provided the initial capability for hardware-based rendering using solid textures.</p><p>Cabral et al. <ref type="bibr" target="#b4">[5]</ref> show that volume rendering and reconstruction integrals are generalizations of the Radon and inverse Radon transforms. They show that the Radon and inverse Radon transforms have similar mathematical forms, and by developing this relationship, show that both volume rendering and volume reconstruction can be implemented with hardware-accelerated textures. Thus, their algorithms execute many times faster than traditional software approaches.</p><p>Cullip and Neumann <ref type="bibr" target="#b5">[6]</ref> discuss general implementation issues for hardware textures and are the first to generate pictures using this technique based on two different transfer functions. Their work illustrates the superiority of viewport-versus object-aligned sampling planes.</p><p>Wilson et al. <ref type="bibr" target="#b6">[7]</ref> and Van Gelder and Kim <ref type="bibr" target="#b7">[8]</ref> develop the mathematics for generating texture coordinates. Van Gelder and Kim also introduce a quantized gradient method for shading. Here, a triangulated sphere describes quantized normals which, when coupled with a quantized set of material values, allows the construction of a look-up  <ref type="figure">Figure 1</ref>: A one-dimensional texture tile containing eight pixels. The tile is one pixel larger than the texture function domain. We assume that the half-pixels at the edges are constant. orthographic and perspective projections. However, low gradient regions show traditional quantization artifacts.</p><p>Westerman et al. <ref type="bibr" target="#b8">[9]</ref> show how to visualize isosurfaces resulting from rectilinear and unstructured grids. They use fragment testing to draw only those pixels that have a density value over a given threshold. Rectilinear grids are rendered by solid-texturing, which is shown to be much faster than the unstructured grid method. They also demonstrate how shade the texture-based isosurfaces with a technique that performs the shading as the texture map is transfered to the texturing subsystem.</p><p>Grzeszczuk et al. <ref type="bibr" target="#b9">[10]</ref> enumerate most methods for using hardware-accelerated texturing to provide interactive volume visualization. They also introduce a library for texture-based rendering called Volumizer, see <ref type="bibr" target="#b10">[11]</ref>.</p><p>Massively parallel computers have been used to provide interactive volume visualization and isosurface extraction, see <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b13">[14]</ref>, and <ref type="bibr" target="#b14">[15]</ref>. Both ray-tracers and marching-cubes algorithms have been implemented, and both are very parallelizable. The overhead of data distribution and image composition is very high, and requires careful partitioning and tuning.</p><p>Our new method differs from these prior approaches in the sense that we allow adaptive rendering of a volume. Prior algorithms assume that the data is "uniformly complex" and "uniformly important." This is not the case, for example, in an immersive environment, where data closer to the viewer has more visual importance than data far away. Also, quality should be a "tunable" parameter: If a graphics supercomputer is not available or a user just wishes to quickly browse a data set, then the user will be satisfied with a poorer rendering quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">GENERATING THE TEXTURE HIERAR-CHY</head><p>In hardware texturing algorithms, linear interpolation is used to interpolate the values at the centers of adjacent pixels. If we consider the one-dimensional example shown in <ref type="figure">Figure 1</ref> and assume that the "tile" contains p pixels, then the texture function domain is the interval</p><formula xml:id="formula_0">[ 1 2p , 2p−1 2p ].</formula><p>If the unused half-pixels are clipped, a larger texture can be broken into a set of smaller textures or tiles, where interior edge pixels are duplicated between adjacent tiles. This technique is known in the literature as "bricking," see <ref type="bibr" target="#b9">[10]</ref>.</p><p>In <ref type="figure">Figure 2</ref>, we show a two-level texture hierarchy. The higherresolution texture is denoted as level A, with tiles A 0 and A 1 , and the lower-resolution one as level B. The grey regions at the ends are unused, and the grey region shared by A 0 and A 1 indicates the "overlay pixel." The image represented by A can be approximated by B. The image represented by B has the same number of pixels as A 0 or A 1 , and half the number of pixels of A. We note that the natural relationship for two textures whose resolutions differ by a factor of two is using pixel-center alignment. In the binary tree arrangement defined by this one-dimensional texture B is the parent of A 0 and A 1 .  <ref type="figure">Figure 4</ref>.) <ref type="figure">Figure 5</ref> shows a two-dimensional quadtree example. The original texture, level 0, has 256 tiles. The darker regions in each level show the portion of that level used to approximate the full image. The selection method is similar to the one-dimensional case: Select a node if the distance from the center of the node to the point p is greater than the length of the diagonal of the node. The original texture, divided into 256 tiles, requires 256 time units to render. The adaptive rendering requires 49 time units, which implies a speed-up factor of approximately five. This formulation extends in a straightforward manner to three-dimensional textures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Multiresolution Texture Hierarchy</head><p>We generate a texture hierarchy by subsampling textures. <ref type="bibr" target="#b0">1</ref> Subsampling chooses every other voxel when generating a lowerresolution data set; e.g., if A is a linear array of 2n elements and B is a linear array of n elements that approximates A, then we generate the elements of B as Bi = A2i, i = 0, 1, . . . , n − 1.</p><p>How much memory is wasted by breaking a volume into bricks? The waste is generated by the outer layer of voxels, which is shared by adjacent tiles. If a brick has size n (n 3 voxels) and is surrounded by a half-voxel layer of duplicate voxels, the effective size of a brick is n − 1, and there are n 3 − (n − 1) 3 "waste" voxels. The waste relative to the tile size is O(n 2 /n 3 ) = O(n −1 ), which means that as the tile size increases the relative waste decreases. <ref type="bibr" target="#b1">2</ref> If we choose <ref type="bibr" target="#b0">1</ref> We have also tried several other methods, including averaging techniques, but the results are substantially better using subsampling for the data sets used in this study. <ref type="bibr" target="#b1">2</ref> The total waste still increases. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RENDERING</head><p>The rendering phase is divided into three steps: (1) Selecting tiles to render; (2) sorting the tiles; and (3) rendering the tiles using a proxy geometry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Selecting Tiles</head><p>The first rendering step determines which tiles will be rendered. The general filtering logic starts at the root tile and performs a depth-first traversal of the octree. At each tile, we evaluate a selection filter, which returns one of three possible responses:</p><p>• Ignore this tile and all of its children. This response is used to cull the tree. For example, if a tile is not in the view frustum, then we can ignore the tile and its children.</p><p>• The tile satisfies all criteria. Render the tile and do not consider the children.</p><p>• The tile does not satisfy the criteria. Check the children of the tile.</p><p>Our primary selection filter is based on one of the following criteria:</p><p>• Distance. This filter selects a tile if the distance from the viewpoint to the center of the tile is greater than the diagonal length of the tile.</p><p>• Field-of-View. This filter selects a tile if it intersects the view frustum and the projected angle of the tile is less than half the view frustum's field-of-view angle, see <ref type="figure" target="#fig_2">Figure 6</ref>.</p><p>Tiles must be sorted and composited in back-to-front order. We order tiles with respect to a view direction such that, when drawn in this order, no tile is drawn behind a rendered tile. The order is fixed for the entire tree for orthogonal projections, and has to be computed just once for each new rendering, see <ref type="bibr" target="#b9">[10]</ref>. The order is not fixed for perspective projections, and it must be computed at each new node. <ref type="figure">Figure 7</ref>: Spherical shells intersecting the voxelized data set. These shells provide a proxy geometry that can be adapted to the location of the viewpoint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Proxy Geometries</head><p>Texture-based volume visualization requires proxy geometries on which to render the texture. Object-aligned planes and viewportaligned planes are two traditional techniques, but they lead to serious artifacts under perspective projections. To deal with these artifacts, we use "spherical shells" -finely tessellated concentric spheres surrounding the viewpoint, culled to the view frustum. <ref type="figure" target="#fig_3">Figure 8</ref> shows the differences when object-aligned planes, viewport-aligned planes, and spherical shells are used as proxy geometries on a constant texture defined over a cube.</p><p>Object-aligned planes (OAP) are implemented with twodimensional textures on polygons aligned with the xy-, yz-, and xz-planes of the volume. This is the fastest method, and it is supported by most contemporary graphics workstations. However, three sets of polygons must be maintained. If only one set is used, certain viewpoints will lead to an "edge-on situation," and nothing will be rendered. Also, the light attenuation is not computed correctly as the projected distance between polygons is not constant. This error is worst for an angle of 45 o . <ref type="figure" target="#fig_4">Figure 9</ref> illustrates multiresolution OAP in two dimensions. Here, OAPs planes must be generated independently for each tile, generating substantial artifacts at the boundaries of the tiles.</p><p>Viewport-aligned planes (VAP) are implemented with threedimensional textures and polygons that are aligned parallel to the viewport. Only one texture set is required. All orthographic projections yield visually correct results. Three-dimensional texturing is currently only supported on high-end workstations. Rendering based on VAPs is generally less than half as fast as OAPs because (1) the Nyquist sampling theorem requires twice the number of polygons as OAPs requires, and (2) the underlying computations are more complex. <ref type="figure" target="#fig_5">Figure 10</ref> shows the use of multiresolution VAPs. This technique creates strong artifacts under perspective projections. The tiles are rendered with a differently oriented set of polygons, and these polygons do not meet at the tile borders. This creates an artifact reminiscent of the "cracking" artifact from multiresolution polygonal schemes, and it manifests itself as light-and-dark alternating bands at the tiles boundaries.</p><p>Viewpoint-centered spherical shells (VCSS) are implemented with three-dimensional textures and use concentric spherical shells centered at the viewpoint, culled to the view frustum. This technique does not produce artifacts under perspective projections, but it is slower than VAPs due to the increased geometric complexity required to approximate a spherical shell. In <ref type="figure">Figure 7</ref>, the view-    ¢ ¡ £ ¥ ¤ ¦ ¥ § © <ref type="figure">Figure 12</ref>: When the space is sampled at two different resolutions, the colors C and C should be the same.</p><p>point is on the left-hand side, almost touching the volume. The sample interval is exaggerated to show the structure -one shell every two voxels. <ref type="figure" target="#fig_6">Figure 11</ref> illustrates multiresolution VCSSs. Using this approach, one can achieve continuity across tile faces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Preserving Visual Properties</head><p>When rendering tiles at different levels of the hierarchy, the opacity properties of the tiles are different. The classical rendering algorithms depend on using the same sampling along rays for each pixel, see <ref type="bibr" target="#b15">[16]</ref>. But in the context of a multiresolution format, the the volume is sampled in different ways, and at varying resolutions. To preserve optical properties between tiles of different resolutions, we must modify the transfer functions for those tiles generated by subsampling the original texture. <ref type="figure">Figure 12</ref> shows an example where we have sampled a texture with spherical shells at two different resolutions -one is half the resolution of the other. Each sample si has an associated color ci and an opacity value αi. The light emitted by si is a function of the incoming light, and the color and opacity properties of the sample itself. Following <ref type="bibr" target="#b15">[16]</ref>, the color C resulting from the higherresolution sampling is</p><formula xml:id="formula_1">C = α0c0 + (1 − α0)C1,<label>(1)</label></formula><p>where C1 is the incoming color from samples s1, s2, ... -that is</p><formula xml:id="formula_2">C1 = α1c1 + (1 − α1)C2,<label>(2)</label></formula><p>where C2 is the incoming color from samples s2, s3, ... For the coarse resolution, the color C is given by</p><formula xml:id="formula_3">C = α 0 c0 + (1 − α 0 )C 2 ,<label>(3)</label></formula><p>where C 2 is the color calculated as a result of the samples s4, s6, ... By considering only the first three samples, the resulting colors C and C are given by</p><formula xml:id="formula_4">C =α0c0 + (1 − α0)α1C1 + (1 − α0)(1 − α1)C2 and (4) C =α 0 c0 + (1 − α 0 )C 2 ,<label>(5)</label></formula><p>and these quantities, in general, are different. However, if we compute the total-accumulated opacities A and A , we obtain A =α0 + (1 − α0)α1 + (1 − α0)(1 − α1)A2 and (6)</p><formula xml:id="formula_5">A =α 0 + (1 − α 0 )A 2 .<label>(7)</label></formula><p>Assuming that the accumulated opacities are equal at the even samples, it follows that A2 = A 2 and A = A , i.e., <ref type="figure">Figure 13</ref>: The horse metacarpus data set.</p><formula xml:id="formula_6">α0</formula><formula xml:id="formula_7">+ (1 − α0)α1 + (1 − α0)(1 − α1)A2 = α 0 + (1 − α 0 )A2.<label>(8)</label></formula><p>Solving this equation for α 0 , one obtains</p><formula xml:id="formula_8">α 0 = α0 + (1 − α0)α1 (9) = 1 − (1 − α0)(1 − α1).<label>(10)</label></formula><p>By assuming that α1 = α0 + (where is a very small number), we obtain the equation</p><formula xml:id="formula_9">α 0 = 1 − (1 − α0)(1 − α1) (11) = 1 − (1 − α0)(1 − α0) + (1 − α0) (12) = 1 − (1 − α0) 2 + O( ).<label>(13)</label></formula><p>Therefore, we modify the transfer function of the parent (coarser) texture by</p><formula xml:id="formula_10">α = 1 − (1 − α) 2<label>(14)</label></formula><p>for all opacity values in the subsampled texture to minimize the artifacts between the texture bricks. This formula is used when applying the transfer function to a level of the texture hierarchy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS</head><p>We have implemented our algorithm and applied it to several complex data sets. All data sets were rendered on an SGI Onyx2 computer system with .5 gigabytes of main memory, using a single 195Mz R10000 processor. The first data set is a CT scan of a horse metacarpus. This data set consists of 128 × 128 × 108 voxels. <ref type="figure">Figure 13</ref> shows this data set. The primary feature of this data set is the "empty interior" of the bone, which can be visualized only from close inspection of one end. <ref type="figure">Figures 14a and 14b</ref> were generated using fixed tile sizes, while <ref type="figure">Figures 14c and 14d</ref> were generated using our multiresolution technique. In <ref type="figure">Figure 14a</ref>, we show the viewpoint and bricks associated with the rendering in <ref type="figure">Figure 14b</ref>. In <ref type="figure">Figure 14c</ref>, we show the bricks used for the adaptive rendering of the texture, resulting in the image in <ref type="figure">Figure 14d</ref>.</p><p>The second image is a rendering of a trebecular bone data set, shown in <ref type="figure">Figure 14e</ref>. The data set consists of 256 3 voxels, and the  interesting features are inside the data set. <ref type="figure">Figures 14f-i</ref> show two views of this data set, one from just outside the data set, and one from the interior. The respective viewpoints and bricks associated with the views are shown in <ref type="figure">Figures 14f and 14h</ref>, while the resulting renderings are shown in <ref type="figure">Figures 14g and 14i</ref>. The third image is a rendering of data generated from an immersive auditory interface system, shown in <ref type="figure">Figure 14j</ref>. This data set has a "channel" in the middle of the volume. An image from the interior of the channel is shown in <ref type="figure">Figures 14k and 14l</ref>.</p><p>Statistics concerning the rendering times for the various algorithms applied to the three data sets are given in <ref type="table" target="#tab_2">Table 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS</head><p>We have described a new method for building and rendering a multiresolution texture hierarchy approximation for very large data sets. The approach utilizes a "bricking" strategy, where the displayed bricks are selected from an octree representation. Despite the fact that our overall system is limited by the amount of available texture memory, the algorithm produces very good results, and we expect that this approach will have a major impact on the huge volumetric data sets that are currently encountered in numerous applications. Future work will involve the extension of the technique to vector fields and the parallelization of our algorithm.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>A texture hierarchy of two levels. A texture hierarchy of four levels. Level 0 is the original texture, broken into eight tiles. Overlapping pixels are shared between the tiles. The dashed lines show the texture function domain for each level.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 Figure 4 :Figure 5 :</head><label>345</label><figDesc>shows a one-dimensional texture hierarchy of four levels. The top level, level 0, is the original texture, broken into eight tiles; level 1 contains four tiles at half of the original resolution; level 2 contains two tiles at a quarter of the resolution; and level 3 has one tile at an eighth of the original resolution. The dashed vertical lines on either side show the domain of the texture function over the entire hierarchy. The arrows denote the parent-child relationship of the hierarchy, defining a binary tree, rooted at the coarsest tile, level 3.Figure 4illustrates the logic for selecting tiles in a multiresolution environment: The thick vertical line denotes a point of interest, p, and tiles are selected if the distance from p to the center of the tile is greater than the width of the tile. Start with the root tile and Selecting tiles from a texture hierarchy of four levels. The vertical line represents a point of interest p. Tile selection depends on the width of the tile and the distance from the point. Selecting a tile set in two dimensions from a texture hierarchy of five levels. Given the point p, tiles are selected if the distance from the center of the tile to p is greater than the length of the diagonal of the tile. The selected tiles are shaded. perform this selection until all tiles meet this criterion, or no smaller tiles exist. (This is the case on the left side of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 6 :</head><label>6</label><figDesc>Field-of-view selection filter. The projected angle β of the tile is less than half the field-of-view angle α. a tile size of 64 3 , the tile contains 262,144 voxels, 250,047 effective voxels and 12,097 extra voxels.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 8 :</head><label>8</label><figDesc>Differences between (a) object-aligned planes; (b) viewport-aligned planes; and (c) spherical shells on a constant texture. Note the artifacts at the "tile boundaries" visible in (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 9 :</head><label>9</label><figDesc>Multiresolution object-aligned planes. The proxy geometry is generated independently for each tile.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 10 :</head><label>10</label><figDesc>Multiresolution viewpoint-aligned planes. The proxy geometry is generated independently for each tile. Substantial artifacts can appear at the boundaries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 11 :</head><label>11</label><figDesc>Multiresolution viewpoint-centered spherical shells. The differences between sampling on the boundaries of the tiles is relatively small.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>table .</head><label>.</label><figDesc>For each new scene and texture block, the current viewing and lighting parameters are applied to the look-up table, and the look-up table is applied to the texture map as it is transfered to the texture subsystem. They report interactive rates, both for</figDesc><table><row><cell>Unused Half-Pixel</cell><cell>Tile</cell><cell>Pixel</cell><cell>Unused Half-Pixel</cell></row><row><cell>0</cell><cell cols="2">Texture Function Domain</cell><cell>1</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Rendering times for the various data sets. All times are in seconds.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ACKNOWLEDGMENTS</head><p>This work was supported by the National Science Foundation under contract ACI 9624034 (CAREER Award), the Office of Naval Research under contract N00014-97-1-0222, the Army Research Office under contract ARO 36598-MA-RIP, the NASA Ames Research Center through an NRA award under contract NAG2-1216, the Lawrence Livermore National Laboratory through an ASCI ASAP Level-2 Award under contract (W-7405-ENG-48 and B335358, B347878), and the North Atlantic Treaty Organization (NATO) under contract CRG.971628 awarded to the University of California, Davis. We also acknowledge the support of Silicon Graphics, Inc.</p><p>The equine metacarpal data set was provided by Dr. C.M. Les of the JD Wheat Veterinary Orthopedic Research Laboratory at the University of California, Davis. The trebecular bone data set was provided by Tait Smith of the Mechanical and Aeronautical Engineering Department at the University of California, Davis, and the auditory interface data set was provided by Carlos Avendano of CIPIC. We would like to thank all members of the Visualization Group at CIPIC for their help.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">RealityEngine graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Akeley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Conference Series</title>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="109" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Infinite Reality: a Real-Time Graphics System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Montrym</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Baum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Dignam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Siggraph 97</title>
		<meeting>Siggraph 97</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="293" to="302" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">The OpenGL Graphics System: A Specification (Version 1.2)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Akeley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<pubPlace>Mountain View, CA,USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Silicon Graphics Computer Systems</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Advanced Graphics Programming Techniques Using OpenGL&quot; course notes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mcreynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Blythe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;98</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1998-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Accelerated volume rendering and tomographic reconstruction using texture mapping hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cabral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Cam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foran</surname></persName>
		</author>
		<idno>ISBN 0-89791-741-3</idno>
	</analytic>
	<monogr>
		<title level="m">1994 Symposium on Volume Visualization</title>
		<editor>A. Kaufman and W. Krueger</editor>
		<imprint>
			<date type="published" when="1994-10" />
			<biblScope unit="page" from="91" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Accelerating volume reconstruction with 3D texture hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Cullip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Neumann</surname></persName>
		</author>
		<idno>TR93-027</idno>
		<imprint>
			<date type="published" when="1994-05-01" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, University of North Carolina -Chapel Hill</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Direct volume rendering via 3D textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilhelms</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-06-29" />
			<pubPlace>Santa Cruz</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of California</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. UCSC-CRL-94-19</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Direct volume rendering with shading via three-dimensional textures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Gelder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<idno>ISBN 0-89791-741-3</idno>
	</analytic>
	<monogr>
		<title level="m">1996 Volume Visualization Symposium</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Efficiently using graphics hardware in volume rendering applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ertl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Siggraph 98</title>
		<meeting>Siggraph 98</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="19" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Advanced Geometric Techniques for Ray Casting Volumes&quot; course notes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grzeszczuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Henn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH &apos;98</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1998-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">OpenGL Volumizer Programmer&apos;s Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Eckel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<pubPlace>Mountain View, CA,USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Silicon Graphics Computer Systems</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fast data parallel polygon rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">A</forename><surname>Ortega</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Ahrens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings, Supercomputing &apos;93</title>
		<meeting>Supercomputing &apos;93<address><addrLine>Portland, Oregon</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1993-11-19" />
			<biblScope unit="page" from="709" to="718" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Binary-swap volumetric rendering on the T3D</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Krogh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Painter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">C</forename><surname>De Verdiere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Troutman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cray Users Group Conference</title>
		<meeting><address><addrLine>Denver, Co</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Massively parallel visualization: Parallel rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Krogh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">H</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bjørstad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Petter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">E</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">V</forename><surname>Mascagni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">S</forename><surname>Schreiber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Horst</forename><forename type="middle">D</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Torczon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th Conference on Parallel Processing for Scientific Computing</title>
		<editor>Virginia J. and L. T. Watson</editor>
		<meeting>the 27th Conference on Parallel Processing for Scientific Computing<address><addrLine>Philadelphia, PA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>SIAM Press</publisher>
			<date type="published" when="1995-02" />
			<biblScope unit="page" from="15" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Isosurface extraction SIMD architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hinker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization&apos;92</title>
		<imprint>
			<date type="published" when="1992-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1987-02" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
