<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Isosurface Extraction in Time-varying Fields Using a Temporal Branch-on-Need Tree (T-BON)</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><surname>Sutton</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<region>UT</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Utah Salt Lake City</orgName>
								<address>
									<postCode>84112</postCode>
									<region>UT</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Isosurface Extraction in Time-varying Fields Using a Temporal Branch-on-Need Tree (T-BON)</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>isosurface</term>
					<term>time-dependent scalar field visualization</term>
					<term>multiresolution methods</term>
					<term>octree</term>
				</keywords>
			</textClass>
			<abstract>
				<p>The Temporal Branch-on-Need Tree (T-BON) extends the threedimensional branch-on-need octree for time-varying isosurface extraction. At each time step, only those portions of the tree and data necessary to construct the current isosurface are read from disk. This algorithm can thus exploit the temporal locality of the isosurface and, as a geometric technique, spatial locality between cells in order to improve performance. Experimental results demonstrate the performance gained and memory overhead saved using this technique.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Isosurface extraction is an important technique for visualizing volumetric data. By exposing contours of constant value, isosurfaces provide a mechanism for understanding the structure of a scalar field. This method has been used effectively in several disciplines, including medicine <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b17">18]</ref>, computational fluid dynamics (CFD) <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>, and molecular dynamics <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b13">14]</ref>. Data sets from computational, as well as measurement sources, have continued to increase in size, often consisting of multiple time steps. Visualizing changes over time is crucial for understanding the dynamic behavior of the data. However, little attention has been focused on methods that directly address time dependent data.</p><p>The original Marching Cubes algorithm <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b21">22]</ref> examined all cells in the data set to construct an isosurface. There has been tremendous research focused on reducing the number of cells visited when constructing an isosurface <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b16">17]</ref>. While the search structures introduced by many of these methods increase the storage requirements, this overhead is offset by the acceleration of the isosurfacing technique. For time-varying data sets, data structures that index all cells at every time step can incur significant storage overhead. When the data and associated structures cannot all fit in memory, reading the required portions from disk presents an imposing bottleneck, potentially nullifying the performance gained from constructing the supplemental search structure.</p><p>We present an isosurface extraction algorithm for time-varying fields that minimizes the impact of the I/O bottleneck. By reading only those portions of the data and search tree necessary to construct the current isosurface, the Temporal Branch-on-Need Tree (T-BON) makes efficient use of I/O bandwidth while retaining the accelerated search characteristics of a hierarchical extraction technique. Since the tree is based on the geometry of the data, spatial coherence between cells can be exploited to increase performance.</p><p>In the following sections, we first discuss related work and then present our algorithm for extracting isosurfaces in time-varying fields. We then present experimental results demonstrating our algorithm's performance on three large-scale, time-varying data sets. Finally, we discuss our conclusions and suggest directions for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>A number of different techniques have been introduced to increase the efficiency of isosurface extraction over the linear search proposed in the Marching Cubes algorithm <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b21">22]</ref>. Wilhelms and van Gelder <ref type="bibr" target="#b20">[21]</ref> describe the branch-on-need octree (BONO), a spaceefficient variation on the traditional octree. Their data structure partitions the cells in the data based on their geometric positions. Extreme values (minimums and maximums) are propagated up the tree during construction such that only those nodes that span the isosurface, i.e. those with min &lt; isovalue &lt; max, are traversed during the extraction phase.</p><p>More recent methods have focused on partitioning the cells based on their extreme values. Livnat et al. <ref type="bibr" target="#b10">[11]</ref> introduced the span space, where each cell is represented as a point in 2d space. The point's x-coordinate is defined by the cell's minimum value, and the y-coordinate by the maximum value. The NOISE algorithm described in <ref type="bibr" target="#b10">[11]</ref> uses a Kd-tree to organize the points. Shen et al. <ref type="bibr" target="#b16">[17]</ref> use a lattice subdivision of span space in their ISSUE algorithm. This simplifies and accelerates the search phase of the extraction, as only one element in the lattice requires a full minmax search of its cells. This acceleration comes at the cost of a less efficient memory footprint than the Kd-tree.</p><p>The Interval Tree technique introduced by Cignoni et al. <ref type="bibr" target="#b3">[4]</ref> guarantees worst-case optimal efficiency. Cells, represented by the intervals defined by their extreme values, are grouped at the nodes of a balanced binary tree. For any isovalue query, at most one branch from a node is traversed.</p><p>An alternate technique is to propagate the isosurface from a set of seed cells. Itoh et al. <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9]</ref>, Bajaj et al. <ref type="bibr" target="#b0">[1]</ref>, and van Kreveld et. al. <ref type="bibr" target="#b18">[19]</ref> construct seed sets that contain at least one cell per connected component of each isosurface. The isosurface construction begins at a seed and is traced through neighboring cells using adjacency and intersection information.</p><p>An algorithm to improve I/O performance and allow efficient isosurface extraction on data sets larger than physical memory was described by Chiang et al. <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>. An interval tree is built on disk using a two-level hierarchy. Cells are first grouped into meta-cells and a meta-interval defined. These meta-intervals are then composed into an interval tree, which is divided into disk block-sized groups to allow efficient transfer from disk.</p><p>Weigle and Banks <ref type="bibr" target="#b19">[20]</ref> consider time-varying scalar data as a four-dimensional field. They construct an "isovolume" for each isovalue, representing the volume swept by the isosurface over time. Imposing a time constraint on the isovolume yields an instantaneous surface. This method elegantly captures temporal coherence, but is impractical for large data sets.</p><p>Shen <ref type="bibr" target="#b15">[16]</ref> proposed the Temporal Hierarchical Index Tree to perform isosurface extraction on time-varying data sets. This method classifies the data cells by their extreme values over time. Temporal variation of cells is defined using lattice subdivision, extending the ISSUE algorithm. Nodes in the tree contain cells with differing temporal variation and are paged in from disk as needed to extract an isosurface at a particular time step. At every time step, an ISSUE search <ref type="bibr" target="#b16">[17]</ref> is performed at each node. In order to accelerate the full min-max search, an Interval Tree is constructed in those lattice elements that may require such a search. The Temporal Hierarchical Index Tree shows significant improvement in storage requirements over construction of a span-space search structure which treats each time step as an independent data set. It achieves this while retaining an efficient search strategy for isosurface extraction.</p><p>Shen's work clearly accelerates the search for isosurfaces in time dependent data. However, at each time step the entire data domain (time step) is loaded into physical memory. The isosurface extraction process potentially needs to access all of the time steps in a time-varying data set. If all time steps do not simultaneously fit into physical memory, I/O can become a bottle neck. As noted by Wilhelms and Van Gelder <ref type="bibr" target="#b20">[21]</ref>, for a particular isovalue, large portions of the data not containing the isovalue need not be examined. Similarly these same large portions of the data need not be read from disk when constructing an isosurface. For time dependent data sets, this savings can be significant and has led us to develop a method aimed at exploiting this observation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Temporal Branch-on-Need Tree (T-BON)</head><p>We use an algorithm that exploits locality in data by extending the branch-on-need octree, thus providing a mechanism that extracts isosurfaces efficiently from time-varying data. The branch-on-need octree resembles the even-subdivision octree, but partitions the cells more efficiently when the dimensions of the volume are not powers of two. <ref type="figure">Figure 1</ref> compares the strategies in two dimensions. The even-subdivision strategy divides the volume in each direction at each level of the tree, while the branch-on-need strategy partitions the volume such that the "lower" subdivision in each direction covers the largest possible power of two cells. This results in fewer nodes, allowing the tree to be traversed more efficiently.</p><p>The branch-on-need octree provides an efficient search while introducing a low amount of overhead. In the worst case, when the volume contains (n + 1) 3 cells (n is a power of two), n <ref type="bibr" target="#b2">3</ref> 7 + n 2 nodes are produced <ref type="bibr" target="#b20">[21]</ref>. Cells can be represented by an integer index into the data. Value-decomposition techniques such as ISSUE and the Interval Tree require two floating point numbers (minimum and maximum) and an integer index for each cell, in addition to the memory requirements of the search structure. The low storage cost makes the branch-on-need octree ideal for performing isosurface extraction on large, time dependent data sets.  <ref type="figure">Figure 1</ref>: Two-dimensional example of the branch-on-need algorithm (from Wilhelms and van Gelder <ref type="bibr" target="#b20">[21]</ref>). The branch-on-need strategy produces fewer nodes when the dimensions of the data are not powers of two.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Construction</head><p>In the preprocessing step, a branch-on-need octree is built for each time step in the data and stored to disk in two sections. The information common to all trees is saved only once. This includes the general infrastructure of the tree, such as branching factors and pointers to children or siblings. This information can be created knowing only the dimensions of the data. Extreme values for the nodes are computed and stored separately, as these values can vary at each time step. Our implementation represents the tree using a linear array, so all pointers are integer indices. The tree is packed in depth-first search order to facilitate retrieval in the search phase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Search and Extraction</head><p>Before any isovalue queries, the tree infrastructure is read from disk and recreated in main memory. Queries are then accepted in the form (timestep, isoval). Query resolution in the T-BON algorithm is based on demand-driven paging <ref type="bibr" target="#b4">[5]</ref>. First the root extreme values of the branch-on-need octree corresponding to timestep are read. If these values span isoval, the children of the root node are read. This process repeats recursively until the leaf nodes are reached, as shown in <ref type="figure">Figure 2</ref>. If a leaf node spans isoval, the disk block containing the data for the cells in that leaf is added to a list. Once the necessary portions of the tree have been brought into memory and traversed, all blocks in the list are read from disk. This block read causes some extraneous data to be read, but performs much better than randomly accessing the file to bring in strictly those data points required. The block size defaults to the size of a disk sector, but can be modified to tune the algorithm for different I/O subsystems. We show the results of modifying this parameter below. The tree is traversed a second time to construct the isosurface. When more than one isovalue is queried for the same time step, this process can be modified to avoid rereading identical data.  <ref type="figure">Figure 2</ref>: The children of a node that spans the isovalue (indicated by shading) are recursively brought into memory (a,b). At the leaf level, any data needed for the isosurface (black blocks) is fetched from disk, while unnecessary data (white blocks) is not read (c). A second pass through the tree constructs the isosurface using only the data in memory.</p><p>only differential nodes and data blocks must be brought from disk. The lists are purged when the time step changes. This additional processing and I/O are dominated by the triangle construction time, so performance in this case is usually comparable to performing a search with the tree and data already in memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>We tested our algorithm on three CFD data sets. Rage512 is a 512× 512 × 512 simulation of the classic Rayleigh-Taylor hydrodynamic instability, in which two fluids of differing densities mix. <ref type="figure" target="#fig_1">Figure 3</ref> shows one isosurface from this data set. Rage256 is a downsampled version of Rage512 and contains 256 × 256 × 256 vertices. The Jet256 data set describes a jet shockwave and also contains 256 × 256 × 256 vertices. <ref type="figure" target="#fig_2">Figure 4</ref> shows an isosurface from this data set. All data sets are represented by regular grids. Constructing a branch-on-need octree over an unstructured data set would be more difficult, but Parker et. al. <ref type="bibr" target="#b14">[15]</ref> describe a method for constructing such a hierarchy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">T-BON Results</head><p>In the following tables, we describe the speedup obtained by using the T-BON tree instead of a pure BONO approach, which reads the entire tree and data from disk at each time step. We give the minimum, maximum, and average speedup values over multiple isovalues and multiple time steps. The tables show what percentage of the tree and data are read from disk for each of these cases, as well as the number of triangles created. The blocksize parameter defines the minimum amount of data fetched from disk in the block read described in Section 3.2. We show results for three values of this parameter. <ref type="table">Table 1</ref> shows results for the Rage512 data set. In this experiment, the time parameter was varied over the 21 time steps while holding the isovalue constant. This process was performed for five representative isovalues. Significant speedups were   obtained in all cases, with the largest blocksize showing the best improvement. The worst case performance of the T-BON tree is almost never worse than the pure branch-on-need octree approach, and can be over four times better. The average case shows substantial improvement, achieving approximately twice the performance of the BONO method. Notice that at each time step, we page in only about 20% of the data in the worst case. The low percentages of nodes and data read from disk offset the overhead of the T-BON algorithm and demonstrate the effectiveness of demanddriven fetching. <ref type="table" target="#tab_3">Table 2</ref> shows the results for the same experiment with the Rage256 data set. <ref type="table" target="#tab_4">Table 3</ref> summarizes the experiment on the Jet256 data set. In this case, the time parameter was varied over the 100 time steps, holding one of ten representative isovalues constant. These data sets also perform well under the T-BON structure. Even though the larger data sets show better improvements, the T-BON algorithm is over twice as fast on average for the smaller data sets. <ref type="table" target="#tab_5">Table 4</ref> demonstrates the performance of the T-BON algorithm, using the Rage512 data set, when the user changes isovalues in the same time step. This query behavior favors the pure BONO approach, since the T-BON algorithm must read more of the tree and data at each new isovalue. The experiment summarized in <ref type="table" target="#tab_5">Table 4</ref> used ten representative isovalues at the initial time step. The T-BON method performs approximately 20% worse than the BONO in the average case, with the first isovalue performing much better (as expected from <ref type="table">Table 1 above)</ref>. Eventually, the entire tree and all of the data will be copied to memory and the performance of the T-BON algorithm will approach that of the pure BONO technique. The performance deficit in <ref type="table" target="#tab_5">Table 4</ref> can be explained by the layering effect in the Rage data set, as is evident in <ref type="figure" target="#fig_1">Figure 3</ref>. Each cell contains only a small range of values. When the isovalue changes, a new layer of cells must be read from disk, making little use of the previous layer. <ref type="table" target="#tab_6">Table 5</ref> shows similar results for the same experiment using the Rage256 data set. <ref type="table" target="#tab_7">Table 6</ref> summarizes the results for the Jet256 data set at time step 50. This data set allows better performance than the Rage data sets, extracting isosurfaces only 5% slower than the BONO in the average case. The low percentages of data and nodes read at each isovalue imply that values in the Jet256        <ref type="table">Table 8</ref>: Triangle construction time (in seconds) for the Jet256 data set, with and without local caching.</p><p>data set are more evenly distributed than in the Rage data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Implementation Details</head><p>Our implementation initially allocates enough memory for the data and tree structure of one time step and maintains this memory footprint throughout execution. Reads from disk simply overwrite any previous contents, while the two-pass traversal guarantees that no stale information is accessed. This organization optimizes for speed -a dynamic structure could use only that amount of memory needed for the current time step and isovalue, but would slow execution. A dynamic structure could easily be implemented for systems with limited memory to perform out-of-core isosurface extraction. The basic technique of reading the data and tree nodes on demand provides a convenient and intuitive basis for such an algorithm. As a geometry-based technique, the temporal branch-on-need tree can leverage the spatial locality in the data to avoid performing duplicate calculations. Wilhelms and van Gelder use a hash table to exploit this property. Once the intersection point of the isosurface has been calculated along a cell edge, that edge is placed into a hash table, allowing cells that share the edge to retrieve the interpolated point without a calculation. When all cells that share an edge have accessed its hash entry, the edge is deleted from the table. As our implementation has no explicit representation of edges, the cost of constructing a hash key on the fly and accessing the table would not aid our algorithm's performance. Instead, we use a form of local caching similar to the chess-board approach proposed by Cignoni et al. <ref type="bibr" target="#b3">[4]</ref>. Leaf nodes in the tree contain up to eight data cells. When a leaf spans the current isovalue, triangles are constructed in all these cells, using a local array to cache the interpolated points. Cells in the same leaf block access this array instead of interpolating a shared edge. <ref type="table" target="#tab_8">Tables 7 and 8</ref> show the reduction in triangle construction time using this technique on six representative isovalues. The times given are for constructing individual triangles in the Rage256 and Jet256 data sets. Methods for constructing triangle strips could take advantage of this local cache and improve both construction and rendering times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions and Future Work</head><p>We have presented a low-latency isosurface extraction algorithm for time varying fields. By reading only those portions of the tree and data necessary for constructing the current isosurface, the temporal branch-on-need tree minimizes the I/O overhead. Additionally, this method requires low structural overhead and can exploit spatial locality between cells to increase performance. Experimental results demonstrate the advantages over reading the entire data set and search structure for each time step.</p><p>Several directions for improvements and extensions exist. We plan to apply this technique to unstructured data sets using the technique described by Parker et. al. <ref type="bibr" target="#b14">[15]</ref> for constructing the hierarchy. Creating a dynamic structure for memory savings and out-of-core applications was mentioned in Section 4.1. The temporal branchon-need tree can be parallelized to reduce the wall clock execution time. High level nodes in the tree could be distributed to different processing units, retaining the temporal and spatial locality inherent in the algorithm. We also plan to investigate bricking techniques. Rearranging the data points would allow for a more efficient first pass, requiring recursion to a lesser depth in the tree. This would also reduce the number of unnecessary data points transferred in the block read. Finally, methods of exploiting low temporal variations in the data could be added. For example, if the extreme values of a tree nodes changed only slowly over time, then a single node could be used for multiple time steps, as in <ref type="bibr" target="#b15">[16]</ref>. However, the utility of this would depend on the behavior of the data and may not improve performance.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>The isosurface with value 1.15 at time 16 in the RAGE data set, showing the bubbles formed by instability.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>The isosurface with value 37 at time 60 in the Jet Shockwave data set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>The isosurface with value 1.15 at time 16 in the RAGE data set, showing the bubbles formed by instability.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>The isosurface with value 37 at time in the Jet Shockwave data set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Two lists are maintained, one identifying nodes currently in memory and one representing the disk blocks read. By referencing these lists,</figDesc><table><row><cell cols="2">00 00 00 11 11 11 0000000 0000000 0000000 0000000 1111111 1111111 1111111 1111111 000 000 00 00 00 11 11 11 0000000 0000000 0000000 0000000 1111111 1111111 000 111 111 111 1111111 1111111 000 000 000 000 111 111 111 111</cell><cell cols="3">00 00 00 11 11 11 0000000 0000000 0000000 0000000 1111111 1111111 1111111 1111111 0000 0000 00000 00000 00000 11111 11111 11111 0000000 0000000 0000000 1111111 1111111 1111111 0000000 0000000 0000000 0000000 1111111 1111111 1111111 1111111 00 00 00 11 11 11 0000 1111 1111 000 000 000 000 111 111 111 111 0000 0000 0000 0000 1111 1111 1111 1111 1111 0000 0000 0000 1111 1111 1111 0000 0000 0000 0000 1111 1111 1111 1111</cell></row><row><cell>(a)</cell><cell></cell><cell></cell><cell>(b)</cell><cell></cell></row><row><cell></cell><cell cols="3">00000 00000 00000 11111 11111 11111 0000000 0000000 0000000 1111111 1111111 1111111 0000 0000 0000 1111 1111 0000000 0000000 0000000 0000000 1111111 1111111 1111111 1111111 00 00 00 11 11 11 0000000 0000000 0000000 0000000 1111111 1111111 0000 0000 0000 1111 1111 1111 1111111 1111111 0000 0000 0000 0000 1111 1111 1111 1111 1111 000 000 000 000 111 111 111 111</cell><cell></cell></row><row><cell>000 000 000 000 000 000 111 111 111 111 111 111</cell><cell>000 000 000 000 000 000 111 111 111 111 111 111</cell><cell>000000 000000 000000 000000 000000 000000 111111 111111 111111 111111 111111 111111</cell><cell>0 0 0 1 1 1</cell><cell>000000 000000 000000 000000 000000 000000 111111 111111 111111 111111 111111 111111 0 0 0 1 1 1</cell></row><row><cell></cell><cell>(c)</cell><cell></cell><cell></cell><cell></cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Performance results (varying time value) for the Rage256 data set.</figDesc><table><row><cell></cell><cell>Jet256</cell><cell></cell><cell></cell></row><row><cell cols="3"># nodes 2,396,745</cell><cell></cell></row><row><cell cols="4">data size 16.8 MB × 100 time steps</cell></row><row><cell cols="3">memory footprint 50.1 MB</cell><cell></cell></row><row><cell>Blocksize:</cell><cell>Min</cell><cell>1 2 Sectorsize Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>1.11</cell><cell>2.52</cell><cell>2.99</cell></row><row><cell># triangles (×10 6 )</cell><cell>0.28</cell><cell>0.090</cell><cell>0.058</cell></row><row><cell>% nodes read</cell><cell>7.32</cell><cell>2.37</cell><cell>1.46</cell></row><row><cell cols="2">% data read 31.91</cell><cell>9.52</cell><cell>2.80</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>1.25</cell><cell>2.83</cell><cell>3.98</cell></row><row><cell># triangles (×10 6 )</cell><cell>0.30</cell><cell>0.090</cell><cell>0.053</cell></row><row><cell>% nodes read</cell><cell>7.32</cell><cell>2.37</cell><cell>1.46</cell></row><row><cell cols="2">% data read 34.69</cell><cell>10.75</cell><cell>3.66</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>4×Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>1.31</cell><cell>2.86</cell><cell>3.98</cell></row><row><cell># triangles (×10 6 )</cell><cell>0.31</cell><cell>0.090</cell><cell>0.053</cell></row><row><cell>% nodes read</cell><cell>7.32</cell><cell>2.37</cell><cell>1.46</cell></row><row><cell cols="2">% data read 51.56</cell><cell>17.67</cell><cell>11.13</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Performance results (varying time value) for the Jet256 data set.</figDesc><table><row><cell></cell><cell>Rage512</cell><cell></cell><cell></cell></row><row><cell>Blocksize:</cell><cell cols="2">1 2 Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell cols="2">Average Max</cell></row><row><cell>speedup</cell><cell>0.46</cell><cell>0.82</cell><cell>1.56</cell></row><row><cell>% nodes read</cell><cell>7.44</cell><cell>1.46</cell><cell>0.17</cell></row><row><cell cols="2">% data read 13.54</cell><cell>2.57</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell cols="2">Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell cols="2">Average Max</cell></row><row><cell>speedup</cell><cell>0.46</cell><cell>0.84</cell><cell>1.56</cell></row><row><cell>% nodes read</cell><cell>7.44</cell><cell>1.46</cell><cell>0.17</cell></row><row><cell cols="2">% data read 13.70</cell><cell>2.50</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell cols="2">4×Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell cols="2">Average Max</cell></row><row><cell>speedup</cell><cell>0.51</cell><cell>0.96</cell><cell>1.83</cell></row><row><cell>% nodes read</cell><cell>7.44</cell><cell>1.46</cell><cell>0.17</cell></row><row><cell cols="2">% data read 14.02</cell><cell>2.66</cell><cell>0.00</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 4</head><label>4</label><figDesc></figDesc><table><row><cell cols="4">: Performance results (constant time value) for the Rage512</cell></row><row><cell>data set.</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">Rage256</cell><cell></cell></row><row><cell>Blocksize:</cell><cell>Min</cell><cell>1 2 Sectorsize Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.47</cell><cell>0.80</cell><cell>1.30</cell></row><row><cell>% nodes read</cell><cell>9.29</cell><cell>2.00</cell><cell>0.067</cell></row><row><cell cols="2">% data read 17.95</cell><cell>2.30</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.44</cell><cell>0.75</cell><cell>1.30</cell></row><row><cell>% nodes read</cell><cell>9.29</cell><cell>2.00</cell><cell>0.067</cell></row><row><cell cols="2">% data read 18.75</cell><cell>2.30</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>4×Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.46</cell><cell>0.79</cell><cell>1.28</cell></row><row><cell>% nodes read</cell><cell>9.29</cell><cell>2.00</cell><cell>0.067</cell></row><row><cell cols="2">% data read 20.09</cell><cell>2.44</cell><cell>0.00</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 5 :</head><label>5</label><figDesc>Performance results (constant time value) for the Rage256 data set.</figDesc><table><row><cell></cell><cell cols="2">Jet256</cell><cell></cell></row><row><cell>Blocksize:</cell><cell>Min</cell><cell>1 2 Sectorsize Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.47</cell><cell>0.95</cell><cell>2.89</cell></row><row><cell>% nodes read</cell><cell>2.02</cell><cell>0.32</cell><cell>0.035</cell></row><row><cell>% data read</cell><cell>7.40</cell><cell>0.93</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.48</cell><cell>0.95</cell><cell>2.93</cell></row><row><cell>% nodes read</cell><cell>2.02</cell><cell>0.32</cell><cell>0.035</cell></row><row><cell>% data read</cell><cell>9.28</cell><cell>1.08</cell><cell>0.00</cell></row><row><cell>Blocksize:</cell><cell></cell><cell>4×Sectorsize</cell><cell></cell></row><row><cell></cell><cell>Min</cell><cell>Average</cell><cell>Max</cell></row><row><cell>speedup</cell><cell>0.48</cell><cell>0.95</cell><cell>2.90</cell></row><row><cell>% nodes read</cell><cell>2.02</cell><cell>0.32</cell><cell>0.035</cell></row><row><cell cols="2">% data read 16.60</cell><cell>1.66</cell><cell>0.00</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table><row><cell>Performance results (constant time value) for the Jet256</cell></row><row><cell>data set.</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 7 :</head><label>7</label><figDesc>Triangle construction time (in seconds) for the Rage256 data set, with and without local caching.</figDesc><table><row><cell></cell><cell>Jet256</cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">Time Step 50</cell><cell></cell></row><row><cell cols="4">isovalue no locality locality savings</cell></row><row><cell>5</cell><cell>0.72</cell><cell>0.60</cell><cell>16.7%</cell></row><row><cell>10</cell><cell>0.61</cell><cell>0.50</cell><cell>18.0%</cell></row><row><cell>15</cell><cell>0.69</cell><cell>0.56</cell><cell>18.8%</cell></row><row><cell>20</cell><cell>0.74</cell><cell>0.58</cell><cell>21.6%</cell></row><row><cell>200</cell><cell>0.76</cell><cell>0.59</cell><cell>22.4%</cell></row><row><cell>210</cell><cell>0.76</cell><cell>0.59</cell><cell>22.4%</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Acknowledgments</head><p>This work was supported in part by the C-SAFE DOE ASCI Alliance Center, the DOE Advanced Visualization Technology Center (AVTC), and a grant from LLNL. The authors would like to thank Yarden Livnat for his comments and suggestions. The Rage data set is courtesy of Robert Weaver (Los Alamos National Laboratory). The Jet data set was obtained from the Advanced Visualization Technology Center data repository at Argonne National Laboratory.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fast Isocontouring For Improved Interactivity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chandrajit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valerio</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">R</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Symposium on</title>
		<imprint>
			<biblScope unit="volume">Visualization</biblScope>
			<biblScope unit="page" from="39" to="46" />
			<date type="published" when="1996-10" />
			<publisher>IEEE Computer Society Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">I/O Optimal Isosurface Extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi-Jen</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cláudio</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>Roni Yagel and Hans Hagen</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="293" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Interactive Out-Of-Core Isosurface Extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi-Jen</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cláudio</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Schroeder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>David Ebert, Hans Hagen, and Holly Rushmeier</editor>
		<meeting>Visualization<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="167" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Speeding Up Isosurface Extraction Using Interval Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paola</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claudio</forename><surname>Montani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Enrico</forename><surname>Puppo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Scopigno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="158" to="170" />
			<date type="published" when="1997-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Application-Controlled Demand Paging for Out-of-Core Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ellsworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization 1997</title>
		<editor>Roni Yagel and Hans Hagen</editor>
		<meeting>Visualization 1997<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="235" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Towards Efficient Visualization Support for Single-block and Multi-block Datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><forename type="middle">M</forename><surname>Favre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization 1997</title>
		<editor>Roni Yagel and Hans Hagen</editor>
		<meeting>Visualization 1997<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="423" to="428" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Production Visualization for the ASCI One TeraFLOPS Machine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><forename type="middle">D</forename><surname>Heermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>David Ebert, Hans Hagen, and Holly Rushmeier</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="459" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Automatic Isosurface Propagation Using an Extrema Graph and Sorted Boundary Cell Lists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takayuki</forename><surname>Itoh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koji</forename><surname>Koyamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="319" to="327" />
			<date type="published" when="1995-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Volume Thinning for Automatic Isosurface Propagation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takayuki</forename><surname>Itoh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yasushi</forename><surname>Yamaguchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koji</forename><surname>Koyamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization 1996</title>
		<editor>Roni Yagel and Gregory M. Nielson</editor>
		<meeting>Visualization 1996<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="303" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Three-Dimensional Visualization of Microstructures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Lanzagorta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milo</forename><forename type="middle">V</forename><surname>Kral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Edward</forename><surname>Swan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Spanos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Rosenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eddy</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization 1998</title>
		<editor>David Ebert, Hans Hagen, and Holly Rushmeier</editor>
		<meeting>Visualization 1998<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="487" to="490" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Near Optimal Isosurface Extraction Algorithm Using The Span Space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarden</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="73" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Marching Through the Visible Man</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>Gregory M. Nielson and Deborah Silver</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1995-10" />
			<biblScope unit="page" from="368" to="373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Lorensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harvey</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH, ACM SIGGRAPH</title>
		<editor>Maureen C. Stone</editor>
		<imprint>
			<date type="published" when="1987-07" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Three Dimensional Visualization Of Proteins In Cellular Interactions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Colin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patricia</forename><forename type="middle">J</forename><surname>Monks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Crossno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Constantine</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abraham</forename><surname>Pavlakos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cláudio</forename><surname>Kupfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wylie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>Roni Yagel and Gregory M. Nielson</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="363" to="366" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interactive Ray Tracing for Volume Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Parker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarden</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter-Pike</forename><surname>Sloan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Shirley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Submitted to IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Isosurface Extraction in Time-varying Fields Using a Temporal Hierarchical Index Tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>David Ebert, Hans Hagen, and Holly Rushmeier</editor>
		<meeting>Visualization<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="159" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Isosurfacing in Span Space with Utmost Efficiency (ISSUE)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Han-Wei</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">D</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarden</forename><surname>Livnat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">R</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>Roni Yagel and Gregory M. Nielson</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="287" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">High Quality Rendering of Attributed Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ulf</forename><surname>Tiede</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schiemann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karl</forename><forename type="middle">Heinz</forename><surname>Höhne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization</title>
		<editor>David Ebert, Hans Hagen, and Holly Rushmeier</editor>
		<meeting>Visualization<address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1998-10" />
			<biblScope unit="page" from="255" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Contour Trees and Small Seed Sets for Isosurface Traversal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">René</forename><surname>Marc Van Kreveld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandrajit</forename><surname>Van Oostrum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valerio</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Pascucci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schikore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Special Interest Groups for Graphics and Algorithms and Computation Theory</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997-06" />
			<biblScope unit="page" from="212" to="220" />
		</imprint>
	</monogr>
	<note>Proceedings of the Thirteenth Annual Symposium on Computational Geometry</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Extracting Iso-valued Features in 4-dimensional Scalar Fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Weigle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">C</forename><surname>Banks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Volume Visualization</title>
		<meeting><address><addrLine>Los Alamitos, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="103" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Octrees for Faster Isosurface Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="201" to="227" />
			<date type="published" when="1992-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Data Structure for Soft Objects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoff</forename><surname>Wyvill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Mcpheeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brain</forename><surname>Wyvill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="227" to="234" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
