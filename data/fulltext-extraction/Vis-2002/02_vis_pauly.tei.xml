<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Efficient Simplification of Point-Sampled Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Pauly</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Gross</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leif</forename><forename type="middle">P</forename><surname>Kobbelt</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zürich</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rwth</forename><surname>Aachen</surname></persName>
						</author>
						<title level="a" type="main">Efficient Simplification of Point-Sampled Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>In this paper we introduce, analyze and quantitatively compare a number of surface simplification methods for point-sampled geometry. We have implemented incremental and hierarchical clustering, iterative simplification, and particle simulation algorithms to create approximations of point-based models with lower sampling density. All these methods work directly on the point cloud, requiring no intermediate tesselation. We show how local variation estimation and quadric error metrics can be employed to diminish the approximation error and concentrate more samples in regions of high curvature. To compare the quality of the simplified surfaces, we have designed a new method for computing numerical and visual error estimates for point-sampled surfaces. Our algorithms are fast, easy to implement, and create high-quality surface approximations, clearly demonstrating the effectiveness of point-based surface simplification.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Irregularly sampled point clouds constitute one of the canonical input data formats for scientific visualization. Very often such data sets result from measurements of some physical process and are corrupted by noise and various other distortions. Point clouds can explicitly represent surfaces, e.g. in geoscience <ref type="bibr" target="#b11">[12]</ref>, volumetric or iso-surface data, as in medical applications <ref type="bibr" target="#b7">[8]</ref>, or higher dimensional tensor fields, as in flow visualization <ref type="bibr" target="#b21">[22]</ref>. For surface data acquisition, modern 3D scanning devices are capable of producing point sets that contain millions of sample points <ref type="bibr" target="#b17">[18]</ref>.</p><p>Reducing the complexity of such data sets is one of the key preprocessing techniques for subsequent visualization algorithms. In our work, we present, compare and analyze algorithms for the simplification of point-sampled geometry.</p><p>Acquisition devices typically produce a discrete point cloud that describes the boundary surface of a scanned 3D object. This sample set is often converted into a continuous surface representation, such as polygonal meshes or splines, for further processing. Many of these conversion algorithms are computationally quite involved <ref type="bibr" target="#b1">[2]</ref> and require substantial amounts of main memory. This poses great challenges for increasing data sizes, since most methods do not scale well with model size. We argue that effective surface simplification can be performed directly on the point cloud, similar to other point-based processing and visualization applications <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b13">14]</ref>. In particular, the connectivity information of a triangle mesh, which is not inherent in the underlying geometry, can be replaced by spatial proximity of the sample points for sufficiently dense point clouds <ref type="bibr" target="#b1">[2]</ref>. We will demonstrate that this does not lead to a significant loss in quality of the simplified surface.</p><p>To goal of point-based surface simplification can be stated as follows: Given a surface defined by a point cloud and a target sampling rate , find a point cloud with such that the distance of the corresponding surface to the original surface is minimal. A related problem is to find a point cloud with minimal sampling rate given a maximum distance .</p><p>In practice, finding a global optimum to the above problems is intractable. Therefore, different heuristics have been presented in the polygonal mesh setting (see <ref type="bibr" target="#b8">[9]</ref> for an overview) that we have adapted and generalized to point-based surfaces:</p><p>• Clustering methods split the point cloud into a number of subsets, each of which is replaced by one representative sample (see Section 3.1). • Iterative simplification successively collapses point pairs in a point cloud according to a quadric error metric (Section 3.2). • Particle simulation computes new sampling positions by moving particles on the point-sampled surface according to interparticle repelling forces (Section 3.3).</p><p>The choice of the right method, however, depends on the intended application. Real-time applications, for instance, will put particular emphasis on efficiency and low memory footprint. Methods for creating surface hierarchies favor specific sampling patterns (e.g. <ref type="bibr" target="#b29">[30]</ref>), while visualization applications require accurate preservation of appearance attributes, such as color or material properties. We also present a comparative analysis of the different techniques including aspects such as surface quality, computational and memory overhead, and implementational issues. Surface quality is evaluated using a new method for measuring the distance between two point set surfaces based on a point sampling approach (Section 4). The purpose of this analysis is to give potential users of point-based surface simplification suitable guidance for choosing the right method for their specific application. Earlier methods for simplification of point-sampled models have been introduced by Alexa et al. <ref type="bibr" target="#b0">[1]</ref> and Linsen <ref type="bibr" target="#b19">[20]</ref>. These algorithms create a simplified point cloud that is a true subset of the original point set, by ordering iterative point removal operations according to a surface error metric. While both papers report good results for reducing redundancy in point sets, pure subsampling unnecessarily restricts potential sampling positions, which can lead to aliasing artefacts and uneven sampling distributions. To alleviate these problems, the algorithms described in this paper resample the input surface and implicitly apply a low-pass filter (e.g. clustering methods perform a local averaging step to compute the cluster's centroid).</p><p>In <ref type="bibr" target="#b20">[21]</ref>, Pauly and Gross introduced a resampling strategy based on Fourier theory. They split the model surface into a set of patches that are resampled individually using a spectral decomposition. This method directly applies signal processing theory to point-sampled geometry, yielding a fast and versatile point cloud decimation method. Potential problems arise due to the dependency on the specific patch layout and difficulties in controlling the target model size by specifying spectral error bounds.</p><p>Depending on the intended application, working directly on the point cloud that represents the surface to be simplified offers a number of advantages:</p><p>• Apart from geometric inaccuracies, noise present in physical data can also lead to topological distortions, e.g. erroneous handles or loops, which cause many topology-preserving simplification algorithms to produce inferior results (see <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr">Figure 3)</ref>. Point-based simplification does not consider local topology and is thus not affected by these problems. If topological invariance is required, however, point-based simplification is not appropriate. • Point-based simplification can significantly increase performance when creating coarse polygonal approximations of large point sets. Instead of using a costly surface reconstruction for a detailed point cloud followed by mesh simplification, we first simplify the point cloud and only apply the surface reconstruction for the much smaller, simplified point set. This reconstruction will also be more robust, since geometric and topological noise is removed during the point-based simplification process. • Upcoming point-based visualization methods <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b22">23]</ref> can benefit from the presented simplification algorithms as different level-of-detail approximations can be directly computed from their inherent data structures. • The algorithms described in this paper are time and memory efficient and easy to implement. Unlike triangle simplification, no complex mesh data structures have to be build and maintained during the simplification, leading to an increased overall performance.</p><p>We should note that our algorithms are targeted towards denselysampled organic shapes stemming from 3D acquisition, iso-surface extraction or sampling of implicit functions. They are not suited for surfaces that have been carefully designed in a particular surface representation, such as low-resolution polygonal CAD data. Also our goal is to design algorithms that are general in the sense that they do not require any knowledge of the specific source of the data. For certain applications this additional knowledge could be exploited to design a more effective simplification algorithm, but this would also limit the applicability of the method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">LOCAL SURFACE PROPERTIES</head><p>In this section we describe how we estimate local surface properties from the underlying point cloud. These techniques will be used in the simplification algorithms presented below: Iterative simplification (Section 3.2) requires an accurate estimation of the tangent plane, while clustering (Section 3.1) employs a surface variation estimate (Section 2.1). Particle simulation (Section 3.3) makes use of both methods and additionally applies a moving least-squares projection operator (Section 2.2) that will also be used for measuring surfaces error in Section 4. Our algorithms take as input an unstructured point cloud describing a smooth, two-manifold boundary surface of a 3D object. The computations of local surface properties are based on local neighborhoods of sample points. We found that the set of -nearest neighbors of a sample , denoted by the index set , works well for all our models. More sophisticated neighborhoods, e.g. Floater's method based on local Delaunay triangulations <ref type="bibr" target="#b4">[5]</ref> or Linsen's angle criterion <ref type="bibr" target="#b19">[20]</ref> could be used for highly non-uniformly sampled models at the expense of higher computational overhead. To obtain an estimate of the local sampling density at a point , we define , where is the radius of the enclosing sphere of the -nearest neighbors of given by .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Covariance Analysis</head><p>As has been demonstrated in earlier work (e.g. <ref type="bibr" target="#b10">[11]</ref> and <ref type="bibr" target="#b26">[27]</ref>), eigenanalysis of the covariance matrix of a local neighborhood can be used to estimate local surface properties. The covariance matrix for a sample point is given by ,</p><p>where is the centroid of the neighbors of (see <ref type="figure" target="#fig_1">Figure 2</ref>). Consider the eigenvector problem .</p><p>(</p><p>Since is symmetric and positive semi-definite, all eigenvalues are real-valued and the eigenvectors form an orthogonal frame, corresponding to the principal components of the point set defined by <ref type="bibr" target="#b12">[13]</ref>. The measure the variation of the , along the direction of the corresponding eigenvectors. The total variation, i.e. the sum of squared distances of the from their center of gravity is given by .</p><p>( 3 )</p><p>Normal Estimation. Assuming , it follows that the plane <ref type="bibr" target="#b3">(4)</ref> through minimizes the sum of squared distances to the neighbors of <ref type="bibr" target="#b12">[13]</ref>. Thus approximates the surface normal at , or in other words, and span the tangent plane at . To compute a consistent orientation of the normal vectors, we use a method based on the minimum spanning tree, as described in <ref type="bibr" target="#b10">[11]</ref>. </p><formula xml:id="formula_2">P p i IR 3 ∈ { } = S k p P ∈ N p ρ p ρ k r 2 ⁄ = r k p r max i N p ∈ p p i - = 3 3 × C p C p i 1 p - … p i k p - T p i 1 p - … p i k p - i j N p ∈ , ⋅ = p p i j p C v l ⋅ λ l v l ⋅ = l 0 1 2 , , { } ∈ , C λ l v l N p λ l p i i N p ∈ , p i p i p - 2 i N p ∈ λ 0 λ 1 λ 2 + + = r p p covariance ellipsoid T x ( ) λ 0 v 0 λ 1 v 1 p i p i N p (a) (b) λ 0 λ 1 λ 2 ≤ ≤ T x ( ): x p - ( ) v 0 ⋅ 0 = p p v 0 n p p v 1 v 2 p Surface Variation.</formula><p>quantitatively describes the variation along the surface normal, i.e. estimates how much the points deviate from the tangent plane (4). We define <ref type="bibr" target="#b4">(5)</ref> as the surface variation at point in a neighborhood of size . If , all points lie in the plane. The maximum surface variation is assumed for completely isotropically distributed points. Note that surface variation is not an intrinsic feature of a point-sampled surface, but depends on the size of the neighborhood. Note also that and describe the variation of the sampling distribution in the tangent plane and can thus be used to estimate local anisotropy.</p><p>Many surface simplification algorithms use curvature estimation to decrease the error of the simplified surface by concentrating more samples in regions of high curvature. As <ref type="figure" target="#fig_2">Figure 3</ref> illustrates, surface variation is closely related to curvature.</p><p>However, is more suitable for simplification of point-sampled surfaces than curvature estimation based on function fitting. Consider a surface with two opposing flat parts that come close together. Even though a low curvature would indicate that few sampling points are required to adequately represent the surface, for point-based surfaces we need a high sample density to be able to distinguish the different parts of the surface. This is more adequately captured by the variation measure .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Moving Least Squares Surfaces</head><p>Recently, Levin has introduced a new point-based surface representation called moving least squares (MLS) surfaces <ref type="bibr" target="#b16">[17]</ref>. Based on this representation, Alexa et al. have implemented a high-quality rendering algorithm for point set surfaces <ref type="bibr" target="#b0">[1]</ref>. We will briefly review the MLS projection operator and discuss an extension for non-uniform sampling distributions. Given a point set , the MLS surface is defined implicitly by a projection operator as the points that project onto themselves, i.e. . is defined by a two-step procedure: First a local reference plane is computed by minimizing the weighted sum of squared distances ,</p><p>where is the projection of onto and is a global scale factor. Then a bivariate polynomial is fitted to the points projected onto the reference plane using a similar weighted least squares optimization. The projection of onto is then given as (for more details see <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b0">1]</ref>).</p><p>Adaptive MLS Surfaces. Finding a suitable global scale factor can be difficult for non-uniformly sampled point clouds. In regions of high sampling density many points need to be considered in the least squares equations leading to high computational cost. Even worse, if the sampling density is too low, only very few points will contribute to Equation (6) due to the exponential falloff of the weight function. This can cause instabilities in the optimization which lead to wrong surface approximations. We propose an extension of the static MLS approach, where instead of considering samples within a fixed radius proportional to , we collect the -nearest neighbors and adapt according to the radius of the enclosing sphere. By dynamically choosing , we ensure that only points within the -neighborhood contribute noticeably to the least-squares optimization of Equation <ref type="bibr" target="#b5">(6)</ref>. While our experiments indicate that this adaptive scheme is more robust than the standard method, a mathematical analysis of the implications remains to be done.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">SURFACE SIMPLIFICATION METHODS</head><p>In this section we present a number of simplification algorithms for surfaces represented by discrete point clouds: Clustering methods are fast and memory-efficient, iterative simplification puts more emphasis on high surface quality, while particle simulation allows intuitive control of the resulting sampling distribution. After describing the technical details, we will discuss the specific pros and cons of each method in more detail in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Clustering</head><p>Clustering methods have been used in many computer graphics applications to reduce the complexity of 3D objects. Rossignac and Borrel, for example, used vertex clustering to obtain multiresolution approximations of complex polygonal models for fast rendering <ref type="bibr" target="#b23">[24]</ref>. The standard strategy is to subdivide the model's bounding box into grid cells and replace all sample points that fall into the same cell by a common representative. This volumetric approach has some drawbacks, however. By using a grid of fixed size this method cannot adapt to non-uniformities in the sampling distribution. Furthermore, volumetric clustering easily joins unconnected parts of a surface, if the grid cells are too large. To alleviate these shortcomings, we use a surface-based clustering approach, where clusters are build by collecting neighboring samples while regarding local sampling density. We distinguish two general approaches for building clusters. An incremental approach, where clusters are created by region-growing, and a hierarchical approach that splits the point cloud into smaller sub- sets in a top-down manner <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>. Both methods create a set of clusters, each of which is replaced by a representative sample, typically its centroid, to create the simplified point cloud .</p><formula xml:id="formula_4">λ 0 σ n p ( ) λ 0 λ 0 λ 1 λ 2 + + ------------------------------ = p n σ n p ( ) 0 = σ n p ( ) 1 3 ⁄ = λ 1 λ 2 N p p σ n σ n P S MLS P ( ) Ψ S MLS P ( ) x IR 3 Ψ P x , ( ) ∈ x = { } = Ψ P r , ( ) H x IR 3 ∈ x n ⋅ D - 0 = { } = p n ⋅ D - ( ) 2 e r q - 2 h 2 ⁄ - p P ∈ q r H h g u v , ( ) H r S MLS P ( ) Ψ P r , ( ) q g 0 0 , ( ) n ⋅ + = h h k h r h r 3 ⁄ = k</formula><p>Clustering by Region-growing. Starting from a random seed point , a cluster is built by successively adding nearest neighbors. This incremental region-growing is terminated when the size of the cluster reaches a maximum bound. Additionally, we can restrict the maximum allowed variation of each cluster. This results in a curvature-adaptive clustering method, where more and smaller clusters are created in regions of high surface variation. The next cluster is then build by starting the incremental growth with a new seed chosen from the neighbors of and excluding all points of from the region-growing. Due to fragmentation, this method creates many clusters that did not reach the maximum size or variation bound, but whose incremental growth was restricted by adjacent clusters. To obtain a more even distribution of clusters, we distribute the sample points of all clusters that did not reach a minimum size and variation bound (typically half the values of the corresponding maximum bounds) to neighboring clusters (see <ref type="figure" target="#fig_3">Figure 4 (a)</ref>). Note that this potentially increases the size and variation of the clusters beyond the user-specified maxima.</p><p>Hierarchical Clustering. A different method for computing the set of clusters recursively splits the point cloud using a binary space partition. The point cloud is split if:</p><p>• The size is larger than the user specified maximum cluster size or • the variation is above a maximum threshold .</p><p>The split plane is defined by the centroid of and the eigenvector of the covariance matrix of with largest corresponding eigenvector (see <ref type="figure" target="#fig_1">Figure 2 (b)</ref>). Hence the point cloud is always split along the direction of greatest variation (see also <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>). If the splitting criterion is not fulfilled, the point cloud becomes a cluster . As shown in <ref type="figure" target="#fig_3">Figure 4 (b)</ref>, hierarchical clustering builds a binary tree, where each leaf of the tree corresponds to a cluster. A straightforward extension to the recursive scheme uses a priority queue to order the splitting operations <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>. While this leads to a significant increase in computation time, it allows direct control over the number of generated samples, which is difficult to achieve by specifying and only. <ref type="figure" target="#fig_4">Figure 5</ref> illustrates both incremental and hierarchical clustering, where we use oriented circular splats to indicate the sampling distribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Iterative Simplification</head><p>A different strategy for point-based surface simplification iteratively reduces the number of points using an atomic decimation operator. This approach is very similar to mesh-based simplification methods for creating progressive meshes <ref type="bibr" target="#b9">[10]</ref>. Decimation operations are usually arranged in a priority queue according to an error metric that quantifies the error caused by the decimation. The iteration is then performed in such a way that the decimation operation causing the smallest error is applied first. Earlier work <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b19">[20]</ref> uses simple point removal, i.e. points are iteratively removed from the point cloud, resulting in a simplified point cloud that is a subset of the original point set. As discussed above, true subsampling is prone to aliasing and often creates uneven sampling distributions. Therefore, we use point-pair contraction, an extension of the common edge collapse operator, which replaces two points and by a new point . To rate the contraction operation, we use an adaptation of the quadric error metric presented for polygonal meshes in <ref type="bibr" target="#b5">[6]</ref>. The idea here is to approximate the surface locally by a set of tangent planes and to estimate the geometric deviation of a mesh vertex from the surface by the sum of the squared distances to these planes. The error quadrics for each vertex are initialized with a set of planes defined by the triangles around that vertex and can be represented by a symmetric matrix . The quality of the collapse is then rated according to the minimum of the error functional . In order to adapt this technique to the decimation of unstructured point clouds we use the -nearest neighbor relation, since manifold surface connectivity is not available. To initialize the error quadrics for every point sample , we estimate a tangent plane for every edge that connects with one of its neighbors . This tangent plane is spanned by the vector and , where is the estimated normal vector at . After this initialization the point cloud decimation works exactly like mesh decimation with the point inheriting the neighborhoods of its ancestors and and being assigned the error functional . <ref type="figure" target="#fig_5">Figure 6</ref> shows an example of a simplified point cloud created by iterative point-pair contraction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Particle Simulation</head><p>In <ref type="bibr" target="#b28">[29]</ref>, Turk introduced a method for resampling polygonal surfaces using particle simulation. The desired number of particles is randomly spread across the surface and their position is equalized using a point repulsion algorithm. Point movement is restricted to  </p><formula xml:id="formula_5">C i { } P′ p 0 C 0 σ n C 1 C 0 C 0 (a) (b) C 0 C 1 C 2 split plane centroid v 2 leaf node = cluster P P n max σ n P ( ) σ max P v 2 P P C i n max σ max</formula><formula xml:id="formula_6">p 1 p 2 p v v 4 4 × Q v v 1 v 2 , ( ) v → Q v Q v 1 Q v 2 + = k p E i p p i e i p p i - = b i e i n × = n p p p 1 p 2 Q v Q v 1 Q v 2 + =</formula><p>the surface defined by the individual polygons to ensure an accurate approximation of the original surface. Turk also included a curvature estimation method to concentrate more samples in regions of high curvature. Finally, the new vertices are re-triangulated yielding the resampled triangle mesh. This scheme can easily be adapted to point-sampled geometry.</p><p>Spreading Particles. Turk initializes the particle simulation by randomly distributing points on the surface. Since a uniform initial distribution is crucial for fast convergence, this random choice is weighted according to the area of the polygons. For point-based models, we can replace this area measure by a density estimate (see Section 2). Thus by placing more samples in regions of lower sampling density (which correspond to large triangles in the polygonal setting), uniformity of the initial sample distribution can ensured.</p><p>Repulsion. We use the same linear repulsion force as in <ref type="bibr" target="#b28">[29]</ref>, because its radius of influence is finite, i.e. the force vectors can be computed very efficiently as ,</p><p>where is the force exerted on particle due to particle , is a force constant and is the repulsion radius. The total force exerted on is then given as ,</p><p>where is the neighborhood of with radius . Using a 3D grid data structure, this neighborhood can be computed efficiently in constant time.</p><p>Projection. In Turk's method, displaced particles are projected onto the closest triangle to prevent to particles from drifting away from the surface. Since we have no explicit surface representation available, we use the MLS projection operator (see Section 2.2) to keep the particles on the surface. However, applying this projection every time a particle position is altered is computationally too expensive. Therefore, we opted for a different approach: A particle is kept on the surface by simply projecting it onto the tangent plane of the point of the original point cloud that is closest to . Only at the end of the simulation, we apply the full moving least squares projection, which alters the particle positions only slightly and does not change the sampling distribution noticeably.</p><p>Adaptive Simulation. Using the variation estimate of Section 2.1, we can concentrate more points in regions of high curvature by scaling their repulsion radius with the inverse of the variation . It is also important to adapt the initial spreading of particles accordingly to ensure fast convergence. This can be done by replacing the density estimate by . <ref type="figure" target="#fig_7">Figure 7</ref> gives an example of an adaptive particle simulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ERROR MEASUREMENT</head><p>In Section 3 we have introduced different algorithms for pointbased surface simplification. To evaluate the quality of the surfaces generated by these methods we need some means for measuring the distance between two point-sampled surfaces. Our goal is to give both numerical and visual error estimates, without requiring any knowledge about the specific simplification algorithm used. In fact, our method can be applied to any pair of pointsampled surfaces. Assume we have two point clouds and representing two surfaces and , respectively. Similar to the Metro tool <ref type="bibr" target="#b3">[4]</ref>, we use a sampling approach to approximate surface error. We measure both the maximum error , i.e. the two-sided Hausdorff distance, and the mean error , i.e. the area-weighted integral of the point-to-surfaces distances. The idea is to create an upsampled point cloud of points on and compute the distance for each . Then and <ref type="bibr" target="#b8">(9)</ref> .</p><p>( 1 0 )</p><p>is calculated using the MLS projection operator with linear basis function (see Section 2.2). Effectively, computes the closest point such that for a , where is the surface normal at and is the distance between and (see <ref type="figure">Figure 8</ref>). Thus the point-to-surface distance is given as . Note that this surface-based approach is crucial for meaningful error estimates, as the Haussdorff distance of the two point sets and does not adequately measure the distance between and . As an example, consider   On the right, a simplified version consisting of 6,000 points is shown, where the size of the splats is proportional to the repelling force of the corresponding particle.</p><formula xml:id="formula_9">F i p ( ) k r p p i - - ( ) p p i - ( ) ⋅ = F i p ( ) p p i k r p F p ( ) F i p ( ) i N p ∈ = N p p r Ψ</formula><formula xml:id="formula_10">p p′ p σ n ρ ρ σ n ⋅ P P′ S S′ ∆ max S S′ , ( ) ∆ avg S S′ , ( ) Q S d q S′ , ( ) min p′ S′ ∈ d q p′ , ( ) = q Q ∈ ∆ max S S′ , ( ) max q Q ∈ d q S′ , ( ) ≈ ∆ avg S S′ , ( ) 1 Q ------- d q S′ , ( ) q Q ∈ ≈ d q S′ , ( ) Ψ Ψ q′ S′ ∈ q q′ d n ⋅ + = q Q ∈ n q ′ d q q′ d q S′ , ( ) d qq′ = P P′ S S′</formula><p>a point cloud that has been created by randomly subsampling . Even though the corresponding surfaces can be very different, the Haussdorff distance of the point sets will always be zero.</p><p>To create the upsampled point cloud we use the uniform particle simulation of Section 3.3. This allows the user to control the accuracy of the estimates (9) and (10) by specifying the number of points in . To obtain a visual error estimate, the sample points of can be color-coded according to the point-to-surface distance and rendered using a standard point rendering technique (see <ref type="figure" target="#fig_0">Figures 10 and 13</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS &amp; DISCUSSION</head><p>We have implemented the algorithms described in Section 3 and conducted a comparative analysis using a large set of point-sampled models. We also examined smoothing effects of the simplification and MLS projection (Section 5.2) and compared pointbased simplification with mesh-based simplification (Section 5.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Comparison of Simplification Methods</head><p>Surface error has been measured using the method presented in Section 4. Additionally, we considered aspects such as sampling distribution of the simplified model, time and space efficiency and implementational issues. For conciseness, Figures 9 (a) and 10 show evaluation data for selected models that we found representative for a wide class of complex point-based surfaces.</p><p>Surface Error. <ref type="figure" target="#fig_0">Figure 10</ref> shows visual and quantitative error estimates (scaled according to the object's bounding box diagonal) for the David model that has been simplified from 2,000,606 points to 5,000 points (see also <ref type="figure" target="#fig_0">Figure 1</ref>). Uniform incremental clustering has the highest average error and since all clusters consist of roughly the same number of sample points, most of the error is concentrated in regions of high curvature. Adaptive hierarchical clustering performs slightly better, in particular in the geometrically complex regions of the hair. Iterative simplification and particle simulation provide lower average error and distribute the error more evenly across the surface. In general we found the iterative simplification method using quadric error metrics to produce the lowest average surface error.</p><p>Sampling Distribution. For clustering methods the distribution of samples in the final model is closely linked to the sampling distribution of the input model. In some applications this might be desirable, e.g. where the initial sampling pattern carries some semantics such as in geological models. Other applications, e.g. pyramid algorithms for multilevel smoothing <ref type="bibr" target="#b14">[15]</ref> or texture synthesis <ref type="bibr" target="#b29">[30]</ref>, require uniform sampling distributions, even for highly non-uniformly sampled input models. Here non-adaptive particle simulation is most suitable, as it distributes sample points uniformly and independent of the sampling distribution of the underlying surface. As illustrated in <ref type="figure" target="#fig_0">Figure 11</ref>, particle simulation also provides a very easy mechanism for locally controlling the sampling density by scaling the repulsion radius accordingly. While similar effects can be achieved for iterative simplification by penalizing certain point-pair contractions, we found that particle simulation offers much more intuitive control. Also note the smooth transition in sampling rate shown in the zoomed region.</p><p>Computational Effort. <ref type="figure" target="#fig_9">Figure 9</ref> shows computation times for the different simplification methods both as a function of target model size and input model size. Due to the simple algorithmic structure, clustering methods are by far the fastest technique presented in this paper. Iterative simplification has a relatively long pre-computing phase, where initial contraction candidates and corresponding error quadrics are determined and the priority queue is set up. The simple additive update rule of the quadric metric (see Section 3.2) make the simplification itself very efficient, however. In our current implementation particle simulation is the slowest simplification technique for large target model sizes, mainly due to slow convergence of the relaxation step. We believe, however, that this convergence can be improved considerably by using a hierarchical approach similar to <ref type="bibr" target="#b30">[31]</ref>. The algorithm would start with a small number of particles and relax until the particle positions have reached equilibrium. Then particles are split, their repulsion radius is adapted and relaxation continues. This scheme can be repeated until the desired number of particles is obtained.</p><p>It is interesting to note that for incremental clustering and iterative simplification the execution time increases with decreasing target model size, while hierarchical clustering and particle simulation are more efficient the smaller the target models. Thus the latter are more suitable for real-time applications where the fast creation of coarse model approximations is crucial.    Memory Requirements and Data Structures. Currently all methods presented in this paper are implemented in-core, i.e. require the complete input model as well as the simplified point cloud to reside in main memory. For incremental clustering we use a balanced kd-tree for fast nearest-neighbor queries, which can be implemented efficiently as an array <ref type="bibr" target="#b25">[26]</ref> requiring bytes, where is the size of the input model. Hierarchical clustering builds a BSP tree, where each leaf node corresponds to a cluster. Since the tree is build by re-ordering the sample points, each node only needs to store the start and end index in the array of sample points and no additional pointers are required. Thus this maximum number of additional bytes is , where is the size of the simplified model. Iterative simplification requires 96 bytes per point contraction candidate, 80 of which are used for storing the error quadric (we use doubles here as we found that single precision floats lead to numerical instabilities). If we assume six initial neighbors for each sample point, this amounts to bytes. Particle simulation uses a 3D grid data structure with bucketing to accelerate the nearest neighbor queries, since a static kdtree is not suitable for dynamically changing particle positions. This requires a maximum of bytes, where is the resolution of the grid.</p><formula xml:id="formula_11">} S′ S q′ q d p P ∈ p′ P′ ∈ q Q ∈ S S′ P P′ P Q q Q ∈ q′ S′ ∈ qq′ S′ d q S′ , ( ) d qq′ =</formula><p>Thus incremental clustering, iterative simplification and particle simulation need additional storage that is linearly proportional to the number of input points, while the storage overhead for hierarchical clustering depends only on the target model size. <ref type="figure" target="#fig_0">Figure 12</ref> demonstrates the smoothing effect of simplification in connection with the MLS projection. The dragon has first been simplified from 435,545 to 9,863 points using incremental clustering and upsampled to its original size using particle simulation. Observe the local shrinkage effects that also occur in iterative Laplacian smoothing <ref type="bibr" target="#b27">[28]</ref>. Computing the centroid of each cluster is in fact very similar to a discrete approximation of the Laplacian. Additionally, the MLS projection with Gaussian weight function implicitly defines a Gaussian low-pass filter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Simplification and Smoothing</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Comparison to Mesh Simplification</head><p>In <ref type="figure" target="#fig_0">Figure 13</ref> we compare point-based simplification with simplification for polygonal meshes. In (a), the initial point cloud is simplified from 134,345 to 5,000 points using the iterative simplification method of Section 3.2. The resulting point cloud has then been triangulated using the surface reconstruction method of <ref type="bibr" target="#b6">[7]</ref>. In (b), we first triangulated the input point cloud and then simplified the resulting polygonal surface using the mesh simplification tool QSlim <ref type="bibr" target="#b5">[6]</ref>. Both methods produce similar results in terms of surface error and both simplification processes take approximately the same time (~3.5 seconds). However, creating the triangle mesh from the simplified point cloud took 2.45 seconds in (a), while in (b) reconstruction time for the input point cloud was 112.8 seconds. Thus when given a large unstructured point cloud, it is much more efficient to first do the simplification on the point data and then reconstruct a mesh (if desired) than to first apply a reconstruction method and then simplify the triangulated surface. This illustrates that our methods can be very useful when dealing with large geometric models stemming from 3D acquisition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS &amp; FUTURE WORK</head><p>We have presented and analyzed different strategies for surface simplification of geometric models represented by unstructured point clouds. Our methods are fast, robust and create surfaces of high quality, without requiring a tesselation of the underlying surface. We have also introduced a versatile tool for measuring the distance between two point-sampled surfaces. We believe that the surface simplification algorithms presented in this paper can be the basis of many point-based processing applications such as multilevel smoothing, multiresolution modeling, compression, and efficient level-of-detail rendering.</p><p>Directions for future work include out-of-core implementations of the presented simplification methods, design of appearance-preserving simplification, progressive schemes for representing pointbased surface and point-based feature extraction using the variation estimate .    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :IEEE</head><label>1</label><figDesc>Michelangelo's David at different levels-of-detail. From left to right, 10k, 20k, 60k, 200k and 2000k points for the original model, rendered with a point splatting renderer. Visualization 2002 Oct. 27 -Nov. 1, 2002, Boston, MA, USA 0-7803-7498-3/02/$17.00 © 2002 IEEE</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Local neighborhood (a) and covariance analysis (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Comparison of surface curvature and surface variation on the igea model (a). In (b), curvature is computed analytically from a cubic polynomial patch fitted to the point set using moving least squares (see Section 2.2). (c) and (d) show surface variation for different neighborhood sizes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>(a) Clustering by incremental region growing, where "stray samples" (black dots) are attached to the cluster with closest centroid. (b) Hierarchical clustering, where the thickness of the lines indicates the level of the BSP tree (2D for illustration).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Clustering: Uniform incremental clustering is shown in the left column, adaptive hierarchical clustering in the right column. The top row illustrates the clusters on the original point set, the bottom row the resulting simplified point set (1000 points), where the size of the splats corresponds to cluster size.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Iterative simplification of the Isis model from 187,664 (left) to 1,000 sample points (middle). The right image shows all remaining potential point-pair contractions indicated as an edge between two points. Note that these edges do not necessarily form a consistent triangulation of the surface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>ρ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Simplification by adaptive particle simulation. The left image shows the original model consisting of 75,781 sample points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure</head><label></label><figDesc>Figure 8: Measuring the distance between two surfaces (red curve) and (black curve) represented by two point sets (red dots) and (black dots). is upsampled to (blue dots) and for each a base point is found (green dots), such that the vector is orthogonal to . The point-to-surface distance is then equal to .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Execution times for simplification, measured on a Pentium 4 (1.8GHz) with 1Gb of main memory: (a) as a function of target model size for the dragon model (435,545 points), (b) as a function of input model size for a simplification to 1%.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :</head><label>10</label><figDesc>Surface Error for Michelangelo's David simplified from 2,000,606 points to 5,000 points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 11 :</head><label>11</label><figDesc>User-controlled particle simulation. The repulsion radius has been decreased to 10% in the region marked by the blue circle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 12 :</head><label>12</label><figDesc>Smoothing effect on the dragon by simplification and successive upsampling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 13 :</head><label>13</label><figDesc>Comparison between point cloud simplification and mesh simplification: The igea model simplified from 134,345 to 5,000 points. original: 435,545 points (b) simplified: 9,863 points (incremental clustering) (c) upsampled: 435,545 points (part. simulation) (a) Iterative point cloud simplification (b) QSlim (mesh simplification)</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>Our thanks to Marc Levoy and the Digital Michelangelo Project people for making their models available to us. This work is supported by the joint Berlin/Zurich graduate program Combinatorics, Geometry, and Computation, financed by ETH Zurich and the German Science Foundation (DFG).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Point Set Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexa</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Behr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cohen-Or</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fleishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="volume">01</biblScope>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">A New Voronoi-Based Surface Reconstruction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Amenta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kamvysselis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">98</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Model simplification through refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brodsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Watson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Measuring error on simplified surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rocchini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Scopigno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Metro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1998-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Meshless parameterization and surface reconstruction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Floater</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reimers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Aided Geom. Design</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Surface simplification using quadric error metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">97</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Surface reconstruction based on a dynamical system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Giessen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>John</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROGRAPHICS 2002</title>
		<imprint/>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Graphics in Medicine: From Visualization to Surgery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Survey of Polygonal Surface Simplification Algorithms. Multiresolution Surface Modeling Course</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page">97</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Progressive Meshes. SIGGRAPH</title>
		<imprint>
			<biblScope unit="volume">96</biblScope>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Surface reconstruction from unorganized points</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Stuetzle</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">92</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fairing of Non-Manifolds for Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hubeli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization 00</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Principle Component Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Jolliffe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Differential Point Rendering. Rendering Techniques 01</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kalaiah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshney</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Springer Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Interactive Multi-Resolution Modeling on Arbitrary Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Campagna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vorsatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Seidel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">98</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Feature Sensitive Surface Extraction from Volume Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Botsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Schwanecke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Seidel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">01</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Mesh-independent surface interpolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Levin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Computational Mathematics</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pulli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Curless</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ginzton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ginsberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shade</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fulk</surname></persName>
		</author>
		<title level="m">The Digital Michelangelo Project: 3D Scanning of Large Statues. SIGGRAPH 00</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A memory insensitive technique for large model simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lindstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="volume">01</biblScope>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Point Cloud Representation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Linsen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
		<respStmt>
			<orgName>Faculty of Computer Science, University of Karlsruhe</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Spectral Processing of Point-Sampled Geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pauly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">01</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The &quot;Parallel Vectors&quot; Operator -A Vector Field Visualization Primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="volume">99</biblScope>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pfister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zwicker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Baar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Surfels</surname></persName>
		</author>
		<title level="m">Surface Elements as Rendering Primitives. SIGGRAPH 00</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Multiresolution 3D approximations for rendering complex scenes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Borrel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modeling in Computer Graphics: Methods and Applications</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">QSplat: A Multiresolution Point Rendering System for Large Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">00</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sedgewick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms in C++</title>
		<imprint>
			<date type="published" when="1998" />
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Efficient Adaptive Simplification of Massive Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shaffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Visualization</title>
		<imprint>
			<biblScope unit="volume">01</biblScope>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A Signal Processing Approach to Fair Surface Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Taubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIG-GRAPH</title>
		<imprint>
			<biblScope unit="volume">95</biblScope>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Re-Tiling Polygonal Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">92</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Texture Synthesis on Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Turk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">01</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Using Particles To Sample and Control Implicit Surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Witkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heckbert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">94</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Isosurface Topology Simplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
		<ptr target="http://www.multires.caltech.edu/pubs/topo_filt.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
