<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computing Singularities of 3D Vector Fields with Geometric Algebra</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mann</surname></persName>
							<email>smann@uwaterloo.ca</email>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<addrLine>Waterloo, On-tario N2L 3G1 CANADA</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alyn</forename><surname>Rockwood</surname></persName>
							<affiliation key="aff3">
								<orgName type="department">Colorado School of Mines, Dept. Of Math and Computer Science</orgName>
								<address>
									<postCode>80401</postCode>
									<settlement>Golden</settlement>
									<region>CO</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Colorado School of Mines</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Computing Singularities of 3D Vector Fields with Geometric Algebra</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>G.4 [Mathematical Software]: Algorithm design and analysis-Visualization Geometric Algebra</term>
					<term>3D Vector Fields</term>
					<term>Singularities</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Critical points of a vector field are key to their characterization. Not only their positions but also their indexes are crucial for understanding vector fields. Considerable work exists in 2D, but less is available for 3D or higher dimensions. Geometric Algebra is a derivative of Clifford Algebra that not only enables a succinct definition of the index of a critical point in higher dimension; it also provides insight and computational pathways for calculating the index. We describe the problems in terms of Geometric Algebra and present an octree based solution using the algebra for finding critical points and their index in a 3D vector field.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>We define the vector field to be a continuous function </p><formula xml:id="formula_0">V : M → R n ,</formula><p>where K is the normal curvature of γ(B(c)). The normal curvature of a curve is the infinitesimal change of length at x on a curve compared to the change in γ(x). Similarly, for a surface we compare the changes in surface areas. One would think that this would extend to higher dimensional volume changes, but this is not the case for historical reasons. Nevertheless it is the definition with which we will work (see Gottlieb <ref type="bibr" target="#b7">[7]</ref>). Hence we compare the infinitesimal change of volume (length, area, etc.) of B(c) to γ(B(c)). In 2D the Gauss map records how many times the vector field on the circle B(c) cycles, or winds, as one follows the path once around the circle. The winding may be in the opposite direction of the path, or go multiple times around, but it will always be an integer when properly normalized by the volume of the n − 1 sphere. See <ref type="figure" target="#fig_1">Figure 1</ref> for examples. For obvious reasons the index in 2D is often called the winding number, an unfortunate choice of terminology, since it becomes confusing in higher dimensions. A better choice would have been to call it a covering number. One can imagine the Gauss map of the ball B being some multiple in surface area compared to the original ball, i.e., it wraps it several times. Since the area is oriented, it can also be some negative multiple. This is the index. The index of a critical point is a crucial factor in determining the topology of the vector field in various well-known display algorithms (see <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b17">17]</ref>) It is our aim to provide an alternative way to view the index using Geometric Algebra, which then leads to alternative ways to calculate. Ultimately this path of investigation will lead to a number of unique application issues; ones that are algorithmic, numerical and visual.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">GEOMETRIC ALGEBRA AND THE INDEX</head><p>In brief, Geometric Algebra (GA) is a graded, non-commutative (Clifford) algebra, which is geometrically intuitive (introductions to GA can be found in <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b4">4,</ref><ref type="bibr" target="#b12">12]</ref>). Elements of the algebra are di- mensionally homogeneous (grade = intrinsic dimension) such as the familiar scalars (0D), vectors (1D), as well as area oriented bivectors (2D), volume oriented trivectors (3D) and so forth. Multivectors are combinations of the k-vectors. The fundamental geometric product defines inner, i.e., grade lowering, products; and outer, i.e., grade raising, products. The outer product "∧" defines a k-vector V = a0∧a1∧. . .∧a k where the ai are vectors. "Wedging" a vector with a k-vector raises its grade one step. In GA, the k-vectors are the basic elements of computation, and can be added and combined with all the products. Examples of k-blades of dimensions 0,1,2,3 are shown in <ref type="figure" target="#fig_2">Figure 2</ref>. Although this figure indicates a particular shape for the outer product, a k-blade does not have a specific shape, only a signed magnitude and orientation. GA also includes the pseudo-scalar I, which is the maximal grade, unit element. Multiplying an element by the pseudo-scalar yields an element that is dual in grade; thus an n − i grade element becomes an i grade element and vice-versa. These few facts are needed to understand the GA version of the index theorem. Pauli Algebra is one model of GA although for purposes of insight and algebraic thinking it is a clumsy one, especially as the dimension increases. It is much more effective to use the axioms and the svelte body of theorems of GA <ref type="bibr" target="#b9">[9]</ref>. Pauli Algebra does, however, offer one method by which GA can be mapped to current computer systems, one which we take advantage of in what follows computationally (see GABLE etc. <ref type="bibr" target="#b5">[5,</ref><ref type="bibr" target="#b6">6,</ref><ref type="bibr" target="#b14">14]</ref>).</p><p>Hestenes <ref type="bibr">([10]</ref> p.275) gives a general formula for computing the index of a critical point of a vector field V on a manifold using GA. For 3D this formula reduces to</p><formula xml:id="formula_2">ind(c) = C I B(c) V ∧ dV /|V | 3 .<label>(3)</label></formula><p>The constant C = 1/(6 × 4π/3) of (3) contains the sphere normalization factor, with an additional factor of 6 to adjust the volume of the trivectors, whose magnitude is that of a parallelepiped having six times the volume of the desired tetrahedron. The radius part of the sphere factor is absorbed into the denominator inside the integral, |V | 3 . The extended differential dV is a bivector perpendicular to V <ref type="bibr" target="#b10">[10]</ref>; thus V ∧ dV represents an infinitesimal volume element. This differs from (2) which uses surface elements for comparison as approximated by dV , but the difference between the two are one of proportionality. Moreover, the discretized volume elements are perceived to be a closer approximation than the surface case for the same discretization. Dividing by the pseudoscalar I converts the volume element generated by the integral to a scalar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">FINDING CRITICAL POINTS</head><p>Formula (3) is a straightforward roadmap for computing the index of a critical point in GA. It is intuitive and conceptually easy to program in a GA system (not to minimize some of the implementation details given later). Another advantage is that the sense, or sign, of the elements is automatically tracked within GA. We do not have to keep track of surface orientations, i.e., is it back facing or not? Our goal is not only to compute such indexes, but also to find the critical points in the first case. To do this we will employ a cuberille subdivision of space. To understand how this will work we need to make several observations. The first is that a cube is a sphere -topologically speaking. Anything homeomorphic to the ball B will work in <ref type="bibr" target="#b2">(3)</ref>. We compute (3) over each cube, which now tiles the space and provides a complete, non-redundant covering not proffered by balls. If the index of a computed cube is 0, then it may be assumed that there is no critical point to within the resolution of the cube. It can happen that there are multiple critical points that sum to 0. Whenever critical points are close their aggregate behavior acts like a single critical point with index equal to the sum of indexes of the constituent critical points. For index 0, it will not be apparent that there is a critical point unless higher resolutions are investigated.</p><p>If the index of a cube is nonzero, then a critical point has been found, or perhaps a collection of critical points close to each other. Such collections of critical points are indistinguishable from a single critical point of the same index up to the resolution computed. This emphasizes the crucial role that setting the resolution has. It also indicates an important trade-off between computational cost and accuracy. In some applications one knows that a given distance isolates critical points. In such cases an octree algorithm can be used to precisely locate those points within cubes that are identified as containing critical points. The octree subdivides whenever the cube has nonzero index. It is analogous to the root finding problem. Knowledge that roots are separated greatly improves speed and precision. <ref type="figure" target="#fig_3">Figure 3</ref> shows an octree example of locating the critical point for the field given by V ((x, y, z)) = x e1 + y e2 + z e3 (See section 6 for more details on this and other examples). In this, as in most of our figures, we will omit drawing the vector field and instead focus on the singularities in the vector field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RELATED WORK</head><p>There is a considerable amount of work on display of vector field topology, which employs linear expansions of the field in the neighborhood of critical points <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b15">15]</ref>, i.e., use of the eigenvalues of the Jacobian tensor of the field. These methods, however, fail to find the behavior of fields that contain critical points with index other than 1 or −1. As mentioned, Scheuermann et al. discuss methods for determining high order indexes, but they are limited to 2D <ref type="bibr" target="#b17">[17,</ref><ref type="bibr" target="#b18">18,</ref><ref type="bibr" target="#b19">19]</ref>. Trotts et al. introduce the point of infinity as a critical point for infinite fields <ref type="bibr" target="#b20">[20]</ref> .</p><p>The use of octrees for rendering implicit surfaces is closely related to our work <ref type="bibr" target="#b1">[2]</ref>, with the primary differences being the type of field being searched (scalar vs vector) and that with implicit surfaces, the value of the scalar function is computed at the corners of the cube, while with our method we evaluate a vector field at a grid of samples on the faces of the cube.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">IMPLEMENTATION</head><p>Moving from the theory to the basic implementation is straightforward ( <ref type="figure" target="#fig_4">Figure 4</ref>). The integral (3) over the surface of the cube is approximated by sampling each face f of the cube on a regular grid pi,j, evaluating the vector field at each sample point giving vectors pi,j = V (pi,j), normalizing these vectors, forming the trivectors</p><formula xml:id="formula_3">Ri,j =pi,j ∧pi,j+1 ∧pi+1,j Si,j =pi+1,j+1 ∧pi+1,j ∧pi,j+1,</formula><p>and summing the trivectors R f = Ri,j and S f = Si,j. Summing the R f ,S f over all six faces of the cube and normalizing by a factor of 1/(6 × 4π/3) should give a result close in value to an integer that is the index of a critical point inside the cube (if any).</p><p>However, several problems arise. First, as mentioned earlier if the cube size is too large, then critical points may be missed or misclassified. Second, if the sampling grid on the cube faces is too sparse, then the resulting sum might not be close to an integer (i.e., the approximation to the integral is too coarse). Third, the integral over the face of the cube will only detect point singularities; we must use other methods to detect curve and surface singularities.</p><p>We will not address the first issue in this paper; the remainder of this section will address the other two issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Curve singularities</head><p>When a curve singularity passes through the cube over which we are summing, the sum of trivectors over the faces of the cube will be 0. Thus, it will fail to detect the curve singularity. However, consider the 2D version for the computation of indexes using GA:</p><formula xml:id="formula_4">ind(c) = C2 I2 B(c) V ∧ dV /|V | 2 .<label>(4)</label></formula><p>Here, the differential dV is a vector perpendicular to V ; C2 is 1/(2π) (with a normalization factor of π for the area of the unit circle, and a normalization factor of 2 to account for bivectors having a signed magnitude equal to the area of a parallelogram that is twice the area of the desired triangle); and I2 is the unit bivector in the plane. Returning briefly to our 3D problem, consider a planar slice Π of space, and define a new vector field V where for x ∈ Π, the field V (x) is the projection of V (x) onto Π. Applying (4) to a closed curve B in Π over the vector field V , then a non-zero result indicates that there is a point singularity on Π inside B over V . In turn, we know one of the following about V :  Our interest is in case (b), that of curve singularities passing through the face of the cube. To distinguish case (b) from case (a) requires looking more globally at the vector field. Case (c) is a "false singularity," i.e., a singularity in the projected field that is not a singularity in the unprojected field. Such a singularity results when the projected vector is perpendicular to the face of the cube. To distinguish case (b) from case (c), we must localize the singularity (i.e., find a small B), and test the vector field over this smaller region to determine if the vector field is non-zero over this region.</p><p>Applying these ideas to our implementation, for each cube face, we project the pi,j on the edge of the face into the plane of the face and renormalize, giving vectorsp i,j ( <ref type="figure" target="#fig_6">Figure 5</ref>). Along each edge, we form the bivector sum</p><formula xml:id="formula_5">p 0,j ∧p 0,j+1 , p i,n ∧p i+1,n , p n,n−j ∧p n,n−(j+1) , p n−i,0 ∧p n−(i+1),0 ,</formula><p>where n + 1 is the number of samples along each edge. Adding the four sums and normalizing by C2/I2 yields the desired index.</p><p>If the index is non-zero, then one of the three forms of singularities described above lie on the face.</p><p>To determine if the singularity is of type (b), we could allow the octree subdivision to run to completion, and then test one unprojected vector on the (small) face at the deepest level of the subdivision. If its magnitude is large, then we have a singularity of type (c), which we can disregard. To decide if the singularity is of type (a), we should test the other faces of the cube for a second such singularity; if there isn't one, then the singularity is of type (a), and should be treated as a point singularity. If there is a second face with such a singularity, then we have found a curve singularity.</p><p>Such an approach is inefficient, however, as singularities of type (c) (i.e., singularities in V that are not singularities in V ) will be common, but are of no use to us. Thus, allowing the octree subdivision process to localize these singularities is wasted computation. A heuristic to attempt to eliminate such false singularities earlier in the subdivision process is to check the length of all the unnormalized vectors in V sampled on the face of the cube: If we detect a potential curve singularity on a face, and none of the sampled unprojected vectors is close to 0, and the ratio of the largest unprojected vector to the smallest is small, then the potential singularity is likely of type (c) and should be disregarded (i.e., the octree cell should not be subdivided based on this test).</p><p>In some sense, this heuristic is performing a simple numerical search to localize the singularity. From this point of view, we could either (a) use the search to speed the octree subdivision, or (b) use the search instead of (4) to find the curve singularity. While both are reasonable variations of our method, note that (4) is still useful for determining the index of the curve singularity.</p><p>Further note that our method for detecting curves of singularities is similar to the method of Jiang et al. for detecting a vortex core region <ref type="bibr" target="#b11">[11]</ref>. Like us, Jiang et al. project the 3D vector field into a plane. However, they then use Sperner's lemma as a basis for finding where the vortex core passes through the plane rather than using geometric algebra to find a zero of the vector field. (Sperner's lemma basically says that if you start with a properly labeled nsimplex (i.e., one whose vertices have unique labels), then a labeled </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Surface singularities</head><p>To compute a surface singularity, we essentially use the same idea as for computing curve singularities: for each sample point on the edge of the cube, project the corresponding vector onto that edge. The test for whether a surface singularity passes through the edge is simpler than in the case of curve singularities. No outer products are needed -if the projected vectors along an edge change orientation/sign, then there is a singularity in the projected vector field. But just as in the curve singularity case, further tests are needed to see if the singularity in the projected field corresponds to a surface singularity in the unprojected field. Note also that this test will only determine the existence of a surface singularity, without determining its index; see the Conclusions for further discussion of this issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Adaptive method</head><p>The method for computing point singularities omits some critical details for implementation, such as how many samples to take across the face of the cube. The trade-off is clear: more samples will give a more accurate estimate of the integral, but fewer samples are less expensive to compute. Ideally, we would take just enough samples so that the estimates are close to integer values. This leads to the idea of initially taking few samples, and if the result is not close to an integer value, then increase the sample rate.</p><p>We chose a variation of this idea. After sampling, when computing the outer products, we test the magnitude of each outer product. If the magnitude is large, then we have made a poor approximation to the sphere in between the three samples. In this case, we adaptively refine the region between the samples.</p><p>An example of refinement can be seen in <ref type="figure" target="#fig_7">Figure 6</ref>. On the top row is an example of a sampling that results in a positive region (red) that is a reasonable approximation to the sphere, while the negative region (blue) is a poor approximation to the sphere. The left image shows a display of all samples; the middle image shows just the negative region, but with all the sampled vectors drawn; the resulting sum yields an index of 0.3. The image on the right is after refinement, and has a computed index close to 0.0.</p><p>On the bottom row, left, we see a non-uniform sampling of the sphere, with the corresponding vectors shown in the middle image.</p><p>The index computed here is 0.7. After refinement, we obtain the vectors on the right, with a computed index close to 1.0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">EXAMPLES, DISCUSSION</head><p>We tested our technique on a variety of functional vector fields. <ref type="table" target="#tab_0">Table 1</ref> lists the functions for the examples shown in this paper. In these functions, e1, e2, e3 form an orthonormal basis for 3-space. Some of the examples are given as a vector function, while others are given as a scalar function whose vector field is the gradient of the scalar function.</p><p>In all examples, cubes containing point singularities are drawn in red, curve singularities in green, and surface singularities in blue. In all examples, we started with 9 2 samples per face. Only cubes containing a singularity are shown. Cubes that did not contain singularities were also searched, but are not drawn in these figures; roughly speaking, this results in each drawn cube (except those at the maximum depth searched) being subdivided one additional level.</p><p>If a singularity lies on a cube corner, edge, or face, the integral over the cube (and its neighbors that share the singularity) will be 1, but the approximations to the integrals may require several levels of refinement to get close to an integer value. To simplify things, we offset the corners of the initial octree cube from an integer grid by 0.05 to avoid having the singularities land on a cube corner, edge or face. <ref type="figure" target="#fig_9">Figure 7</ref> illustrates our method searching a vector field that has a circle of singularities. On the left is the result when both line and surface false singularities are filtered. Note that this vector field has a point singularity at the origin in addition to a circle of singularities. In the middle, we see the result if we do not filter line singularities, while on the right is the result if we filter neither line nor surface singularities.</p><p>In <ref type="figure" target="#fig_10">Figure 8</ref>, we see an example of a double circle (eight) of singularities, a helix of singularities, and a sphere of singularities. Note that in the double circle of singularities and in the helix of singularities, there are cubes that are incorrectly identified as containing surface singularities. This is a result of the heuristics failing to remove the false surface singularities in these regions.</p><p>Finally, in <ref type="figure" target="#fig_11">Figure 9</ref> we show an example of taking the union and intersection of two vector fields, one of which has a sphere of singularities and the other of which has a cylinder of singularities.</p><p>We also tested our method on vector fields having double point and double line singularities. The function having a double line singularity we tested was V dl (x, y, z) = (A/B)A, where A = x e1 + y e2 and B = x 2 + y 2 e1. In this expression for V dl , we are using the vector multiplication of geometric algebra; note that all vectors in the field V dl will have a 0 component in the e3 direction due to the properties of the geometric multiplication. <ref type="figure" target="#fig_1">Figure 10</ref> shows a rendering of this vector field, together with the double line singularity that our algorithm found.</p><p>One of the double point singularity functions we tested was V dp (x, y, z) = (A/B)A + z e3, where A and B are defined as in the previous paragraph. The double point singularity octree figure looks identical to <ref type="figure" target="#fig_3">Figure 3</ref>. In the vector fields V dl and V dp , we detected the singularities as having index 2. However, as we approached these singularities of higher order, refinement of the sampling of the cube faces became more important for computing accurate estimates of the integral. <ref type="table">Table 6</ref> gives the times required to compute the examples in this paper. These timings were made on a Celeron 400MHz PC under Linux.     </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">VARIATIONS</head><p>Our implementation was a simple proof-of-concept prototype. Obvious improvements exist. For example, when drawing curve singularities, we drew the box containing the curve singularity. Instead, one could search the faces of the cube for close-to-zero values, and connect them with lines. A similar thing could be done for the surface singularities, although this is harder, as something similar to the surface extraction of Marching Cubes is required <ref type="bibr" target="#b13">[13]</ref>. Further, while our method did an excellent job of finding point singularities, it had more troubles with curve singularities, and still more difficulties with surface singularities. In both cases, the problem is that the projected field may have singularities in it that are not in the original field. Filtering out these false singularities is problematic. One improvement would come from using a less local search method. Our method considers each octree cell independently. While a reasonable approach for point singularities, this method is wasting information it could effectively use to determine whether potential curve/surface singularities are true singularities.</p><p>In this paper, we applied our method to functional vector fields. Our method could also be applied to sampled vector fields. With a sampled field, one of the important issues is how to interpolate between the sampled vectors to fill space with a (continuous) vector field. Regardless of the interpolation method, our method would find the singularities within the interpolated sampled field. Furthermore, in interpolated fields, it is not uncommon to have point singularities that are quite close to one another <ref type="bibr" target="#b17">[17]</ref>. Such near singularities cause problems for many methods, which may detect only a single point singularity. With our method, if the octree subdivision around the cluster singularity is not fine enough, it will detect a point singularity of index that is the sum of the cluster. With near singularities, that summed index represents the character of the vector field properly to within the resolution given.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSIONS</head><p>In summary, we have presented a method for finding singularities in 3D vector fields. Our approach uses Geometric Algebra for computing a volume integral over the surface of a cube to detect point singularities, and uses octree subdivision to refine the location of a point singularity. In addition, our method can find curves of singularities, and surfaces of singularities, and it determines the index of the singularity. While finding any singularities by visually inspecting a 3D vector field can be a difficult task, computer assistance is especially needed for determining the index of singularities.</p><p>We note here several things of particular interest with our method. First, we found the use of Geometric Algebra to be a straightforward blueprint in coding the algorithm. While other methods could be used to estimate the integral, the trivector computation of Geometric Algebra automatically handles some of the geometric details, such as polarity and backfacing issues, simplifying the programming job.</p><p>Second, our method attempts to find curves of singularities and surfaces of singularities. Our approach here should be considered a first attempt. Much work remains to be done both (1) on the  theory of what a curve and surface singularity is, and (2) in methods for searching for such singularities. In particular, in searching for surface singularities, we project the 3D vector field on to lines, and search these 1D fields for singularities (which amounts to little more than searching for a change in orientation of the vectors along the line). This leads to the interesting question: simple sources and sinks in 1D vector fields are well known <ref type="bibr" target="#b0">[1]</ref>, but is there such a thing as a singularity of higher index in a 1D field? Our simple tests will detect only that there is a singularity on the line, but are unable to determine its index.</p><p>Further, our approach in finding curve and surface singularities is to project the vector field on to a lower dimensional space. This projection introduces new singularities into the field, for which we propose certain heuristics to remove. These heuristics are simple, and more work remains to improve them.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>where M is a manifold in R n . If x ∈ M, then the vector at x is V (x). A point x is a critical point of the vector field if |V (x)| = 0. For example, many useful vector fields are generated as gradient fields of differentiable potential functions P : M → R, in which case the critical points occur where |∇P (x)| = 0. The Gauss map γ : M → S n−1 (the sphere in n-dimensions) is defined by γ(x) = V (x)/|V (x)| (1) for all non-critical points x. Consider an arbitrarily small ball B(c) about a critical point c. The index of c, ind(c), is given by the Gauss-Bonnet Theorem [7] that says Kdγ(B(c))/(volume of S n−1 ) = ind(c),</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Vector fields on circles about critical points, their Gauss maps and the indexes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>IEEEFigure 2 :</head><label>2</label><figDesc>Visualization 2002 Oct. 27 -Nov. 1, 2002, Boston, MA, USA 0-7803-7498-3/02/$17.00 © 2002 IEEE Spanning subspaces with the outer product.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Octree search of V ((x, y, z)) = x e1 + y e2 + z e3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Sampling V over a cube and summing the trivectors.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>(</head><label></label><figDesc>a) a point singularity of V lies on Π inside B; (b) a 3D curve singularity of V passes through B; (c) for some point x on Π inside B, V (x) is non-zero while V (x)is zero.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Projection of vector field onto one face of the cube.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Refinement examples. subdivision of this simplex will have an odd number of properly labeled simplices, where the labeling of the vertices of the subsimplices have to obey some minor constraints; see the Jiang et at. paper for details.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>, y, z) = x * e1 + y * e2 + z * e3Circle fc(x, y, z) = (x 2 + y 2 − 1) 2 + z 2 Ec(x, y, z) = −y * e1 + x * e2 Eight Ee(x, y, z) = Ec(x − 1, y, z) * Ec(x + 1, y, z) Helix f h (x, y, z) = 1/[(x − cos(z)) 2 + (y − sin(z)) 2 ] Sphere fs(x, y, z) = (x 2 + y 2 + z 2 ) 2 Cylinder fC (x, y, z) = (x 2 + y − 1) 2Sphere Union Cylinderfs(x, y, z) * fC (x − .5, y, z) Sphere Intersect Cylinder fs(x, y, z) + fC (x − .5, y, z)    </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 7 :</head><label>7</label><figDesc>Circular curve of singularities. Left: all false singularities filtered; middle, no line filtering; right: no line or surface filtering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Double circle (eight) curve singularity, helix singularity, and sphere of surface singularity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 9 :</head><label>9</label><figDesc>Surface singularities of sphere union cylinder and curve singularities of sphere intersect cylinder.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 10 :</head><label>10</label><figDesc>Vector field having a double line singularity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Test functions.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">ACKNOWLEDGMENTS</head><p>Many thanks to Daniel Fontijne, who ported our initial Matlab/GABLE <ref type="bibr" target="#b5">[5]</ref> prototype to a far faster C++ version using Gaigen <ref type="bibr" target="#b6">[6]</ref>.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Dynamics : the geometry of behavior</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralph</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Shaw</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Polygonization of implicit surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jules</forename><surname>Bloomenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="341" to="355" />
			<date type="published" when="1988-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Geometric algebra: a computation framework for geometrical applications: part i (algebra)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leo</forename><surname>Dorst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mann</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Geometric algebra: a computation framework for geometrical applications: part ii (applications)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leo</forename><surname>Dorst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">GABLE: a geometric algebra learning enviornment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leo</forename><surname>Dorst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Bouma</surname></persName>
		</author>
		<ptr target="www.science.uva.nl/˜leo/GABLE/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Gaigen: Geometric algebra implementation generator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Fontijne</surname></persName>
		</author>
		<ptr target="carol.wins.uva.nl/˜fontijne/gaigen/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Functions and the unity of mathematics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">Henry</forename><surname>Gottlieb</surname></persName>
		</author>
		<ptr target="Unpublished.www.math.purdue.edu/˜gottlieb/Papers/papers.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Visualizing vector field topology in fluid flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lambertus</forename><surname>Hesselink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="1991-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">New foundations for classical mechanics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Hestenes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<pubPlace>Reidel, Dordrecht</pubPlace>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Clifford Algebra to Geometric Calculus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Hestenes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garret</forename><surname>Sobczyk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
			<publisher>Kluwer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A novel approach to vortex core region detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raghu</forename><surname>Machiraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Symposium on Visualization &apos;02. EIROGRAPHICS-IEEE TCVG</title>
		<editor>I Navazo D Ebert, P Brunet</editor>
		<meeting>Symposium on Visualization &apos;02. EIROGRAPHICS-IEEE TCVG</meeting>
		<imprint>
			<date type="published" when="2002-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A unified mathematical language for physics and engineering in the 21st century</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joan</forename><surname>Lasenby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anthony</forename><forename type="middle">N</forename><surname>Lasenby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><forename type="middle">J L</forename><surname>Doran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phil. Trans. R. Soc. Lond</title>
		<imprint>
			<biblScope unit="volume">358</biblScope>
			<biblScope unit="page" from="21" to="39" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Marching cubes: A high-resolution 3D surface construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lorenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (Proc. of Siggraph)</title>
		<imprint>
			<date type="published" when="1987-07" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="163" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Clifford Algebras and Spinors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pertti</forename><surname>Lounesto</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge, UK</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Haar wavelets over triangular domains with applications to multiresolution models for flow over a sphere</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Il-Hong</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junwon</forename><surname>Sung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;97</title>
		<meeting>Visualization &apos;97</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A description of eddying motions and flow patterns using critical point concepts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Chong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annual Review of Fluid Mechanics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="125" to="155" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Topological Vector Field Visualization with Clifford Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>University of Kaiserslautern</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Visualization of higher order singularities in vector fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heinz</forename><surname>Krger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Menzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alyn</forename><surname>Rockwood</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>IEEE Computer Society</publisher>
			<biblScope unit="page" from="67" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Visualizing critical points of arbitrary poincareindex</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerik</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heinz</forename><surname>Krger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alyn</forename><surname>Rockwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scientific Visualization -Dagstuhl &apos;97</title>
		<editor>F. Post H. Hagen, G. Nielson</editor>
		<imprint>
			<publisher>EEE Computer Society</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="277" to="283" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Critical points at infinity: a missing link in vector field topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Issac</forename><surname>Trotts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kenwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Haimes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSF/DoE Lake Tahoe Workshop on Hierarhical Approximation and Geometrical Methods for Scientific Visualization</title>
		<imprint>
			<date type="published" when="2000-10" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
