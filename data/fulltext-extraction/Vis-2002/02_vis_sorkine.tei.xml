<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Bounded-distortion Piecewise Mesh Parameterization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olga</forename><surname>Sorkine</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science School of Engineering &amp; Computer Science</orgName>
								<orgName type="institution" key="instit1">Tel-Aviv University</orgName>
								<orgName type="institution" key="instit2">The Hebrew University of Jerusalem</orgName>
								<address>
									<addrLine>3.0 2.0 1.5 1.0</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Cohen-Or</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science School of Engineering &amp; Computer Science</orgName>
								<orgName type="institution" key="instit1">Tel-Aviv University</orgName>
								<orgName type="institution" key="instit2">The Hebrew University of Jerusalem</orgName>
								<address>
									<addrLine>3.0 2.0 1.5 1.0</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rony</forename><surname>Goldenthal</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science School of Engineering &amp; Computer Science</orgName>
								<orgName type="institution" key="instit1">Tel-Aviv University</orgName>
								<orgName type="institution" key="instit2">The Hebrew University of Jerusalem</orgName>
								<address>
									<addrLine>3.0 2.0 1.5 1.0</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dani</forename><surname>Lischinski</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science School of Engineering &amp; Computer Science</orgName>
								<orgName type="institution" key="instit1">Tel-Aviv University</orgName>
								<orgName type="institution" key="instit2">The Hebrew University of Jerusalem</orgName>
								<address>
									<addrLine>3.0 2.0 1.5 1.0</addrLine>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Bounded-distortion Piecewise Mesh Parameterization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:49+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.5 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color</term>
					<term>shading</term>
					<term>shadowing and texture; atlas</term>
					<term>mesh partitioning</term>
					<term>parameterization</term>
					<term>surface flattening</term>
					<term>texture mapping</term>
					<term>3D painting</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Figure 1: A pepper model flattened into one large piece with bounded distortion. The 3D object is shown on the left with a checkerboard texture demonstrating the low distortion of the parameterization. Seams introduced by our algorithm are shown in red. The middle image shows the flattened surface, visualizing the amount of distortion introduced by the mapping across the mesh. A small region of the flattened mesh is shown on the right.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Low-distortion parameterization of triangulated surfaces is a fundamental problem in computer graphics. Such parameterizations are essential for operations such as texture mapping <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b25">26]</ref>, texture synthesis on surfaces <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25]</ref>, interactive 3D painting <ref type="bibr" target="#b10">[11]</ref>, remeshing and multi-resolution analysis <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b22">23]</ref>, mesh compression <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b20">21]</ref>, and digital geometry processing <ref type="bibr" target="#b8">[9]</ref>. Since in 3D computer graphics surfaces are 2D entities (2-manifolds) embedded in 3D space, a parameterization defines a mapping between regions on the 2D plane and the surface, enabling these operations to be performed almost as easily as if the surface was flat.</p><p>The surfaces used in computer graphics are very often piecewiselinear manifolds, represented as triangular meshes with irregular connectivity and non-uniform triangle sizes. A parameterization of such a surface may be defined by a mapping between its vertices and a set of points in the plane, such that the connectivity of the mesh induces a planar triangulation. Of course, this is only possible for an open surface (with the topology of a disk). A closed surface of genus zero, such as a sphere, must be first cut open along at least one edge before it can be mapped onto a planar region. Surfaces of higher genus require a larger number of cuts.</p><p>Ideally, the mapping between the triangulated surface and the planar triangulation should be an isometry, preserving angles and distances. Such a parameterization is area-preserving, so it is optimal for texture mapping, remeshing, and digital geometry processing, since a regular sampling grid with uniform spacing in the parameter domain is undistorted by the mapping onto the surface. Unfortunately, with the exception of developable surfaces, such as a cylinder, general open manifolds cannot be flattened without distortion.</p><p>Distortion can be reduced by introducing additional cuts (seams) beyond those necessary to make the surface a topological disk. The downside of having too many seams, however, is that they introduce discontinuities into the parameterization. These discontinuities must be explicitly dealt with by the application, which typically slows it down and sometimes results in visible artifacts. Thus, we are faced with two conflicting goals: reducing distortion on the one hand and keeping the seams few and short on the other hand. To achieve our goals, it is usually necessary to split the mesh into several disconnected parts, even though it is already a topological disk. This partitioning results in a piecewise parameterization; the parts are sometimes referred to as charts and their collection is referred to as an atlas <ref type="bibr" target="#b15">[16]</ref>.</p><p>In this paper, we propose a simple and fast method for constructing piecewise parameterizations of irregular triangle meshes. Our approach is guided by two principles: (i) the distortion bounds are controlled, and the method guarantees that the distortion of each mesh triangle does not exceed some preset threshold; (ii) the mesh is cut and partitioned simultaneously with the construction of the parameterization, and not as a preprocess, to the degree necessary for creating patches with bounded local distortion. Starting from a seed triangle each patch is "grown" incrementally, from the inside outward, which allows control over local distortion and also provides a convenient way to check for self-intersections. In each step a new vertex is chosen for flattening, from among the neighbors of already flattened vertices. The vertex selection criteria may include various attributes, such as the distortion caused to the triangles sharing this vertex, local curvature, ratio of patch boundary length to its area, etc. When there are no more vertices that fit the criteria, the patch growth is stopped and a new patch is started. <ref type="figure">Figure</ref> 1 demonstrates the result of applying our method to a model of a pepper.</p><p>The proposed scheme has several advantages. First, it guarantees a user-specified upper bound on the local distortion. Experiments show that in practice the average distortion value achieved is significantly smaller than the specified bound. Second, the algorithm is fully automatic, partitioning the mesh as necessary in order to comply with the specified distortion bounds. It is guaranteed to produce a valid parameterization without local or global foldovers. Finally, in contrast to most previous parameterization techniques, our algorithm is fast enough to enable working with large complex irregular meshes in interactive applications. However, our approach does not provide the optimal solution, it is greedy and provides no explicit control on the location or the length of the seams.</p><p>The rest of the paper is organized as follows. In Section 2 we review related work. Our algorithm is described in detail in Section 3. Section 4 presents some results and applications of our method. Section 5 concludes the paper and suggests some topics for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PREVIOUS WORK</head><p>Many researchers have addressed the problem of computing lowdistortion parameterizations for general surfaces, mainly for texture mapping purposes. We shall briefly survey some of their methods below. For the most part, these earlier works concentrate on minimizing the parameterization distortion and not on the mesh partitioning problem. They either assume that the mesh has already been partitioned, or begin by computing a partitioning of the mesh as a pre-process, based on some heuristic or interactive user input. Each part is then parameterized while minimizing some distortion criterion. It should be noted that while several authors refer to their techniques as "non-distorting", the resulting parameterizations typically correspond only to a local minimum with respect to the chosen distortion measure, and do not guarantee any strict bounds on the distortion. In contrast, our method computes the partitioning of the mesh simultaneously with surface flattening, introducing seams and cuts only as necessary to produce a mapping with distortion strictly below a specified bound.</p><p>Maillot et al. <ref type="bibr" target="#b15">[16]</ref> partition the mesh into regions by bucketing faces based on their normals, followed by merging together adjacent buckets with similar normals and directions of maximal curvature. Each region is then flattened and the resulting parameterization is improved by numerically minimizing a distortion energy functional. Eck et al. <ref type="bibr" target="#b4">[5]</ref> and Lee et al. <ref type="bibr" target="#b11">[12]</ref> partition the mesh by constructing a coarse base mesh, using mesh simplification <ref type="bibr" target="#b11">[12]</ref> or growing Voronoi-like tiles on the surface <ref type="bibr" target="#b4">[5]</ref>. Each base mesh triangle defines a separate parameter domain for a corresponding cluster of triangles in the original mesh. The embedding is computed using harmonic maps ( <ref type="bibr" target="#b11">[12]</ref> add a subdivision-based smoothing step). Sander et al. <ref type="bibr" target="#b17">[18]</ref> begin by partitioning the mesh into relatively flat regions (similarly to <ref type="bibr" target="#b15">[16]</ref>). They define their own "geometric stretch" measure, and employ relaxation to minimize it.</p><p>All of the methods above may partition complex surfaces into more parts than necessary to obtain a low-distortion parameterization, and, as already mentioned earlier, none of them provides strict bounds on the distortion.</p><p>Floater <ref type="bibr" target="#b5">[6]</ref> embeds an open mesh in the plane by mapping its boundary vertices to those of a predefined convex 2D polygon. The position of each inner vertex is then defined as a convex combination of its topological neighbors, where the weights are set to mimic the cord lengths and the angles between the edges emanating from the vertex. These constraints define a linear system of equations whose solution provably exists, always yielding a valid planar map. However, the predefined planar boundary used by this method may yield significant distortions in the resulting parameterizations, when the parameterized surface is complex and exhibits high curvatures.</p><p>Lévy and Mallet <ref type="bibr" target="#b12">[13]</ref> extend Floater's approach by defining a set of non-linear constraints on the mapping that ensures local orthogonality and even spacing of isoparametric curves. The non-linear system can be reduced to a set of linear systems by fixing one of the two coordinates in the plane and solving a linear optimization problem for the other. Their method also allows to interactively specify "important" regions on the surface, which have higher priority and are less distorted in the parameterization.</p><p>Haker et al. <ref type="bibr" target="#b9">[10]</ref> propose an interesting method to embed a closed surface onto a sphere by computing a conformal mapping which preserves angles of the mesh triangles. Another work by Sheffer and de Sturler <ref type="bibr" target="#b19">[20]</ref> also concentrates on preserving angles of the mesh while mapping it onto the 2D plane. The mapping is defined in terms of the angles only, and an optimal solution is proven to exist. However, these methods still impose high distortion on highly curved surfaces and may cause global self-intersections. To cope with the distortion problem, Sheffer <ref type="bibr" target="#b18">[19]</ref> proposes to introduce seams into the surface, computed by a minimal-spanning-tree algorithm. Since cutting the surface at the regions of high curvature reduces the Gaussian curvature, the seams improve the quality of the mapping. The self-intersections are detected in a post-process, and the parameterization needs to be recomputed to eliminate them, adding to the computational cost of the solution.</p><p>A recent work by Zigelman et al. <ref type="bibr" target="#b25">[26]</ref> analytically finds an embedding of an open mesh in the plane by a multi-dimensional scaling (MDS) method that optimally preserves the geodesic distances between mesh vertices. As in <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b19">20]</ref>, this approach does not require forcing the mapping of the surface boundary, which allows better parameterizations to be generated. Like other global optimization-based techniques, this method is computationally expensive and does not guarantee prevention of self intersections.</p><p>Bennis et al. <ref type="bibr" target="#b1">[2]</ref> propose a piecewise flattening method for freeform parametric surfaces (such as B-spline patches). First, a userspecified isoparametric curve on the surface is embedded in the plane with geodesic curvature preservation. Next, their method proceeds to iteratively unfold neighboring curves, until a distortion threshold (involving cord length and angle distortion) is reached. The user selects the next curve on the remaining part of the surface, and the process repeats itself. To our knowledge this is the only technique so far to produce a bounded distortion parameterization. Our approach is similar to that of Bennis et al. <ref type="bibr" target="#b1">[2]</ref> in the sense that we also grow our patches incrementally until no more vertices can be added. However, our method is fully automatic requiring no interactive user input, can handle any triangular mesh, and employs more diverse stopping criteria (see Section 3.4). Another difference is that we measure distortion in a different way that is better suited for triangular meshes, as in <ref type="bibr" target="#b17">[18]</ref>.</p><p>There are also several methods which specifically address the problem of mesh partitioning or segmentation. Mangan and Whitaker <ref type="bibr" target="#b16">[17]</ref> extend the watershed algorithm for image decomposition to handle polyhedral surfaces. Li et al. <ref type="bibr" target="#b14">[15]</ref> use skeletonization and space sweeping to decompose a given mesh into topologically and geometrically homogeneous components. Since these segmentation methods are driven by other applications, such as shape-based retrieval, hierarchical object representation, morphing, etc., they are not particularly suited for parameterization. For instance, they do not necessarily produce topological disk patches, which is a basic requirement for a global flattening algorithm. In contrast, our method partitions the mesh while computing the parameterization, so the partitioning is driven by the specific goal of producing a bounded-distortion parameterization. Our method aims at defining large patches whenever possible. For example, the surface of the model shown in <ref type="figure" target="#fig_0">Figure 2</ref> is developable and is flattened into a single patch by our method, while partitioning the mesh using normal-based bucketing <ref type="bibr" target="#b15">[16]</ref> results in sixteen patches.</p><p>Recently, several new related works have appeared <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b13">14]</ref>. Desbrun et al. <ref type="bibr" target="#b3">[4]</ref> derive several intrinsic distortion measures to flatten a single patch, without addressing the partition issue. Gu et al. <ref type="bibr" target="#b7">[8]</ref> iteratively cut the mesh to produce a single patch and employ the method of <ref type="bibr" target="#b17">[18]</ref> to flatten it, with some specific restrictions on the boundary, driven by the application of regular geometry resampling. Lévy et al. <ref type="bibr" target="#b13">[14]</ref> partition the mesh by extracting feature curves on the surface and applying simultaneous region growing scheme, and then parameterize each patch while minimizing angle distortion in the least squares sense. None of the above methods guarantee strict distortion bounds. For example, Lévy et al. <ref type="bibr" target="#b13">[14]</ref> explicitly state that when the distortion of a flattened patch exceeds a user-defined bound, the patch is subdivided into several parts and reparameterized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BOUNDED DISTORTION FLATTENING</head><p>In this section, we describe our parameterization algorithm. We begin with a brief overview of the proposed framework and then elaborate on its different components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview</head><p>Our algorithm is an iterative procedure that incrementally flattens the mesh surface by growing patches around seed triangles, until some termination criterion is reached. We define as active an edge separating between a triangle that has already been added to the patch (flattened) and one that hasn't. The collection of all active edges of a patch at any given moment is referred to as the patch front. Our algorithm grows patches by iteratively selecting a new vertex adjacent to the patch front and adding it to the patch.</p><p>The above process explicitly makes sure that none of the triangles are distorted above the specified threshold. The first triangle of a patch, referred to as the seed triangle, is randomly selected and embedded on a plane without any distortion. Its three edges define the initial patch front. In each subsequent iteration, the algorithm examines all the triangles adjacent to the front. Each such triangle has two vertices that have already been mapped onto the plane, and one free vertex. We choose the "best" vertex among all free vertices adjacent to the front, and unfold it onto the plane along with the triangles incident to it and sharing an edge with the patch front. The ranking of the free vertices is determined based on several criteria (see Section 3.4), the most important of which is the distortion. More specifically, a vertex can be embedded only if the distortion caused to each of the newly-flattened triangles does not exceed the predefined threshold. The added triangles are also checked for intersections with the planar patch (see Section 3.5), and if an intersection is detected, the vertex is discarded from the current patch. When no more vertices can be added to the current patch (either due to distortion or intersections), the algorithm selects a new seed and starts growing a new patch.</p><p>For efficiency, the grades of the free vertices are kept in a priority queue. At each step we take the vertex with the highest grade off the queue and map it onto the plane (Section 3.3). We then compute the grades of all free neighbors of the newly-added vertex and add them into the priority queue. In addition, we update the grades of the free vertices adjacent to the flattened vertex, which are already present in the priority queue (Section 3.4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The Distortion Metric</head><p>We measure the distortion caused to a triangle using the singular values of the Jacobian of the affine transformation between the original 3D triangle and its counterpart in the plane. The derivation below closely follows that of Sander et al. <ref type="bibr" target="#b17">[18]</ref>.</p><p>Let T ∆q 1 q 2 q 3 be the triangle in 3D and </p><formula xml:id="formula_0">T ¼ ∆p 1 p 2 p 3 the triangle in 2D, where p i ś i t i µ. Let S : R 2 R</formula><formula xml:id="formula_1">S s ∂ S ∂ s q 1´t2 t 3 µ • q 2´t3 t 1 µ • q 3´t1 t 2 µ 2 p 1 p 2 p 3 S t ∂ S ∂t q 1´s3 s 2 µ • q 2´s1 s 3 µ • q 3´s2 s 1 µ 2 p 1 p 2 p 3</formula><p>The singular values of the 3 ¢2 Jacobian matrix S s S t are:</p><formula xml:id="formula_2">γ max Ö 1 2 ´a • cµ • Ô´a cµ 2 • 4b 2 γ min Ö 1 2 ´a • cµ Ô´a cµ 2 • 4b 2 where a S s ¡S s b S s ¡S t c S t ¡S t .</formula><p>The values γ max and γ min represent the largest and the smallest scaling caused to a unit length on the plane by the mapping S. Sander et al. <ref type="bibr" target="#b17">[18]</ref> take the root-mean-square of the two values as the L 2 metric and γ max as the L ∞ metric. Since for the purpose of measuring geometric distortion, stretching and shrinking should be treated the same, we use the following expression as our distortion metric:</p><formula xml:id="formula_3">D T T ¼ ¡ max¨γ max 1 γ min ©</formula><p>Note that D´T T ¼ µ 1, and the equality holds if and only if T and T ¼ are isometric.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Embedding a Single Vertex</head><p>As stated above, in each step of the flattening procedure, we attempt to embed a free vertex V that is adjacent to the front. Let T 1 T 2 T k be the triangles incident to V that share an edge with the front (thus, V is their top vertex, see <ref type="figure">Figure 3</ref>(a)). We would like to map V to a point v in the plane, so as to minimize the maximal distortion caused to the triangles T i . The optimal position v is found using a local relaxation technique. A faster alternative that performs well is to compute k candidate positions in the plane, each obtained by rigidly unfolding each of the triangles T i separately. The point v is then obtained as the weighted average of the candidate positions, where the weights are proportional to the distortion associated with the flattened neighbors of the triangles <ref type="figure">(Figure 3(b-c)</ref>). Note that except for certain degenerate cases, this choice of mapping prevents triangle-flipping. We check global and local self-intersections when the vertex is chosen to be added to the patch.</p><p>In this embedding strategy each vertex has only one mapping to the plane, simply because once a vertex is added to the patch, it cannot be flattened again in a different location. However, sometimes the parameterization can benefit from forcing cuts in the surface, where the vertices on the cuts have two or more mappings to the plane. For example, if a cylinder is cut along the direction of its central axis, it can be unfolded to the plane in one piece (see <ref type="figure" target="#fig_0">Figure  2</ref>(a)). To detect such cases, once the patch growth is complete, we traverse the front and look for adjacent unmapped triangles whose top vertices are already mapped in some other regions of the patch. These triangles can be added to the patch by assigning a second location to their top vertex (thus introducing a seam).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Local Criteria for Vertex Embedding</head><p>As explained in Section 3.1, we assign a grade to each free vertex adjacent to the patch front, and select the vertex with the highest grade at each iteration. The grade is a non-negative real number, comprising various factors with different importance weights. The main factor is the maximal distortion caused to the triangles adjacent to the vertex. If this value is above the predefined threshold, the vertex is given a grade of zero, and thus cannot be flattened.</p><p>Another important issue is the boundary length of the resulting partition. We would like to keep it as small as possible and prevent the creation of thin long patches (strips). This may be done by bounding the ratio between the area of the patch and the squared length of the boundary. Vertices that increase this ratio are given a lower grade, and thus the algorithm strives to grow round patches with smooth boundaries (see <ref type="figure" target="#fig_0">Figure 12</ref>). This ratio can also be incorporated as a stopping condition: when adding any vertex to the patch results in an area/perimeter ratio greater than some threshold, the patch growth is stopped.</p><p>Additional criteria that can be involved in the grade calculation are crease angles or ridge lines on the surface and other segmen-tation information that may be available. The weight of each feature should be determined by the specific application that uses the parameterization. For instance, in texture mapping, visible seams between the patches are an undesirable artifact, and therefore minimizing the boundary length should be given more weight. For a 3D painting application, the most critical factor is low and homogeneous distortion of the parameterization, while seams can be tolerated.</p><p>(a) (b) <ref type="figure">Figure 4</ref>: Change of a vertex grade. In (a), the vertex V has two incident triangles T 1 and T 2 , and its plane position and grade is calculated based on these two triangles. In (b), the vertex U is added to the patch, and as a result, the triangle T 3 also becomes incident to V , so that the grade of V must be updated.</p><p>Note that the grade given to a vertex can change during the process of patch growing. <ref type="figure">Figure 4</ref> illustrates a situation where the vertex V is given an initial grade based on the two triangles that are incident to it. But after embedding another vertex, an additional triangle becomes incident to V , and thus the position of V on the plane is altered and the grade of V must be recomputed. Grades changes are local, since embedding a vertex can affect only its topological neighbors. By Euler's formula, the average valence of a vertex is six. Thus on average up to six grades are recomputed each time a vertex is added to the patch, but in practice grade changes are much more rare.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Preventing Self-intersections</head><p>There are two types of self-intersections that must be prevented: local and global ones. A local self-intersection, also called faceflipping, occurs when the triangle newly added to the patch, "folds over" the patch, and the cyclic order of its vertices is reversed with respect to the original 3D triangle. Such triangles are sometimes referred to as having a negative area, and global relaxation techniques (e.g., <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b17">18]</ref>) use high penalties to prevent this kind of self-intersection. In our algorithm, we take care of triangle flipping by ensuring that the position of the top vertex of each added triangle is located locally "outside" the patch, as shown in <ref type="figure" target="#fig_2">Figure 5</ref>.</p><p>Global self-intersections occur when distant parts of the patch cross each other. This type of self-intersection is much harder to track in global embedding techniques and usually it is not addressed. In fact, it can only be detected in a post-process, as done by Sheffer and de Sturler <ref type="bibr" target="#b19">[20]</ref>. In our algorithm, since the flattened patch is grown incrementally, we can make sure that each added triangle does not cross the rest of the patch. It is enough to merely test for intersection with the boundary of the patch, since the patch is simply-connected, and each added triangle has a common edge with the boundary. To efficiently perform this test, we insert the boundary triangles of the flattened patch into a spatial partitioning data structure. In the current implementation, we use a regular grid partition, which allows us to locate the boundary triangles that can potentially intersect the new triangle in near-constant time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS AND APPLICATIONS</head><p>We have implemented our algorithm in C++ and tested it on a variety of 3D meshes. Various statistics pertaining to the different tests are summarized in <ref type="table" target="#tab_2">Table 1</ref>.</p><p>Although our code has not been optimized, the running times are rather small when using the fast approximation of optimal vertex position (described in Section 3.3). Large models, such as the 100K triangle Venus, or the 40K triangle Horse (both shown in <ref type="figure" target="#fig_0">Figure 12)</ref>, are flattened in 9 and 4 seconds, respectively. The 1300 triangle Lamp model is flattened in less than a second. All times were measured on a 1.0 GHz Pentium III CPU. <ref type="figure" target="#fig_0">Figure 12</ref> shows the three models above with a checkerboard texture map in order to visualize the quality of the parameterizations: it can be seen that the checkerboard pattern is not visibly distorted by the mapping. Each patch is shaded using a different color to visualize the partitioning performed by our method in order to achieve this low-distortion parameterization. <ref type="table" target="#tab_2">Table 1</ref> reports the distortion bound given to our algorithm along with the actual mean distortion value achieved in each case (weighted by the areas of the triangles in 3D). The table also reports the seam length (divided by the sum of the edge lengths in the mesh) and the running times. <ref type="figure" target="#fig_5">Figure 6</ref>(a) shows the result of flattening the pepper model (11K polygons). Our algorithm embeds the surface into a single patch when given a distortion threshold greater than 1.5. For comparison, we have also implemented a normal-based bucketing partitioning scheme, which partitions the surface into patches consisting of adjacent triangles with similar normals, as in <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b17">18]</ref>. The parameterization of the patches is then computed by first projecting the patches onto a plane followed by relaxation. More specifically, given a patch we first orthographically project it onto the plane orthogonal to the average normal of the patch. Next, an iterative relaxation method is applied to minimize the distortion of the initial guess. We have tested the minimization of the metric proposed in <ref type="bibr" target="#b15">[16]</ref> (edge and area stretch) and the metric of <ref type="bibr" target="#b17">[18]</ref>, which is closely related to the Jacobian metric used by our algorithm. <ref type="figure" target="#fig_0">Figures 2 and 10</ref> compare the results produced by the scheme described above with those produced by our method. When the surface is sufficiently complex, normal-based bucketing produces an unnecessarily large number of patches. In simpler cases, this partition may produce patches that seem more natural to a human observer, but they are not optimal in the sense of distortion minimization. Moreover, it should be emphasized that the normal-based bucketing method might yield invalid patches in the sense that their projection contains self-intersections, as demonstrated in <ref type="figure">Figure 11</ref>.   Two important applications of non-distorting parameterization are texture mapping and 3D painting (see <ref type="figure" target="#fig_4">Figures 7 and 8)</ref>. <ref type="figure" target="#fig_6">Figure 8</ref> was generated by the Deep Paint 3D tool <ref type="bibr" target="#b2">[3]</ref>, which was given the parameterization computed by our method. Such 3D painting applications provide the user the ability to draw directly on the 3D model surface <ref type="bibr" target="#b10">[11]</ref>. When the user is painting on a certain polygon of the surface, the brush strokes are registered on the corresponding 2D polygon in the plane, computed by our parameterization. The strokes are displayed on the 3D surface using texture mapping, so that the parameterization is hidden from the user, creating the impression of painting directly on the 3D surface. A distorting pa-rameterization might cause smooth constant-width strokes made by the user to look bumpy and curvy. Therefore, it is essential to keep the local distortion of the parameterization low. Discontinuities, on the other hand, do not pose a problem to the paint program, which draws the stroke in the parameter domain of one region until reaching a boundary, and then continues the drawing operation in the adjacent patch. Such a transition will not be noticeable to the user provided that the distortion on both sides of the seam is similar (and low). However, partitioning the mesh into a small number of patches is still desirable, since the corresponding texture images are more coherent, lending themselves better to mip-mapping and compression.</p><p>Another application where a guaranteed distortion bound is vital, is compression of texture coordinates for textured 3D meshes. In <ref type="bibr" target="#b20">[21]</ref>, we proposed a compression method that avoids explicit encoding of the´u vµ coordinates altogether by warping the original texture image. The 3D surface is flattened onto the 2D plane, and the texture is re-mapped onto the planar embedding using the orig-inal´u vµ coordinates, which creates a warped texture image. The decoder retrieves the´u vµ coordinates by flattening the mesh onto the warped texture. The flattening algorithm must be non-distorting to preserve the texture data and prevent undersampling or redundant oversampling. As mentioned above, to bound the distortion, seams sometimes must be introduced to the parameterization. However, the length of the seams should be as small as possible, since they could create artifacts when remapping the warped texture onto the surface using mip-mapping. <ref type="figure" target="#fig_8">Figures 9(a-b)</ref> show the twisted cone model textured with an image.     <ref type="table" target="#tab_2">Table 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION AND CONCLUSIONS</head><p>Our technique is best suited for applications whose main requirement on the parameterization is low distortion. In addition to the applications discussed above, such parameterizations are essential for re-texturing applications. One example, demonstrated above, is texture-warping for efficient texture coordinate encoding <ref type="bibr" target="#b20">[21]</ref>.</p><p>Another example is resampling a solid texture across the surface into a 2D textured atlas, in order to display the textured object using standard 2D texture mapping hardware. Of course, a piecewise parameterization with zero distortion may be obtained by simply embedding each mesh triangle as a separate patch, or by flattening triangle strips. However, such an approach would introduce long (a) (b) <ref type="figure">Figure 11</ref>: Example of self-intersection in normal bucketing partition. In (a), the pink patch is a "spiral" patch. Its normals face almost the same direction (maximum angle between two normals in the patch is 36 AE ). In (b), the result of projecting the patch onto the plane orthogonal to the average normal is shown.</p><p>seams into the parameterization. Seams have the following disadvantages in the context of re-texturing: (i) they introduce visual artifacts when mip-mapping is used, since the texels that map onto adjacent locations on the object are not adjacent in the planar embedding, if separated by a seam; (ii) vertices on the seams must be assigned more that one pair of 2D coordinates, requiring more storage to represent the parameterization; (iii) the texture atlas is less coherent, making it less compressible. Our approach is willing to tolerate a small, strictly bounded, amount of distortion in exchange for larger, more coherent, patches, and shorter seam lengths. The key point in our technique is that it flattens the mesh based on a local criterion. The advantage of such an approach is that it permits the flattening process to shape the patches as necessary in order to comply with the distortion bounds. Global techniques require the patches to be determined a priori, so there is no explicit control on the maximum distortion that the partition imposes. The disadvantage of our approach is that it is greedy and provides no explicit control on the location or the length of the seams.</p><p>In summary, since the least amount of distortion that a global relaxation scheme is able to achieve depends on the partition of the mesh, a priori decomposition cannot support pre-specified distor- tion bounds. In contrast, our method is able to comply with strict upper bounds on the distortion by simultaneously computing the partitioning and the parameterization. Moreover, the local nature of our method offers an easy way to avoid self-intersections.</p><p>The results of the flattening depend on the selection of the seed triangle. In the future, we would like to gain a better understanding of how the seed selection affects the parameterization. This is related to another research avenue: our algorithm attempts greedily to enlarge the current patch as much as possible, without taking into consideration the shape of the following patches. We would like to eliminate this effect, and to obtain a local technique that computes a piecewise parameterization with some global properties. Finally, in this paper we measure distortion by the Jacobian-based metric presented in Section 3.2. However, our approach is merely a framework into which other metrics could be incorporated, so long as it is fairly reasonable to find the functional's minimum. This can include, for example, a consideration of some feature detection input.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Flattening of a cylindrical model. In (a), the parameterization created by our algorithm is visualized. The seam line is marked in red. In (b) we show that partitioning such a mesh using normal-based bucketing<ref type="bibr" target="#b15">[16]</ref> results in sixteen patches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Checking local self-intersections and preventing triangle flipping. The vertex v is incident on two triangles, whose neighbors in the patch are t 1 and t 2 . The half-planes Π 1 and Π 2 are bounded by lines that support the bases of t 1 and t 2 , respectively. Local self-intersection is prevented by ensuring that v ¾ Π 1 Π 2 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Figure 6(b-d) shows three different embeddings, corresponding to distortion thresholds of 1.5, 2.0 and 3.0, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Examples of texture mapping using our parameterization. The bound on the distortion of the parameterization guarantees that the texture is mapped onto the surface without visible stretching or shearing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>(a) The pepper model (11K polygons) flattened by our algorithm with a distortion bound of 1.5. (b)-(d) Different flattenings of the pepper model generated by our algorithm with three distortion thresholds: 1.5 (b), 2.0 (c) and 3.0 (d). The actual local distortions are visualized using pseudocolor.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Two styles of graffiti over the statues of David and Venus. The drawings were manually created by 3D painting using our parameterization. Note that the strokes are not distorted, although they cross different patches of the underlying parameterization.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>Figure 9(c) shows the two warped textures mapped into the embeddings of the cone.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>The results of the texture warping. (a) The textured twisted cone model. (b) The twisted cone consists of triangles of different sizes. (c) The warped texture mapped onto the mesh embedding. The non-distorting parameterization assures proper texture sampling (re-texturing).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>(a) The knot model partitioned and textured by our method (top) and two of its patches colored by the distortion value. (b) The same model partitioned by normal bucketing and parameterized by global relaxation. Some stretching of the texture is noticeable in the purple patch near the border with the green one. This is supported by the measurements in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 12 :</head><label>12</label><figDesc>Three models partitioned and parameterized by our algorithm: Horse (left), Venus (middle) and Lamp (right).The checkerboard texture pattern visualizes the lowdistortion nature of our parameterization. Each patch corresponds to a checkerboard with a different color.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Figure 3 :</head><label>3</label><figDesc>Embedding a vertex V . In (a), the patch on the 3D surface is shown in dark green and the red vertex is V , the top vertex of the triangles T 1 and T 2 that share an edge with the patch front. In (b), the flattened patch is shown, with the triangles T 1 and T 2 unfolded separately into t 1 and t 2 . Two planar positions for V are obtained: v 1 and v 2 . In (c), v 1 and v 2 are unified into v, and the vertex is added to the patch.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Summary of the results of our method with and without local relaxation versus global relaxation with the Jacobian metric. Size stands for the number of polygons of the models;Avg is the average distortion, weighted by the triangle area; Len is the seam length, normalized by the total edge length; #p is the number of patches. The running time is measured in seconds. We used the distortion threshold of 1.5 for when running our algorithm, except for the Knot model, for which we used 2.0. The statistics were gathered on a 1.0 GHz Pentium III CPU with 512MB RAM.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work was supported in part by the Israel Science Foundation founded by the Israel Academy of Sciences and Humanities, by the Israeli Ministry of Science and by a grant from the German Israel Foundation (GIF).</p><p>We would like to thank Ronen Gvili, Roman Manevich and Adi Karol for helping us developing parts of the code, and Alla Sheffer and Gershon Elber for reviewing an early version of this work.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Avg</head><p>Len </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Interactive geometry remeshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Alliez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathieu</forename><surname>Desbrun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Piecewise surface flattening for non-distorted texture mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chakib</forename><surname>Bennis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Marc</forename><surname>Vézien</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gérard</forename><surname>Iglésias</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 91</title>
		<meeting>SIGGRAPH 91</meeting>
		<imprint>
			<date type="published" when="1991-07" />
			<biblScope unit="page" from="237" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Deep Paint 3D. Right Hemisphere Ltd</title>
		<ptr target="www.righthemisphere.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Intrinsic parameterizations of surface meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Mathieu Desbrun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Alliez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics 2002 conference proceedings</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Multiresolution analysis of arbitrary meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Eck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Derose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Duchamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Lounsbery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Stuetzle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 95</title>
		<meeting>SIGGRAPH 95</meeting>
		<imprint>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="173" to="182" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Parametrization and smooth approximation of surface triangulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">S</forename><surname>Floater</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Aided Geometric Design</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="231" to="250" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simplification and compression of 3d meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Gotsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Gumhold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leif</forename><surname>Kobbelt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the European Summer School on Principles of Multiresolution in Geometric Modelling (PRIMUS)</title>
		<meeting>the European Summer School on Principles of Multiresolution in Geometric Modelling (PRIMUS)<address><addrLine>Munich</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Geometry images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xianfeng</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Gortler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH</title>
		<meeting>SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Multiresolution signal processing for meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><surname>Guskov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wim</forename><surname>Sweldens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Schröder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 99</title>
		<meeting>SIGGRAPH 99</meeting>
		<imprint>
			<date type="published" when="1999-08" />
			<biblScope unit="page" from="325" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Conformal surface parameterization for texture mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Haker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sigurd</forename><surname>Angenent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Tannenbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ron</forename><surname>Kikinis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guillermo</forename><surname>Sapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Halle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="181" to="189" />
			<date type="published" when="2000-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Direct WYSIWYG painting and texturing on 3D shapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">E</forename><surname>Haeberli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 90</title>
		<meeting>SIGGRAPH 90</meeting>
		<imprint>
			<date type="published" when="1990-08" />
			<biblScope unit="page" from="215" to="223" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">MAPS: multiresolution adaptive parameterization of surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">F</forename><surname>Aaron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wim</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Sweldens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lawrence</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cowsar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dobkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 98</title>
		<meeting>SIGGRAPH 98</meeting>
		<imprint>
			<date type="published" when="1998-07" />
			<biblScope unit="page" from="95" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Non-distorted texture mapping for sheared triangulated meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Lévy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Laurent</forename><surname>Mallet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 98</title>
		<meeting>SIGGRAPH 98</meeting>
		<imprint>
			<date type="published" when="1998-07" />
			<biblScope unit="page" from="343" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Least squares conformal maps for automatic texture atlas generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Lévy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Sylvain Petitjean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jérôme</forename><surname>Ray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Maillot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIG-GRAPH</title>
		<meeting>SIG-GRAPH</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Decomposing polygon meshes for interactive applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuetao</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiow</forename><surname>Tong Wing Woon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiyong</forename><surname>Seng Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2001 ACM Symposium on Interactive 3D Graphics</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">243</biblScope>
			<biblScope unit="page" from="35" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Interactive texture mapping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jérôme</forename><surname>Maillot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hussein</forename><surname>Yahia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anne</forename><surname>Verroust</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 93</title>
		<meeting>SIGGRAPH 93</meeting>
		<imprint>
			<date type="published" when="1993-08" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Partitioning 3D surface meshes using watershed segmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Mangan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">T</forename><surname>Whitaker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="308" to="321" />
			<date type="published" when="1999-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Texture mapping progressive meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><forename type="middle">V</forename><surname>Sander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Snyder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Gortler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 2001</title>
		<meeting>SIGGRAPH 2001</meeting>
		<imprint>
			<date type="published" when="2001-08" />
			<biblScope unit="page" from="409" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Spanning tree seams for reducing parameterization distortion of triangulated surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alla</forename><surname>Sheffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Shape Modelling International</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Parameterization of faceted surfaces for meshing using angle based flattening</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alla</forename><surname>Sheffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>De Sturler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Engineering with Computers</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="326" to="337" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Warped textures for UV mapping encoding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olga</forename><surname>Sorkine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Cohen-Or</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eurographics</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
	<note>Presented as a short paper</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Texture synthesis on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Turk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 2001</title>
		<meeting>SIGGRAPH 2001</meeting>
		<imprint>
			<date type="published" when="2001-08" />
			<biblScope unit="page" from="347" to="354" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Feature sensitive remeshing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vorsatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rössl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leif</forename><forename type="middle">P</forename><surname>Kobbelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Peter</forename><surname>Seidel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="393" to="401" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Texture synthesis over arbitrary manifold surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li-</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH 2001</title>
		<meeting>SIGGRAPH 2001</meeting>
		<imprint>
			<date type="published" when="2001-08" />
			<biblScope unit="page" from="355" to="360" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Texture and shape synthesis on surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lexing</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Hertzmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henning</forename><surname>Biermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denis</forename><surname>Zorin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Rendering Techniques 2001: 12th Eurographics Workshop on Rendering</title>
		<imprint>
			<date type="published" when="2001-06" />
			<biblScope unit="page" from="301" to="312" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Texture mapping using surface flattening via multidimensional scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gil</forename><surname>Zigelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ron</forename><surname>Kimmel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nahum</forename><surname>Kiryati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2002-06" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
