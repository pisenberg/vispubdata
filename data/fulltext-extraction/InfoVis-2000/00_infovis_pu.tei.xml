<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Interactive Problem Solving Via Algorithm Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pearl</forename><surname>Pu</surname></persName>
							<email>pearl.pu@epfl.ch</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denis</forename><surname>Lalanne</surname></persName>
							<email>denis.lalanne@lia.univ-avignon.fr</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="laboratory">Database Lab</orgName>
								<orgName type="institution">Swiss Federal Institute of Technology LBD/DI EPFL</orgName>
								<address>
									<postCode>1015</postCode>
									<settlement>Lausanne</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="laboratory">LIA -CERI, Université d&apos;Avignon et des Pays de Vaucluse</orgName>
								<address>
									<addrLine>339 chemin des meinajariès BP1228</addrLine>
									<postCode>84911</postCode>
									<settlement>AVIGNON cedex 9</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Interactive Problem Solving Via Algorithm Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T18:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>COMIND is a tool for conceptual design of industrial products. It helps designers define and evaluate the initial design space by using search algorithms to generate sets of feasible solutions. Two algorithm visualization techniques, Kaleidoscope and Lattice, and one visualization of n-dimensional data, MAP, are used to externalize the machine&apos;s problem solving strategies and the tradeoffs as a result of using these strategies. After a short training period, users are able to discover tactics to explore design space effectively, evaluate new design solutions, and learn important relationships among design criteria, search speed, and solution quality. We thus propose that visualization can serve as a tool for interactive intelligence, i.e., human-machine collaboration for solving complex problems.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>In Douglas Adams' novel "The hitch hiker's guide to the galaxy," the computer Deep Thought was put to work for 7.5 million years to solve "the ultimate question of Life the Universe and Everything." His answer, 42, rightfully disappointed its designers who had expected a more comprehensive explanation. Many computer users face similar situations every day: complex algorithms for scheduling, configuration and design turn out supposedly optimal answers without justification. If users could also gain an understanding of how solutions were obtained, and why they are the best, they could tune the behavior of their programs to obtain solutions of much better quality.</p><p>Here we consider the case of conceptual design using the formulation of constraint problem solving and a set of automatic search methods. We examine the issues of learning, discovery and control of strategies by novice users. We focus on three important tasks in conceptual design: solution search, tradeoff analysis of alternative solutions, and discovery of new solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conceptual Design</head><p>"Design is not description of what is, it is exploration of what might be <ref type="bibr" target="#b15">[16]</ref>." But the space quickly becomes large and the set of interacting design criteria very complex, making it difficult for a designer to effectively evaluate the different possibilities. Computational assistance can offload some of the cognitive tasks from designers so that they can concentrate on the most creative aspects.</p><p>Designers start the definition of a search space for a new product by first identifying a set of key parameters. Then they enumerate a list of possible values for each design parameter. Finally, to put everything together, they combine all values into a set of coherent and consistent design alternatives taking into consideration design rules, customers' criteria and preferences. Such a design process has been used not only for conceptual design <ref type="bibr" target="#b16">[17]</ref>, but also configuration design <ref type="bibr" target="#b5">[6]</ref>, land use design <ref type="bibr" target="#b17">[18]</ref> and industrial product design. We employ constraint satisfaction problem solving (CSP) techniques <ref type="bibr" target="#b22">[23]</ref> to formulate and solve conceptual design problems. CSPs are known to be NP-complete. Many efficient algorithms exist, but they are only optimal when the right context is found. Algorithm visualization is useful in presenting right opportunities to users in order for them to select the best strategy for a given problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related works</head><p>Algorithm visualization is about presenting the workings of complex algorithms in visual forms, often with animation <ref type="bibr" target="#b19">[20]</ref>. The benefit is to offer users with a significantly fast and intuitive understanding of algorithm behavior by taking advantage of the high bandwidth communication channel between the display, the human fovea and perceptual inference <ref type="bibr" target="#b2">[3]</ref>. Research work in this area has given important results in algorithm learning <ref type="bibr" target="#b0">[1]</ref>, software maintenance <ref type="bibr" target="#b7">[8]</ref>, designing and analyzing concurrent algorithms <ref type="bibr" target="#b12">[13]</ref>, and software engineering.</p><p>We use algorithm visualization not only to show the workings of the algorithms, but also to externalize the machine's strategies and the tradeoffs of these strategies. Thus our system helps users discover problem solving tactics and become an expert user of those tactics.</p><p>The use of interactive visualization tools to support design is not new. Attribute and influence explorers <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b21">22]</ref> use multiple linked interactive representations to extrapolate dependencies among design attributes which are often governed by a set of abstract mathematical models. Thus untrained users can set a range of values for a design criterion such as cost and ask the system to give ranges of admissible values for other design attributes such as material used and dimensions of the designed pieces. Such interval propagation techniques are useful for engineering design where parameters are continuous and mathematical models that describe their behavior are difficult to interpret for normal users. However, in conceptual design where parameters are both discrete and continuous, combinatorial search methods are needed to generate admissible solutions. In doing so, the internal search state is important and must incorporate users' strategies in choosing the right subspace.</p><p>Meanwhile in the information visualization domain, there is increasingly a strong interest in developing methods that support human and computer interaction at the problem solving level. Several examples can be found in document retrieval <ref type="bibr" target="#b10">[11]</ref>, complex information visualization <ref type="bibr" target="#b3">[4]</ref>, worldwide web navigation <ref type="bibr" target="#b8">[9]</ref>, and large data base exploration <ref type="bibr" target="#b9">[10]</ref>. According to Duce <ref type="bibr" target="#b6">[7]</ref>, visualization tools can be generally described as consisting of three components: data access, mapping and rendering. But in order to support visualization of a much larger quantity of data, such three-component architecture is not sufficient, as pointed out by Campo et al <ref type="bibr" target="#b1">[2]</ref>. Our work on algorithm visualization proposes to abstract problem solving knowledge using algorithm visualization to allow humans to explore in a much larger information space.</p><p>Our paper is organized as follows. We first describe constraint satisfaction problem solving in the conceptual design framework; we then introduce visualization methods for three important steps of conceptual design: design space definition, solution tradeoff analysis, and design conflict resolution; finally, we describe the user evaluation of our system followed by our conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Constraint satisfaction and search</head><p>A CSP formulation of conceptual design consists of a set of variables, a domain of values for each of these variables, and constraints on the values. A solution to a CSP is an assignment of values from its domain to all variables so that none of the constraints is violated. Consider a simplified watch design (see <ref type="bibr" target="#b13">[14]</ref> for more realistic examples, such as parallel robot design, land use configuration, and industrial product design). The CSP consists of design criteria such as beauty, complexity, implementation, and usability. Each criterion takes values ranging from 1(the least) to 5 (the most). It is more suitable to use discrete values such as low, medium, high, and maximum. But designers adopt scalar values as shortcuts. Criterion beauty is the aesthetic appearance; complexity is the number of pieces needed for the watch; implementation is how easy it is to manufacture the final product; and usability is how easy it is to put on the watch and manipulate the settings. Designers can now describe solution spaces in terms of what should and what should not be included in the final solutions using rules as follows:</p><p>C1 (beauty &gt; 3) -&gt; (implementation &gt; 3) C2 (complexity &gt; 3) -&gt; (implementation &gt; 3) C3 (usability &gt; 3 ) &lt;-&gt; (complexity &lt; 5) C4 usability == 4 C5 complexity == 2 Thus the more beautiful the watch is, the more difficult it is to implement (C1). The more complex it is, the more difficult it is to implement (C2). The easier it is to use the watch, the less complex it should be (C3). The watch currently being designed should have usability value 4 (C4) and complexity value 2 (C5). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Backtrack search</head><p>Backtracking is the simplest way to solve a CSP problem. It systematically instantiates one value at a time from each variable domain and checks for constraint violation. When it succeeds in instantiating all required variables, then the enumeration becomes a solution. All admissible solutions can be generated automatically. The following list shows the trace of the backtracking algorithm:</p><p>• beauty = 1 complexity = 1 search fail by C5</p><p>• beauty = 1 complexity = 2 implementation = 1 usability = 1 search fail by C4</p><p>• beauty = 1 complexity = 2 implementation = 1 usability = 2 fail by C4 ….. We call each row in the trace a valuation. Unsuccessful valuations are immediately discarded and the algorithm goes back to the last variable for which an alternative value remains to be tried. It continues in this way until all value combinations have been examined.  <ref type="bibr" target="#b4">[5]</ref>, we also use a fisheye view technique to visualize local search spaces when a CSP becomes too large. In contrast to <ref type="bibr" target="#b4">[5]</ref>, our visual display represents a reasoning process, rather than an aggregation of hierarchically organized data.</p><p>A phenomenon, called thrashing <ref type="bibr" target="#b14">[15]</ref>, can occur when search repeatedly fails on a certain combination of values. In Kaleidoscope, the disk has a large slice chopped off by the same color (top part in figure 1). Thrashing behavior signals to a designer that certain combinations of values should be discarded to avoid future valuation. But backtracking is not intelligent enough to provide such preprocessing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Random search by Knuth</head><p>Our example only used 4 variables, each having a range of 5 values. Unfortunately most CSP problems grow to the size of 20 variables with the number of values ranging in the 10 to 50s, thus too big for backtracking search algorithms to find answers quickly. Our second CSP algorithm is a Monte Carlo search method by Knuth <ref type="bibr" target="#b11">[12]</ref>, which can be used to explore the search space efficiently although randomly. <ref type="figure">Figure 3</ref> is a set of snapshots showing the progress of using Knuth algorithm for a slightly different design problem, which contains more solutions as visualized by the black lines. As depicted in the figure, the algorithm explores different areas of the circle randomly. However, by the first snapshot, the algorithm already obtained two solutions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Search with variable reordering</head><p>The third CSP algorithm is called variable reordering. It examines the constraints and picks those that are most restricting. The order of search then starts with those most restricting ones. Consider the watch design example again. The new order is usability, complexity, implementation, and beauty. <ref type="figure" target="#fig_2">Figure 4</ref> compares the visualization of the same CSP problem by two different algorithms, simple backtracking (top) and variable reordering (bottom). In the second case, there are significantly fewer numbers of unsuccessful valuations, thus making the algorithm much faster to terminate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">What can users discover in Kaleidoscope?</head><p>The color patterns (black lines and color elements) convey important abstractions which guide humans in setting up search strategies. When search space is large and solutions are scarce (called futile space), Knuth's method is most appropriate. When a small set of variables have strong constraints, variable ordering offers significant advantages. For simple problems, backtracking is often sufficient. Not only should users become aware of the different strategies used by the algorithms, they also have to know enough to switch from one algorithm to another depending on context. The program allows humans to stop the current search and change the subspaces if results so far are not satisfactory. For example, if the search process has been blocked by the same color element (thus the same constraint), then thrashing is obviously the cause and we can detect easily the constraint responsible for the thrashing by looking up the color coding. Knuth algorithm is a good cure for thrashing behavior. Kaleidoscope also contains two visual structures that are easily learned and appreciated by users: the spaced out black lines (i.e., solutions) represent solutions of diverse characteristics while concentrated black lines represent more homogeneous solutions.</p><p>We can also quickly observe if the search space is abundant or futile by noticing whether full-length black lines are numerous or none has existed so far. In the case of a futile search space, we use color patterns to diagnose the constraints responsible for the lack of solutions.</p><p>To summarize, we list a set of strategic points that can help users perform efficient combinatorial search with the help of Kaleidoscope:  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Map and N-dimensional tradeoff</head><p>Designers can become bewildered by too many choices. We provide them with visualization assistance to evaluate the solution space in order for them to make intelligent decisions. Users first define a set of criteria, for instance the quality of material used for a product and its manufacturing cost. For two-criteria tradeoff analyses, solutions are mapped to a 2D space where x and y coordinates represent the criteria values and each solution is represented by a node. <ref type="figure" target="#fig_4">Figure 5</ref> shows the solution space of a city planning design problem with criteria on noise factor (quietness) and cost (cheapness). The node which performs the best on both criteria is called the dominant solution. The nodes lying on the outer rim of the solution space are called non-dominant nodes (darker in <ref type="figure" target="#fig_4">figure 5)</ref>. In most cases a solution map does not contain a dominant node. Thus, tradeoff analysis is necessary in order for users to choose a winner based on their dynamic preference measure. For example, if they prefer to optimize more on noise factor and less on cost, then a point with the highest value on y will be the current winner. While this visualization, called Pareto space <ref type="bibr" target="#b18">[19]</ref>, is feasible for up to three criteria, many real-world problems call for tradeoff analysis in much higher dimensions.  shows the distribution of the underlying criteria much like a balance. For example, nodes located above the view line represent solutions having relatively higher values on view compared to other criteria. When tradeoff analysis is required, users can slide to the left or right from the center line depending on his current preferences. There are cases where solutions are pulled by multiple criteria values, but individually these criteria are not distinguishable. In this case interactivity solves this problem by allowing users to click on the solution nodes and examine the details. Another method is to change interactively criteria's weight so that ambiguities disappear. For example, increasing the quietness' weight would pull the optimal solutions toward the right side of the visualization.</p><p>The answers that can be obtained from MAP are:</p><p>• Is there a dominant solution?</p><p>• Are there numerous or few non-dominant solutions? • Are solutions clustered around a certain area, or more spread out in MAP? </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Enemy of design: null solution sets</head><p>The opposite of an abundant solution space is the designers' enemy: null solution space. A design problem can become over-constrained very quickly due to the number of variables explored and constraints defined. An over-constrained problem contains one or several sets of constraints defined in such a way that no solution could exist. The conflict elicitation algorithms described in <ref type="bibr" target="#b13">[14]</ref> diagnose over-constrained problems by listing a set of constraints which cannot be satisfied simultaneously, or a set of sets of constraints of which at least one set has to be "repaired" in order to give any solutions.</p><p>As a simple example of an over-constrained problem, consider coloring 3 mutually adjacent countries (aa, bb, and cc) with 2 colors such that all neighboring countries have a different color. There are 3 constraints which cannot be satisfied at the same time: aa != bb, aa != cc, and bb != cc, where != means that the colors of the countries are not the same. Further observe that if a CSP contains any over-constrained CSPs, it will not have any solutions either. We define the following notions:  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Interactive lattice</head><p>Conflict sets can be analyzed in a visual interactive lattice (shown in the upper right corner in <ref type="figure" target="#fig_7">figure 7)</ref>. Each square is a set of constraints. Sets are further ordered from the top to the bottom by their sizes with the sets on the top-most row being the smallest. When a square is black, it is a minimal conflict set. When it is dark blue, the set blocks a certain number of solutions. The darker it is, the more potential solutions it blocks. The question is if there are multiple blocking sets, as is the case with most problems, then which one should the user focus on first? The sets lying on the top row are smaller than those underneath. The smaller the set is, the easier it is for users to modify the constraints. The general heuristic is thus to find the smallest (top most) and darkest blue set of constraints to relax.</p><p>The square on the bottom of the lattice shown in figure 7 is the minimal conflict set of the map coloring problem. By clicking on that set, three subsets are highlighted on the top. Removing the main conflict will give 8 solutions, while removing or relaxing each of the subsets will give 2 solutions, as indicated by the numbers in the small windows. This means that we either allow adjacent countries to have the same color (i.e., removing the constraint != ) or we remove or relax each of the subsets. Since it is not desirable to color neighboring countries with the same color, we opt for relaxing the subsets by adding another color to one of the domains, thus obtaining two solutions. The final map coloring problem is the same as before except there are three color choices for one of the countries.</p><p>While normal lattices contain lines to relate sets to their sub or supersets, our lattice is interactive and only displays all subsets when a set is clicked on. In figure 8b, one square becomes white when clicked, so are all subsets highlighted in white. This way we can display a large lattice without the risk of having lines crisscrossing and thus causing visual overloading. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Multiple minimal conflict sets</head><p>Some problems have several minimal conflict sets as indicated by the black squares on the left part of figure 9. This is the same watch design but with different constraint sets (the constraint network is visualized in <ref type="figure" target="#fig_10">Fig 9a)</ref>:</p><formula xml:id="formula_0">• (beauty &gt; 3) -&gt; (implementation &gt;3) • (complexity &gt; 3) -&gt; (implementation &gt; 3) • (usability &gt; 3) &lt;-&gt; (complexity &lt; 5) • usability == 4 • complexity == 5 • beauty == 4 • implementation ==1</formula><p>The black squares in figure 9c correspond to all minimal conflict sets. At least one of the minimal conflict sets has to be relaxed to generate any solutions. Further, if a square on that row is clicked on, Lattice shows the subsets (see lattices on figure 9d). The subsets define parts of the original problems for which solutions exist. This information guides the users to choose the subsets to keep.</p><p>For example, clicking on the black square on the first lattice in figure 9d, two subsets are shown. Thus either we keep the first subset or the second. Since the second subset is a larger set, keeping it automatically allows us to keep the largest original problem. By visualizing all conflicts and largest consistent subsets, we offer designers the choice of what to throw away and what to keep, which is the most difficult decision in design and requires experience, gut feeling and dynamic criteria from the designers.</p><p>To summarize this section on over-constrained problems, we list the type of queries representing different reasoning tasks and the corresponding results we can get from the lattice visualization:</p><p>• Is the CSP problem over-constrained: a single or several black squares in a lattice • Which of the conflict sets to relax: either use the side window to select the most optimal one, or look up in the constraint definition to find the most appropriate one • How potential solutions perform in MAP if corresponding constraints are removed? <ref type="figure" target="#fig_0">Figure 10</ref> is a set of design parameters for a pen which consists of the following variables and domains: capwidth {3 3.5 4}, headsupwidth {2 2.5 3 3.5}, headinfwidth {1.5 2 2.5}, bodywidth {2.5 3 3.5}, tubewidth {2 2.5 3}, inkwidth {1 1.5 2}, buttonwidth {2 2.5 3}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Putting it all together</head><p>We first used simple backtracking in Kaleidoscope and discovered that there was only one successful valuation. A quick application of the Knuth algorithm gave the same answer; the CSP was futile. The lattice, shown in the lower right corner of figure 10, gave three dark squares indicating main conflicts responsible for the lack of solutions. The two squares on the top row represent constraints 9 and 7. If they are eliminated, there will be 26 + 10 new solutions. The square on the second row is the combination of constraint 9 and 7. That is, if these two constraints are eliminated at the same time, there will be 184 solutions liberated. Clicking on each square, MAP gives visualization of potential solutions. The advantage of this coupling is to avoid doing the entire search process unless the users are certain about the quality of solutions that they will obtain. The top squares seem promising, because they are small and can potentially yield 26 or 10 new solutions respectively (+ the one already found). Further they rank fairly well in the tradeoff analysis. It is thus rational to relax the constraint 7 (bodywidth &gt; buttonwidth). The design choices are thus re-evaluated with this new consideration. Instead of having the button inset in the body, we will screw it directly to the body. The button width no longer has to be smaller than the body width. The two widths are now equal. The constraint 7 is re-written: bodywidth == buttonwidth. In order to find new solutions, the system just re-evaluates the new constraint over the 10 solutions that the previous constraint was forbidding plus the only one that was initially found. COMIND returns 7 solutions among those 11. The largest pen among the 7 returned was the one that we finally selected because it is optimal on the tradeoff visualization ( <ref type="figure" target="#fig_0">figure 10</ref>). This small scenario shows how algorithm visualization can influence the user in his design strategies. For the last few years, COMIND has been used for several design problems (parallel robot design, micro-engineering products, kitchen arrangement, etc.). It helped discover new concepts and different aspects of existing designs, and has been particularly appreciated as a reflective tool. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Evaluation</head><p>We asked 6 subjects to solve two real design problems in COMIND (figure 11), one being underconstrained, and one over-constrained. Each subject was asked to note down their initial problem solving strategies. After they have used COMIND, they were to compare their strategies with those of the machine's. Subjects were all students in our university, either in micro-engineering or computer science. We summarize the results as follows (for more detail, please see <ref type="bibr" target="#b13">[14]</ref>): 5 out 6 used the Knuth algorithm to first find out if the problem yielded solutions or was over-constrained. Most of them with a brief explanation of MAP and Lattice could use it as a tool to navigate in the constraint editor to modify the problem and later obtain interesting and optimal solutions. All 6 used the interactive search feature in Kaleidoscope while search was underway and became aware of the role of variable order in search speed after being told the color coding. 4 out 6 solved the two design problems within 20 minutes. In general, we are satisfied with the learning speed of our subjects and the speed of their mastering of the set of search heuristics offered by the machine. They were able to distribute computationally intensive tasks to the various algorithms, and concentrate on finding innovative design solutions or relaxing design constraints to obtain compromises. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusion</head><p>We presented three visualization techniques to help designers explore design spaces, evaluate and discover new design solutions. Our "interactive intelligence" paradigm is in contrast to many automatic methods that keep themselves as intelligent black boxes, often compounding untrained users' frustration of the problem with further misery of the miscomprehension of the results, the Deep Thought analogy. Kaleidoscope, MAP, and Lattice are some of the initial steps towards applying interactive visualization to conceptual design problems where human and machine must collaborate to solve problems that are difficult for either of them. More generalization of our framework is underway for resource allocation and travel planning since both activities use the same CSP formalism. We believe that this type of userinvolved intelligent systems are engaging, and that visualization is a good communication medium.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Kaleidoscope showing search result</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :Figure 3 :Figure 1 ,</head><label>231</label><figDesc>Progressive snapshots of Kaleidoscope. There are 5 solutions in the space of 4 5 possibilities Visualization of a random search based on Knuth algorithm which we call Kaleidoscope, is the visualization tool animating the internal search state using color patterns. These patterns change as users modify design parameters, similar to kaleidoscope's curious changing patterns as one manipulates the device. Kaleidoscope shows how solutions are obtained. The entire search space is the Kaleidoscope disk which is divided into concentric rings, one for each variable of a CSP problem. The drawing of the wedges starts from the right-hand center line and sweeps the disk in counterclock-wise direction as shown in figure 2. Each value assignment is visually displayed by a wedge of colors in the disk. Successful assignment is colored in black while unsuccessful assignment is drawn with the corresponding color of the constraint. E.g., assignment (x1=1 x2=1 and x3=1 in figure 1) gives the first wedge in black. Assignment (x1=1 x2=1 and x3=2) results in the first portion of the wedge in black and the second portion in the color that corresponds to x1&gt;=x3. Thus a thin black line reaching beyond the outer most circle represents a solution. Figure 2 are successive snapshots of the Kaleidoscope for the watch design example. Black lines represent solutions while color bands show forbidden spaces blocked by the relative constraints. Kaleidoscope can scale well to a CSP of any size. Similar to the circular forms used in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>From top to bottom, parameters' order is more optimal in order to accelerate the search</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>•</head><label></label><figDesc>Does thrashing occur and with what type of frequency? • Are solutions diversified or concentrated in clusters? • Are solutions abundant or futile? • If variables are reordered, does solution generation become faster?</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>MAP in 2D Pareto space</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>The balance visualization for performing tradeoff analysis in n-dimension.Our new visualization design, MAP (Multiple Attribute Pareto), overcomes this limit by combining color patterns, visual structures and interactivity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure 6shows the new design where the x position represents the center of mass of the N criteria values which make up the bars on the bottom, and y position represents the sum of all criteria values. The solution that performs the best overall-speaking is the node with the largest y value. While y represents an absolute performance value, x</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>The map coloring problem in a Lattice shown in the upper-right corner.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>• a constraint set is a conflict set if it does not allow any partial solutions • a constraint set is the minimal conflict set if no smaller set is a conflict set • a constraint set cannot allow any solutions if and only if it contains at least one minimal conflict set</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>A Lattice and its interactive form</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>lattice with multiple conflict sets shown as black squares in c)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :</head><label>10</label><figDesc>A design of a pen. The Lattice's visualization in the lower right corner can be used in collaboration with the tradeoff view in order to browse the potential space of solutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 11 :</head><label>11</label><figDesc>The COMIND system offers a set of computational tools (located on the far left) to define, solve, repair and visualize design problems. Active assistants are located on the lower left corner, while inactive ones are on the left panel. The next column presents the history of the working space. Any tool can be used at any time; there is no predefined order. The main working area on the right provides visualizations of each of the active computational assistants (three at the moment: problem definition, solve, and conflict elicitation).</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A system for algorithm animation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sedgewick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="28" to="39" />
			<date type="published" when="1985-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Automatic abstraction management in information visualization systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Campo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Orosco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Teyseyre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Visualization Conference</title>
		<meeting>the Visualization Conference</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Information Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Tutorial notes, CHI&apos;99</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Design perspectives in visualising complex information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chalmers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc 3rd IFIP Visual Databases Conference (VDB.3)</title>
		<meeting>3rd IFIP Visual Databases Conference (VDB.3)</meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Dynamic Aggregation with Circular Visual Designs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chuah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Information Visualization (InfoVis &apos;98)</title>
		<meeting>the IEEE Symposium on Information Visualization (InfoVis &apos;98)<address><addrLine>Triangle Park, NC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Darr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">Configuration</forename><surname>Mcguinness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Desing</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence for Engineering Design</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>Analysis, and Manufacturing</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Duce</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Visualization</surname></persName>
		</author>
		<title level="m">Proceedings of the Visualization &apos;93 conference</title>
		<meeting>the Visualization &apos;93 conference</meeting>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Maintenance of Large Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Eick</surname></persName>
		</author>
		<editor>Software Visualization, Stasko et al</editor>
		<imprint>
			<date type="published" when="1999" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Moving happily through the world wide web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gershon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="72" to="75" />
			<date type="published" when="1996-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Using aggregation and dynamic queries for exploring large data sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goldstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">F</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Human Factors in Computing Systems (SIGCHI &apos;94)</title>
		<meeting>the Conference on Human Factors in Computing Systems (SIGCHI &apos;94)</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="23" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Visualization of term distribution information in full text information access</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Hearst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tilebars</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Human Factors in Computing Systems (CHI&apos;95)</title>
		<meeting>the Conference on Human Factors in Computing Systems (CHI&apos;95)</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1995-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Estimating the efficiency of backtrack programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Knuth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Computation</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="121" to="136" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Creating an Accurate Portrayal of Concurrent Executions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kraemer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Stask</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Concurrency</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="1998-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Computer aided creativity and multicriteria optimization in Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lalanne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
	<note>Swiss Institute of Technology Lausanne. Also appeared in doctoral consortium, CHI&apos;97</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Consistency in networks of relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Mackworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Introduction: A new agenda for computeraided design in the electronic studio</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mitchell</surname></persName>
		</author>
		<editor>Mitchell, MaCollough and Purcell</editor>
		<imprint>
			<date type="published" when="1990" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
	<note>The Electronic Design Studio</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Towards a Generic Model of Configuraton Tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mittal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Frayman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Joint Conference on Artificial Intelligence</title>
		<meeting>the International Joint Conference on Artificial Intelligence</meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989-08" />
			<biblScope unit="page" from="1395" to="1401" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Exploration and Innovation in Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Navinchandra</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>New York Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pareto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cours D'économie Politique</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page">1896</biblScope>
			<pubPlace>Rouge, Lausanne, Switzerland</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Stasko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Domingue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Price</forename></persName>
		</author>
		<title level="m">Software Visualization</title>
		<editor>B.A.</editor>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Attribute Explorer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Tweedie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Spence</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bhogal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Video Proceedings CHI&apos;94</title>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Influence Explorer --a Tool for Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Tweedie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Spence</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Dawkes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Su</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM CHI 96 Conference on Human Factors in Computing Systems, VIDEOS: Visualization</title>
		<meeting>ACM CHI 96 Conference on Human Factors in Computing Systems, VIDEOS: Visualization</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="390" to="391" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Foundations of Constraint Satisfaction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tsang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>In Academic Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
