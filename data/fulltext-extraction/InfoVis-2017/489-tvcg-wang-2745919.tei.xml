<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Revisiting Stress Majorization as a Unified Framework for Interactive Constrained Graph Visualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunhai</forename><surname>Wang</surname></persName>
							<email>wang.yh@sdu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yanyan</forename><surname>Wang</surname></persName>
							<email>yanyanwang93@gmail.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yinqi</forename><surname>Sun</surname></persName>
							<email>sunyinqi0508@gmail.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lifeng</forename><surname>Zhu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kecheng</forename><surname>Lu</surname></persName>
							<email>lukecheng0407@gmail.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chi-Wing</forename><surname>Fu</surname></persName>
							<email>cwfu@cse.cuhk.edu.hk</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Sedlmair</surname></persName>
							<email>michael.sedlmair@univie.ac.at</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Deussen</surname></persName>
							<email>oliver.deussen@uni-konstanz.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baoquan</forename><surname>Chen</surname></persName>
							<email>baoquan@sdu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">•</forename><forename type="middle">Y H</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">•</forename><forename type="middle">L</forename><surname>Zhu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-W</forename><surname>Fu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">•</forename><forename type="middle">M</forename><surname>Sedlmair</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">•</forename><forename type="middle">O</forename><surname>Deussen</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Shandong University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Kong and VRHIT SIAT</orgName>
								<orgName type="institution">Chinese University of Hong</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">University of Vienna</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="laboratory">Konstanz University and VCC SIAT</orgName>
								<address>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Revisiting Stress Majorization as a Unified Framework for Interactive Constrained Graph Visualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TVCG.2017.2745919</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T19:16+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph visualization</term>
					<term>stress majorization</term>
					<term>constraints</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Fig. 1. Our unified framework for constrained graph visualization allows us to create graph layouts with various constraints: a) cluster non-overlap (CN); b) CN + circle constraint (CC); c) CN + star constraint (SC); and d) CN + CC + SC + edge direction constraint.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Graphs are fundamental representations for a wide variety of data, such as transport networks, social networks, and molecular interactions. A very popular method for automatically laying out nodes and edges of a graph to create a planar visualization, while maintaining its structure, is the stress model <ref type="bibr" target="#b27">[28]</ref>. This model aims to minimize the sum of squared distance differences between pairs of nodes in the graph when laying out nodes in the visualization. Only satisfying such distance constraints, however, might not generate a user-desired layout for an effective visualization, since various application-specific layout requirements <ref type="bibr" target="#b12">[13]</ref> including non-overlapping of nodes and directed edges between nodes should be maintained. Ideally, the mental map of the user should be preserved during the evolution of a graph layout <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b33">34]</ref>.</p><p>This motivated the development of constrained graph layout meth-ods that enable users to define user-specific constraints <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b38">39]</ref>. Often, this is achieved by adapting a traditional graph layout optimization to a constrained case. Taking the stress function as the objective, stress majorization handles such constraints by projecting the node positions resulted from an unconstrained optimization to feasible positions that satisfy the constraints <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b16">17]</ref>. Later, Dwyer et al. <ref type="bibr" target="#b10">[11]</ref> proposed a fast scalable method with an unconstrained graph layout as input. The method's applicability is demonstrated for interactive graph navigation <ref type="bibr" target="#b14">[15]</ref> and diagram creation <ref type="bibr" target="#b15">[16]</ref>. Despite their benefits, existing constrained graph layout methods have three major limitations that hamper their applicability. First, they attempt to satisfy hard constraints, which could lead to high stress values that are not preferred by users <ref type="bibr" target="#b13">[14]</ref>. Second, they fail to support several aesthetic criteria <ref type="bibr" target="#b35">[36,</ref><ref type="bibr" target="#b36">37]</ref>, e.g., minimizing the edge crossings and maximizing the layout symmetry. These criteria are useful for effective examination of local structures, but they generally require a dynamic update of the orientation constraints, which is not supported by existing methods. Finally, due to high computational costs, existing methods work well only for selected small sub-graphs <ref type="bibr" target="#b14">[15]</ref>, but not for larger graphs beyond hundreds of nodes. The main reason for this is that users often need a large amount of constraints to achieve a high-quality layout for larger graphs; this requires a rather expensive constrained optimization, which cannot be solved efficiently by existing methods.</p><p>The above issues motivate us to revisit an unconstrained stress model, which can be efficiently solved by stress majorization. In short, we revisit the mathematical model of stress majorization and reformulate it in terms of a vector form, where we minimize the sum of squared differences between the vectors that connect pairs of nodes in the planar visualization, referred to as edge vectors. By default, the magnitude of an edge vector is the ideal distance 1 between the associ-ated pair of nodes. This reformulation introduces auxiliary variables edge directions, which provide us with an alternative interpretation of stress majorization and enable us to further model various kinds of user constraints.</p><p>Based on our reformulation, we show that stress majorization can be developed into a unified framework for both constrained and unconstrained graph visualizations. Hence, compared to previous constrained graph layout methods <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b16">17]</ref>, our framework can handle any constraint that can be modeled using edge vectors. This capability allows us to model almost all existing layout constraints and potentially to create new ones. These constraints can be categorized into three classes: i) direct constraints explicitly specify the edge vectors; ii) metrics-based constraints require an update of the edge vectors based on the applied aesthetic criteria such as minimizing the edge crossings and overlapping between clusters/nodes; and iii) shape-based constraints enforce a local structure in the layout to follow a certain shape by means of shape matching. These constraints are helpful for merging of small graph layouts <ref type="bibr" target="#b50">[51]</ref> and incremental layouts for dynamic graph visualization <ref type="bibr" target="#b7">[8]</ref>. Moreover, we can combine multiple constraints with different edge weights to relieve the conflicts between them.</p><p>Furthermore, our new formulation enables us to accelerate stress majorization using the GPU. This allows users to interactively explore constrained layouts, even for very large graphs with 10K nodes and more, and to examine sub-graphs of interest with various constraints. Users can start from an unconstrained layout, select a sub-graph by using a lasso, and explore its structures by imposing constraints to the layout. Once this is done, the sub-graph evolves according to the constraints while the rest of the graph is kept as stable as possible. The sub-graph with constraints can be shown in a detailed view to hide the influence of the unselected structures.</p><p>In summary, the main contributions of this paper are:</p><p>• we revisit stress majorization and show that it can be reformulated into a unified framework for both constrained and unconstrained graph visualizations;</p><p>• we devise various constraints, including the direct constraints, metrics-based constraints and shape-based constraints, to effectively explore the structures in sub-graphs of interest; and</p><p>• we present an interactive constrained graph exploration interface supported by GPU-accelerated stress majorization; our interface enables users to interactively explore graph layouts of 10K nodes with various constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK 2.1 Constrained Graph Layout</head><p>Many graph layout algorithms have been proposed in the past, see <ref type="bibr" target="#b43">[44]</ref>, among which the force-directed approach is the most popular. This approach is built upon a spring-electrical model <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b20">21]</ref>; it treats edges as springs and nodes as charged particles, and simulates repulsive forces between all pairs of nodes and attractive forces between adjacent nodes. While this approach has proven to be scalable <ref type="bibr" target="#b48">[49]</ref> and can yield reasonable layouts, it may not preserve edge length in the visualization. In contrast, the stress model by Kamada and Kawai <ref type="bibr" target="#b27">[28]</ref> assumes that the springs connect all pairs of nodes in the graph with an ideal spring length, which equals to an ideal edge length, thus producing layouts of comparatively high quality. The stress model is rooted in multidimensional scaling <ref type="bibr" target="#b28">[29]</ref> that can be efficiently solved with stress majorization <ref type="bibr" target="#b21">[22]</ref>. Although both models might produce aestheticallypleasing graph layouts, they cannot generate customized layouts that reflect the semantics of the graph or the preferences of a user. To address these issues, constrained graph layout <ref type="bibr" target="#b2">[3]</ref> was proposed to introduce layout constraints for node placement. Early works focus on drawing directed graphs and constrain the layout to show the graph hierarchy. Most approaches, e.g., <ref type="bibr" target="#b42">[43]</ref> achieve this by computing x and y coordinates of the objects in separate stages with different objectives. Typically, the y-coordinate is computed by dividing the y-axis into a shortest-path distance between them. finite number of layers and assigning one layer to each node with a goal of minimizing edge lengths, while the x-axis placement is adjusted for maintaining additional aesthetic considerations, e.g., minimizing edge crossings. The corresponding optimization problems are NP-hard, so heuristic methods have been designed <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b26">27]</ref> to solve the problem quickly. Carmel et al. <ref type="bibr" target="#b4">[5]</ref> design an alternative approach that associates nodes with continuous y-coordinates that are computed by an energy minimization. Such an axis separation strategy is algorithmically appealing but makes it hard to control the layout aesthetics. To overcome the issue, Dwyer et al. <ref type="bibr" target="#b11">[12]</ref> propose Dig-CoLa that computes all axes simultaneously by integrating constraints into stress majorization.</p><p>To enhance the functionality, various constraints are introduced to improve the force-directed placements. Ryall et al. <ref type="bibr" target="#b38">[39]</ref> model constraints as springs, which are satisfied using a spring-electrical simulation model with different stiffness values. Wang and Miyamoto <ref type="bibr" target="#b49">[50]</ref> as well as Huang and Eades <ref type="bibr" target="#b25">[26]</ref> improve force-directed placement by discouraging node overlapping and encouraging a compact drawing of clusters. Recently, Simonetto et al. <ref type="bibr" target="#b39">[40]</ref> incorporate planar constraints into an improved force-directed algorithm to prevent edge crossing. All these methods consider soft constraints, where weights are adjustable. Our method takes a similar direction and models the constraints as springs, enabling us to fuse multiple constraints with different weights. The main difference is that we incorporate the springs into the stress model and solve the optimization with stress majorization, which guarantees a monotonously converging stress function.</p><p>To impose hard constraints, He and Marriot <ref type="bibr" target="#b24">[25]</ref> add separation constraints to the stress model using quadratic programming techniques. Due to the inefficiency of the solver, however, they demonstrate their method only with very small graphs. Dwyer et al. <ref type="bibr" target="#b12">[13]</ref> extend stress majorization to satisfy separation constraints by modifying the quadratic goal function in each iteration. Such quadratic programs can be solved quickly with an iterative gradient projection algorithm. Later, Dywer et al. <ref type="bibr" target="#b16">[17]</ref> extend the constraint graph layout to allow a preservation of the topology by using a new stress function that minimizes the total path length of routed edges rather than just the straight edges. To satisfy non-linear constraints such as circular sub-graphs, Dwyer <ref type="bibr" target="#b10">[11]</ref> further extend the constraints (inequalities or equalities) over either x-or yposition variables to the ones over Euclidean space. Hence, the new constraints can be solved by fast and scalable approaches that combine state-of-the-art force-directed layout approaches with simple constraint relaxation schemes. Similar to Dwyer et al. <ref type="bibr" target="#b12">[13]</ref>, our method is also based on stress majorization, but we reformulate stress majorization and show that the constrained graph layout can be computed by an unconstrained stress majorization, which can be efficiently solved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Interactive Graph Exploration</head><p>A variety of interaction techniques have been designed for large graph exploration; see Von et al. <ref type="bibr" target="#b47">[48]</ref> for an overview. Among them, we focus on those for exploring topological structures. In general, most of these techniques <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b45">46]</ref> provide the user with i) an overview of the entire graph, and ii) a detailed view of a small sub-graph around a focal node. Often the overview layout is produced by using a scalable force-directed method, while the detailed view is simply a zoomed version of the overview. In other words, if the sub-graph of interest is not clearly recognizable in the overview, it may not be comprehensible in the detailed view. To resolve this issue, Dwyer et al. <ref type="bibr" target="#b14">[15]</ref> suggest to use a constrained graph layout algorithm for the detailed view as well. The structures of interest, however, might not be synchronized in both views, especially for the clusters. Moreover, the authors demonstrate their system only with graphs of less than a thousand nodes due to the slow speed of the constrained layout algorithm <ref type="bibr" target="#b16">[17]</ref>. Our efficient unconstrained stress majorization is capable of providing a high-quality layout in the overview as well as in the detailed view.</p><p>To prevent clutter in node-link diagrams, focus+context interaction <ref type="bibr" target="#b44">[45]</ref> is often used for graph exploration. Lamping et al. <ref type="bibr" target="#b29">[30]</ref> present an hyperbolic browser that visualizes large tree graphs with a user-selected focus on details, while preserving the context of the entire graph. By pre-computing a hierarchy of coarsened graphs, the topological fisheye approach <ref type="bibr" target="#b22">[23]</ref> achieves similar visualizations for general graphs. Van Ham and Perer <ref type="bibr" target="#b46">[47]</ref> propose a general framework for using different degree of interest (DOI) functions and use the corresponding metrics to direct the user to explore interesting sub-graphs within a context. Our solution also involves focus+context visualization, where the selected area can be shown clearly with user-specified constraints, while the rest of the structures are kept as stable as possible. Our method does not introduce as much distortions as fisheye views <ref type="bibr" target="#b44">[45]</ref>, and maintains the stress constraints of the entire graph during the whole procedure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">REVISITING STRESS MAJORIZATION</head><p>The main idea of our method is to reformulate the stress model in a way that allows us to define a unified framework for solving both constrained and unconstrained graph layout problems. To this end, we treat each edge as a vector, we say edge vector, whose magnitude and direction can be given as a constraint. In traditional stress models, only edge lengths are used as constraints. Below, we first review the stress model and stress majorization, and then present our reformulation.</p><p>Given a graph G(V, E), where V is a set of n nodes and E a set of m edges, the stress model proposed by Kamada and Kawai <ref type="bibr" target="#b27">[28]</ref> places nodes in 2D space by minimizing the difference between the resulting pairwise Euclidean distances and their corresponding target distances:</p><formula xml:id="formula_0">S(X) = ∑ i&lt; j w i j ( x i − x j −d i j ) 2 ,<label>(1)</label></formula><p>where x i is the position of the i-th node in the 2D visualization space;</p><formula xml:id="formula_1">X = {x 1 , ••• , x n } T</formula><p>is an n × 2 matrix for all the nodes; d i j gives the target distance between nodes i and j; and w i j = d −2 i j is used as a normalization constant. By minimizing the stress function S(X), the layout in the planar visualization minimizes the stress error. To minimize Eq. (1), Gansner et al. <ref type="bibr" target="#b21">[22]</ref> propose majorization, which offers distinctive advantages over the original implementation <ref type="bibr" target="#b27">[28]</ref>; most importantly, it guarantees a monotonic decrease of the stress.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Reformulation in Vector Form</head><p>The core idea of stress majorization <ref type="bibr" target="#b21">[22]</ref> is to use the upper bound of Eq. (1) rather than solving it directly. By expanding Eq. (1), one can obtain three terms:</p><formula xml:id="formula_2">S(X) = ∑ i&lt; j w i j d 2 i j + ∑ i&lt; j w i j x i − x j 2 −2 ∑ i&lt; j w i j d i j x i − x j , (2)</formula><p>where the first term is a constant and the second term is a quadratic sum. By using the Cauchy-Schwarz inequality x y ≥ x T y and dividing both sides by − z i − z j , one can bound the third term by:</p><formula xml:id="formula_3">− ∑ i&lt; j w i j d i j x i − x j ≤ − ∑ i&lt; j w i j d i j (x i − x j ) T (z i − z j ) z i − z j .<label>(3)</label></formula><p>Here, the method introduces the auxiliary variable</p><formula xml:id="formula_4">Z = {z 1 , ••• , z n } T ,</formula><p>which is an n × 2 matrix; the equality holds when X = Z. Based on this inequality, the stress function is bounded by</p><formula xml:id="formula_5">S(x) ≤ ∑ i&lt; j w i j d 2 i j + ∑ i&lt; j w i j x i − x j 2 −2 ∑ i&lt; j w i j d i j (x i − x j ) T z i − z j z i − z j .<label>(4)</label></formula><p>Putting</p><formula xml:id="formula_6">d i j = d i j z i −z j z i −z j , we rewrite Eq. (4) as S(x) ≤ ∑ i&lt; j w i j d i j 2 + ∑ i&lt; j w i j x i − x j 2 −2 ∑ i&lt; j w i j (x i − x j ) T d i j = ∑ i&lt; j w i j ||x i − x j − d i j || 2 .<label>(5)</label></formula><p>Compared to Eq. (1), the reformulated quadratic term in Eq. (5) now takes a vector form, in which we minimize the sum of squared differences between the vectors that connect pairs of nodes, whose magnitudes are the target distances. By using the above-mentioned edge vectors (denoted by d i j ), we allow the user to explicitly control not only edge lengths but also edge directions at the same time. </p><formula xml:id="formula_7">, v 1 , v 2 , v 3 } in (a).</formula><p>Note that real and virtual edges are drawn as solid grey lines and dashed red lines, respectively, and in (a), the lengths of real edges are all 1 and we set the target distance between nodes as the shortest path distance between nodes in the graph, so</p><formula xml:id="formula_8">d 34 =1, d 14 =2, and d 04 =3, while w 34 =1, w 14 =1/4</formula><p>, and w 04 =1/9. (d) L and J (defined by weights in user constraints); and (e) L and J (defined by w i j ). The orange and blue circles in (d) and (e) reveal the relationship between L and J , and L and J, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Optimization Process</head><p>Our reformulation provides an alternative interpretation of the optimization process of stress majorization. For convenience, we rewrite Eq. (5) in matrix form <ref type="bibr" target="#b32">[33]</ref>:</p><formula xml:id="formula_9">Tr(X T LX) − 2Tr(X T JD) +C,<label>(6)</label></formula><p>where L is the n × n weighted Laplacian matrix:</p><formula xml:id="formula_10">L i j = −w i j i = j ∑ k =i w ik i = j ;<label>(7)</label></formula><p>D ∈ R s×2 (with s = n(n − 1)/2) is a matrix that includes all the edge vectors between every pair of nodes in the visualization; C is a constant; and J ∈ R n×s is a matrix that stores the weights of all the edge vectors. The k-th column in J corresponds to the k-th edge vector, which is defined as</p><formula xml:id="formula_11">J ik =    w i j if i</formula><p>is the source node of the k-th edge vector −w i j if i is the target node of the k-th edge vector 0 otherwise.</p><p>Both, J and L are defined by the weights of the edge vectors, see the blue circles highlighted in <ref type="figure" target="#fig_0">Figure 2</ref>(a,e) for their relationship. Note that G(V, E) is an undirected graph, and thus we consider each edge only once in J and L. By differentiating Eq. (6) with respect to X and setting the derivative to zero, we obtain:</p><formula xml:id="formula_13">LX = JD ,<label>(9)</label></formula><p>which is equivalent to the linear system solved in the original stress majorization <ref type="bibr" target="#b21">[22]</ref> but has auxiliary variables, i.e., edge vector directions. This enables us to apply a block coordinate descent method <ref type="bibr" target="#b41">[42]</ref> by alternating between finding the optimal vector directions D (D-step) and finding the node positions X (P-step):</p><p>D-step: Update D using the current configuration X; and P-step: Fix D and compute X by solving Eq. (9).</p><p>This solving process provides a new interpretation of stress majorization. In the P-step, X can be computed by solving the linear system in the same way as the original stress majorization, while in the D-step, D can be updated by using the solution of the previous step:</p><formula xml:id="formula_14">d i j = d i j x i (t) − x j (t) x i (t) − x j (t) .<label>(10)</label></formula><p>This indicates that we do not impose any edge direction to any edge where the edge length d i j is already constrained. This way, we are able to decouple distance (or length) and directional constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Incorporating User Constraints</head><p>In the original formulation (cf. Eq. (1)), stress energy S(X) can be regarded as a set of distance constraints between node pairs; we might call them stress constraints. In contrast, our formulation with edge vectors d i j encodes both distances and directions between node pairs: our proposition is that we can adopt the same framework to model stress constraints as well as to allow users to directly or indirectly specify constraints on the edge vectors to control a layout. To differentiate from d i j , which denotes the edge vectors of stress constraints, we define d i j to denote the target edge vectors for user-specified constraints, or user constraints. In Section 4, we will show that various constraints can be modeled using d i j , and this is a unified and flexible way of modeling various kinds of graph layout constraints.</p><p>To extend the current formulation to include user constraints with</p><formula xml:id="formula_15">d i j , we form a directed (constraint) graph G (V , E ), where V ⊆ V</formula><p>and E may contain real as well as virtual edges in G; see <ref type="figure" target="#fig_0">Figure 2</ref>(a, b) for an example G and G . Combining user constraints with stress constraints, we obtain:</p><formula xml:id="formula_16">∑ i&lt; j w i j x i − x j − d i j 2 + ∑ (i, j)∈E v i j x i − x j − d i j 2 ,<label>(11)</label></formula><p>where v i j is the user-specified weight of target edge vector d i j in G . Note that in Eq. (11), the first term considers all the real and virtual edges in G, while the second term considers only the edges in the constraint graph (G ). By rewriting it into the matrix form, we get</p><formula xml:id="formula_17">Tr(X T LX) − 2Tr(X T JD) + Tr(X T L X) − 2Tr(X T J D ) + C = Tr(X T (L + L )X) − 2Tr(X T (JD + J D )) + C ,<label>(12)</label></formula><p>where Next, to minimize F Z new (X), we differentiate Eq. (12) with respect to X and setting the derivative to zero; thus, we obtain:</p><formula xml:id="formula_18">C</formula><formula xml:id="formula_19">(L + L )X = JD + J D = J J D D ,<label>(13)</label></formula><p>which is still a linear system that can be solved by alternating between D-and P-steps. Compared to Eq. (9), the P-step can be solved in the same way, but the D-step now involves new variables D . If a constraint explicitly defines the direction and length of variable d i j , such as the separation constraint used by Dwyer et al. <ref type="bibr" target="#b12">[13]</ref>, the update of D is straightforward, otherwise we should satisfy the constraint with the least layout changes. By doing so, Eq. (13) is able to handle conflicts between different constraints. An example is shown in <ref type="figure">Figure 1(d)</ref>, which demonstrates that our method can properly resolve conflicts between the circle and edge direction constraints; see Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Solving the Linear System</head><p>For computing X in the P-step (Eq. (13)), Gansner et al. <ref type="bibr" target="#b21">[22]</ref> recommend to use either a conjugate gradient (CG) solver, or Cholesky factorization. Since we aim for interactive performance, we use the CG solver due to its iterative nature. Once the user adds/deletes a constraint during the interaction, we take the result from the previous iteration of the CG solver as the input for the updated Eq. <ref type="bibr" target="#b11">(12)</ref>. This leads to a very efficient update of the results in comparison to a costly re-factorization of the system matrix in the case of using Cholesky factorization. <ref type="figure" target="#fig_1">Figure 3</ref> illustrates the fast convergence of the process by showing intermediate results of a graph, where the result of the 15th iteration almost satisfies all the constraints. For interactive exploration of large graphs, however, the CPU version is still not fast enough. Therefore, we developed a GPU implementation of our system based on the GPUbased linear algebra library ViennaCL <ref type="bibr" target="#b37">[38]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">USER CONSTRAINTS ON GRAPHS</head><p>Having reformulated stress majorization, we next show how to adapt our framework to model various kinds of constraints in a unified fashion, including some of the constraints proposed in previous works <ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref>, e.g., edge orientations, circularity, and non-overlapping clusters. Besides existing constraints, our framework also allows us to define new constraints to improve the graph layout quality.</p><p>In our framework, we categorize user constraints into three classes: direct, metrics-based, and shape-based constraints. For direct constraints, we directly specify target edge vectors (d i j ) for the related edges in graph. For metrics-based constraints, the target edge vectors of the related nodes are computed based on the applied aesthetic metrics, while for shape-based constraints, we constrain the layout to follow certain reference shapes. In the following, we describe each class of constraints and explain how we update d i j in the D-step based on the corresponding layout configuration X, which is</p><formula xml:id="formula_20">{x 1 , ••• , x n } T .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Direct Constraints</head><p>Direct constraints explicitly specify the target edge vectors, so the update of d i j is straightforward. By representing the target edge vector between nodes i and j with a unit vector u i j and length l i j , we set d i j = l i j * u i j . The edge length constraint, edge orientation constraint, and temporal coherence constraint all belong to this class.</p><p>Edge Length Constraint. This is like a stress constraint that follows the original stress majorization. After the user employs a lasso to select edges in the graph, our method constrains the d i j of each selected edge to take a certain user-specified length l i j like an ideal distance <ref type="bibr" target="#b10">[11]</ref>; hence, we set these d i j by a simple scaling:</p><formula xml:id="formula_21">l i j * (x i − x j )/ x i − x j .</formula><p>Edge Direction Constraint. This constraint is similar to the previous length constraint, but here we constrain the d i j of each selected edge to follow a certain user-specified direction u i j , i.e., we set these</p><formula xml:id="formula_22">d i j as ||x i − x j ||u i j .</formula><p>Temporal Coherence Constraint. To enable the creation of a coherent time-varying graph layout, we take the graph layout from the previous time step as a reference layout and map the graph layout of the current time step to it. Suppose the layout configuration at time t − 1 is X(t − 1), we set the target edge vector d i j (t) at time t to be d i j (t − 1) for all node pairs that exist at both times. Since we also keep the original unconstrained stress model through the stress constraints in Eq. <ref type="formula" target="#formula_19">13</ref>, nodes that only exist in the graph at time t can also be properly positioned. <ref type="figure" target="#fig_3">Figure 4</ref> illustrates temporal coherence, showing that nodes (A, C, D, E, and F) existed in both graphs have similar structures. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Metrics-based Constraints</head><p>Metrics-based constraints aim to optimize a layout to meet certain aesthetic criteria, such as reducing cluster overlap and minimizing edge crossings. In this class, the target edge vector to be constrained is not directly provided but needed to be determined based on the metric.</p><p>Non-overlap Constraint. Clusters are prominent structures that always catch viewer's attention. Hence, if multiple clusters overlap in a graph layout, we try to separate them to improve the readability of their structures. A method to detect overlapping clusters can be found in <ref type="bibr" target="#b10">[11]</ref>, which refers to minimal penetration depth (mpd) for collision detection in rigid-body simulations <ref type="bibr" target="#b9">[10]</ref>. Since cluster boundaries are usually convex, we estimate the vector mpd between two overlapping clusters by finding the shortest vector to move a cluster out of the other; see the grey arrow (mpd) in <ref type="figure" target="#fig_4">Figure 5</ref>(a) for an example.</p><p>To formulate a non-overlap constraint, we make use of the mpd to modify d i j . Given two overlapping clusters C a and C b , for each node i in C a and each node j in C b , we add mpd to the associated target edge vector between them: d i j = (x i − x j ) + mpd. Hence, the constraint will push the nodes of the two clusters away from each other by mpd; <ref type="figure" target="#fig_4">(Figure 5(a)</ref>). Furthermore, if we take each node as a cluster, nonoverlap for node boundaries (cf. <ref type="bibr" target="#b10">[11]</ref>) can be considered as a special case of this non-overlap constraint. Minimizing Edge Crossings. Excessive edge crossings prevent us from seeing local graph structures. However, it is not always possible to avoid all the crossings, cf. <ref type="bibr" target="#b26">[27]</ref> and current methods can mainly deal with crossings in small graphs. In this work, we do not aim to solve the general edge crossing problem. Instead we show that using our unified framework with the edge vectors, we are able to model a simple constraint to resolve edge crossings in small graphs.</p><p>Given a small sub-graph of interest selected by lasso, we first identify all pairs of intersecting edges inside, and then locate the node with the largest degree (say node i) among the nodes in all the intersecting edges. After that, we find a pair of intersecting edges that involve node i, e.g., the edge between nodes i and j, and another between nodes k and l (see <ref type="figure" target="#fig_4">Figure 5</ref>(b), and compute their target edge vectors by:</p><formula xml:id="formula_23">ρ = l i j x i − x j x i − x j + l lk x l − x k x l − x k ; d i j = l i j ρ ρ and d lk = l lk ρ ρ .<label>(14)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Shape-based Constraints</head><p>Based on our unified framework, it is possible to constrain the local structure of a graph, since the framework enables us to constrain edge directions in addition to edge lengths. Hence, we can formulate shapebased constraints in our framework to optimize the local structure of a sub-graph to follow certain reference shapes, so that the local structure around the sub-graph can be revealed more clearly. Unlike direct and metrics-based constraints, the nodes to be updated are not directly provided but need to be determined based on the reference shape. Moreover, the reference shape has different forms and is provided in a different way for different constraints in this constraint class. Below, we first present the part of our method common to all the shape-based constraints and then give details to individual constraint. Given a reference shape and a set of nodes</p><formula xml:id="formula_24">{p i } n p i=1</formula><p>belonging to a sub-graph of interest, our goal is to re-arrange p i to follow the reference shape. Hence, we first uniformly discretize the reference shape into n q points, say {q j } n q j=1 , where n q ≥ n p . Second, to help preserve the mental map of users, so that the graph layout receives the least amount of changes, we adopt the iterative closest point (ICP) matching model, and define an affine transformation M (with translation, rotation, and scaling) to transform {p i }. In each ICP iteration, we determine for each p i a point on the reference shape that is the closest to Mp i , say q i , and then compute M that minimizes the following objective:</p><formula xml:id="formula_25">n p ∑ i ω i Mp i − q i 2 ,<label>(15)</label></formula><p>where ω i is the weight of node p i . To emphasize the nodes that connect with many, we set ω i as the degree of node p i , so that the major structure is more clearly revealed. We solve this matching problem by using the iterative closest point (ICP) algorithm <ref type="bibr" target="#b1">[2]</ref>, which is widely employed in point set registration. Once M is computed, we determine pairs of p i and p j whose mapped points Mp i and Mp j are adjacent to each other in the reference shape, and set the target edge vector (d i j ) between them as M(p i − p j ) to follow the reference shape.</p><p>Circle Constraint. Circular structures are salient features in graph layouts, particularly for cases like biological pathways and transport networks. After the user selects a sub-graph of interest by lasso, our method looks for the largest cycle in the sub-graph and aims to move the nodes in the cycle to fit a circle (reference shape). <ref type="figure">Figure 6</ref>(a) shows an illustrative example, where we achieve a stable circular layout with six edge vector constraints. In contrast, Dwyer <ref type="bibr" target="#b10">[11]</ref> requires a combination of more separation constraints to create a satisfactory layout, including also constraints between non-adjacent nodes; see <ref type="figure">Figure 6</ref>(b). <ref type="figure">Fig. 6</ref>. Comparison the constraints to create a circular layout: (a) our method and (b) Dwyer <ref type="bibr" target="#b10">[11]</ref>. Our method fits a target circle to a selected sub-graph and constrains only six target edge vectors (red arrows), while Dwyer <ref type="bibr" target="#b10">[11]</ref> requires more constraints, including the separation between adjacent (grey) and non-adjacent (blue) nodes. <ref type="figure">Fig. 7</ref>. Fit a star shape to a subgraph (black) by manipulating the black edges in the sub-graph to follow the red target edge vectors.</p><p>Star Constraint. Purchase <ref type="bibr" target="#b35">[36]</ref> introduced an aestheticallypleasing metric that spreads out edges around a node by maximizing the minimum angle in-between outgoing edges from the node. In this work, we develop a more efficient metric, the star constraint, which can be modeled in our unified framework by referencing a local substructure to a star shape. To do so, after the user selects a sub-graph, we find the nodes with the largest degree for the user to select. Then, we pick as the reference shape a star shape whose edge count matches the degree of the user-selected node (see <ref type="figure">Figure 7)</ref>, and modifies the target edge vectors accordingly. Since ICP matches shapes with a rotation, the star shape can have varying orientation when mapped to the nodes with the least layout changes.</p><p>Symmetry Constraint. Symmetry maximization is another way to enhance a graph's readability, especially by means of reflective symmetry, see <ref type="bibr" target="#b35">[36]</ref>. Taking a symmetry axis and a sub-graph of interest (say G s ) specified by the user, we can regard the mirror image of G s as a reference shape and apply it to the graph's substructure on the other side of the symmetry axis; see <ref type="figure" target="#fig_5">Figure 8</ref>(a). After determining the correspondence with ICP, each node i in G s associates with a corresponding node i in G s , which is a mirrored sub-graph. In G s , for each pair of connecting nodes i and j, whose length is l i j and unit vector is u i j , we can apply l i j and u i j (which is the mirror of u i j about the symmetry axis) to set the target edge vector between nodes i and j in G s , i.e., <ref type="figure" target="#fig_5">Figure 8</ref> shows an example, where the hexagon boxed by dashed lines is mapped to the sub-graph shown on the right hand side according to the vertical symmetry axis in the middle.</p><formula xml:id="formula_26">d i j = l i j * u i j .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RESULTS AND EVALUATION</head><p>We implemented and tested our method on a computer with an Intel Core i7 processor with 16GB memory using C++. Moreover, we developed a GPU implementation that runs on the NVidia GTX1080 graphics card with 8GB video memory using CUDA. The code is available for download on GitHub <ref type="bibr" target="#b1">2</ref> . To demonstrate that our method is able to produce fast and stable constrained graph layouts, we evaluated three main aspects. First, we quantitatively compare the quality of our results with two state-of-the-art constrained methods. Second, we demonstrate its usefulness in different applications and qualitatively compare it with related methods. Last, we present a constraint-based graph exploration interface that enables users to interactively explore a large graph of approx. 10K nodes and 90K edges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Comparison with Previous Methods</head><p>We compare our approach with two closely related constrained graph layout methods: an incremental procedure for layouts with separation constraints (IPSep) <ref type="bibr" target="#b12">[13]</ref> and a scalable and versatile constrained graph layout (SV) <ref type="bibr" target="#b10">[11]</ref>. Both methods are closely related to this work, since both enforce separation constraints between selected pairs of nodes; both of them, however, cannot explicitly constrain edge directions. The main difference between them is that IPSep defines the separation in horizontal/vertical axis, while SV defines the Euclidean distance in an arbitrary direction. Namely, both methods support edge length and direction constraints, and SV supports even more, e.g., a circle constraint and non-overlap of convex cluster constraint, because of its flexibility. On the other hand, SV is faster than IPSep but its quality might be inferior to IPSep, because it incorporates constraints into the force-directed layout algorithm <ref type="bibr" target="#b30">[31]</ref> instead of the stress model. Accordingly, we designed two experiments: i) we compare our method with IPSep and SV for the downward constraint (Section 5.1.1), and ii) we compare our method with SV for the circle constraint and non-overlap constraint (Section 5.1.2). The first experiment involves a direct constraint, while the second involves a metrics-based constraint (non-overlap) and a shape-based constraint (circle). We use the code that was provided by the authors to perform the comparison. Following Dwyer et al. <ref type="bibr" target="#b12">[13]</ref>, we measure the layout quality using stress error (SE) as defined in Eq. (1). Moreover, we compute the degree of constraint satisfaction, which has different definitions for different constraints; we will outline the exact definitions below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Comparison: Direct Constraints</head><p>In this comparison, we use two datasets: Bus1138 with 1138 nodes and US Power Grid with 4941 nodes <ref type="bibr" target="#b8">[9]</ref>. The former dataset was used to test downward constraints by IPSep and SV before. To measure the constraint satisfaction degree, we define vertical edges (VE) <ref type="bibr" target="#b3">[4]</ref> :</p><formula xml:id="formula_27">V (X) = ∑ (i, j)∈E &lt; x i − x j ||x i − x j || , [1, 0] &gt; ,<label>(16)</label></formula><p>which measures the sum of absolute inner products to be between the edge vector and the positive X-axis. Like SE, a small V (X) indicates that the constraints are better satisfied. Like Dwyer et al. <ref type="bibr" target="#b12">[13]</ref>, we also count the number of edge crossings (#EC).</p><p>Results. <ref type="table" target="#tab_0">Table 1</ref> lists the metric values for layouts of two different data sets generated by unconstrained layout (UC), IPSep, SV, and two versions of our method with different weights (v i j = 2 and v i j = 4).</p><p>We can see that our method produces the best quality, with stress values close to UC. Since the downward constraint changes the edge   direction, it introduces more edge crossings for the Bus1138 graph, but our method still produces fewer edge crossings than IPSep and SV, and it even leads to the smallest number of edge crossings for the US Power Grid data set. Regarding the constraint satisfaction degree VE, our method performs the best for the Bus1138 graph, while it produces a VE similar to IPSep for the the US Power Grid graph. The results also confirm that SV is worse than IPSep and our method. Since the weight v i j balances the stress constraint and user constraints, our version I with smaller weight leads to smaller vertical energy, while our version II with larger weight leads to smaller stress value. <ref type="figure" target="#fig_6">Figure 9</ref>(a-d) presents the resulting layouts of the Bus1138 data set generated by an unconstrained stress majorization (UC), IPSep, SV, and our method (with v i j = 4), respectively. Comparing with UC shown in <ref type="figure" target="#fig_6">Figure 9</ref>(a), we can see that our method clearly displays the major structure with the least amount of edge crossings (see <ref type="figure" target="#fig_6">Figure 9(d)</ref>), while SV leads to visual clutter (see <ref type="figure" target="#fig_6">Figure 9</ref>(c)). Due to space limit, we only show the results of the Bus1138 data set; for the results of the US Power Grid graph, please refer to the supplemental material.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Comparison: Metrics-and Shape-based Constraints</head><p>To study the quality of layouts generated with the non-overlap and circle constraints, we compare our method with SV <ref type="bibr" target="#b10">[11]</ref>, since IPSep cannot support these constraint classes. We use two large graphs: Bcspwr10 (5300 nodes) and Psse1 (14318 nodes), and generate clusters in them using the Snap library <ref type="bibr" target="#b31">[32]</ref>. Moreover, we use two additional metrics to quantify the non-overlap and circle constraints: i) the number of mis-placed nodes (#MN) and ii) the shape matching error (ME). Misplaced nodes refer to nodes located within the convex hull of some other classes, while for ME, we evaluate Eq. (15) for each circle and compute the average weighed by the circle area. For Psse1, since it does not have circle information, we only consider non-overlap constraints.</p><p>Results. <ref type="table" target="#tab_1">Table 2</ref> lists the metric values for layouts of Bcspwr10 and Psse1 generated by unconstrained layout (UC), SV, and our method (with v i j = 3.5) for two graphs. Similar to the downward constraint  We plot stress error vs. number of iterations. Our method and IPSep both converge in less than ten iterations but our method has smaller stress errors, whereas SV requires 100 iterations to converge with still having a large stress error.</p><p>results, the stress values produced by our method are quite close to those of UC, meaning that its layout is similar to that generated by the original stress majorization, while SV produces much larger stress errors (SE). Meanwhile, both the number of mis-placed nodes and shape matching energy for our method are much lower than others. <ref type="figure" target="#fig_7">Figure 10(a,b)</ref> presents the layouts of the Bcspwr10 graph data generated by SV and our method, respectively. We can see from the figures that our method almost separates all clusters. Furthermore, the three sub-graphs of interest are well arranged in a circular fashion, especially for the smallest one. In contrast, SV introduces more misplaced nodes (#MN) and the three sub-graphs cannot really evolve to circular shapes. The layouts of the Psse1 graph data show similar results, and can be found in the supplemental material. <ref type="table">Table 3</ref> summarizes the time taken to generate graph layouts of varying complexity, from 1138 to 14318 nodes. For Bus1138 and US Power Grid, all edges are enforced with the downward constraints, so the number of constraints equals the edge count (m). In contrast, the nonoverlap constraints for Bcspwr10 and Psse1 involve many node pairs among different clusters, so the number of constraints becomes really large. SV is faster than our CPU implementation but slower than our GPU implementation for large graph data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.3">Performance</head><p>We also compared the convergence of the stress error of the three <ref type="table">Table 3</ref>. Statistics of our results: the data set size (n and m), number of constraints (c), and computational time (in seconds) for creating the layouts using the CPU and GPU versions of our method, IPSep <ref type="bibr" target="#b12">[13]</ref>, and SV <ref type="bibr" target="#b10">[11]</ref>. (c) (b) (a) <ref type="figure" target="#fig_0">Fig. 12</ref>. Comparing our method with Yuan et al. <ref type="bibr" target="#b50">[51]</ref> for merging graphs. (a) highlighting the subgraphs shown in pink and blue regions on a graph layout with reference shapes SG1 and SG2; (b) The result produced by our method; and (c) the result produced by Yuan et al. <ref type="bibr" target="#b50">[51]</ref>. The numbers shown in (c) indicate the similarity scores between the sub-graph and its reference shape, the structures highlighted in the orange boxes can be more clearly revealed in (b) than in (c).</p><p>methods, as summarized in <ref type="figure" target="#fig_8">Figure 11</ref>. Both our method and IPSep, converge to similar stress errors and run more rapidly than SV, while our method produces the smallest stress error.</p><p>In summary, we see that our method runs at comparable speed for small graphs like SV <ref type="bibr" target="#b10">[11]</ref>, but it is still able to produce higher quality results, as shown in <ref type="table" target="#tab_0">Table 1</ref>. For large graphs with non-overlap constraints, the cost of transferring L and J is too expensive, so that the GPU performance is not as good as we expected; however, it still improves over the CPU version and runs faster than SV, since SV requires a larger amount of constraints than our method. For the graph Psse1, SV and our method run out of system memory. On the other hand, during the interactive exploration, only the newly added constraints needed to be updated for L and J , so the performance becomes acceptable for graph exploration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Comparison with Applications</head><p>Here we show that our direct constraints can be used for merging small graph layouts and incremental layouts for dynamic graph visualization, since target edge vectors of specific edges have been explicitly given, so we can directly treat them as constraints in our framework. Moreover, for each application we compare to previous related works. Merging Subgraphs. Yuan et al. <ref type="bibr" target="#b50">[51]</ref> propose to combine many user's input sub-graphs into a consistent layout that maintains the topological information of the individual input layouts. They developed an algorithm, Laplacian constrained distance embedding, that attempts to preserve the Euclidean distance between the nodes of the input subgraph layouts and the nodes of an initial layout of the whole graph. Since the nodes correspondence between the input sub-graph and the whole graph is already known, the edge of the input sub-graph layout can be taken to form the target edge vectors of the associated nodes, and thus our method can also be used for this purpose.</p><p>As shown in <ref type="figure" target="#fig_0">Fig 12(a)</ref>, the user requires the subgraph shown in the blue region to be aligned with a straight line SG1, and the subgraph in the pink region to be matched up with the reference shape SG2. Our method automatically creates the constrained graph layout shown in <ref type="figure" target="#fig_0">Figure 12(b)</ref>, where we measure the layout similarity in terms of the procrustes statistic <ref type="bibr" target="#b6">[7]</ref>. Such measure is 1.0 between the sub-graphs in our case, while those generated by Yuan et al. <ref type="bibr" target="#b50">[51]</ref> are 0.95 and 0.91. Moreover, we can see that the sub-structures highlighted by the orange boxes can be shown more clearly with fewer edge crossings and node overlapping. We assume the reason is that their method preserves the Euclidean distance between nodes of a given unconstrained graph layout rather than the graph distance, while our method consistently combines the stress (distance) constraints and user constraints together. Visualizing Dynamic Graphs. Our temporal coherence constraint naturally supports time-varying visualizations of dynamic graphs. To demonstrate the effectiveness of our method, we first compare it with the Laplacian-based dynamic graph layout algorithm <ref type="bibr" target="#b5">[6]</ref>, which has been demonstrated to perform better than the online dynamic graph drawing algorithm <ref type="bibr" target="#b19">[20]</ref>. <ref type="figure" target="#fig_3">Figure 14</ref> shows the results, where our layout is more stable for the Newcomb's fraternity data <ref type="bibr" target="#b34">[35]</ref>, For example, the shape of the green and pink sub-graphs in our method (a) are almost kept constant throughout the whole sequence. Using the state-of-the-art approach (b), these areas re-shape substantially at T1 and T3. We further apply our method to large dynamic graphs, the results of which can be found in the supplemental material.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Constraint-based Graph Exploration</head><p>In this section, we demonstrate the usefulness of our method in exploring large graphs. <ref type="figure" target="#fig_1">Figure 13</ref> shows a screenshot of our interface, which consists of five main components: constraint selection view (upperleft), main view (left), detail view (upper-right), weight controlling view (middle-right), and finally a detailed information view providing additional information about sub-graph of interest. Once the user selects a constraint type, the associated constraints will be imposed to the entire graph or to the subgraph of interest selected by a lasso, while the sub-graph of interest can be highlighted in the detail view. The user can also assign different weights to individual constraints.</p><p>Using this setup, users can interactively enforce constraints to explore clusters, paths, circles, and nodes. The clusters can be separated using the non-overlap constraint, while circles and nodes can be highlighted by enforcing circular and star-like shapes. To help the users to intuitively perceive a path, we introduce a path constraint that orients edges using the weighted average of all edge vectors along a path. This Comparison of the layout results generated by (a) our method and (b) the Laplacian-based dynamic graph layouting algorithm <ref type="bibr" target="#b5">[6]</ref>. The sub-graphs shown in pink and green regions keep the shape during the whole sequence in (a), but change substantially in (b). Node 4 is highlighted with a red circle, revealing that its position is kept stable in our method but changes in the other method. <ref type="figure" target="#fig_4">Fig. 15</ref>. Exploration of circles in the Ego-network. (a) results generated by using cluster non-overlap constraints, where 16 communities are separated; (b) results generated by enforcing circle and star shapes to two selected nodes: 686 and 3980, the highlighted sub-graphs are shown in the detail views. (c) results generated by enforcing path constraints to these two nodes, the detailed node label information is shown in the detail view.</p><p>allows us to straighten the path while imposing only small changes to the whole graph layout. Exploration of Ego-Network. Here, we use the data set ego-Facebook <ref type="bibr" target="#b31">[32]</ref> to demonstrate the effectiveness of our method for graph exploration. This graph has 4039 nodes, 88234 edges, and 4037 different, hand-labeled circles, which represent a categorization of Facebook friends. Since each circle is not only densely-connected but also might be nested in large ones, it is very hard to see their structures.</p><p>To quickly get an overview of this ego-network, we suggest that the user explores the relationship between different communities by enforcing cluster non-overlap constraints. <ref type="figure" target="#fig_4">Figure 15(a)</ref> shows the result, where 16 communities are separated, and different communities have different structures. To compare the different communities, the user selects the central nodes (pink and orange) and applies circle and star shape constraints to them. Next, the user obtains the results shown in <ref type="figure" target="#fig_4">Figure 15(b)</ref>, where the pink node is involved in two nested circles, while the orange node has very dense connections. It appears that these two nodes have very different structures. To investigate how far they are from each other, we enforce a path constraint to them, the corresponding path is shown in <ref type="figure" target="#fig_4">Figure 15(c)</ref>. We see that there are five nodes with different labels between them. The user can further explore the nodes on this path, for instance, to understand the structure of the other communities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>In this work, we revisit stress majorization and reformulate it in terms of a vector form. By this means, we develop a unified framework that enables us to model various forms of constraints: direct constraints, metric-based constraints, and shape-based constraints. These constraints can all be solved efficiently by a GPU-accelerated stress majorization method. Through a set of quantitative comparisons with state-of-the-art constrained layout methods, we show that our approach outperforms others in producing graph layouts with lower stress while satisfying the constraints. Meanwhile, we demonstrated the usefulness of our method with the applications of merging user's input sub-graph layout and temporal coherent dynamic graph visualization. Finally, we developed a system for interactive exploration of large graphs using overview+detail with constraint based layouts, and demonstrated its effectiveness by using a large social network data.</p><p>Our formulation of stress majorization opens various new opportunities for graph visualization. First, we may develop more constraints, especially shape-based constraints, where the user can fit a specific shape to a given graph layout for aesthetics and data analysis. Second, the weights of the constraints are currently manually set by users, so finding a way to automatically set proper weights to fuse multiple constraints is part of our future work. Third, our current GPU implementation is still not sufficiently fast to support interactive exploration of very large graphs. In the future, we plan to further improve its performance by optimizing the data transfer between CPU and GPU. Last, we plan to explore different applications of our improved stress majorization, such as constrained multidimensional scaling (MDS) for high-dimensional data visualization <ref type="bibr" target="#b6">[7]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>An illustrative example shows how we optimize a given graph G (from (a) to (c)) by stress constraints together with user constraints (in this example, edge orientations) defined on a constraint graph G (b), where four directed edge constraints {e 0 , e 1 , e 2 , e 3 } (red arrows) are enforced on the nodes {v 0</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Illustration of the convergence of our method. We show intermediate results of a graph optimized with multiple constraints: edge directions, cluster non-overlap, circles and star shapes: (a) random initialization; (b) after 5 iterations; (c) after 15 iterations; and (d) after 30 iterations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>is a constant, D consists of all the target edge vectors (d i j ), and L and J are defined by the user-specified weights (v i j ) and constructed according to Eq. (14) and Eq. (8), respectively. For the example constraint graph G shown in Figure 2(b), its V is a subset of nodes of G; see Figure 2(a), and Figure 2(d) shows the corresponding L and J , where the four edges of G are constrained by the four target edge vectors {e 0 , e 1 , e 2 , e 3 } with weights {2, 2, 4, 4}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Enforcing temporal coherence for a dynamic graph visualization: (a) layout at time t − 1; (b) layout at time t without the temporal coherence constraint; and (c) layout at time t after enforcing the temporal coherence constraint. A sub-graph existed at both times (nodes A, C, D, E, &amp; F) is highlighted with a pink background. Nodes and edges that exist at both times are shown in gray, elements that existed only in (a) are shown in black, while elements that existed only in (b,c) are shown in light gray.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Metrics-based constraints: (a) we push two overlapping clusters away from each other by taking mpd into the target edge vectors between nodes in the two clusters; and (b) the weighted average of two crossing edge vectors − → i j and − → kl is taken as the direction component of the target edge vectors (shown in red) to avoid the crossing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Symmetry Constraint. (a) User specifies a symmetry axis (red dashed) and a sub-graph of interest (boxed); (b) we take the mirrored sub-graph as a reference shape to symmetrize the structure on the right.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>Comparison of the layout of the Bus1138 graph data with downward constraints generated by different methods: (a) unconstrained stress majorization (UC); (b) IPSep; (c) SV; and (d) our method with weight v i j set to be 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .</head><label>10</label><figDesc>Comparison of the layout of Bcspwr10 with cluster non-overlap and circle constraints generated by SV (a) and our method with v i j set to 3.5 (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 11 .</head><label>11</label><figDesc>Convergence of different constrained layout methods for the Bus1138 graph.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 13 .</head><label>13</label><figDesc>The user interface of our constraint-based graph exploration system includes a button menu for constraints selection (top-right, boxed in purple), the overview of the entire graph (boxed in yellow), detail view (boxed in red), constraints weight controlling view (boxed in green), and detail information view (boxed in blue).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>Fig. 14. Comparison of the layout results generated by (a) our method and (b) the Laplacian-based dynamic graph layouting algorithm [6]. The sub-graphs shown in pink and green regions keep the shape during the whole sequence in (a), but change substantially in (b). Node 4 is highlighted with a red circle, revealing that its position is kept stable in our method but changes in the other method.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc></figDesc><table><row><cell cols="7">Comparing two versions of our method (with different weights,</cell></row><row><cell cols="7">Ours-I: v i j = 2 and Ours-II: v i j = 4) with unconstrained layout (UC), IPSep,</cell></row><row><cell cols="7">and SV. The comparison considers all real edges in two different graphs.</cell></row><row><cell>Graphs</cell><cell></cell><cell>Bus1138</cell><cell></cell><cell cols="2">US Power Grid</cell><cell></cell></row><row><cell>Methods</cell><cell>SE</cell><cell>VE</cell><cell>#EC</cell><cell>SE</cell><cell>VE</cell><cell>#EC</cell></row><row><cell>UC</cell><cell cols="3">40,407 878 1,317</cell><cell>687,963</cell><cell>3,907</cell><cell>13,462</cell></row><row><cell>Ours-I</cell><cell cols="3">42,874 714 2,083</cell><cell>698,140</cell><cell>3,457</cell><cell>13,599</cell></row><row><cell>Ours-II</cell><cell cols="3">46,241 560 2,484</cell><cell>714,519</cell><cell>2,786</cell><cell>13,071</cell></row><row><cell>IPSep</cell><cell cols="3">49,035 838 4,517</cell><cell>817,994</cell><cell>2,789</cell><cell>41,560</cell></row><row><cell>SV</cell><cell cols="6">88860 757 8,542 1,858,103 4,849 116,568</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Comparing our method (weight v i j = 3.5 for all specified constraints) with unconstrained layout (UC) and SV on two graphs.</figDesc><table><row><cell>Graphs</cell><cell cols="2">Bcspwr10</cell><cell></cell><cell cols="2">Psse1</cell></row><row><cell>Methods</cell><cell>SE</cell><cell>#MN</cell><cell>ME</cell><cell>SE</cell><cell>#MN</cell></row><row><cell>UC</cell><cell>6.71e5</cell><cell cols="2">1,109 18.14</cell><cell>1.42e7</cell><cell>50,146</cell></row><row><cell>Ours</cell><cell>9.95e5</cell><cell>134</cell><cell>1.95</cell><cell>1.75e7</cell><cell>13,378</cell></row><row><cell>SV</cell><cell>1.14e11</cell><cell>831</cell><cell cols="3">14.82 1.92e10 49,679</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">The ideal distance between two nodes in a graph is generally defined as the</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2">https://github.com/Yanyan-Wang/vectorized_stress_majorization</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors would like to thank Zeyu Wang and Tong Ge for their help in making the video, and the anonymous reviewers for the valuable comments. This work is supported by the grants of NSFC- </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Animation, small multiples, and the effect of mental map preservation in dynamic graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Purchase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pinaud</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2010.78</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="539" to="552" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A method for registration of 3-D shapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Besl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckay</surname></persName>
		</author>
		<idno type="DOI">10.1109/34.121791</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pat. Ana. &amp; Mach. Int</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="239" to="256" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Using constraints to achieve stability in automatic graph layout algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-F</forename><surname>Böhringer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">N</forename><surname>Paulisch</surname></persName>
		</author>
		<idno type="DOI">10.1145/97243.97250</idno>
	</analytic>
	<monogr>
		<title level="m">ACM CHI</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="43" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Difference metrics for interactive orthogonal graph drawing algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bridgeman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-37623-25</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="57" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Combining hierarchy and energy for drawing directed graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carmel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2004.1260757</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="46" to="57" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Laplacian-based dynamic graph visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Che</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<idno type="DOI">10.1109/PACIFICVIS.2015.7156358</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Pacific Visualization Symposium</title>
		<meeting>the IEEE Pacific Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="69" to="73" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Multidimensional scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Cox</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>CRC press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An incremental layout method for visualizing online dynamic graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Crnovrsanin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Ma</surname></persName>
		</author>
		<idno>doi: 10. 1007/978-3-319-27261-0 2</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing and Network Visualization</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="16" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The University of Florida sparse matrix collection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<idno>doi: 10. 1145/2049662.2049663</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Mathematical Software</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Computing the intersection-depth of polyhedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hershberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Suri</surname></persName>
		</author>
		<idno type="DOI">10.1007/BF01190153</idno>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="518" to="533" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Scalable, versatile and simple constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2009.01449.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="991" to="998" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Dig-CoLa: directed graph layout through constrained energy minimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<idno type="DOI">10.1109/INFVIS.2005.1532130</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Information Visualization Symposium</title>
		<meeting>the IEEE Information Visualization Symposium</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="65" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">IPSep-CoLa: An incremental procedure for separation constraint layout of graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2006.156</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="821" to="828" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A comparison of user-generated and automatic graph layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Quinn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Isenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>North</surname></persName>
		</author>
		<idno>doi: 10.1109/ TVCG.2009.109</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="961" to="968" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Exploration of networks using overview+detail with constraint-based cooperative layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schreiber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Stuckey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Woodward</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2008.130</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1293" to="1300" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Dunnart: A constraint-based network diagram authoring tool</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-00219-941</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="420" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Topology preserving constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wybrow</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-00219-922</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="230" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A heuristic for graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Congressus numerantium</title>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="146" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Online animated graph drawing for web navigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Huang</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-63938-177</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="330" to="335" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Online dynamic graph drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Frishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2008.11</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="727" to="740" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Graph drawing by force-directed placement. Software: Practice and experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>Fruchterman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Reingold</surname></persName>
		</author>
		<idno type="DOI">10.1002/spe.4380211102</idno>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1129" to="1164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Graph drawing by stress majorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>North</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-540-31843-925</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="239" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Topological fisheye views for visualizing large graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2005.66</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="457" to="468" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A technique for drawing directed graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-P</forename><surname>Vo</surname></persName>
		</author>
		<idno type="DOI">10.1109/32.221135</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="214" to="230" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Constrained graph layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Marriott</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-62495-350</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="217" to="232" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A fully animated interactive system for clustering and navigating huge graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-37623-229</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="374" to="383" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Exact and heuristic algorithms for 2-layer straightline crossing minimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jünger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mutzel</surname></persName>
		</author>
		<idno type="DOI">10.1007/BFb0021817</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="337" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">An algorithm for drawing general undirected graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kawai</surname></persName>
		</author>
		<idno>doi: 10.1016/ 0020-0190</idno>
	</analytic>
	<monogr>
		<title level="j">Information processing letters</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="90102" to="90108" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Multidimensional scaling by optimizing goodness of fit to a nonmetric hypothesis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename></persName>
		</author>
		<idno>doi: 10. 1007/BF02289565</idno>
	</analytic>
	<monogr>
		<title level="j">Psychometrika</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="27" />
			<date type="published" when="1964" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A focus+context technique based on hyperbolic geometry for visualizing large hierarchies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lamping</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pirolli</surname></persName>
		</author>
		<idno type="DOI">10.1145/223904.223956</idno>
	</analytic>
	<monogr>
		<title level="m">ACM CHI</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="401" to="408" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Multipole-based force approximation revisited -a simple but fast implementation using a dynamized enclosing-circle-enhanced kd-tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lauther</surname></persName>
		</author>
		<idno>doi: 10. 1007/978-3-540-70904-6 4</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="20" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Snap: A general-purpose network analysis and graph-mining library</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sosič</surname></persName>
		</author>
		<idno type="DOI">10.1145/2898361</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Intelligent Systems and Technology</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Matrix analysis and applied linear algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Meyer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>SIAM</publisher>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Layout adjustment and the mental map</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Misue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eades</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sugiyama</surname></persName>
		</author>
		<idno type="DOI">10.1006/jvlc.1995.1010</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="183" to="210" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">The acquaintance process: Looking mainly backward</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>Newcomb</surname></persName>
		</author>
		<idno>doi: 10. 1037/0022-3514.36.10.1075</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Personality and Social Psychology</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page">1075</biblScope>
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Metrics for graph drawing aesthetics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Purchase</surname></persName>
		</author>
		<idno type="DOI">10.1016/S1045-926X(02</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages &amp; Computing</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="90232" to="90238" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Graph drawing aesthetics created by users, not algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Purchase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pilcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Plimmer</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2010.269</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="81" to="92" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">ViennaCL -a high level linear algebra library for GPUs and multi-core CPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Rupp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Rudolf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weinbub</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intl. Workshop on GPUs and Scientific Applications</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="51" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">An interactive constraint-based system for drawing graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ryall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Marks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shieber</surname></persName>
		</author>
		<idno>doi: 10. 1145/263407.263521</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th annual ACM symposium on User interface software and technology</title>
		<meeting>the 10th annual ACM symposium on User interface software and technology</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="97" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">ImPrEd: An improved force-directed algorithm that prevents nodes from crossing edges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Simonetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Archambault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Auber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bourqui</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2011.01956.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1071" to="1080" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Cytoscape 2.8: new features for data integration and network visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Smoot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ono</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ruscheinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ideker</surname></persName>
		</author>
		<idno type="DOI">10.1093/bioinformatics/btq675</idno>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="431" to="432" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">As-rigid-as-possible surface modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Sorkine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Alexa</surname></persName>
		</author>
		<idno type="DOI">10.2312/SGP/SGP07/109-116</idno>
	</analytic>
	<monogr>
		<title level="j">In Symp. on Geom. Proc</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Methods for visual understanding of hierarchical system structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sugiyama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tagawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Toda</surname></persName>
		</author>
		<idno type="DOI">10.1109/TSMC.1981.4308636</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Systems, Man, and Cybernetics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="109" to="125" />
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Handbook of graph drawing and visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<publisher>CRC press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Fisheye tree views and lenses for graph visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tominski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Abello</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">Van</forename><surname>Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Schumann</surname></persName>
		</author>
		<idno type="DOI">10.1109/IV.2006.54</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Information Visualization</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="17" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title/>
		<ptr target="www.touchgraph.com" />
	</analytic>
	<monogr>
		<title level="j">Touchgraph Navigator. TouchGraph, LLC</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Search, show context, expand on demand: supporting large graph exploration with degree-of-interest</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Van Ham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perer</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2009.108</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Visual analysis of large graphs: state-of-the-art and future research challenges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Von</forename><surname>Landesberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kuijper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schreck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kohlhammer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Fellner</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1467-8659.2011.01898.x</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics Forum</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1719" to="1749" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">A multilevel algorithm for force-directed graph-drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Walshaw</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-44541-217</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Algorithms and Applications</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="253" to="285" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Generating customized layouts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Miyamoto</surname></persName>
		</author>
		<idno>doi: 10. 1007/BFb0021835</idno>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Graph Drawing</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="504" to="515" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Intelligent graph layout using many users&apos; input</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Che</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="DOI">10.1109/TVCG.2012.236</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Vis. &amp; Comp. Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2699" to="2708" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
