<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization and Modeling of Geophysical Data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Celniker</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Schlumberger Laboratory for Computer Science</orgName>
								<address>
									<postBox>P.O. Box 200015</postBox>
									<postCode>78720-0015</postCode>
									<settlement>Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Indranil</forename><surname>Chakravarty</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Schlumberger Laboratory for Computer Science</orgName>
								<address>
									<postBox>P.O. Box 200015</postBox>
									<postCode>78720-0015</postCode>
									<settlement>Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Moorman</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Schlumberger Laboratory for Computer Science</orgName>
								<address>
									<postBox>P.O. Box 200015</postBox>
									<postCode>78720-0015</postCode>
									<settlement>Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Visualization and Modeling of Geophysical Data</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>We present the visualization and modeling techniques used in a case study to build feature-based computational models from geophysical data. Visualization was used to inspect the quality of the interpretation of the geophysical data. We describe the geophysical data graphical representation used to support rapid rendering and to enhance the perception of differences between the interpretation of the data and the data itself. In addition, we present the modeling techniques used to convert the geophysical data into a feature-based computational model suitable for use by a numerical simulation package.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>The purpose of this case study is to build feature-based sub-surface structure models of high quality from geophysical data. This happens in two steps. First, a seismic survey is interactively interpreted to generate a velocity model. A seismic survey is a scalar data cube which, unlike intensity data, measures discontinuities in the material properties of the field being studied. The velocity model is another scalar data cube which, like intensity data, labels each voxel in the field as belonging to one of a relatively small set of sub-surface structures. The seismic data describes the boundaries of the volumes modeled in the velocity model. The velocity model encapsulates the interpretation of the seismic data. In this case study we use the velocity model to generate a parameterized volumetric computation model. The quality of the computation model is limited by the accuracy of the interpretation encapsulated in the velocity model. The process of building models from geophysical data is complicated by the nature of geophysical data. Seismic data cubes are large. Currently they run up to 8 gigabytes and geophysicists have ambitions for much larger cubes. The nature of the seismic data is noisy and smoothly varying making it difficult to apply standard techniques for visual enhancement. Current practice is to interpret the seismic data by hand to build a velocity model. There are two objectives for this case study. First, to create a visualization tool to rapidly verify the quality of the velocity model. We do this by building an interactive visualization environment that allows a user to superimpose and compare the velocity model with the original seismic cube. Improved velocity model quality is essential for successful seismic data processing. Secondly, to create a mechanism to convert a velocity model into a computation model suitable for use by any of a large number of numerical simulation packages. Computation models are required to develop verifyable interpretations of the seismic data. Once a model has been derived from the empirical data, efficient computational models can be generated for simulations. The simulation results can be used to validate the quality of the feature-based models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">Visualization of Seismic Data and Velocity Models</head><p>The visualization environment in this case study was a network of 30 Advanced Visual System's (AVS) modules. About half of the modules were extended with specialized code to meet the specific needs of the geophysical data and the application. The network was run on an Silicon Graphics Reality Engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1I.a Seismic Data Visualization</head><p>We have found that seismic data must be manipulated interactively to enable a person to perceive the shapes of the features within the data. The perception of features in unlabeled static seismic images depends on the viewer's training. As a result, we created a visualization environment that supported rapid rendering.</p><p>We have also found that voxel rendering with transparency is not a good technique for rendering seismic data when looking at sub-surface structure shape. The process is slow and tends to obscure the shape of the structures. The shapes of sub-surface structures are highly irregular 3D shapes. We have found that these shapes are best perceived by looking at a sequence of 2D cross-sections. The 2D cross-sections were shown as slice planes positioned in 3 space to show 3D relationships in the data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. Data Feature Extraction</head><p>The position and orientation of the slice plane can be manipulated interactively to allow the user to create a dynamic effect to enhance the perception of the shape of the seismic data. The image presented on the slice plane is a grayscale plot positioned on the screen using texture mapping techniques. We found that sliding the slice plane rapidly up and down one of the principal axes was the preferred method for viewing the seismic data.</p><p>We also supported rendering the seismic data with a chair display, a simple extension to the slice plane display. A chair display shows a set of slice planes that enclose the seismic cube except for one corner where 3 additional orthogonal slice planes create the shape of the chair. Each slice plane shows a 2D image of the seismic data using texture mapping. The point location where the 3 slice planes intersect can be manipulated interactively to create the effect of rapidly panning through the data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1I.b Visualization to Enhance Seismic Data to Velocity Model Registration</head><p>Our AVS visualization network outputs 4 graphical windows. There are 3 2D windows which are used to show the current slice of the seismic model, the velocity model, and the velocity model superimposed with the seismic data. Seismic data is rendered using texture mapping onto a simple rectangular polygon with a grayscale color palette. The velocity model is rendered with a unique color for each sub-surface structure volume. The images were superimposed with transparency.</p><p>We found that showing the velocity model and the seismic model both individually and superimposed was important for verifying the quality of the model. It is very difficult to look at one colored seismic cross section and decide where the model should be updated. There is a tendency by the viewer to assume the coloring is correct which prejudices the interpretation of the data. Having the data presented both colored with the velocity data and in its original unlabeled grey scale helps to make the decision on how to update the velocity model. There is also one 3D geometry window where the slice and chair diagrams are displayed. In this window the velocity model is rendered as a chair diagram and as a set of contour surfaces. The contour surfaces are found by using the marching cubes algorithm . Manipulating the slice plane position while viewing the contour surfaces of the velocity model allows a viewer to perceive the shapes and the quality of the interpretation of the subsurface features being extracted from the data. Registering the contour surfaces of the velocity model with the slice plane of the seismic data was found to be the best method for seeing differences between the model and the data.</p><p>We have no automated routines for extracting the feature surfaces found within the seismic data cube. As an alternative we use marching cubes to extract the interpreted boundary surface shapes from the velocity model. The marching cubes output is a set of triangle and quadrilateral polygons created at the size scale of the voxels in the original model. These surfaces are used as input to the modeling scheme described below to create geometric models of the velocity model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Building Simulation Input Models from Data Features</head><p>The objective of this step in the case study is to build a geometric model of the data that is suitable for use as input to a ray tracing simulatior. In this study, the ray tracer simulates the transmission of acoustic energy through solid and liquid continuums using a ray approximation of the wave equation. To run, this simulator requires a piecewise linear approximation of the material property fields that determine acoustic transmission behavior. In addition, the simulator needs a geometric representation of any boundaries in the model where the material properties are discontinuous; so that it can apply Snell's law to compute ray bending and reflecting angles. The size scale of the model is determined by the wave length of the acoustic energy, which in our case is about 60 meters. Variations in the material property field which are smaller than about 240 meters in extent will not affect the ray path and can be ignored.</p><p>Our strategy for building a model from the data is a four step procedure. First, a set of iso-surfaces are extracted from the interpreted data using a marching cubes algorithm. These iso-surfaces are then converted to general mesh surfaces using a shrink wrap algorithm that we developed based on deformable models . The surface meshes are used to generate a volume filling tetrahedral mesh based on a Constrained Delaunay meshing algorithm . This volume filling mesh is then annotated to store material property fields. Material property values are stored at each tetrahedron vertex and trilinear interpolation is used to determine material values between the vertices. The tetrahedron mesh annotated with material properties is the input data to the ray tracer simulator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1V.a Iso-Surface to Surface Mesh, a Deformable Shrink Wrap Algorithm</head><p>The output iso-surface returned by marching cubes is composed of a set of triangles and quadrilaterals that each span one individual voxel of the input data cube. Our seismic data is collected on a regular 25-meter spacing, a size considerably finer than needed by the ray tracing algorithm. As a result, the marching cubes iso-surfaces contained on the order of 125,000 triangles. We built a shrink wrap algorithm that converted the shapes described by the iso-surfaces into surface meshes where the mesh size is set independently of the data size. Surfaces with 1,000 elements adequately represented the sub-surface reflectors for the ray tracer.</p><p>The shrink wrap algorithm is an application of deformable surfaces [Celniker9 11. A deformable surface model consists of the combination of a shape model and a deformation model. This application uses a surface consisting of a set of piecewise linear triangles knitted together in space. We call these shapes web surfaces. Web surfaces are described by the triangle vertex locations and the connectivity between the vertices to create the triangles.</p><p>Manipulating the thousands of degrees of freedom found in a web surface through direct interaction to modify surface shape is impractical. The deformable model is used to update the degrees of freedom of the surface shape indirectly in an intuitive and simple manner. The deformable model used in this application causes the surface to automatically deform to minimize its own surface area while responding to optional loads and constraints applied by the user.</p><p>Deformable models are used as the basis of a shrink wrap algorithm. A deformable sphere surface is placed around the output of the marching cubes algorithm and allowed to shrink over time. As the surface shrinks, the vertices of the web encounter the iso-surface. Whenever the path of a node crosses the iso-surface it is constrained to remain at that intersection location for the rest of the algorithm. Once the algorithm generates a convex hull approximation to the original data, a pressure load is applied to the surface to drive the remaining free nodes into the convex regions of the shape. The density of the mesh is determined by the number of triangles placed in the starting sphere and the spatial extent of the target geometry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1V.c Volume Meshing and Material Properties</head><p>The shrink wrap surface meshes were used as input to a tetrahedron-generating meshing algorithm developed for this project [Quigley9 11. The tetrahedrons are generated so that each triangle in the surface mesh becomes the face of two neighboring tetrahedrons. Additional nodes are added to the volumes between the surfaces so that each tetrahedron satisfies the Delaunay circumsphere requirement. Meshes which satisfy this property tend to yield tetrahedrons with nice aspect ratios avoiding sliver and zero volume elements.</p><p>Material properties were recorded in the tetrahedron mesh by storing material property values at each mesh vertex location. Material properties on a node were stored using a linked list so that a node on the boundary of a discontinuity could have a different material property value for each sub-volume using the node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1V.d Seismic Acquisition and Ray Tracing</head><p>A seismic acquisition experiment consists of creating an acoustic wave at a point location and measuring the echoes that bounce off of sub-surface structures. The acoustic wave is generated by a source which may be an air gun, a vibrating truck, or an explosive. The echoes are recorded by a set of receivers located on the surface. A good seismic experiment places the sources and the receivers in locations which maximize the amount of energy which arrives at the receivers and guarantees that echoes have been recorded which have illuminated the sub-surface structures of interest. The illumination of a sub-surface structure is used to get a measure of the quality of the shape prediction. Well illuminated sub-surface structures can be mapped with considerable accuracy.</p><p>Ray tracing is an inexpensive means to calculate the probable path of the acoustic wave. The wave trajectory is approximated by a ray which is assumed to be normal to the acoustic wave at a point and moves through the medium in such a way as to minimize its time of passage. By tracing out a set of rays starting at a common point but moving in slightly different directions the shape of an acoustic wave can be approximated. Ray tracing is used to predict sub-surface structure illumination.</p><p>In this case study we built an interactive tool for visualizing illumination properties of the model. The input to the ray tracer included the tetrahedron mesh with material properties, and a source location and direction. The ray tracer predicted the path of a cone of rays emanating from the source location pointed in the source direction. The position and the direction of the source can be manipulated by the viewer to create a movable flashlight to illuminate the model. By observing which rays returned to the surface the user could get an interactive feel for the model's illumination properties.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. A Description of the Images</head><p>Following this article are 6 images showing the sequence of moving data from a visual representation, to a geometric model, and finally to a simulation environment.</p><p>Image 1 shows an image from the geometry window of our AVS network. Two contour shapes of the velocity model are shown with a slice plane of the seismic data. The viewer can see how well the shapes in the velocity model reflect the seismic data by looking at how the contour shapes intersect the data on the slice plane. Panning the slice plane through the cube gives the viewer an excellent feel for the 3D shapes and relative positions of the features found in the data cube. In this image the contour surfaces mark the boundaries of two disjoint salt bodies found in the data set.</p><p>Image 2 shows how the view orientation, color palette, and perspective can be manipulated to enhance the perception of the seismic data. The shape and data collected from 4 oil wells are also shown superimposed on the seismic data.</p><p>Image 3 shows the iso-surface of the disjoint salt body as a cloud of points encased in a deformable sphere. The deformable sphere consists of 1600 triangles. This is the starting condition for the shrink wrap algorithm.</p><p>Image 4 shows the surface mesh generated at the completion of the shrink wrap process. The shrink wrap algorithm converged in about 1 second of CPU time.</p><p>Image 5 shows the tetrahedral mesh generated from the surface meshes. The input of the mesher consisted of only two surfaces, one disjoint salt body shape enclosed by a containing cube.</p><p>Image 6 shows an output frame of the ray tracer. In this image the salt body is shown being illuminated by a cone of rays. Note how the irregular shape of the salt body scatters the rays.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. Conclusion</head><p>This case study demonstrates a sequence to reduce geophysical data to feature-based models suitable for use by numerical simulators. The importance of this is that the validity of the data interpretation, encapsulated in the geometric model, can be verified with simulation. Improved quality of seismic interpretation can greatly improve the efficiency, cleanliness, and the safety of the oil business.</p><p>The perception of irregular 3D space objects requires an interactive manipulation of the viewing scene. This presents a problem for seismic data due to the large size of its data sets, up to 8 gigabytes. We solve this problem by allowing the user to peruse the data using an interactive slice plane positioned in 3 space. The interpretation of the seismic data is a velocity model. Registering the velocity model with the original seismic data is an effective means of controlling the quality of the velocity model. Superimposing the seismic image with the velocity image is helpful but we found that superimposing the contour surfaces of the velocity field with an interactively positioned slice plane of the seismic data was much more powerful for finding flaws in the model with respect to the data.</p><p>The velocity model is a partitioning of space that models the volumes created by the boundaries Seen in the seismic data. This model is built by hand and is created at the same scale as the seismic data. Deformable surface shrink wrapping can be used on the velocity model to create parametric surface models at any size scale. The triangulated surfaces used in this case study are suitable for use as input to a tetrahedron building 3 space tessellation program. The final output model is suitable for supporting ray tracing, finite element, and finite difference numerical simulators.</p></div>		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The marching cube's boundary for two disjoint salt bodies embedded in a seismic data cube.</p><p>Mixed 3D seismic and well bore data using texture mapping, perspective. and ribbon diagrams.</p><p>The disjoint salt body enclosed in a deformable sphere before shrink wrapping.</p><p>Surface mesh model of the disjoint salt body after shrink wrapping.</p><p>Volume tetrahedral mesh model of the disjoint salt body after tesselation.</p><p>An output frame of the interactive ray tracer illuminating the tesselated salt body model.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Interpretation of Three-Dimensional Seismic Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alistair</forename><forename type="middle">R</forename><surname>Brown</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>American Association of Petroleum Geologists</publisher>
			<pubPlace>Tulsa, Oklahoma 74101, U.S.A</pubPlace>
		</imprint>
	</monogr>
	<note>third edition</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Deformable Curve and Surface Finite Elements for Free-Form Shape Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">E</forename><surname>Glassner ; Lorenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harvey</forename><forename type="middle">E</forename><surname>Cline</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Celniker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Gossard</surname></persName>
		</author>
		<idno>ISBN 0-12-286 165-5 [Lorenson-87</idno>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH conference proceedings</title>
		<meeting><address><addrLine>Anaheim, California</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1931-07-27" />
		</imprint>
	</monogr>
	<note>Marching Cubes: A High Resolution 3D surface Construction Algorithm</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Geometry Based Automatic Meshing for Analysis and Simulation Using Geometric-Delaunay Triangulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">V</forename><surname>Quigley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of StruCoMe 91</title>
		<meeting>StruCoMe 91</meeting>
		<imprint>
			<publisher>Paris -Palais des Congres</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="419" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m">AVS is a trademark of Advanced Visual Systems Inc</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Silicon Graphics and Reality Engine are registered trademarks of Silicon Graphics Inc. (See color plates</title>
		<imprint>
			<biblScope unit="page">36</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Modeling</forename><surname>Visualization</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Data</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Celniker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chakravarty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Moorman</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="362" to="365" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
