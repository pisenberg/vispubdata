<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Interactive Steering, Visualization and Animation of Unsteady Finite Element Simulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">David</forename><surname>Kerlick</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Boeing Computer Services Research and Technology</orgName>
								<address>
									<settlement>Bellevue</settlement>
									<region>WA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elizabeth</forename><surname>Kirby</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Boeing Computer Services Research and Technology</orgName>
								<address>
									<settlement>Bellevue</settlement>
									<region>WA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Interactive Steering, Visualization and Animation of Unsteady Finite Element Simulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Progress towards interactive steering of the timeaccurate, unsteady finite-element simulation program DYNA3D is reported. Rudimentary steering has been demonstrated in a distributed computational environment encompassing a supercomputer, multiple graphics workstations, and a single frame animation recorder. The coroutine facility of AVS (Application Visualization System from AVS Inc.) and software produced in-house has been coordinated to prove the concept. This work also applies to other large batch-oriented FORTRAN simulations (&quot;dusry decks&quot;) presently in production use.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Finite element simulation</head><p>The pre-eminent engineering use of supercomputers is the simulation of physical phenomena including fields, fluids, and solids. Finite element simulation of solids, and structures made from them, is an alternative to expensive or destructive experimental tests. The simplest simulations are static, time independent calculations such as an aircraft cruise design. Periodic unsteady analyses, for example wing flutter, are more complicated and demanding. The most demanding simulations are those of transient phenomena such as gusts or impacts. In such solutions, every timestep must be fully converged, and this places limits on the allowable lapse of time between successive steps. DYNA3D, from Lawrence Livermore Laboratories [l] is one such transient finite element code which has been used in failure analysis, crashworthiness testing, and simulating manufacturing processes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Simulation and visualization</head><p>Engineering simulation and visualization have coevolved with each other. Until the late 19703, these simulations were done as large batch processes whose results were written to tape for post-process analysis and visualization using terminals or pen plotters. Later, the process of submitting jobs and retrieving and viewing plot files, was made more interactive by use of command-line interfaces from terminals. Viewing of 3D geometry in plot files became more interactive with the advent of hardware renderers and geometry engines in the 1980's.</p><p>Further integration of simulation and visualization had been held back for several reasons. Often the simulations took a very long time to run, so interactive operation was precluded. Simulations and visualization programs were often written in different computing languages, ran on different hardware, and network bandwidth was too narrow for interactive operation. Nevertheless, technology has now developed to the point where it makes sense to think of interactively steering a simulation over a network of computers. Sman <ref type="bibr" target="#b1">[2]</ref> mentions several example of collaborative experiments over a network and Plaskacz [31 has demonstrated interactive operation similar to ours using custom components. In this paper, we attempt to control a simulation using off-the-shelf components. This paper reports a partial achievement of that goal, as well as some obstacles that we encountered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Simulation and animation</head><p>Transient analysis lends itself especially well to visualization animation. Since the analysis itself is a sequence of timesteps, a frame-by frame recording of the simulation has a natural interpretation. One can run through the sequence of time steps, watching how stress waves propagate through the material or how regions of plastic deformation develop. These visualization techniques are also applicable to other sorts of numerical processes (for example, the numerical convergence of steady solutions), but the quantities to be visualized in that case are at a higher level of abstraction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Visualization environments</head><p>Until quite recently, software for visualizing scientific data was written in-house to meet specific needs. Visual-ization software was built on graphics subroutine libraries, and required specialized graphics knowledge. The last few years have seen the appearance of general purpose visualization software which can meet the needs of scientists and engineers while avoiding most low-level graphics programming. Such systems usually comprise a visual programming language, a dataflow execution model, and precompiled modules which can be arranged into networks at runtime. One such system, AVS <ref type="bibr" target="#b3">[4]</ref> (from Advanced Visual Systems, Inc.) also allows modules to be distributed over a network of heterogeneous computers, and allows modules to have their own control thread.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">BCS Scientific Visualization Project</head><p>The Scientific Visualization Project is part of the High-Speed Computing Program at Boeing Computer Services.</p><p>It is set up as a testbed to investigate possible future computing environments for the Boeing operating divisions.</p><p>This project is based in the BCS Advanced Systems Laboratory, which includes diverse computing engines which emphasize parallel computing, a CRAY YMP-EL supercomputer, diverse graphics workstations, a video production system using a single-frame videotape recorder, and high-speed networks (FDDI, UltraNet) connecting them.</p><p>In this environment, we have attempted to use the distributed computing and co-routine capabilities of AVS to unify simulation, visualization, and animation production on diverse machines under a single visual programming interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Software components</head><p>grations. Since timesteps are often small and numerous in explicit methods, a fast method is used for element integrations.</p><p>DYNA3D consists of some 70,000 lines of FORTRAN, and was designed for batch processing on vector supercomputers. Output is controlled by values read from the input file. There are two principal output files: state data, and time history data. In the present work, we are interested in the state data, which is used to generate plot files, and which can be stored to allow restart of the code. A rudimentary command line interface has been added to DYNA3D, which permits stopping and resuming the code via system interrupts. In the present work, this interface is replaced by the AVS graphical user interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">DYNA-READER</head><p>We obtained a preliminary version of a DYNA-R-EADER module which computes derived functions (like stress and strain) from DYNA3D output (displacements and velocities at node points). We added several functions of interest to structural engineers. DYNA-READER produces output in the AVS unstructured cell data (finite element) format, which can then be processed and visualized by standard AVS modules such as isosurface generators, planar sections, legends, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Animation software</head><p>Additional software was written in-house to control a Lyon-Lamb animation controller, AVS Animator was used to produce some of the video sequences in which camera positions were calculated by interpolating key frames.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">AVS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3</head><p>Controlling DYNA3D from AVS AVS was the first general purpose visualization environment composed of precompiled modules which execute according to a dataflow paradigm. Modules are stateless, and are turned on whenever their inputs are changed. Since AVS is a distributed system, modules may reside on any computer on a network which is licensed to run AVS, for example a remote supercomputer. A "flow executive" determines the firing order of modules, and allows parallel execution of modules when feasible. Additionally, AVS also allows "co-routines" which have their own thread of control and communicate with the flow executive on their own. This allows us to encapsulate a simulation code and run it as part of an AVS network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">DYNA3D</head><p>DYNA3D uses finite elements to solve structural dynamics problems using an explicit, time-accurate, central differencing, finite difference method to do time inte-This work proceeded in several stages. In the first stage, a post-process animation system under AVS using extensions to the DYNA-READER was set up. Then this system was distributed over multiple computers. In the second stage, DYNA3D was implemented as an AVS co-routine called DYNA-MOD, with program control similar to the command-line version of DYNA3D. In the third stage, DYNA-MOD and DYNA-READER were c o~e~t e d over an AVS "wire" using userdefined data types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Interactive Post-Process Animation</head><p>This step was accomplished by extending the DYNA-R-EADER provided to us by AVS (to provide for more derived functions), writing an AVS module to run the Min-iVAS animation controller, and (optionally) using the AVS Animator module to control camera motion and parameter values via key frames. At this stage, DYNA-READER read in files that had been written by a batch run of DYNA3D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">DYNA3D</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Co-routine operation: interactive control of</head><p>We have incorporated DYNA3D into the AVS environment by encapsulating it as an AVS co-routine, DYNA--MOD. This allows DYNA3D to be executed as part of an AVS network while maintaining its own control thread. At present, this module reproduces the capability of DYNA3D to halt execution, modify parameters and then resume execution, and is a step towards interactive control and steering of an analysis code from a visualization environment. It was originally intended to be able to restart from the initial conditions, but the way DYNA3D is executed on the CRAY prevented this.</p><p>Analogous procedures may be applied to many other existing analysis codes, thus opening the possibility of interactive control of many applications from within a visualization environment like AVS. We have also created links between the DYNA-MOD coroutine and the DYNA-READER so AVS can display the results that DYNA3D produces as they are calculated. This provides an integrated visual environment for running the simulation and analyzing the results.</p><p>To make DYNA-MOD, we wrote a C language main program which sets up the AVS parameters and then calls DYNA3D as a FOKTRAN subroutine. This reduces the portability of the code, but the programming is easier. When we began this work, AVS contained an error in the FOR-TRAN implementation of the functions we needed.</p><p>DYNA-MOD sets up file browsers for input and output files, and parameters line "Run" and "Pause" which monitor and control the execution, similar to the switches provided in the command-line interface to DYNA3D. as well as digital readouts of the iteration count and simulation time.The control parameters are checked during every iteration of the main loop of DYNA-MOD using the AVS routines AVScorout-wait to suspend execution and AVScorout-input to get the new values of the parameters. DYNA-MOD then continues executing with the new parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Returning control to AVS</head><p>In order to run DYNA-MOD more than once, we need to return to the main program after DYNA3D finishes its calculations. We have discovered two problems with this. The first is that since DYNA3D was onginally designed to run as a stand-alone routine, its thread of control ends at a subroutine (called adios) which is many layers deep in subroutine calls. We solved this problem by using the set jmp and long jmp functions of C, which have the effect of non-local go-to's and allow us to return directly to the main routine. The second problem is that the version of DYNA3D which we are using on the CRAY uses overlays to conserve memory. Thus, the initialization section of code is replaced during execution and isn't available thereafter. If we wish to restart the analysis from the beginning, it is necessary to re-instantiate DYNA-MOD fiom the module palette.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Stream YO.</head><p>The next step in making the system interactive is to replace the file I/O from DYNA-MOD to DYNA-READER by creating a user-defined data type that can be transmitted between AVS module ports. For compatibility, the filebased method is still supported as an option. <ref type="figure" target="#fig_0">Figure 1</ref> shows an AVS network which includes these modules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I</head><p>. . , DYNA3D writes its output data file as a binary stream of numbers of the size of an integer (which is the same as the size of a real number on the CRAY). Our user data type is structure which contains an array of integers and a character string to tell DYNA-READER what kind of data it is receiving.</p><p>When DYNA-READER uses file I/O, it opens all the data files and sets up a file table with pointers to the location of each timestep. When it receives data via the stream, it bypasses this step and instead uses the offset from the beginning of each timestep to point into the user data type. This imposes a limitation: there is no way to back up DYNA-READER to look at the output of a previous timestep, though it is possible to store previously rendered frames if sufficient disk storage is at hand. The use of AVScorout-exec ensures that all rendering is done to a ftame before DYNA-MOD resumes execution.</p><p>Since there is nothing in the output file to show which numbers are integers and which are reds, we can't transfer the binary file from one machine to another machine with a different representation of numbers (using, say, the xdr protocol). Thus we presently need to have DYNA-R-EADER on the same machine (though any other modules in a network and AVS itself can be on other machines).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Demonstration: Shot-peening simulation</head><p>The application shown in the color plates and accompanying video is the simulation of a manufacturing process, the shot-peening of aircraft skins. In this process, highvelocity steel shot impacts sheet aluminum, thereby shaping and compressing it. <ref type="figure" target="#fig_1">Figures 2 and 3</ref> give two views of a block of aluminum being peened by an array of shot which has been given an initial pattem and velocity disuibution. <ref type="figure" target="#fig_1">Figure 2</ref> is a snapshot of a dynamic process in which the shot successively impacts the aluminum plate and then rebounds. The permanent deformation, or plastic strain is shown as a colored contour plot. <ref type="figure" target="#fig_2">Figure 3</ref> shows an isosurface of plastic strain, with the block and shot rendered transparent. This is one frame of an animation sequence in which the iso-value of plastic strain is varied. We have also made an animation of stress waves during peening and can view and animate any other derived property supported by DYNA-READER. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4</head><p>Issues and future work</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Regulating output</head><p>A simple change to the existing program will allow two channels of graphical output, so that one channel produces an animation according to a predetermined script which is destined for the animation controller, while another output will allow one to take a detailed look at the current timestep.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Network performance</head><p>The present system has the capability of producing a very large number of frames per second, and therefore will be used in quantifying the performance of local and longdistance networks between AVS modules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Execution model</head><p>Environments like AVS currently support only a linear dataflow model with no loops, iteration, or recursion. We are investigating other models which allow these paradigms, possibly in conjunction with an object-oriented database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Frontiers</head><p>Recent advances in the set of technologies comprising Virtual Reality will allow users to interact with simulation through direct three-dimensional user interfaces, touch, and sound. In the distant future, one may hope for an "engineer's amanuensis" <ref type="bibr" target="#b4">[5]</ref> which will be able to start, modify, and steer a simulation in the course of a design session.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>AVS network diagram.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Contour plot of plastic strain.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>lsosurface of plastic strain. (See color plates, p. CP-38.) Towards Interactive Steering, Visualization, and Animation of Unsteady Finite Element Simulations, G.D. Kerlick and E. Kirby, pp. 374-377.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>Contours of plastic strain lsosurfaces of plastic strain.CP-38</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">DYNA3D: A Nonlinear, ExpliciL Three-Dimensional Finite Element Code for Solid and Structural Mechanics User Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Whirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hallquist</surname></persName>
		</author>
		<idno>UCRL-MA-107254</idno>
		<imprint>
			<date type="published" when="1991-05" />
		</imprint>
		<respStmt>
			<orgName>University of California Lawrence Livermore National Laboratory</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Metacomputing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Smarr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Catlett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Argonne National Laboratory, demonstration at &quot;Showcase</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Plaskacz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH</title>
		<meeting><address><addrLine>Chicago, IL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<idno>AVS4.0 and AVS Animator</idno>
		<title level="m">Users Manuals, Advanced Visual Systems. Inc</title>
		<meeting><address><addrLine>Waltham MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Intelligence in Scientific Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Abelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="1989-05" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
