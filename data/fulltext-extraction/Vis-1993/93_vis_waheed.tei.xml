<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Performance Visualization of Parallel Programs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abdul</forename><surname>Waheed</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">Michigan State University</orgName>
								<address>
									<postCode>48824</postCode>
									<settlement>East Lansing</settlement>
									<region>MI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diane</forename><forename type="middle">T</forename><surname>Rovert</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">Michigan State University</orgName>
								<address>
									<postCode>48824</postCode>
									<settlement>East Lansing</settlement>
									<region>MI</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Performance Visualization of Parallel Programs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>The user of U purullel computer system would like to know the performance of U program in terms of how optimully it uses the system resources. This task is increusingly performed by progrum performance visuulizution. The limitations of conventionul performunce data unulysis techniques necessitate better visual analysis methods that are scalable with the problem und system sizes and extensible. They should represent some physical and logical structure of the purullel system and program. The analysis techniques presented here have been motivated by the use of signal und (two-and three-dimensional) image processing techniques being applied in some ureus of scientijic visualization. Results of applying selected techniques are shown. These techniques and tools have udvantages and disudvuntages when applied in this urea.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The history of science shows us that a given problem can The operation of a parallel computer system consisting of a number of processors working on some problem concurrently can be complex and difficult to comprehend by its users. A user requires assistance to understand and appreciate the concurrent interactions among the processors. The user of a parallel computer system would like to know the performance of a program in terms of how optimally it uses the system resources. This task is increasingly performed by program performance visualization. The task of program performance visualization is divided into two steps. The first step is accomplished by the instrumentution of the program that generates a truce of execution of the program on the parallel system. The second part is concerned with visualizution and the use of this trace data to depict the behavior of the program during execution <ref type="bibr">[ 18,191.</ref> The idea can be elaborated on by considering a simple parallel computer system consisting of four processors, connected in a hypercube topology as shown in the example of <ref type="figure" target="#fig_1">Figure 1</ref>. Four of many possible displays are shown. The displays provide information about the utilization of the system, the processor interactions (in time and space), etc.</p><formula xml:id="formula_0">fruirfully</formula><p>The four processors can work on the problem locally as well as collectively, communicating with each other to share information as required by the program. This communication is done by sending and receiving messages. Such a system is called a multicomputer. Events occurring during execution are captured either through specialized instrumentation hardware attached to each processor or through special instrumentation code within the program (or the operating system) that logs the event data. Several event records are shown textually in <ref type="figure" target="#fig_1">Figure  1</ref>. As the size of the problem or the parallel system grows, the amount of event data becomes huge and difficult to interpret textually. This event trace data is 3 multidimensional data set that is subsequently used (usually off-line) with some visualization tool to drive certain displays that have been traditionally used to understand the behavior of the program. The typical displays include space-time diagrams, time-series displays, Gantt charts, Kiviat diagrams, bar graphs, scatter-plots, matrix displays, etc. and are found in tools such as <ref type="bibr">Seeplex,</ref><ref type="bibr">Paragraph,</ref><ref type="bibr">and Pablo [4,</ref><ref type="bibr">6,</ref><ref type="bibr">11]</ref>. The task of program performance analysis, however, is not complete by merely displaying (or animating) the trace data through these displays. The user must navigate through multiple displays and the pattems shown by these displays to understand the overall behavior of the program and the global system states during its execution. The types of displays mentioned above do not necessarily fumish this type of information automatically. Moreover, trace data requires further analysis to provide some information about the logical structure and behavior of the program. When the system size becomes large, conventional displays often do not adequately represent any such information. The methodology presented in this case study is based on applying selected signal and image processing techniques to the performance data to extract information that might help the user optimize the program to efficiently use the system resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Performance Analysis Methods</head><p>The limitaions of conventional performance data analysis techniques necessitate better visual analysis methods that are scalable with the problem and system sizes and extensible. They should represent some physical and logical structure of the parallel system and program. The analysis techniques presented here have been motivated by the use of signal and (twoand threedimensional) image processing techniques being applied in some areas of scientific visualization. Scientific and perfonnance visualization share the objectives of representing large multidimensional data sets and analyzing the data to assist visual perception by the human user. Performance analysis is also responsible for showing some link between the visual representations arid the logical structure of the progr'am, in addition to showing the physiGz1 interactions among processors. Application of image and signal processing techniques in perfonnance analysis is accomplished by transforming the performance data to images and signals (to be called perjiormunce imuges <ref type="bibr">'and signuls)</ref> to analyze it in spatial aid temporal domains <ref type="bibr">[ 12,</ref><ref type="bibr">15,</ref><ref type="bibr">16,</ref><ref type="bibr">17]</ref>.</p><p>The spatial performance analysis domain can be characterized by performance images. A performance image derives from a matrix whose dimensions are equal to the number of processors in the parallel system and whose elements are indices to a color table. These indices are determined by mapping the value of a performance variable (metric) of choice at each processor (at a The performance metric for the results shown in the next section is the cumulative utilization of each processor during program execution. This is the total percent of time that a processor is busy, or performing useful, loail computation, during program execution (versus communicating or waiting to communicate with other processors). We show that performance images help represent the global state of the system. hnage processing functions [5] were applied to these images to detect changes, calculate statistics, and determine the distribution of the performance metric (processor utilization) among the processors and with time.</p><p>The temporal performance analysis domain is characterized by performance signals. A performance signal is a discrete-time (random) signal which is obtained from the "raw" trace data by extracting and then averaging the state of the performance metric over all the processors in the system at each instant of time, from the start to the end of execution. The performance metric depicted in the next section is instantaneous utilization of processors. This is the percent of processors currently busy at some time. The performance signals represent trends of system state. Selected signal processing techniques <ref type="bibr">[IO]</ref> were used to filter out the undesired "noise" from these signals to identify various phases [3] of execution of the program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3</head><p>The analysis methods named in Section 2 were applied to analyze the performance of parallel programs which implement the solution of a system of linear equations on two different parallel machines: the MasPar MP-1 and the nCUBE-2. The MasPar MP-I [7] is a data-parallel</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results Using AVS and Matlab</head><p>computer with a toroidal mesh architecture (SIMD model). The nCUBE-2 [9] is a multicomputer with a hypercube architecture (MIMD or SPMD model). In this case study, we depict the operation of mutrix solver algorithms, which perform Gaussian elimination and buck-substitution methods to solve a system of linear equations. The data decomposition method as well as other algorithmic implementation details are not significant here. The application of the spatial and temporal analysis techniques are highlighted in the following two sections, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Cluster of PES with less than 50% active time</head><p>Cluster of PES with more than 50% active time</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mean utilization</head><p>=I 42/255 = 55.69%</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Spatial Analysis</head><p>Spatial analysis techniques were applied on "snapshots" obtained from the execution of a matrix solver on the   i s analytically, using image processing techniques such i s thresholding and change detection (via image subtraction j. Several of these techniques are depicted. iu <ref type="figure" target="#fig_3">Figures 2 a i d 3</ref> and are described below. Color versions of the images in these figures appear in the special section at the end of this proceedings (aid are referred to herein as <ref type="figure">Figures CI-C6</ref>). The images were displayed aid analyzed using AVS [ 1,2].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Histogram of</head><formula xml:id="formula_1">(i+l -i) Snapshot i+l Change in PE Utilization Color</formula><p>These results are intended to demonstrate the utility of performance itnages for representing the macroscopic state, where seeing the whole system offers insights and information not otherwise available. Then, using the appropriate unage processing techniques, we can analyze the system. In this context, it still is possible to rake the approach of clustering processors to effectively reduce what's befng monitored. Also, it is likely that ai image is at the "top" of a hierarchical "top-down" approach to analysis, whereby parts of the system are selected for more detailed representation and analysis by conventional methods.</p><p>The MasPx Programming Environment (MPPE) provided by the vendor supports profiling via statistical sampling, but for this case study, we have used custom software components for profiling the events of interest.</p><p>The software cousists of a library of routines for data logging. These profiling routines are called frotn the program at points where events occur to possibly change the stite of PES. The purpose of this code is to trace the active set of PES and accumulate the tot21 busy tune for each PE. These profiling facilities were used to insuument the code, resulting in a series of "snapshot" skitus files which contiin cu~nulative utilization d&amp;i for all PES at the time of the snapshot. A snapshot of 16K PES is mapped to a 128 X 128 image matrix. The images are rendered from the image matrix, using a color index scale from 0 (0% utilization) to 255 (100%) utilization). For the performance images shown here, PE 0 corresponds to the upper left cell of the images, aid PES are arranged in rowwise order. So an itnage represents the PE grid, and it can be related to the data decomposition used by the program. The images are rendered on-screen with each of the 16K PES occupying one pixel.</p><p>An AVS image derived from a snapshot taken during the Gaussian elimination algorithm is shown in <ref type="figure" target="#fig_3">Figure 2</ref> (see also <ref type="figure">Figure Cl</ref>). The sh'q contrast in utilization between upper and lower triangles of the PE grid is due to the behavior of a symmetric mamx solution method. Image statistics also are shown. The contrast in utilization that is visible in the image is clearly apparent in the histogram. The histogram shows two clusters of pixels (i.e., PES) in the image. The ranges correspond to utilizations less than 50% and greater than 50%. The mean color index translates to a mean utilization of approximately 56%. The [napping rules ensure that we can transfonn color index vdues back to the perfonnance metric values which they represent (within the limits of precision of the color table <ref type="bibr">(See color plates,</ref><ref type="bibr">p,</ref> due to binning). <ref type="figure" target="#fig_3">Figure 2</ref> also shows a series of performance images taken over time (see also <ref type="figure" target="#fig_3">Figure C2</ref>). The visual detection of changes over time can be difficult if the incremental changes are small or obscured by other effects. Change detection via image subtraction techniques is applied to successive performance images to enhance differences and similarities and to highlight the magnitude, direction, and distribution of change. <ref type="figure" target="#fig_4">Figure 3</ref> shows the result of subtracting the images from two early snapshots (i and i + l , where i = 2 in the figure) to detect the change in utilization from snapshot i to snapshot i+l. <ref type="figure" target="#fig_4">Figures C 3 4</ref> 6 depict, respectively, image i, image i+I, the subtracted image, and the color table, corresponding to those in <ref type="figure" target="#fig_4">Figure 3</ref>. The image statistics box gives the range of color indices for the subtracted image. These indices are then mapped to the full color range in AVS so that (typically) the lower half of indices represents negative change and the upper half of indices, positive change. From the histogram for the subtracted image, you can observe the statistical distribution of PES incurring decreases and increases in utilization. By inspecting the color image in conjunction with the color table, you can further observe the spatial distribution of changes in utilization.</p><p>To clearly identify where the positive and non-positive (i.e., zero or negative) changes in utilization occur, we can apply a thresholding image enhancement technique to transform the subtracted image into a binary image, where positive indices are mapped to 1 and non-positive indices, to 0. Another form of thresholding transforms an image by mapping indices within the threshold range to 0 and leaving other indices unchanged, essentially masking indices within the threshold range and enabling others to be displayed. For example, when a threshold function is applied to the image of <ref type="figure" target="#fig_3">Figure 2</ref> with a threshold range corresponding to utilizations greater than 50% the lower triangle of the PE grid is masked. While such an operation is trivial in this case, because the distinct division between two utilization levels is already clear from the original image, it will be most useful when there is no such clear pattern in the image. Then, by trying different threshold settings, the user can see whether there is any pattern of division of utilization (or any other performance metric) that was hidden in the image.</p><p>The analysis of performance images of massively parallel systems using image processing techniques is an effective means to glean macroscopic information that may not be visually perceived by the user. A number of techniques are available to support the exploration process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Temporal Analysis</head><p>The temporal analysis techniques were applied on the trace data obtained from executing a similar matnx solver on the nCUBE-2 parallel system. Results shown here are for 16 processors. Note that this system is scalable to thousands of processors, although the execution tracing facilities currently in place (we used the Portable Instrumented Communication Library, PICL, which Paragraph supports) are not, hence the modest number of processors. Time-series performance data are treated as a discrete-time random signal so that digital signal processing <ref type="formula">(</ref> smoothing, the signal using a digital filter removes "noise" that often hides the global pattems of temporal behavior. For example, a Finite Impulse Response (FIR) type of moving averages filter removes the irregular pattems and retains only the dominant pattems. Consider the case of the Gaussian elimination and backsubstitution phases of the program, as shown in <ref type="figure" target="#fig_5">Figure 4</ref>.</p><p>The set of graphs on the left shows signals from the Gaussian elimination phase, and on the right, the backsubstitution phase. The performance signal shown here represents the instantaneous utilization of the system over time, i.e., the percent of processors busy at instances of time throughout program execution. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Discussion</head><p>General purpose visualization tools such as AVS and</p><p>Matlab were used to compile the results shown here. It is important to note that conventional performance visualization tools may include displays akin to images and signals. images or signal?. The advantages of using these tools include: scalability of analysis and display regardless of the amount of data; extensibility of analysis in terms of having a common data structure and a set of well-known and rigorous methods; data importing and exporting capabilities to share the data with other tools; and extensive image and signal processing capabilities.</p><p>Despite the advantages, certain aspects of these tools are disadvantageous for program performance visualization. These aspects include:</p><p>fixed data description format that differs from the record structure of raw event data;</p><p>specialized programming conventions that make it difficult to write customized code for user-specific functions; and limited options for rapidly developing general graphical displays (versus images or signals). This latter limitation reduces the capability of the tools to directly display the logical behavior of the program.</p><p>The results presented here are concerned with the application of ;arious methods from signal and image processing to program performance visualization. These methods are already in use in various areas of scientific visualization but are new to this area. The potential of the techniques has been shown, and we continue to investigate the capabilities and limitations of applying them to performance visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>To effectively use these methods and tools for program performance analysis, a number of unresolved issues must be addressed. Most notable of these are the following: Development of techniques into a methodology for evaluating, optimizing, and predicting performance, Rendering paradigms to display logical (versus physical) structurekhavior, Macro-micro analysis methodologies, and Integration of the methods in a performance analysis environment.</p><p>Effectively applying image processing to performance data relies on rendering the physical structure of the machine or selected aspects of the logical structure of the system (program and machine). Unless this logical structure is displayed so that there is a correlation between performance data and the programmer's abstractions, it is difficult to associate patterns in performance images with program operation. Logical behavior also must be identified via performance signals. Moreover, we need to precisely define a synergistic relationship between macroscopic and microscopic (detailed) performance views. The utility of performance images and signals depends on developing a strategy to see the "whole" and then selectively probe to see the ''parts" (that is, to see the "continuous" behavior of the system and then the "discrete" behavior of particular processors). Finally, performance image and signal analysis is just one part of a performance analysis environment. It is to be used hierarchically with other more conventional techniques, contributing a macroscopic display of system state and supporting powerful and systematic analysis methods.    </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>be exumined by d@ewnt disciplines, purtly because when it is viewed f " new perspectives, implicutionr of ultemutive ussumptions U N explored by resrurchrrs with dipewnt buckgrounds or interests, and partly because new techniques developed elsewhew uw imported to explow ureas left untouched by the discipline in which the problem originated. (201</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>An example of program performance visualization using a conventional tool (Paragraph).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>s t a t s c l o c k 0 4802 n o d e I i d l e 0 1 5 6 8 c m s t a t s c l o c k 0 4802 node 1 r e c u -b l o c k i n g c l o c k 0 4810 node 2 c m p s t a t s c l o c k 0 4810 node 2 i d l e 0 1701 c m s t a t s c l o c k 0 4810 n o d e 2 s e n d c l o c k 0 4837 node 0 to 1 type 19 l t h 4 c a m p s t a t s c l o c k 0 4837 n o d e 0 i d l e 0 1 5 0 8 particular instant of time during the execution of the program) to the available range in a color table [ 161.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>MasPar parallel system consisting of 16,384 processors (PES) [ 151. Conventional performance visualization methods (with the exception of statistical displays) typically are not scalable enough to represent a systemwith such massive pardelism, and if they can, they lack any analysis capability (see the Discussion section). By mapping the snapshots to performance images, we were able to detect spatial patterns of utilization visually as well Cumulative PE utilization at a point in time and a series of images (1-12) over time.(See color plates, p. </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Change detection between successive performance images via image subtraction (k2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>DSP) techniques become applicable to analyze the data. DSP techniques have advantages over conventional statistical analysis methods. Filtering, or : Temporal analysis of Gaussian elimination and back-substitution phases via filtering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5</head><label>5</label><figDesc>shows image-like views from Paragraph (of the nCUBE) and from MPPE (for the MasPar) (PRISM, for the Connection Machine, as well as other tools, also include similar views). Figure 5 also shows a signal-like view from Paragraph (compare with Figure 4). However, these tools do not exploit the analysis capability of the representation. That's the strength of tools such as AVS and Matlab. The general nature of these tools makes it very convenient to try various signal and image processing functions on the data, after transforming the performance data to either</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>........................................................................................................................................... . f BWY . . : . . . ... . . .. . .. . . . . . . . .. . . . . . . . ... ... . . . . . . . . . . . . . . . ..    </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 :</head><label>5</label><figDesc>Image-like and signal-like views from conventional performance visualization tools. Peiforiizaiice Visualizatioii of Parullel Progruim, A. Waheed and D.T. Rover, pp. 174-181.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure</head><label></label><figDesc>Cl Performance image of cumulative PE #.Jt I I I Zat 1 0 K Figure C3: Performance image i.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure</head><label></label><figDesc>C5 Performance image of (\+ I ) i via image suDtracTior: CP-17Figure C2 Series of performance images over timeFigure C6. Color table used in AVS images</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table Image</head><label>Image</label><figDesc></figDesc><table /><note>of (i+l -i)</note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Release 3.0, Stardent Computer Inc</title>
	</analytic>
	<monogr>
		<title level="j">AVS Module Reference</title>
		<imprint>
			<date type="published" when="1991-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Avs User's Guide</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>Stardent Computer Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">M</forename><surname>Carlson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">W</forename><surname>Dowdy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Projection, Pursuit, and the Triplex Tool Set for the NCUBE Multiprocessor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Worley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alva</forename><surname>Couch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">W</forename><surname>Krumme</surname></persName>
		</author>
		<idno>ORNWTM-11900</idno>
	</analytic>
	<monogr>
		<title level="m">Speedup Properties of Phases in the Execution Profile of Distributed Parallel Programs</title>
		<imprint>
			<date type="published" when="1989-11" />
		</imprint>
		<respStmt>
			<orgName>Oak Ridge National Laboratory ; Department of Computer Science, Tufts University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">E</forename><surname>Dougharty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">R</forename><surname>Giardina</surname></persName>
		</author>
		<title level="m">Image Processing-Continuous to Discrete</title>
		<imprint>
			<publisher>Prentice-Hall</publisher>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Visualizing the Performance of Parallel Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">T</forename><surname>Heath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jennifer</forename><forename type="middle">A</forename><surname>Etheridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="29" to="39" />
			<date type="published" when="1991-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">MasPar Computer Corporation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mp-I Hardware</forename><surname>Maspar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Manual</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">nCUBE 2 Processor Manual, Rev. 2.0, nCUBE Corporation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matlab</forename><surname>User's Guide</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990-12" />
		</imprint>
	</monogr>
	<note>The Math Works Inc</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">G</forename><surname>Proakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dimitris</forename><forename type="middle">G</forename><surname>Manolakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Digital Signal Processing-Principles</title>
		<imprint/>
	</monogr>
	<note>Algorithms</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Applications</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">A</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ruth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tara</forename><forename type="middle">M</forename><surname>Aydt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><forename type="middle">J</forename><surname>Madhyastha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keith</forename><forename type="middle">A</forename><surname>Noe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bradley</forename><forename type="middle">W</forename><surname>Shields</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Macmillan Publishing Company</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">The Pablo Performance Analysis Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schwartz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, University of Illinois</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Visualizing the Performance of SPMD and Data-Parallel Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diane</forename><forename type="middle">T</forename><surname>Rover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">T</forename><surname>Wright</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J o u m l of Parallel and Distributed Computing</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Visualization of Program Performance on Concurrent Computers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diane</forename><surname>Rover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diane</forename><surname>Rover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Gustafson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth Distributed Memory Compuring Conference</title>
		<meeting>the Sixth Distributed Memory Compuring Conference<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1989-12" />
		</imprint>
		<respStmt>
			<orgName>Dept. of Electrical Engineering and Computer Engineering, Iowa State University</orgName>
		</respStmt>
	</monogr>
	<note>Performance Visualization of SLALOM</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Performance Visualization Paradigm for Data-Parallel Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diane</forename><forename type="middle">T</forename><surname>Rover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">T</forename><surname>Rover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Waheed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Doetsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd ACM/ONR Workshop on Parallel and Distributed Debugging</title>
		<editor>609613. Rover, Diane T. and Abdul Waheed</editor>
		<meeting>the 3rd ACM/ONR Workshop on Parallel and Distributed Debugging</meeting>
		<imprint>
			<date type="published" when="1992-04" />
			<biblScope unit="page" from="53" to="63" />
		</imprint>
		<respStmt>
			<orgName>New York IEEE Computer Society</orgName>
		</respStmt>
	</monogr>
	<note>Proceedings of the 25th Hawaii International Conference on System Sciences</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Performance Instrumentation and fisualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Simmons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Koskela</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>ACM &amp; Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Simmons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Koskela</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Bucher</surname></persName>
		</author>
		<title level="m">Insrrumentarion for Future Parallel Computing Systems</title>
		<imprint>
			<publisher>ACM &amp; Addison-Wesley</publisher>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">State Space Moakling of lime Series</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Aoki</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Springer-Verlag</publisher>
			<biblScope unit="page" from="146" to="160" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
