<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Implicit Stream Surfaces</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jarke</forename><forename type="middle">J</forename><surname>Van Wijk</surname></persName>
						</author>
						<title level="a" type="main">Implicit Stream Surfaces</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Streamlines and stream surfaces are well known techniques for the visualization of juid Pow. For steady velocity fields, a streamline is the trace of a particle, and a stream surface is the trace of a curve. Here a new method is presented for the construction of stream surfaces. The central concept is the representation of a stream s u~a c e as an implicit surface f (x) = C. After the initial calculation o f f a family of stream surfaces can be generated eficiently by varying C. The shapes of the originating curves are defined by the value o f f at the boundary. Two techniques are presented for the calculation o f f : one based on solving the convection equation, the other on backward tracing of the trajectories of grid points. The $ow around objects is discussed separately. With this method irregular topologies of the originating curves and of the stream surfaces can be handled easily. Further, it can also be used for other visualization techniques, such as time surfaces and stream volumes. Finally, an effective method for the automatic placement of originating curves is presented.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>With stream surfaces a better insight in the structure of the flow field can be achieved. Instead of a single particle, a curve is traced as it flows along the field. This curve sweeps out a stream surface. A stream surface is much easier to understand than a set of streamlines, because hidden surface elimination and shading can be used to provide cues on depth and orientation.</p><p>The most obvious way to construct a stream surface is to view it as a parametric surface r(s , t ), where s is a parameter along the originating curve r(s ,O), and t is a parameter along the streamlines that make up the surface. Curves r(C, t ) are streamlines, curves r(s, C ) are called time lines. To construct the surface, first the originating curve is discretized into points ria, and next discrete approximations of the streamlines for each originating point are calculated. This gives a set of points rij, from which a polygonal mesh can be derived that approximates the stream surface r(s , t ) .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Streamlines and stream surfaces convergentflow divergentflow</head><p>shearflow The use of streamlines is a well-known technique for the visualization of fluid flow fields. A streamline is a curve that is everywhere tangent to the velocity field. In a steady flow field, a streamline can be considered as the trace of a particle that is released from a certain point. Streamlines are effective for the visualization of two-dimensional fields, but their usefulness for threedimensional flow fields is limited. A single streamline does not reveal the structure of the flow field, and if many streamlines are used, the image becomes cluttered and hard to interpret.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 1 Various types of flow</head><p>Unfortunately, this simple approach often gives a poor result. Convergent flow, divergent flow, and shear flow ( <ref type="figure">fig. 1</ref>) all lead to badly shaped meshes. The density of the mesh varies from too sparse to too dense, and the polygons that make up the mesh are elongated and skinny. Increasing the sampling density in s and t direction is not efficient, and only partially solves the problems.</p><p>Many problems are encountered simultaneously when the flow around objects is studied ( <ref type="figure" target="#fig_0">fig. 2)</ref>. are released between the points A and B flow below the object, particles that are released between B and C flow above the object. A streamline that starts at B ends in D. The point D is a critical point [3, 41, with zero velocity. Point D can be classified as a saddle point according to the local velocity field: inflow from point B, outflow in the direction of both F and G.</p><p>Physically, the flow that starts from the line AC splits at point D: in the end each particle flows either below or above the object. Computationally however, the flow does not split. Most Computational Fluid Dynamics (CFD) simulations are based on the continuum hypothesis <ref type="bibr">[l]</ref>: fluids are treated as if they were perfectly continuous in structure. Thus, the line AC does not split, but folds around the object. The consequences for the mesh of the stream surface are clear: divergence near D, and shear near the boundary of the object. Further, the stream surface will penetrate the object, if two neighboring streamlines start above and below B.</p><p>released from a line source, the shaded surface-particles give the impression of a textured stream surface. The advantage of this method is that the texture gives an additional cue on the direction and magnitude of the velocity when shown animated. A disadvantage is that in areas of divergent flow a large number of particles is required to achieve a reasonable sampling rate downstream.</p><p>With the advancing front method stream surfaces with a good sampling quality can be generated efficiently. However, it requires a careful implementation, and it is limited with respect to the shape of the originating curve. The use of a circle should lead to stream tubes, but the treatment of splitting tubes is not discussed in [5] and does not seem trivial. The surface-particle method on the other hand, is easy to implement and more flexible, but less efficient, and does not lead to smooth stream surfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Overview</head><p>A new method is presented that is based on modeling a stream surface as an implicit surface f (x) = C . After the initial calculation o f f a family of stream surfaces can be generated efficiently by varying C . In section 2 an overview of the method is presented. In section 3 two methods for the calculation of f are presented:</p><p>based on the solution of the convection equation and based on backward tracing, and the flow around objects is discussed. In section 4 an application of the method is presented. The method is evaluated in section 5, and finally in section 6 conclusions are drawn.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Implicit stream surfaces 2.1 Concept 1.Previous work</head><p>Various solutions have been proposed to construct better behaved stream surfaces. In the advancing front method of Hultquist <ref type="bibr">[5]</ref> the originating curve is discretized, and advanced downstream. The spacing and the number of the particles at the front is adjusted to maintain the same distance between adjacent particles. The advancement step of the particles is chosen such that the advancing front is locally orthogonal to the streamlines. If two adjacent particles are headed in opposite directions, a critical point is assumed to be in between and the surface is split.</p><p>In [ l l , 131 a quite different approach to the construction of stream surfaces is described. The method is based on surface-particles: very small facets, modeled as points with a normal. If many surface-particles are The Navier-Stokes equations and the continuity equation are the fundamental equations in fluid dynamics <ref type="bibr">[l]</ref>, with the velocity v = [ u , v , w ] and the pressure p as variables. For two-dimensional, incompressible flow it is customary in CFD <ref type="bibr">[lo]</ref> to use the vorticity [(x) and the stream function ~( x ) as variables. The stream function can be used to visualize streamlines for 2D flow, because each curve w = C is a streamline. This suggests using the same approach in three dimensions, i.e. to use a scalar function f such that the implicit surface f (x) = C is a stream surface, instead of considering the stream surface as a parametric surface r(s , t ) . The difference between these approaches can also be characterized in CFD terms. The parametric approach is a Lagrangian type of specification, while the implicit approach described here, is an Eulerian type of specification. function f is: One condition to be satisfied for such a 3-D stream</p><formula xml:id="formula_0">Vf . v = o ,<label>(1)</label></formula><p>i.e. the normal on a surface f = C must be perpendicular to the velocity. Stream functions were used by Ken-Wright and Mallinson [6] for the calculation of streamlines. An important difference between their approach and the method described here, is that for their problem a local solution sufficed, while here a global solution is required.</p><p>To obtain non-trivial solutions, i.e. non-constant values for f , consider a certain point p, and suppose that f (p) = C, . The stream surface f (x) = C , contains p. By definition of the stream surface, the streamline through p should lie entirely on the same stream surface. Thus, if we specify the value of f for a point, then all points on the stream line through this point must have the same value. Thus, to obtain meaningful solutions for f different values o f f must be specified for a single point on each streamline in the area of interest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BB region BI region IB region</head><formula xml:id="formula_1">I I I I I I1 region V region</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 3 Streamline topologies</head><p>To this end, we consider the different topologies of streamlines in a bounded area ( <ref type="figure">fig. 3</ref>). The begin and end-points of a streamline are located at the boundary or in the interior. This gives four different combinations. The interior begin and end-points are critical points: points where the magnitude of the velocity vanishes. Further, a streamline can also be closed, which occurs around a vortex. We can now classify the different regions of the area in five different categories: BB, BI, IB, 11, and V regions, where e.g. a BI region is a region with streamlines that start at the Boundary and end in the Interior.</p><p>Until section 5, we will assume that we are interested primarily in the visualization of BB and BI regions. To visualize those regions, the selection of points for the initial specification o f f is easy: we prescribe the value o f f at inflow boundaries. A physical analogue: at all inflow boundaries we continuously insert ink with a spatially varying concentration. After some time, a steady state will be achieved, and all points with the same concentration of ink will lie on a stream surface.</p><p>So far, the domain has been considered continuous. The result of a CFD calculation however is discrete: the relevant quantities, such as the velocity v and pressure, are calculated for a grid of points. This grid can also be used for f . The procedure for the visualization of a flow field with implicit stream surfaces is thus as follows:</p><formula xml:id="formula_2">a) b) c) d)</formula><p>Specify the value of f for all grid points at inflow boundaries; Calculate f for the remaining grid points; Select a value for C ; Display the iso-surface f = C .</p><p>Step b) is the most complex, and is dlscussed in the following section. It is also the most time-consuming step. However, one function f defines a family of surfaces, which can be visualized by repeating step c) and d). For the display of iso-surfaces the marching cubes algorithm [9] can be used. <ref type="figure" target="#fig_1">Figure 4</ref> illustrates the procedure described. For all figures the same velocity field was used. This potential flow field was defined by the superposition of uniform flow and two linear flow sources <ref type="bibr" target="#b10">[12]</ref>. A 2 0~2 0 x 3 0 grid was used. One face of the box is an inflow boundary; the other five faces are outflow boundaries. For all calculations o f f the method described in section 3.1 was used. <ref type="figure" target="#fig_1">Figure 4a</ref> and 4b show the result of linear variation of f at the inflow boundary with the height and depth respectively. <ref type="figure" target="#fig_1">Figure 4c</ref> and 4d are two views on the result of varying f as a function of the distance from a point, which gives a stream tube. It is clear that the sources act as obstacles that block the flow. In these figures not the stream surface f (x) = C is shown, but rather the stream volume f (x) 2 C . Instead of an originating curve, we start with an originating surface, which traces out a volume. The color shows the value So far we have considered stream surfaces from a geometric, a CFD, and a physical point of view. We can also consider them from a calculus point of view. The functions f and g calculated for figure 4a and 4b can be viewed as two parameters per grid point that relate each grid point to a point at the inflow boundary. o f f . In other words, we reparametrize space. New variations of initial values at the inflow boundary can be realized by using the precomputed values o f f and g . I f f and g are stream functions, each function h cf , g ) will be a stream function again, because</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Examples</head><formula xml:id="formula_3">r = -Vf a h ' V + -vg ah ' V af ag = o .</formula><p>The quality is less than when calculated directly, but still acceptable, and achieved at a much lower cost. Also, t(x) can be used as a third parameter in spatial reparametrization. <ref type="figure" target="#fig_2">Figure 5b</ref> is similar to figure 4c, but here the value o f f is modulated as a function of t(x).</p><p>The value o f f at the inflow boundary thus varies with time, which gives the effect of a pulsating source.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Calculation of stream surface functions</head><p>In this section two methods for the calculation of stream surface functions will be presented: based on solving the convection equation and based on backward tracing of trajectories. The flow around objects is discussed separately. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The convection equation</head><formula xml:id="formula_4">+ v-+ w- i</formula><p>This is the convection equation for incompressible flow, where f is the transported quantity. If a steady state is reached (af /at = 0), equation <ref type="formula">2</ref>reduces to equation <ref type="formula" target="#formula_0">1</ref>. Thus, if we start with the prescribed values o f f at the boundaries, and determine f (x, t ) for a sequence of time steps using (2), then the steady state solution o f f is a stream function. In other words, we numerically simulate the described process of inserting ink on the boundaries, and tracing the ink as it flows through the fluid. The next step is to find a numerical procedure for the calculation of f (x,t). For our application we want a simple numerical scheme that gives satisfactory results. Good results, in terms of accuracy and stability, were achieved with Leonard's QUICKEST scheme [SI. We use the time splitting method [lo] to handle three dimensions, i.e. this one-dimensional scheme is used altematingly in the x , y , and z direction. These methods were used for the images in the preceding section.</p><p>Time surfaces can be constructed by setting the value o f f to 1 at inflow boundaries, and to zero at the interior. Next the standard iterative process for solving (1) is executed, and for each grid point the time at which f becomes greater than a threshold frrh (e.g. 0.5) is recorded. To grid points with f &lt; ftrh in the steady state a value t slightly above the highest value in the BB regions is assigned.</p><p>(See color plates, p.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Backward tracing f-f-</head><p>The iterative solution of the convection equation is not cheap. Further, for unstructured or irregular grids its implementation is not trivial. In this section an alternative method is presented.</p><p>Recall figure 3. Each grid point in a BB or BI region lies on a streamline that starts at the boundary.</p><p>This suggests a simple algorithm for the calculation of f . For each grid point we calculate a streamline, using a negative time step. In other words, we trace back where a virtual particle at the grid point comes from. If a boundary is reached, we determine the prescribed value o f f at the boundary, and assign this value to the grid point. If the magnitude of the velocity drops below a threshold during the tracing process, it is assumed that the streamline starts at a critical point, and the grid point is marked.</p><p>Numerically, this technique is straightforward: a second order Runge-Kutta scheme and trilinear interpolation of the velocities suffice [2]. In contrast to the previous method a variable time step can be used. Further, this technique can be used very well to find the coordinates for spatial reparametrization. Instead of the value of f , we store the coordinates of the boundary point and the traveling time from the grid point to the boundary point.</p><p>Near object boundaries the result is less smooth than that achieved with Leonard's method. The backward tracing method takes a binary decision whether the grid point is inside or outside the IB region, while Leonard's method gives a smooth transition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Flow around objects</head><p>So far only BB and BI regions were considered. How about the other regions ? To simplify, we assume that such regions are solid objects and that we are thus not interested in the interior flow. We therefore can use a constant value for f at all grid points in such regions. This gives rise to two questions. First, how can we determine whether a grid point belongs to such a region, and second, which value do we assign ? With the techniques previously described we can answer the first question. The techniques for the generation of time surfaces provide us with sufficient information.</p><p>To the second question two answers are possible. First, consider figure 6. At the inflow boundary f is varied linearly with height. Suppose we visualize a sequence of stream surfaces f = C by varying C . If we change C from just below f A to just above f A , the stream surface should shift from below the object to above the object. To realize this, all grid points in the inflow match We call this solution the match-solution: the value is chosen such that it matches with the value o f f around the object. It can easily be applied for the backward tracing method. After the calculation of f for all grid points outside the object(s), the result is scanned. For each object the average value o f f at the boundary is determined, and assigned to the interior. This was implemented using a recursive fill algorithm.</p><p>The implementation of the match-solution for the convection equation method is more troublesome. The interior value of f is used during the solution of the convection equation and thus must be provided a priori. For the standard example it is clear which point at the inflow boundary will be connected to the saddle point. This knowledge was used to produce figure 7.   boundary of the object. It visualizes the continuum hypothesis: the topology of the circle does not change. The stream volume shown in <ref type="figure" target="#fig_5">figure 7</ref> however, suggests that the initial flow passes through the object, which is not correct.</p><p>This suggests a different solution. <ref type="figure">Figure 8</ref> is the two-dimensional equivalent of the stream tube shown in figure 4c. If we set f to a low value f -, then a stream volume f 2C will not contain the object, but avoid it instead. We therefore call this the avoidsolution, which was used for figure 4c.  <ref type="figure" target="#fig_7">Figure 9</ref> shows a practical application: the visualization of the numerical simulation of the air flow in a television set <ref type="bibr">[7]</ref>. The purpose of this simulation was to perform a set of parameter studies in order to decrease some critical temperatures. The simulation was done with the CFD-code FloTHERM (Flomerics, UK) which was especially developed for the analysis of heattransfer in electronic systems. The size of the grid used was 23 x 22 x 21.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Application</head><p>A difficulty with streamline and stream surface techniques is that a more or less arbitrary decision has to be made where to put the originating points and curves. This leads to a trial and error process, in which interesting features may be overlooked. However, with implicit stream surfaces the positioning of the originating curves can be automated. For the figures shown here the assumption was made that interesting flow structures would start at boundaries with a high influx. Thus, the boundary value of f was set to -v'n, where n is an outward unit normal on the boundary.</p><p>The backward tracing method was used, in combination with the match-solution. This leads to a noisy result ( <ref type="figure" target="#fig_7">fig. 9a)</ref>, as a consequence of the sampling character of backward tracing, the low resolution of the grid compared to the features of the flow structure, and the simple interpolation scheme of the marching cubes algorithm. To remove high frequencies the values for f were filtered twice, which makes the structure of the flow stand out more clearly (figure 9b). The filter used was:</p><p>fi' = Vi-1 + 4fi + fi+1)/6 9 applied for each dimension. Repeated application gives an increasingly smooth but less detailed result. <ref type="figure" target="#fig_7">Figure   9c</ref> and 9d show the same flow field, but now with a lower value of C. By lowering the value of C the interconnection of structures can be studied.</p><p>The method was implemented on an SGI VGX 310 as a set of separate programs. The application of each step, discarding YO, took: (See color plates, p. CP-25.)</p><p>For step e) and f) the Elvis-package, developed by the author at ECN, was used. With this package timedependent data can be handled. For each grid point data values can be entered for a sequence of steps, which are linearly interpolated given a fractional time step. Here this option was used to store different levels of filtering. Thus, after the initial preprocessing (step a-d), which takes about 100 s, various images of the flow structure with different values of C and filtering level such as shown in figure 9, can be generated within a second. For this application the influx boundary condition immediately leads to a meaningful result, without any trial and error. This shows that the method presented here is useful for practical engineering purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>In this section the methods presented here will be compared with other methods. Finally, some problems that are subject to further research are discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Efficiency</head><p>The complexity of the methods described in section 3 is O ( N 4 ) for a grid with size N 3 . The complexity of parametric stream surface methods, such as Hultquist's, is O(N2), if we assume that the discretization in both s and t direction is O ( N ) . Thus, efficiency does not seem the dominant quality of the method described here. However, the calculation o f f yields much more information than a single stream surface. The result is a family of stream surfaces. The intermediate results of the convection equation method give dynamic information on the flow, which, when shown as an animation, give a good insight in the flow. With the backward tracing method many different inflow conditions can be easily generated after the preprocessing step. The preprocessing step can thus be done off-line, without user interaction. Finally, the complexity of the method is an order of magnitude less than that of a CFDsimulation. According to <ref type="bibr">[lo]</ref>, the complexity of straightforward methods for solving a three-dimensional fluid flow problem is O ( N 5 ) .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Discrete and continuous space</head><p>The method presented here is based on a discretization of space, while the parametric methods use continuous space. The discretization leads to sampling problems: features below the scale of the grid cannot be represented, high frequencies lead to aliasing errors, the iso-surface construction leads to reconstruction errors.</p><p>On the other hand, it is natural to visualize the data at the same resolution as the simulation. Further, tesselation and irregular topologies do not impose special problems. The marching cubes algorithm gives a fairly efficient tesselation per cell, and splitting tubes and irregular shapes of the originating curves are handled easily. <ref type="figure" target="#fig_1">Figure 4c</ref> could not be made with the current parametric methods, but was no problem for the method presented here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Implementation</head><p>The implementation of the method in a system for flow visualization is straightforward. It can be split naturally into a series of modules, where each module performs a single step, such as calculation of f , specification of boundary values, filtering, etc. Each module takes a grid of data values (velocity or stream functions) as input, and has a similar output. The ingredients for this method (such as input/output, streamline calculation, and construction and rendering of iso-surfaces) will usually be available in an existing system for flow visualization. A welcome extension would be a tool for the user to paint the value of f at the boundary. For the system described here a numerical specification was used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Miscellaneous</head><p>The most important advantage of the implicit stream surface method over parametric methods is that its concept is more fruitful. Whereas in the latter class of methods the main concern is how to tie the polygons together, the method described here opens up wider vistas. The method could easily be extended to stream volumes and time surfaces. The display of ink, flowing in from the boundaries as a function of time, provides a natural view on the flow. Finally, the use of the magnitude of the influx for f at the inflow boundary is a powerful tool for automated analysis of the flow field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Further research</head><p>However, not all problems have been solved yet. So far, we considered only BB and BI regions. If we are only interested in IB regions, the solution is simple: just reverse the velocity. Simultaneous visualization of IB and BI regions is more complex. We can specify f at inflow boundaries for BB and BI regions, and at outflow boundaries for IB regions. However, at the transitions of those regions these values should match for an optimal result. This condition is automatically satisfied if the influx is used for f at the boundary: it is zero at the transition, and changes sign when the transition is crossed. A more general solution, where the user has freedom for the specification of the value o f f at the boundary and simultaneously the mentioned condition is satisfied would be welcome. <ref type="figure">Fig. 10</ref> Principle of solution for I1 and V regions The I1 and V regions pose special problems. One solution is to split the data in two halves across such regions, and to treat each half separately with the methods described before. A less insipid solution is to use an additional surface B' for the initial specification o f f that divides I1 regions into an IB' and B'I regions, and V regions into two B'B' regions ( <ref type="figure">fig. 10</ref>). The question how such a surface B' can be derived automatically is still open.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>A new method for the construction of stream surfaces has been presented. Its features are:</p><p>based on implicit surfaces; -after initial preprocessing, reasonably efficient; -easy to implement;</p><p>no special problems with irregular topologies of ori--can be used for stream surfaces, stream volumes, ginating curves and surfaces; and time surfaces.</p><p>Further, the use of the influx at boundaries for the originating curves is an effective method for the automated visualization of flow structure. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CP-25</head><p>REST COPY AVAILABLE</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2</head><label>2</label><figDesc>Flow around an object</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 4</head><label>4</label><figDesc>Examples of stream surfaces: linear variation with height (a), and depth (b), and two views on a stream tube.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 5</head><label>5</label><figDesc>Temporal variations: a) time surfaces, b) time modulation Figure 5a shows another variation: time surfaces.The value t(x) assigned to each grid point is the amount of time it takes to travel from the inflow boundary to that grid point. The surface t(x) = T is then a copy of a plane, released at the inflow boundary after T units of time. Points in IB regions are assigned a value just above the highest value T,, in the BB regions. The surface t(x) = T,, thus visualizes flow topology in a similar spirit as in [4], because it bounds two different regions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6</head><label>6</label><figDesc>Match solution for object object must be assigned f A .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7</head><label>7</label><figDesc>Match solution applied to stream tube The stream surface shown in figure 7 is correct in a mathematical sense. The initial circle encloses the streamline to the saddle point and is stripped over the (See color plates, p.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure 4cis correct in a physical sense: it is an image of average concentrations. Note the small protuberances as the tube splits. These are not instabilities, but initial approximations to the stream surface shown in figure 7. surface o ffig. 7is correct in a formal sense, in my opinion the stream volume offig. 4cprovides a better insight in the structure of the flow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9</head><label>9</label><figDesc>Stream surfaces in tv-set for two values of C and two levels of filtering. Courtesy data: C.J.M. Lasance, Philips-CFT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>Rendering: &lt; 0.1 s. Evaluation influx boundary conditions: 0.7 s; Assignment of values to objects: 0.4 s; Filtering: 2.0 s per step; Construction of iso-surface: 0.6 s;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 5 Figure 9 :</head><label>59</label><figDesc>Temporal variations (a) time surtaces (b\ time modulation Figure 4: Examples of stream surfaces. linear variation with height (a), and depth (b), anu two views on a stream tube c=o.I #f = 0 #f = 2 v Stream surfaces in tv-set for two values of C and two levels of filtering.Courtesy d d o : CJ M[.asonce. Phi/ips-CFT.    </figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>During the development of the work described here I took advantage of the experience and support' of a number of people. I thank them for their contributions, as well as the pleasant cooperation. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">An Introduction to Fluid Dynamics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K</forename><surname>Batchelor</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1967" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Sources of Error in the Graphical Analysis of CFD Results</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Representation and Display of Vector Field Topology in Fluid Flow Data Sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hesselink</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="27" to="36" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Surface Representations of Two-and Three-Dimensional Fluid Flow Topology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Helman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hesselink</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization&apos;90</title>
		<meeting>Visualization&apos;90<address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="6" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P M</forename><surname>Hultquist</surname></persName>
		</author>
		<title level="m">Constructing Stream Surfaces in Steady 3D Vector Fields, Proceedings Visualization&apos;92</title>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A 3-D Streamline Tracking Algorithm Using Dual Stream Functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>Ke~vright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mallinson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Visualization&apos;92</title>
		<meeting>Visualization&apos;92<address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="62" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Stable and Accurate Convective Modelling Procedure Based on Quadratic Upstream Interpolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Lasance</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Leonard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Methods in Applied Mechanics and Engineering</title>
		<imprint>
			<biblScope unit="volume">171</biblScope>
			<biblScope unit="page" from="59" to="98" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
	<note>ASME HTD</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Marching Cubes: A High Resolution 3D Surface Construction Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lorenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cline</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="163" to="169" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Roache</surname></persName>
		</author>
		<title level="m">Computational Fluid Dynamics, Albuquerque</title>
		<imprint>
			<date type="published" when="1976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stolk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wuk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Van</surname></persName>
		</author>
		<title level="m">Surface-Particles for 3D Flow Visualization</title>
		<editor>Post, F.H., A.J.S. Hin</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
	<note>Advances in Scientific Visualization</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wejchert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haumann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Animation Aerodynamics. Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="19" to="22" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Flow Visualization with Surface Particles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Wuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Van</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1993-07" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
