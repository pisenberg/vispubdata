<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Rapid Exploration of Curvilinear Grids Using Direct Volume Rendering (Extended Abstract)</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Vari Gelder</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Sciences</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95064</postCode>
									<settlement>Santa Cruz</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Sciences</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>95064</postCode>
									<settlement>Santa Cruz</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Rapid Exploration of Curvilinear Grids Using Direct Volume Rendering (Extended Abstract)</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Fast techniques for direct volume rendering over curvilinear grids (common to computational fluid dynamics and finite element analysis) are developed. Three new projection methods that use polygon-rendering hardware for speed are presented and compared with each other and with previous methods for tetrahedral grids and rectilinear grids. A simplified algorithm for visibility ordering, based on a combination of breadth-first and depth-first searches, is described. A new multi-pass blending method is described that reduces visual artifacts that are introduced by linear interpolation in hardware where exponential interpolation is needed. Visualization tools that permit rapid data banding and cycling through transfer functions, as well as region restriction, are described.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Direct volume rendering is attractive because of its extreme flexibility, being able to map data values to color and opacity in any fashion and providing information about the whole volume in a single image. Information in such a semi-transparent image could be clarified by interackive manipulation, but suc.h animation is hampered by c.omputationa1 cost. Fast methods generally require powerful parallel processors, or are subject to visual artifacts. Problems of speed and artifacts are exacerbated when volume-rendering nonrectilinear grids. However, when using direct volume rendering for a general perusal of volume information, improvements in speed may be worth even relatively significant artifacts.</p><p>Direct volume rendering is a visualization method for scalar sample data volumes where values are mapped to color and opacity and directly rendered by accumulation to the screen pixels. It can be done by ray-casting [DCH88, Lev88, UK88, KruSO], or by projecting volume sample regions or cells to the screen <ref type="bibr">[UK88,</ref><ref type="bibr">Wes90,</ref><ref type="bibr">LH91,</ref><ref type="bibr">MHC90,</ref><ref type="bibr">ST90,</ref><ref type="bibr">WVGSl]</ref>. Projection must be in front-to-back or back-to-front order for correct compositing with fractional opacity 1070-2385/93 $3.00 Q 1993 IEEE values. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur <ref type="bibr">[WVGSl]</ref>. (By cell depth, we always mean the thickness in the direction orthogonal to the screen.)</p><p>Further, because no geometric primitives such as polygonal isosurfaces are extracted, most or all of the work of direct volurne rendering must be repeated if the viewpoint changes. Significant speed-ups c,an be achieved by the use of coherence, by simplifying interpolation and integration, and by making use of graphics hardware <ref type="bibr">[lJK88,</ref><ref type="bibr">MHC90,</ref><ref type="bibr">ST90,</ref><ref type="bibr">LH91,</ref><ref type="bibr">WVGSl]</ref>. Our goal in this investigation was to achieve some of these gains on curvilinear grids.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Overview of This Research</head><p>A curvilinear grid is a 3-dimensional rectilinear grid in computational space that is "warped" in physical space around regions of interest (e.g., aircraft wings in computation fluid dynamics applications). The grids present problems for direct volume rendering because cells may vary greatly in size (e.g., neighbor distances in a commonly used grid [HB85] vary by a factor of lO,OOO), and have irregular shapes and degeneracies (e.g., multiple sample points in computational space may map to the same physical space location). All methods described herein are designed for curvilinear grids that may not be convex as a volume, but whose cells are 6-sided convex polyhedra (hexahedra), possibly with some degeneracies in that some edges of the cell have zero length, and some faces have zero area.</p><p>Initial explorations convinced us that using raycasting to directly render these volumes was unacceptably slow <ref type="bibr">[RW92]</ref>. The main thrust of this paper is to explore more rapid, projection-based, methods. We have implemented three projection methods for curvilinear grids. All of our methods have some things in common:</p><p>1. they convert cell projections to Gouraud-shaded polygons and use hardware for rendering; they use hardware compositing; and they preprocess cell information for speed, a t some cost in space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>The main ideas are summarized here; a more c.omplete presentation is offered in a technical report <ref type="bibr">[VGW9:3]</ref>.</p><p>It is hard to compare these projection methods with ray-casting exactly, because the ray-caster is more sensitive to image size and orientation. For images taking up half or most of a 500x500 pixel window, <ref type="table" target="#tab_0">Table 1</ref> shows that, compared to the ray-caster:</p><p>1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">.</head><p>For rendering from a new viewpoint, the speedup is a factor of 4 to 94, depending on the projection method.</p><p>For re-rendering without rotation, the speedup is a factor of 50 t o 150, depending on the projection method.</p><p>Although not shown in the table, as image size increased by a factor of two due to zooming, the cost of ray-casting tripled, while the cost of hardware-assisted projection was negligibly affected. Also, the ray-caster required two sizable precomputed files to achieve its performance.</p><p>The faster projection methods may show significant artifacts in certain cases; however, the most careful of the three methods produces images that are usually close in quality to the ray-caster. Our new projection methods are described in Section 3.</p><p>To take into account opacity, a front-to-back ordering must be established, because cells (defined by eight corner sample points) in front may partially or totally obscure those behind. Because curvilinear grids can wrap around calculating this visibility ordering is nontrivial [MHCSO, Wi192bl. Further, accumulating color and opacity values correctly in depth involves an exponential function <ref type="bibr">[KruSO,</ref><ref type="bibr">MHC90,</ref><ref type="bibr">WVGSl]</ref>. T o approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in Section 4 and Section 5.</p><p>In Section 6 we discuss some new methods of rapidly designing and changing transfer functions for volume exploration. In Section 7, we discuss region restriction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Rapid Rendering Approaches</head><p>Although most previous work on direct volume rendering is limited to regular grids, irregular grids are receiving increasing attention. Ray-casting on irregular grids has been reported [GarSO, Use91, RW921.</p><p>A few researchers have explored projection methods [ <ref type="bibr">MHCgO,</ref><ref type="bibr">WilSSb,</ref><ref type="bibr">Wi192aI. Challinger [WCA+SO,</ref><ref type="bibr">Cha901,</ref><ref type="bibr">Lucas [ L u c~~]</ref> , and Giertsen [Gie92] use methods that could be considered hybrids of both types. Most of these methods were found to be significantly slower than what we needed; an exception being Williams' approach (hardware Gouraud-shading of tetrahedra). However, when the grid is naturally hexahedral, the latter method involves translating each c.ell into five tetrahedral cells; it also seemed to have problems with artifacts.</p><p>We have implemented three projection methods for curvilinear grids. Certain hardware features are necessary for these methods to be successful: hardware Gouraud-shading in color and opacity; hardware compositing; and, minimally, eight bits of color and opacity per pixel to reduce precision problems and aliasing. No accumulation buffer is used.</p><p>Projection of irregular hexahedra is significantly more complex than that of rectilinear cells when cell depth is considered. For a parallel projection of a rectilinear cell there are 3 nondegenerate and 11 degenerate projection topologies <ref type="bibr">[WVGSl]</ref>. Also, for a given viewpoint, all cells in the volume fall into the same case. For irregular hexahedra, the number of nondegenerate projec.tion topologies is significantly higher (see examples in <ref type="figure">Figure l)</ref>, and the number of degenerate ones higher still. Also, various cells fall into different cases.</p><p>The first of our three methods avoids the issue entirely and only draws faces, without consideration of cell depth. Our second is a rough approximation to correct projection. Our third accurately analyses the projection of each cell. (See <ref type="figure">Fig. 4</ref>.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Depthless Cell Face Projection</head><p>Our first method is a very simple but admirably fast one: each data value is mapped to a color and opacity and the faces of each curvilinear grid cell are drawn as Gouraud-shaded polygons whose vertices have these mapped values. Data structures for this method record information for three adjoining faces of the cell, so each face is only drawn once. Usually this method is used with zero-opacity for maximum speed. By "zeroopacity", we mean that color values are added to each pixel without any reduction due to opacity. For such a case, no visibility ordering is needed.</p><p>This method is extremely fast and trivial to implement. Small cells contribute the same intensity as large cells, depth not being considered. On our grids, cell size is generally inversely proportional to interest, because volumes are finely gridded in areas of most interest. Some scientists may prefer this automatic weighting. Further, there is a problem with using hardware-compositing on these grids (or any grids with many tiny cells), because the typical intensity/opacity resolution is only eight bits per channel. Small cells may contribute well under 1/255 of the maximum possible intensity and, thus, never appear in the image a t all. IJsing the depthless method, data is not ignored in this way, just improperly weighted.</p><p>A more serious problem is that noticeable visual artifacts appear from some angles because the distance between cell faces is not taken into account. These artifacts tend to delineate cell boundaries and probably would not be misinterpreted as data information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2</head><p>Our next method takes some account of cell depth. For each cell vertex, a data value and depth is calculated. The depth is the distance between the front and bac,k faces of the cell that project to the location of that particular vertex (usually zero on the convex hull). The data value is the average of the data value of the vertex and the interpolated data value of the loc,ation on the other cell face that projects to the same location.</p><p>First, cell vertices are mapped to screen space. For each cell, vertices that lie on the convex hull of the projection of the cell are identified, by creating an edge list for the cell and traversing it around the exterior starting a t the lowest vertex. The remaining cell vertices are interior to the convex hull. Convex hull vertices with non-zero depth are recognized either because: two vertices project to the same location (in which case depth and estimated data value is stored with one vertex, the other being treated as depthless); or three consecutive convex hull vertices project onto a line.</p><p>For any interior (not on the c.onvex hull) cell vertex, the appropriate opposite cell face is found by examining a cell edge list generated for convex hull detection. The two cell edges lying immediately left and right of the cell vertex in question (but not emanating from that vertex), define the opposite cell face. Interpolation across that face is used to find a data value and z-depth, which are used to calculated average data value and cell depth a t that location.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Cell Face Projection with Depth</head><p>Cell vertex information need only be recalculated and stored when the volume is rotated. The mapping to color and opacity occurs during drawing, so changes in mapping do not require recalculation of the projection. For rendering, each face is drawn once for each cell as a Gouraud-shaded polygon.</p><p>This method gives a more "realistic" rendering (assuming some physical, colored medium being imaged), but it only an approximation of the correct projection. For some angles, it produces noticeable artifacts. While slower for new orientations than the depthless method, it is much faster than the more correct method presented next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Incoherent Projection</head><p>The rnethod we have dubbed "incoherent projec.tion" is the most careful of the projection methods presented, and the most expensive. It builds on the "coherent projection" technique for rectilinear grids <ref type="bibr" target="#b12">[WVG91]</ref>, extending it to general convex hexahedra.</p><p>Unlike coherent projection of rectilinear volumes, in curvilinear volumes different cells do not all fall into the same case, so a table-based case analysis technique was not attractive to implement. Therefore, each cell is analyzed individually in screen space. A pleasant side-effect of this approach is that perspective projections are no more difficult than parallel ones.</p><p>The main idea is to render the 2-dimensional screen space projection of each cell as an arrangement of polygons, each polygon being a region that has the same front and back face in the cell projection. This allows simplifying assumptions to be made concerning these polygonal regions.</p><p>The algorithm determines the polygonal regions using a sweep method described below. Some of the vertices of the polygonal regions are actual cell corners; others are not and must be calculated. As described in the previous section, an average data value (mapped later to color and opacity) and cell depth for vertices of the polygonal regions must be calculated, taking into account values a t the cell exterior that projects to these vertices. Finally, hardware Gouraud shading is used to color each of these polygonal projections using the calculated color and opacity for vertex values.</p><p>As shown in <ref type="figure" target="#fig_1">Figure 2 , some vertices ( A and B )</ref> corresponding to the polygonal decomposition of the projection of a hexahedron do not correspond to vertices of the hexahedron, but are produced by intersection of edge projections. We call these intersection vertices. The first technical issue is the location of these intersection vertices. We used a sweep line algorithm which we now outline, first assuming no degeneracies. The algorithm simultaneously finds the intersection vertices and the polygons that comprise the arrangement of the projection. (It also finds the convex hull as a by-product.) The hexahedron to be analyzed is given in screen space (z, y, z ) , so the objective is to find its projection on the 2-y plane. The algorithm maintains three data structures:</p><p>1. A priority queue of vertex events. The "minimum" of this event queue is the unprocessed vertex with Initially, the event queue contains the original hexahedron vertices sorted by y-value, and the active-edge list and current boundary are empty. This algorithm follows the standard pattern of sweep-line algorithms. Updating the current boundary proceeds as suggested in <ref type="figure" target="#fig_1">Figure 2</ref>. Insert the first removed edge and its reversal into the current boundary edge list such that the (nonconvex, nonsimple) polygon formed is planar (no edges cross); this forms a sort of needle. If there is a second removed edge, do likewise, but this completes a counterclockwise polygon, which is spliced out. (The last vertex of the cell has a third removed edge, which creates a second polygon to be spliced out.)</p><p>The above outline omits the details of handling "degeneracies". Projection degeneracies occur when any two projection vertices have the same z-value or y value. These can be removed by assuming a slight rotation of the screen space that does not change any nondegenerate topology. A more difficult, less standard degeneracy occurs when the original hexahedron is itself degenerate: if two points coincide in %space, no spatial transformation will separate them. Our solution was based on certain assumptions about what degeneracies could occur: we assume that no two adjacent edges have zero length; that no two adjacent faces have zero area; and that faces are planar. These assumptions leave a lot of flexibility: tetrahedra and pentahedra can be represented as degenerate hexahedra.</p><p>Suppose an edge of zero length is encountered. We want to perturb the hexahedron to give the edge some length while maintaining convexity. This requires finding a direction in which the two coinciding vertices can be "pulled apart". If the edge connec.ts two faces with positive area, their planes intersect in a welldefined line that determines the required direction. The more difficult case is when the edge is adjacent to one face of zero area. Then we take advantage of the fact that, under the above assumptions, the diagonally opposite edge "in the same direction" c,annot be degenerate. Form a triangle with this opposite edge as base and the coinciding vertices as apex, then slightly "pull apart" the coinciding vertices in the planes of the triangle and the face of positive area. minimum y-value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Visibility Ordering</head><p>A visibility ordering, which is an ordering on the cells such that no earlier cell occludes a later cell in screen space, is necessary to render cells taking into account opacity. Visibility ordering issues for list, surrounding the processed vertices and edges. tetrahedra were thoroughly explored by Williams</p><p>2. An z-sorted list of actzve edges, where an edge is active if it goes from a processed vertex to an unprocessed vertex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A current boundary polygon in the form of an edge</head><p>[Wi192b]. This section outlines a considerably simpler implementation for curvilinear grids that is robust in practice. The main ideas are also applicable to tetrahedral grids. Two issues concerning visibility ordering are: does one exist, and if so, how to find one. Although the theory is murky in the general case, in practice our method has never failed to find a visibility ordering. Williams reports similar practical experience.</p><p>The main idea that is well known for efficient visibility ordering is that of linear-time topological sorting [MHC90, Wi192bl. A topological sort of a directed acyclic, graph is a numbering of its vertices such that there is no path from a smaller vertex to a larger one. This can be accomplished in linear time by a depth-first search and post-order numbering. For the visibility application the graph's vertices are cells and its directed edges given by the immediately occludes relation: cell A immediately occludes cell B if they share a face and A occludes B in screen space. For convex volumes, a topological sort finds a visibility order if one exists and discovers a cycle otherwise <ref type="bibr">[MHC:90,</ref><ref type="bibr">Wi192bl</ref>. Though there is no definite theory know for nonconvex volumes, they are common in practice. Williams describes an heuristic. for nonconvex volumes. We present an alternative that is considerably simpler, for connected, possibly nonconvex, volumes.</p><p>Our algorithm builds a directed graph from the undirected graph defined by the adjacency of cell, by taking into account the orientation of the shared face in screen space. (The z component in screen space of the shared face normal determines which cell occludes the other.) We combine an undirected breadth-first search with directed depth-first searches. For curvilinear grids, edges need not be represented explicitly, as they can be determined by arithmetic on cell indices.</p><p>The breadth-first search is implemented with a FIFO queue of cells, which initially contains one cell that has a vertex that is farthest from the viewpoint, and all cells are unmarked. The depth-first search also needs to test edge directionality, and post "uphill" neighbors to the FIFO queue; otherwise it is quite standard. Williams reports that about 60,000 tetrahedra per second can be ordered (SGI 4D/VC;X). We found that a comparable number of hexahedra per second were ordered by our algorithm. Converting to tetrahedra would increase ordering cost by a factor of 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Multi-pass Blending</head><p>Linear interpolation is not always what is desired, but it is what the hardware offers. However, SGI workstations have a blend function setting that permits the "source'' color to be multiplied by "one minus source alpha", and added to the background (cells already rendered). This permits some quadratic functions to be used for color interpolation, by multiplying two linear functions: color and alpha. (First, in separate passes, the background needs to be attenuated acc,ording to the new cell's opacity, with a different blend function; this explains the name "multi-pass" .)</p><p>Assume a cell is filled with a semi-transparent lightemitting medium. When cell faces are planes, the depth 6 of the cell varies linearly along any line, but the effective transmission of color varies as (1 -e-a6).</p><p>This can be approximated between two vertices in the projection by a quadratic function of 6 that is zero a t vertices of 0 depth and gives the correct color value at the "thickest" vertices of the cell projection. The remaining parameter of the quadratic was chosen to minimize the squared error between the quadratic and the exponential function that it is approximating, over the range of thicknesses that occur in the cell. Somewhat amazingly, this can be solved in closed form; details appear in a technical report <ref type="bibr">[VGW93]</ref>.</p><p>The drawing phase for multi-pass blending takes about four times as long as for single-pass (see <ref type="table" target="#tab_0">Table 1</ref>) when applied to all cells. Therefore, a sensible optimization would be to use it only on cells that project onto several hundred pixels. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Transfer Function Manipulation</head><p>Our visualization software provides an an interactive transfer function editor to map data values to c,olor and opacity, but it can still be frustrating and slow to find useful mappings. We developed a band option where the user defines one or more bands of data values that are visible, and only cells with values within the bands need be drawn.</p><p>Rendering with a single-band, in particular, is extremely fast. A supplemental data structure consisting of a two-dimensional array of size 256 by 256 quickly finds cells in the range. Each array location is a linked list of pointers into the data. (We assume %bit channels for color and opacity.) T h e minimum data value of a cell (scaled into the range 0-255) determines the row of the array and the maximum data determines the column of the array with which a cell is associated. In drawing an image using the banded function, only those rows less than or equal to the maximum value of the band need be drawn; and within those rows, only columns greater than or equal to the minimum value of the band need be drawn (see <ref type="figure">Figure 3)</ref>. This method generally takes much less time than rendering the whole volume. The band can easily and quickly be cycled, giving the effect of a moving fuzzy isosurface and helping to indicate the relation of neighboring data regions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Restriction and Inverse Mapping</head><p>The final approach in our recent attempts to make direct volume rendering more useful was to implement a method of interactively restricting the parts of the volume rendered. At the suggestion of Arsi Vaziri of NAS/NASA-Ames, we invert the mapping for this restricted region to find the actual locations within the data that are being drawn. Lucas has described another approach to this problem using z-buffering</p><p>The restricted area is a simple bounding box defined interactively using sliders. Adding the option to draw cell origins as points helps clarify the relation of the volume rendering to the sample points. If the restricted region is fairly small, it is practical to print the locations and values of the cells that lie within the box to the screen, allowing the user to determine the actual computational space location of features of interest.</p><p>[Luc92].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Experimental Results</head><p>We explored these methods on two curvilinear grids. (The software works on a regular grid, but it is not optimized to take advantage of the greater simplicity of these grids.) The curvilinear grids tested were the "blunt fin" [HB85] and the "post" <ref type="bibr" target="#b1">[RKK86]</ref>, both from NASA-Ames Research Center. The blunt fin is contains 40,960 samples, and the post contains 109,744 samples. <ref type="table" target="#tab_0">Table 1</ref> shows the rendering times for our three projeckion methods, and a ray c.aster for comparison, using these two grids. Times are user and system CPU seconds on a Silicon Graphics R3000-based uniprocessor VGX. <ref type="figure">Figure 4</ref> shows representative images produced by our projection methods. Coherent projection [WVGSl] required about 4 to 7 seconds on a comparably sized rectilinear grid.</p><p>First we consider our three direct volume rendering methods.</p><p>Cell face projection without depth is significantly faster than the others and is desirable for rapid scanning of the volume, though it is sometimes subject to artifacts. We ignore the cost of making the data structure for this method because it is done once as the data is read in and never changes. Cell face projection with depth uses the size and shape of cells more carefully, and requires rendering information that changes with orientation. We calculate this information (the "making data structures" cost in <ref type="table" target="#tab_0">Table 1</ref>) and store it. Drawing the image from these structures takes about three times as long as the depth-less method ("Rendering" c.olumns in <ref type="table" target="#tab_0">Table  1</ref>). Precomputation is desirable because the image can be scaled, translated, transfer functions changed and intensity/opacity scaled, without recomputing the data structures.</p><p>Incoherent projection, our most careful and expensive method is more time-c,onsuming but freer from artifacts. Again we split the calculation into determining orientation-specific information and then rendering. T h e cost of re-rendering without orientation changes is not much worse than the method based on cell faces with depth.</p><p>T h e linear-time visibility sort used contributed only minimally to the cost of rendering. Multi-pass blending noticeably increased rendering time, by three or four times. However, the multi-pass method can produce smoother images.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusions</head><p>We discovered that projection methods do provide reasonable speed for volume rendering medium-sized curvilinear grids, far beyond what we could achieve with ray-tracing approaches. We found the versatility provided by a range of methods of varying speed and image quality very helpful. Use of transfer function banding provided a convenient and fast method of exploring volume contents, particularly when used with band cycling, and region restriction helps t o clarify image contents and relate it t o the original volume.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Typical projection of rectilinear cell and a few irregular hexahedron projections.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Illustration of Sweep Algorithm. When A connects to boundary in two places, a closed counterclockwise polygon is formed, and spliced out.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Structure for Banding: Only cells associated with upper right region need be drawn.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>DataVisibility Making Data Single-Pass New Viewpt. Rendering Times of Blunt Fin and Post Data. (Time in CPU seconds.)</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Multi-pass</cell></row><row><cell>Set</cell><cell>Method</cell><cell>Sort</cell><cell>Structures</cell><cell>Rendering</cell><cell>Total</cell><cell>Rendering</cell></row><row><cell cols="2">Blunt Fin Faces Without Depth</cell><cell>0.64</cell><cell>-</cell><cell>1.14</cell><cell>1.8</cell><cell>-</cell></row><row><cell></cell><cell>Faces With Depth</cell><cell>0.64</cell><cell>6.63</cell><cell>2.94</cell><cell>10</cell><cell>11.72</cell></row><row><cell></cell><cell>Incoherent Projection</cell><cell>0.64</cell><cell>37.56</cell><cell>3.52</cell><cell>42</cell><cell>12.05</cell></row><row><cell></cell><cell>Ray-Casting</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>170</cell><cell>-</cell></row><row><cell>Post</cell><cell>Faces Without Depth</cell><cell>1.65</cell><cell>-</cell><cell>3.02</cell><cell>5</cell><cell>-</cell></row><row><cell></cell><cell>Faces With Depth</cell><cell>1.65</cell><cell>21.76</cell><cell>10.99</cell><cell>34</cell><cell>39.76</cell></row><row><cell></cell><cell>Incoherent Projection</cell><cell>1.65</cell><cell>104.48</cell><cell>13.70</cell><cell>120</cell><cell>37.38</cell></row><row><cell></cell><cell>Ray-Casting</cell><cell></cell><cell></cell><cell></cell><cell>280</cell><cell>-</cell></row></table><note>- --</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ackiiowledgenient s</head><p>This research was supported in part by NSF PYI grant CCR-8958590, NSF New Technologies Program grant ASC-9102497, NSF Infrastructure grant CDA-9115268, and a NASA-Ames Research Center Cooperative Agreement Interchange No. NCC2-717. We thank Tom Goodman, Andy John, and Ron Mac-Cracken for their help in programming.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Object-Oriented rendering of volumetric and geometric primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Judy</forename><surname>Challinger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<pubPlace>Santa Cruz</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Califoria</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Loren (:arpenter, and Pat Hanrahan. Volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">A</forename><surname>Drebin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="65" to="74" />
			<date type="published" when="1988-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Christopher Giertsen. Volume visualization of sparse irregular meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Garrity</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Coniputer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="40" to="48" />
			<date type="published" when="1990-12" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">David Laur and Pat Hanrahan. Hierarchical splatting: A progressive refinement algorithm for volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ching-Mao</forename><surname>Hung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pieter</forename><forename type="middle">G</forename><surname>Buning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics (A CM Siggraph Proceedings)</title>
		<imprint>
			<biblScope unit="volume">154</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="285" to="288" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
	<note>J . Fluid Mechanics</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Display of surfaces from volume data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1988-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Nelson Max, Pat Hanrahan, and Roger Chawfis. Area and volume coherence for efficient visualization of 3d scalar functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><surname>Lucas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;92</title>
		<meeting>Visualization &apos;92</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1990-12" />
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
	<note>A scientific visualization renderer</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">An analysis of approaches to ray-tracing curvilinear grids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Ramamoorthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
		<idno>UCSC-CRL-92- 07</idno>
		<imprint>
			<date type="published" when="1992" />
			<pubPlace>Santa Cruz</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of California</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">A numerical study of three-dimensional incompressible flow around multiple posts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Rogers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kwak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">K</forename><surname>Kaul</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<pubPlace>Reno, Nevada</pubPlace>
		</imprint>
	</monogr>
	<note>AIAA paper 86-0353</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Right: C2ose-up with Incoherent Projection; Transfer Function Display alongside Blunt Fin Grid</title>
	</analytic>
	<monogr>
		<title level="m">Left: Comparison of Volume Rendering Methods on Blunt Fin</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
	<note>Post Image</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A polygonal approximation to direct scalar volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Shirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allan</forename><surname>Tuchman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="63" to="70" />
			<date type="published" when="1990" />
			<publisher>December</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Allen Van Gelder and Jane Wilhelms. Rapid exploration of curvilinear grids using direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Upson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Keeler</surname></persName>
		</author>
		<idno>CRL-93-02</idno>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="367" to="76" />
			<date type="published" when="1988-07" />
		</imprint>
		<respStmt>
			<orgName>NAS-NASA Ames Research Center</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Direct volume rendering of curvilinear volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naim</forename><surname>Judy C H A N G E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Alper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arsi</forename><surname>Ramamoorthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vaziri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="41" to="47" />
			<date type="published" when="1990-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A coherent projection approach for direct volume rendering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jane</forename><surname>Wilhelms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><surname>Van Gelder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics (Proceedings ACM Siggraph)</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="275" to="284" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Interactive splatting of nonrectilinear volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization &apos;92</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1992-10" />
			<biblScope unit="page" from="37" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Visibility ordering meshed polyhedra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="103" to="126" />
			<date type="published" when="1992-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E-Xploratiolz Of</forename><surname>Rapid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Curvilinear</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wilhelms</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="70" to="77" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Grids Usitzg Direct Volirme Reizde/-i11g, A . Van Gelder Figure 4: Left Comparison of volume rendering methods on blunt fin. Right: Close-up with incoherent projection</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
