<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DIVIDE: Distributed Visual Display of the Execution of Asynchronous, Distributed Algorithms on Loosely-Coupled Parallel Processors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><forename type="middle">M</forename><surname>Morrow</surname></persName>
							<email>tmorrow@us.oracle.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Oracle Corporation</orgName>
								<address>
									<addrLine>500 Oracle Parkway</addrLine>
									<postBox>Box 659304</postBox>
									<postCode>94065</postCode>
									<settlement>Redwood Shores</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Division of Engineering Brown University</orgName>
								<address>
									<postCode>02912</postCode>
									<settlement>Providence Rhode Island</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">DIVIDE: Distributed Visual Display of the Execution of Asynchronous, Distributed Algorithms on Loosely-Coupled Parallel Processors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The issue of monitoring the execution of asynchronous, distributed algorithms on loosely-coupled parallel processor systems, is important for the purposes of (i) detecting inconsistencies and flaws in the algorithm, (ii) obtaining important performance parameters for the algorithm, and (iii) developing a conceptual understanding of the algorithm's behavior, for given input stimulus, through visualization. For a particular class of asynchronous distributed algorithms <ref type="bibr">[1,</ref><ref type="bibr" target="#b4">5]</ref> that may be characterized by independent and concurrent entities that execute asynchronously on multiple processors and interact with one another through explicit messages, the following reasoning applies. Information about the flow of messages and the activity of the processors may contribute significantly towards the conceptual understanding of the algorithm's behavior and the functional correctness of the implementation. The computation and subsequent display of important parameters, based upon the execution of the algorithm, is an important objective of DIVIDE. For instance, the mean and standard deviation values for the propagation delay of ATM cells between any two given Broadband-ISDN (BISDN) nodes in a simulat'o of BISDN network under stochastic input stimulusidj, as a function of time, are important clues to the degree of congestion in the Broadband-ISDN network. Although the execution of the algorithm typically generates high resolution data, often, a coarselevel visual representation of the data may be useful in facilitating the conceptual understanding of the behavior of the algorithm. DIVIDE permits a user to specify a resolution less than that of the data from the execution of the algorithm, which is then utilized to coalesce the data appropriately. Given that this process requires significant computational power, for efficiency, DIVIDE distributes the overall task of visual display into a number of user specified workstations that are configured as a loosely-coupled parallel processor. DIVIDE has been implemented on a heterogeneous network of SUN sparc 1+, sparc 2, and 3/60 workstations and performance measurements indicate significant improvement over that of a uniprocessor-based visual display.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The domain of parallel processors is classified into two principal subdivisions -SIMD and MIMD. The "single instruction multiple data" (SIMD) class of parallel processors includes vector processors and is not the subject of discussion of this paper. The "multiple instruction multiple data" (MIMD) class of processors is more general and is further classified into shared mem-ory such as Sequent Balance 2000 and Alliant FX/80 and loosely-coupled processors such as the Bell Labs hypercube, nCUBE, ARMSTRONG <ref type="bibr" target="#b2">[3]</ref>, and PARAM <ref type="bibr">[38]</ref>. Debuggers for the shared memory parallel processors such as "Pdbx" for the Sequent Balance and for looselycoupled parallel processors such as the Ddbx-LPP <ref type="bibr">[35]</ref> for Armstrong <ref type="bibr" target="#b2">[3]</ref> may be utilized to verify the algorithm's correctness. A particular class of asynchronous distributed algorithms that are expressed through independent asynchronously executable models representing the entities of the underlying physical process and explicit message communication between the models, are of interest to the authors of this paper. Such algorithms for simulation <ref type="bibr">[1,</ref><ref type="bibr" target="#b4">5]</ref> and other disciplines such as distributed banking [37], promise significant speedups over the traditional uniprocessor algorithms and are most naturally modeled in the loosely-coupled parallel processor systems. Such systems provide the additional advantage of a testbed to study the scalability of algorithms. Since communication and memory are both distributed over the processors, the impact of simultaneous increase in the problem size and the number of processors on the performance of the algorithm may be studied. Furthermore, a number of different processor interconnection topologies may be studied for specific problems. Since human thought processes are essentially sequential, it is relatively easy to conceptualize the operation of a uniprocessor, executing a sequence of statements, one at a time. However, where multiple processors execute concurrently, asynchronously, &amp; cooperatively and exchange information asynchronously to solve a problem, the task of conceptualizing the algorithm's behavior becomes extremely difficult. The amount of information generated in the course of such executions in the form of textual lists of values, may be large and, conceivably, a visual representation [33] of the data may greatly facilitate comprehension. Previous research in the area of modeling and displaying the activity of a parallel processor system includes PARET <ref type="bibr" target="#b6">[6]</ref>,PIE <ref type="bibr" target="#b7">[7]</ref>,POKER <ref type="bibr" target="#b8">[8]</ref>  <ref type="bibr" target="#b13">[13]</ref>, a predecessor of DI-VIDE, addressed many of the limitations of PARET and POKER. Although it proved useful to assist in the debugging of a few asynchronous distributed algorithms, its limitations include the following. MADCAPP lacks the ability to (i) compute and display important parameters such ean and standard deviation of measured quantities,? 11 coalesce high-resolution data into userspecified coarse-grain data through extensive computation and display to facilitate comprehension of the algorithm's behavior, and (iii) utilize multiple processors for distributed visual display of large systems. IBM's RP3 [42] visualization environment attempts to visually represent the state and progress of a parallel application or system in a continuous graphic fashion. The goal of RP3 is to facilitate the programmer's observation of anomalies during execution, debugging, and an understanding of program (mis)behavior. This paper presents a new approach-DIVIDE, that addresses the problems of MADCAPP and other debuggers that use uniprocessors to model the execution of a loosely-coupled parallel processor. DIVIDE distributes the tasks of analysis, computation, and graphical display of the data among multiple workstations to achieve significant speedup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Visual Display of Parameters</head><p>In the course of execution of asynchronous, distributed algorithms, a visual display of one or more parameters, as a function of time, may greatly assist in the comprehension of an algorithm's behavior. For instance, consider the di tributed simulation of a broadband-ISDN network [20r on a number of concurrent processors. A display of the average time required by a ATM cell for propagation between a given pair of nodes, may provide good clue to the state of congestion in the network. Other parameters of interest include the size of the output buffers of a B-ISDN node and the link utilizations. For a given algorithm, the parameters of interest are selected and embedded into the program by the user. Data, corresponding to the parameters of interest, are generated during execution and are intercepted by DI-VIDE. In general, the data, generated during simulation, corresponds to the basic simulation timestep and is, thus, at a very high resolution. While a visual display of such detailed data is necessary for comprehending small-scale effects such as local congestion, for large-scale effects such as link utilization and average ATM cell propagation times, the data may need to be coalesced to yield average values over longer, user-defined time periods. Thus, for the simulation example, the original data with a resolution of a microsecond is condensed by DIVIDE utilizing a user-specified time period of say, a second. The design of DIVIDE calls for fast visual display to permit the user to specify new values for the time period and view the display almost immediately. This, in turn, mandates fast condensation of the original data. In the current implementation of DIVIDE, the original data is stored in a file through a few distinct entries, some of which are elaborated as follows. Every line of data in the file corresponds to a change in the value of the parameter.</p><p>An integer identifier representing the "time" of the change. The time refers to the simulation time and the specification is with respect to the unit of the basic timestep.</p><p>A flag indicating the direction i.e., increasing or decreasing, of the change associated with the parameter. The absolute value of the change is always unity.</p><p>A set of integers identifying the physical entity such as the link or node in the B-ISDN network, associated with the parameter. Assuming that the condensation process includes the computation of the average value of a parameter, for a user-specified time-period, the new value is computed as follows. The products obtained from multiplying the value of the parameter at every sampled time with the length of the sampled time, over the entire time-period, are added together, and then divided by the length of the time-period. Conceivably, a parameter's value may remain unchanged over a number of basic timestep. In <ref type="figure">Figure 1</ref>, the average value of the parameter, over the user-specified time-period of 20 basic timesteps, is obtained through the equation: Sum = 3*4 + 4*3 + 5*6 + 4*2 + 3*5 = 77. Therefore, the average is computed as 77/20 = 3.85.</p><p>The standard deviation for this time-period is computed analogously to the mean. Unlike for the case of the mean, the difference between the value of the parameter and its average is computed for every sample point and then squared and added. The intermediate value is then divided by the width of the time-period and, finally, its square root yields the desired standard deviation. While the traditional method of computing these values utilizes addition as opposed to a combination of multiplication and addition, the technique utilized here promises faster speed particularly where the parameter changes slowly with time. In general, for asynchronous distributed algorithms, the parameters of interest are expected to change slowly with time. For the algorithm detailed in [20] that DIVIDE utilizes for testing, the average time between two subsequent changes of a parameter is 3.1 timesteps. Given the significant number of parameters of interest in a typical algorithm and the si nificant amount of computations associated with the fetermination of the mean and standard deviation values, to achieve higher performance, the tasks in DIVIDE are distributed among multiple processors. In <ref type="figure" target="#fig_1">Figure 2</ref>, the top two windows, constituting a partial display of a fifty node network simulation, are physically located on the respective workstations Wl and Wz. The visual network display is located at the top of each window while the buffer graphs are positioned near the bottom. The control window, situated immediately beneath the first display window on workstation W l , dictates the execution of all of the display windows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Issues in User Interface Design</head><p>Movement Controls Following the analysis of the data, the result consists of an array data structure in the main memory that contains the values o the mean and standard deviation for every output buder for every time-period. The issues in user-interface design include (i) whether to display the values simultaneously or serially and (ii) the nature of control over the display that the user may be permitted. In DIVIDE, the user selects the parameters of interest such as the specific output buffers to be displayed, and DIVIDE displays both the mean and the standard deviation values as a function of time. Additionally, DIVIDE permits the users to "move" to any "position", in time, within the result, quickly and accurately. The "position" refers to the specific time-period that is currently displayed by DIVIDE. This promises to harness the user's intelligence to determine the timeperiods of importance, move to examine them, compare them with those corresponding to other time-periods, and look as little or as much as necessary at any particular time-period's results. The more control a user has over the visual display, the more comfortable one is likely to feel and the more one can accomplish <ref type="bibr" target="#b18">[18]</ref>. To permit the user to "move" within the results, three mechanisms for movement control are developed in DI-VIDE. The first technique consists of a group of tapeplayer type buttons and are labeled -"play," "step," "stop," and "play period." Following the activation of the "play" button, the display windows on the workstations are updated periodically with monotonically increasing time-period, until the "stop" button is depressed. The duration of the pause between the displays of two subsequent time-periods may be adjusted through the "play period" button. The user is prompted to enter the the value, in milliseconds. To freeze the display, the user may depress the "stop" button. The visual display resumes from the most recent time-period when the "play" button is depressed again. The "step" button permits the user to advance only to the subsequent time-period and display the corresponding result. The second mechanism consists of the "jump bar" that is designed to alter the current position within the data. Thus, unlike the absolute "position bar," detailed subsequently, "jump bar" is a relative positioning system. This mechanism is analogous to the "jog shuttle" dial available on expensive video-cassette recorders. The "jump bar" is implemented on a rectangular area of the screen, with arrows pointing left and right. While the right arrow permits forward movement, the left arrow allows backward movement, relative to the current timeperiod. The amount of jump, selected by the user by clicking the mouse, is exponentially proportional to the distance of the cursor from the center of the jump bar. This permits the user to exercise fine control over the jumps i.e., while large jumps may be achieved by clicking at the far ends, smaller jumps are realized through clocking near the center of the jump bar.</p><p>The final technique consists of the "position bar" that is implemented through a long horizontal rectangle with a short vertical rectangle located on the bar. While the long rectangle represents the entire data set, the vertical rectangle, referred to as the "position indicator," represents the location within the set that corresponds to the current visual display. To move the display of the simulation results anywhere in time, one may click at an appropriate location within the horizontal rectangle. In addition, a number of the form ",/E," where T represents the current simulation time in timesteps and E the maximum simulation time, in timesteps, of the data, is shown at the left of the bar. Thus, the jump bar along with the position bar offer the user a far greater degree of control and its design therefore, is superior to that of the traditional scroll-bar. Although the three positioning systems enjoy a degree of redundancy, their design is intended to facilitate the user's choice of visualization. For constant, monotonic forward steps, one may chose the tape-player style controls. For large absolute jumps, one may chose to use the position bar controls. For relative jumps of arbitrary amounts in either forward or backward directions, one may utilize the jump bar. The RP3 [42] visualization environment also provides control over the replay of execution history from trace files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Issues in the Design of the Graphical Display</head><p>Network Display: The mean sizes of the buffers associated with pairs of nodes are represented through the length of elongated rectangles placed along the axes of the corresponding links in DIVIDE. The statistical deviation is expressed, for efficiency, through the color of the rectangle <ref type="bibr" target="#b15">[15]</ref>. While pure red represents a value of unity or greater than unity for the deviation, pure blue indicates zero deviation, and the intermediate values are expressed through different shades of purple (between red and blue). To update the visual display quickly, DIVIDE implements the following basic steps efficiently.</p><p>0 For every buffer, where the size is smaller than at the last update, the difference is erased by redrawing it in background color.</p><p>Redraw the lines interconnecting the nodes.</p><p>0 For each buffer, the new buffer rectangle is redrawn with its correct size and color over that of the old one. Buffer Graphs:</p><p>In addition to the visual display of the simulation network, termed "network display," DIVIDE graphs the variation of the mean and standard deviation, as a function of time, of important parameters such as output buffers for the Broadband-ISDN simulation <ref type="bibr" target="#b20">[20]</ref>. At the bottom of the network display, each of the three boxes correspond to an output buffer, selected by the user. While the mean of a parameter is represented through the height of the raph, the horizontal axis represents time. Whenever t f e simulation time proceeds forward by one time-period, a yellow line is extended from the previous to the current mean value, and a vertical orange line is appended to the graph. The length of the orange segment reflects the value of the standard deviation for the current time-period. All of the three graphs in the boxes are maintained in sync i.e., the corresponding vertical positions of the graphs are placed directly beneath one another. This facilitates visual analysis of the behaviors of and the interactions between the quantities. When a buffer between a pair of nodes is selected by clicking in the network display, the corresponding graph is immediately displayed in the uppermost of the three boxes. The graph that may have been resident in this box is pushed down to the middle box while that in the middle box will be shifted to the lowermost box. Thus, the user may select all three graphs for visual analysis, quickly, through three clicks. It is argued that such convenience and speed will greatly encourage users to examine many different relationships.</p><p>To alter the size of a box, the user may click on the square "grip" to the right of the box and drag the grip up or down. An upward drag will increase the size of the box while a downward drag will decrease its size. Where one of the boxes is deemed more important than the others, it may be extended in size to eclipse other boxes. Following any change, an automatic mechanism will scale the graphs to ensure a constant ratio between the upper limit of the graph and the size of the box. Where necessary, the user may pull one or more boxes towards the lower part of the screen, using the grips, and thereby allow more room for the network display. Thus, DIVIDE allows the user to manipulate the visual display directly and research <ref type="bibr" target="#b16">[16]</ref> supports this approach to intuitive user interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Issues in Layout Design of the Graphical Images of the Concurrent Processes</head><p>The autonomous, independent, and concurrent entities of an asynchronous, distributed algorithm are represented in DIVIDE through circles on a two-dimensional layout. The connections between the entities are modeled through lines between the appropriate circles. The identifiers of the entities are expressed through texts within the circles. This choice is primarily influenced by the speed and efficiency of redrawing on the computer screen. An important issue in DIVIDE is to place the nodes on the layout such that no link between any pair of the nodes is eclipsed by any node. For reasons of simplicity and efficiency, a circular layout with circles to represent nodes and straight lines to model communications links is chosen. In a circular layout, given sufficient spacing between the geometric objects along its circumference, no three nodes will be collinear. The choice of a rectangular layout is eliminated given that where nodes represented through geometric objects A, B, and C are collinear, a link from A to C may be eclipsed by the node B. The choice of the size of the circles is based on the limited size of the layout and the desire to express important information, pertaining to the node, within the circle. Where a larger network must be represented, a large value for the radius of the circular layout and a smaller size for the circles, representing the nodes, may be chosen. For a smaller network, the circles may be larger and the radius of the circular layout may be chosen to be small. For a circular layout of a given maximum radius "R" <ref type="figure">(Figure 3)</ref>, maximum width of a link "L," the maximum number of circles that may be placed along the circumference, each of radius "r," is computed as the greatest integer less than or equal to Where r &lt;&lt; R and L &lt;&lt; R, the maximum number of nodes is approximately proportional to R. Since the area of the layout is proportional to the square of R, the size of the display grows as the square of the number of models to be displayed. Given this quadratic dependence, for efficient display of simulations of large systems, the displays in DIVIDE are distributed over multiple, heterogeneous workstations that are configured as a loosely-coupled parallel processor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Dynamic Scaling</head><p>As the simulation progresses, many of the graphs may exhibit a tendency to grow, reflecting the increase in the value of a parameter. To limit the graphs from exceeding the bounds of the rectangular box, DIVIDE implements an automatic scaling mechanism. When a graph reaches the maximum measure, the scale is reset such that the new maximum value of the scale is approximately 130% of the current maximum value. When a graph reaches the extreme right edge, it is cleared and restarted from the extreme left edge. A graph is also cleared when the user uses either the position bar or the jump bar to move by more than one time-period. This ensures that the graph is always non-overlapping and contiguous. DIVIDE lacks a formal mechanism to modify the scales of the graphs. To achieve reduction of scale, the user may reselect the buffer and "play" the simulation until the graph reaches the limit of the scale. Additionally, to avoid repeated scaling, the user may first play the relevant periods of all of the displayed graphs where they reach their maximum values. This will establish the appropriate scales. Then, the user may re-play the simulation from the start. The dynamic scaling strategy is inappropriate for the network display for two reasons. First, a single large value associated with a buffer may imply that the remainder of the buffer sizeseare scaled down to near invisibility for the entire duration of the simulation. Second, based on the placement of the nodes on the screen, the maximum length for the display of the buffer sizes corresponding to each node pair is not constant. However, a scaling mechanism is essential because, without it, a buffer size may increase greatly thereby causing the corresponding bar to extend beyond the length of the underlying link and erase other parts of the screen. In DIVIDE, the mean values of the buffer sizes for every node pair are represented through rectangles along the links. At every time period, all buffer sizes are scaled with respect to a scaling factor and the choice of the factor is such that the rectangle corresponding to the most "constrained" buffer is nearly maximum. For every node pair X and Y , a ratio of the sum of the buffer sizes at X and Y to the length between X and Y on the screen is computed. This ratio corresponds to a measure of the density of the mean buffer size with respect to the display length. The maximum of the ratios of all node pairs is determined and is referred to as the scaling factor. The buffers of the corresponding nodes is referred to as "constrained." Thus, for a different node pair M and N, the length of the corresponding rectangle is given by the sum of the buffer sizes for M and N, divided by both the distance between M and N and the scaling factor. In reality, the scaling factor is chosen to be slightly smaller than the maximum ratio for the following reason. For a node pair {P,Q}, where the density is close to the scaling factor and the buffer size for P is extremely small relative to that for Q, a discontinuity between the linear display from Q to P and that from P to Q will distinguish the individual mean buffer sizes.</p><p>Conceivably, the scaling factor may change abruptly from one time period to the subsequent one. The presence of this discontinuity is a limitation of DIVIDE. While the present mechanism reacts well to impulse spikes in the mean buffer sizes, automatic adaptive mechanisms to smooth the abrupt changes, that are currently under investigation, suffer from reduced dynamic range.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Distributing the Visual Images of the Concurrent Processes</head><p>It has been observed that for visualization of large networks, a single processor suffers from limited screen space and extensive computational requirement, an associated bar can only represent the characteristics of the buffer from the regular node to one of the nodes in the gateway node. The gateway lines cannot display the buffer characteristics from a gateway node to a regular node for, otherwise, significant amount of data must be transferred from other workstations. This approach, however, is limited in that only a single gateway line connects a regular node to a gateway node even though the regular node is connected to two or more nodes of the workstation represented by the gateway node. Thus, the bar displays the cumulative characteristics of the corresponding buffers. The workstation, designated central control, by DIVIDE communicates the analysis and display commands to other workst tions via the use of internet stream sockets. o estabish a c nnection between tbe central commanzand other wortstations, the following set of steps are executed. First the user executes the control program, specifying the number of other workstations that will be connected, as a command line argument. Then, each of the processes on the other workstations are executed. The host name of the command workstation is specified along with the view name as command line arguments. This machine will announce each connection from other workstations as it is established. When all of the connections have been established, DIVIDE pops up a control panel window with buttons and positioning tools. Next, the user must choose and specify the analysis period to enable the processing of the data in the respective machines. As a part of this step, the user depresses the button marked "Analysis Period: Unknown." DIVIDE prompts the user to type in the desired analysis period in the control panel. Upon the user's specifying, control messages are propagated from the control panel to every other workstation requesting analysis and visualization. Finally, the user may adjust the positioning controls to view the display. The command messages are very compact, typically requiring no more than 1 to 25 milliseconds for propagation between workstations. In general, a command message contains a command code and one or more integer arguments. For instance, when the user wishes to re-analyze, the control workstation must propagate the new value for the time period and the time value up to which data must be analyzed and displayed. Following the analysis, the workstation returns a message to the command workstation informing of the amount of data that has been analyzed. When the user alters the current time period of display, a message containing the new time is sent to the-workstations.. The workstations update their current time period, utilizing the previously analyzed data. When the "quit" button is denodes of * i . Yhus, in general, a workstation may display multiple dotted circles and multiple gateway lines may interconnect the regular nodes of the workstation with any of the dotted circles. For each gateway line,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Implementation Details</head><p>DIVIDE is written in non-ANSI Sun and implemented on It utilizes the Athens widget set to create subwindows and collect input events. Except for the buttons, all of the subwindows are Athena form widgets to which customized translations are added to call the routines that (i) redraw and (ii) choose input events that correspond to the mouse clicks in the window. DI-VIDE is organized through two executable subprograms -"control" and "display" each of which are further decomposed into 6 and 7 modules respectively. This organizations permits fast recompilation and better access to specific code segments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Performance of DIVIDE</head><p>The architecture of DIVIDE permits individual workstations to accept short messages from the command workstation and then execute the computations locally and independently. Each workstation accesses the data, in read-only mode, for the nodes that it displays. In addition, once the workstations start analyzing the data, no further communication is required between them and this asynchronism implies efficiency of resource usage. DIVIDE as been executed for broadband-ISDN simulation [2Ofand distributed, real-time banking algorithm <ref type="bibr" target="#b24">[23]</ref>. The overall task of visual display is decomposed into subtasks of nearly equal sizes through allocating equal number of nodes among the workstations. Experimental results indicate that, for the algorithms under consideration, the variation in the completion times of the display activities on the workstations, is less than 10%. In addition, the overall execution time is observed to be nearly inversely proportional to the number of workstations utilized for a given network.</p><p>In an experiment, the data from an algorithm requiring 50 nodes of a loosely-coupled parallel processor, is analyzed for the purpose of visual display. The analysis included 1000 timesteps and a time period of 10. The overall visual display task requires 44 CPU seconds when implemented on a single Sun sparc 2 workstation. When the same task is completed in DIVIDE, utilizing four identical workstations, the overall task requires 13</p><p>seconds. Thus, a speedup of 44 + 13 = 3.4 is achieved for a four-fold increase in the number of computational engines. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>An Actual Screen Display in DIVIDE.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>lo], dbx- tool [ll], Provide [12], and Ddbx-LPP [19] being</head><label></label><figDesc>,PAW [10],and SIMON [ 111. The EXPRESS [13] environment, designed for debugging and testing parallel programs on parallel processors including transputer based systems, is limited. It uses a set of global communication utilities instead of explicit message passing. As a result, communication is not distributed and this model does not realistically represent the flow of information in true distributed algorithms.Furthermore, it raises the poissibility that the privacy of data in a processor may not be honored. Most recent work in debugging loosely-coupled systems include the application of the traditional uniprocessor breakpoint debugger to a distributed system, ndb [</figDesc><table><row><cell>ex-</cell></row><row><cell>amples of such types of debuggers. While Provide [14]</cell></row><row><cell>claims to employ interactive graphics, it is limited in</cell></row><row><cell>that it is a prototype, based on a simplified program-</cell></row><row><cell>ming language. MADCAPP</cell></row></table><note></note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An Asynchronous Distributed Approach for the Simulation of Behavior-Level Models on Parallel Processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M-L</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1988 International Conference on Parallel Processing</title>
		<meeting>the 1988 International Conference on Parallel Processing<address><addrLine>St. Charles, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Operating System and Applications of the Armstrong Multiprocessor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Rayfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">F</forename><surname>Silverman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="1988-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Distributed Discrete-Event Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Misra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="39" to="65" />
			<date type="published" when="1986-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Modeling Multicomputer Systems with PARET</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Nichols</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Edmark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="page" from="39" to="48" />
			<date type="published" when="1988-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Segall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Rudolph</surname></persName>
		</author>
		<idno>38-52</idno>
	</analytic>
	<monogr>
		<title level="j">PIE: A Programming En</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Instrumentation Environment for Parafel Processing</title>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<date type="published" when="1985-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Parallel Programming and the Poker Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Snyder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="page" from="27" to="36" />
			<date type="published" when="1984-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visual Simulation: The Performance Analysis Workstation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Melamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="page" from="87" to="94" />
			<date type="published" when="1985-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Multiprocessor Simulation Program Simon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Heller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Shell Development Co</title>
		<imprint>
			<date type="published" when="1984-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An Introduction to Parallel Programming and Transputers</title>
	</analytic>
	<monogr>
		<title level="m">Parasoft Corporation</title>
		<meeting><address><addrLine>Mission Viejo, CA 92692</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m">MC68000 16-bit Microprocessor User&apos;s Manual</title>
		<meeting><address><addrLine>New Jersey</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m">Private communications with Jon Flower, Parasoft Corporation, 2500 E. Foothill Blvd., Suite 205</title>
		<meeting><address><addrLine>Pasadena, CA 91107</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Parallel Programming in Comfort</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jon</forename><surname>Flower</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roy</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third Hypercube Conference</title>
		<meeting>the Third Hypercube Conference</meeting>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="page" from="811" to="821" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colin</forename><forename type="middle">W</forename><surname>Gillis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
		</author>
		<idno>No. 73</idno>
		<title level="m">MADCAPP: Measurement and Analysis of High-level Communications of Asynchronous Distributed Algorithms on Parallel Processors</title>
		<meeting><address><addrLine>Providence</addrLine></address></meeting>
		<imprint/>
		<respStmt>
			<orgName>Division of Engineering, Brown University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">LEMS Technical Report</note>
	<note>R.I. 02912</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Provide: A Process Visualization and Debugging Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">G</forename><surname>Moher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="1988-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A false-color look-up table for images of large dynamic range</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Thomas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal or Applied Crystallography</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="498" to="499" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">User Interface Design for Analytical Instruments: Art or Science?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Williamb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Barnett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Analytical Chemistry</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">20</biblScope>
			<biblScope unit="page" from="1169" to="1175" />
			<date type="published" when="1988-10-15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Visualization in Scientific and Engineering Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><forename type="middle">M</forename><surname>Nielson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">September</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="58" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">User-Interface Developments in the Nineties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Marcus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andries</forename><surname>Van Dam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="page" from="49" to="57" />
			<date type="published" when="1991-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Ddbx-LPP: A Dynamic Software Tool for Debugging Asynchronous Distributed Algorithms on Loosely-Coupled Parallel Processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mariano</forename><forename type="middle">G</forename><surname>Fernandez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics</title>
		<meeting>the IEEE International Conference on Systems, Man, and Cybernetics<address><addrLine>VA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="639" to="644" />
		</imprint>
		<respStmt>
			<orgName>University of Virginia in Charlottesville</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Modeling and Distributed Simulation of Complex Broadband ISDN Networks Under Overload on Loosely-Coupled Parallel Processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anish</forename><surname>Bhimani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Accepted for Publication in the International Conference on Communications</title>
		<meeting><address><addrLine>Chicago, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">NOVADIB: A Novel Architecture for Asynchronous Distributed Real-Time Banking Mod-22-37</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<idno>VA 22903</idno>
		<title level="m">Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics</title>
		<meeting>the IEEE International Conference on Systems, Man, and Cybernetics</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="2061" to="2066" />
		</imprint>
		<respStmt>
			<orgName>University of Virginia in Charlottesville</orgName>
		</respStmt>
	</monogr>
	<note>eled on Loosely-Coupled Parallel Processors</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The Observer of Business and Politics</title>
	</analytic>
	<monogr>
		<title level="m">PARAM: Scalable Architecture from the C-DAC</title>
		<meeting><address><addrLine>Pune, India; Bombay</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-03-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A Distributed Algorithm for Real-Time Payments-Processing in a Partially-Connected Network of Banks Utilizing the Broadband-ISDN Protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumit</forename><surname>Ghosh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Submitted to Simulation -Journal of the Society for Computer Simulation</title>
		<imprint>
			<date type="published" when="1992-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Private communications with Andy van Dam</title>
		<imprint>
			<date type="published" when="1991-11" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
