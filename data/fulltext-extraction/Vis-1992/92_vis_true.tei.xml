<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Volume Warping *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">J</forename><surname>True</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Digital Equipment Corporation Maynard</orgName>
								<address>
									<postCode>01754</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Volume Warping *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: 1.3.5 [Computer Graphics]: Computational Geometry and Object Modeling; Curve</term>
					<term>Surface</term>
					<term>Solid</term>
					<term>and Object Representations;</term>
				</keywords>
			</textClass>
			<abstract>
				<p>W e present volume warping, a technique for deforming sampled volumetric data using B-splines that is related t o image warping and to the free-form deformations of Sederberg/Parry and Coquillart. W e accelerate the process t o near-real-time speed, and explain the compromises that are made t o eflect such speeds. This technique expands the repertoire of volumetric modeling techniques, and can be applied t o any f o r m of volumetric data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>If f is a smooth real-valued function on 3-space, an isosurface of f , is the set of points Sa = {z, y, z : f (2, y, z ) = U}. If the function f is chosen in order to create an isosurface with a particular shape, we call f a volumetric model. Thus the function f(z, y, z ) = z2 + y2 + z2 -1 is a volumetric model of a unit sphere; the level set So is the sphere.</p><p>Various authors have described volumetric models. <ref type="bibr">Blinn [2]</ref> made "blobby objects" by computing an isosurface of the potential arising from charged points; Wyvill et al. 141 extended this idea to create "soft objects"; Bloomenthal and Shoemake [3] described convolution surfaces that arise from extending soft objects.' In a subclass of volumetric models that we call sampled volumetric models, the function f is John F. Hughes Brown University Providence, RI 02912 known only at an array of points in 3 -s p a~e .~ Much medical imaging data falls into this category, and there are other examples as well: <ref type="bibr">Galyean and Hughes [lo]</ref> describe a method of sculpting volumetric models.</p><p>With sampled volumetric data, one must infer the values at the non-lattice points. If the data comes from sampling of a band-limited function, one can reconstruct by convolution with a sinc filter, but this is impractical for large data sets. Instead, one often computes the value at non-lattice points by some simple interpolation method.</p><p>Sampled volumetric modeling, i.e., altering sampled volumetric data in prescribed ways, is comparatively new and has not received as much attention as polyhedral modeling. There is a wide spectrum of polyhedral Here we describe a technique for deforming sampled volumetric models called volume warping, which is closely related to image warping. We view this as a step towards unifying volumetric and surface-based models; we look forward to seeing the two forms of modeling become tightly interwoven. This work is also related to scientific visualization, as volumetric data may be best viewed after applying some distortion (to cancel out distortions in the original sampling, crudely compensate for registration errors, expand a region of interest while contracting the rest of the data, etc.) Volume warping, as described here, is feasible only for relatively small data sets, at least at the interactive speeds necessary to make it practical. Most of our illustrations show models of size 30 x 30 x 30.</p><p>To give an example, suppose you want to lower the neck of the teapot in <ref type="figure" target="#fig_11">Figure 6</ref>, created using the SCULPT program <ref type="bibr">[lo]</ref>. To do this you would erase the neck and re-sculpt it lower down (just as in 3Medical imaging data is not collected with the intent of generating a particular isosurface shape; however, once it is collected, one often extracts surfaces from the data. sketch). With volume warping, however, you could alter the space in which the model resides so as to move the portion containing the neck (see <ref type="figure" target="#fig_12">Figure 9</ref>). The idea underlying this deformation technique is best understood by analogy with image warping: if you draw an image on a rubber sheet and then deform the sheet, the image is deformed. Our model actually more closely resembles the two-step warping available with Silly Putty: press Silly Putty on newsprint so that some of the newspaper ink sticks to the Silly Putty. Then stretch the Silly Putty and press it down onto blank paper: the ink transferred to this new sheet prints a deformed version of the original picture. In our method, the (3D) analogue of the Silly Putty surface is the domain voxmap, that of the original picture is the source voxmap, and that of the final picture is the target uoxmap. The domain-source correspondence is defined by one B-spline map used to "capture" the original data and the domain-target correspondence is defined by another used to "write" the data. These two maps are typically not very different; each time we adjust the writing map, we alter only a small part of the target voxmap, and hence manage to get some computational efficiency from the localcontrol properties of B-splines.</p><p>This basic idea depends on a "continuous" world, but this paper describes an implementation of it in a discrete world, using sampled volumetric models. This leads to certain complications addressed below.</p><p>Before we give the details of the method, we want to mention several points:</p><p>This paper presents only a method for implementing volume warping, and not a user interface for it. See Section 7, however, for a simplified approach to describing a warp.</p><p>The technique is not particularly fast, because volume data sets tend to be huge. We give some timing data in Section 8.</p><p>The technique has an advantage over direct deformations of polygonal models, in which boundaries between large polygons tend to crease: since our isosurfaces comprise polygons of approximately constant size, creases do not tend to appear.</p><p>Volume warping acts on the space in which a model lies rather than on the things used to define the model. Volume warping is not appropriate for spline patch models, for instance. By contrast, when one has implicitly volumetric data, volume warping can be quite powerful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Mathematical Description</head><p>We call the function f defining a volumetric model the density because it describes where material is: a density of one means the material is there, a density of zero means the space is empty, and the isosurface where the density is 1/2 is the boundary between the inside and the outside of the material. In this section, we consider the density function as defined on the unit cube; its values outside the unit cube are everywhere zero. Thus the function denotes the presence or absence of material.</p><p>If we have a function from the unit cube to i t~e l f ,~</p><formula xml:id="formula_0">B : (2, Y, 2) (B"(z, Yl z ) , BY(z:, Y, z ) , B 2 ( z , Y,</formula><p>then we can build a different density function on the cube as follows: the new density is computed by first applying the map B and then evaluating the original density function at the resulting point. The new density is therefore</p><formula xml:id="formula_1">d ' k , Y, 2 ) = d(B"(z, Y, z ) , BY(z, Y, z ) , B2(X1 Y, Z)),</formula><p>which we call the pullback of the original density function by the map B (see <ref type="figure" target="#fig_2">Figure 1</ref>). There is another way to combine a map B and a density function d: we can define a new density function on the codomain of B as a pushforward of a density on the domain, as shown in <ref type="figure" target="#fig_2">Figure 1</ref>. Here, however, the description is not quite so simple. If B is injective, we can look for the point <ref type="bibr">(z,y,z)</ref> that is sent by the map B to each codomain point W . The value of the new density function at W is just the value of the original function at the corresponding domain point (and is zero if W is not in the image of the map B ) . This technique is fine if the map B is injective. If not, however, some sort of average over all the points in the preimage is needed. This is adequately handled during filtering (see Section 6).</p><p>The volume-warping process, as shown in <ref type="figure" target="#fig_3">Figure 2</ref>, uses both of these techniques. We start with a volumetric model, i.e., a density function d on a unit cube called the source S. We create a particular B-spline map B from another unit cube, the domain D, to S , and pull back the density function from S to D to get a new density function d'. We then define another Bspline map B from the domain to a third unit cube, the target T . We push forward the density d' from D to get a new density function d" defined on T .  The density on the target T is the warped version of the original density function on S . If the B-spline maps B and B differ only slightly, then the isosurfaces of the source and target density functions are quite similar and the term "warped" is justified.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Warping Sampled Volumetric Data</head><p>The previous section described functions defined on an entire cube. With sampled volumetric data, however, we have only samples of the functions. We therefore work with approximations of the functions represented by the samples: rather than proper reconstruction with the sinc function, we use box filters repeatedly. The aliasing thus introduced has not been a substantial problem.</p><p>The constants used in the program are 0 ISIZE: the model to be warped is an ISIZE x ISIZE x ISIZE array of values between 0 and 255; by scaling, these represent density values between 0 and 1, and the object described by the model is an isosurface for value = 127.</p><p>0 SSIZE: the source voxmap is an SSIZE x SSIZE x The original SSIZE array of unsigned bytes. model is read into the center of this array (SSIZE must be greater than ISIZE) and the remainder of the source voxmap is padded with zeros. an array of control points is defined for values of s, t, and U between 0 and CSIZE -3. The ratio of DSIZE to CSIZE -3, which we call the granularity, must be an integer for the rapid spline evaluations of Section 4 to work.</p><p>Our two B-spline maps are defined on the domain with the help of the B-spline basis functions and the CSIZE x CSIZE x CSIZE array of control points Pijk. We first establish a correspondence between points in the domain and points in the cube </p><formula xml:id="formula_2">[0, CSIZE -31 x [O, CSIZE -31 x [0, CSIZE -31.</formula><formula xml:id="formula_3">Bo(t) = (1 -t ) 3 / 6 , B l ( t ) = (3t3 -6t2 +4)/6 &amp; ( t ) = (-3t3 + 3t2 -I-3t + 1)/6, B3(t) = t 3 / 6</formula><p>These basis functions are used to blend the control points, taken in groups of 64, as follows. For integers a, b, and c between 0 and G-1, we define the B-spline function on the subcube s E [a, a + 11, t E [b, b + 11, U E [c, c + 1 1 of the domain (which we call a region) by using the control points Pijk, for a L i &lt; a + 3, b 5 j &lt; b + 3, and c 5 k &lt; c + 3. The general form for the function on this region is B" <ref type="figure">(% t, U )</ref> (2)</p><formula xml:id="formula_4">3 = B;(s -a)Bj(t -b ) B k ( U -C)P:+i,i,+j,e+k i,j,k=O</formula><p>with similar terms for BY and B". Note that there are G x G x G regions and that altering one of the control points alters the functions values in only a subset of the regions, so that we have local shape control.</p><p>To specify the B-spline maps, we need to give the locations of the control points. Suffice it for now to say that, to define the map used to "capture" the original data into the domain voxmap from the source voxmap, we place the points so that the image of the entire domain voxmap under the B-spline is exactly the central ISIZE x ISIZE x ISIZE subcube of the source voxmap.</p><p>The capture map is used to pull back the original density function from the source voxmap to the domain voxmap. This step is done only once. After this, the array in which the source data was stored ceases to act as the source and becomes the array in which the target data is stored. (This is the reason the original data was put in the center of a larger array: we want to let the model be stretched along some direction.)</p><p>We now use the same control points to define a Bspline map from the domain to the target voxmap. We can alter the map by moving its defining control points. Then the density is pushed forward from the domain to the target to produce the warped sampled volumetric data set. Precise details of pushing forward the discrete data values are given in Section 6. Here, we describe how to compute the values of a B-spline map at each point in the domain, since these maps are used both to pull back the original data from the source and to push it forward into the target.</p><p>Note: for each point in the domain of the altered 3D B-spline (the "writing map"), we evaluate the Bspline function to get another 3D point (Equation <ref type="formula">2</ref>shows how to compute B(s, t , U ) ) . We record the resulting locations in a 3D array of 3D points called the deformation mapping array.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Rapid Evaluation of B-splines</head><p>We need to compute the B-spline maps rapidly, since they are applied to each voxel in the domain. The standard way to do this with B-splines would be incremental computation <ref type="bibr">[9]</ref>, but there is a faster method available in our situation.</p><p>Consider Equations (1) and (2). Since the domain size is an integer multiple of the control-mesh size, the fractional parts of s, t , and U used in the B-spline evaluation in Equation (2) are the same for points in any region (they in fact have <ref type="figure">values O/G, ..., (G -. l )</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>/ G . ) .</head><p>Thus if we denote by bij the coefficient of tJ in the ith basis function of Equation <ref type="formula">2</ref>, we can rewrite the formula for B" (s, t , U ) as and we see that only powers of the fractions above are involved in the computation.</p><p>We therefore precompute the values . We then calculate the sum in (2) by the simple 64-term sum</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Filling in the Details</head><p>We now can complete the overall structure of the program.</p><p>Initialization. We begin by reading the original density function into the center of the source voxmap;</p><p>we set up the control points as described in Section 7, and thus define a map from the domain voxmap to the source voxmap. We use this map to pull back the density function from the source voxmap to the domain voxmap: for each index (e, f , g ) in the domain voxmap, we evaluate the B-spline and round to get a triple of integers between 0 and SSIZE, which we use to index into the source voxmap; the density value found there is placed in domain[e][f] <ref type="bibr">[g]</ref>.</p><p>This approximates the pullback process described in Section 2. The rounding appears not to introduce aliasing errors, probably because the domain has about twice the resolution of the source.</p><p>We also set up a three-dimensional array of region Booleans, which will be used to indicate which Bsplines to evaluate. Next we calculate the s, t , and U values at each point of the domain voxmap and use them to determine the four B-spline basis function values on each of s, t and U ; these are saved for later use. Then we compute the G x G x G x CSIZE x CSIZE x CSIZE array of coefficients described in (3) for use in determining the values of the spline map. Finally, we rename the source array to be the target array. If control point Pijk is to be moved, the regions labeled by indices <ref type="figure">( a , b, c)</ref>, where i -3 5 a 5 i and similarly for j and IC, are influenced, so their Boolean flags are set to TRUE. Now for each region whose Boolean flag is set, we must first erase from the target voxmap the contribution of the pushforward of the density on this region. We could do this as described in the loop, by pushing forward the values and subtracting them from the values stored in the voxels of the target voxmap. Instead, we have found that for modest deformations, it suffices simply to write zeros into the target voxmap at the pushed-forward locations. At this point, we actually change the control points by moving them to their new locations, and hence define a new B-spline mapping from the domain to the target voxmap.</p><p>We must now push forward the density function from the domain to the target voxmap. Simply pushing forward voxel centers and round produces severe aliasing. We must therefore do some filtering, so we compute the (floating-point) coordinates of the point to which each domain voxel-center is sent and place the results in a DSIZE x DSIZE x DSIZE deformation mapping array. Computing this array is expensive, but the rapid B-spline computation of Section 4 reduces the time substantially.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Forward Mapping with Antialiasing</head><p>Rather than doing computationally expensive sinc reconstruction of the data to be pushed forward, we make some of the usual approximations: we use box filtering in both the domain and codomain. We reconstruct the density function on the domain with a box filter, i.e., we take the value at each voxel center and assume that the value of the original density function is constant throughout the unit cube about the voxel center (henceforth called the voxel). We then look at the image of this cube under the B-spline mapping and, for each target voxel, compute its approximate overlap with the transformed box and record it as a fraction of the target voxel's volume that we call the weight. We then multiply the value from the domain voxel by the weight to get the weighted value. We tally these weights and weighted values for each target voxel. In pseudocode: Unfortunately, computing the exact overlap of the target voxel with the transformed domain voxel is prohibitively expensive. We use instead an approximation of the transformed domain voxel: we compute the approximate transformed locations of the centers of the domain voxel's six faces and take the bounding cube of these six points as our proxy for the actual transformed domain voxel. <ref type="figure" target="#fig_8">Figure 3</ref> shows the analogous effect in 2D: the bounding boxes of adjacent pixels may overlap. Thus a single target pixel may find itself with an accumulated weight of more than 100%; this is the reason for the division in the last line of the pseudocode above.</p><p>On the other hand, a pixel may not be completely covered by the transformed domain pixels. If not, then we can say that the portion left uncovered contributes zero to the density function: adding this in brings the total weight to 1 and does not change the weighted values at all. This explains the second-to-last line of the pseudocode.</p><p>The approximate locations of the six transformed points are computed with the deformation mapping array. Recall that we computed the target locations of each mapped domain voxel center in this array. To find the center of the face lying between the voxel center at (e, f, g) and that at (e + I, f, g ) , we simply average the points stored in the deformation mapping  array at these two in dice^.^ <ref type="figure" target="#fig_9">Figure 4</ref> shows the results of volume warping with and without the antialiasing provided by this approximate box filtering.</p><p>This completes the warping of the volume data; to make an actual picture, we compute and render the isosurface of the resulting density field. All images here were generated by the AVSTM isosurface tiler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Placement of Control Points</head><p>The control-point placement used to capture the source data into the domain is as follows: we take the central ISIZE3 subarray of the source data and divide it into CSIZE -4 pieces in each direction. ( <ref type="figure" target="#fig_10">Figure 5</ref> shows the analogous 2D subdivision.)</p><p>We place the control points Pijk using this subdivision. In each direction, the first and last control</p><p>We could have computed the transformed locations of these face centers instead of those of the voxel centers in the first place, but chose not to because we use the locations of the transformed voxel centers to do the very inexpensive pushforward described at the end of Section 5 in almost real time. This placement of control points makes the control mesh (and the image of the B-spline) enclose exactly the same region as that occupied by the original data. Moving a point of the control mesh influences points near that control point, which gives an accurate and intuitive way to define warps.</p><p>Alternatively, we can use an inverse-problem ap-</p><formula xml:id="formula_5">proach [ll] [8].</formula><p>We describe a warp by saying "I want to move this point there." More mathematically, we have the capture B-spline map B1, pick a point in its image, say Bl(so,to,uo) = 81, and then try to alter B1 to design a new B-spline B2 such that Bz(so, to, UO) = Q2. We are asking "Where should we move the control points of B1 in order to make the map B2 satisfy B~( s o , t o , UO) = &amp;2?" A least-squared motion solution to this problem is easy to determine. First we take the point Q1 and determine (solving some cubics) the point (SO, t o , <ref type="bibr">UO)</ref> in the domain such that Bl(so,to,uo) = &amp; I . . In matrix form, we then have QY = BP"</p><p>where B is the array of coefficients of the Pijk and P" is a vector of the x-coordinates of the Pijk in Equation 2. (We write similar equations for y and z . ) We wish to change the control points by an amount A P so that and, as mentioned above, we wish to find the smallest such change. We compute AP" using the pseudoinverse of B [12] to get Q; -QY = BAP" AP" = B+(Q; -QY) which solves the problem.     </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>modeling techniques [l] [14] and image warping techniques [6] [15] [5].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>*</head><label></label><figDesc>This work was supported in part by the NSF/DARPA Sei-a pencil-and-paper drawing You and redescribes a volumetric modeling process in which the isosurface is not the desired result: the models are intended for volunie rendering. 2We call such arrays of density values vozmaps, in analogy with pixmaps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>41f P is a point in 3-space, P x , PY, and P" denote the x, y, and z coordinates of P. Pullback and pushforward of a density funct ion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>The entire mapping process.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>The correspondence is simple: the entry in the domain array whose index is (i,j, k) corresponds to the point in 3-space whose coordinates are Recall that the B-spline basis functions are</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>E, f, g &lt; G and 0 5 i, j, k 5 3. Computing the value of the spline function at a domain location indexed by (e, f,g) now requires only that we determine the values of a , b , and c (the integer parts of e / G , f / G , and g/G, respectively) and the values of e, f, and g (which are the residues of e , f l and g mod G)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>vorel 9 C if weight &lt; 1 then d"(Q) = q.weighted-value else d"(Q) = q.weighted-value / q.ueight 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 3 :</head><label>3</label><figDesc>The bounding box of 6 points in a transformed voxel is used to approximate the transformed voxel.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 4 :</head><label>4</label><figDesc>Comparison between "map and round off' and filtered pushforwards.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 5 :</head><label>5</label><figDesc>Placement of the control points for the 2D capture map, for a 9 x 9 control mesh for a few sample points; note that the source region is divided into a4 x 4 grid. Point A is Po0 = Pol = Po2 = 40 = P20, B is P~o = P31 = P32, C is P33. points are tripled and the rest are evenly spaced (seeFigure 5). Thus, for example, the points P~, o , o for i = 0, 1 , 2 all go to the front lower left corner of the central ISIZE3 subcube of the source voxmap.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 6 :</head><label>6</label><figDesc>Teapot, original sculpture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 9 :</head><label>9</label><figDesc>Teapot, warped to adjust spout position.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 7 :</head><label>7</label><figDesc>Tree, original sculpture.Figure 10: Tree, warped as if caught in a strong gust of wind.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 8 :</head><label>8</label><figDesc>Differentially scaled angiogram. Courtesy of E.K. Yucel, M.D., Massachusetts General Hospital.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 1 1 :</head><label>1</label><figDesc>Angiogram warped to remove kink in artery.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>DSIZE: The domain voxmap is DSIZE x DSIZE x DSIZE; we choose DSIZE to be 2 * ISIZE, for reasons explained in Section 7. CSIZE: Our B-spline maps are determined by an array of control points of size CSIZE x CSIZE x</figDesc><table><row><cell>CSIZE. (We generally use CSIZE = 9, but other</cell></row><row><cell>values may be appropriate for finer control. Fig-</cell></row><row><cell>ure 9 was even made with a noncubical control</cell></row><row><cell>point array.) A B-spline B ( s , t , U) based on such</cell></row></table><note>00</note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Performance</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>References</head><p>Although volumetric data sets are usually large and computationally intensive to work with, we have obtained respectable performance using the rapid evaluation of B-splines described in Section 4 and the antialiasing technique described in Section 6. Using the constant values ISIZE = 30, SSIZE = 38, DSIZE = 60 and CSIZE = 9 and running on an IBM RISC6000 workstation, after an initial startup time of approximately 16 seconds, a typical warp takes about 6 seconds (see <ref type="figure">Figures 6, 7, 9 and 10)</ref>. Unlike warping a polygonal surface model, warping a volumetric model is independent of model complexity because sampled volumetric data is regular. Since any B-spline warp influences at most 64 regions, as determined by the control points, the timing for any warp is dependent only upon the granularity of the data points within a region.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Future Work</head><p>Our future plans for work on this technique include an interactive user interface to allow the easy specification of these deformations. One possible interface paradigm for this type of volume modeling is the direct-manipulation interface described in [ll]; another is the 3D widget set described in [7]. We are also examining further ways to speed up this modeling technique, since such speedup is crucial if volume deformations are to become a useful interactive modeling technique.</p><p>Volume warping is an ideal application for finegrained parallelism, since its performance could be improved by farming out the B-spline mapping of each region to a different processor.</p><p>We have begun to apply volume warping to MRI data (see <ref type="figure">Figures 8 and 11</ref>, in which a kinked artery has been straightened by warping). We look forward to applying it to other data as well, perhaps in removing distortions introduced during data acquisition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Acknowledgments</head><p>Much of this work was done by the first author as his Master's project under the direction of the second. We appreciate the support of the Brown Computer Graphics Group, especially George Reilly, Ken Herndon, and Dan Robbins. The first author acknowledges the support of the Digital Equipment Corporation Graduate Engineering Education Program.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Global and local deformations of solid primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="21" to="30" />
			<date type="published" when="1984-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A generalization of algebraic surface drawing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Blinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TOG</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="235" to="256" />
			<date type="published" when="1982" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Convolution surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shoemake</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="251" to="256" />
			<date type="published" when="1991-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interactive techniques for implicit modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloomenthal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wyvill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="109" to="116" />
			<date type="published" when="1990-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Carolco Productions. Terminator</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">3-d transformations of images in scanline order</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Catmull</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="279" to="285" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">Brookshire</forename><surname>Conner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><forename type="middle">S</forename><surname>Snibbe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">P</forename><surname>Herndon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">C</forename><surname>Robbins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">C</forename><surname>Zeleznik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andries</forename><surname>Van Dam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<date type="published" when="1992-04" />
		</imprint>
	</monogr>
	<note type="report_type">Threedimensional widgets</note>
	<note>To appear in</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Extended free-form deformation: A sculpting tool for 3d geometric modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Coquillart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput er Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="187" to="188" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Computer Graphics : Principles and Practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hughes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Sculpting: An interactive volumetric modeling technique</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Galyean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hughes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="267" to="274" />
			<date type="published" when="1991-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">A direct manipulation interface to free-form deformations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>William</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hsu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991-05" />
		</imprint>
		<respStmt>
			<orgName>Brown University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Applied Linear Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Noble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Daniel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1977" />
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">M</forename><surname>Hoffert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="253" to="262" />
			<date type="published" when="1989-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Free-form deformation of solid geometric models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">W</forename><surname>Sederberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Parry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="151" to="160" />
			<date type="published" when="1986-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Digital Image Warping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wolberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Hypertexture</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
