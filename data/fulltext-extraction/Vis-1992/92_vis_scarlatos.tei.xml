<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Optimizing Triangulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lori</forename><forename type="middle">L</forename><surname>Scarlatos</surname></persName>
						</author>
						<title level="a" type="main">Optimizing Triangulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>lo00 Woodbury Rd., D12-237</keywords>
			</textClass>
			<abstract>
				<p>Triangulated irregular networks (7&quot;s) are an attractive form of surface approximation because mangle vertices and edges may be adaptive@ selected to produce a good fit with a minimal number of triangles. Finding methodr for selecting these vertices and edges, however, is still an active area of research. Numerous r&amp;nement algorithms have been proposed, but these may produce more m&apos;angles than necessary. In this paper we present an algorithm that attempts to improve a triangulation by shifring the vertices so that curvature within the triangles is nearly equal. In &amp;tion, unnecessary niangles are removed. We finish with results produced by running this algorithm on simple geomenic surfaces and real terrain data.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">. Introduction</head><p>Triangulated irregular networks (TINS) provide an excellent means of approximating surfaces. Any three points on a surface may provide the three vertices of a triangle without restrictions on placement or size. This gives us the potential to produce a good approximation while minimizing the number of surface patches required.</p><p>However the optimal placement of triangle vertices and edges in a triangulation is still an area of active research.</p><p>Many triangulation techniques rely on refinement methods to find a set of triangles that approximates a surface to within given error constraints [l-51. In general, these methods start with a coarse triangulation and iteratively refine it by strategically adding points used to create new triangles in the model. One of these methods was developed by the authors [q.</p><p>Although adding points in such a manner does eventually produce the desired goodness-of-fit, this does not guarantee that the resulting set of triangles cannot be improved. For example, the triangulation may contain more triangles than are needed, which would increase storage space and time required to render the surface. It may also contain too many slivery trianglescharacterized by at least one very acute anglewhich cause artifacts in the display and anomalies in some analysis functions like finite element analysis. An analogy to this problem may be found in the onedimensional case where a curve is approximated with a series of straight line segments, as shown in <ref type="figure">Figure 1</ref>. Starting with a line segment connecting the two endpoints of the curve <ref type="figure">(Figure la)</ref>, an approximation may be produced by successively splitting line segments at points of greatest error (Figure lb) until the line segments fit the curve within a given tolerance ( <ref type="figure">Figure IC)</ref>. Although the resulting approximation is error-free, it contains more points than necessary. In the onedimensional case, this problem is solved by merging line segments (Figure la). As shown, the two middle segments are merged so that the curvature of each interval represented by a line segment is roughly the same. Pavlidis' text [6] describes this split-and-merge technique in greater detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>By Curvature Equalization</head><note type="other">The0</note><p>The literature on polygonal approximations is extensive [a, 10-141. Some of these methods are based on the result that in an optimal polygonal approximation vertices are placed so that an integral of the curvature takes the same value over all intervals <ref type="bibr">[lo]</ref>. In contrast, the literature on triangulated approximations is comparatively limited <ref type="bibr" target="#b8">[7]</ref><ref type="bibr" target="#b9">[8]</ref><ref type="bibr" target="#b10">[9]</ref>. Extending polygonal approximation techniques to triangulations is difficult because there is no direct counterpart of merging triangles when we look at the two-dimensional case. Consider, for example, the solid in <ref type="figure">Figure 2</ref> which has a square base and a smaller square top. An initial triangulation may be created by connecting the four base points to a point of greatest error found anywhere on the top plane. As shown, using such an initial approximation can produce more triangles than necessary.</p><p>Flgure 2. Surface approximatlons using refinement techniques can produce more triangles than necessary.</p><p>We have developed a novel approach to triangulation optimization that extends the ideas of polygonal approximation. Since it is not feasible to extend the splitand-merge algorithm to triangulations, we follow the alternative strategy of moving vertices. We move these verticesand collapse very thin pairs of trianglesso that the triangles approximate surface patches of similar curvature.</p><p>This paper describes our strategy for moving triangle vertices to produce the desired approximation with a minimal number of triangles. Although our strategy is to equalize curvature, our goal is to produce a triangulation that meets given error constraints using as few triangles as possible, all as nearly equilateral as possible. We assume that the triangulation corresponds to a known underlying surface or bivariate function which is sampled at regular intervals, such as a digital terrain model. This essentially extends the work of McClure and Shwaxtz <ref type="bibr" target="#b8">[7]</ref>, presenting an algorithm for producing triangulations that meet their criteria for good surface approximations.</p><p>In the next section, we briefly describe the theoretical work of McClure and Shwartz <ref type="bibr" target="#b8">[7]</ref> which forms the foundation of this work. The section following that presents our practical approach and implementation of that concept. Results of the implementation, applied to both geometric test cases and real-world terrain data, are described in the last section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">. Foundations</head><p>In a recent paper <ref type="bibr" target="#b8">[7]</ref>, McClure and Shwartz discuss methods of surface reconstruction based on triangulations.</p><p>Although their focus is on image data compression, they view this as being analogous to the problem of defining concise and accurate approximations for surfaces. One of the questions that they explore is how fine a regular triangulation needs to be in order to provide a consistent representation of an underlying surface. To determine this level of detail, they develop an estimator for the surface which is based on the Hessian matrix of second partial derivatives H@i,j). On a discretely sampled surface where each Pij maps to a single elevation f(Xi,yj), the second partial derivatives of pij may be approximated as follows:</p><p>Then for each point pij, the curvature estimator at that MS@i$ = 3(trace H@ij))2 -8(det H(pbj)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>point may be expressed by</head><p>Although this is not curvature in the classical sense, we use the term loosely because this measure detects the salient features of a surface. In fact, the above measure incorporates both the mean curvature (approximated by the trace of the Hessian) and the Gaussian curvature (approximated by the determinant of the Hessian). This improves on simpler measures such as the determinant of the Hessian which fail to detect many critical features in real-world situations. Consider, for example, the edge of a cliff as shown in <ref type="figure" target="#fig_0">Figure 3</ref>. Although points along this edge are clearly critical to the model, the determinant of the Hessian at these points is zero.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">. Approach</head><p>Refinement techniques often fail to find the optimal solution because critical features are not always evident at the coarser levels of detail. Instead, several refinement itemions are required befm these features are revealed.</p><p>Our approach is to start with a triangulation that already meets error constraints, but is not optimal. It may, for example, contain more triangles than are needed and/or too many slivery triangles. We assume that this triangulation approximates a surface represented by regularly spaced discrete sample points, such as those found in a digital terrain model. Error in the triangulation is measured by projecting each of these sample points to</p><p>We attempt to improve the model by moving triangle vertices so that curvature within each of the triangles is as nearly equivalent as possible without introducing e m to the model. The curvature of each triangle is approximated by summing the curvature estimates for all sample points  We use a two-step procedure for moving vertices. The algorithm of the fist step shifts triangle vertices, attempting to equalize the curvatms within the triangles.</p><p>However, as shown in <ref type="figure" target="#fig_2">Figure 4</ref>, the resulting triangulation may still contain too many triangles. In this picture, points of high curvature occur only along the ridge (represented by a dark line). This surface would be best represented with two triangles with a shared edge corresponding to the ridge. Our algorithm for the second step remedies this by attempting to remove pairs of triangles without introducing additional errors to the model. Both algorithms are described in greater detail below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Equalizing Curvature</head><p>The algorithm of the first step attempts to equalize cwature by iteratively reducing the size of the triangles with greatest curvature. This size reduction is achieved by moving each vertex of the triangle inward, one at a time. If a neighbor sharing that vertex also has high curvature, then the point is moved along the common edge. Otherwise, it is moved along the bisectrix of that angle of the triangle. Note that points along the boundary of the domain of the triangulation may only move along that boundary, and that points defining the corners of the boundary may not move at all.</p><p>Initially the point is moved by some set distance. If this move makes the triangle very thin and slivery then we collapse the triangle and one of its neighbors, effectively removing them both. This is done by merging two of its vertices as shown in <ref type="figure" target="#fig_3">Figure 5</ref>. After determining where the vertex moves to, we recalculate the curvatures of the affected triangles to see if the overall curvature of the surface is more equalized.</p><p>Because points on the triangle edges do not contribute to this overall curvature measure, positioning triangle edges over critical edges on the surface will reduce overall curvature for the surface. If the resulting triangulation is no worse than the previous one, then the triangulation is updated to reflect this move. Otherwise, we try moving the vertex half the distance we tried earlier. Eventually, either the vertex will move, or the distance will become negligible, causing the algorithm to skip to the next triangle vertex.</p><p>Because we allow moves that make the triangulation no worse, there is a danger of cycling. To prevent this, we keep a record of all attempted moves. Any move that has been tried before is automatically rejected, and the algorithm proceeds to the next triangle/vertex. Sometimes we are unable to move any of the vertices on the triangle with greatest curvature. This is generally due to constraints imposed by the area border. Consider, for example, the ridge in <ref type="figure">Figure 6</ref>, indicated by the dark line. Because points of high curvature occur only along this ridge, curvature cannot be equalized in any triangulation in which this ridge corresponds to a triangle edge. Hence, this algorithm can only go so far in equalizing the curvatures. Our algorithm continues to try moving vertices until the triangle with "maximum" curvature has curvature equal to the smallest curvature in the triangulation. If it is unable to move any vertices on the triangle of highest curvature, it proceeds to the triangle of next-highest curvature and considers that as the triangle of "maximum" curvature. Because the algorithm skips over triangles in this mannerand doesn't allow repeated moveseither the curvature within the triangulation will become equal, or the "maximum" triangle will eventually be the same as the "minimum", and the algorithm will halt. This algorithm for the first step is summarized in the pseudocode below. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EQUALIZE-CURVATURES(Point</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Removing Unnecessary Triangles</head><p>The algorithm of the second step attempts to further improve the triangulation by removing unnecessary pairs of triangles. Although this may increase the curvature measures within triangles, it must not increase actual error in the model. Error is meaSured by projecting points from the original discrete sampling to the triangulated surface and finding the difference.</p><p>Our algorithm removes two triangles by collapsing their common edge into a single point as shown in <ref type="figure" target="#fig_3">Figure  5</ref>. It tries to remove every pair of triangles within the triangulation, resulting in less than 3/2T iterations, where T is the number of triangles initially. Because an edge may be collapsed into either of its endpoints, the algorithm tries merging both ways and chooses the better way.</p><p>This algorithm for the second step is summarized in the pseudo-code below.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>REMOVE-UNNECES</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Limitations</head><p>There are limitations on this approach imposed by the constraint that points must never leave the edge bounding the convex hull of the triangulation. Consider, for example, the surface triangulation depicted in <ref type="figure" target="#fig_6">Figure 7a</ref>, where a ridge runs along the diagonal. If the initial triangulation has a single edge crossing the ridge perpendicularly as shown in <ref type="figure" target="#fig_6">Figure 7b</ref>, then none of the vertices may be moved. The only solution is to use a triangulation that has considered the surface features, such as <ref type="bibr">[5]</ref>. Then the situation shown in <ref type="figure" target="#fig_6">Figure 7c</ref> would occur, and the center vertex could slide along the ridge to producedKdesiredtriaflgulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">. Results</head><p>We f i t ran our algorithms using the test samples illustrated in <ref type="figure">Figure 8</ref>. These samples represent a ridge, a pyramid, and a paraboloid. In this figure, column A shows the original triangulations. Column B shows the results after equalizing curvature in the fist step of our procedure. Column C shows the results after removing unnecessary triangles in the second step of OUT procedure.</p><p>In these diagrams darkened lines represent ridges and highlighted points move in the next step. As shown, our algorithms produced optimal triangulations in all cases. Next we ran our algorithms on triangulations produced by our program [5l which considers terrain features in the triangulation. Although this algorithm produces good triangulations within a given enar tolerance, we suspected that by moving the vertices we could reduce sliveriness of the triangles as well as the number of triangles in the modeL We ran our program on 24 triangulations representing different types of terrain and different degrees of refinement. We then measured the success of this operation using 3 criteria: number of triangles removed, reduction in sliveriness, and reduction in error of the model.</p><p>In our tests. our algorithm reduced the number of triangles in 70% of the triangulations tested. In the best case, the final triangulation contained 22% fewer triangles. However in most cases the reduction was nominal. As expected, the greatest reductions occurred with triangulations of terrain with sharp features such as plateaus and mountain ridges, and on coarser triangulation models.</p><p>Slivery trianglescharacterized by one very acute angle produce visual artifacts in the rendered surface model and anomalies in some analysis functions such as finite element analysis. It is therefore desirable to reduce sliveriness. We measure sliveriness of a triangle with the following value, which is smallest when the mangle is equilated Perimeter 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Area</head><p>However, as shown in <ref type="bibr" target="#b10">[9]</ref>, slivery triangles are sometimes inevitable in an accurate surface model. In our tests, we found that the triangles became less slivery in 50% of the cases. The greatest improvement o c c d for a region of steep plateaus, where average sliveriness was reduced by 50% and maximum sliveriness was reduced by 77%.</p><p>While using this real data, we discovered that equalizing curvature may indiscriminately add intolerable errors to the surface model. However, we found that by testing for this possibility, we are able to equalize curvature without adding error to the model. In fact, the statistics on the final curvature (maximum, average, and variance) were the same as for when the errors increased.</p><p>Maximum error in the model actually decreased in 20% of our test cases. <ref type="figure">Figure 9</ref> illustrates results in one case where this algorithm reduced sliveriness and error. <ref type="figure">Figure 9a</ref> shows the original data for a region in Nevada. This triangulated regular grid contains 10,952 triangles. <ref type="figure">Figure 9b</ref> shows a triangulation of this surface produced by the algorithm in <ref type="bibr">[5]</ref>. This triangulation contains 1,998 triangles, a compression ratio of approximately 11:2. Maximum and average error in this model are 19 and 1.98 meters respectively. <ref type="figure">Figure 9c</ref> shows this triangulation after moving the vertices. With the same number of triangles, maximum and average error are reduced to 15 and 1.89 meters respectively. Additionally, average sliveriness is reduced by 20%.  As demonstrated by our results, our technique of moving triangle vertices can improve some triangulation models. Greatest improvements occur with surfaces characterized by sharp edges, such as the pyramid and ridge models. Less improvement occurs on models that already approximate the surface topology and/or have less distinctive features, such as our terrain model examples. We believe that this method could be effectively used to create an initial triangulation for our hierarchical triangulation technique [51 or to improve a regular triangulation of a surface. Because this technique works best with surfaces with sharp features, we expect that this technique could be used to improve three-dimensional surface models for CAD, animation, and threedimensional scientific visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">. Acknowledgements</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>YFlgure 3 .</head><label>3</label><figDesc>The Hesslan of a point on the edge of a cllff may be zero.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>interior to the triangle. Points coincident with triangle edges are not included in these sums. Indeed the goal of the algorithm is to place such boundaries over areas of high curvatwe, keeping triangle interiors relatively flat. the appropriate triangle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .</head><label>4</label><figDesc>A triangulation with equalized curvature may contain too many triangles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Sllvery triangles are eliminated by sliding one vertex along an edge and merging it with another vertex .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure</head><label></label><figDesc>Figure 6. Due to constralnts imposed by a wlthout lntroduclng errors. finite boundary, curvature cannot be equallzed</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Llmltatlons.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>This</head><label></label><figDesc>demonstrates that our methods work well for curved as well as polyhedral surfaces</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure</head><label></label><figDesc>Figure 9a. Orlglnal Data</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Pavlidis State University of New York Department of Computer Science Stony Brook, NY 11794-4400 n m (a (dl Flgure 1. Approxlmatlng a curve uslng split</head><label></label><figDesc></figDesc><table /><note>-and-merge reflnement.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Given the curvature of each point on the surface, the curvature of a triangle can be expressed as an integral of this measure over the entire triangle. When the surface is represented by a set of discrete sample points, the curvature of each triangle may be approximated by summing these measures for all points within the triangles.In their extensions section of<ref type="bibr" target="#b8">[7]</ref>, McClure and Shwartz discuss how this estimator relates to the selection of nonhomogeneous (irregular) triangles for approximating the surface. Although they provide an expression for the ideal density of distributed sample points and triangles, they do not give an actual algorithm for selecting these points and triangles. This paper extends their work by providing one such algorithm.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Trianglearray of Ntri triangles, each with 3 point &amp; 3</figDesc><table><row><cell>f Curvature -overall curvature of each triangle */ /' TriList -triangles using each point as a vertex */</cell></row><row><cell>(</cell></row><row><cell>Sort triangles on Curvatures in descending order;</cell></row><row><cell>max-tri =triangle at head of the sorted list;</cell></row><row><cell>min-tri = triangle at tail of the sorted list;</cell></row><row><cell>While Curvature[max-tri] &gt; Curvature [min-tri]{</cell></row><row><cell>For each point P on Triangle[max-trii {</cell></row><row><cell>Set distance;</cell></row><row><cell>Try moving point P inward by distance to point Q;</cell></row><row><cell>If P can't be moved or this was already tried then {</cell></row><row><cell>If no vertices on this triangle could move then</cell></row><row><cell>max-tri = next triangle on sorted list;</cell></row><row><cell>1</cell></row><row><cell>Else repeat (</cell></row><row><cell>Record attempt to move P to Q in history;</cell></row><row><cell>Determine whether resulting new triangle is too</cell></row><row><cell>skinny and must be removed;</cell></row><row><cell>If this is a good move to make then {</cell></row><row><cell>Update triangulation;</cell></row><row><cell>Fix sorted list;</cell></row><row><cell>Reassign max-tri;</cell></row><row><cell>1</cell></row><row><cell>else {</cell></row><row><cell>Cut distance in half;</cell></row><row><cell>Try moving P inward by distance to point Q;</cell></row><row><cell>If P can't be moved or this was tried then {</cell></row><row><cell>If no triangle vertices could be moved then</cell></row><row><cell>max-tri = next triangle on list;</cell></row><row><cell>Done with point P;</cell></row><row><cell>1</cell></row><row><cell>1</cell></row><row><cell>} until vertex moves or Done with point P;</cell></row><row><cell>, Npt, Triangle, Ntri,</cell></row><row><cell>Member, Curvature. TriList) /' Point -array of Npt points (x,y,z) */</cell></row><row><cell>f neighbor references */ /' Member -triangle(s) each point projects to */</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>5 . Conclusions Graphical Models and Image Processing. 54(2). pp. 147-161, 1992.</head><label></label><figDesc>Our method for moving triangle vertices is an effective way of guaranteeing that the triangle vertices are points of highest curvature and triangle edges correspond to distinctive edges on the surface. Triangulations of surfaces with constant curvatureand hence no distinctive features will gain nothing from this algorithm, or any other optimization algorithm for that matter.</figDesc><table /><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The authors would like to acknowledge the help of Professor D.E. McClure of Brown University for providing us a preprint of 171 and also pointing out additional references in the appropriate literature. We also want to thank R. Kelly and H. Tesser of Gru"an Data Systems for their continued support.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Automatic Extraction of Irregular Network Digital Terrain Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Fowler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Little</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Of SIGGRAPH 79</title>
		<meeting>Of SIGGRAPH 79</meeting>
		<imprint>
			<date type="published" when="1979" />
			<biblScope unit="page" from="199" to="207" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">L</forename><surname>Defloriani</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Falcidieno</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pienovi</forename><forename type="middle">C</forename><surname>Nagy</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Hierarchical Structure for Surface Approximation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Graphics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="183" to="193" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Pyramidal Data Structure for Triangle-based Surface Description</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Defloriani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics &amp; Applicatiom</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="67" to="78" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Refined Triangulation Hierarchy for Multiple Levels of Terrain Detail</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scarlatos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ll</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IMAGE V</title>
		<meeting>IMAGE V</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="115" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Hierarchical Triangulation Using Cartographic Coherence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">L</forename><surname>Scarlatos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Structural Pattern Recognition</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1977" />
		</imprint>
	</monogr>
	<note>61 Pavlidis,</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">A Method of Image Representation Based on Bivariate Splines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Mcclure</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Shwartz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
	<note>pre-print</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Piecewise Linear Best L2 Approximation on Triangulations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">E ; C K</forename><surname>Nadler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Schumaker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Ward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Approximation Theory V</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Data Dependent Triangulations for Piecewise Linear Interpolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">N</forename><surname>Dyn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">S</forename><surname>Rippa</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">IMA Journal of Numerical Analysis</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="137" to="154" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Nonlinear Segmented Function Approximation and Analysis of Line Patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">D E</forename><surname>Mcclure</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Quarterly of Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="1" to="37" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Theory of Nonuniformly Digitized Binary Pictures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Slansky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">D F</forename><surname>Kibler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IE E E Transactions on Systems, Man, and Cybernetics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="637" to="647" />
			<date type="published" when="1976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">A Note on Minimal Length Polygonal Approximation to a Digitized Contour</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">U</forename><surname>Montanari</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="41" to="47" />
			<date type="published" when="1970" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Piecewise Linear Approximations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Tomek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="445" to="448" />
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Pattern Classification and Scene Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">O</forename><surname>Duda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Hart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973" />
			<publisher>Wiley</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
