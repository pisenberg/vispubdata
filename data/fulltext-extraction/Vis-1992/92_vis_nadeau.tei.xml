<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Network Video Device Control</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">R</forename><surname>Nadeau</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">J</forename><surname>Bailey</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">San Diego Supercomputer Center Advanced Scientific Visualization Laboratory P.O. Box</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<postCode>92186-9784</postCode>
									<settlement>San Diego</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Network Video Device Control</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>Today&apos;s highly-networked visualization computing environments include systems from a wide variety of hardware vendors, each running its own operating system and sporting its own input, output, display, and storage peripherals. Faced with such a bewildering variety of hardware and sofnuare, today&apos;s visualization user is in dire need of sofnuare systems that integrate these resources over a network and allow him or her to take maximum advantage of them with a minimum of hassle and networking technical knowledge. Video equipment has become one such network resource. Visualization video equipment is used to record visualization animations, process the video signal, play back animations at varying speeds forward and backward, and edit animations into polished final productions. Computer control of video equipment allows many of these operations to be perfomd automatically or through slick graphical user interfaces. However, the single serial communications line connecting the video device to a host means that one can only access that device via that host. This paper discusses the Video Tools sofrware developed at the San Diego Supercomputer Center (SDSC) to overcome these restrictions and turn a site&apos;s video equipment into a network-accessible resource.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Video equipment is essential in today's visualization facilities. Visualization data is often time-variant or is best explained through an animation. Scene complexities can make it impossible to view an animation in real-time, even on today's high-performance graphics workstations.</p><p>In such cases, animation frames are pre-computed, fecotded to video one frame at a time, then played back in real-time.</p><p>Recording and playback of videos requires a variety of equipment. A video scan converter converts a high-resolution workstation video signal to a lower-resolution NTSC or PAL video signal suitable for recording to a video recorder. A video recorder records the video signal to tape or disk, and lets it be played back at a variety of speeds, forward and backward. Video switchers, video edit controllers, and video effects processors combine raw footage, titles, credits, overlays, and other video eWts to create a final edited production. Time base correctors, sync generators, etc., clean up the video signal, synchronize all the recorders, and so on. And finally, video signal routers route video signals hither and yon among workstations, monitors, video projectors, scan converters, recorders, players, and editing equipment.</p><p>As an example, the San Diego Supercomputer <ref type="bibr">Center's</ref> Advanced Scientific Visualization Laboratay routes most workstation video output through a large video signal router. Video signals from the router may be distributed to one or more locations, such as the workstation's monitor and a video scan m v m . Scan converter output is returned to the signal router for further routing to, for instance, a video disk recorder. Video recorder output returns again to the signal router for redirection to auxiliary monitors for viewing, to additional video recorders for dubbing, to the s w i t c h and e k t s processor for video editing, and so on (see figure 1). Many of these video devices are computer-controllable via built-in RS-232 serial ports and device-specific control protocols. Video tape and disk recordet controllers, such as Lyon Lamb's Minivas LYON901 and Sony's , support a range of commands to play, search, record, and alter the intemal state of the device. Video scan converters, such as Lyon Lamb's RTC I?-,YON90], and video signal routers, such as Dynair's Dynasty [DYNA89], include command sets to control scan conversion and signal routing, respectively.</p><p>Computer control of this video equipment allows a number of activities to be automated, or accessed rhrough graphical user interfaces. For example:</p><p>Image files from precamputed animations can be recoeded automatically. A shell script, for example, frame, the image is read in from disk, displayed on a workstation frame b u m , and captured by the video recorder. Tbe process repeats until the entire animation has been recorded. Animations computed on-the-fly using graphics workstation hardware can be recorded to video without having to collect hundreds of screen dumps. Tbe graphics application itself tells the video recorder to caphue a frame each time a new screen image is completed. Interactive sessions, complete with cursor moves and button pushes, can be recorded live without a video camera. Tbe workstation's video signal is routed to the video recorder. A press of an on-saeen user interface button starts the reuuding, and another stops it. Video playback can be controlled from applications, shell scripts, and graphical user interfaces. Hypermedia applications can direct the playback of video back sequences, loops, and speeds prior to aeating a final production.</p><p>Video signal routes can be set up using a graphical user interface. Routes can be mated, destroyed, grouped into logical categories, named, queaied, or resewed for exclusive use for a demo or recording session. Video scan conversion can be controlled interactively or automatically. Adjustments can configure a scan converter based upon the size of an image in a file, or the size and position of a window on a screen. can cycle through the animation's frames. For each disks. Playback scripts can be ~O~S~N C W to test play-Computer control of this video equipment uses a serial cable stnmg between the RS-232 port of the device and an RS-232 port on a bost computer. Application software the device, and reads back device responses.</p><p>The single serial cable connection to a single host restricts device 8ccess to applications running on that host.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>NlUhg On the bost OQenS tbe pOfi W f b S Commands</head><p>Applications elsewhere on a site's network have no access to the device, or must request a user to get up, walk into the machine room, unplug the cable from one host, and plug it into another (assuming the device isn't already in use by another application at the time). Such foohvork networking is very user-hostile.</p><p>' </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">UNIX network communications</head><p>Video Tools clients and servers are each built atop the UNIXsocketmecharusm [SuN88al. a special fonn of file descriptor. Clients and servers eacb create sockets and attach them to one another. Once so attached, data written on one end is readable on the other, and visa versa.</p><p>A specific server, or sentice, on a network is identified by the server's host network address and port number. Host addresses are those found in /ethosts <ref type="bibr">[SUN89a]</ref> or via the nameservice daemon, named <ref type="bibr">[SUN89d]</ref>. Server port numbers are unique integers assigned in /etdservices <ref type="bibr">[SUN89e]</ref> or by hardcoding. Port numbers allow network tools to route messages to a specific server process on the server host.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Writing UNIX clients</head><p>Writing a client is straightfoward. To initiate communications with the remote server, the client creates a socket and connects it to the server by giving the server's host address and port number. If the remote host or server does not exist, the connection fails. Otherwise tbe client duplicates the socket file descriptof and proceeds with its co"unications, using one descriptor for writing to the server, and the other for reading back server replies.</p><p>Both sockets act as standafd UNIX tile descriptors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="33.">Writing UNIX single-client servers</head><p>UNIX supports two classes of server: servers that bandle one client at a time, and servers that handle multiple clients Simultaneously. Singleclient servers are built using the UNIX standard inetd (Internet Daemon) server [SUN871. Inetd listeris to multiple port numbers and starts up the appropriate server whenever a remote client issues a connect request. When started by inetd, the server's stdin and stdour are automatically attached to the m o t e client. Communicati~ between the server and its clieut pfoceeds using standard UNlX file descriptors.</p><p>When using singleclient servers, every client talks to a new invocation of the same server program. If multiple each given their own server by inetd. When a client exits, its server exits as well. same procedure to get its own socket within the server. When a client exits, the server's socket m t i o n to that client is discarded . If a server has w clients connected, it idles, awaiting a new connection.</p><p>Multipleclient servers are more dillkult to write than singledient servers. Such servers must be prepared to accept a connection or request from a client at any time.</p><p>Operations that might block, such as read and write calls, must be avoided. If the server blocks in such a call, it is unable to bandle new client connections or service requests coming in from already connected clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Each a d d i t i d client connection repeats the</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Video servers</head><p>?he Video Tools implement all video device servers as multiple-client servers. For inherently single-user &amp;vices, such as video and players. c m of the clients is blessed and has full access to the device. Additional unbZessed clients connecting to the device server may query the device's state aad cbeck logs, reservations files, and device accoUnting information. However, they are restricted fnwn issuing requests to the device that might intmupt of e t service for the blessed client (see  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Video device network protocol</head><p>To isolate clients from the specifics of a video device's cammunications protocol, client-server communications uses a generic protocol. The situation is similar to that used by the MIT X Window System. A generic X protocol codifies operations such as creating windows, drawing lines, and placing text. An X server accepts a client's protocol requests and implements them for the specific graphics device. Similarly, a Video Tools server accepts generic video protocol requests and implements them for the specific video device.</p><p>Three classes of'video protocol are defined:</p><p>1. We&amp; control a video player/mrder deck.</p><p>2. VConv: control a video scan convertef.</p><p>3. Woute: control a video signal router.</p><p>In each of these cases, the protocol is intentionally generic. Clients using the VDecR protocol, for instance, can issue requests to play, rewind, m r d , search, and so on. The client does not need to know whether the video deck being controlled is a video disk or video tape recorder, or the brand of such a device. Device communications quirks are handled by the video device server.</p><p>A generic protocol works the best when only basic operations are necessary. However, most video devices support a range of device-specific features that occasionally must be accessed. To access these features, the Video Tools support protocol extensions and extension libraries. Use of these extensions makes a client devicespecific.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Protocol message header</head><p>All &amp;quests and replies sent between Video Tools clients and servers have a standard fixed-size message header (see <ref type="figure" target="#fig_4">figure 3)</ref>. Following the header are a variable  The sequence field is a message sequence numbea. Client requests are numbeted, starting from 0, and wrapping around at 255. Server replies use the same sequence numbex as the request to which they are replying. If a client receives a reply with a wrong sequence number, it knows client-server communications are out of sync and can take action.</p><p>The type field specifies that a message is a request, reply, error reply, or event. Requests are messages sent by a client to a server and always illisit a repry (success) or error reply (failure) from the server bgck to the client.</p><p>An event is an unsolicited message Sent by the server to the client when something changes on the device. mid events notify that media has been ejected from a recorder, that a playback marker has been passed, or that a longexecution-time operation, such as a frame search, has completed.</p><p>?be class, set, and opc&amp; fields describe the operation to be performed in a request, the operation that was just performed in a reply, the operation that couldn't be performed in an error reply, or the event being delivered in an event message.</p><p>At the lowest level, the opcode selects a specific operation, such as play the video deck, or change the zoom factar on a scan converter. Opcodes are grouped into sets. A set may be generic operations, extension operations, or operations that deal with the server's reservations, logging, and accounting files.</p><p>An opcode class is a group of opcode sets. For example, the VDeck group of operations is an o@ class.</p><p>A typical Video Tmls server may accept messages in a sub-set of classes and sets. For instance, a video server driving a <ref type="bibr">Sony</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Binary messages</head><p>Network communications are more e e e n t l y done using binary data rather than verbose human-readable ASCII. Fbr instance, a binary representation of a 32-bit integer takes 4 bytes, while the representation of the same 32-bit integer in ASCII could require up to 12 bytes.</p><p>In network communications between video clients and servers, binary data transfer instead of ASCII reduces network loading and speeds up network operations. When binary data must be read from and written to network connections, network clients and servers must be prepad to handle binary data in a variety of byte orders, word sizes, and floating-point formats.</p><p>Dillkrences in binary data format are usually handled one of two ways:</p><p>1. support one computer type. 2. embed byte swapping code in every application.</p><p>Applications written for Sun platforms, for instance, might not be able to handle data from a VAX or DECstation with a m n t byte order, a CRAY with a diffeaent word size, or any host that doesn't use the IEEE floatingpoint format. Such applications are not portable.</p><p>The goal of transparent access to network resources is to ensure that users need not be aware of the host they're on or the host on which a task is executing. Every network host has identical access to every resource on the network, including printers, display devices, video recorders, and so on. Such transparent access is compromised if applications and network services are written to run on specific host types. Portability is a key attribute of network-transparent software.</p><p>To make the Video Tools clients and servers portable among a wide variety of hosts, the underlying networking code uses SDSC's Binary I/O Library mADE91, SDSC911 for all binary data handling. This library deals with byte order, word size, structure padding, and floating-point farmat issues efficiently and mspiuently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Videoclients</head><p>Client applications link to Video Tools client libraries that package function call arguments into requests for a remote video device server. The client library sends the request and awaits the server's reply or error reply.</p><p>Clients using the generic video device calls (such as the VDeck generic opcode set) are independent of the video hardware involved, much as an X Window System client is independent of the graphics display hardware being used. Clients that link with a device-specific extension library sacrifice this device-independence to gain access to device-specific features.</p><p>Client-mer network c"unications are handled within the Video Tools client libraries. To the client author, the video device appears to be local. Issues involving binary I/O, message beaders, I/O blocking, events, and so on are all handled by the client library.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">User scenarios</head><p>A typical program to open a mote video deck and request it to play can be written as follows: VDeckOpen opens the device. VDecWlay sends to the server a request to start forward playback at a spesd of 1.0 (normal speed). VDeckClose closes the connection.</p><p>In a typical d o , a user sits down at an arbitrary workstation and prepares to record images generated in real-time by workstation graphics hardware. The user invokes a video signal router control tool that pops up a window. The user selects a video signal routing that routes the workstation's display signal to a scan converter, and from there to an available video recorder. The recorder's output is then routed back into a table-top TV monitor or to a workstation video input card for display in a workstation window.</p><p>The user then brings up an application to record and adjusts the scan converter's pan and zoom to center in on the information of interest. Once adjusted, the applicationpromdswiththeanimarion. Afmeacbredrawof the screen, the applkation makes a VDeckcall to record a frame, then amtinu.</p><p>When the recording session is complete, the user pops up a window with graphical vexsions of the traditional PLAY, FAST PORWARD, REVERSE, and STOP buttons of a home video recorder. The deck jumps to the fr;unes just recorded, and the user plays them at varying speeds, forward and back, to detennrne if the results are satisfactory. Assuming they are, the user creates a play script listing the frames tobeplayed, in what order, and at what speed, and hands the suipt to a video post-production editor touse as a guide in editing the raw footage into a final video production.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Networking printing</head><p>Hardcopy bas traditionally been a tenn associated with paper printouts. Tbe need for film media has caused the word hardcopy to include 35" slides, polaroid prints, and movies. However, in today's multifaceted visualization environments, the term needs to be expanded to encompass an additional ultimate fom of walk-awaywith-it media: video tapes.</p><p>The SDSC Visualiion printing tools weze developed to control high-end graphics printers, such as the Canon CLC-500 color peper printer, and digital film recorders, such as the Management Graphics Solitaire-8. Such graphics printers and digital film re" are generally controlled via c0"Unications links between a single host and the device. Networking software is required to make such hardcopy devices available as network resources.</p><p>The central tool of the Visualization Printing tools is the image data queueing tool vpr (for Visualization PRintet) [SDSc92bl. Users queue one or more image files for printing using cofnmand lines tbat look like. The arguments to vpr should look familiar to UNIX they ale very similar to those of the Standard UNM line printer queuing utility lpr <ref type="bibr">[SUN89c]</ref>. In fact, vpr is implemented using the UNIX Zpr mechanism for users:</p><p>network data file queuing. This allows the Visualization Printing tools to leveaage existing, robust, networktransparent features already standard in " .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>use of</head><p>Zpr also makes vpr easier to port to various UNIX architectures. A workstation can be enabled for vpr use by " p i l i n g vpr and installing a few lines in the system 6le /erc/printcap <ref type="bibr">[SUN88b]</ref>. W i t h vpr, like with Zpr, the user submits one or more image iiles to be printed, specifying the name of the queue on which to print them. Using features of tbe underlying SDSC Image Tools WADE91, NADE92, SDSc92a], the image tile fonnat is discerned either from image iile magic n u m b or from filename extensions. MenSully, the user is not required D convert the image to a device-specific custom image file format first. vpr supports all file formats recognized by the Image Tools.</p><p>While implemented atop Ipr, vpr does not queue image iiles directly. When invoked, vpr sends a smaller, text-only, visualization metafile (script) via Zpr. This visualization metafile lists the files to be printed and any command line options given to vpr.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Daemon 9</head><p>Daemon 9 c", Device On the remote printer host, the visualization metafile is "printed" by the UNM Zpr daemon, Zpd [SUN89b], by invoking a device handler for the printer. The device handla reads the meMle, retrieves tbe user's images, one at atime, from across the network, awl reads them in using the SDSC <ref type="figure" target="#fig_7">Image Tools (see figure 4)</ref>. The device handler then performs whatever hardcopy cost accounting is necessary, followed by image opeahs to prepare the user's image to be sent to the hardcopy hardwm. The imaging operations, in order, ate:</p><p>Crop the image based on cropping parameters given on the vpr command line. Change the orientation of the image based on the request for landscape orientation, portrait orientation, of to "orient for the best fit using this hardcopy medium." The last mode is especially useful as often users know neither the aspect ratio of the image nor the aspect ratio of the output medium. Expand or shrink the pixel resolution of the image to match the resdution expected by the hardware. This is not always necessary, as some hardcopy hardware devices do it intanally. Adjust the image intensity based on lightness parameters given on the vpr command line. This is useful if the usercannot or will notrecompute an image that is too light or too dark. Justify the image <ref type="figure">(left, right, top, bottom, centered)</ref> based on justification parameters given on the vpr command line. Handle any required operator intervention. For example, 4x5 transparency film is a single-sheet medium, not a bulk-roll medium like 35" film. An operator must insert a new sheet of film between images. Similarly, operator intervention is required to handle error situations, such as a printer being out of film, paper, or toner. Sendthe image to the desired hardcopy hardware device using that device's proprietary protocol.</p><p>vpr and the underlying device handlers use image manipulation functions provided by the SDSC Image Tools. This reduces the size of device handler code and speeds the development of new device handlers.</p><p>For the automated production of video tapes, the SDSC Visualization F'rinting tools include a video device driver. Users may queue one or more images to a video print queue using a command line like:</p><p>vpr -Pvhs images*.xwd</p><p>In this example, vpr sends a list of X Window dump files to the vhs queue for shooting to VHS video tape.</p><p>The video device handler uses the Video Tools to set up a video signal route from a frame but&amp;, through a scan converter, to a video recarder. The scan converter's pan and m m m e t e r s are adjusted automatically by the device h d l e r to position the images on the video display based on their size and user requests on the vpr command l i . One by one the device handler then displays each image to a frame bufh and records the image to video with a Video Tools request to a video recorder server (see <ref type="figure">figure 5)</ref>. <ref type="figure">Figure 5</ref>. Video printing &amp;vice handler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Router</head><p>The development of vpr and a viuiety of device handles allows graphics printers, 6lm recorders, and work. The usem do not need to understand network communicatim, image file farmat differences, image manipulation and processing requirements, and hardware device idiosyrwxasies to successfully produce an image or an animation. video recofders to be accessed by acros~ the net-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">summary</head><p>The computer network is becomrmn *gthefoundation of the scientific laboratg. Tools that integrate the resources on the network and allow the user to take maximum advantage of them with a minimum of hassle are critical to the development of complex scientific computing environments.</p><p>work access to video tape and video disk players/recorders, video scan converters, and video signal routers. The SDSC Video Tools implement a clientserver approach to network video device control. The SDSC Visualization printing system uses tbese tools to</p><p>Thispaperhasdiscussed software tools to provide netfurthea simplify user access to video recording hardware.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>SDSC's video configuration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>figure 2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>ForFigure 2 .</head><label>2</label><figDesc>wa-single-user video devices, such as a video signal router, all clients are blessed and able to modify the device, as well as access reservations files. Blessed Client Multipleclient Server connectivity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>number of arguments d e t e r m i by the request or reply. The message header Zength field gives the length, in bytes, of any arguments following the header. This allows generic server code to read in an entire incoming client request without having to first parse the message's . . . . , . . ............................................................................................................................... . . . . . . . , . , . , . , , . . . . . . . . . . . . , . . , , , . . . -. ..i....i..........i.i . . . . . . . . . . . . . . . . . . . . . . . . . ..</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 .</head><label>3</label><figDesc>Vkleo protocol message format.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>VDeckOpen( gvideohost:deckln ) ; VDeckPlay ( deck, VDECKFORWARDS, 1.0 ) ; VDeckClose ( deck ) ; 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>vpr -Pslides cosmic.hdf vpr -Ppolaroid -#2 molecule.pix vpr -Pmovie35 animation.am Tbe first example queues the iile cusmic.Mf for printing to the slides queue. The second example queues two copies of of mIecuk.pix on the polaroid queue. The third queues an animation mewile (a simple script) animatwnmn for printing as a 35" movie.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 4 .</head><label>4</label><figDesc>Visualization printing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>2. Video clients and servers Access to a network resource, such as a video tapeknown as the client, mates a packet of information and sends it to the remote host. A daemon, or server, on the remote host accepts the packet and perfoms the requesteddo the opera- tion, and send back replies indicating success or failuredirect the server to command the device to perfom tion in m is conveyed back to the client via server replies.lists the user who recoeded frames, the t i m e at which those frames were recorded, and anyframes to a common frame store, such as a laser video disk, such a log becomes a table of contents of the media and is</head><label></label><figDesc>Ihis paper describes work in progress at the San Diego Supercomputer Center (SDSC) that implements network clients and servers to provide network-wide access to video devices. Applications anywhere on the net can manage record and playback operations, change video signal routing, or adjust scan converter parameters. Derails of network communiCatianS, protocols, and device-specific control quirks are invisible to the user, making the video equipment a true network resowe. action. Upon completion, tbe server sends a reply back to the client. commeot the user wished to give. Such a log is very helpful during latea editing of the raw footage. Additionally, when recording a large number of archived along with the media. User tools, acting as network video device clients, can send the video server requests to access the log and look up previous recordings. Such information can then be passed on to opetators to request dubbing and editing of selected raw footage segments.Tracking media costs through server accounting files listing uset acco~nts and balances (for recMding &amp;vices). Each record operation debits the account by the cost of the media. user tools, acting as network clients, can request accounting reports.</figDesc><table><row><cell>recorder, requires the transfer of requests and replies over</cell></row><row><cell>the network betwe!en tbe user's location and the device's</cell></row><row><cell>location. Tbe user's side, .</cell></row><row><cell>Video servers are responsible for several actions:</cell></row><row><cell>Maintaining exclusive access to the video device. All</cell></row><row><cell>device communications go through it. Client requests</cell></row><row><cell>0 Maintaining a log of recorded segments (for recording devices). The log selected actions. Device and state i n f m -</cell></row></table><note>The SDSC Video Tools implement such a client-server appaxh to video device control. Video Toois' clients link to clieat libraries that create request packets and s e d them across the network. On the device host, Video Tools' device servers accept client requests,Maintaining a resetvations iile that allows users to reserve devices for specific days and times. For instance, a user may reserve a scan converter and video disk recorder, and a signal route among the worksta- tion, scan converter, video disk. and video monitor. During this resetyed time clients executed by that user have exclusive use of the device. Clients executed byother users are denied access. These reservations prevent unfurtunate collisions between users wishing to use the same device at the same time. Client requests to the server allow users to set up and query these reservations.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>rsh, rlogin,fip, and telnet daemons. clients Simultaneously request the same service, they are 33. Writing UNIX multi-client serverserdrc boot scripts [SUNW]. Once started, the server</head><label></label><figDesc>Singleclient servers are common in UNIX, and include the Such servers are often smed aum~~~tically by system /~e a t e s a socket and binds it to its service port number. Tbe server then idles, awaiting a client connection request.</figDesc><table><row><cell cols="2">Multipledient servers, such as the MtT X Window</cell></row><row><cell>System server [ANGE88a, AN-,</cell><cell>ROSE881, must</cell></row><row><cell cols="2">handle multiple simultaneously executing clients.</cell></row></table><note>When a client requests a connection, the server creates a new socket specifically for ccnnmunications with the client. Communications between the server and theclient uses the new socket, while the original socket remains open and available fa connections by other clients.</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>the LVR-5OOO server accepts opoodes</head><label></label><figDesc>LVR-SOOO laser video disk recorder accepts VDeck class messages, but not VConv messages for controlling a scan converter. Within the VDeck class, in the generic set and opcodes in the LVR extension opcode set, but it does not accept opcodes in the Lyon Lamb Minivas extension The use of a generic protocol message headex for the full suite of Video Tmls servers allows generic code to be written and used in all servers. Message reading and writing, client servicing, and opcode parsing are all encapsulated into a server function library so that video server authoring can concentrate on the device-specific activities of a device server.</figDesc><table><row><cell>OPcode set.</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Acknowledgements</head><p>This work was supported by the National Science Foundation under grant ASC8902825 and ASC9008413 to the San Diego Supercomputer Center. Additional support was provided by the State. of California and the University of California. This work could not have been completed without the support of the rest of the personnel at the San Diego Supercomputer Center and its nearly 3000 users.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Definition of the Porting Layer for the X VI1 Sample Server</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Angebranndt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Drewry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Karlton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Newman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>MIT X Consartium</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Strategies for Porting the X VI1 Sample Serwer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Angebranndt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Drewry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Karlton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Newman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>MIT X Consortium</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Lyon Lamb Video Animation Systems, Technical Reference Manual for the Minivas animation controller and RTC scan converter, rev 5</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dynair</forename><surname>Electronics</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>N;Adeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Elvins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">T</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Nadeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Elvins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eurographics Workshop on Visualization in Scientifi Computing</title>
		<meeting>the Eurographics Workshop on Visualization in Scientifi Computing</meeting>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note type="report_type">Technical Reference</note>
	<note>Proceedings of the IEEE Visualization &apos;91 Conference, IEEE Computer Society b s. Rosenthal, D.S.H., de Boar, A.R., Godtilla&apos;s Guide to Porting the X VI1</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">San Diego Supercomputer Center, Binary U0 Library Reference Manual, manual page set</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sample</forename><surname>Server</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mit X Consartium</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>SDSC Binary YO Library</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">San Diego Supercomputer</forename><surname>Center</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SDSC Image Tools</title>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">vpr -Sends an image to an SDSC visualization printer, manual page</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">San Diego Supercomputer</forename><surname>Center</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SDSC Visualization Printing Tools</title>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Manual €or the LVR-5OOO Laser video disk recorder</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L D M -S W</forename><surname>Sony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Interfwe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">inetd -Internet services daemon, manual page</title>
	</analytic>
	<monogr>
		<title level="j">Network Programming Manual</title>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>Sun Miaosystems</orgName>
		</respStmt>
	</monogr>
	<note>Sun Release 4.1,1987. Sun Miaosysteans. Sun Release 4.1.</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">printcap -printer capability data base, manual page</title>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>Sun Microsystems</orgName>
		</respStmt>
	</monogr>
	<note>Sun Release 4.1</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Sun Microsystems, hosts -host name data base. manual nape</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note>Sun Release 4.1.</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Sun Miaosystems. lpd -printer daemon, manual page</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note>Sun Release 4.1</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">lpr -send a job to the printer, manual page, Sun Release 4.1, 1989. Sun Miaosystems, name4 innamed -Internet domain name server, manual page</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
		<respStmt>
			<orgName>Sun Microsystems</orgName>
		</respStmt>
	</monogr>
	<note>Sun Release 4.1</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Sun Micxosystems, services -Internet services and aliases, manual page</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
	<note>Sun Release 4.1.</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Sun Miaosystems, rc, reboot, rc.localcommand scripts for auto-reboot and a b mom, manual page</title>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
	<note>Sun Release 4.1</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
