<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A 3-D Streamline Tracking Algorithm Using Dual Stream Functions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">N</forename><surname>Kenwright</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mechanical Engineering</orgName>
								<orgName type="institution">University of Auckland</orgName>
								<address>
									<addrLine>Private Bag 920 19</addrLine>
									<settlement>Auckland</settlement>
									<country key="NZ">New Zealand</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gordon</forename><forename type="middle">D</forename><surname>Mallinson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mechanical Engineering</orgName>
								<orgName type="institution">University of Auckland</orgName>
								<address>
									<addrLine>Private Bag 920 19</addrLine>
									<settlement>Auckland</settlement>
									<country key="NZ">New Zealand</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A 3-D Streamline Tracking Algorithm Using Dual Stream Functions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A new methodology has been developed f o r constructing streamlines and particle paths in numerically generated fluid velocity fields. A graphical technique is used to convert the discretely defined flow within a cell into one represented by two threedimensional stream functions. Streamlines are calculated by tracking constant values of each stream function, a process which corresponds to finding the intersection of two stream surfaces. The tracking process is mass conservative and does not use a time stepping method for integration, thus eliminating a computationally intensive part of traditional tracking algorithms. The method can be applied generally to any three-dimensional compressible or incompressible steady flow. Results presented here compare the performance of the new method to the most commonly used scheme and show that calculation times can be reduced by an order of magnitude.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The field of computational fluid dynamics (CFD) has developed during the last three decades to the stage where highly complex phenomena can be modelled. Current CFD systems can produce vast amounts of data to which sophisticated visualisation techniques must be applied if insight into the underlying structures expressed by the data is to be obtained with minimum human effort.</p><p>The representation of a flow field by vector arrows is a convenient means of indicating both the direction and the magnitude of the flow. They work well for 2-D flows and even for 3-D flows if slices are taken through the field, but lose their clarity when constructed in a 3-D volume. The construction of streamlines provides a clearer representation of the flow and can lead to a better understanding of the underlying fluid motion. The main difficulty with their constuction is the numerous calculations that must be performed.</p><p>This paper addresses the problem of tracking streamlines and describes a new and fundamentally different method which, when compared with traditional methods, offers a better level of consistency with the law of mass conservation. Before presenting the new method, a synopsis of the underlying theory is given and the algorithms most commonly used for streamline tracking are discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Theoretical basis for the construction of streamlines</head><p>By definition, the lines of a vector field have the property that their direction at any point coincides with the direction of the field at that point. The lines of the velocity vector field are called streamlines.</p><p>Consider a steady three-dimensional flow where the space coordinates are x, y, and z and the corresponding velocity components are U, v, and w. The equations describing the streamlines are</p><formula xml:id="formula_0">d x -d y = d z - u v w</formula><p>For CFD applications, these equations must be solved in a continuum represented by discrete numerical values. An important property of the velocity fields arising from CFD calculations is that they have been calculated by the application of conservations laws, the most significant of which is the law of mass conservation. It can be expressed in its most general form by the equation where Sp(r) is a mass source. For the majority of real single phase flows this term is zero. If the flow is steady the time derivative can be ignored so that equation <ref type="formula">3</ref>reduces to an expression that the mass flux field is divergence free (or solenoidal).</p><p>As will be shown later, there is a fundamental relationship between the law of mass conservation and the streamlines. Tracking algorithms which violate this law can cause streamlines to pass through solid boundaries, exhibit false spirals, or fail to terminate at stagnation points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A review of streamline tracking algorithms</head><p>The most widely used algorithms are those which depend on numerical integration techniques based on recasting equation <ref type="formula">1</ref>in terms of an integration variable. Consider the point P which lies within the velocity field v shown in <ref type="figure" target="#fig_0">Figure 1</ref>. The position vector r gives the location of P as a function of t which varies along the streamline. The parameter t is usually considered to be time (in which case the streamline can be directly interpreted as a particle path) although any measure, such as length or curvature, may be used. The tangent to the curve at P is then dr/dt, and equation <ref type="formula">1</ref>can be rewritten as,</p><formula xml:id="formula_1">e = v(r) &amp; (3)</formula><p>Integration of this yields Equation (4) provides the basis by which a streamline can be grown from an initial starting point using a sequence of small steps in t. Streamline and particle tracking algorithms using this method have been presented by Holst <ref type="bibr">[l]</ref>  <ref type="bibr">8]</ref>. The differences between the various methods stem from whether they deal with 2-D or 3-D flows, the form of velocity interpolation, the numerical integration method, the use of schemes for adapting step size, and the type of grid mapping used.</p><p>There are several sources of error which can arise when calculating the path of a streamline using numerical techniques. Some sources are beyond the control of the tracking algorithm and include poor numerical convergence, truncation errors and the effects of highly distorted grids. Those associated with the tracking process can be attributed to either the interpolation of the velocity field or the numerical integration of equation <ref type="formula">4</ref>.</p><p>Issues associated with numerical integration include the order of the method (for example, 2nd order Euler or 4th order Runge-Kutta) and the selection of step size. The combination of high order integration and small step size can lead to very high computational loads which detract from interactive visualisation. Murman and Powell [4] considered the effects of step size and the order of accuracy of the integration method. They showed that the low order Euler integration method gave misleading results in 2-D vortex flows regardless of the integration time step used. For 3-D flows Buning <ref type="bibr">[7]</ref> found that using an adaptive time step based on cell size and the inverse of the velocity magnitude gave good accuracy while not requiring a universally small time step. Buning also highlighted the inadequacies of Euler integration and gained improved results using a Runge-Kutta scheme.</p><p>Interpolation is necessary because the CFD field velocities are defined at discrete locations in space. The most widely used interpolation function for 3-D velocity fields is the trilinear function. It is favoured because it can readily be applied to hexahedral cells, a type commonly used in CFD, and is a relatively fast interpolation scheme.</p><p>Studies by Yeung and Pope [6] demonstrated that interpolation errors were more significant than those arising from the numerical integration and that the linear interpolation methods gave unacceptably poor results when applied to turbulent velocity fields.</p><p>The main draw-back of trilinear interpolation of velocity is that it is not mass conservative. For 2-D flows, failure to conserve mass can produce erroneous spiralling which cannot be eliminated by reducing the integration time step (Mallinson [9]). The interpolation errors have the greatest effect in regions of high streamline curvature.</p><p>Higher order mass conservative interpolation schemes based on cubic splines have been used by Yeung and Pope [6], Handscomb [lo] and Mathews and Wilkes [ 111. Although offering substantial gains in accuracy, cubic spline interpolation is extremely computationally intensive and requires powerful computer support if it is to be used interactively for tracking streamlines. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Streamline construction using stream functions</head><p>The algorithm presented in this paper is based on a fresh approach to the problem of streamline construction wherein the streamlines are recognised to be the intersections of stream surfaces. The approach automatically ensures mass conserving interpolation and has led to a direct method for calculating the exit point of a streamline entering a cell, thereby obviating the problems associated with stepwise integration methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Stream surface theory</head><p>An alternative way of describing a streamline is to regard it as the line of intersection between two independent surfaces, f and g say, For any Constant value of f o r g, equation <ref type="formula">5</ref>or <ref type="formula">6</ref>respectively represents a surface <ref type="figure">(Figure 2</ref>). If these functions are integral solutions to equation <ref type="formula">1</ref>the surfaces are called stream surfaces. They then have the property that no fluid ever crosses them, and are therefore always tangential to the flow. The intersection of the two surfaces yields a line which is also tangential to the flow, that is, a streamline (Panton The relationship between the velocity field and the f and g stream functions was established by Yih <ref type="bibr" target="#b8">[13]</ref>. For a steady compressible flow the expression for mass flux is,</p><formula xml:id="formula_2">pv = Vf x vg (7)</formula><p>where p is the density at a point. For incompressible flows p is constant: Because Vf and Vg are perpendicular to the stream surfaces, they are also perpendicular to the velocity, and hence the product (Vf xVg ) will be in the direction of the velocity. This is shown graphically in <ref type="figure">Figure 2</ref>. A significant feature of this relationship is that it implies conservation of mass, as can be shown by taking the divergence of (7), that is,</p><formula xml:id="formula_3">V.(pv) = V.(Vf x Vg) E 0<label>(8)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">The f-g diagram</head><p>The new method for tracking streamlines relies on the construction of an f-g diagram. This is a twodimensional plot of one stream function against the other which provides a graphical means of visualising the stream functions and mass flow. Consider, for example, the z component, w, of velocity through the plane z=constant. The mass flow rate through an arbitary region, R, on this plane is given by</p><p>The term pw can be replaced by expandmg equation <ref type="formula">7</ref>which, when substituted into equation <ref type="formula">lo</ref>, gives Cbanging the integration variables from x,y to f,g leads to where R' is the transformation of R, defined in (x,y,z) space, into (f,g) space. This result can be extended to any closed curve on an arbitrary surface in (x,y,z) space. The advantage of using this transformation is that a 3-D flow problem is reduced to one of evaluating areas on a 2-D f-g diagram.</p><p>In physical terms, the effect of the transformation from three-dimensional space to (f,g) space turns stream surfaEs into lines on the f-g diagram, and, more importantly, streamlines into points. A streamline is always represented by a point on an f-g diagram because of the fundamental requirement that both stream functions must be constant along the streamline.</p><p>The f-g diagram is therefore a representation of the flow in which all the streamlines have been straightened and aligned so they are perpendicular to the page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">A local streamline tracking algorithm</head><p>In principle, if an f-g diagram can be constructed for a whole flow, the tracking of a streamline reduces simply to finding the set of points in real space which map to a given point in the f-g diagram. A significant advantage of this approach is that points on a streamline can be found in any order, thereby removing the need to step sequentially along the streamline. Another advantage is that stream surfaces, which are useful visualisation tools, can be easily constructed using an isosurface algorithm.</p><p>There are, however, two difficulties associated with constructing an f-g diagram for the whole flow. Firstly, for recirculating flows the functions are multivalued and are difficult to represent compactly as a numerical field.</p><p>Secondly, since the mapping from Cartesian space to f-g space is many to one, the location of points along a streamline requires some form of directional searching procedure to locate points in sequence. Both these difficulties may be avoided by using a "local" method 3. For that f-g point, determine the two faces which enclose it on the f-g diagram. (The exit face will be the one not already identified as the inlet face.)</p><p>4. Perform the inverse transformation, from (f,g) to (x,y,z) space, to determine the exit coordinates.</p><p>Note that the initial starting point of a streamline may lie within a cell and not on a face. In this circumstance the velocity direction needs to be examined to determine which face is indeed the exit. All subsequent points along the streamline, however, will be on the bounding faces of cells.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">The equations to be solved</head><p>A very commonly used computational cell is the hexahedral element shown in <ref type="figure" target="#fig_3">Figure 3</ref>. For the purpose of this paper, it is assumed that the cell's faces are in Cartesian coordinate planes and its dimensions are normalised so that coordinates range from 0 to 1 along each axis. This type of cell is used in most tracking algorithms because integrations are made simple when performed within a unit cube, and it is easy to check whether the boundaries have been crossed when using stepwise integration methods. Like many algorithms, the one described here loses no generality by being expressed in terms of the unit cube since a mapping function can be used to transform to and from a general curvilinear cell. A good account of the trilinear mapping function is given by Eliasson, Oppelstrup and Rizzi <ref type="bibr">[8]</ref>. Since this algorithm is intended for general application, the mass flux will be assumed to be different from the velocity. The notation V = pv, where V ( = V i + V j + W k ) is the mass flux and v ( = ui + vj + wk) is the velocity, will be used.</p><p>For incompressible flows the equations involving mass flux can then be converted to equations involving velocity by disregarding the case of the symbols.</p><p>Stream functions can be calculated by assuming that they are trilinear within the cell. Higher order functions are not needed to satisfy continuity because mass conservation is always ensured by equation <ref type="formula">7</ref>. Substitution of the trilinear function into equations (5) and (6) gives, A typical f-g diagram for a hexahedral cell with two trilinear stream functions is shown in <ref type="figure" target="#fig_4">Figure 4</ref>. Each of the eight vertices has an associated pair of stream functions which yields a total of 16 unknown variables.</p><p>Although there are 16 coordinates which define the f-g diagram, only 11 equations need to be found and solved. The diagram has 5 degrees of freedom arising from the fact that it only has to represent areas correctly to portray the mass flow within a cell. It is therefore unaffected by equiaffine (area preserving) transformations. These include arbitary translations, rotations, complementary scaling (s, = Us,) and single axis shears. In practice, the 5 degrees of freedom permit the arbitary specification of 5 coordinates to begin the construction of the diagram. The relationships between the trilinear stream functions and the velocity field can be determined by substituting <ref type="bibr" target="#b8">(13)</ref> and <ref type="formula">14</ref>back into equation <ref type="formula">7</ref>. This however yields complex non-linear equations for velocity which are in terms of all of the sixteen variables. It is possible to use these equations to derive expressions for the mass flux components and their gradients in terms of the comer values of f and g. These equations can then be manipulated using a considerable amount of algebra to yield inverse relationships which can be used to produce the f-g diagram for a cell. An alternative to direct algebraic manipulation, and more elegant approach, is a procedure based on geometrical arguments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>g '</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">A graphical solution method</head><p>The equations defining the mass flux and mass flux gradients on the cell faces are related to areas on the f-g diagram. Consider the representation of the cell's z=O face. The mass flux through this face is The terms in brackets are cross products defined by where a, b, c, or d denote the mesh point suffixes used in equation <ref type="formula">15</ref>. The total mass flow through the face can be evaluated by integrating (15). This yields which is numerically equal to the area of the quadrilateral formed by the points 000,010,110, and 100, as illustrated in <ref type="figure" target="#fig_5">Figure 5(a)</ref>. The mass flux gradients can be calculated by taking the partial derivatives of (15) with respect to x and y,</p><formula xml:id="formula_4">wx = {floo -fOOO, gllo -g01oJ (18) (19)</formula><p>These too have geometrical meanings on the f-g diagram, as illustrated in <ref type="figure" target="#fig_5">Figures 5(b)</ref> and 5(c). W, is equal to twice the area of the quadrilateral (000,110,100,010) and W, is twice the area of the quadrilateral <ref type="bibr">(OOO,</ref><ref type="bibr">100,</ref><ref type="bibr">010,</ref><ref type="bibr">110)</ref>. The terms W, and Wy can, in practiee, be determined from the mass flux field using central differences.</p><p>Once these three areas are known the shape of the face can be determined within the five degrees of freedom described previously. For example, by specifying that the point (fooo,gooo) lies at <ref type="figure">(O,O)</ref>, and that the point (floo,glocJ lies at (l,O), and that foro is zero, the remaining three points can be calculated using the equations for the areas defined by W, W, and W,. Having constructed the representation of the z=O face, those for the x=O and y=O faces follow using U, U,, Uz and V, Vx, Vz respectively. These two faces involve finding 6 additional coordinates: matching the appropriate areas generates the required 6 equations. With three of the faces completed, there remains only one point, namely (f111,g111), to be determined to complete the representation. Any two of the three values U(x=l), <ref type="bibr">V(y=l)</ref> or W(z=l) can be used to generate the two necessary equations. Note that only two of these quantities are independent, since the f-g representation ensures the total mass flow through all the cell faces is zero. -100 100 -100 100 -100 100 .</p><formula xml:id="formula_5">w, = If110 -floo, go10 -moo) 1 f f (bl (Cl</formula><p>-100 100 -100 100 -100 300</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Calculating the exit point</head><p>Given the (x,y,z) coordinates of a point in real space, its image in the f-g plane can be easily calculated by substituting x,y, and z into the trilinear functions, equations (1 3) and <ref type="bibr" target="#b9">(14)</ref>. Along a streamline the stream functions remain constant, so that on the f-g diagram a streamline is represented by a point, <ref type="bibr">(fs,g,)</ref> say. Generally only two faces can surround a point on the diagram, the only exception is when the point lies on an edge. The exit face can therefore be found by determining which face, other than the inlet face, bounds the point (fs,gs).</p><p>The identification of the bounding quadrilateral is achieved using a simplified version of the 'point in a polygon' algorithm by Sloan <ref type="bibr" target="#b9">[14]</ref>. A determinant is evaluated for each edge on a given face: if the signs of these determinants are all the same, then the face surrounds the point.</p><p>The Cartesian coordinates of the exit point that correspond to (fs,gs) are found by simultaneously solving the equations for f and g on the exit face. The trilinear equations reduce to bilinear forms on a face and the solution turns out to be a quadratic for each of the coordinates. Only one of the roots from each function will be valid and lie within the normalised 0-1 range.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Testing and Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Test problems</head><p>The principle objectives of the tests applied to the new algorithm were to ensure that it was implemented correctly and to ascertain its speed advantage over more conventional time stepping methods. Accordingly the new algorithm was applied to two standard test problems with a velocity field given by,</p><formula xml:id="formula_6">W = -2az +c.<label>(20)</label></formula><p>U= axby ; V = bx + ay ;</p><p>This velocity field produces a flow which is rotating about the z axis and spiralling inwards. The constants used in the two test problems were;</p><p>1. Helical flow, a=O, b=l, c=l 2. Spiralling flow, a= -0.5, b=6, c =-Zmax</p><p>Both the flows have been tested using three different mesh and domain sizes, the specifications of which are given in <ref type="table">Table 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 1. Mesh sizes and domain dimensions for the test flows</head><p>The new algorithm and a conventional streamline tracking algorithm based on trilinear interpolation of the velocity components and 4th order Runge-Kutta integration were applied to these test problems. It is important to note that equation <ref type="formula" target="#formula_6">20</ref>defines a velocity field which can be described exactly by trilinear interpolation and, as has been reported by Mallinson</p><p>[9], the accuracy of this interpolation method is not in question for these simple flows. Indeed, both algorithms produced identical results.</p><p>Plate 1 shows two streamlines constructed using the local tracking algorithm for the helical flow, which is similar to that produced by a spinning propeller. The corresponding "whole field" solution for the stream functions has also been produced for this flow. The two stream surfaces which intersect to form these streamlines are shown in Plate 2. These were generated using an isosurface algorithm applied to the fields of stream functions.</p><p>The streamlines in Plate 3 are those produced by the spiralling flow and were initiated from points along a line on the inlet plane. They are colour coded according to w, the axial component of velocity.</p><p>The construction of streamlines can be used to form stream ribbons, as shown in Plate 4. These have been produced by connecting adjacent streamlines with a strip of triangular polygons to which Gouraud shading and a lighting model has been applied. The wide ribbon shown in Plate 5 clearly illustrates the deformation and rotation of the flow. This technique can be extended to generate stream surfaces in the absence of a "whole field" solution for the stream functions.</p><p>The last example, Plate 6, is of a closed cavity convection flow in a 21x21~42 cell grid. Streamlines tracked within this cavity carry on indefinitey and must be stopped after crossing a specified number of cells. The streamline shown here was terminated after crossing 2000 cells. Using the stream function algorithm on an IBM RS6000 computer, streamlines like this can be generated in a fraction of a second giving near real-time performance. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Speed comparisons</head><p>An evaluation of the speed of the new algorithm was made using the spiralling flow as the test problem. The Runge-Kutta integration employed in the conventional algorithm is usually implemented with an adaptive time stepping method. The tests presented here however use a fixed number of time steps so that a direct comparison can be made between the two algorithms. Typically, adaptive procedures use between 1 and 10 time steps per cell with 5 steps being a representative average. The timing tests were therefore performed using 1, 5, and 10 steps per cell.</p><p>For the stream function method results are given for two cases. One is where the stream functions have been initially evaluated and stored for the whole grid, the other is where they have been calculated "on the fly" as cells are encountered in the tracking process. Since the storage of 11 variables per cell represents a considerable memory overhead, the initial global evaluation approach may be impractical for large grid solutions.</p><p>The times reported in <ref type="table">Table 2</ref> are for the calculation of the 9 streamlines shown in Plate 3. Calculations were performed on an IBM4341 computer and results are given in seconds of CPU time. Tabulated times represent the average of three runs.</p><p>The single time step case offers a direct comparison between the workloads associated with the trilinearfiunge-Kutta method and the new algorithm. Despite its apparently greater complexity, the new algorithm involves approximately 75% of the work associated with a single time step advance using the trilineadRunge-Kutta algorithm.</p><p>The speed improvements offered by the new algorithm are approximately 4 and 8 when compared with 5 time steps and 10 time steps respectively per cell using the conventional method. These factors increase to 6.5 and 13 respectively if the stream function values are stored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stream function I Conventional</head><p>Stored I "on the I 1 step 1 5 steps I IO step <ref type="table">Table 2</ref>. CPU time (seconds) taken to produce the streamlines illustrated in Plate 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>A new algorithm for tracking streamlines has been developed based on the evaluation of two sueam functions within a computational cell. The method produces identical results to conventional time stepping methods and preliminary tests indicate that it offers a considerable speed advantage.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>The geometry of a streamline showing the tangency condition.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 2. The streamline formed by the intersection of stream surfaces f, and 9,.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>whereby streamlines are tracked between computational cell boundaries. A local stream function algorithm consists of the following steps. 1. For each cell, compute stream functions from the velocity or mass flux values associated with the cell. (This step may be performed initially for the whole mesh, or "on the fly" as cells are encountered by the tracking process.) 2. Given the entry point of a streamline into cell, locate the image of that point in the f-g diagram.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>The geometry and notation used to describe a hexahedral cell in cartesian space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>The f-g representation of the mass flow through the cell shown in Figure 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>Areas formed by the f-g representation of the mass flux through the z=O face.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>(</head><label></label><figDesc>See oolorplates, p . CP-8.)</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We thank IBM (NZ) Ltd, New Zealand Lotteries Commission, BHP Research and New Technology (Australia), and Comalco Research Centre (Australia) for their support and purchase of computer equipment on which this research was conducted. This project was supported in part by the University of Auckland Research Grants Committee, and by BHP Research and New Technology.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A Theoretical and Experimental Investigation of Natural Convection in a Porous Medium</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H D</forename><surname>Holst ; G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mallinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">; Arl</forename><surname>De Vahl Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Reprort</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1970" />
		</imprint>
		<respStmt>
			<orgName>Univ. of Calgary</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
	<note>Three Dimensional Natural Convection in a Box: a Numerical Study</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Particle Tracking for 3-Dimensional Fluid Flow Predictions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Matthews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">S</forename><surname>Wilkes</surname></persName>
		</author>
		<idno>12153</idno>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
	<note type="report_type">AERE Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">T r a j e c t o r y Integration in Vortical Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Murman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Powell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">A I M Journal</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An Algorithm for Tracking Fluid Particles in Numerical Simulations of Homogeneous Turbulence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K</forename><surname>Volpe ; P</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">B</forename><surname>Yeung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pope</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIAA Paper 87-1 182</title>
		<imprint>
			<date type="published" when="1987-06" />
			<biblScope unit="volume">79</biblScope>
			<biblScope unit="page">373</biblScope>
		</imprint>
	</monogr>
	<note>Streamlines and Streamribbons in Aerodynamics</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">STREAM 3-0: Computer Graphics Program for Streamline Visualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Buning ; P. Eliasson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oppelstrup</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Rizzi ; G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mallinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Engineering Software</title>
		<editor>G. de Val Davis and C. Fletcher, North Holland</editor>
		<imprint>
			<date type="published" when="1988-07" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="982" to="984" />
		</imprint>
	</monogr>
	<note>Computational Fluid Mechanics</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Handscombe</surname></persName>
		</author>
		<title level="m">Spline Representation of Incomp re ssib 1 e Flow</title>
		<meeting><address><addrLine>Oxford University Report</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">P a r t i c l e Tracking f o r 3-Dimensional Fluid Flow Predictions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Mathew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">S</forename><surname>Wilkes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AERE (Harwell) Report R 12153</title>
		<imprint>
			<date type="published" when="1986-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Incompressible Flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Panton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
			<publisher>Wiley and Sons</publisher>
			<biblScope unit="page" from="303" to="316" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Stream Functions in 3-Dimensional Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">S</forename><surname>Yih</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1957" />
			<biblScope unit="page">445</biblScope>
			<pubPlace>La Houlle Blanche</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Point -In-Polygon Program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">W</forename><surname>Sloan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Eng. Software</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">8</biblScope>
			<date type="published" when="1985" />
		</imprint>
	</monogr>
	<note>pp 45. (See wlorplates</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
