<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/pisenberg/grobid/grobid-0.6.1/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Visualization of High Resolution, Three-Dimensional, Nonlinear Finite Element Analyses *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><forename type="middle">A</forename><surname>Christon</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Lawrence Livermore National Laboratory</orgName>
								<address>
									<postBox>P.O. Box 808</postBox>
									<postCode>94550</postCode>
									<settlement>Livermore</settlement>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Spelce</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Lawrence Livermore National Laboratory</orgName>
								<address>
									<postBox>P.O. Box 808</postBox>
									<postCode>94550</postCode>
									<settlement>Livermore</settlement>
									<region>California</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Visualization of High Resolution, Three-Dimensional, Nonlinear Finite Element Analyses *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.1" ident="GROBID" when="2021-02-19T20:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
				<p>A two-pass surface extraction algorithm for adaptive finite element meshes is presented in the context of a visualization study for a particle impact and a turbine blade containment problem. The direct use of finite element data structures for the computation of external surfaces, surface normals, and derived physical quantities is discussed. A n overview of the inbetweening which accounts for rigid body dynamics effects is presented with a brief discussion of a &quot;directto-videodisk&quot; animation strategy. &apos;Work performed under the auspices of the U. S. Department of Energy by the Lawrence Livermore National Laboratory under contract No. W-7405-ENG-48.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Scientific Visualization is the process whereby numerical data is transformed into a visual form to aument the process of discovery and understanding [I.</p><p>Visualizing the data generated by finite element analyses presents many challenges due to the geometric complexity and the presence of multiple materials and element types. The data produced by a finite element analysis code can consist of time varying geometry, temperature, stress, strain and possibly mesh topology. Further, the mesh topology may be heterogeneous in two aspects: first, the topology may encompass beam, shell, and solid elements (1-D, 2-D, and 3-D elements), and second, the topology is generally unstructured. The finite element model may include special features such as sliding interfaces or material boundaries which must be tracked with time. Additionally, treating both Lagrangian and Eulerian grid based data in a single graphics application is complicated by the volume of data produced when high resolution meshes are employed for analyses with many time steps. This is especially true considering the fact that the data is usually of a vector or tensor form (e.g., stress tensor).</p><p>This paper focuses upon the application of surface rendering techniques for finite element data primarily from large scale Lagrangian simulations of the transient dynamic response of solids and structures. One of the key components to visualizing this type of data is the ability to rapidly perform surface extraction while maintaining both topological adaptivity in the finite element mesh and volumetric information. Further, it is necessary to perform some type of data abstraction thereby reducing the order of the data from a second order tensor to a physically meaningful scalar field. Other key aspects of the visualization application include the ability to selectively display material components of the mesh, provide palette manipulation, map derived physical quantities into surface color, and perform in-betweening for animations. This must be done without inhibiting the ability to move randomly through large datasets viewing individual states in simulation time. The codes used to generate data for the visualization application discussed herein are DYNA3D <ref type="bibr" target="#b1">[2]</ref> and NIKE3D <ref type="bibr" target="#b2">[3]</ref> developed by the Methods Development Group at Lawrence Livermore National Laboratory (LLNL).</p><p>This paper presents an algorithm for surface extraction which provides the ability to incrementally adapt to topological changes during the finite element simulation. The algorithm is presented in the context of visualizing several large scale finite element analyses which involve both rigid body dynamic motion and localized plastic deformation. In the demonstration calculations, elements are eliminated from the simulation based upon a maximum strain failure criterion making it necessary to handle the arbitrary adaptive topology of the mesh. The adaptive aspect of the meshes considered makes it impossible to adopt the well known practice of generating a single list of external surface polygons thereby discarding all interior volumetric information. Instead, all volumetric data is preserved in a way which enables the continuous re-definition of external surfaces accounting for the topological evolution. The process of data abstraction and in-betweening for this application are briefly presented, with results in the form of a video tape, and still frames for the simulation of the impact of a high velocity particle on idealized turbine stator blades, and failure containment in a turbine engine shroud.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Surface Extraction with Volumetric Adapt ivity</head><p>In the finite element method, the physical domain of interest is approximated by a finite number of smaller sub-domains called elements. The elements U.S. Government Work Not protected by U.S. Copyright typically used consist of eight node hexahedra (bricks), four node quadrilaterals, and two node beams. For the purposes of surface extraction and rendering, both beams and quadrilateral elements may be ignored for obvious reasons. However, the brick elements require special attention because of the need to adapt incrementally and then render only external surfaces with the associated nodal point data. As mentioned above, the solid and shell elements in DYNASD can be suhjected to a strain failure criteria whereby the mesh topology will change with time. This requires the ability to preserve volumetric data while permitting incremental surface extraction both during the interactive interrogation process for data exploration and the in-betweening process for animation.</p><p>Unlike finite difference models which rely on logically regular grids, finite element models are topology based. <ref type="figure">Figure 1</ref> illustrates the three element types and their associated local canonical topological node numbering schemes. Here, the local nodal numbering simply implies the use of pointers for indirect addressing using the global node numbers. Thus, the global node numbering for the mesh provides a means for relating nodes to elements. The nodal connectivity data for a given element may be represented by Ci where i = 1 to N P e I and Npe is the number of nodes per element. Typically, finite element models group like elements together to simplify the connectivity (e.g., the connectivity is blocked into solid, shell and beam elements). In the case of the solid elements, Ci may be considered to be made up of six reduced sets of connectivity data which associates local nodal numbers with the faces of the solid elements. The reduced connectivity is referred to as Si where i = 1 to NnSe, and N,,,, is the number of nodes per surface element. The nodal connectivity for Si for the canonical local node numbering scheme in <ref type="figure">Figure 1</ref> is shown in <ref type="table" target="#tab_0">Table  1</ref>.</p><p>There are several surface extraction algorithms which may be applied to volumetric finite element data. The first is referred to as the assembled surface normal (ASN) algorithm <ref type="bibr" target="#b4">[4]</ref>. In the ASN algorithm, surface connectivity (Si) is used to construct normal vectors at the vertices of all solid elements allowing internal surfaces to be eliminated by noting that paired surfaces will generate vertex unit normals which essentially cancel out <ref type="figure" target="#fig_1">(Figure 2 )</ref> . Thus, by making use of the nodal numbering scheme embedded in the connectivity data (C,), it is possible to assemble global unit normal vectors as:</p><p>where en is a vector of unit normals, the (i) superscript indicates the current element number, Nhex is the number of solid elements, and j ranges over the number of nodes per surface of the solid element and is contained in Si. In Eq. 1, it is understood that the normal vector for each nodal point must be computed for each face to which it belongs in the solid element. After the global assembly has been performed, all nodal points which are interior to the body have a global unit normal whose components are zero. While providing a robust surface extraction mechanism, the ASN algorithm fails to retain both volumetric and topological information which is central to any adaptive scheme. Further, this approach proves far too computationally intensive requiring 24Nhex unit normal computations plus the global assembly operations for a given topology.</p><p>Another fre uently used algorithm is the polygonsearch/cancel ?PSC) algorithm <ref type="bibr" target="#b5">[5]</ref> which relies upon the nodal connectivity and avoids some of the problems associated with ASN. One difficulty with PSC is that it relies on a linear search which results in 0 ( ( 6 N h e z ) 2 ) operations. This can be improved by using a hash table lookup, but requires chaining to resolve collisions in the hash table. Neither the ASN nor the PSC algorithm inherently deals with volumetric adaptivity which is an important form of adaptivity found in finite element applications (albeit, only one form of adaptivity). It is from this point which we begin our description of the two pass surface extraction algorithm implemented herein. The first pass of the algorithm is only performed once because the resulting data structures contain all the necessary information for volumetric adaptivity.</p><p>Whereas the ASN and PSC algorithms essentially discard all volumetric data, it is convenient and computationally efficient to retain volumetric information for the adaptive nature of the problems considered herein. It is possible to apply the ASN or PSC algorithm after each adaptive step to extract the current external surface, but this approach involves considerable overhead which can be avoided. By viewing the internal surfaces as paired between adjacent elements as in the ASN algorithm <ref type="figure" target="#fig_1">(Figure 2 )</ref> , it is possible to combine features of the ASN and PSC algorithms to efficiently construct the tables necessary to perform an incremental surface extraction while maintaining volumetric adaptivity. Note that the incorporation of adaptivity for beam and shell elements is essentially automatic given the fact that the analysis code produces the necessary data for the determination of element activity at each time step in the simulation.</p><p>In finite element node numbering there can be no redundant nodes (i.e., two node numbers with identical spatial coordinates) except where there are special  model features such as sliding interfaces. Therefore, the key to incremental surface extraction with volumetric adaptivity is the identification of paired internal surfaces in the mesh. This identification is considered to be the first pass in the two pass extraction algorithm discussed below. We define a hash function which will be used in a table of length SN,,, for the solid elements, i.e., the worst case possible is that all faces of the brick elements are exterior faces (a real possibility in the most general case).</p><formula xml:id="formula_0">i = l</formula><p>Here S i represents the surface connectivity in a sorted ascending order, and wi is a nodal weight. The nodal numbering scheme in the finite element method ensures that there are no repeated nodal numbers, that is, <ref type="figure">ni E [l,N,, where N,</ref> is the total number ordered nodal connectivity used in Eq. 2, it is possible to define the nodal weighting as: wi = This choice in weights helps to maintain a relatively high degree of dispersion in the hash keys, but by no means ensures that each hash value will be unique [SI. However, the goal here is not to use the hash keys for direct addressing, but to identify paired surfaces in the volume. Therefore, the hash keys are entered into the hash table in sequential order as they are computed.</p><p>As the hash values are computed and entered in the hash table, the associated element number and face number are also entered in the table. An indexed heap sort [7J, (an 0 N ln(N)) algorithm), is used to generthis list of hash values, it is possible to identify any paired surfaces in the volume because such surfaces will yield identical hash function values which are ultimately adjacent to each other in the ordered hash list. During the traversal of the hash list, a master surface list which contains a count of surfaces which may be paired (i.e., surfaces which are back-to-back) for each hash value is generated to enable the detection of invalid pairing in the ordered hash list. A maximum of two element and face numbers are included in the master surface list for later use in the second-pass volume adaptive surface extraction.</p><p>In the second pass of the surface extraction algorithm, the master surface list is used to generate a polygon vertex pointer list which includes the global node numbers for the polygon vertices, and an element material number. At this point, the active shell and beam vertices and materials are concatenated to the polygon vertex pointer list. Initially, only unpaired surfaces from the elements are added to the master surface list.</p><p>As finite elements in the simulation fail (according to the maximum strain at failure criteria) inactive elements are removed by setting an activity flag to zero. This activity flag is available in the graphics database, and it is used to remove inactive surfaces from the polygon pointer list, as well as, to split paired surfaces where failed elements have been removed. <ref type="figure">Figure 3</ref> il-of nodal points in t b e mesh. decause of the locally ate a list of has 6 values in ascending order. Traversing lustrates the elimination of a single element revealing the previously hidden interior surfaces. The element number which has been identified for failure is used to locate and decrement the face count in the master surface list. Any faces in the master surface list with a face count of 1 are considered to be valid surfaces for display. The canonical local node numbering scheme for the solid elements ensures that exposed polygon normals face outwards in the animation scene at all times.</p><p>Vertex normals for the active polygons are computed in a two-step process where the first step involves the computation of vertex normals and the assembly of these normals into a global normal vector as:</p><p>(3)</p><formula xml:id="formula_1">i = l j = 1</formula><p>where N, is the number of active surfaces for rendering. During the assembly of the global normals, a count of polygons contributing to each nodal normal is accumulated. This allows an averaged normal at each polygon vertex to be computed. To account for "sharp" corners, a simple heuristic based upon the dot product of a vertex normal and its corresponding globally averaged normal is employed to decide when to use the averaged normal, and when to use the local normal. This provides a fast mechanism for the detection of edges which exploits the existing finite element data structures already in place.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Data Abstraction</head><p>The implementation of the finite element visualization code is based upon Silicon Graphics' GL library. The surface rendering techniques allow the specification of user defined material properties such as specularity, diffusivity, and color, as well as the color and position of up to eight light sources in a simplified scene description. Both vector (wire frame) and solid images (i.e., surface rendering) can be generated interactively, with field variables such as time dependent effective stress or plastic strain optionally mapped onto the surface of the time varying geometry. Multiple selectable color palettes are available for mapping the variation of field variables to surface color.</p><p>Mapping field variables onto surface color implies that a representative physically meaningful scalar field is available. For the analysis codes considered here, a stress tensor ( u i j ) and plastic strain ( c p ) are readily available. While the plastic strain is a scalar valued function, the stress is a symmetric tensor meaning that there are six unique values of stress available at each node in the mesh, or alternatively at each polygon vertex. The stress tensor may be reduced to an effective stress which is a scalar valued function defined as: In Eq. 4 and Eq. 5, the indicia1 notation implies a summation on repeated indices, and S i j denotes the Kronecker delta [SI.</p><p>To perform a table lookup or function evaluation for color specification, the scalar valued function must be appropriately scaled. Here, the scalar valued lookup function, 4, is computed as: <ref type="bibr" target="#b6">(6)</ref> In Eq. 6, the min/max values are global minimums and maximums over the entire simulation. The scalar valued function, 4, is used as the entry into either a color lookup table, or is passed to a color map function evaluation routine. The individual vertex colors are set based upon a user specified field cutoff parameter. Vertex colors inherit the specified material colors everywhere the field value (4) is below the cutoff.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">In-Betweening/Animation Strategy</head><p>The type of animation technique used for the finite element data considered herein is referred to as keyframe because it relies on "key frames" of data computed at discrete times levels by the analysis codes. In order to produce enough animation frames for video (30 frames per second of play time), it is necessary to interpolate between the key-frames from the analysis code. This process is often referred to as "inbetweening". This section briefly discusses the type of interpolation used for animating the key-frame data, and the use of a "direct-tevideodisk" animation strategy.</p><p>For Lagrangian finite element calculations, the presence of rigid body dynamics can cause difficulties in the interpolation process. When rigid body dynamics are not important, a linear in-betweening is used where the time rate of change of spatial coordinates and field variables is computed based on key-frame data. As is typical with grid based explicit transient solutions to systems of partial differential equations, the physical time step size varies during the simulation due to stability constraints.</p><p>Inactive solid and shell elements are removed from the list of candidate elements for rendering when the interpolated time spans a simulated time level accounting for the topological adaptivity in the simulation. When rigid body dynamics is important (e.g., flight of an object before impact), it is necessary to modify the in-betweening algorithm. In this case, user input is required to identify objects by material in the mesh for material specific conditional interpolation. The conditional interpolation must be activated and de-activated at the appropriate times in the animation to capture the correct impact event adequately. If this approach is not taken, artifacts can be produced when key-frames span an important event such as the impact of two bodies. In the case of the particleturbine stator blade simulation, the plastic deformation of the turbine blades and the associated plastic strain field would appear prematurely in <ref type="figure" target="#fig_4">Figures 5 and 6</ref> if the conditional interpolation were not applied correctly.</p><p>Typical "disk based" animation systems require the animator to render and store images on rotating disk, only to later re-display, scan convert and record the images on video tape or videodisk. The scan conver-sion step is also referred to as digital encoding, and is the process whereby the RGB color signals are converted t o composite signals such as NTSC (National Television Standards Committee) <ref type="bibr" target="#b9">[9]</ref>.</p><p>At best, disk based animations are batch processes, often requiring batch renderin and consumin large amounts of disk resources. $he approach aiopted here was to avoid the use of rotating disk for animation frames by recording the frames directly to a laser videodisk. The desired interactivity of the visualization application dictated the use of a hardware rendering platform, and the ability to perform scan conversion of images to a format appropriate for recording (e.g. Beta, NTSC, PAL, etc.) "on the fly".</p><p>The Silicon Graphics Video Framer provides a secondary low-resolution frame buffer for use during digital encoding and recording. Additionally, the Video Framer provides a V-LAN transmitter enabling the code for control of the video transport device to be essentially independent of the actual video transport device. For example, the same coded instructions can be used with a frame accurate video tape deck instead of a laser videodisk. The trade-off with the "direct-todisk" animation system is that the hardware rendering process can produce somewhat lower image uality in comparison to other rendering techniques ?e.g., ray tracing). However, it offers the ability for the analyst or researcher to immediately preview dynamic processes both interactively on the workstation, and via playback from the videodisk.</p><p>The "direct-to-disk" approach enables the user to preview an animation, then directly record the animation from a window on the workstation t o the videodisk. When compared to disk based animation, this approach reduces the total time required to produce an animationsegment, and reduces the impact on computing resources. Key frames may be previewed individually, and optionally written to a 24-bit HDF file <ref type="bibr">[lo]</ref> for later use such as generation of 35" slides.</p><p>Alternatively, key frames may be viewed in an NTSC mode in order to allow the user to compensate for color changes and image degradation characteristic of NTSC video.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results and Conclusions</head><p>The results presented in this section are in the form of a visualization study performed on several "proofof-concept" problems using the newly implemented SAND (Slide-surfaces with Adaptive New Definitions) technology in DYNA3D. DYNA3D is a nonlinear, time explicit, 3-D finite element code for solid and structural mechanics. SAND technology extends the capability of DYNA3D to include penetration problems not typically analyzed with a Lagrangian code. The images in <ref type="figure" target="#fig_3">Figures 4, 5, 6 and 7, 8, 9</ref> illustrate the SAND technology as applied to a particleturbine stator blade impact, and a turbine blade fragment containment problem. Each simulation required approximately 10,000 solid elements (0( 10,000) nodes). The simulated time is on the order of milliseconds for both problems. In each analysis, plastic strain was chosen as the field variable to be mapped onto the geometry.      In the images where effective plastic strain is mapped onto the geometry, red indicates the maximum while blue signifies the minimum value of the plastic strain. The first simulation demonstrates a particle traveling at high velocity and impacting idealized turbine stator blades. The sequence of images in <ref type="figure" target="#fig_3">Figures 4, 5 and 6</ref> clearly illustrates the local, short time hydrodynamic response near the particle coupled with the global, long time structural response of the blades. A symmetry plane is used to simplify the computation, and to illustrate the variation of plastic strain through the volume of the plates along the symmetry plane.</p><p>The second simulation shown in <ref type="figure" target="#fig_6">Figures 7, 8</ref> and 9 demonstrates a turbine blade fragment striking a containment ring. Elapsed physical time in the simulation is approximately 1 millisecond. At the midpoint in the simulation, the blade fragment has not yet pierced the containment ring, but significant localized plastic deformation is apparent. At the end of the simulation, the turbine blade tip has nearly passed completely through the containment ring. A "shear plug" has been punched from the containment ring and is falling just below the turbine blade tip. The extreme plastic deformation (shown as red ) remains highly localized in the containment ring.</p><p>The successful application of the two-pass surface extraction algorithm to this class of problems has been demonstrated for a simplified rendering/animation application. This algorithm permits the complex topology of finite element meshes with arbitrary geometries to be handled efficiently without discarding volumetric data which is crucial to adaptive problems. Further, the implementation of the "direct-to-disk" animation process has proved invaluable in placing the interrogation and animation tool in the hands of the analysts performing the finite element simulations. This tool enables analysts to gain new insight into the voluminous data generated by large scale simulations which ultimately increases the value of such simulations.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>2 Figure 1 :</head><label>21</label><figDesc>Canonical Local Node Numbering in Computational Space for Brick, Shell, and Beam Elements. Shared (Paired) Surface Shared Nodes with Shared Spatial Coordinates</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Internal Paired Surfaces between Solid Elements.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>where 1 1 Figure 3 :</head><label>13</label><figDesc>Elimination of Solid Element and the Resulting Exposure of New Surfaces for Rendering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>High Speed Particle Impact on an Idealized Turbine Stator Blade: Initial View.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>High Speed Particle Impact on an Idealized Turbine Stator Blade: Mid-point in the Simulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>High Speed Particle Impact on an Idealized Turbine Stator Blade: Final State in Simulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>(Figure 7 :</head><label>7</label><figDesc>See color plaies, p. CP35.) Turbine Blade Fragment Striking a Containment Shroud: Initial View.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Turbine Blade Fragment Striking a Containment Shroud: Mid-point in the Simulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Turbine Blade Fragment Striking a Containment Shroud: Final State in Simulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Face Nodal Connectivity for the Solid Element.</figDesc><table><row><cell>ace No. I Node-</cell><cell></cell><cell cols="2">ode-3 1 Node-</cell></row><row><cell>n4</cell><cell></cell><cell>n7</cell><cell>n3</cell></row><row><cell></cell><cell>n5</cell><cell>nl3</cell><cell>n4</cell></row><row><cell></cell><cell>n4</cell><cell>n3</cell><cell></cell></row><row><cell>n5</cell><cell>n6</cell><cell>n7</cell><cell>nl3</cell></row></table><note></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The SAND technology was developed and implemented in DYNA3D by Robert G. Whirley and Bruce E. Englemann of the Methods Development Group at LLNL.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">H</forename><surname>Mccormick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Defanti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visualization in Scientific Computing</title>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">21</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">DYNA3D: A Nonlinear, Explicit, Three-Dimensional Finite Element Code for Solid and Structural Mechanics -User Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Whirley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">0</forename><surname>Hallquist</surname></persName>
		</author>
		<idno>UCRL-MA-107254</idno>
		<imprint>
			<date type="published" when="1991-05" />
		</imprint>
		<respStmt>
			<orgName>Lawrence Livermore National Laboratory</orgName>
		</respStmt>
	</monogr>
	<note>University of California</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">NIKE3D: A Nonlinear, Implicit, Three-Dimensional Finite Element Code for Solid and (See oolor plates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">M</forename><surname>Maker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Ferencz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Hal-Iquist</title>
		<imprint>
			<biblScope unit="page">35</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m">Structural Mechanics -User&apos;s Manual</title>
		<imprint>
			<date type="published" when="1991-01" />
		</imprint>
		<respStmt>
			<orgName>University of California, Lawrence Livermore National Laboratory</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">UCRL-MA-105268</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An Assembled Normal Algorithm for Interior Node Removal in Three-Dimensional Finite Element Meshes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Belytschko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Law</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Engineering with Computers</title>
		<imprint>
			<date type="published" when="1985" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Advanced Graphicsfor Finite Element Results Display</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Winget</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advanced Topics in Finite Element Analysis, ASME PVP</title>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="53" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Tenenbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Langsam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Augenstein</surname></persName>
		</author>
		<title level="m">Data Structures Using C</title>
		<meeting><address><addrLine>Englewood Cliffs, New Jersey</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall, Inc</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="492" to="500" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Art of Scientific Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Flannery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Teukolsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Vetterling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Numerical Recipes</title>
		<meeting><address><addrLine>New York, New York</addrLine></address></meeting>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="229" to="237" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">C</forename><surname>Fung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New Jersey</title>
		<meeting><address><addrLine>Englewood Cliffs</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="1965" />
			<biblScope unit="page" from="80" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Video Technology for Computer Graphics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Winkler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Siggraph &apos;91 C17 Course Notes</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m">National Center for Supercomputing Applications, N C S A HDF Call Interfaces and Utilities</title>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
